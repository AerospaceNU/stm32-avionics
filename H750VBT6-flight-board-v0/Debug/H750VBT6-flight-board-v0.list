
H750VBT6-flight-board-v0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fde8  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08010080  08010080  00020080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080100f0  080100f0  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  080100f0  080100f0  000200f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080100f8  080100f8  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080100f8  080100f8  000200f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080100fc  080100fc  000200fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  24000000  08010100  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c84  240001e4  080102e4  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24001e68  080102e4  00031e68  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00047926  00000000  00000000  00030212  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000075a5  00000000  00000000  00077b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022a0  00000000  00000000  0007f0e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001fc8  00000000  00000000  00081380  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000447d1  00000000  00000000  00083348  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002867d  00000000  00000000  000c7b19  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00187f8d  00000000  00000000  000f0196  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00278123  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000091ec  00000000  00000000  002781a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000010b  00000000  00000000  0028138c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240001e4 	.word	0x240001e4
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08010068 	.word	0x08010068

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240001e8 	.word	0x240001e8
 80002d4:	08010068 	.word	0x08010068

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08a      	sub	sp, #40	; 0x28
 80005dc:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005ea:	463b      	mov	r3, r7
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]
 80005f8:	615a      	str	r2, [r3, #20]
 80005fa:	619a      	str	r2, [r3, #24]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80005fc:	4b2e      	ldr	r3, [pc, #184]	; (80006b8 <MX_ADC1_Init+0xe0>)
 80005fe:	4a2f      	ldr	r2, [pc, #188]	; (80006bc <MX_ADC1_Init+0xe4>)
 8000600:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000602:	4b2d      	ldr	r3, [pc, #180]	; (80006b8 <MX_ADC1_Init+0xe0>)
 8000604:	2200      	movs	r2, #0
 8000606:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000608:	4b2b      	ldr	r3, [pc, #172]	; (80006b8 <MX_ADC1_Init+0xe0>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800060e:	4b2a      	ldr	r3, [pc, #168]	; (80006b8 <MX_ADC1_Init+0xe0>)
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000614:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <MX_ADC1_Init+0xe0>)
 8000616:	2204      	movs	r2, #4
 8000618:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800061a:	4b27      	ldr	r3, [pc, #156]	; (80006b8 <MX_ADC1_Init+0xe0>)
 800061c:	2200      	movs	r2, #0
 800061e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000620:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <MX_ADC1_Init+0xe0>)
 8000622:	2200      	movs	r2, #0
 8000624:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000626:	4b24      	ldr	r3, [pc, #144]	; (80006b8 <MX_ADC1_Init+0xe0>)
 8000628:	2201      	movs	r2, #1
 800062a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800062c:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <MX_ADC1_Init+0xe0>)
 800062e:	2200      	movs	r2, #0
 8000630:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000632:	4b21      	ldr	r3, [pc, #132]	; (80006b8 <MX_ADC1_Init+0xe0>)
 8000634:	2200      	movs	r2, #0
 8000636:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <MX_ADC1_Init+0xe0>)
 800063a:	2200      	movs	r2, #0
 800063c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800063e:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <MX_ADC1_Init+0xe0>)
 8000640:	2200      	movs	r2, #0
 8000642:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000644:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <MX_ADC1_Init+0xe0>)
 8000646:	2200      	movs	r2, #0
 8000648:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800064a:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <MX_ADC1_Init+0xe0>)
 800064c:	2200      	movs	r2, #0
 800064e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000650:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <MX_ADC1_Init+0xe0>)
 8000652:	2200      	movs	r2, #0
 8000654:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000658:	4817      	ldr	r0, [pc, #92]	; (80006b8 <MX_ADC1_Init+0xe0>)
 800065a:	f001 fcf1 	bl	8002040 <HAL_ADC_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000664:	f000 fc4c 	bl	8000f00 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800066c:	f107 031c 	add.w	r3, r7, #28
 8000670:	4619      	mov	r1, r3
 8000672:	4811      	ldr	r0, [pc, #68]	; (80006b8 <MX_ADC1_Init+0xe0>)
 8000674:	f002 fab6 	bl	8002be4 <HAL_ADCEx_MultiModeConfigChannel>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800067e:	f000 fc3f 	bl	8000f00 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <MX_ADC1_Init+0xe8>)
 8000684:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000686:	2306      	movs	r3, #6
 8000688:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800068a:	2300      	movs	r3, #0
 800068c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800068e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000692:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000694:	2304      	movs	r3, #4
 8000696:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069c:	463b      	mov	r3, r7
 800069e:	4619      	mov	r1, r3
 80006a0:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_ADC1_Init+0xe0>)
 80006a2:	f001 fe6d 	bl	8002380 <HAL_ADC_ConfigChannel>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80006ac:	f000 fc28 	bl	8000f00 <Error_Handler>
  }

}
 80006b0:	bf00      	nop
 80006b2:	3728      	adds	r7, #40	; 0x28
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	24000278 	.word	0x24000278
 80006bc:	40022000 	.word	0x40022000
 80006c0:	10c00010 	.word	0x10c00010

080006c4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
 80006d8:	615a      	str	r2, [r3, #20]
 80006da:	619a      	str	r2, [r3, #24]

  /** Common config 
  */
  hadc2.Instance = ADC2;
 80006dc:	4b28      	ldr	r3, [pc, #160]	; (8000780 <MX_ADC2_Init+0xbc>)
 80006de:	4a29      	ldr	r2, [pc, #164]	; (8000784 <MX_ADC2_Init+0xc0>)
 80006e0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006e2:	4b27      	ldr	r3, [pc, #156]	; (8000780 <MX_ADC2_Init+0xbc>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80006e8:	4b25      	ldr	r3, [pc, #148]	; (8000780 <MX_ADC2_Init+0xbc>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006ee:	4b24      	ldr	r3, [pc, #144]	; (8000780 <MX_ADC2_Init+0xbc>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006f4:	4b22      	ldr	r3, [pc, #136]	; (8000780 <MX_ADC2_Init+0xbc>)
 80006f6:	2204      	movs	r2, #4
 80006f8:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006fa:	4b21      	ldr	r3, [pc, #132]	; (8000780 <MX_ADC2_Init+0xbc>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000700:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <MX_ADC2_Init+0xbc>)
 8000702:	2200      	movs	r2, #0
 8000704:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000706:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <MX_ADC2_Init+0xbc>)
 8000708:	2201      	movs	r2, #1
 800070a:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800070c:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <MX_ADC2_Init+0xbc>)
 800070e:	2200      	movs	r2, #0
 8000710:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000712:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <MX_ADC2_Init+0xbc>)
 8000714:	2200      	movs	r2, #0
 8000716:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000718:	4b19      	ldr	r3, [pc, #100]	; (8000780 <MX_ADC2_Init+0xbc>)
 800071a:	2200      	movs	r2, #0
 800071c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800071e:	4b18      	ldr	r3, [pc, #96]	; (8000780 <MX_ADC2_Init+0xbc>)
 8000720:	2200      	movs	r2, #0
 8000722:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000724:	4b16      	ldr	r3, [pc, #88]	; (8000780 <MX_ADC2_Init+0xbc>)
 8000726:	2200      	movs	r2, #0
 8000728:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <MX_ADC2_Init+0xbc>)
 800072c:	2200      	movs	r2, #0
 800072e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000730:	4b13      	ldr	r3, [pc, #76]	; (8000780 <MX_ADC2_Init+0xbc>)
 8000732:	2200      	movs	r2, #0
 8000734:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000738:	4811      	ldr	r0, [pc, #68]	; (8000780 <MX_ADC2_Init+0xbc>)
 800073a:	f001 fc81 	bl	8002040 <HAL_ADC_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000744:	f000 fbdc 	bl	8000f00 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <MX_ADC2_Init+0xc4>)
 800074a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800074c:	2306      	movs	r3, #6
 800074e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000754:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000758:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800075a:	2304      	movs	r3, #4
 800075c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	4619      	mov	r1, r3
 8000766:	4806      	ldr	r0, [pc, #24]	; (8000780 <MX_ADC2_Init+0xbc>)
 8000768:	f001 fe0a 	bl	8002380 <HAL_ADC_ConfigChannel>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000772:	f000 fbc5 	bl	8000f00 <Error_Handler>
  }

}
 8000776:	bf00      	nop
 8000778:	3720      	adds	r7, #32
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	24000214 	.word	0x24000214
 8000784:	40022100 	.word	0x40022100
 8000788:	25b00200 	.word	0x25b00200

0800078c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b088      	sub	sp, #32
 8000790:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]
 80007a0:	615a      	str	r2, [r3, #20]
 80007a2:	619a      	str	r2, [r3, #24]

  /** Common config 
  */
  hadc3.Instance = ADC3;
 80007a4:	4b28      	ldr	r3, [pc, #160]	; (8000848 <MX_ADC3_Init+0xbc>)
 80007a6:	4a29      	ldr	r2, [pc, #164]	; (800084c <MX_ADC3_Init+0xc0>)
 80007a8:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007aa:	4b27      	ldr	r3, [pc, #156]	; (8000848 <MX_ADC3_Init+0xbc>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80007b0:	4b25      	ldr	r3, [pc, #148]	; (8000848 <MX_ADC3_Init+0xbc>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007b6:	4b24      	ldr	r3, [pc, #144]	; (8000848 <MX_ADC3_Init+0xbc>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007bc:	4b22      	ldr	r3, [pc, #136]	; (8000848 <MX_ADC3_Init+0xbc>)
 80007be:	2204      	movs	r2, #4
 80007c0:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80007c2:	4b21      	ldr	r3, [pc, #132]	; (8000848 <MX_ADC3_Init+0xbc>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80007c8:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <MX_ADC3_Init+0xbc>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80007ce:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <MX_ADC3_Init+0xbc>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007d4:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <MX_ADC3_Init+0xbc>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007da:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <MX_ADC3_Init+0xbc>)
 80007dc:	2200      	movs	r2, #0
 80007de:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007e0:	4b19      	ldr	r3, [pc, #100]	; (8000848 <MX_ADC3_Init+0xbc>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007e6:	4b18      	ldr	r3, [pc, #96]	; (8000848 <MX_ADC3_Init+0xbc>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007ec:	4b16      	ldr	r3, [pc, #88]	; (8000848 <MX_ADC3_Init+0xbc>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <MX_ADC3_Init+0xbc>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80007f8:	4b13      	ldr	r3, [pc, #76]	; (8000848 <MX_ADC3_Init+0xbc>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000800:	4811      	ldr	r0, [pc, #68]	; (8000848 <MX_ADC3_Init+0xbc>)
 8000802:	f001 fc1d 	bl	8002040 <HAL_ADC_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 800080c:	f000 fb78 	bl	8000f00 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_ADC3_Init+0xc4>)
 8000812:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000814:	2306      	movs	r3, #6
 8000816:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000818:	2300      	movs	r3, #0
 800081a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800081c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000820:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000822:	2304      	movs	r3, #4
 8000824:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	4619      	mov	r1, r3
 800082e:	4806      	ldr	r0, [pc, #24]	; (8000848 <MX_ADC3_Init+0xbc>)
 8000830:	f001 fda6 	bl	8002380 <HAL_ADC_ConfigChannel>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 800083a:	f000 fb61 	bl	8000f00 <Error_Handler>
  }

}
 800083e:	bf00      	nop
 8000840:	3720      	adds	r7, #32
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	240002dc 	.word	0x240002dc
 800084c:	58026000 	.word	0x58026000
 8000850:	04300002 	.word	0x04300002

08000854 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b090      	sub	sp, #64	; 0x40
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a69      	ldr	r2, [pc, #420]	; (8000a18 <HAL_ADC_MspInit+0x1c4>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d14e      	bne.n	8000914 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000876:	4b69      	ldr	r3, [pc, #420]	; (8000a1c <HAL_ADC_MspInit+0x1c8>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	3301      	adds	r3, #1
 800087c:	4a67      	ldr	r2, [pc, #412]	; (8000a1c <HAL_ADC_MspInit+0x1c8>)
 800087e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000880:	4b66      	ldr	r3, [pc, #408]	; (8000a1c <HAL_ADC_MspInit+0x1c8>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b01      	cmp	r3, #1
 8000886:	d10e      	bne.n	80008a6 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000888:	4b65      	ldr	r3, [pc, #404]	; (8000a20 <HAL_ADC_MspInit+0x1cc>)
 800088a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800088e:	4a64      	ldr	r2, [pc, #400]	; (8000a20 <HAL_ADC_MspInit+0x1cc>)
 8000890:	f043 0320 	orr.w	r3, r3, #32
 8000894:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000898:	4b61      	ldr	r3, [pc, #388]	; (8000a20 <HAL_ADC_MspInit+0x1cc>)
 800089a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800089e:	f003 0320 	and.w	r3, r3, #32
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80008a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	4b5e      	ldr	r3, [pc, #376]	; (8000a20 <HAL_ADC_MspInit+0x1cc>)
 80008a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ac:	4a5c      	ldr	r2, [pc, #368]	; (8000a20 <HAL_ADC_MspInit+0x1cc>)
 80008ae:	f043 0301 	orr.w	r3, r3, #1
 80008b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008b6:	4b5a      	ldr	r3, [pc, #360]	; (8000a20 <HAL_ADC_MspInit+0x1cc>)
 80008b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008bc:	f003 0301 	and.w	r3, r3, #1
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
 80008c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c4:	4b56      	ldr	r3, [pc, #344]	; (8000a20 <HAL_ADC_MspInit+0x1cc>)
 80008c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ca:	4a55      	ldr	r2, [pc, #340]	; (8000a20 <HAL_ADC_MspInit+0x1cc>)
 80008cc:	f043 0304 	orr.w	r3, r3, #4
 80008d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d4:	4b52      	ldr	r3, [pc, #328]	; (8000a20 <HAL_ADC_MspInit+0x1cc>)
 80008d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008da:	f003 0304 	and.w	r3, r3, #4
 80008de:	623b      	str	r3, [r7, #32]
 80008e0:	6a3b      	ldr	r3, [r7, #32]
    PA0     ------> ADC1_INP16
    PA1     ------> ADC1_INP17
    PA4     ------> ADC1_INP18
    PC4     ------> ADC1_INP4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80008e2:	2313      	movs	r3, #19
 80008e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008e6:	2303      	movs	r3, #3
 80008e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008f2:	4619      	mov	r1, r3
 80008f4:	484b      	ldr	r0, [pc, #300]	; (8000a24 <HAL_ADC_MspInit+0x1d0>)
 80008f6:	f003 ffeb 	bl	80048d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80008fa:	2310      	movs	r3, #16
 80008fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008fe:	2303      	movs	r3, #3
 8000900:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000906:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800090a:	4619      	mov	r1, r3
 800090c:	4846      	ldr	r0, [pc, #280]	; (8000a28 <HAL_ADC_MspInit+0x1d4>)
 800090e:	f003 ffdf 	bl	80048d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000912:	e07c      	b.n	8000a0e <HAL_ADC_MspInit+0x1ba>
  else if(adcHandle->Instance==ADC2)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a44      	ldr	r2, [pc, #272]	; (8000a2c <HAL_ADC_MspInit+0x1d8>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d14e      	bne.n	80009bc <HAL_ADC_MspInit+0x168>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800091e:	4b3f      	ldr	r3, [pc, #252]	; (8000a1c <HAL_ADC_MspInit+0x1c8>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	3301      	adds	r3, #1
 8000924:	4a3d      	ldr	r2, [pc, #244]	; (8000a1c <HAL_ADC_MspInit+0x1c8>)
 8000926:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000928:	4b3c      	ldr	r3, [pc, #240]	; (8000a1c <HAL_ADC_MspInit+0x1c8>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d10e      	bne.n	800094e <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000930:	4b3b      	ldr	r3, [pc, #236]	; (8000a20 <HAL_ADC_MspInit+0x1cc>)
 8000932:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000936:	4a3a      	ldr	r2, [pc, #232]	; (8000a20 <HAL_ADC_MspInit+0x1cc>)
 8000938:	f043 0320 	orr.w	r3, r3, #32
 800093c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000940:	4b37      	ldr	r3, [pc, #220]	; (8000a20 <HAL_ADC_MspInit+0x1cc>)
 8000942:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000946:	f003 0320 	and.w	r3, r3, #32
 800094a:	61fb      	str	r3, [r7, #28]
 800094c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	4b34      	ldr	r3, [pc, #208]	; (8000a20 <HAL_ADC_MspInit+0x1cc>)
 8000950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000954:	4a32      	ldr	r2, [pc, #200]	; (8000a20 <HAL_ADC_MspInit+0x1cc>)
 8000956:	f043 0301 	orr.w	r3, r3, #1
 800095a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800095e:	4b30      	ldr	r3, [pc, #192]	; (8000a20 <HAL_ADC_MspInit+0x1cc>)
 8000960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000964:	f003 0301 	and.w	r3, r3, #1
 8000968:	61bb      	str	r3, [r7, #24]
 800096a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800096c:	4b2c      	ldr	r3, [pc, #176]	; (8000a20 <HAL_ADC_MspInit+0x1cc>)
 800096e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000972:	4a2b      	ldr	r2, [pc, #172]	; (8000a20 <HAL_ADC_MspInit+0x1cc>)
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800097c:	4b28      	ldr	r3, [pc, #160]	; (8000a20 <HAL_ADC_MspInit+0x1cc>)
 800097e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	617b      	str	r3, [r7, #20]
 8000988:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800098a:	231c      	movs	r3, #28
 800098c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800098e:	2303      	movs	r3, #3
 8000990:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000996:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800099a:	4619      	mov	r1, r3
 800099c:	4821      	ldr	r0, [pc, #132]	; (8000a24 <HAL_ADC_MspInit+0x1d0>)
 800099e:	f003 ff97 	bl	80048d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009a2:	2301      	movs	r3, #1
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009a6:	2303      	movs	r3, #3
 80009a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009b2:	4619      	mov	r1, r3
 80009b4:	481e      	ldr	r0, [pc, #120]	; (8000a30 <HAL_ADC_MspInit+0x1dc>)
 80009b6:	f003 ff8b 	bl	80048d0 <HAL_GPIO_Init>
}
 80009ba:	e028      	b.n	8000a0e <HAL_ADC_MspInit+0x1ba>
  else if(adcHandle->Instance==ADC3)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a1c      	ldr	r2, [pc, #112]	; (8000a34 <HAL_ADC_MspInit+0x1e0>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d123      	bne.n	8000a0e <HAL_ADC_MspInit+0x1ba>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80009c6:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <HAL_ADC_MspInit+0x1cc>)
 80009c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009cc:	4a14      	ldr	r2, [pc, #80]	; (8000a20 <HAL_ADC_MspInit+0x1cc>)
 80009ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009d6:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <HAL_ADC_MspInit+0x1cc>)
 80009d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e4:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <HAL_ADC_MspInit+0x1cc>)
 80009e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ea:	4a0d      	ldr	r2, [pc, #52]	; (8000a20 <HAL_ADC_MspInit+0x1cc>)
 80009ec:	f043 0304 	orr.w	r3, r3, #4
 80009f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009f4:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <HAL_ADC_MspInit+0x1cc>)
 80009f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009fa:	f003 0304 	and.w	r3, r3, #4
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000a02:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000a06:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000a0a:	f001 f983 	bl	8001d14 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8000a0e:	bf00      	nop
 8000a10:	3740      	adds	r7, #64	; 0x40
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40022000 	.word	0x40022000
 8000a1c:	24000200 	.word	0x24000200
 8000a20:	58024400 	.word	0x58024400
 8000a24:	58020000 	.word	0x58020000
 8000a28:	58020800 	.word	0x58020800
 8000a2c:	40022100 	.word	0x40022100
 8000a30:	58020400 	.word	0x58020400
 8000a34:	58026000 	.word	0x58026000

08000a38 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a3e:	4b0d      	ldr	r3, [pc, #52]	; (8000a74 <MX_DMA_Init+0x3c>)
 8000a40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a44:	4a0b      	ldr	r2, [pc, #44]	; (8000a74 <MX_DMA_Init+0x3c>)
 8000a46:	f043 0301 	orr.w	r3, r3, #1
 8000a4a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <MX_DMA_Init+0x3c>)
 8000a50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a54:	f003 0301 	and.w	r3, r3, #1
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2100      	movs	r1, #0
 8000a60:	200b      	movs	r0, #11
 8000a62:	f002 fa74 	bl	8002f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a66:	200b      	movs	r0, #11
 8000a68:	f002 fa8b 	bl	8002f82 <HAL_NVIC_EnableIRQ>

}
 8000a6c:	bf00      	nop
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	58024400 	.word	0x58024400

08000a78 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08c      	sub	sp, #48	; 0x30
 8000a7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a8e:	4b6f      	ldr	r3, [pc, #444]	; (8000c4c <MX_GPIO_Init+0x1d4>)
 8000a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a94:	4a6d      	ldr	r2, [pc, #436]	; (8000c4c <MX_GPIO_Init+0x1d4>)
 8000a96:	f043 0310 	orr.w	r3, r3, #16
 8000a9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a9e:	4b6b      	ldr	r3, [pc, #428]	; (8000c4c <MX_GPIO_Init+0x1d4>)
 8000aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa4:	f003 0310 	and.w	r3, r3, #16
 8000aa8:	61bb      	str	r3, [r7, #24]
 8000aaa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aac:	4b67      	ldr	r3, [pc, #412]	; (8000c4c <MX_GPIO_Init+0x1d4>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	4a66      	ldr	r2, [pc, #408]	; (8000c4c <MX_GPIO_Init+0x1d4>)
 8000ab4:	f043 0304 	orr.w	r3, r3, #4
 8000ab8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000abc:	4b63      	ldr	r3, [pc, #396]	; (8000c4c <MX_GPIO_Init+0x1d4>)
 8000abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac2:	f003 0304 	and.w	r3, r3, #4
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aca:	4b60      	ldr	r3, [pc, #384]	; (8000c4c <MX_GPIO_Init+0x1d4>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	4a5e      	ldr	r2, [pc, #376]	; (8000c4c <MX_GPIO_Init+0x1d4>)
 8000ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ada:	4b5c      	ldr	r3, [pc, #368]	; (8000c4c <MX_GPIO_Init+0x1d4>)
 8000adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae8:	4b58      	ldr	r3, [pc, #352]	; (8000c4c <MX_GPIO_Init+0x1d4>)
 8000aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aee:	4a57      	ldr	r2, [pc, #348]	; (8000c4c <MX_GPIO_Init+0x1d4>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af8:	4b54      	ldr	r3, [pc, #336]	; (8000c4c <MX_GPIO_Init+0x1d4>)
 8000afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b06:	4b51      	ldr	r3, [pc, #324]	; (8000c4c <MX_GPIO_Init+0x1d4>)
 8000b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0c:	4a4f      	ldr	r2, [pc, #316]	; (8000c4c <MX_GPIO_Init+0x1d4>)
 8000b0e:	f043 0302 	orr.w	r3, r3, #2
 8000b12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b16:	4b4d      	ldr	r3, [pc, #308]	; (8000c4c <MX_GPIO_Init+0x1d4>)
 8000b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1c:	f003 0302 	and.w	r3, r3, #2
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b24:	4b49      	ldr	r3, [pc, #292]	; (8000c4c <MX_GPIO_Init+0x1d4>)
 8000b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2a:	4a48      	ldr	r2, [pc, #288]	; (8000c4c <MX_GPIO_Init+0x1d4>)
 8000b2c:	f043 0308 	orr.w	r3, r3, #8
 8000b30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b34:	4b45      	ldr	r3, [pc, #276]	; (8000c4c <MX_GPIO_Init+0x1d4>)
 8000b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3a:	f003 0308 	and.w	r3, r3, #8
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8000b42:	2200      	movs	r2, #0
 8000b44:	f640 7107 	movw	r1, #3847	; 0xf07
 8000b48:	4841      	ldr	r0, [pc, #260]	; (8000c50 <MX_GPIO_Init+0x1d8>)
 8000b4a:	f004 f871 	bl	8004c30 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2120      	movs	r1, #32
 8000b52:	4840      	ldr	r0, [pc, #256]	; (8000c54 <MX_GPIO_Init+0x1dc>)
 8000b54:	f004 f86c 	bl	8004c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b5e:	483e      	ldr	r0, [pc, #248]	; (8000c58 <MX_GPIO_Init+0x1e0>)
 8000b60:	f004 f866 	bl	8004c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 8000b64:	2200      	movs	r2, #0
 8000b66:	f64f 4107 	movw	r1, #64519	; 0xfc07
 8000b6a:	483c      	ldr	r0, [pc, #240]	; (8000c5c <MX_GPIO_Init+0x1e4>)
 8000b6c:	f004 f860 	bl	8004c30 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1 
                          |GPIO_PIN_2, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b76:	483a      	ldr	r0, [pc, #232]	; (8000c60 <MX_GPIO_Init+0x1e8>)
 8000b78:	f004 f85a 	bl	8004c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE8 PE9 PE10 
                           PE11 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8000b7c:	f640 7307 	movw	r3, #3847	; 0xf07
 8000b80:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b8e:	f107 031c 	add.w	r3, r7, #28
 8000b92:	4619      	mov	r1, r3
 8000b94:	482e      	ldr	r0, [pc, #184]	; (8000c50 <MX_GPIO_Init+0x1d8>)
 8000b96:	f003 fe9b 	bl	80048d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b9a:	2320      	movs	r3, #32
 8000b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4828      	ldr	r0, [pc, #160]	; (8000c54 <MX_GPIO_Init+0x1dc>)
 8000bb2:	f003 fe8d 	bl	80048d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000bb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bc4:	f107 031c 	add.w	r3, r7, #28
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4821      	ldr	r0, [pc, #132]	; (8000c50 <MX_GPIO_Init+0x1d8>)
 8000bcc:	f003 fe80 	bl	80048d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14;
 8000bd0:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8000bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	4619      	mov	r1, r3
 8000be4:	481c      	ldr	r0, [pc, #112]	; (8000c58 <MX_GPIO_Init+0x1e0>)
 8000be6:	f003 fe73 	bl	80048d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000bea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfc:	f107 031c 	add.w	r3, r7, #28
 8000c00:	4619      	mov	r1, r3
 8000c02:	4815      	ldr	r0, [pc, #84]	; (8000c58 <MX_GPIO_Init+0x1e0>)
 8000c04:	f003 fe64 	bl	80048d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13 
                           PD14 PD15 PD0 PD1 
                           PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 8000c08:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000c0c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1 
                          |GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2300      	movs	r3, #0
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c1a:	f107 031c 	add.w	r3, r7, #28
 8000c1e:	4619      	mov	r1, r3
 8000c20:	480e      	ldr	r0, [pc, #56]	; (8000c5c <MX_GPIO_Init+0x1e4>)
 8000c22:	f003 fe55 	bl	80048d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c38:	f107 031c 	add.w	r3, r7, #28
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4808      	ldr	r0, [pc, #32]	; (8000c60 <MX_GPIO_Init+0x1e8>)
 8000c40:	f003 fe46 	bl	80048d0 <HAL_GPIO_Init>

}
 8000c44:	bf00      	nop
 8000c46:	3730      	adds	r7, #48	; 0x30
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	58024400 	.word	0x58024400
 8000c50:	58021000 	.word	0x58021000
 8000c54:	58020800 	.word	0x58020800
 8000c58:	58020400 	.word	0x58020400
 8000c5c:	58020c00 	.word	0x58020c00
 8000c60:	58020000 	.word	0x58020000

08000c64 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000c68:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <MX_I2C1_Init+0x74>)
 8000c6a:	4a1c      	ldr	r2, [pc, #112]	; (8000cdc <MX_I2C1_Init+0x78>)
 8000c6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <MX_I2C1_Init+0x74>)
 8000c70:	4a1b      	ldr	r2, [pc, #108]	; (8000ce0 <MX_I2C1_Init+0x7c>)
 8000c72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c74:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <MX_I2C1_Init+0x74>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c7a:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <MX_I2C1_Init+0x74>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c80:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <MX_I2C1_Init+0x74>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c86:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <MX_I2C1_Init+0x74>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <MX_I2C1_Init+0x74>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c92:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <MX_I2C1_Init+0x74>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c98:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <MX_I2C1_Init+0x74>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c9e:	480e      	ldr	r0, [pc, #56]	; (8000cd8 <MX_I2C1_Init+0x74>)
 8000ca0:	f003 fffa 	bl	8004c98 <HAL_I2C_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000caa:	f000 f929 	bl	8000f00 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4809      	ldr	r0, [pc, #36]	; (8000cd8 <MX_I2C1_Init+0x74>)
 8000cb2:	f004 f881 	bl	8004db8 <HAL_I2CEx_ConfigAnalogFilter>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cbc:	f000 f920 	bl	8000f00 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <MX_I2C1_Init+0x74>)
 8000cc4:	f004 f8c3 	bl	8004e4e <HAL_I2CEx_ConfigDigitalFilter>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000cce:	f000 f917 	bl	8000f00 <Error_Handler>
  }

}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	24000340 	.word	0x24000340
 8000cdc:	40005400 	.word	0x40005400
 8000ce0:	307075b1 	.word	0x307075b1

08000ce4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	; 0x28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a1a      	ldr	r2, [pc, #104]	; (8000d6c <HAL_I2C_MspInit+0x88>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d12d      	bne.n	8000d62 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d06:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <HAL_I2C_MspInit+0x8c>)
 8000d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d0c:	4a18      	ldr	r2, [pc, #96]	; (8000d70 <HAL_I2C_MspInit+0x8c>)
 8000d0e:	f043 0302 	orr.w	r3, r3, #2
 8000d12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d16:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <HAL_I2C_MspInit+0x8c>)
 8000d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1c:	f003 0302 	and.w	r3, r3, #2
 8000d20:	613b      	str	r3, [r7, #16]
 8000d22:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d24:	23c0      	movs	r3, #192	; 0xc0
 8000d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d28:	2312      	movs	r3, #18
 8000d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d30:	2300      	movs	r3, #0
 8000d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d34:	2304      	movs	r3, #4
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	480d      	ldr	r0, [pc, #52]	; (8000d74 <HAL_I2C_MspInit+0x90>)
 8000d40:	f003 fdc6 	bl	80048d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d44:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <HAL_I2C_MspInit+0x8c>)
 8000d46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d4a:	4a09      	ldr	r2, [pc, #36]	; (8000d70 <HAL_I2C_MspInit+0x8c>)
 8000d4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d50:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <HAL_I2C_MspInit+0x8c>)
 8000d56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d62:	bf00      	nop
 8000d64:	3728      	adds	r7, #40	; 0x28
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40005400 	.word	0x40005400
 8000d70:	58024400 	.word	0x58024400
 8000d74:	58020400 	.word	0x58020400

08000d78 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d7c:	b0cc      	sub	sp, #304	; 0x130
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d7e:	224c      	movs	r2, #76	; 0x4c
 8000d80:	2100      	movs	r1, #0
 8000d82:	a80a      	add	r0, sp, #40	; 0x28
 8000d84:	f00f f8ae 	bl	800fee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d88:	2220      	movs	r2, #32
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	a802      	add	r0, sp, #8
 8000d8e:	f00f f8a9 	bl	800fee4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d92:	22bc      	movs	r2, #188	; 0xbc
 8000d94:	2100      	movs	r1, #0
 8000d96:	a81d      	add	r0, sp, #116	; 0x74
 8000d98:	f00f f8a4 	bl	800fee4 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d9c:	2002      	movs	r0, #2
 8000d9e:	f005 fa8d 	bl	80062bc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000da2:	2300      	movs	r3, #0
 8000da4:	9301      	str	r3, [sp, #4]
 8000da6:	4b39      	ldr	r3, [pc, #228]	; (8000e8c <_Z18SystemClock_Configv+0x114>)
 8000da8:	699a      	ldr	r2, [r3, #24]
 8000daa:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000dae:	619a      	str	r2, [r3, #24]
 8000db0:	699a      	ldr	r2, [r3, #24]
 8000db2:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8000db6:	9201      	str	r2, [sp, #4]
 8000db8:	4a35      	ldr	r2, [pc, #212]	; (8000e90 <_Z18SystemClock_Configv+0x118>)
 8000dba:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000dbc:	f041 0101 	orr.w	r1, r1, #1
 8000dc0:	62d1      	str	r1, [r2, #44]	; 0x2c
 8000dc2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000dc4:	f002 0201 	and.w	r2, r2, #1
 8000dc8:	9201      	str	r2, [sp, #4]
 8000dca:	9a01      	ldr	r2, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000dcc:	699a      	ldr	r2, [r3, #24]
 8000dce:	0491      	lsls	r1, r2, #18
 8000dd0:	d5fc      	bpl.n	8000dcc <_Z18SystemClock_Configv+0x54>
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000dd2:	f005 fa63 	bl	800629c <HAL_PWR_EnableBkUpAccess>
  RCC_OscInitStruct.PLL.PLLN = 192;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 20;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000dd6:	2400      	movs	r4, #0
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000dd8:	f000 ff90 	bl	8001cfc <HAL_GetREVID>
 8000ddc:	4a2d      	ldr	r2, [pc, #180]	; (8000e94 <_Z18SystemClock_Configv+0x11c>)
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dde:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000de0:	f04f 0808 	mov.w	r8, #8
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000de4:	6f13      	ldr	r3, [r2, #112]	; 0x70
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000de6:	2701      	movs	r7, #1
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000de8:	26c0      	movs	r6, #192	; 0xc0
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dea:	a80a      	add	r0, sp, #40	; 0x28
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000dec:	f023 0318 	bic.w	r3, r3, #24
 8000df0:	6713      	str	r3, [r2, #112]	; 0x70
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000df2:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8000df4:	f023 0303 	bic.w	r3, r3, #3
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dfe:	2305      	movs	r3, #5
 8000e00:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e04:	970c      	str	r7, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000e06:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e08:	941c      	str	r4, [sp, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e0a:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8000e0e:	2314      	movs	r3, #20
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e10:	e9cd 5513 	strd	r5, r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e14:	e9cd 3518 	strd	r3, r5, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e18:	e9cd 6516 	strd	r6, r5, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e1c:	e9cd 841a 	strd	r8, r4, [sp, #104]	; 0x68
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e20:	f005 fa96 	bl	8006350 <HAL_RCC_OscConfig>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e24:	223f      	movs	r2, #63	; 0x3f
 8000e26:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e28:	2104      	movs	r1, #4
 8000e2a:	eb0d 0008 	add.w	r0, sp, r8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e32:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e36:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e38:	e9cd 4804 	strd	r4, r8, [sp, #16]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e3c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e40:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e44:	f005 fe5c 	bl	8006b00 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_UART5
 8000e48:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <_Z18SystemClock_Configv+0x120>)
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
  PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_D3PCLK1;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e4a:	a81d      	add	r0, sp, #116	; 0x74
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000e4c:	9623      	str	r6, [sp, #140]	; 0x8c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e4e:	943a      	str	r4, [sp, #232]	; 0xe8
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000e50:	943d      	str	r4, [sp, #244]	; 0xf4
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000e52:	9445      	str	r4, [sp, #276]	; 0x114
  PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_D3PCLK1;
 8000e54:	9448      	str	r4, [sp, #288]	; 0x120
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000e56:	e9cd 351d 	strd	r3, r5, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000e5a:	230c      	movs	r3, #12
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 8000e5c:	e9cd 371f 	strd	r3, r7, [sp, #124]	; 0x7c
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000e60:	2320      	movs	r3, #32
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000e62:	e9cd 3424 	strd	r3, r4, [sp, #144]	; 0x90
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000e66:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e6a:	933e      	str	r3, [sp, #248]	; 0xf8
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000e6c:	f44f 7380 	mov.w	r3, #256	; 0x100
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000e70:	e9cd 5521 	strd	r5, r5, [sp, #132]	; 0x84
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000e74:	9349      	str	r3, [sp, #292]	; 0x124
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000e76:	e9cd 4434 	strd	r4, r4, [sp, #208]	; 0xd0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e7a:	f006 f9cb 	bl	8007214 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 8000e7e:	f005 ffe3 	bl	8006e48 <HAL_RCC_EnableCSS>
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000e82:	f005 fa55 	bl	8006330 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000e86:	b04c      	add	sp, #304	; 0x130
 8000e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e8c:	58024800 	.word	0x58024800
 8000e90:	58000400 	.word	0x58000400
 8000e94:	58024400 	.word	0x58024400
 8000e98:	004c700a 	.word	0x004c700a

08000e9c <main>:
{
 8000e9c:	b507      	push	{r0, r1, r2, lr}
  HAL_Init();
 8000e9e:	f000 fe7d 	bl	8001b9c <HAL_Init>
  SystemClock_Config();
 8000ea2:	f7ff ff69 	bl	8000d78 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 8000ea6:	f7ff fde7 	bl	8000a78 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eaa:	f7ff fdc5 	bl	8000a38 <MX_DMA_Init>
  MX_ADC1_Init();
 8000eae:	f7ff fb93 	bl	80005d8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000eb2:	f7ff fc07 	bl	80006c4 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000eb6:	f7ff fc69 	bl	800078c <MX_ADC3_Init>
  MX_I2C1_Init();
 8000eba:	f7ff fed3 	bl	8000c64 <MX_I2C1_Init>
  MX_RTC_Init();
 8000ebe:	f000 f821 	bl	8000f04 <MX_RTC_Init>
  MX_SPI1_Init();
 8000ec2:	f000 f861 	bl	8000f88 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000ec6:	f000 f8b5 	bl	8001034 <MX_SPI3_Init>
  MX_SPI4_Init();
 8000eca:	f000 f909 	bl	80010e0 <MX_SPI4_Init>
  MX_SPI6_Init();
 8000ece:	f000 f95d 	bl	800118c <MX_SPI6_Init>
  MX_TIM1_Init();
 8000ed2:	f000 fb8f 	bl	80015f4 <MX_TIM1_Init>
  MX_TIM8_Init();
 8000ed6:	f000 fc1b 	bl	8001710 <MX_TIM8_Init>
  MX_UART5_Init();
 8000eda:	f000 fd6b 	bl	80019b4 <MX_UART5_Init>
  MX_USB_DEVICE_Init();
 8000ede:	f00e fae9 	bl	800f4b4 <MX_USB_DEVICE_Init>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ee8:	4804      	ldr	r0, [pc, #16]	; (8000efc <main+0x60>)
 8000eea:	f003 fea1 	bl	8004c30 <HAL_GPIO_WritePin>
  Scheduler scheduler = Scheduler();
 8000eee:	a801      	add	r0, sp, #4
 8000ef0:	f00e faa3 	bl	800f43a <_ZN9SchedulerC1Ev>
  scheduler.run();
 8000ef4:	a801      	add	r0, sp, #4
 8000ef6:	f00e faaa 	bl	800f44e <_ZN9Scheduler3runEv>
 8000efa:	e7fe      	b.n	8000efa <main+0x5e>
 8000efc:	58021000 	.word	0x58021000

08000f00 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f00:	4770      	bx	lr
	...

08000f04 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000f08:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <MX_RTC_Init+0x48>)
 8000f0a:	4a11      	ldr	r2, [pc, #68]	; (8000f50 <MX_RTC_Init+0x4c>)
 8000f0c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f0e:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <MX_RTC_Init+0x48>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f14:	4b0d      	ldr	r3, [pc, #52]	; (8000f4c <MX_RTC_Init+0x48>)
 8000f16:	227f      	movs	r2, #127	; 0x7f
 8000f18:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <MX_RTC_Init+0x48>)
 8000f1c:	22ff      	movs	r2, #255	; 0xff
 8000f1e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f20:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <MX_RTC_Init+0x48>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f26:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <MX_RTC_Init+0x48>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f2c:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <MX_RTC_Init+0x48>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <MX_RTC_Init+0x48>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f38:	4804      	ldr	r0, [pc, #16]	; (8000f4c <MX_RTC_Init+0x48>)
 8000f3a:	f008 f83b 	bl	8008fb4 <HAL_RTC_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000f44:	f7ff ffdc 	bl	8000f00 <Error_Handler>
  }

}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	2400038c 	.word	0x2400038c
 8000f50:	58004000 	.word	0x58004000

08000f54 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a07      	ldr	r2, [pc, #28]	; (8000f80 <HAL_RTC_MspInit+0x2c>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d105      	bne.n	8000f72 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f66:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <HAL_RTC_MspInit+0x30>)
 8000f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f6a:	4a06      	ldr	r2, [pc, #24]	; (8000f84 <HAL_RTC_MspInit+0x30>)
 8000f6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f70:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	58004000 	.word	0x58004000
 8000f84:	58024400 	.word	0x58024400

08000f88 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi4;
SPI_HandleTypeDef hspi6;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000f8c:	4b27      	ldr	r3, [pc, #156]	; (800102c <MX_SPI1_Init+0xa4>)
 8000f8e:	4a28      	ldr	r2, [pc, #160]	; (8001030 <MX_SPI1_Init+0xa8>)
 8000f90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f92:	4b26      	ldr	r3, [pc, #152]	; (800102c <MX_SPI1_Init+0xa4>)
 8000f94:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000f98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f9a:	4b24      	ldr	r3, [pc, #144]	; (800102c <MX_SPI1_Init+0xa4>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000fa0:	4b22      	ldr	r3, [pc, #136]	; (800102c <MX_SPI1_Init+0xa4>)
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fa6:	4b21      	ldr	r3, [pc, #132]	; (800102c <MX_SPI1_Init+0xa4>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fac:	4b1f      	ldr	r3, [pc, #124]	; (800102c <MX_SPI1_Init+0xa4>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fb2:	4b1e      	ldr	r3, [pc, #120]	; (800102c <MX_SPI1_Init+0xa4>)
 8000fb4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000fb8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000fba:	4b1c      	ldr	r3, [pc, #112]	; (800102c <MX_SPI1_Init+0xa4>)
 8000fbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fc0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fc2:	4b1a      	ldr	r3, [pc, #104]	; (800102c <MX_SPI1_Init+0xa4>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fc8:	4b18      	ldr	r3, [pc, #96]	; (800102c <MX_SPI1_Init+0xa4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fce:	4b17      	ldr	r3, [pc, #92]	; (800102c <MX_SPI1_Init+0xa4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000fd4:	4b15      	ldr	r3, [pc, #84]	; (800102c <MX_SPI1_Init+0xa4>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fda:	4b14      	ldr	r3, [pc, #80]	; (800102c <MX_SPI1_Init+0xa4>)
 8000fdc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fe0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000fe2:	4b12      	ldr	r3, [pc, #72]	; (800102c <MX_SPI1_Init+0xa4>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000fe8:	4b10      	ldr	r3, [pc, #64]	; (800102c <MX_SPI1_Init+0xa4>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fee:	4b0f      	ldr	r3, [pc, #60]	; (800102c <MX_SPI1_Init+0xa4>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ff4:	4b0d      	ldr	r3, [pc, #52]	; (800102c <MX_SPI1_Init+0xa4>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	; (800102c <MX_SPI1_Init+0xa4>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001000:	4b0a      	ldr	r3, [pc, #40]	; (800102c <MX_SPI1_Init+0xa4>)
 8001002:	2200      	movs	r2, #0
 8001004:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <MX_SPI1_Init+0xa4>)
 8001008:	2200      	movs	r2, #0
 800100a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800100c:	4b07      	ldr	r3, [pc, #28]	; (800102c <MX_SPI1_Init+0xa4>)
 800100e:	2200      	movs	r2, #0
 8001010:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <MX_SPI1_Init+0xa4>)
 8001014:	2200      	movs	r2, #0
 8001016:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001018:	4804      	ldr	r0, [pc, #16]	; (800102c <MX_SPI1_Init+0xa4>)
 800101a:	f008 f8b7 	bl	800918c <HAL_SPI_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001024:	f7ff ff6c 	bl	8000f00 <Error_Handler>
  }

}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}
 800102c:	24000548 	.word	0x24000548
 8001030:	40013000 	.word	0x40013000

08001034 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8001038:	4b27      	ldr	r3, [pc, #156]	; (80010d8 <MX_SPI3_Init+0xa4>)
 800103a:	4a28      	ldr	r2, [pc, #160]	; (80010dc <MX_SPI3_Init+0xa8>)
 800103c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800103e:	4b26      	ldr	r3, [pc, #152]	; (80010d8 <MX_SPI3_Init+0xa4>)
 8001040:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001044:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001046:	4b24      	ldr	r3, [pc, #144]	; (80010d8 <MX_SPI3_Init+0xa4>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800104c:	4b22      	ldr	r3, [pc, #136]	; (80010d8 <MX_SPI3_Init+0xa4>)
 800104e:	2203      	movs	r2, #3
 8001050:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001052:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <MX_SPI3_Init+0xa4>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001058:	4b1f      	ldr	r3, [pc, #124]	; (80010d8 <MX_SPI3_Init+0xa4>)
 800105a:	2200      	movs	r2, #0
 800105c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800105e:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <MX_SPI3_Init+0xa4>)
 8001060:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001064:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001066:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <MX_SPI3_Init+0xa4>)
 8001068:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800106c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800106e:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <MX_SPI3_Init+0xa4>)
 8001070:	2200      	movs	r2, #0
 8001072:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001074:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <MX_SPI3_Init+0xa4>)
 8001076:	2200      	movs	r2, #0
 8001078:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800107a:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <MX_SPI3_Init+0xa4>)
 800107c:	2200      	movs	r2, #0
 800107e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001080:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <MX_SPI3_Init+0xa4>)
 8001082:	2200      	movs	r2, #0
 8001084:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001086:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <MX_SPI3_Init+0xa4>)
 8001088:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800108c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800108e:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <MX_SPI3_Init+0xa4>)
 8001090:	2200      	movs	r2, #0
 8001092:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001094:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <MX_SPI3_Init+0xa4>)
 8001096:	2200      	movs	r2, #0
 8001098:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800109a:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <MX_SPI3_Init+0xa4>)
 800109c:	2200      	movs	r2, #0
 800109e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010a0:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <MX_SPI3_Init+0xa4>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <MX_SPI3_Init+0xa4>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80010ac:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <MX_SPI3_Init+0xa4>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_SPI3_Init+0xa4>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80010b8:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <MX_SPI3_Init+0xa4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <MX_SPI3_Init+0xa4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80010c4:	4804      	ldr	r0, [pc, #16]	; (80010d8 <MX_SPI3_Init+0xa4>)
 80010c6:	f008 f861 	bl	800918c <HAL_SPI_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 80010d0:	f7ff ff16 	bl	8000f00 <Error_Handler>
  }

}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	24000438 	.word	0x24000438
 80010dc:	40003c00 	.word	0x40003c00

080010e0 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 80010e4:	4b27      	ldr	r3, [pc, #156]	; (8001184 <MX_SPI4_Init+0xa4>)
 80010e6:	4a28      	ldr	r2, [pc, #160]	; (8001188 <MX_SPI4_Init+0xa8>)
 80010e8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80010ea:	4b26      	ldr	r3, [pc, #152]	; (8001184 <MX_SPI4_Init+0xa4>)
 80010ec:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80010f0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80010f2:	4b24      	ldr	r3, [pc, #144]	; (8001184 <MX_SPI4_Init+0xa4>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 80010f8:	4b22      	ldr	r3, [pc, #136]	; (8001184 <MX_SPI4_Init+0xa4>)
 80010fa:	2203      	movs	r2, #3
 80010fc:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010fe:	4b21      	ldr	r3, [pc, #132]	; (8001184 <MX_SPI4_Init+0xa4>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001104:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <MX_SPI4_Init+0xa4>)
 8001106:	2200      	movs	r2, #0
 8001108:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800110a:	4b1e      	ldr	r3, [pc, #120]	; (8001184 <MX_SPI4_Init+0xa4>)
 800110c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001110:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001112:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <MX_SPI4_Init+0xa4>)
 8001114:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001118:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800111a:	4b1a      	ldr	r3, [pc, #104]	; (8001184 <MX_SPI4_Init+0xa4>)
 800111c:	2200      	movs	r2, #0
 800111e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001120:	4b18      	ldr	r3, [pc, #96]	; (8001184 <MX_SPI4_Init+0xa4>)
 8001122:	2200      	movs	r2, #0
 8001124:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001126:	4b17      	ldr	r3, [pc, #92]	; (8001184 <MX_SPI4_Init+0xa4>)
 8001128:	2200      	movs	r2, #0
 800112a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800112c:	4b15      	ldr	r3, [pc, #84]	; (8001184 <MX_SPI4_Init+0xa4>)
 800112e:	2200      	movs	r2, #0
 8001130:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001132:	4b14      	ldr	r3, [pc, #80]	; (8001184 <MX_SPI4_Init+0xa4>)
 8001134:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001138:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800113a:	4b12      	ldr	r3, [pc, #72]	; (8001184 <MX_SPI4_Init+0xa4>)
 800113c:	2200      	movs	r2, #0
 800113e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001140:	4b10      	ldr	r3, [pc, #64]	; (8001184 <MX_SPI4_Init+0xa4>)
 8001142:	2200      	movs	r2, #0
 8001144:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001146:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <MX_SPI4_Init+0xa4>)
 8001148:	2200      	movs	r2, #0
 800114a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800114c:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <MX_SPI4_Init+0xa4>)
 800114e:	2200      	movs	r2, #0
 8001150:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001152:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <MX_SPI4_Init+0xa4>)
 8001154:	2200      	movs	r2, #0
 8001156:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001158:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <MX_SPI4_Init+0xa4>)
 800115a:	2200      	movs	r2, #0
 800115c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <MX_SPI4_Init+0xa4>)
 8001160:	2200      	movs	r2, #0
 8001162:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001164:	4b07      	ldr	r3, [pc, #28]	; (8001184 <MX_SPI4_Init+0xa4>)
 8001166:	2200      	movs	r2, #0
 8001168:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <MX_SPI4_Init+0xa4>)
 800116c:	2200      	movs	r2, #0
 800116e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001170:	4804      	ldr	r0, [pc, #16]	; (8001184 <MX_SPI4_Init+0xa4>)
 8001172:	f008 f80b 	bl	800918c <HAL_SPI_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 800117c:	f7ff fec0 	bl	8000f00 <Error_Handler>
  }

}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	240004c0 	.word	0x240004c0
 8001188:	40013400 	.word	0x40013400

0800118c <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0

  hspi6.Instance = SPI6;
 8001190:	4b27      	ldr	r3, [pc, #156]	; (8001230 <MX_SPI6_Init+0xa4>)
 8001192:	4a28      	ldr	r2, [pc, #160]	; (8001234 <MX_SPI6_Init+0xa8>)
 8001194:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8001196:	4b26      	ldr	r3, [pc, #152]	; (8001230 <MX_SPI6_Init+0xa4>)
 8001198:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800119c:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 800119e:	4b24      	ldr	r3, [pc, #144]	; (8001230 <MX_SPI6_Init+0xa4>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_4BIT;
 80011a4:	4b22      	ldr	r3, [pc, #136]	; (8001230 <MX_SPI6_Init+0xa4>)
 80011a6:	2203      	movs	r2, #3
 80011a8:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011aa:	4b21      	ldr	r3, [pc, #132]	; (8001230 <MX_SPI6_Init+0xa4>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011b0:	4b1f      	ldr	r3, [pc, #124]	; (8001230 <MX_SPI6_Init+0xa4>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 80011b6:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <MX_SPI6_Init+0xa4>)
 80011b8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80011bc:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80011be:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <MX_SPI6_Init+0xa4>)
 80011c0:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80011c4:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011c6:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <MX_SPI6_Init+0xa4>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 80011cc:	4b18      	ldr	r3, [pc, #96]	; (8001230 <MX_SPI6_Init+0xa4>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011d2:	4b17      	ldr	r3, [pc, #92]	; (8001230 <MX_SPI6_Init+0xa4>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <MX_SPI6_Init+0xa4>)
 80011da:	2200      	movs	r2, #0
 80011dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011de:	4b14      	ldr	r3, [pc, #80]	; (8001230 <MX_SPI6_Init+0xa4>)
 80011e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011e4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80011e6:	4b12      	ldr	r3, [pc, #72]	; (8001230 <MX_SPI6_Init+0xa4>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80011ec:	4b10      	ldr	r3, [pc, #64]	; (8001230 <MX_SPI6_Init+0xa4>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011f2:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <MX_SPI6_Init+0xa4>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011f8:	4b0d      	ldr	r3, [pc, #52]	; (8001230 <MX_SPI6_Init+0xa4>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011fe:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <MX_SPI6_Init+0xa4>)
 8001200:	2200      	movs	r2, #0
 8001202:	649a      	str	r2, [r3, #72]	; 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001204:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <MX_SPI6_Init+0xa4>)
 8001206:	2200      	movs	r2, #0
 8001208:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <MX_SPI6_Init+0xa4>)
 800120c:	2200      	movs	r2, #0
 800120e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001210:	4b07      	ldr	r3, [pc, #28]	; (8001230 <MX_SPI6_Init+0xa4>)
 8001212:	2200      	movs	r2, #0
 8001214:	655a      	str	r2, [r3, #84]	; 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <MX_SPI6_Init+0xa4>)
 8001218:	2200      	movs	r2, #0
 800121a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 800121c:	4804      	ldr	r0, [pc, #16]	; (8001230 <MX_SPI6_Init+0xa4>)
 800121e:	f007 ffb5 	bl	800918c <HAL_SPI_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_SPI6_Init+0xa0>
  {
    Error_Handler();
 8001228:	f7ff fe6a 	bl	8000f00 <Error_Handler>
  }

}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}
 8001230:	240003b0 	.word	0x240003b0
 8001234:	58001400 	.word	0x58001400

08001238 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b090      	sub	sp, #64	; 0x40
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a69      	ldr	r2, [pc, #420]	; (80013fc <HAL_SPI_MspInit+0x1c4>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d12e      	bne.n	80012b8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800125a:	4b69      	ldr	r3, [pc, #420]	; (8001400 <HAL_SPI_MspInit+0x1c8>)
 800125c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001260:	4a67      	ldr	r2, [pc, #412]	; (8001400 <HAL_SPI_MspInit+0x1c8>)
 8001262:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001266:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800126a:	4b65      	ldr	r3, [pc, #404]	; (8001400 <HAL_SPI_MspInit+0x1c8>)
 800126c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001270:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001274:	62bb      	str	r3, [r7, #40]	; 0x28
 8001276:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001278:	4b61      	ldr	r3, [pc, #388]	; (8001400 <HAL_SPI_MspInit+0x1c8>)
 800127a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127e:	4a60      	ldr	r2, [pc, #384]	; (8001400 <HAL_SPI_MspInit+0x1c8>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001288:	4b5d      	ldr	r3, [pc, #372]	; (8001400 <HAL_SPI_MspInit+0x1c8>)
 800128a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
 8001294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001296:	23e0      	movs	r3, #224	; 0xe0
 8001298:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129a:	2302      	movs	r3, #2
 800129c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	2300      	movs	r3, #0
 80012a4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012a6:	2305      	movs	r3, #5
 80012a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012ae:	4619      	mov	r1, r3
 80012b0:	4854      	ldr	r0, [pc, #336]	; (8001404 <HAL_SPI_MspInit+0x1cc>)
 80012b2:	f003 fb0d 	bl	80048d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 80012b6:	e09c      	b.n	80013f2 <HAL_SPI_MspInit+0x1ba>
  else if(spiHandle->Instance==SPI3)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a52      	ldr	r2, [pc, #328]	; (8001408 <HAL_SPI_MspInit+0x1d0>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d12f      	bne.n	8001322 <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80012c2:	4b4f      	ldr	r3, [pc, #316]	; (8001400 <HAL_SPI_MspInit+0x1c8>)
 80012c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012c8:	4a4d      	ldr	r2, [pc, #308]	; (8001400 <HAL_SPI_MspInit+0x1c8>)
 80012ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012ce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012d2:	4b4b      	ldr	r3, [pc, #300]	; (8001400 <HAL_SPI_MspInit+0x1c8>)
 80012d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012dc:	623b      	str	r3, [r7, #32]
 80012de:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e0:	4b47      	ldr	r3, [pc, #284]	; (8001400 <HAL_SPI_MspInit+0x1c8>)
 80012e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e6:	4a46      	ldr	r2, [pc, #280]	; (8001400 <HAL_SPI_MspInit+0x1c8>)
 80012e8:	f043 0304 	orr.w	r3, r3, #4
 80012ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012f0:	4b43      	ldr	r3, [pc, #268]	; (8001400 <HAL_SPI_MspInit+0x1c8>)
 80012f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	61fb      	str	r3, [r7, #28]
 80012fc:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80012fe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001302:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001304:	2302      	movs	r3, #2
 8001306:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2300      	movs	r3, #0
 800130e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001310:	2306      	movs	r3, #6
 8001312:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001314:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001318:	4619      	mov	r1, r3
 800131a:	483c      	ldr	r0, [pc, #240]	; (800140c <HAL_SPI_MspInit+0x1d4>)
 800131c:	f003 fad8 	bl	80048d0 <HAL_GPIO_Init>
}
 8001320:	e067      	b.n	80013f2 <HAL_SPI_MspInit+0x1ba>
  else if(spiHandle->Instance==SPI4)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a3a      	ldr	r2, [pc, #232]	; (8001410 <HAL_SPI_MspInit+0x1d8>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d12f      	bne.n	800138c <HAL_SPI_MspInit+0x154>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800132c:	4b34      	ldr	r3, [pc, #208]	; (8001400 <HAL_SPI_MspInit+0x1c8>)
 800132e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001332:	4a33      	ldr	r2, [pc, #204]	; (8001400 <HAL_SPI_MspInit+0x1c8>)
 8001334:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001338:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800133c:	4b30      	ldr	r3, [pc, #192]	; (8001400 <HAL_SPI_MspInit+0x1c8>)
 800133e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001342:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001346:	61bb      	str	r3, [r7, #24]
 8001348:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800134a:	4b2d      	ldr	r3, [pc, #180]	; (8001400 <HAL_SPI_MspInit+0x1c8>)
 800134c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001350:	4a2b      	ldr	r2, [pc, #172]	; (8001400 <HAL_SPI_MspInit+0x1c8>)
 8001352:	f043 0310 	orr.w	r3, r3, #16
 8001356:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800135a:	4b29      	ldr	r3, [pc, #164]	; (8001400 <HAL_SPI_MspInit+0x1c8>)
 800135c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001360:	f003 0310 	and.w	r3, r3, #16
 8001364:	617b      	str	r3, [r7, #20]
 8001366:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001368:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800136c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	2302      	movs	r3, #2
 8001370:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800137a:	2305      	movs	r3, #5
 800137c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800137e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001382:	4619      	mov	r1, r3
 8001384:	4823      	ldr	r0, [pc, #140]	; (8001414 <HAL_SPI_MspInit+0x1dc>)
 8001386:	f003 faa3 	bl	80048d0 <HAL_GPIO_Init>
}
 800138a:	e032      	b.n	80013f2 <HAL_SPI_MspInit+0x1ba>
  else if(spiHandle->Instance==SPI6)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a21      	ldr	r2, [pc, #132]	; (8001418 <HAL_SPI_MspInit+0x1e0>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d12d      	bne.n	80013f2 <HAL_SPI_MspInit+0x1ba>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8001396:	4b1a      	ldr	r3, [pc, #104]	; (8001400 <HAL_SPI_MspInit+0x1c8>)
 8001398:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800139c:	4a18      	ldr	r2, [pc, #96]	; (8001400 <HAL_SPI_MspInit+0x1c8>)
 800139e:	f043 0320 	orr.w	r3, r3, #32
 80013a2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013a6:	4b16      	ldr	r3, [pc, #88]	; (8001400 <HAL_SPI_MspInit+0x1c8>)
 80013a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013ac:	f003 0320 	and.w	r3, r3, #32
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_SPI_MspInit+0x1c8>)
 80013b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ba:	4a11      	ldr	r2, [pc, #68]	; (8001400 <HAL_SPI_MspInit+0x1c8>)
 80013bc:	f043 0302 	orr.w	r3, r3, #2
 80013c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013c4:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <HAL_SPI_MspInit+0x1c8>)
 80013c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80013d2:	2338      	movs	r3, #56	; 0x38
 80013d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013de:	2300      	movs	r3, #0
 80013e0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 80013e2:	2308      	movs	r3, #8
 80013e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013ea:	4619      	mov	r1, r3
 80013ec:	480b      	ldr	r0, [pc, #44]	; (800141c <HAL_SPI_MspInit+0x1e4>)
 80013ee:	f003 fa6f 	bl	80048d0 <HAL_GPIO_Init>
}
 80013f2:	bf00      	nop
 80013f4:	3740      	adds	r7, #64	; 0x40
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40013000 	.word	0x40013000
 8001400:	58024400 	.word	0x58024400
 8001404:	58020000 	.word	0x58020000
 8001408:	40003c00 	.word	0x40003c00
 800140c:	58020800 	.word	0x58020800
 8001410:	40013400 	.word	0x40013400
 8001414:	58021000 	.word	0x58021000
 8001418:	58001400 	.word	0x58001400
 800141c:	58020400 	.word	0x58020400

08001420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001426:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <HAL_MspInit+0x30>)
 8001428:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800142c:	4a08      	ldr	r2, [pc, #32]	; (8001450 <HAL_MspInit+0x30>)
 800142e:	f043 0302 	orr.w	r3, r3, #2
 8001432:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <HAL_MspInit+0x30>)
 8001438:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	58024400 	.word	0x58024400

08001454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001458:	f005 fec0 	bl	80071dc <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}

08001460 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001464:	e7fe      	b.n	8001464 <HardFault_Handler+0x4>

08001466 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800146a:	e7fe      	b.n	800146a <MemManage_Handler+0x4>

0800146c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001470:	e7fe      	b.n	8001470 <BusFault_Handler+0x4>

08001472 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001476:	e7fe      	b.n	8001476 <UsageFault_Handler+0x4>

08001478 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a6:	f000 fbe7 	bl	8001c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80014b4:	4802      	ldr	r0, [pc, #8]	; (80014c0 <DMA1_Stream0_IRQHandler+0x10>)
 80014b6:	f002 f8a5 	bl	8003604 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	240006dc 	.word	0x240006dc

080014c4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80014c8:	4802      	ldr	r0, [pc, #8]	; (80014d4 <OTG_FS_IRQHandler+0x10>)
 80014ca:	f003 fe63 	bl	8005194 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	24001a5c 	.word	0x24001a5c

080014d8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80014e0:	4b11      	ldr	r3, [pc, #68]	; (8001528 <_sbrk+0x50>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d102      	bne.n	80014ee <_sbrk+0x16>
		heap_end = &end;
 80014e8:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <_sbrk+0x50>)
 80014ea:	4a10      	ldr	r2, [pc, #64]	; (800152c <_sbrk+0x54>)
 80014ec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80014ee:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <_sbrk+0x50>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <_sbrk+0x50>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4413      	add	r3, r2
 80014fc:	466a      	mov	r2, sp
 80014fe:	4293      	cmp	r3, r2
 8001500:	d907      	bls.n	8001512 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001502:	f00e fcb5 	bl	800fe70 <__errno>
 8001506:	4602      	mov	r2, r0
 8001508:	230c      	movs	r3, #12
 800150a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800150c:	f04f 33ff 	mov.w	r3, #4294967295
 8001510:	e006      	b.n	8001520 <_sbrk+0x48>
	}

	heap_end += incr;
 8001512:	4b05      	ldr	r3, [pc, #20]	; (8001528 <_sbrk+0x50>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	4a03      	ldr	r2, [pc, #12]	; (8001528 <_sbrk+0x50>)
 800151c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800151e:	68fb      	ldr	r3, [r7, #12]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	24000204 	.word	0x24000204
 800152c:	24001e68 	.word	0x24001e68

08001530 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001534:	4b29      	ldr	r3, [pc, #164]	; (80015dc <SystemInit+0xac>)
 8001536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800153a:	4a28      	ldr	r2, [pc, #160]	; (80015dc <SystemInit+0xac>)
 800153c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001540:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001544:	4b26      	ldr	r3, [pc, #152]	; (80015e0 <SystemInit+0xb0>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a25      	ldr	r2, [pc, #148]	; (80015e0 <SystemInit+0xb0>)
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001550:	4b23      	ldr	r3, [pc, #140]	; (80015e0 <SystemInit+0xb0>)
 8001552:	2200      	movs	r2, #0
 8001554:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001556:	4b22      	ldr	r3, [pc, #136]	; (80015e0 <SystemInit+0xb0>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	4921      	ldr	r1, [pc, #132]	; (80015e0 <SystemInit+0xb0>)
 800155c:	4b21      	ldr	r3, [pc, #132]	; (80015e4 <SystemInit+0xb4>)
 800155e:	4013      	ands	r3, r2
 8001560:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001562:	4b1f      	ldr	r3, [pc, #124]	; (80015e0 <SystemInit+0xb0>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001568:	4b1d      	ldr	r3, [pc, #116]	; (80015e0 <SystemInit+0xb0>)
 800156a:	2200      	movs	r2, #0
 800156c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800156e:	4b1c      	ldr	r3, [pc, #112]	; (80015e0 <SystemInit+0xb0>)
 8001570:	2200      	movs	r2, #0
 8001572:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001574:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <SystemInit+0xb0>)
 8001576:	2200      	movs	r2, #0
 8001578:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800157a:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <SystemInit+0xb0>)
 800157c:	2200      	movs	r2, #0
 800157e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001580:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <SystemInit+0xb0>)
 8001582:	2200      	movs	r2, #0
 8001584:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001586:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <SystemInit+0xb0>)
 8001588:	2200      	movs	r2, #0
 800158a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800158c:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <SystemInit+0xb0>)
 800158e:	2200      	movs	r2, #0
 8001590:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001592:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <SystemInit+0xb0>)
 8001594:	2200      	movs	r2, #0
 8001596:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <SystemInit+0xb0>)
 800159a:	2200      	movs	r2, #0
 800159c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <SystemInit+0xb0>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015a4:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <SystemInit+0xb0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a0d      	ldr	r2, [pc, #52]	; (80015e0 <SystemInit+0xb0>)
 80015aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015b0:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <SystemInit+0xb0>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80015b6:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <SystemInit+0xb8>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <SystemInit+0xbc>)
 80015bc:	4013      	ands	r3, r2
 80015be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015c2:	d202      	bcs.n	80015ca <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80015c4:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <SystemInit+0xc0>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015ca:	4b04      	ldr	r3, [pc, #16]	; (80015dc <SystemInit+0xac>)
 80015cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015d0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000ed00 	.word	0xe000ed00
 80015e0:	58024400 	.word	0x58024400
 80015e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80015e8:	5c001000 	.word	0x5c001000
 80015ec:	ffff0000 	.word	0xffff0000
 80015f0:	51008108 	.word	0x51008108

080015f4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b096      	sub	sp, #88	; 0x58
 80015f8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001606:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	611a      	str	r2, [r3, #16]
 8001616:	615a      	str	r2, [r3, #20]
 8001618:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	222c      	movs	r2, #44	; 0x2c
 800161e:	2100      	movs	r1, #0
 8001620:	4618      	mov	r0, r3
 8001622:	f00e fc5f 	bl	800fee4 <memset>

  htim1.Instance = TIM1;
 8001626:	4b38      	ldr	r3, [pc, #224]	; (8001708 <MX_TIM1_Init+0x114>)
 8001628:	4a38      	ldr	r2, [pc, #224]	; (800170c <MX_TIM1_Init+0x118>)
 800162a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800162c:	4b36      	ldr	r3, [pc, #216]	; (8001708 <MX_TIM1_Init+0x114>)
 800162e:	2200      	movs	r2, #0
 8001630:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001632:	4b35      	ldr	r3, [pc, #212]	; (8001708 <MX_TIM1_Init+0x114>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001638:	4b33      	ldr	r3, [pc, #204]	; (8001708 <MX_TIM1_Init+0x114>)
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800163e:	4b32      	ldr	r3, [pc, #200]	; (8001708 <MX_TIM1_Init+0x114>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001644:	4b30      	ldr	r3, [pc, #192]	; (8001708 <MX_TIM1_Init+0x114>)
 8001646:	2200      	movs	r2, #0
 8001648:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164a:	4b2f      	ldr	r3, [pc, #188]	; (8001708 <MX_TIM1_Init+0x114>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001650:	482d      	ldr	r0, [pc, #180]	; (8001708 <MX_TIM1_Init+0x114>)
 8001652:	f007 feae 	bl	80093b2 <HAL_TIM_PWM_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800165c:	f7ff fc50 	bl	8000f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001660:	2300      	movs	r3, #0
 8001662:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001664:	2300      	movs	r3, #0
 8001666:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001668:	2300      	movs	r3, #0
 800166a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800166c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001670:	4619      	mov	r1, r3
 8001672:	4825      	ldr	r0, [pc, #148]	; (8001708 <MX_TIM1_Init+0x114>)
 8001674:	f008 fb48 	bl	8009d08 <HAL_TIMEx_MasterConfigSynchronization>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800167e:	f7ff fc3f 	bl	8000f00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001682:	2360      	movs	r3, #96	; 0x60
 8001684:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800168a:	2300      	movs	r3, #0
 800168c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800168e:	2300      	movs	r3, #0
 8001690:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001692:	2300      	movs	r3, #0
 8001694:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001696:	2300      	movs	r3, #0
 8001698:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800169a:	2300      	movs	r3, #0
 800169c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800169e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016a2:	2200      	movs	r2, #0
 80016a4:	4619      	mov	r1, r3
 80016a6:	4818      	ldr	r0, [pc, #96]	; (8001708 <MX_TIM1_Init+0x114>)
 80016a8:	f007 feae 	bl	8009408 <HAL_TIM_PWM_ConfigChannel>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80016b2:	f7ff fc25 	bl	8000f00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016ba:	2300      	movs	r3, #0
 80016bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	4619      	mov	r1, r3
 80016ea:	4807      	ldr	r0, [pc, #28]	; (8001708 <MX_TIM1_Init+0x114>)
 80016ec:	f008 fb94 	bl	8009e18 <HAL_TIMEx_ConfigBreakDeadTime>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80016f6:	f7ff fc03 	bl	8000f00 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80016fa:	4803      	ldr	r0, [pc, #12]	; (8001708 <MX_TIM1_Init+0x114>)
 80016fc:	f000 f8f4 	bl	80018e8 <HAL_TIM_MspPostInit>

}
 8001700:	bf00      	nop
 8001702:	3758      	adds	r7, #88	; 0x58
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	24000610 	.word	0x24000610
 800170c:	40010000 	.word	0x40010000

08001710 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b096      	sub	sp, #88	; 0x58
 8001714:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001716:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001722:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	609a      	str	r2, [r3, #8]
 800172e:	60da      	str	r2, [r3, #12]
 8001730:	611a      	str	r2, [r3, #16]
 8001732:	615a      	str	r2, [r3, #20]
 8001734:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	222c      	movs	r2, #44	; 0x2c
 800173a:	2100      	movs	r1, #0
 800173c:	4618      	mov	r0, r3
 800173e:	f00e fbd1 	bl	800fee4 <memset>

  htim8.Instance = TIM8;
 8001742:	4b4a      	ldr	r3, [pc, #296]	; (800186c <MX_TIM8_Init+0x15c>)
 8001744:	4a4a      	ldr	r2, [pc, #296]	; (8001870 <MX_TIM8_Init+0x160>)
 8001746:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001748:	4b48      	ldr	r3, [pc, #288]	; (800186c <MX_TIM8_Init+0x15c>)
 800174a:	2200      	movs	r2, #0
 800174c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800174e:	4b47      	ldr	r3, [pc, #284]	; (800186c <MX_TIM8_Init+0x15c>)
 8001750:	2200      	movs	r2, #0
 8001752:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 8001754:	4b45      	ldr	r3, [pc, #276]	; (800186c <MX_TIM8_Init+0x15c>)
 8001756:	2200      	movs	r2, #0
 8001758:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800175a:	4b44      	ldr	r3, [pc, #272]	; (800186c <MX_TIM8_Init+0x15c>)
 800175c:	2200      	movs	r2, #0
 800175e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001760:	4b42      	ldr	r3, [pc, #264]	; (800186c <MX_TIM8_Init+0x15c>)
 8001762:	2200      	movs	r2, #0
 8001764:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001766:	4b41      	ldr	r3, [pc, #260]	; (800186c <MX_TIM8_Init+0x15c>)
 8001768:	2200      	movs	r2, #0
 800176a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800176c:	483f      	ldr	r0, [pc, #252]	; (800186c <MX_TIM8_Init+0x15c>)
 800176e:	f007 fe20 	bl	80093b2 <HAL_TIM_PWM_Init>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8001778:	f7ff fbc2 	bl	8000f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800177c:	2300      	movs	r3, #0
 800177e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001780:	2300      	movs	r3, #0
 8001782:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001784:	2300      	movs	r3, #0
 8001786:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001788:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800178c:	4619      	mov	r1, r3
 800178e:	4837      	ldr	r0, [pc, #220]	; (800186c <MX_TIM8_Init+0x15c>)
 8001790:	f008 faba 	bl	8009d08 <HAL_TIMEx_MasterConfigSynchronization>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 800179a:	f7ff fbb1 	bl	8000f00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800179e:	2360      	movs	r3, #96	; 0x60
 80017a0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017a6:	2300      	movs	r3, #0
 80017a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017aa:	2300      	movs	r3, #0
 80017ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ae:	2300      	movs	r3, #0
 80017b0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017b2:	2300      	movs	r3, #0
 80017b4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017b6:	2300      	movs	r3, #0
 80017b8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017be:	2200      	movs	r2, #0
 80017c0:	4619      	mov	r1, r3
 80017c2:	482a      	ldr	r0, [pc, #168]	; (800186c <MX_TIM8_Init+0x15c>)
 80017c4:	f007 fe20 	bl	8009408 <HAL_TIM_PWM_ConfigChannel>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 80017ce:	f7ff fb97 	bl	8000f00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017d6:	2204      	movs	r2, #4
 80017d8:	4619      	mov	r1, r3
 80017da:	4824      	ldr	r0, [pc, #144]	; (800186c <MX_TIM8_Init+0x15c>)
 80017dc:	f007 fe14 	bl	8009408 <HAL_TIM_PWM_ConfigChannel>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM8_Init+0xda>
  {
    Error_Handler();
 80017e6:	f7ff fb8b 	bl	8000f00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017ee:	2208      	movs	r2, #8
 80017f0:	4619      	mov	r1, r3
 80017f2:	481e      	ldr	r0, [pc, #120]	; (800186c <MX_TIM8_Init+0x15c>)
 80017f4:	f007 fe08 	bl	8009408 <HAL_TIM_PWM_ConfigChannel>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 80017fe:	f7ff fb7f 	bl	8000f00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001802:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001806:	220c      	movs	r2, #12
 8001808:	4619      	mov	r1, r3
 800180a:	4818      	ldr	r0, [pc, #96]	; (800186c <MX_TIM8_Init+0x15c>)
 800180c:	f007 fdfc 	bl	8009408 <HAL_TIM_PWM_ConfigChannel>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM8_Init+0x10a>
  {
    Error_Handler();
 8001816:	f7ff fb73 	bl	8000f00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800181e:	2300      	movs	r3, #0
 8001820:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800182e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001832:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001834:	2300      	movs	r3, #0
 8001836:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001838:	2300      	movs	r3, #0
 800183a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800183c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001846:	2300      	movs	r3, #0
 8001848:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800184a:	1d3b      	adds	r3, r7, #4
 800184c:	4619      	mov	r1, r3
 800184e:	4807      	ldr	r0, [pc, #28]	; (800186c <MX_TIM8_Init+0x15c>)
 8001850:	f008 fae2 	bl	8009e18 <HAL_TIMEx_ConfigBreakDeadTime>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM8_Init+0x14e>
  {
    Error_Handler();
 800185a:	f7ff fb51 	bl	8000f00 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 800185e:	4803      	ldr	r0, [pc, #12]	; (800186c <MX_TIM8_Init+0x15c>)
 8001860:	f000 f842 	bl	80018e8 <HAL_TIM_MspPostInit>

}
 8001864:	bf00      	nop
 8001866:	3758      	adds	r7, #88	; 0x58
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	240005d0 	.word	0x240005d0
 8001870:	40010400 	.word	0x40010400

08001874 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a16      	ldr	r2, [pc, #88]	; (80018dc <HAL_TIM_PWM_MspInit+0x68>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d10f      	bne.n	80018a6 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001886:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <HAL_TIM_PWM_MspInit+0x6c>)
 8001888:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800188c:	4a14      	ldr	r2, [pc, #80]	; (80018e0 <HAL_TIM_PWM_MspInit+0x6c>)
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001896:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_TIM_PWM_MspInit+0x6c>)
 8001898:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80018a4:	e013      	b.n	80018ce <HAL_TIM_PWM_MspInit+0x5a>
  else if(tim_pwmHandle->Instance==TIM8)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a0e      	ldr	r2, [pc, #56]	; (80018e4 <HAL_TIM_PWM_MspInit+0x70>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d10e      	bne.n	80018ce <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80018b0:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <HAL_TIM_PWM_MspInit+0x6c>)
 80018b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018b6:	4a0a      	ldr	r2, [pc, #40]	; (80018e0 <HAL_TIM_PWM_MspInit+0x6c>)
 80018b8:	f043 0302 	orr.w	r3, r3, #2
 80018bc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80018c0:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <HAL_TIM_PWM_MspInit+0x6c>)
 80018c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	68bb      	ldr	r3, [r7, #8]
}
 80018ce:	bf00      	nop
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40010000 	.word	0x40010000
 80018e0:	58024400 	.word	0x58024400
 80018e4:	40010400 	.word	0x40010400

080018e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08a      	sub	sp, #40	; 0x28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a26      	ldr	r2, [pc, #152]	; (80019a0 <HAL_TIM_MspPostInit+0xb8>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d120      	bne.n	800194c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190a:	4b26      	ldr	r3, [pc, #152]	; (80019a4 <HAL_TIM_MspPostInit+0xbc>)
 800190c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001910:	4a24      	ldr	r2, [pc, #144]	; (80019a4 <HAL_TIM_MspPostInit+0xbc>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800191a:	4b22      	ldr	r3, [pc, #136]	; (80019a4 <HAL_TIM_MspPostInit+0xbc>)
 800191c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001928:	f44f 7380 	mov.w	r3, #256	; 0x100
 800192c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192e:	2302      	movs	r3, #2
 8001930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001936:	2300      	movs	r3, #0
 8001938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800193a:	2301      	movs	r3, #1
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	4619      	mov	r1, r3
 8001944:	4818      	ldr	r0, [pc, #96]	; (80019a8 <HAL_TIM_MspPostInit+0xc0>)
 8001946:	f002 ffc3 	bl	80048d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800194a:	e024      	b.n	8001996 <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM8)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a16      	ldr	r2, [pc, #88]	; (80019ac <HAL_TIM_MspPostInit+0xc4>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d11f      	bne.n	8001996 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001956:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <HAL_TIM_MspPostInit+0xbc>)
 8001958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800195c:	4a11      	ldr	r2, [pc, #68]	; (80019a4 <HAL_TIM_MspPostInit+0xbc>)
 800195e:	f043 0304 	orr.w	r3, r3, #4
 8001962:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001966:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <HAL_TIM_MspPostInit+0xbc>)
 8001968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001974:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2300      	movs	r3, #0
 8001984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001986:	2303      	movs	r3, #3
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	4619      	mov	r1, r3
 8001990:	4807      	ldr	r0, [pc, #28]	; (80019b0 <HAL_TIM_MspPostInit+0xc8>)
 8001992:	f002 ff9d 	bl	80048d0 <HAL_GPIO_Init>
}
 8001996:	bf00      	nop
 8001998:	3728      	adds	r7, #40	; 0x28
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40010000 	.word	0x40010000
 80019a4:	58024400 	.word	0x58024400
 80019a8:	58020000 	.word	0x58020000
 80019ac:	40010400 	.word	0x40010400
 80019b0:	58020800 	.word	0x58020800

080019b4 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
DMA_HandleTypeDef hdma_uart5_rx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 80019b8:	4b22      	ldr	r3, [pc, #136]	; (8001a44 <MX_UART5_Init+0x90>)
 80019ba:	4a23      	ldr	r2, [pc, #140]	; (8001a48 <MX_UART5_Init+0x94>)
 80019bc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80019be:	4b21      	ldr	r3, [pc, #132]	; (8001a44 <MX_UART5_Init+0x90>)
 80019c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019c4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80019c6:	4b1f      	ldr	r3, [pc, #124]	; (8001a44 <MX_UART5_Init+0x90>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80019cc:	4b1d      	ldr	r3, [pc, #116]	; (8001a44 <MX_UART5_Init+0x90>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80019d2:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <MX_UART5_Init+0x90>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80019d8:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <MX_UART5_Init+0x90>)
 80019da:	220c      	movs	r2, #12
 80019dc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019de:	4b19      	ldr	r3, [pc, #100]	; (8001a44 <MX_UART5_Init+0x90>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e4:	4b17      	ldr	r3, [pc, #92]	; (8001a44 <MX_UART5_Init+0x90>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019ea:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <MX_UART5_Init+0x90>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019f0:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <MX_UART5_Init+0x90>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019f6:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <MX_UART5_Init+0x90>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80019fc:	4811      	ldr	r0, [pc, #68]	; (8001a44 <MX_UART5_Init+0x90>)
 80019fe:	f008 fa89 	bl	8009f14 <HAL_UART_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001a08:	f7ff fa7a 	bl	8000f00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	480d      	ldr	r0, [pc, #52]	; (8001a44 <MX_UART5_Init+0x90>)
 8001a10:	f00a fdf3 	bl	800c5fa <HAL_UARTEx_SetTxFifoThreshold>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001a1a:	f7ff fa71 	bl	8000f00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4808      	ldr	r0, [pc, #32]	; (8001a44 <MX_UART5_Init+0x90>)
 8001a22:	f00a fe28 	bl	800c676 <HAL_UARTEx_SetRxFifoThreshold>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001a2c:	f7ff fa68 	bl	8000f00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001a30:	4804      	ldr	r0, [pc, #16]	; (8001a44 <MX_UART5_Init+0x90>)
 8001a32:	f00a fda9 	bl	800c588 <HAL_UARTEx_DisableFifoMode>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001a3c:	f7ff fa60 	bl	8000f00 <Error_Handler>
  }

}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	24000650 	.word	0x24000650
 8001a48:	40005000 	.word	0x40005000

08001a4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08a      	sub	sp, #40	; 0x28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a32      	ldr	r2, [pc, #200]	; (8001b34 <HAL_UART_MspInit+0xe8>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d15d      	bne.n	8001b2a <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001a6e:	4b32      	ldr	r3, [pc, #200]	; (8001b38 <HAL_UART_MspInit+0xec>)
 8001a70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a74:	4a30      	ldr	r2, [pc, #192]	; (8001b38 <HAL_UART_MspInit+0xec>)
 8001a76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a7a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a7e:	4b2e      	ldr	r3, [pc, #184]	; (8001b38 <HAL_UART_MspInit+0xec>)
 8001a80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8c:	4b2a      	ldr	r3, [pc, #168]	; (8001b38 <HAL_UART_MspInit+0xec>)
 8001a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a92:	4a29      	ldr	r2, [pc, #164]	; (8001b38 <HAL_UART_MspInit+0xec>)
 8001a94:	f043 0302 	orr.w	r3, r3, #2
 8001a98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a9c:	4b26      	ldr	r3, [pc, #152]	; (8001b38 <HAL_UART_MspInit+0xec>)
 8001a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration    
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001aaa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001abc:	230e      	movs	r3, #14
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	481d      	ldr	r0, [pc, #116]	; (8001b3c <HAL_UART_MspInit+0xf0>)
 8001ac8:	f002 ff02 	bl	80048d0 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001acc:	4b1c      	ldr	r3, [pc, #112]	; (8001b40 <HAL_UART_MspInit+0xf4>)
 8001ace:	4a1d      	ldr	r2, [pc, #116]	; (8001b44 <HAL_UART_MspInit+0xf8>)
 8001ad0:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8001ad2:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <HAL_UART_MspInit+0xf4>)
 8001ad4:	2241      	movs	r2, #65	; 0x41
 8001ad6:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ad8:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <HAL_UART_MspInit+0xf4>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ade:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <HAL_UART_MspInit+0xf4>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ae4:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <HAL_UART_MspInit+0xf4>)
 8001ae6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aea:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001aec:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <HAL_UART_MspInit+0xf4>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <HAL_UART_MspInit+0xf4>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8001af8:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <HAL_UART_MspInit+0xf4>)
 8001afa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001afe:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <HAL_UART_MspInit+0xf4>)
 8001b02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b06:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b08:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <HAL_UART_MspInit+0xf4>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001b0e:	480c      	ldr	r0, [pc, #48]	; (8001b40 <HAL_UART_MspInit+0xf4>)
 8001b10:	f001 fa52 	bl	8002fb8 <HAL_DMA_Init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8001b1a:	f7ff f9f1 	bl	8000f00 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a07      	ldr	r2, [pc, #28]	; (8001b40 <HAL_UART_MspInit+0xf4>)
 8001b22:	679a      	str	r2, [r3, #120]	; 0x78
 8001b24:	4a06      	ldr	r2, [pc, #24]	; (8001b40 <HAL_UART_MspInit+0xf4>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8001b2a:	bf00      	nop
 8001b2c:	3728      	adds	r7, #40	; 0x28
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40005000 	.word	0x40005000
 8001b38:	58024400 	.word	0x58024400
 8001b3c:	58020400 	.word	0x58020400
 8001b40:	240006dc 	.word	0x240006dc
 8001b44:	40020010 	.word	0x40020010

08001b48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b80 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b4c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b4e:	e003      	b.n	8001b58 <LoopCopyDataInit>

08001b50 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b52:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b54:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b56:	3104      	adds	r1, #4

08001b58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b58:	480b      	ldr	r0, [pc, #44]	; (8001b88 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b5a:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b5c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b5e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b60:	d3f6      	bcc.n	8001b50 <CopyDataInit>
  ldr  r2, =_sbss
 8001b62:	4a0b      	ldr	r2, [pc, #44]	; (8001b90 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b64:	e002      	b.n	8001b6c <LoopFillZerobss>

08001b66 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b66:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b68:	f842 3b04 	str.w	r3, [r2], #4

08001b6c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b6c:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b6e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b70:	d3f9      	bcc.n	8001b66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b72:	f7ff fcdd 	bl	8001530 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b76:	f00e f981 	bl	800fe7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b7a:	f7ff f98f 	bl	8000e9c <main>
  bx  lr    
 8001b7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b80:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001b84:	08010100 	.word	0x08010100
  ldr  r0, =_sdata
 8001b88:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001b8c:	240001e4 	.word	0x240001e4
  ldr  r2, =_sbss
 8001b90:	240001e4 	.word	0x240001e4
  ldr  r3, = _ebss
 8001b94:	24001e68 	.word	0x24001e68

08001b98 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b98:	e7fe      	b.n	8001b98 <ADC3_IRQHandler>
	...

08001b9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba0:	2003      	movs	r0, #3
 8001ba2:	f001 f9c9 	bl	8002f38 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ba6:	f005 f95f 	bl	8006e68 <HAL_RCC_GetSysClockFreq>
 8001baa:	4601      	mov	r1, r0
 8001bac:	4b13      	ldr	r3, [pc, #76]	; (8001bfc <HAL_Init+0x60>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	0a1b      	lsrs	r3, r3, #8
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	4a12      	ldr	r2, [pc, #72]	; (8001c00 <HAL_Init+0x64>)
 8001bb8:	5cd3      	ldrb	r3, [r2, r3]
 8001bba:	f003 031f 	and.w	r3, r3, #31
 8001bbe:	fa21 f303 	lsr.w	r3, r1, r3
 8001bc2:	4a10      	ldr	r2, [pc, #64]	; (8001c04 <HAL_Init+0x68>)
 8001bc4:	6013      	str	r3, [r2, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001bc6:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <HAL_Init+0x68>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <HAL_Init+0x60>)
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	490b      	ldr	r1, [pc, #44]	; (8001c00 <HAL_Init+0x64>)
 8001bd4:	5ccb      	ldrb	r3, [r1, r3]
 8001bd6:	f003 031f 	and.w	r3, r3, #31
 8001bda:	fa22 f303 	lsr.w	r3, r2, r3
 8001bde:	4a0a      	ldr	r2, [pc, #40]	; (8001c08 <HAL_Init+0x6c>)
 8001be0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001be2:	2000      	movs	r0, #0
 8001be4:	f000 f812 	bl	8001c0c <HAL_InitTick>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <HAL_Init+0x56>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e002      	b.n	8001bf8 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001bf2:	f7ff fc15 	bl	8001420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	58024400 	.word	0x58024400
 8001c00:	080100d8 	.word	0x080100d8
 8001c04:	24000000 	.word	0x24000000
 8001c08:	24000004 	.word	0x24000004

08001c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c14:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <HAL_InitTick+0x60>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e021      	b.n	8001c64 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c20:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <HAL_InitTick+0x64>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <HAL_InitTick+0x60>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c36:	4618      	mov	r0, r3
 8001c38:	f001 f9b1 	bl	8002f9e <HAL_SYSTICK_Config>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e00e      	b.n	8001c64 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b0f      	cmp	r3, #15
 8001c4a:	d80a      	bhi.n	8001c62 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	f04f 30ff 	mov.w	r0, #4294967295
 8001c54:	f001 f97b 	bl	8002f4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c58:	4a06      	ldr	r2, [pc, #24]	; (8001c74 <HAL_InitTick+0x68>)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	e000      	b.n	8001c64 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	2400000c 	.word	0x2400000c
 8001c70:	24000000 	.word	0x24000000
 8001c74:	24000008 	.word	0x24000008

08001c78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <HAL_IncTick+0x20>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	461a      	mov	r2, r3
 8001c82:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <HAL_IncTick+0x24>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4413      	add	r3, r2
 8001c88:	4a04      	ldr	r2, [pc, #16]	; (8001c9c <HAL_IncTick+0x24>)
 8001c8a:	6013      	str	r3, [r2, #0]
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	2400000c 	.word	0x2400000c
 8001c9c:	24000754 	.word	0x24000754

08001ca0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca4:	4b03      	ldr	r3, [pc, #12]	; (8001cb4 <HAL_GetTick+0x14>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	24000754 	.word	0x24000754

08001cb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cc0:	f7ff ffee 	bl	8001ca0 <HAL_GetTick>
 8001cc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd0:	d005      	beq.n	8001cde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cd2:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <HAL_Delay+0x40>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4413      	add	r3, r2
 8001cdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cde:	bf00      	nop
 8001ce0:	f7ff ffde 	bl	8001ca0 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d8f7      	bhi.n	8001ce0 <HAL_Delay+0x28>
  {
  }
}
 8001cf0:	bf00      	nop
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	2400000c 	.word	0x2400000c

08001cfc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001d00:	4b03      	ldr	r3, [pc, #12]	; (8001d10 <HAL_GetREVID+0x14>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	0c1b      	lsrs	r3, r3, #16
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	5c001000 	.word	0x5c001000

08001d14 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001d1e:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	43db      	mvns	r3, r3
 8001d26:	401a      	ands	r2, r3
 8001d28:	4904      	ldr	r1, [pc, #16]	; (8001d3c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	604b      	str	r3, [r1, #4]
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	58000400 	.word	0x58000400

08001d40 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	431a      	orrs	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	609a      	str	r2, [r3, #8]
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001da8:	b490      	push	{r4, r7}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
 8001db4:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	3360      	adds	r3, #96	; 0x60
 8001dba:	461a      	mov	r2, r3
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001dc4:	6823      	ldr	r3, [r4, #0]
 8001dc6:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	430b      	orrs	r3, r1
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001dd8:	bf00      	nop
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bc90      	pop	{r4, r7}
 8001de0:	4770      	bx	lr

08001de2 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b085      	sub	sp, #20
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	60f8      	str	r0, [r7, #12]
 8001dea:	60b9      	str	r1, [r7, #8]
 8001dec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	f003 031f 	and.w	r3, r3, #31
 8001dfc:	6879      	ldr	r1, [r7, #4]
 8001dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001e02:	431a      	orrs	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	611a      	str	r2, [r3, #16]
}
 8001e08:	bf00      	nop
 8001e0a:	3714      	adds	r7, #20
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001e14:	b490      	push	{r4, r7}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	3360      	adds	r3, #96	; 0x60
 8001e24:	461a      	mov	r2, r3
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001e2e:	6823      	ldr	r3, [r4, #0]
 8001e30:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	6023      	str	r3, [r4, #0]
}
 8001e3a:	bf00      	nop
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc90      	pop	{r4, r7}
 8001e42:	4770      	bx	lr

08001e44 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e44:	b490      	push	{r4, r7}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	3330      	adds	r3, #48	; 0x30
 8001e54:	461a      	mov	r2, r3
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	0a1b      	lsrs	r3, r3, #8
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	f003 030c 	and.w	r3, r3, #12
 8001e60:	4413      	add	r3, r2
 8001e62:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001e64:	6822      	ldr	r2, [r4, #0]
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	f003 031f 	and.w	r3, r3, #31
 8001e6c:	211f      	movs	r1, #31
 8001e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e72:	43db      	mvns	r3, r3
 8001e74:	401a      	ands	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	0e9b      	lsrs	r3, r3, #26
 8001e7a:	f003 011f 	and.w	r1, r3, #31
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	f003 031f 	and.w	r3, r3, #31
 8001e84:	fa01 f303 	lsl.w	r3, r1, r3
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e8c:	bf00      	nop
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc90      	pop	{r4, r7}
 8001e94:	4770      	bx	lr

08001e96 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e96:	b490      	push	{r4, r7}
 8001e98:	b084      	sub	sp, #16
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	60f8      	str	r0, [r7, #12]
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	3314      	adds	r3, #20
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	0e5b      	lsrs	r3, r3, #25
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	4413      	add	r3, r2
 8001eb4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001eb6:	6822      	ldr	r2, [r4, #0]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	0d1b      	lsrs	r3, r3, #20
 8001ebc:	f003 031f 	and.w	r3, r3, #31
 8001ec0:	2107      	movs	r1, #7
 8001ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	401a      	ands	r2, r3
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	0d1b      	lsrs	r3, r3, #20
 8001ece:	f003 031f 	and.w	r3, r3, #31
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001edc:	bf00      	nop
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc90      	pop	{r4, r7}
 8001ee4:	4770      	bx	lr
	...

08001ee8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f00:	43db      	mvns	r3, r3
 8001f02:	401a      	ands	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f003 0318 	and.w	r3, r3, #24
 8001f0a:	4908      	ldr	r1, [pc, #32]	; (8001f2c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f0c:	40d9      	lsrs	r1, r3
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	400b      	ands	r3, r1
 8001f12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f16:	431a      	orrs	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f1e:	bf00      	nop
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	000fffff 	.word	0x000fffff

08001f30 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	4b04      	ldr	r3, [pc, #16]	; (8001f50 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6093      	str	r3, [r2, #8]
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	5fffffc0 	.word	0x5fffffc0

08001f54 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f68:	d101      	bne.n	8001f6e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <LL_ADC_EnableInternalRegulator+0x24>)
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	6fffffc0 	.word	0x6fffffc0

08001fa4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001fb8:	d101      	bne.n	8001fbe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d101      	bne.n	8001fe4 <LL_ADC_IsEnabled+0x18>
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e000      	b.n	8001fe6 <LL_ADC_IsEnabled+0x1a>
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	2b04      	cmp	r3, #4
 8002004:	d101      	bne.n	800200a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002006:	2301      	movs	r3, #1
 8002008:	e000      	b.n	800200c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	2b08      	cmp	r3, #8
 800202a:	d101      	bne.n	8002030 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800202c:	2301      	movs	r3, #1
 800202e:	e000      	b.n	8002032 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
	...

08002040 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002040:	b590      	push	{r4, r7, lr}
 8002042:	b089      	sub	sp, #36	; 0x24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002048:	2300      	movs	r3, #0
 800204a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800204c:	2300      	movs	r3, #0
 800204e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e18e      	b.n	8002378 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002064:	2b00      	cmp	r3, #0
 8002066:	d109      	bne.n	800207c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7fe fbf3 	bl	8000854 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff ff67 	bl	8001f54 <LL_ADC_IsDeepPowerDownEnabled>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d004      	beq.n	8002096 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff ff4d 	bl	8001f30 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff ff82 	bl	8001fa4 <LL_ADC_IsInternalRegulatorEnabled>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d113      	bne.n	80020ce <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff ff66 	bl	8001f7c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80020b0:	4b9a      	ldr	r3, [pc, #616]	; (800231c <HAL_ADC_Init+0x2dc>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	099b      	lsrs	r3, r3, #6
 80020b6:	4a9a      	ldr	r2, [pc, #616]	; (8002320 <HAL_ADC_Init+0x2e0>)
 80020b8:	fba2 2303 	umull	r2, r3, r2, r3
 80020bc:	099b      	lsrs	r3, r3, #6
 80020be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020c0:	e002      	b.n	80020c8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	3b01      	subs	r3, #1
 80020c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1f9      	bne.n	80020c2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff ff66 	bl	8001fa4 <LL_ADC_IsInternalRegulatorEnabled>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10d      	bne.n	80020fa <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e2:	f043 0210 	orr.w	r2, r3, #16
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ee:	f043 0201 	orr.w	r2, r3, #1
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff ff77 	bl	8001ff2 <LL_ADC_REG_IsConversionOngoing>
 8002104:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210a:	f003 0310 	and.w	r3, r3, #16
 800210e:	2b00      	cmp	r3, #0
 8002110:	f040 8129 	bne.w	8002366 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	2b00      	cmp	r3, #0
 8002118:	f040 8125 	bne.w	8002366 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002120:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002124:	f043 0202 	orr.w	r2, r3, #2
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff ff4b 	bl	8001fcc <LL_ADC_IsEnabled>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d136      	bne.n	80021aa <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a78      	ldr	r2, [pc, #480]	; (8002324 <HAL_ADC_Init+0x2e4>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d004      	beq.n	8002150 <HAL_ADC_Init+0x110>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a77      	ldr	r2, [pc, #476]	; (8002328 <HAL_ADC_Init+0x2e8>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d10e      	bne.n	800216e <HAL_ADC_Init+0x12e>
 8002150:	4874      	ldr	r0, [pc, #464]	; (8002324 <HAL_ADC_Init+0x2e4>)
 8002152:	f7ff ff3b 	bl	8001fcc <LL_ADC_IsEnabled>
 8002156:	4604      	mov	r4, r0
 8002158:	4873      	ldr	r0, [pc, #460]	; (8002328 <HAL_ADC_Init+0x2e8>)
 800215a:	f7ff ff37 	bl	8001fcc <LL_ADC_IsEnabled>
 800215e:	4603      	mov	r3, r0
 8002160:	4323      	orrs	r3, r4
 8002162:	2b00      	cmp	r3, #0
 8002164:	bf0c      	ite	eq
 8002166:	2301      	moveq	r3, #1
 8002168:	2300      	movne	r3, #0
 800216a:	b2db      	uxtb	r3, r3
 800216c:	e008      	b.n	8002180 <HAL_ADC_Init+0x140>
 800216e:	486f      	ldr	r0, [pc, #444]	; (800232c <HAL_ADC_Init+0x2ec>)
 8002170:	f7ff ff2c 	bl	8001fcc <LL_ADC_IsEnabled>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	bf0c      	ite	eq
 800217a:	2301      	moveq	r3, #1
 800217c:	2300      	movne	r3, #0
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d012      	beq.n	80021aa <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a66      	ldr	r2, [pc, #408]	; (8002324 <HAL_ADC_Init+0x2e4>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d004      	beq.n	8002198 <HAL_ADC_Init+0x158>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a65      	ldr	r2, [pc, #404]	; (8002328 <HAL_ADC_Init+0x2e8>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d101      	bne.n	800219c <HAL_ADC_Init+0x15c>
 8002198:	4a65      	ldr	r2, [pc, #404]	; (8002330 <HAL_ADC_Init+0x2f0>)
 800219a:	e000      	b.n	800219e <HAL_ADC_Init+0x15e>
 800219c:	4a65      	ldr	r2, [pc, #404]	; (8002334 <HAL_ADC_Init+0x2f4>)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	4619      	mov	r1, r3
 80021a4:	4610      	mov	r0, r2
 80021a6:	f7ff fdcb 	bl	8001d40 <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80021aa:	f7ff fda7 	bl	8001cfc <HAL_GetREVID>
 80021ae:	4602      	mov	r2, r0
 80021b0:	f241 0303 	movw	r3, #4099	; 0x1003
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d914      	bls.n	80021e2 <HAL_ADC_Init+0x1a2>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	2b10      	cmp	r3, #16
 80021be:	d110      	bne.n	80021e2 <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	7d5b      	ldrb	r3, [r3, #21]
 80021c4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80021ca:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80021d0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	7f1b      	ldrb	r3, [r3, #28]
 80021d6:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 80021d8:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80021da:	f043 030c 	orr.w	r3, r3, #12
 80021de:	61bb      	str	r3, [r7, #24]
 80021e0:	e00d      	b.n	80021fe <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	7d5b      	ldrb	r3, [r3, #21]
 80021e6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80021ec:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80021f2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	7f1b      	ldrb	r3, [r3, #28]
 80021f8:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	7f1b      	ldrb	r3, [r3, #28]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d106      	bne.n	8002214 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	3b01      	subs	r3, #1
 800220c:	045b      	lsls	r3, r3, #17
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4313      	orrs	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	2b00      	cmp	r3, #0
 800221a:	d009      	beq.n	8002230 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002220:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002228:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68da      	ldr	r2, [r3, #12]
 8002236:	4b40      	ldr	r3, [pc, #256]	; (8002338 <HAL_ADC_Init+0x2f8>)
 8002238:	4013      	ands	r3, r2
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6812      	ldr	r2, [r2, #0]
 800223e:	69b9      	ldr	r1, [r7, #24]
 8002240:	430b      	orrs	r3, r1
 8002242:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff fed2 	bl	8001ff2 <LL_ADC_REG_IsConversionOngoing>
 800224e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff fedf 	bl	8002018 <LL_ADC_INJ_IsConversionOngoing>
 800225a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d14a      	bne.n	80022f8 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d147      	bne.n	80022f8 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	7d1b      	ldrb	r3, [r3, #20]
 800226c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	4b2f      	ldr	r3, [pc, #188]	; (800233c <HAL_ADC_Init+0x2fc>)
 800227e:	4013      	ands	r3, r2
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	69b9      	ldr	r1, [r7, #24]
 8002286:	430b      	orrs	r3, r1
 8002288:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002290:	2b01      	cmp	r3, #1
 8002292:	d11b      	bne.n	80022cc <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002298:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	691a      	ldr	r2, [r3, #16]
 80022a0:	4b27      	ldr	r3, [pc, #156]	; (8002340 <HAL_ADC_Init+0x300>)
 80022a2:	4013      	ands	r3, r2
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022a8:	3a01      	subs	r2, #1
 80022aa:	0411      	lsls	r1, r2, #16
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022b0:	4311      	orrs	r1, r2
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80022b6:	4311      	orrs	r1, r2
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80022bc:	430a      	orrs	r2, r1
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f042 0201 	orr.w	r2, r2, #1
 80022c8:	611a      	str	r2, [r3, #16]
 80022ca:	e007      	b.n	80022dc <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	691a      	ldr	r2, [r3, #16]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 0201 	bic.w	r2, r2, #1
 80022da:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 fb58 	bl	80029a8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d121      	bne.n	8002344 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	f023 010f 	bic.w	r1, r3, #15
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	1e5a      	subs	r2, r3, #1
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	430a      	orrs	r2, r1
 8002316:	631a      	str	r2, [r3, #48]	; 0x30
 8002318:	e01c      	b.n	8002354 <HAL_ADC_Init+0x314>
 800231a:	bf00      	nop
 800231c:	24000000 	.word	0x24000000
 8002320:	053e2d63 	.word	0x053e2d63
 8002324:	40022000 	.word	0x40022000
 8002328:	40022100 	.word	0x40022100
 800232c:	58026000 	.word	0x58026000
 8002330:	40022300 	.word	0x40022300
 8002334:	58026300 	.word	0x58026300
 8002338:	fff0c003 	.word	0xfff0c003
 800233c:	ffffbffc 	.word	0xffffbffc
 8002340:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 020f 	bic.w	r2, r2, #15
 8002352:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002358:	f023 0303 	bic.w	r3, r3, #3
 800235c:	f043 0201 	orr.w	r2, r3, #1
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	655a      	str	r2, [r3, #84]	; 0x54
 8002364:	e007      	b.n	8002376 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236a:	f043 0210 	orr.w	r2, r3, #16
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002376:	7ffb      	ldrb	r3, [r7, #31]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3724      	adds	r7, #36	; 0x24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd90      	pop	{r4, r7, pc}

08002380 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002380:	b590      	push	{r4, r7, lr}
 8002382:	b099      	sub	sp, #100	; 0x64
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002390:	2300      	movs	r3, #0
 8002392:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	4a99      	ldr	r2, [pc, #612]	; (8002600 <HAL_ADC_ConfigChannel+0x280>)
 800239a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d101      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x2a>
 80023a6:	2302      	movs	r3, #2
 80023a8:	e2e6      	b.n	8002978 <HAL_ADC_ConfigChannel+0x5f8>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff fe1b 	bl	8001ff2 <LL_ADC_REG_IsConversionOngoing>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f040 82cb 	bne.w	800295a <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d108      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x62>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	0e9b      	lsrs	r3, r3, #26
 80023d6:	f003 031f 	and.w	r3, r3, #31
 80023da:	2201      	movs	r2, #1
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	e00f      	b.n	8002402 <HAL_ADC_ConfigChannel+0x82>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023ea:	fa93 f3a3 	rbit	r3, r3
 80023ee:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023f2:	fab3 f383 	clz	r3, r3
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	f003 031f 	and.w	r3, r3, #31
 80023fc:	2201      	movs	r2, #1
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6812      	ldr	r2, [r2, #0]
 8002406:	69d1      	ldr	r1, [r2, #28]
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6812      	ldr	r2, [r2, #0]
 800240c:	430b      	orrs	r3, r1
 800240e:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6818      	ldr	r0, [r3, #0]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	6859      	ldr	r1, [r3, #4]
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	461a      	mov	r2, r3
 800241e:	f7ff fd11 	bl	8001e44 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff fde3 	bl	8001ff2 <LL_ADC_REG_IsConversionOngoing>
 800242c:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff fdf0 	bl	8002018 <LL_ADC_INJ_IsConversionOngoing>
 8002438:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800243a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800243c:	2b00      	cmp	r3, #0
 800243e:	f040 80b3 	bne.w	80025a8 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002444:	2b00      	cmp	r3, #0
 8002446:	f040 80af 	bne.w	80025a8 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6818      	ldr	r0, [r3, #0]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	6819      	ldr	r1, [r3, #0]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	461a      	mov	r2, r3
 8002458:	f7ff fd1d 	bl	8001e96 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800245c:	4b69      	ldr	r3, [pc, #420]	; (8002604 <HAL_ADC_ConfigChannel+0x284>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002464:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002468:	d10b      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x102>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	695a      	ldr	r2, [r3, #20]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	089b      	lsrs	r3, r3, #2
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	e01d      	b.n	80024be <HAL_ADC_ConfigChannel+0x13e>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f003 0310 	and.w	r3, r3, #16
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10b      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x128>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	695a      	ldr	r2, [r3, #20]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	089b      	lsrs	r3, r3, #2
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	e00a      	b.n	80024be <HAL_ADC_ConfigChannel+0x13e>
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	695a      	ldr	r2, [r3, #20]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	089b      	lsrs	r3, r3, #2
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	2b04      	cmp	r3, #4
 80024c6:	d027      	beq.n	8002518 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6818      	ldr	r0, [r3, #0]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	6919      	ldr	r1, [r3, #16]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024d6:	f7ff fc67 	bl	8001da8 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6818      	ldr	r0, [r3, #0]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	6919      	ldr	r1, [r3, #16]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	7e5b      	ldrb	r3, [r3, #25]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d102      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x170>
 80024ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80024ee:	e000      	b.n	80024f2 <HAL_ADC_ConfigChannel+0x172>
 80024f0:	2300      	movs	r3, #0
 80024f2:	461a      	mov	r2, r3
 80024f4:	f7ff fc8e 	bl	8001e14 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6818      	ldr	r0, [r3, #0]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	6919      	ldr	r1, [r3, #16]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	7e1b      	ldrb	r3, [r3, #24]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d102      	bne.n	800250e <HAL_ADC_ConfigChannel+0x18e>
 8002508:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800250c:	e000      	b.n	8002510 <HAL_ADC_ConfigChannel+0x190>
 800250e:	2300      	movs	r3, #0
 8002510:	461a      	mov	r2, r3
 8002512:	f7ff fc66 	bl	8001de2 <LL_ADC_SetDataRightShift>
 8002516:	e047      	b.n	80025a8 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800251e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	069b      	lsls	r3, r3, #26
 8002528:	429a      	cmp	r2, r3
 800252a:	d107      	bne.n	800253c <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800253a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002542:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	069b      	lsls	r3, r3, #26
 800254c:	429a      	cmp	r2, r3
 800254e:	d107      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800255e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002566:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	069b      	lsls	r3, r3, #26
 8002570:	429a      	cmp	r2, r3
 8002572:	d107      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002582:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800258a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	069b      	lsls	r3, r3, #26
 8002594:	429a      	cmp	r2, r3
 8002596:	d107      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80025a6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff fd0d 	bl	8001fcc <LL_ADC_IsEnabled>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f040 81d9 	bne.w	800296c <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6818      	ldr	r0, [r3, #0]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	6819      	ldr	r1, [r3, #0]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	461a      	mov	r2, r3
 80025c8:	f7ff fc8e 	bl	8001ee8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	4a0b      	ldr	r2, [pc, #44]	; (8002600 <HAL_ADC_ConfigChannel+0x280>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	f040 8101 	bne.w	80027da <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10f      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x288>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	0e9b      	lsrs	r3, r3, #26
 80025ee:	3301      	adds	r3, #1
 80025f0:	f003 031f 	and.w	r3, r3, #31
 80025f4:	2b09      	cmp	r3, #9
 80025f6:	bf94      	ite	ls
 80025f8:	2301      	movls	r3, #1
 80025fa:	2300      	movhi	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	e016      	b.n	800262e <HAL_ADC_ConfigChannel+0x2ae>
 8002600:	47ff0000 	.word	0x47ff0000
 8002604:	5c001000 	.word	0x5c001000
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002610:	fa93 f3a3 	rbit	r3, r3
 8002614:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002618:	fab3 f383 	clz	r3, r3
 800261c:	b2db      	uxtb	r3, r3
 800261e:	3301      	adds	r3, #1
 8002620:	f003 031f 	and.w	r3, r3, #31
 8002624:	2b09      	cmp	r3, #9
 8002626:	bf94      	ite	ls
 8002628:	2301      	movls	r3, #1
 800262a:	2300      	movhi	r3, #0
 800262c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800262e:	2b00      	cmp	r3, #0
 8002630:	d064      	beq.n	80026fc <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800263a:	2b00      	cmp	r3, #0
 800263c:	d107      	bne.n	800264e <HAL_ADC_ConfigChannel+0x2ce>
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	0e9b      	lsrs	r3, r3, #26
 8002644:	3301      	adds	r3, #1
 8002646:	069b      	lsls	r3, r3, #26
 8002648:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800264c:	e00e      	b.n	800266c <HAL_ADC_ConfigChannel+0x2ec>
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002656:	fa93 f3a3 	rbit	r3, r3
 800265a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800265c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800265e:	fab3 f383 	clz	r3, r3
 8002662:	b2db      	uxtb	r3, r3
 8002664:	3301      	adds	r3, #1
 8002666:	069b      	lsls	r3, r3, #26
 8002668:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002674:	2b00      	cmp	r3, #0
 8002676:	d109      	bne.n	800268c <HAL_ADC_ConfigChannel+0x30c>
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	0e9b      	lsrs	r3, r3, #26
 800267e:	3301      	adds	r3, #1
 8002680:	f003 031f 	and.w	r3, r3, #31
 8002684:	2101      	movs	r1, #1
 8002686:	fa01 f303 	lsl.w	r3, r1, r3
 800268a:	e010      	b.n	80026ae <HAL_ADC_ConfigChannel+0x32e>
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002694:	fa93 f3a3 	rbit	r3, r3
 8002698:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800269a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269c:	fab3 f383 	clz	r3, r3
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	3301      	adds	r3, #1
 80026a4:	f003 031f 	and.w	r3, r3, #31
 80026a8:	2101      	movs	r1, #1
 80026aa:	fa01 f303 	lsl.w	r3, r1, r3
 80026ae:	ea42 0103 	orr.w	r1, r2, r3
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10a      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x354>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	0e9b      	lsrs	r3, r3, #26
 80026c4:	3301      	adds	r3, #1
 80026c6:	f003 021f 	and.w	r2, r3, #31
 80026ca:	4613      	mov	r3, r2
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	4413      	add	r3, r2
 80026d0:	051b      	lsls	r3, r3, #20
 80026d2:	e011      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x378>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026dc:	fa93 f3a3 	rbit	r3, r3
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	fab3 f383 	clz	r3, r3
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	3301      	adds	r3, #1
 80026ec:	f003 021f 	and.w	r2, r3, #31
 80026f0:	4613      	mov	r3, r2
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	4413      	add	r3, r2
 80026f6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026f8:	430b      	orrs	r3, r1
 80026fa:	e069      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002704:	2b00      	cmp	r3, #0
 8002706:	d107      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x398>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	0e9b      	lsrs	r3, r3, #26
 800270e:	3301      	adds	r3, #1
 8002710:	069b      	lsls	r3, r3, #26
 8002712:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002716:	e00e      	b.n	8002736 <HAL_ADC_ConfigChannel+0x3b6>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271e:	6a3b      	ldr	r3, [r7, #32]
 8002720:	fa93 f3a3 	rbit	r3, r3
 8002724:	61fb      	str	r3, [r7, #28]
  return result;
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	fab3 f383 	clz	r3, r3
 800272c:	b2db      	uxtb	r3, r3
 800272e:	3301      	adds	r3, #1
 8002730:	069b      	lsls	r3, r3, #26
 8002732:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800273e:	2b00      	cmp	r3, #0
 8002740:	d109      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x3d6>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	0e9b      	lsrs	r3, r3, #26
 8002748:	3301      	adds	r3, #1
 800274a:	f003 031f 	and.w	r3, r3, #31
 800274e:	2101      	movs	r1, #1
 8002750:	fa01 f303 	lsl.w	r3, r1, r3
 8002754:	e010      	b.n	8002778 <HAL_ADC_ConfigChannel+0x3f8>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	fa93 f3a3 	rbit	r3, r3
 8002762:	617b      	str	r3, [r7, #20]
  return result;
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	fab3 f383 	clz	r3, r3
 800276a:	b2db      	uxtb	r3, r3
 800276c:	3301      	adds	r3, #1
 800276e:	f003 031f 	and.w	r3, r3, #31
 8002772:	2101      	movs	r1, #1
 8002774:	fa01 f303 	lsl.w	r3, r1, r3
 8002778:	ea42 0103 	orr.w	r1, r2, r3
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10d      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x424>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	0e9b      	lsrs	r3, r3, #26
 800278e:	3301      	adds	r3, #1
 8002790:	f003 021f 	and.w	r2, r3, #31
 8002794:	4613      	mov	r3, r2
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	4413      	add	r3, r2
 800279a:	3b1e      	subs	r3, #30
 800279c:	051b      	lsls	r3, r3, #20
 800279e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027a2:	e014      	b.n	80027ce <HAL_ADC_ConfigChannel+0x44e>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	fa93 f3a3 	rbit	r3, r3
 80027b0:	60fb      	str	r3, [r7, #12]
  return result;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	fab3 f383 	clz	r3, r3
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	3301      	adds	r3, #1
 80027bc:	f003 021f 	and.w	r2, r3, #31
 80027c0:	4613      	mov	r3, r2
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	4413      	add	r3, r2
 80027c6:	3b1e      	subs	r3, #30
 80027c8:	051b      	lsls	r3, r3, #20
 80027ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027ce:	430b      	orrs	r3, r1
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	6892      	ldr	r2, [r2, #8]
 80027d4:	4619      	mov	r1, r3
 80027d6:	f7ff fb5e 	bl	8001e96 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f280 80c4 	bge.w	800296c <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a65      	ldr	r2, [pc, #404]	; (8002980 <HAL_ADC_ConfigChannel+0x600>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d004      	beq.n	80027f8 <HAL_ADC_ConfigChannel+0x478>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a64      	ldr	r2, [pc, #400]	; (8002984 <HAL_ADC_ConfigChannel+0x604>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d101      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x47c>
 80027f8:	4b63      	ldr	r3, [pc, #396]	; (8002988 <HAL_ADC_ConfigChannel+0x608>)
 80027fa:	e000      	b.n	80027fe <HAL_ADC_ConfigChannel+0x47e>
 80027fc:	4b63      	ldr	r3, [pc, #396]	; (800298c <HAL_ADC_ConfigChannel+0x60c>)
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff fac4 	bl	8001d8c <LL_ADC_GetCommonPathInternalCh>
 8002804:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a5d      	ldr	r2, [pc, #372]	; (8002980 <HAL_ADC_ConfigChannel+0x600>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d004      	beq.n	800281a <HAL_ADC_ConfigChannel+0x49a>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a5b      	ldr	r2, [pc, #364]	; (8002984 <HAL_ADC_ConfigChannel+0x604>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d10e      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x4b8>
 800281a:	4859      	ldr	r0, [pc, #356]	; (8002980 <HAL_ADC_ConfigChannel+0x600>)
 800281c:	f7ff fbd6 	bl	8001fcc <LL_ADC_IsEnabled>
 8002820:	4604      	mov	r4, r0
 8002822:	4858      	ldr	r0, [pc, #352]	; (8002984 <HAL_ADC_ConfigChannel+0x604>)
 8002824:	f7ff fbd2 	bl	8001fcc <LL_ADC_IsEnabled>
 8002828:	4603      	mov	r3, r0
 800282a:	4323      	orrs	r3, r4
 800282c:	2b00      	cmp	r3, #0
 800282e:	bf0c      	ite	eq
 8002830:	2301      	moveq	r3, #1
 8002832:	2300      	movne	r3, #0
 8002834:	b2db      	uxtb	r3, r3
 8002836:	e008      	b.n	800284a <HAL_ADC_ConfigChannel+0x4ca>
 8002838:	4855      	ldr	r0, [pc, #340]	; (8002990 <HAL_ADC_ConfigChannel+0x610>)
 800283a:	f7ff fbc7 	bl	8001fcc <LL_ADC_IsEnabled>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	bf0c      	ite	eq
 8002844:	2301      	moveq	r3, #1
 8002846:	2300      	movne	r3, #0
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d07b      	beq.n	8002946 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a50      	ldr	r2, [pc, #320]	; (8002994 <HAL_ADC_ConfigChannel+0x614>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d12e      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x536>
 8002858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800285a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d129      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a4a      	ldr	r2, [pc, #296]	; (8002990 <HAL_ADC_ConfigChannel+0x610>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d17f      	bne.n	800296c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a43      	ldr	r2, [pc, #268]	; (8002980 <HAL_ADC_ConfigChannel+0x600>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d004      	beq.n	8002880 <HAL_ADC_ConfigChannel+0x500>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a42      	ldr	r2, [pc, #264]	; (8002984 <HAL_ADC_ConfigChannel+0x604>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d101      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x504>
 8002880:	4a41      	ldr	r2, [pc, #260]	; (8002988 <HAL_ADC_ConfigChannel+0x608>)
 8002882:	e000      	b.n	8002886 <HAL_ADC_ConfigChannel+0x506>
 8002884:	4a41      	ldr	r2, [pc, #260]	; (800298c <HAL_ADC_ConfigChannel+0x60c>)
 8002886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002888:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800288c:	4619      	mov	r1, r3
 800288e:	4610      	mov	r0, r2
 8002890:	f7ff fa69 	bl	8001d66 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002894:	4b40      	ldr	r3, [pc, #256]	; (8002998 <HAL_ADC_ConfigChannel+0x618>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	099b      	lsrs	r3, r3, #6
 800289a:	4a40      	ldr	r2, [pc, #256]	; (800299c <HAL_ADC_ConfigChannel+0x61c>)
 800289c:	fba2 2303 	umull	r2, r3, r2, r3
 80028a0:	099b      	lsrs	r3, r3, #6
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 80028a6:	e002      	b.n	80028ae <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	3b01      	subs	r3, #1
 80028ac:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1f9      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028b4:	e05a      	b.n	800296c <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a39      	ldr	r2, [pc, #228]	; (80029a0 <HAL_ADC_ConfigChannel+0x620>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d11e      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x57e>
 80028c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d119      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a30      	ldr	r2, [pc, #192]	; (8002990 <HAL_ADC_ConfigChannel+0x610>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d14b      	bne.n	800296c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a29      	ldr	r2, [pc, #164]	; (8002980 <HAL_ADC_ConfigChannel+0x600>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d004      	beq.n	80028e8 <HAL_ADC_ConfigChannel+0x568>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a28      	ldr	r2, [pc, #160]	; (8002984 <HAL_ADC_ConfigChannel+0x604>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d101      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x56c>
 80028e8:	4a27      	ldr	r2, [pc, #156]	; (8002988 <HAL_ADC_ConfigChannel+0x608>)
 80028ea:	e000      	b.n	80028ee <HAL_ADC_ConfigChannel+0x56e>
 80028ec:	4a27      	ldr	r2, [pc, #156]	; (800298c <HAL_ADC_ConfigChannel+0x60c>)
 80028ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028f4:	4619      	mov	r1, r3
 80028f6:	4610      	mov	r0, r2
 80028f8:	f7ff fa35 	bl	8001d66 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028fc:	e036      	b.n	800296c <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a28      	ldr	r2, [pc, #160]	; (80029a4 <HAL_ADC_ConfigChannel+0x624>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d131      	bne.n	800296c <HAL_ADC_ConfigChannel+0x5ec>
 8002908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800290a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d12c      	bne.n	800296c <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a1e      	ldr	r2, [pc, #120]	; (8002990 <HAL_ADC_ConfigChannel+0x610>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d127      	bne.n	800296c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a17      	ldr	r2, [pc, #92]	; (8002980 <HAL_ADC_ConfigChannel+0x600>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d004      	beq.n	8002930 <HAL_ADC_ConfigChannel+0x5b0>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a16      	ldr	r2, [pc, #88]	; (8002984 <HAL_ADC_ConfigChannel+0x604>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d101      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x5b4>
 8002930:	4a15      	ldr	r2, [pc, #84]	; (8002988 <HAL_ADC_ConfigChannel+0x608>)
 8002932:	e000      	b.n	8002936 <HAL_ADC_ConfigChannel+0x5b6>
 8002934:	4a15      	ldr	r2, [pc, #84]	; (800298c <HAL_ADC_ConfigChannel+0x60c>)
 8002936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002938:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800293c:	4619      	mov	r1, r3
 800293e:	4610      	mov	r0, r2
 8002940:	f7ff fa11 	bl	8001d66 <LL_ADC_SetCommonPathInternalCh>
 8002944:	e012      	b.n	800296c <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294a:	f043 0220 	orr.w	r2, r3, #32
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002958:	e008      	b.n	800296c <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295e:	f043 0220 	orr.w	r2, r3, #32
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002974:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8002978:	4618      	mov	r0, r3
 800297a:	3764      	adds	r7, #100	; 0x64
 800297c:	46bd      	mov	sp, r7
 800297e:	bd90      	pop	{r4, r7, pc}
 8002980:	40022000 	.word	0x40022000
 8002984:	40022100 	.word	0x40022100
 8002988:	40022300 	.word	0x40022300
 800298c:	58026300 	.word	0x58026300
 8002990:	58026000 	.word	0x58026000
 8002994:	cb840000 	.word	0xcb840000
 8002998:	24000000 	.word	0x24000000
 800299c:	053e2d63 	.word	0x053e2d63
 80029a0:	c7520000 	.word	0xc7520000
 80029a4:	cfb80000 	.word	0xcfb80000

080029a8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a70      	ldr	r2, [pc, #448]	; (8002b78 <ADC_ConfigureBoostMode+0x1d0>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d004      	beq.n	80029c4 <ADC_ConfigureBoostMode+0x1c>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a6f      	ldr	r2, [pc, #444]	; (8002b7c <ADC_ConfigureBoostMode+0x1d4>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d109      	bne.n	80029d8 <ADC_ConfigureBoostMode+0x30>
 80029c4:	4b6e      	ldr	r3, [pc, #440]	; (8002b80 <ADC_ConfigureBoostMode+0x1d8>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	bf14      	ite	ne
 80029d0:	2301      	movne	r3, #1
 80029d2:	2300      	moveq	r3, #0
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	e008      	b.n	80029ea <ADC_ConfigureBoostMode+0x42>
 80029d8:	4b6a      	ldr	r3, [pc, #424]	; (8002b84 <ADC_ConfigureBoostMode+0x1dc>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	bf14      	ite	ne
 80029e4:	2301      	movne	r3, #1
 80029e6:	2300      	moveq	r3, #0
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d01a      	beq.n	8002a24 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80029ee:	f004 fbad 	bl	800714c <HAL_RCC_GetHCLKFreq>
 80029f2:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029fc:	d006      	beq.n	8002a0c <ADC_ConfigureBoostMode+0x64>
 80029fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a02:	d00b      	beq.n	8002a1c <ADC_ConfigureBoostMode+0x74>
 8002a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a08:	d000      	beq.n	8002a0c <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8002a0a:	e05d      	b.n	8002ac8 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	0c1b      	lsrs	r3, r3, #16
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a18:	60fb      	str	r3, [r7, #12]
        break;
 8002a1a:	e055      	b.n	8002ac8 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	089b      	lsrs	r3, r3, #2
 8002a20:	60fb      	str	r3, [r7, #12]
        break;
 8002a22:	e051      	b.n	8002ac8 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002a24:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002a28:	f005 fad2 	bl	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002a2c:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002a36:	d02a      	beq.n	8002a8e <ADC_ConfigureBoostMode+0xe6>
 8002a38:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002a3c:	d813      	bhi.n	8002a66 <ADC_ConfigureBoostMode+0xbe>
 8002a3e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002a42:	d024      	beq.n	8002a8e <ADC_ConfigureBoostMode+0xe6>
 8002a44:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002a48:	d806      	bhi.n	8002a58 <ADC_ConfigureBoostMode+0xb0>
 8002a4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a4e:	d01e      	beq.n	8002a8e <ADC_ConfigureBoostMode+0xe6>
 8002a50:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a54:	d01b      	beq.n	8002a8e <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8002a56:	e037      	b.n	8002ac8 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002a58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a5c:	d017      	beq.n	8002a8e <ADC_ConfigureBoostMode+0xe6>
 8002a5e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002a62:	d014      	beq.n	8002a8e <ADC_ConfigureBoostMode+0xe6>
        break;
 8002a64:	e030      	b.n	8002ac8 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002a66:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002a6a:	d021      	beq.n	8002ab0 <ADC_ConfigureBoostMode+0x108>
 8002a6c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002a70:	d806      	bhi.n	8002a80 <ADC_ConfigureBoostMode+0xd8>
 8002a72:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002a76:	d013      	beq.n	8002aa0 <ADC_ConfigureBoostMode+0xf8>
 8002a78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a7c:	d014      	beq.n	8002aa8 <ADC_ConfigureBoostMode+0x100>
        break;
 8002a7e:	e023      	b.n	8002ac8 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002a80:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002a84:	d018      	beq.n	8002ab8 <ADC_ConfigureBoostMode+0x110>
 8002a86:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002a8a:	d019      	beq.n	8002ac0 <ADC_ConfigureBoostMode+0x118>
        break;
 8002a8c:	e01c      	b.n	8002ac8 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	0c9b      	lsrs	r3, r3, #18
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9c:	60fb      	str	r3, [r7, #12]
        break;
 8002a9e:	e013      	b.n	8002ac8 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	091b      	lsrs	r3, r3, #4
 8002aa4:	60fb      	str	r3, [r7, #12]
      break;
 8002aa6:	e00f      	b.n	8002ac8 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	60fb      	str	r3, [r7, #12]
        break;
 8002aae:	e00b      	b.n	8002ac8 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	099b      	lsrs	r3, r3, #6
 8002ab4:	60fb      	str	r3, [r7, #12]
        break;
 8002ab6:	e007      	b.n	8002ac8 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	09db      	lsrs	r3, r3, #7
 8002abc:	60fb      	str	r3, [r7, #12]
        break;
 8002abe:	e003      	b.n	8002ac8 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	0a1b      	lsrs	r3, r3, #8
 8002ac4:	60fb      	str	r3, [r7, #12]
        break;
 8002ac6:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002ac8:	f7ff f918 	bl	8001cfc <HAL_GetREVID>
 8002acc:	4602      	mov	r2, r0
 8002ace:	f241 0303 	movw	r3, #4099	; 0x1003
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d815      	bhi.n	8002b02 <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4a2b      	ldr	r2, [pc, #172]	; (8002b88 <ADC_ConfigureBoostMode+0x1e0>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d908      	bls.n	8002af0 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aec:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002aee:	e03e      	b.n	8002b6e <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689a      	ldr	r2, [r3, #8]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002afe:	609a      	str	r2, [r3, #8]
}
 8002b00:	e035      	b.n	8002b6e <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	085b      	lsrs	r3, r3, #1
 8002b06:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4a20      	ldr	r2, [pc, #128]	; (8002b8c <ADC_ConfigureBoostMode+0x1e4>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d808      	bhi.n	8002b22 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002b1e:	609a      	str	r2, [r3, #8]
}
 8002b20:	e025      	b.n	8002b6e <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	4a1a      	ldr	r2, [pc, #104]	; (8002b90 <ADC_ConfigureBoostMode+0x1e8>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d80a      	bhi.n	8002b40 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b3c:	609a      	str	r2, [r3, #8]
}
 8002b3e:	e016      	b.n	8002b6e <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4a14      	ldr	r2, [pc, #80]	; (8002b94 <ADC_ConfigureBoostMode+0x1ec>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d80a      	bhi.n	8002b5e <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b5a:	609a      	str	r2, [r3, #8]
}
 8002b5c:	e007      	b.n	8002b6e <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002b6c:	609a      	str	r2, [r3, #8]
}
 8002b6e:	bf00      	nop
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40022000 	.word	0x40022000
 8002b7c:	40022100 	.word	0x40022100
 8002b80:	40022300 	.word	0x40022300
 8002b84:	58026300 	.word	0x58026300
 8002b88:	01312d00 	.word	0x01312d00
 8002b8c:	005f5e10 	.word	0x005f5e10
 8002b90:	00bebc20 	.word	0x00bebc20
 8002b94:	017d7840 	.word	0x017d7840

08002b98 <LL_ADC_IsEnabled>:
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d101      	bne.n	8002bb0 <LL_ADC_IsEnabled+0x18>
 8002bac:	2301      	movs	r3, #1
 8002bae:	e000      	b.n	8002bb2 <LL_ADC_IsEnabled+0x1a>
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <LL_ADC_REG_IsConversionOngoing>:
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b083      	sub	sp, #12
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 0304 	and.w	r3, r3, #4
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d101      	bne.n	8002bd6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002be4:	b590      	push	{r4, r7, lr}
 8002be6:	b09f      	sub	sp, #124	; 0x7c
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d101      	bne.n	8002c02 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	e0ba      	b.n	8002d78 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a5c      	ldr	r2, [pc, #368]	; (8002d80 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d102      	bne.n	8002c1a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002c14:	4b5b      	ldr	r3, [pc, #364]	; (8002d84 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002c16:	60bb      	str	r3, [r7, #8]
 8002c18:	e001      	b.n	8002c1e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10b      	bne.n	8002c3c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c28:	f043 0220 	orr.w	r2, r3, #32
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e09d      	b.n	8002d78 <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff ffbd 	bl	8002bbe <LL_ADC_REG_IsConversionOngoing>
 8002c44:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff ffb7 	bl	8002bbe <LL_ADC_REG_IsConversionOngoing>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d17f      	bne.n	8002d56 <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002c56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d17c      	bne.n	8002d56 <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a47      	ldr	r2, [pc, #284]	; (8002d80 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d004      	beq.n	8002c70 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a46      	ldr	r2, [pc, #280]	; (8002d84 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d101      	bne.n	8002c74 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8002c70:	4b45      	ldr	r3, [pc, #276]	; (8002d88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c72:	e000      	b.n	8002c76 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8002c74:	4b45      	ldr	r3, [pc, #276]	; (8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c76:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d039      	beq.n	8002cf4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c90:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a3a      	ldr	r2, [pc, #232]	; (8002d80 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d004      	beq.n	8002ca6 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a38      	ldr	r2, [pc, #224]	; (8002d84 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d10e      	bne.n	8002cc4 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8002ca6:	4836      	ldr	r0, [pc, #216]	; (8002d80 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002ca8:	f7ff ff76 	bl	8002b98 <LL_ADC_IsEnabled>
 8002cac:	4604      	mov	r4, r0
 8002cae:	4835      	ldr	r0, [pc, #212]	; (8002d84 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002cb0:	f7ff ff72 	bl	8002b98 <LL_ADC_IsEnabled>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	4323      	orrs	r3, r4
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	bf0c      	ite	eq
 8002cbc:	2301      	moveq	r3, #1
 8002cbe:	2300      	movne	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	e008      	b.n	8002cd6 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8002cc4:	4832      	ldr	r0, [pc, #200]	; (8002d90 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002cc6:	f7ff ff67 	bl	8002b98 <LL_ADC_IsEnabled>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	bf0c      	ite	eq
 8002cd0:	2301      	moveq	r3, #1
 8002cd2:	2300      	movne	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d047      	beq.n	8002d6a <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	4b2d      	ldr	r3, [pc, #180]	; (8002d94 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	6811      	ldr	r1, [r2, #0]
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	6892      	ldr	r2, [r2, #8]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	431a      	orrs	r2, r3
 8002cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cf0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cf2:	e03a      	b.n	8002d6a <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cfe:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a1e      	ldr	r2, [pc, #120]	; (8002d80 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d004      	beq.n	8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a1d      	ldr	r2, [pc, #116]	; (8002d84 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d10e      	bne.n	8002d32 <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8002d14:	481a      	ldr	r0, [pc, #104]	; (8002d80 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002d16:	f7ff ff3f 	bl	8002b98 <LL_ADC_IsEnabled>
 8002d1a:	4604      	mov	r4, r0
 8002d1c:	4819      	ldr	r0, [pc, #100]	; (8002d84 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002d1e:	f7ff ff3b 	bl	8002b98 <LL_ADC_IsEnabled>
 8002d22:	4603      	mov	r3, r0
 8002d24:	4323      	orrs	r3, r4
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	bf0c      	ite	eq
 8002d2a:	2301      	moveq	r3, #1
 8002d2c:	2300      	movne	r3, #0
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	e008      	b.n	8002d44 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 8002d32:	4817      	ldr	r0, [pc, #92]	; (8002d90 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002d34:	f7ff ff30 	bl	8002b98 <LL_ADC_IsEnabled>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	bf0c      	ite	eq
 8002d3e:	2301      	moveq	r3, #1
 8002d40:	2300      	movne	r3, #0
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d010      	beq.n	8002d6a <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	4b11      	ldr	r3, [pc, #68]	; (8002d94 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002d4e:	4013      	ands	r3, r2
 8002d50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d52:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d54:	e009      	b.n	8002d6a <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5a:	f043 0220 	orr.w	r2, r3, #32
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002d68:	e000      	b.n	8002d6c <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d6a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d74:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	377c      	adds	r7, #124	; 0x7c
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd90      	pop	{r4, r7, pc}
 8002d80:	40022000 	.word	0x40022000
 8002d84:	40022100 	.word	0x40022100
 8002d88:	40022300 	.word	0x40022300
 8002d8c:	58026300 	.word	0x58026300
 8002d90:	58026000 	.word	0x58026000
 8002d94:	fffff0e0 	.word	0xfffff0e0

08002d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002da8:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <__NVIC_SetPriorityGrouping+0x40>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002db4:	4013      	ands	r3, r2
 8002db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002dc0:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <__NVIC_SetPriorityGrouping+0x44>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dc6:	4a04      	ldr	r2, [pc, #16]	; (8002dd8 <__NVIC_SetPriorityGrouping+0x40>)
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	60d3      	str	r3, [r2, #12]
}
 8002dcc:	bf00      	nop
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	e000ed00 	.word	0xe000ed00
 8002ddc:	05fa0000 	.word	0x05fa0000

08002de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002de4:	4b04      	ldr	r3, [pc, #16]	; (8002df8 <__NVIC_GetPriorityGrouping+0x18>)
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	0a1b      	lsrs	r3, r3, #8
 8002dea:	f003 0307 	and.w	r3, r3, #7
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	e000ed00 	.word	0xe000ed00

08002dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	db0b      	blt.n	8002e26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e0e:	88fb      	ldrh	r3, [r7, #6]
 8002e10:	f003 021f 	and.w	r2, r3, #31
 8002e14:	4907      	ldr	r1, [pc, #28]	; (8002e34 <__NVIC_EnableIRQ+0x38>)
 8002e16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e1a:	095b      	lsrs	r3, r3, #5
 8002e1c:	2001      	movs	r0, #1
 8002e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	e000e100 	.word	0xe000e100

08002e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	4603      	mov	r3, r0
 8002e40:	6039      	str	r1, [r7, #0]
 8002e42:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	db0a      	blt.n	8002e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	490c      	ldr	r1, [pc, #48]	; (8002e84 <__NVIC_SetPriority+0x4c>)
 8002e52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e56:	0112      	lsls	r2, r2, #4
 8002e58:	b2d2      	uxtb	r2, r2
 8002e5a:	440b      	add	r3, r1
 8002e5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e60:	e00a      	b.n	8002e78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	4908      	ldr	r1, [pc, #32]	; (8002e88 <__NVIC_SetPriority+0x50>)
 8002e68:	88fb      	ldrh	r3, [r7, #6]
 8002e6a:	f003 030f 	and.w	r3, r3, #15
 8002e6e:	3b04      	subs	r3, #4
 8002e70:	0112      	lsls	r2, r2, #4
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	440b      	add	r3, r1
 8002e76:	761a      	strb	r2, [r3, #24]
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	e000e100 	.word	0xe000e100
 8002e88:	e000ed00 	.word	0xe000ed00

08002e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b089      	sub	sp, #36	; 0x24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	f1c3 0307 	rsb	r3, r3, #7
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	bf28      	it	cs
 8002eaa:	2304      	movcs	r3, #4
 8002eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	2b06      	cmp	r3, #6
 8002eb4:	d902      	bls.n	8002ebc <NVIC_EncodePriority+0x30>
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	3b03      	subs	r3, #3
 8002eba:	e000      	b.n	8002ebe <NVIC_EncodePriority+0x32>
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	43da      	mvns	r2, r3
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	401a      	ands	r2, r3
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	fa01 f303 	lsl.w	r3, r1, r3
 8002ede:	43d9      	mvns	r1, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee4:	4313      	orrs	r3, r2
         );
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3724      	adds	r7, #36	; 0x24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
	...

08002ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3b01      	subs	r3, #1
 8002f00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f04:	d301      	bcc.n	8002f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f06:	2301      	movs	r3, #1
 8002f08:	e00f      	b.n	8002f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f0a:	4a0a      	ldr	r2, [pc, #40]	; (8002f34 <SysTick_Config+0x40>)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f12:	210f      	movs	r1, #15
 8002f14:	f04f 30ff 	mov.w	r0, #4294967295
 8002f18:	f7ff ff8e 	bl	8002e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f1c:	4b05      	ldr	r3, [pc, #20]	; (8002f34 <SysTick_Config+0x40>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f22:	4b04      	ldr	r3, [pc, #16]	; (8002f34 <SysTick_Config+0x40>)
 8002f24:	2207      	movs	r2, #7
 8002f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	e000e010 	.word	0xe000e010

08002f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f7ff ff29 	bl	8002d98 <__NVIC_SetPriorityGrouping>
}
 8002f46:	bf00      	nop
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b086      	sub	sp, #24
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	4603      	mov	r3, r0
 8002f56:	60b9      	str	r1, [r7, #8]
 8002f58:	607a      	str	r2, [r7, #4]
 8002f5a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f5c:	f7ff ff40 	bl	8002de0 <__NVIC_GetPriorityGrouping>
 8002f60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	68b9      	ldr	r1, [r7, #8]
 8002f66:	6978      	ldr	r0, [r7, #20]
 8002f68:	f7ff ff90 	bl	8002e8c <NVIC_EncodePriority>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f72:	4611      	mov	r1, r2
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff ff5f 	bl	8002e38 <__NVIC_SetPriority>
}
 8002f7a:	bf00      	nop
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b082      	sub	sp, #8
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	4603      	mov	r3, r0
 8002f8a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff ff33 	bl	8002dfc <__NVIC_EnableIRQ>
}
 8002f96:	bf00      	nop
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b082      	sub	sp, #8
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7ff ffa4 	bl	8002ef4 <SysTick_Config>
 8002fac:	4603      	mov	r3, r0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
	...

08002fb8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002fc0:	f7fe fe6e 	bl	8001ca0 <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e2e5      	b.n	800359c <HAL_DMA_Init+0x5e4>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a66      	ldr	r2, [pc, #408]	; (8003170 <HAL_DMA_Init+0x1b8>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d04a      	beq.n	8003070 <HAL_DMA_Init+0xb8>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a65      	ldr	r2, [pc, #404]	; (8003174 <HAL_DMA_Init+0x1bc>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d045      	beq.n	8003070 <HAL_DMA_Init+0xb8>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a63      	ldr	r2, [pc, #396]	; (8003178 <HAL_DMA_Init+0x1c0>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d040      	beq.n	8003070 <HAL_DMA_Init+0xb8>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a62      	ldr	r2, [pc, #392]	; (800317c <HAL_DMA_Init+0x1c4>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d03b      	beq.n	8003070 <HAL_DMA_Init+0xb8>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a60      	ldr	r2, [pc, #384]	; (8003180 <HAL_DMA_Init+0x1c8>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d036      	beq.n	8003070 <HAL_DMA_Init+0xb8>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a5f      	ldr	r2, [pc, #380]	; (8003184 <HAL_DMA_Init+0x1cc>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d031      	beq.n	8003070 <HAL_DMA_Init+0xb8>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a5d      	ldr	r2, [pc, #372]	; (8003188 <HAL_DMA_Init+0x1d0>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d02c      	beq.n	8003070 <HAL_DMA_Init+0xb8>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a5c      	ldr	r2, [pc, #368]	; (800318c <HAL_DMA_Init+0x1d4>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d027      	beq.n	8003070 <HAL_DMA_Init+0xb8>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a5a      	ldr	r2, [pc, #360]	; (8003190 <HAL_DMA_Init+0x1d8>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d022      	beq.n	8003070 <HAL_DMA_Init+0xb8>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a59      	ldr	r2, [pc, #356]	; (8003194 <HAL_DMA_Init+0x1dc>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d01d      	beq.n	8003070 <HAL_DMA_Init+0xb8>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a57      	ldr	r2, [pc, #348]	; (8003198 <HAL_DMA_Init+0x1e0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d018      	beq.n	8003070 <HAL_DMA_Init+0xb8>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a56      	ldr	r2, [pc, #344]	; (800319c <HAL_DMA_Init+0x1e4>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d013      	beq.n	8003070 <HAL_DMA_Init+0xb8>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a54      	ldr	r2, [pc, #336]	; (80031a0 <HAL_DMA_Init+0x1e8>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d00e      	beq.n	8003070 <HAL_DMA_Init+0xb8>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a53      	ldr	r2, [pc, #332]	; (80031a4 <HAL_DMA_Init+0x1ec>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d009      	beq.n	8003070 <HAL_DMA_Init+0xb8>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a51      	ldr	r2, [pc, #324]	; (80031a8 <HAL_DMA_Init+0x1f0>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d004      	beq.n	8003070 <HAL_DMA_Init+0xb8>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a50      	ldr	r2, [pc, #320]	; (80031ac <HAL_DMA_Init+0x1f4>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d101      	bne.n	8003074 <HAL_DMA_Init+0xbc>
 8003070:	2301      	movs	r3, #1
 8003072:	e000      	b.n	8003076 <HAL_DMA_Init+0xbe>
 8003074:	2300      	movs	r3, #0
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 810b 	beq.w	8003292 <HAL_DMA_Init+0x2da>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2202      	movs	r2, #2
 8003088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a37      	ldr	r2, [pc, #220]	; (8003170 <HAL_DMA_Init+0x1b8>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d04a      	beq.n	800312c <HAL_DMA_Init+0x174>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a36      	ldr	r2, [pc, #216]	; (8003174 <HAL_DMA_Init+0x1bc>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d045      	beq.n	800312c <HAL_DMA_Init+0x174>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a34      	ldr	r2, [pc, #208]	; (8003178 <HAL_DMA_Init+0x1c0>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d040      	beq.n	800312c <HAL_DMA_Init+0x174>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a33      	ldr	r2, [pc, #204]	; (800317c <HAL_DMA_Init+0x1c4>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d03b      	beq.n	800312c <HAL_DMA_Init+0x174>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a31      	ldr	r2, [pc, #196]	; (8003180 <HAL_DMA_Init+0x1c8>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d036      	beq.n	800312c <HAL_DMA_Init+0x174>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a30      	ldr	r2, [pc, #192]	; (8003184 <HAL_DMA_Init+0x1cc>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d031      	beq.n	800312c <HAL_DMA_Init+0x174>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a2e      	ldr	r2, [pc, #184]	; (8003188 <HAL_DMA_Init+0x1d0>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d02c      	beq.n	800312c <HAL_DMA_Init+0x174>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a2d      	ldr	r2, [pc, #180]	; (800318c <HAL_DMA_Init+0x1d4>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d027      	beq.n	800312c <HAL_DMA_Init+0x174>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a2b      	ldr	r2, [pc, #172]	; (8003190 <HAL_DMA_Init+0x1d8>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d022      	beq.n	800312c <HAL_DMA_Init+0x174>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a2a      	ldr	r2, [pc, #168]	; (8003194 <HAL_DMA_Init+0x1dc>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d01d      	beq.n	800312c <HAL_DMA_Init+0x174>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a28      	ldr	r2, [pc, #160]	; (8003198 <HAL_DMA_Init+0x1e0>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d018      	beq.n	800312c <HAL_DMA_Init+0x174>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a27      	ldr	r2, [pc, #156]	; (800319c <HAL_DMA_Init+0x1e4>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d013      	beq.n	800312c <HAL_DMA_Init+0x174>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a25      	ldr	r2, [pc, #148]	; (80031a0 <HAL_DMA_Init+0x1e8>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d00e      	beq.n	800312c <HAL_DMA_Init+0x174>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a24      	ldr	r2, [pc, #144]	; (80031a4 <HAL_DMA_Init+0x1ec>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d009      	beq.n	800312c <HAL_DMA_Init+0x174>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a22      	ldr	r2, [pc, #136]	; (80031a8 <HAL_DMA_Init+0x1f0>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d004      	beq.n	800312c <HAL_DMA_Init+0x174>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a21      	ldr	r2, [pc, #132]	; (80031ac <HAL_DMA_Init+0x1f4>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d108      	bne.n	800313e <HAL_DMA_Init+0x186>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 0201 	bic.w	r2, r2, #1
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	e007      	b.n	800314e <HAL_DMA_Init+0x196>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 0201 	bic.w	r2, r2, #1
 800314c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800314e:	e02f      	b.n	80031b0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003150:	f7fe fda6 	bl	8001ca0 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b05      	cmp	r3, #5
 800315c:	d928      	bls.n	80031b0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2220      	movs	r2, #32
 8003162:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2203      	movs	r2, #3
 8003168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e215      	b.n	800359c <HAL_DMA_Init+0x5e4>
 8003170:	40020010 	.word	0x40020010
 8003174:	40020028 	.word	0x40020028
 8003178:	40020040 	.word	0x40020040
 800317c:	40020058 	.word	0x40020058
 8003180:	40020070 	.word	0x40020070
 8003184:	40020088 	.word	0x40020088
 8003188:	400200a0 	.word	0x400200a0
 800318c:	400200b8 	.word	0x400200b8
 8003190:	40020410 	.word	0x40020410
 8003194:	40020428 	.word	0x40020428
 8003198:	40020440 	.word	0x40020440
 800319c:	40020458 	.word	0x40020458
 80031a0:	40020470 	.word	0x40020470
 80031a4:	40020488 	.word	0x40020488
 80031a8:	400204a0 	.word	0x400204a0
 80031ac:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1c8      	bne.n	8003150 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	4b8c      	ldr	r3, [pc, #560]	; (80033fc <HAL_DMA_Init+0x444>)
 80031ca:	4013      	ands	r3, r2
 80031cc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80031d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ee:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	2b04      	cmp	r3, #4
 8003202:	d107      	bne.n	8003214 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320c:	4313      	orrs	r3, r2
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	4313      	orrs	r3, r2
 8003212:	617b      	str	r3, [r7, #20]
    }

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f023 0307 	bic.w	r3, r3, #7
 800322a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	4313      	orrs	r3, r2
 8003234:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	2b04      	cmp	r3, #4
 800323c:	d117      	bne.n	800326e <HAL_DMA_Init+0x2b6>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	4313      	orrs	r3, r2
 8003246:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00e      	beq.n	800326e <HAL_DMA_Init+0x2b6>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f001 f9b3 	bl	80045bc <DMA_CheckFifoParam>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d008      	beq.n	800326e <HAL_DMA_Init+0x2b6>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2240      	movs	r2, #64	; 0x40
 8003260:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e196      	b.n	800359c <HAL_DMA_Init+0x5e4>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f001 f8ee 	bl	8004458 <DMA_CalcBaseAndBitshift>
 800327c:	4603      	mov	r3, r0
 800327e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003284:	f003 031f 	and.w	r3, r3, #31
 8003288:	223f      	movs	r2, #63	; 0x3f
 800328a:	409a      	lsls	r2, r3
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	609a      	str	r2, [r3, #8]
 8003290:	e0cc      	b.n	800342c <HAL_DMA_Init+0x474>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a5a      	ldr	r2, [pc, #360]	; (8003400 <HAL_DMA_Init+0x448>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d022      	beq.n	80032e2 <HAL_DMA_Init+0x32a>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a58      	ldr	r2, [pc, #352]	; (8003404 <HAL_DMA_Init+0x44c>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d01d      	beq.n	80032e2 <HAL_DMA_Init+0x32a>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a57      	ldr	r2, [pc, #348]	; (8003408 <HAL_DMA_Init+0x450>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d018      	beq.n	80032e2 <HAL_DMA_Init+0x32a>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a55      	ldr	r2, [pc, #340]	; (800340c <HAL_DMA_Init+0x454>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d013      	beq.n	80032e2 <HAL_DMA_Init+0x32a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a54      	ldr	r2, [pc, #336]	; (8003410 <HAL_DMA_Init+0x458>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d00e      	beq.n	80032e2 <HAL_DMA_Init+0x32a>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a52      	ldr	r2, [pc, #328]	; (8003414 <HAL_DMA_Init+0x45c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d009      	beq.n	80032e2 <HAL_DMA_Init+0x32a>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a51      	ldr	r2, [pc, #324]	; (8003418 <HAL_DMA_Init+0x460>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d004      	beq.n	80032e2 <HAL_DMA_Init+0x32a>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a4f      	ldr	r2, [pc, #316]	; (800341c <HAL_DMA_Init+0x464>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d101      	bne.n	80032e6 <HAL_DMA_Init+0x32e>
 80032e2:	2301      	movs	r3, #1
 80032e4:	e000      	b.n	80032e8 <HAL_DMA_Init+0x330>
 80032e6:	2300      	movs	r3, #0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d07e      	beq.n	80033ea <HAL_DMA_Init+0x432>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a43      	ldr	r2, [pc, #268]	; (8003400 <HAL_DMA_Init+0x448>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d021      	beq.n	800333a <HAL_DMA_Init+0x382>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a42      	ldr	r2, [pc, #264]	; (8003404 <HAL_DMA_Init+0x44c>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d01c      	beq.n	800333a <HAL_DMA_Init+0x382>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a40      	ldr	r2, [pc, #256]	; (8003408 <HAL_DMA_Init+0x450>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d017      	beq.n	800333a <HAL_DMA_Init+0x382>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a3f      	ldr	r2, [pc, #252]	; (800340c <HAL_DMA_Init+0x454>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d012      	beq.n	800333a <HAL_DMA_Init+0x382>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a3d      	ldr	r2, [pc, #244]	; (8003410 <HAL_DMA_Init+0x458>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d00d      	beq.n	800333a <HAL_DMA_Init+0x382>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a3c      	ldr	r2, [pc, #240]	; (8003414 <HAL_DMA_Init+0x45c>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d008      	beq.n	800333a <HAL_DMA_Init+0x382>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a3a      	ldr	r2, [pc, #232]	; (8003418 <HAL_DMA_Init+0x460>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d003      	beq.n	800333a <HAL_DMA_Init+0x382>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a39      	ldr	r2, [pc, #228]	; (800341c <HAL_DMA_Init+0x464>)
 8003338:	4293      	cmp	r3, r2
 800333a:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2202      	movs	r2, #2
 8003348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	4b32      	ldr	r3, [pc, #200]	; (8003420 <HAL_DMA_Init+0x468>)
 8003358:	4013      	ands	r3, r2
 800335a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	2b40      	cmp	r3, #64	; 0x40
 8003362:	d008      	beq.n	8003376 <HAL_DMA_Init+0x3be>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	2b80      	cmp	r3, #128	; 0x80
 800336a:	d102      	bne.n	8003372 <HAL_DMA_Init+0x3ba>
 800336c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003370:	e002      	b.n	8003378 <HAL_DMA_Init+0x3c0>
 8003372:	2300      	movs	r3, #0
 8003374:	e000      	b.n	8003378 <HAL_DMA_Init+0x3c0>
 8003376:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	68d2      	ldr	r2, [r2, #12]
 800337c:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800337e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003386:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800338e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003396:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	69db      	ldr	r3, [r3, #28]
 800339c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800339e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80033a6:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	461a      	mov	r2, r3
 80033bc:	4b19      	ldr	r3, [pc, #100]	; (8003424 <HAL_DMA_Init+0x46c>)
 80033be:	4413      	add	r3, r2
 80033c0:	4a19      	ldr	r2, [pc, #100]	; (8003428 <HAL_DMA_Init+0x470>)
 80033c2:	fba2 2303 	umull	r2, r3, r2, r3
 80033c6:	091b      	lsrs	r3, r3, #4
 80033c8:	009a      	lsls	r2, r3, #2
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f001 f842 	bl	8004458 <DMA_CalcBaseAndBitshift>
 80033d4:	4603      	mov	r3, r0
 80033d6:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033dc:	f003 031f 	and.w	r3, r3, #31
 80033e0:	2201      	movs	r2, #1
 80033e2:	409a      	lsls	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	605a      	str	r2, [r3, #4]
 80033e8:	e020      	b.n	800342c <HAL_DMA_Init+0x474>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2240      	movs	r2, #64	; 0x40
 80033ee:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2203      	movs	r2, #3
 80033f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e0cf      	b.n	800359c <HAL_DMA_Init+0x5e4>
 80033fc:	fe10803f 	.word	0xfe10803f
 8003400:	58025408 	.word	0x58025408
 8003404:	5802541c 	.word	0x5802541c
 8003408:	58025430 	.word	0x58025430
 800340c:	58025444 	.word	0x58025444
 8003410:	58025458 	.word	0x58025458
 8003414:	5802546c 	.word	0x5802546c
 8003418:	58025480 	.word	0x58025480
 800341c:	58025494 	.word	0x58025494
 8003420:	fffe000f 	.word	0xfffe000f
 8003424:	a7fdabf8 	.word	0xa7fdabf8
 8003428:	cccccccd 	.word	0xcccccccd
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a5c      	ldr	r2, [pc, #368]	; (80035a4 <HAL_DMA_Init+0x5ec>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d072      	beq.n	800351c <HAL_DMA_Init+0x564>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a5b      	ldr	r2, [pc, #364]	; (80035a8 <HAL_DMA_Init+0x5f0>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d06d      	beq.n	800351c <HAL_DMA_Init+0x564>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a59      	ldr	r2, [pc, #356]	; (80035ac <HAL_DMA_Init+0x5f4>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d068      	beq.n	800351c <HAL_DMA_Init+0x564>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a58      	ldr	r2, [pc, #352]	; (80035b0 <HAL_DMA_Init+0x5f8>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d063      	beq.n	800351c <HAL_DMA_Init+0x564>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a56      	ldr	r2, [pc, #344]	; (80035b4 <HAL_DMA_Init+0x5fc>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d05e      	beq.n	800351c <HAL_DMA_Init+0x564>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a55      	ldr	r2, [pc, #340]	; (80035b8 <HAL_DMA_Init+0x600>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d059      	beq.n	800351c <HAL_DMA_Init+0x564>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a53      	ldr	r2, [pc, #332]	; (80035bc <HAL_DMA_Init+0x604>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d054      	beq.n	800351c <HAL_DMA_Init+0x564>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a52      	ldr	r2, [pc, #328]	; (80035c0 <HAL_DMA_Init+0x608>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d04f      	beq.n	800351c <HAL_DMA_Init+0x564>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a50      	ldr	r2, [pc, #320]	; (80035c4 <HAL_DMA_Init+0x60c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d04a      	beq.n	800351c <HAL_DMA_Init+0x564>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a4f      	ldr	r2, [pc, #316]	; (80035c8 <HAL_DMA_Init+0x610>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d045      	beq.n	800351c <HAL_DMA_Init+0x564>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a4d      	ldr	r2, [pc, #308]	; (80035cc <HAL_DMA_Init+0x614>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d040      	beq.n	800351c <HAL_DMA_Init+0x564>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a4c      	ldr	r2, [pc, #304]	; (80035d0 <HAL_DMA_Init+0x618>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d03b      	beq.n	800351c <HAL_DMA_Init+0x564>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a4a      	ldr	r2, [pc, #296]	; (80035d4 <HAL_DMA_Init+0x61c>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d036      	beq.n	800351c <HAL_DMA_Init+0x564>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a49      	ldr	r2, [pc, #292]	; (80035d8 <HAL_DMA_Init+0x620>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d031      	beq.n	800351c <HAL_DMA_Init+0x564>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a47      	ldr	r2, [pc, #284]	; (80035dc <HAL_DMA_Init+0x624>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d02c      	beq.n	800351c <HAL_DMA_Init+0x564>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a46      	ldr	r2, [pc, #280]	; (80035e0 <HAL_DMA_Init+0x628>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d027      	beq.n	800351c <HAL_DMA_Init+0x564>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a44      	ldr	r2, [pc, #272]	; (80035e4 <HAL_DMA_Init+0x62c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d022      	beq.n	800351c <HAL_DMA_Init+0x564>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a43      	ldr	r2, [pc, #268]	; (80035e8 <HAL_DMA_Init+0x630>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d01d      	beq.n	800351c <HAL_DMA_Init+0x564>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a41      	ldr	r2, [pc, #260]	; (80035ec <HAL_DMA_Init+0x634>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d018      	beq.n	800351c <HAL_DMA_Init+0x564>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a40      	ldr	r2, [pc, #256]	; (80035f0 <HAL_DMA_Init+0x638>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d013      	beq.n	800351c <HAL_DMA_Init+0x564>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a3e      	ldr	r2, [pc, #248]	; (80035f4 <HAL_DMA_Init+0x63c>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d00e      	beq.n	800351c <HAL_DMA_Init+0x564>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a3d      	ldr	r2, [pc, #244]	; (80035f8 <HAL_DMA_Init+0x640>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d009      	beq.n	800351c <HAL_DMA_Init+0x564>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a3b      	ldr	r2, [pc, #236]	; (80035fc <HAL_DMA_Init+0x644>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d004      	beq.n	800351c <HAL_DMA_Init+0x564>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a3a      	ldr	r2, [pc, #232]	; (8003600 <HAL_DMA_Init+0x648>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d101      	bne.n	8003520 <HAL_DMA_Init+0x568>
 800351c:	2301      	movs	r3, #1
 800351e:	e000      	b.n	8003522 <HAL_DMA_Init+0x56a>
 8003520:	2300      	movs	r3, #0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d032      	beq.n	800358c <HAL_DMA_Init+0x5d4>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f001 f8c4 	bl	80046b4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	2b80      	cmp	r3, #128	; 0x80
 8003532:	d102      	bne.n	800353a <HAL_DMA_Init+0x582>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003542:	b2d2      	uxtb	r2, r2
 8003544:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800354e:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d010      	beq.n	800357a <HAL_DMA_Init+0x5c2>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	2b08      	cmp	r3, #8
 800355e:	d80c      	bhi.n	800357a <HAL_DMA_Init+0x5c2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f001 f941 	bl	80047e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800356a:	2200      	movs	r2, #0
 800356c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003576:	605a      	str	r2, [r3, #4]
 8003578:	e008      	b.n	800358c <HAL_DMA_Init+0x5d4>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3718      	adds	r7, #24
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40020010 	.word	0x40020010
 80035a8:	40020028 	.word	0x40020028
 80035ac:	40020040 	.word	0x40020040
 80035b0:	40020058 	.word	0x40020058
 80035b4:	40020070 	.word	0x40020070
 80035b8:	40020088 	.word	0x40020088
 80035bc:	400200a0 	.word	0x400200a0
 80035c0:	400200b8 	.word	0x400200b8
 80035c4:	40020410 	.word	0x40020410
 80035c8:	40020428 	.word	0x40020428
 80035cc:	40020440 	.word	0x40020440
 80035d0:	40020458 	.word	0x40020458
 80035d4:	40020470 	.word	0x40020470
 80035d8:	40020488 	.word	0x40020488
 80035dc:	400204a0 	.word	0x400204a0
 80035e0:	400204b8 	.word	0x400204b8
 80035e4:	58025408 	.word	0x58025408
 80035e8:	5802541c 	.word	0x5802541c
 80035ec:	58025430 	.word	0x58025430
 80035f0:	58025444 	.word	0x58025444
 80035f4:	58025458 	.word	0x58025458
 80035f8:	5802546c 	.word	0x5802546c
 80035fc:	58025480 	.word	0x58025480
 8003600:	58025494 	.word	0x58025494

08003604 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b08a      	sub	sp, #40	; 0x28
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800360c:	2300      	movs	r3, #0
 800360e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003610:	4b67      	ldr	r3, [pc, #412]	; (80037b0 <HAL_DMA_IRQHandler+0x1ac>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a67      	ldr	r2, [pc, #412]	; (80037b4 <HAL_DMA_IRQHandler+0x1b0>)
 8003616:	fba2 2303 	umull	r2, r3, r2, r3
 800361a:	0a9b      	lsrs	r3, r3, #10
 800361c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003622:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003628:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800362a:	6a3b      	ldr	r3, [r7, #32]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a5f      	ldr	r2, [pc, #380]	; (80037b8 <HAL_DMA_IRQHandler+0x1b4>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d04a      	beq.n	80036d6 <HAL_DMA_IRQHandler+0xd2>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a5d      	ldr	r2, [pc, #372]	; (80037bc <HAL_DMA_IRQHandler+0x1b8>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d045      	beq.n	80036d6 <HAL_DMA_IRQHandler+0xd2>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a5c      	ldr	r2, [pc, #368]	; (80037c0 <HAL_DMA_IRQHandler+0x1bc>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d040      	beq.n	80036d6 <HAL_DMA_IRQHandler+0xd2>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a5a      	ldr	r2, [pc, #360]	; (80037c4 <HAL_DMA_IRQHandler+0x1c0>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d03b      	beq.n	80036d6 <HAL_DMA_IRQHandler+0xd2>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a59      	ldr	r2, [pc, #356]	; (80037c8 <HAL_DMA_IRQHandler+0x1c4>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d036      	beq.n	80036d6 <HAL_DMA_IRQHandler+0xd2>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a57      	ldr	r2, [pc, #348]	; (80037cc <HAL_DMA_IRQHandler+0x1c8>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d031      	beq.n	80036d6 <HAL_DMA_IRQHandler+0xd2>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a56      	ldr	r2, [pc, #344]	; (80037d0 <HAL_DMA_IRQHandler+0x1cc>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d02c      	beq.n	80036d6 <HAL_DMA_IRQHandler+0xd2>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a54      	ldr	r2, [pc, #336]	; (80037d4 <HAL_DMA_IRQHandler+0x1d0>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d027      	beq.n	80036d6 <HAL_DMA_IRQHandler+0xd2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a53      	ldr	r2, [pc, #332]	; (80037d8 <HAL_DMA_IRQHandler+0x1d4>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d022      	beq.n	80036d6 <HAL_DMA_IRQHandler+0xd2>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a51      	ldr	r2, [pc, #324]	; (80037dc <HAL_DMA_IRQHandler+0x1d8>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d01d      	beq.n	80036d6 <HAL_DMA_IRQHandler+0xd2>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a50      	ldr	r2, [pc, #320]	; (80037e0 <HAL_DMA_IRQHandler+0x1dc>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d018      	beq.n	80036d6 <HAL_DMA_IRQHandler+0xd2>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a4e      	ldr	r2, [pc, #312]	; (80037e4 <HAL_DMA_IRQHandler+0x1e0>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d013      	beq.n	80036d6 <HAL_DMA_IRQHandler+0xd2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a4d      	ldr	r2, [pc, #308]	; (80037e8 <HAL_DMA_IRQHandler+0x1e4>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d00e      	beq.n	80036d6 <HAL_DMA_IRQHandler+0xd2>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a4b      	ldr	r2, [pc, #300]	; (80037ec <HAL_DMA_IRQHandler+0x1e8>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d009      	beq.n	80036d6 <HAL_DMA_IRQHandler+0xd2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a4a      	ldr	r2, [pc, #296]	; (80037f0 <HAL_DMA_IRQHandler+0x1ec>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d004      	beq.n	80036d6 <HAL_DMA_IRQHandler+0xd2>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a48      	ldr	r2, [pc, #288]	; (80037f4 <HAL_DMA_IRQHandler+0x1f0>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d101      	bne.n	80036da <HAL_DMA_IRQHandler+0xd6>
 80036d6:	2301      	movs	r3, #1
 80036d8:	e000      	b.n	80036dc <HAL_DMA_IRQHandler+0xd8>
 80036da:	2300      	movs	r3, #0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 842b 	beq.w	8003f38 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e6:	f003 031f 	and.w	r3, r3, #31
 80036ea:	2208      	movs	r2, #8
 80036ec:	409a      	lsls	r2, r3
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	4013      	ands	r3, r2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 80a2 	beq.w	800383c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a2e      	ldr	r2, [pc, #184]	; (80037b8 <HAL_DMA_IRQHandler+0x1b4>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d04a      	beq.n	8003798 <HAL_DMA_IRQHandler+0x194>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a2d      	ldr	r2, [pc, #180]	; (80037bc <HAL_DMA_IRQHandler+0x1b8>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d045      	beq.n	8003798 <HAL_DMA_IRQHandler+0x194>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a2b      	ldr	r2, [pc, #172]	; (80037c0 <HAL_DMA_IRQHandler+0x1bc>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d040      	beq.n	8003798 <HAL_DMA_IRQHandler+0x194>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a2a      	ldr	r2, [pc, #168]	; (80037c4 <HAL_DMA_IRQHandler+0x1c0>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d03b      	beq.n	8003798 <HAL_DMA_IRQHandler+0x194>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a28      	ldr	r2, [pc, #160]	; (80037c8 <HAL_DMA_IRQHandler+0x1c4>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d036      	beq.n	8003798 <HAL_DMA_IRQHandler+0x194>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a27      	ldr	r2, [pc, #156]	; (80037cc <HAL_DMA_IRQHandler+0x1c8>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d031      	beq.n	8003798 <HAL_DMA_IRQHandler+0x194>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a25      	ldr	r2, [pc, #148]	; (80037d0 <HAL_DMA_IRQHandler+0x1cc>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d02c      	beq.n	8003798 <HAL_DMA_IRQHandler+0x194>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a24      	ldr	r2, [pc, #144]	; (80037d4 <HAL_DMA_IRQHandler+0x1d0>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d027      	beq.n	8003798 <HAL_DMA_IRQHandler+0x194>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a22      	ldr	r2, [pc, #136]	; (80037d8 <HAL_DMA_IRQHandler+0x1d4>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d022      	beq.n	8003798 <HAL_DMA_IRQHandler+0x194>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a21      	ldr	r2, [pc, #132]	; (80037dc <HAL_DMA_IRQHandler+0x1d8>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d01d      	beq.n	8003798 <HAL_DMA_IRQHandler+0x194>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a1f      	ldr	r2, [pc, #124]	; (80037e0 <HAL_DMA_IRQHandler+0x1dc>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d018      	beq.n	8003798 <HAL_DMA_IRQHandler+0x194>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a1e      	ldr	r2, [pc, #120]	; (80037e4 <HAL_DMA_IRQHandler+0x1e0>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d013      	beq.n	8003798 <HAL_DMA_IRQHandler+0x194>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a1c      	ldr	r2, [pc, #112]	; (80037e8 <HAL_DMA_IRQHandler+0x1e4>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d00e      	beq.n	8003798 <HAL_DMA_IRQHandler+0x194>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a1b      	ldr	r2, [pc, #108]	; (80037ec <HAL_DMA_IRQHandler+0x1e8>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d009      	beq.n	8003798 <HAL_DMA_IRQHandler+0x194>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a19      	ldr	r2, [pc, #100]	; (80037f0 <HAL_DMA_IRQHandler+0x1ec>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d004      	beq.n	8003798 <HAL_DMA_IRQHandler+0x194>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a18      	ldr	r2, [pc, #96]	; (80037f4 <HAL_DMA_IRQHandler+0x1f0>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d12f      	bne.n	80037f8 <HAL_DMA_IRQHandler+0x1f4>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0304 	and.w	r3, r3, #4
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	bf14      	ite	ne
 80037a6:	2301      	movne	r3, #1
 80037a8:	2300      	moveq	r3, #0
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	e02e      	b.n	800380c <HAL_DMA_IRQHandler+0x208>
 80037ae:	bf00      	nop
 80037b0:	24000000 	.word	0x24000000
 80037b4:	1b4e81b5 	.word	0x1b4e81b5
 80037b8:	40020010 	.word	0x40020010
 80037bc:	40020028 	.word	0x40020028
 80037c0:	40020040 	.word	0x40020040
 80037c4:	40020058 	.word	0x40020058
 80037c8:	40020070 	.word	0x40020070
 80037cc:	40020088 	.word	0x40020088
 80037d0:	400200a0 	.word	0x400200a0
 80037d4:	400200b8 	.word	0x400200b8
 80037d8:	40020410 	.word	0x40020410
 80037dc:	40020428 	.word	0x40020428
 80037e0:	40020440 	.word	0x40020440
 80037e4:	40020458 	.word	0x40020458
 80037e8:	40020470 	.word	0x40020470
 80037ec:	40020488 	.word	0x40020488
 80037f0:	400204a0 	.word	0x400204a0
 80037f4:	400204b8 	.word	0x400204b8
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	2b00      	cmp	r3, #0
 8003804:	bf14      	ite	ne
 8003806:	2301      	movne	r3, #1
 8003808:	2300      	moveq	r3, #0
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b00      	cmp	r3, #0
 800380e:	d015      	beq.n	800383c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0204 	bic.w	r2, r2, #4
 800381e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003824:	f003 031f 	and.w	r3, r3, #31
 8003828:	2208      	movs	r2, #8
 800382a:	409a      	lsls	r2, r3
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003834:	f043 0201 	orr.w	r2, r3, #1
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003840:	f003 031f 	and.w	r3, r3, #31
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	fa22 f303 	lsr.w	r3, r2, r3
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d06e      	beq.n	8003930 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a69      	ldr	r2, [pc, #420]	; (80039fc <HAL_DMA_IRQHandler+0x3f8>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d04a      	beq.n	80038f2 <HAL_DMA_IRQHandler+0x2ee>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a67      	ldr	r2, [pc, #412]	; (8003a00 <HAL_DMA_IRQHandler+0x3fc>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d045      	beq.n	80038f2 <HAL_DMA_IRQHandler+0x2ee>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a66      	ldr	r2, [pc, #408]	; (8003a04 <HAL_DMA_IRQHandler+0x400>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d040      	beq.n	80038f2 <HAL_DMA_IRQHandler+0x2ee>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a64      	ldr	r2, [pc, #400]	; (8003a08 <HAL_DMA_IRQHandler+0x404>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d03b      	beq.n	80038f2 <HAL_DMA_IRQHandler+0x2ee>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a63      	ldr	r2, [pc, #396]	; (8003a0c <HAL_DMA_IRQHandler+0x408>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d036      	beq.n	80038f2 <HAL_DMA_IRQHandler+0x2ee>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a61      	ldr	r2, [pc, #388]	; (8003a10 <HAL_DMA_IRQHandler+0x40c>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d031      	beq.n	80038f2 <HAL_DMA_IRQHandler+0x2ee>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a60      	ldr	r2, [pc, #384]	; (8003a14 <HAL_DMA_IRQHandler+0x410>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d02c      	beq.n	80038f2 <HAL_DMA_IRQHandler+0x2ee>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a5e      	ldr	r2, [pc, #376]	; (8003a18 <HAL_DMA_IRQHandler+0x414>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d027      	beq.n	80038f2 <HAL_DMA_IRQHandler+0x2ee>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a5d      	ldr	r2, [pc, #372]	; (8003a1c <HAL_DMA_IRQHandler+0x418>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d022      	beq.n	80038f2 <HAL_DMA_IRQHandler+0x2ee>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a5b      	ldr	r2, [pc, #364]	; (8003a20 <HAL_DMA_IRQHandler+0x41c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d01d      	beq.n	80038f2 <HAL_DMA_IRQHandler+0x2ee>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a5a      	ldr	r2, [pc, #360]	; (8003a24 <HAL_DMA_IRQHandler+0x420>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d018      	beq.n	80038f2 <HAL_DMA_IRQHandler+0x2ee>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a58      	ldr	r2, [pc, #352]	; (8003a28 <HAL_DMA_IRQHandler+0x424>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d013      	beq.n	80038f2 <HAL_DMA_IRQHandler+0x2ee>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a57      	ldr	r2, [pc, #348]	; (8003a2c <HAL_DMA_IRQHandler+0x428>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d00e      	beq.n	80038f2 <HAL_DMA_IRQHandler+0x2ee>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a55      	ldr	r2, [pc, #340]	; (8003a30 <HAL_DMA_IRQHandler+0x42c>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d009      	beq.n	80038f2 <HAL_DMA_IRQHandler+0x2ee>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a54      	ldr	r2, [pc, #336]	; (8003a34 <HAL_DMA_IRQHandler+0x430>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d004      	beq.n	80038f2 <HAL_DMA_IRQHandler+0x2ee>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a52      	ldr	r2, [pc, #328]	; (8003a38 <HAL_DMA_IRQHandler+0x434>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d10a      	bne.n	8003908 <HAL_DMA_IRQHandler+0x304>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	bf14      	ite	ne
 8003900:	2301      	movne	r3, #1
 8003902:	2300      	moveq	r3, #0
 8003904:	b2db      	uxtb	r3, r3
 8003906:	e003      	b.n	8003910 <HAL_DMA_IRQHandler+0x30c>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2300      	movs	r3, #0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00d      	beq.n	8003930 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003918:	f003 031f 	and.w	r3, r3, #31
 800391c:	2201      	movs	r2, #1
 800391e:	409a      	lsls	r2, r3
 8003920:	6a3b      	ldr	r3, [r7, #32]
 8003922:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003928:	f043 0202 	orr.w	r2, r3, #2
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003934:	f003 031f 	and.w	r3, r3, #31
 8003938:	2204      	movs	r2, #4
 800393a:	409a      	lsls	r2, r3
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	4013      	ands	r3, r2
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 808f 	beq.w	8003a64 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a2c      	ldr	r2, [pc, #176]	; (80039fc <HAL_DMA_IRQHandler+0x3f8>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d04a      	beq.n	80039e6 <HAL_DMA_IRQHandler+0x3e2>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a2a      	ldr	r2, [pc, #168]	; (8003a00 <HAL_DMA_IRQHandler+0x3fc>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d045      	beq.n	80039e6 <HAL_DMA_IRQHandler+0x3e2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a29      	ldr	r2, [pc, #164]	; (8003a04 <HAL_DMA_IRQHandler+0x400>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d040      	beq.n	80039e6 <HAL_DMA_IRQHandler+0x3e2>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a27      	ldr	r2, [pc, #156]	; (8003a08 <HAL_DMA_IRQHandler+0x404>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d03b      	beq.n	80039e6 <HAL_DMA_IRQHandler+0x3e2>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a26      	ldr	r2, [pc, #152]	; (8003a0c <HAL_DMA_IRQHandler+0x408>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d036      	beq.n	80039e6 <HAL_DMA_IRQHandler+0x3e2>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a24      	ldr	r2, [pc, #144]	; (8003a10 <HAL_DMA_IRQHandler+0x40c>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d031      	beq.n	80039e6 <HAL_DMA_IRQHandler+0x3e2>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a23      	ldr	r2, [pc, #140]	; (8003a14 <HAL_DMA_IRQHandler+0x410>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d02c      	beq.n	80039e6 <HAL_DMA_IRQHandler+0x3e2>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a21      	ldr	r2, [pc, #132]	; (8003a18 <HAL_DMA_IRQHandler+0x414>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d027      	beq.n	80039e6 <HAL_DMA_IRQHandler+0x3e2>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a20      	ldr	r2, [pc, #128]	; (8003a1c <HAL_DMA_IRQHandler+0x418>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d022      	beq.n	80039e6 <HAL_DMA_IRQHandler+0x3e2>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a1e      	ldr	r2, [pc, #120]	; (8003a20 <HAL_DMA_IRQHandler+0x41c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d01d      	beq.n	80039e6 <HAL_DMA_IRQHandler+0x3e2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a1d      	ldr	r2, [pc, #116]	; (8003a24 <HAL_DMA_IRQHandler+0x420>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d018      	beq.n	80039e6 <HAL_DMA_IRQHandler+0x3e2>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a1b      	ldr	r2, [pc, #108]	; (8003a28 <HAL_DMA_IRQHandler+0x424>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d013      	beq.n	80039e6 <HAL_DMA_IRQHandler+0x3e2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a1a      	ldr	r2, [pc, #104]	; (8003a2c <HAL_DMA_IRQHandler+0x428>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d00e      	beq.n	80039e6 <HAL_DMA_IRQHandler+0x3e2>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a18      	ldr	r2, [pc, #96]	; (8003a30 <HAL_DMA_IRQHandler+0x42c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d009      	beq.n	80039e6 <HAL_DMA_IRQHandler+0x3e2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a17      	ldr	r2, [pc, #92]	; (8003a34 <HAL_DMA_IRQHandler+0x430>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d004      	beq.n	80039e6 <HAL_DMA_IRQHandler+0x3e2>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a15      	ldr	r2, [pc, #84]	; (8003a38 <HAL_DMA_IRQHandler+0x434>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d12a      	bne.n	8003a3c <HAL_DMA_IRQHandler+0x438>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	bf14      	ite	ne
 80039f4:	2301      	movne	r3, #1
 80039f6:	2300      	moveq	r3, #0
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	e023      	b.n	8003a44 <HAL_DMA_IRQHandler+0x440>
 80039fc:	40020010 	.word	0x40020010
 8003a00:	40020028 	.word	0x40020028
 8003a04:	40020040 	.word	0x40020040
 8003a08:	40020058 	.word	0x40020058
 8003a0c:	40020070 	.word	0x40020070
 8003a10:	40020088 	.word	0x40020088
 8003a14:	400200a0 	.word	0x400200a0
 8003a18:	400200b8 	.word	0x400200b8
 8003a1c:	40020410 	.word	0x40020410
 8003a20:	40020428 	.word	0x40020428
 8003a24:	40020440 	.word	0x40020440
 8003a28:	40020458 	.word	0x40020458
 8003a2c:	40020470 	.word	0x40020470
 8003a30:	40020488 	.word	0x40020488
 8003a34:	400204a0 	.word	0x400204a0
 8003a38:	400204b8 	.word	0x400204b8
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2300      	movs	r3, #0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00d      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4c:	f003 031f 	and.w	r3, r3, #31
 8003a50:	2204      	movs	r2, #4
 8003a52:	409a      	lsls	r2, r3
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5c:	f043 0204 	orr.w	r2, r3, #4
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a68:	f003 031f 	and.w	r3, r3, #31
 8003a6c:	2210      	movs	r2, #16
 8003a6e:	409a      	lsls	r2, r3
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	4013      	ands	r3, r2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 80a6 	beq.w	8003bc6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a85      	ldr	r2, [pc, #532]	; (8003c94 <HAL_DMA_IRQHandler+0x690>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d04a      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x516>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a83      	ldr	r2, [pc, #524]	; (8003c98 <HAL_DMA_IRQHandler+0x694>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d045      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x516>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a82      	ldr	r2, [pc, #520]	; (8003c9c <HAL_DMA_IRQHandler+0x698>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d040      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x516>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a80      	ldr	r2, [pc, #512]	; (8003ca0 <HAL_DMA_IRQHandler+0x69c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d03b      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x516>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a7f      	ldr	r2, [pc, #508]	; (8003ca4 <HAL_DMA_IRQHandler+0x6a0>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d036      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x516>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a7d      	ldr	r2, [pc, #500]	; (8003ca8 <HAL_DMA_IRQHandler+0x6a4>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d031      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x516>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a7c      	ldr	r2, [pc, #496]	; (8003cac <HAL_DMA_IRQHandler+0x6a8>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d02c      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x516>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a7a      	ldr	r2, [pc, #488]	; (8003cb0 <HAL_DMA_IRQHandler+0x6ac>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d027      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x516>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a79      	ldr	r2, [pc, #484]	; (8003cb4 <HAL_DMA_IRQHandler+0x6b0>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d022      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x516>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a77      	ldr	r2, [pc, #476]	; (8003cb8 <HAL_DMA_IRQHandler+0x6b4>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d01d      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x516>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a76      	ldr	r2, [pc, #472]	; (8003cbc <HAL_DMA_IRQHandler+0x6b8>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d018      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x516>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a74      	ldr	r2, [pc, #464]	; (8003cc0 <HAL_DMA_IRQHandler+0x6bc>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d013      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x516>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a73      	ldr	r2, [pc, #460]	; (8003cc4 <HAL_DMA_IRQHandler+0x6c0>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d00e      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x516>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a71      	ldr	r2, [pc, #452]	; (8003cc8 <HAL_DMA_IRQHandler+0x6c4>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d009      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x516>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a70      	ldr	r2, [pc, #448]	; (8003ccc <HAL_DMA_IRQHandler+0x6c8>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d004      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x516>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a6e      	ldr	r2, [pc, #440]	; (8003cd0 <HAL_DMA_IRQHandler+0x6cc>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d10a      	bne.n	8003b30 <HAL_DMA_IRQHandler+0x52c>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0308 	and.w	r3, r3, #8
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	bf14      	ite	ne
 8003b28:	2301      	movne	r3, #1
 8003b2a:	2300      	moveq	r3, #0
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	e009      	b.n	8003b44 <HAL_DMA_IRQHandler+0x540>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0304 	and.w	r3, r3, #4
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	bf14      	ite	ne
 8003b3e:	2301      	movne	r3, #1
 8003b40:	2300      	moveq	r3, #0
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d03e      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4c:	f003 031f 	and.w	r3, r3, #31
 8003b50:	2210      	movs	r2, #16
 8003b52:	409a      	lsls	r2, r3
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d018      	beq.n	8003b98 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d108      	bne.n	8003b86 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d024      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	4798      	blx	r3
 8003b84:	e01f      	b.n	8003bc6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d01b      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	4798      	blx	r3
 8003b96:	e016      	b.n	8003bc6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d107      	bne.n	8003bb6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0208 	bic.w	r2, r2, #8
 8003bb4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bca:	f003 031f 	and.w	r3, r3, #31
 8003bce:	2220      	movs	r2, #32
 8003bd0:	409a      	lsls	r2, r3
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 8110 	beq.w	8003dfc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a2c      	ldr	r2, [pc, #176]	; (8003c94 <HAL_DMA_IRQHandler+0x690>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d04a      	beq.n	8003c7c <HAL_DMA_IRQHandler+0x678>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a2b      	ldr	r2, [pc, #172]	; (8003c98 <HAL_DMA_IRQHandler+0x694>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d045      	beq.n	8003c7c <HAL_DMA_IRQHandler+0x678>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a29      	ldr	r2, [pc, #164]	; (8003c9c <HAL_DMA_IRQHandler+0x698>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d040      	beq.n	8003c7c <HAL_DMA_IRQHandler+0x678>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a28      	ldr	r2, [pc, #160]	; (8003ca0 <HAL_DMA_IRQHandler+0x69c>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d03b      	beq.n	8003c7c <HAL_DMA_IRQHandler+0x678>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a26      	ldr	r2, [pc, #152]	; (8003ca4 <HAL_DMA_IRQHandler+0x6a0>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d036      	beq.n	8003c7c <HAL_DMA_IRQHandler+0x678>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a25      	ldr	r2, [pc, #148]	; (8003ca8 <HAL_DMA_IRQHandler+0x6a4>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d031      	beq.n	8003c7c <HAL_DMA_IRQHandler+0x678>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a23      	ldr	r2, [pc, #140]	; (8003cac <HAL_DMA_IRQHandler+0x6a8>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d02c      	beq.n	8003c7c <HAL_DMA_IRQHandler+0x678>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a22      	ldr	r2, [pc, #136]	; (8003cb0 <HAL_DMA_IRQHandler+0x6ac>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d027      	beq.n	8003c7c <HAL_DMA_IRQHandler+0x678>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a20      	ldr	r2, [pc, #128]	; (8003cb4 <HAL_DMA_IRQHandler+0x6b0>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d022      	beq.n	8003c7c <HAL_DMA_IRQHandler+0x678>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a1f      	ldr	r2, [pc, #124]	; (8003cb8 <HAL_DMA_IRQHandler+0x6b4>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d01d      	beq.n	8003c7c <HAL_DMA_IRQHandler+0x678>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a1d      	ldr	r2, [pc, #116]	; (8003cbc <HAL_DMA_IRQHandler+0x6b8>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d018      	beq.n	8003c7c <HAL_DMA_IRQHandler+0x678>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a1c      	ldr	r2, [pc, #112]	; (8003cc0 <HAL_DMA_IRQHandler+0x6bc>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d013      	beq.n	8003c7c <HAL_DMA_IRQHandler+0x678>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a1a      	ldr	r2, [pc, #104]	; (8003cc4 <HAL_DMA_IRQHandler+0x6c0>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d00e      	beq.n	8003c7c <HAL_DMA_IRQHandler+0x678>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a19      	ldr	r2, [pc, #100]	; (8003cc8 <HAL_DMA_IRQHandler+0x6c4>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d009      	beq.n	8003c7c <HAL_DMA_IRQHandler+0x678>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a17      	ldr	r2, [pc, #92]	; (8003ccc <HAL_DMA_IRQHandler+0x6c8>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d004      	beq.n	8003c7c <HAL_DMA_IRQHandler+0x678>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a16      	ldr	r2, [pc, #88]	; (8003cd0 <HAL_DMA_IRQHandler+0x6cc>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d12b      	bne.n	8003cd4 <HAL_DMA_IRQHandler+0x6d0>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0310 	and.w	r3, r3, #16
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	bf14      	ite	ne
 8003c8a:	2301      	movne	r3, #1
 8003c8c:	2300      	moveq	r3, #0
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	e02a      	b.n	8003ce8 <HAL_DMA_IRQHandler+0x6e4>
 8003c92:	bf00      	nop
 8003c94:	40020010 	.word	0x40020010
 8003c98:	40020028 	.word	0x40020028
 8003c9c:	40020040 	.word	0x40020040
 8003ca0:	40020058 	.word	0x40020058
 8003ca4:	40020070 	.word	0x40020070
 8003ca8:	40020088 	.word	0x40020088
 8003cac:	400200a0 	.word	0x400200a0
 8003cb0:	400200b8 	.word	0x400200b8
 8003cb4:	40020410 	.word	0x40020410
 8003cb8:	40020428 	.word	0x40020428
 8003cbc:	40020440 	.word	0x40020440
 8003cc0:	40020458 	.word	0x40020458
 8003cc4:	40020470 	.word	0x40020470
 8003cc8:	40020488 	.word	0x40020488
 8003ccc:	400204a0 	.word	0x400204a0
 8003cd0:	400204b8 	.word	0x400204b8
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	bf14      	ite	ne
 8003ce2:	2301      	movne	r3, #1
 8003ce4:	2300      	moveq	r3, #0
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 8087 	beq.w	8003dfc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf2:	f003 031f 	and.w	r3, r3, #31
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	409a      	lsls	r2, r3
 8003cfa:	6a3b      	ldr	r3, [r7, #32]
 8003cfc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d139      	bne.n	8003d7e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0216 	bic.w	r2, r2, #22
 8003d18:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	695a      	ldr	r2, [r3, #20]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d28:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d103      	bne.n	8003d3a <HAL_DMA_IRQHandler+0x736>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d007      	beq.n	8003d4a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 0208 	bic.w	r2, r2, #8
 8003d48:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d4e:	f003 031f 	and.w	r3, r3, #31
 8003d52:	223f      	movs	r2, #63	; 0x3f
 8003d54:	409a      	lsls	r2, r3
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 834a 	beq.w	8004408 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	4798      	blx	r3
          }
          return;
 8003d7c:	e344      	b.n	8004408 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d018      	beq.n	8003dbe <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d108      	bne.n	8003dac <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d02c      	beq.n	8003dfc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	4798      	blx	r3
 8003daa:	e027      	b.n	8003dfc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d023      	beq.n	8003dfc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	4798      	blx	r3
 8003dbc:	e01e      	b.n	8003dfc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10f      	bne.n	8003dec <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0210 	bic.w	r2, r2, #16
 8003dda:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d003      	beq.n	8003dfc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f000 8306 	beq.w	8004412 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 8088 	beq.w	8003f24 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2204      	movs	r2, #4
 8003e18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a7a      	ldr	r2, [pc, #488]	; (800400c <HAL_DMA_IRQHandler+0xa08>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d04a      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x8b8>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a79      	ldr	r2, [pc, #484]	; (8004010 <HAL_DMA_IRQHandler+0xa0c>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d045      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x8b8>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a77      	ldr	r2, [pc, #476]	; (8004014 <HAL_DMA_IRQHandler+0xa10>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d040      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x8b8>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a76      	ldr	r2, [pc, #472]	; (8004018 <HAL_DMA_IRQHandler+0xa14>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d03b      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x8b8>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a74      	ldr	r2, [pc, #464]	; (800401c <HAL_DMA_IRQHandler+0xa18>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d036      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x8b8>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a73      	ldr	r2, [pc, #460]	; (8004020 <HAL_DMA_IRQHandler+0xa1c>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d031      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x8b8>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a71      	ldr	r2, [pc, #452]	; (8004024 <HAL_DMA_IRQHandler+0xa20>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d02c      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x8b8>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a70      	ldr	r2, [pc, #448]	; (8004028 <HAL_DMA_IRQHandler+0xa24>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d027      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x8b8>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a6e      	ldr	r2, [pc, #440]	; (800402c <HAL_DMA_IRQHandler+0xa28>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d022      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x8b8>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a6d      	ldr	r2, [pc, #436]	; (8004030 <HAL_DMA_IRQHandler+0xa2c>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d01d      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x8b8>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a6b      	ldr	r2, [pc, #428]	; (8004034 <HAL_DMA_IRQHandler+0xa30>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d018      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x8b8>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a6a      	ldr	r2, [pc, #424]	; (8004038 <HAL_DMA_IRQHandler+0xa34>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d013      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x8b8>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a68      	ldr	r2, [pc, #416]	; (800403c <HAL_DMA_IRQHandler+0xa38>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d00e      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x8b8>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a67      	ldr	r2, [pc, #412]	; (8004040 <HAL_DMA_IRQHandler+0xa3c>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d009      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x8b8>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a65      	ldr	r2, [pc, #404]	; (8004044 <HAL_DMA_IRQHandler+0xa40>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d004      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x8b8>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a64      	ldr	r2, [pc, #400]	; (8004048 <HAL_DMA_IRQHandler+0xa44>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d108      	bne.n	8003ece <HAL_DMA_IRQHandler+0x8ca>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0201 	bic.w	r2, r2, #1
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	e007      	b.n	8003ede <HAL_DMA_IRQHandler+0x8da>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0201 	bic.w	r2, r2, #1
 8003edc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d307      	bcc.n	8003efa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1f2      	bne.n	8003ede <HAL_DMA_IRQHandler+0x8da>
 8003ef8:	e000      	b.n	8003efc <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003efa:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d004      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2203      	movs	r2, #3
 8003f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003f1a:	e003      	b.n	8003f24 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f000 8272 	beq.w	8004412 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	4798      	blx	r3
 8003f36:	e26c      	b.n	8004412 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a43      	ldr	r2, [pc, #268]	; (800404c <HAL_DMA_IRQHandler+0xa48>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d022      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x984>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a42      	ldr	r2, [pc, #264]	; (8004050 <HAL_DMA_IRQHandler+0xa4c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d01d      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x984>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a40      	ldr	r2, [pc, #256]	; (8004054 <HAL_DMA_IRQHandler+0xa50>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d018      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x984>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a3f      	ldr	r2, [pc, #252]	; (8004058 <HAL_DMA_IRQHandler+0xa54>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d013      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x984>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a3d      	ldr	r2, [pc, #244]	; (800405c <HAL_DMA_IRQHandler+0xa58>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d00e      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x984>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a3c      	ldr	r2, [pc, #240]	; (8004060 <HAL_DMA_IRQHandler+0xa5c>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d009      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x984>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a3a      	ldr	r2, [pc, #232]	; (8004064 <HAL_DMA_IRQHandler+0xa60>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d004      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x984>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a39      	ldr	r2, [pc, #228]	; (8004068 <HAL_DMA_IRQHandler+0xa64>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d101      	bne.n	8003f8c <HAL_DMA_IRQHandler+0x988>
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e000      	b.n	8003f8e <HAL_DMA_IRQHandler+0x98a>
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 823f 	beq.w	8004412 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa0:	f003 031f 	and.w	r3, r3, #31
 8003fa4:	2204      	movs	r2, #4
 8003fa6:	409a      	lsls	r2, r3
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	4013      	ands	r3, r2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f000 80cd 	beq.w	800414c <HAL_DMA_IRQHandler+0xb48>
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 80c7 	beq.w	800414c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc2:	f003 031f 	and.w	r3, r3, #31
 8003fc6:	2204      	movs	r2, #4
 8003fc8:	409a      	lsls	r2, r3
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d049      	beq.n	800406c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d109      	bne.n	8003ff6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f000 8210 	beq.w	800440c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ff4:	e20a      	b.n	800440c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 8206 	beq.w	800440c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004008:	e200      	b.n	800440c <HAL_DMA_IRQHandler+0xe08>
 800400a:	bf00      	nop
 800400c:	40020010 	.word	0x40020010
 8004010:	40020028 	.word	0x40020028
 8004014:	40020040 	.word	0x40020040
 8004018:	40020058 	.word	0x40020058
 800401c:	40020070 	.word	0x40020070
 8004020:	40020088 	.word	0x40020088
 8004024:	400200a0 	.word	0x400200a0
 8004028:	400200b8 	.word	0x400200b8
 800402c:	40020410 	.word	0x40020410
 8004030:	40020428 	.word	0x40020428
 8004034:	40020440 	.word	0x40020440
 8004038:	40020458 	.word	0x40020458
 800403c:	40020470 	.word	0x40020470
 8004040:	40020488 	.word	0x40020488
 8004044:	400204a0 	.word	0x400204a0
 8004048:	400204b8 	.word	0x400204b8
 800404c:	58025408 	.word	0x58025408
 8004050:	5802541c 	.word	0x5802541c
 8004054:	58025430 	.word	0x58025430
 8004058:	58025444 	.word	0x58025444
 800405c:	58025458 	.word	0x58025458
 8004060:	5802546c 	.word	0x5802546c
 8004064:	58025480 	.word	0x58025480
 8004068:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	f003 0320 	and.w	r3, r3, #32
 8004072:	2b00      	cmp	r3, #0
 8004074:	d160      	bne.n	8004138 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a8c      	ldr	r2, [pc, #560]	; (80042ac <HAL_DMA_IRQHandler+0xca8>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d04a      	beq.n	8004116 <HAL_DMA_IRQHandler+0xb12>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a8a      	ldr	r2, [pc, #552]	; (80042b0 <HAL_DMA_IRQHandler+0xcac>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d045      	beq.n	8004116 <HAL_DMA_IRQHandler+0xb12>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a89      	ldr	r2, [pc, #548]	; (80042b4 <HAL_DMA_IRQHandler+0xcb0>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d040      	beq.n	8004116 <HAL_DMA_IRQHandler+0xb12>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a87      	ldr	r2, [pc, #540]	; (80042b8 <HAL_DMA_IRQHandler+0xcb4>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d03b      	beq.n	8004116 <HAL_DMA_IRQHandler+0xb12>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a86      	ldr	r2, [pc, #536]	; (80042bc <HAL_DMA_IRQHandler+0xcb8>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d036      	beq.n	8004116 <HAL_DMA_IRQHandler+0xb12>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a84      	ldr	r2, [pc, #528]	; (80042c0 <HAL_DMA_IRQHandler+0xcbc>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d031      	beq.n	8004116 <HAL_DMA_IRQHandler+0xb12>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a83      	ldr	r2, [pc, #524]	; (80042c4 <HAL_DMA_IRQHandler+0xcc0>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d02c      	beq.n	8004116 <HAL_DMA_IRQHandler+0xb12>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a81      	ldr	r2, [pc, #516]	; (80042c8 <HAL_DMA_IRQHandler+0xcc4>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d027      	beq.n	8004116 <HAL_DMA_IRQHandler+0xb12>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a80      	ldr	r2, [pc, #512]	; (80042cc <HAL_DMA_IRQHandler+0xcc8>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d022      	beq.n	8004116 <HAL_DMA_IRQHandler+0xb12>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a7e      	ldr	r2, [pc, #504]	; (80042d0 <HAL_DMA_IRQHandler+0xccc>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d01d      	beq.n	8004116 <HAL_DMA_IRQHandler+0xb12>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a7d      	ldr	r2, [pc, #500]	; (80042d4 <HAL_DMA_IRQHandler+0xcd0>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d018      	beq.n	8004116 <HAL_DMA_IRQHandler+0xb12>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a7b      	ldr	r2, [pc, #492]	; (80042d8 <HAL_DMA_IRQHandler+0xcd4>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d013      	beq.n	8004116 <HAL_DMA_IRQHandler+0xb12>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a7a      	ldr	r2, [pc, #488]	; (80042dc <HAL_DMA_IRQHandler+0xcd8>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d00e      	beq.n	8004116 <HAL_DMA_IRQHandler+0xb12>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a78      	ldr	r2, [pc, #480]	; (80042e0 <HAL_DMA_IRQHandler+0xcdc>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d009      	beq.n	8004116 <HAL_DMA_IRQHandler+0xb12>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a77      	ldr	r2, [pc, #476]	; (80042e4 <HAL_DMA_IRQHandler+0xce0>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d004      	beq.n	8004116 <HAL_DMA_IRQHandler+0xb12>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a75      	ldr	r2, [pc, #468]	; (80042e8 <HAL_DMA_IRQHandler+0xce4>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d108      	bne.n	8004128 <HAL_DMA_IRQHandler+0xb24>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0208 	bic.w	r2, r2, #8
 8004124:	601a      	str	r2, [r3, #0]
 8004126:	e007      	b.n	8004138 <HAL_DMA_IRQHandler+0xb34>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 0204 	bic.w	r2, r2, #4
 8004136:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 8165 	beq.w	800440c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800414a:	e15f      	b.n	800440c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004150:	f003 031f 	and.w	r3, r3, #31
 8004154:	2202      	movs	r2, #2
 8004156:	409a      	lsls	r2, r3
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	4013      	ands	r3, r2
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 80c5 	beq.w	80042ec <HAL_DMA_IRQHandler+0xce8>
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 80bf 	beq.w	80042ec <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004172:	f003 031f 	and.w	r3, r3, #31
 8004176:	2202      	movs	r2, #2
 8004178:	409a      	lsls	r2, r3
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d018      	beq.n	80041ba <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d109      	bne.n	80041a6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 813a 	beq.w	8004410 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041a4:	e134      	b.n	8004410 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 8130 	beq.w	8004410 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041b8:	e12a      	b.n	8004410 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	f003 0320 	and.w	r3, r3, #32
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d168      	bne.n	8004296 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a38      	ldr	r2, [pc, #224]	; (80042ac <HAL_DMA_IRQHandler+0xca8>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d04a      	beq.n	8004264 <HAL_DMA_IRQHandler+0xc60>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a37      	ldr	r2, [pc, #220]	; (80042b0 <HAL_DMA_IRQHandler+0xcac>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d045      	beq.n	8004264 <HAL_DMA_IRQHandler+0xc60>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a35      	ldr	r2, [pc, #212]	; (80042b4 <HAL_DMA_IRQHandler+0xcb0>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d040      	beq.n	8004264 <HAL_DMA_IRQHandler+0xc60>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a34      	ldr	r2, [pc, #208]	; (80042b8 <HAL_DMA_IRQHandler+0xcb4>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d03b      	beq.n	8004264 <HAL_DMA_IRQHandler+0xc60>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a32      	ldr	r2, [pc, #200]	; (80042bc <HAL_DMA_IRQHandler+0xcb8>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d036      	beq.n	8004264 <HAL_DMA_IRQHandler+0xc60>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a31      	ldr	r2, [pc, #196]	; (80042c0 <HAL_DMA_IRQHandler+0xcbc>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d031      	beq.n	8004264 <HAL_DMA_IRQHandler+0xc60>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a2f      	ldr	r2, [pc, #188]	; (80042c4 <HAL_DMA_IRQHandler+0xcc0>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d02c      	beq.n	8004264 <HAL_DMA_IRQHandler+0xc60>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a2e      	ldr	r2, [pc, #184]	; (80042c8 <HAL_DMA_IRQHandler+0xcc4>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d027      	beq.n	8004264 <HAL_DMA_IRQHandler+0xc60>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a2c      	ldr	r2, [pc, #176]	; (80042cc <HAL_DMA_IRQHandler+0xcc8>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d022      	beq.n	8004264 <HAL_DMA_IRQHandler+0xc60>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a2b      	ldr	r2, [pc, #172]	; (80042d0 <HAL_DMA_IRQHandler+0xccc>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d01d      	beq.n	8004264 <HAL_DMA_IRQHandler+0xc60>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a29      	ldr	r2, [pc, #164]	; (80042d4 <HAL_DMA_IRQHandler+0xcd0>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d018      	beq.n	8004264 <HAL_DMA_IRQHandler+0xc60>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a28      	ldr	r2, [pc, #160]	; (80042d8 <HAL_DMA_IRQHandler+0xcd4>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d013      	beq.n	8004264 <HAL_DMA_IRQHandler+0xc60>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a26      	ldr	r2, [pc, #152]	; (80042dc <HAL_DMA_IRQHandler+0xcd8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d00e      	beq.n	8004264 <HAL_DMA_IRQHandler+0xc60>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a25      	ldr	r2, [pc, #148]	; (80042e0 <HAL_DMA_IRQHandler+0xcdc>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d009      	beq.n	8004264 <HAL_DMA_IRQHandler+0xc60>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a23      	ldr	r2, [pc, #140]	; (80042e4 <HAL_DMA_IRQHandler+0xce0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d004      	beq.n	8004264 <HAL_DMA_IRQHandler+0xc60>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a22      	ldr	r2, [pc, #136]	; (80042e8 <HAL_DMA_IRQHandler+0xce4>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d108      	bne.n	8004276 <HAL_DMA_IRQHandler+0xc72>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0214 	bic.w	r2, r2, #20
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	e007      	b.n	8004286 <HAL_DMA_IRQHandler+0xc82>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 020a 	bic.w	r2, r2, #10
 8004284:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429a:	2b00      	cmp	r3, #0
 800429c:	f000 80b8 	beq.w	8004410 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042a8:	e0b2      	b.n	8004410 <HAL_DMA_IRQHandler+0xe0c>
 80042aa:	bf00      	nop
 80042ac:	40020010 	.word	0x40020010
 80042b0:	40020028 	.word	0x40020028
 80042b4:	40020040 	.word	0x40020040
 80042b8:	40020058 	.word	0x40020058
 80042bc:	40020070 	.word	0x40020070
 80042c0:	40020088 	.word	0x40020088
 80042c4:	400200a0 	.word	0x400200a0
 80042c8:	400200b8 	.word	0x400200b8
 80042cc:	40020410 	.word	0x40020410
 80042d0:	40020428 	.word	0x40020428
 80042d4:	40020440 	.word	0x40020440
 80042d8:	40020458 	.word	0x40020458
 80042dc:	40020470 	.word	0x40020470
 80042e0:	40020488 	.word	0x40020488
 80042e4:	400204a0 	.word	0x400204a0
 80042e8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f0:	f003 031f 	and.w	r3, r3, #31
 80042f4:	2208      	movs	r2, #8
 80042f6:	409a      	lsls	r2, r3
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	4013      	ands	r3, r2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 8088 	beq.w	8004412 <HAL_DMA_IRQHandler+0xe0e>
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	f003 0308 	and.w	r3, r3, #8
 8004308:	2b00      	cmp	r3, #0
 800430a:	f000 8082 	beq.w	8004412 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a41      	ldr	r2, [pc, #260]	; (8004418 <HAL_DMA_IRQHandler+0xe14>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d04a      	beq.n	80043ae <HAL_DMA_IRQHandler+0xdaa>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a3f      	ldr	r2, [pc, #252]	; (800441c <HAL_DMA_IRQHandler+0xe18>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d045      	beq.n	80043ae <HAL_DMA_IRQHandler+0xdaa>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a3e      	ldr	r2, [pc, #248]	; (8004420 <HAL_DMA_IRQHandler+0xe1c>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d040      	beq.n	80043ae <HAL_DMA_IRQHandler+0xdaa>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a3c      	ldr	r2, [pc, #240]	; (8004424 <HAL_DMA_IRQHandler+0xe20>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d03b      	beq.n	80043ae <HAL_DMA_IRQHandler+0xdaa>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a3b      	ldr	r2, [pc, #236]	; (8004428 <HAL_DMA_IRQHandler+0xe24>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d036      	beq.n	80043ae <HAL_DMA_IRQHandler+0xdaa>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a39      	ldr	r2, [pc, #228]	; (800442c <HAL_DMA_IRQHandler+0xe28>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d031      	beq.n	80043ae <HAL_DMA_IRQHandler+0xdaa>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a38      	ldr	r2, [pc, #224]	; (8004430 <HAL_DMA_IRQHandler+0xe2c>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d02c      	beq.n	80043ae <HAL_DMA_IRQHandler+0xdaa>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a36      	ldr	r2, [pc, #216]	; (8004434 <HAL_DMA_IRQHandler+0xe30>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d027      	beq.n	80043ae <HAL_DMA_IRQHandler+0xdaa>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a35      	ldr	r2, [pc, #212]	; (8004438 <HAL_DMA_IRQHandler+0xe34>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d022      	beq.n	80043ae <HAL_DMA_IRQHandler+0xdaa>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a33      	ldr	r2, [pc, #204]	; (800443c <HAL_DMA_IRQHandler+0xe38>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d01d      	beq.n	80043ae <HAL_DMA_IRQHandler+0xdaa>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a32      	ldr	r2, [pc, #200]	; (8004440 <HAL_DMA_IRQHandler+0xe3c>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d018      	beq.n	80043ae <HAL_DMA_IRQHandler+0xdaa>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a30      	ldr	r2, [pc, #192]	; (8004444 <HAL_DMA_IRQHandler+0xe40>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d013      	beq.n	80043ae <HAL_DMA_IRQHandler+0xdaa>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a2f      	ldr	r2, [pc, #188]	; (8004448 <HAL_DMA_IRQHandler+0xe44>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d00e      	beq.n	80043ae <HAL_DMA_IRQHandler+0xdaa>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a2d      	ldr	r2, [pc, #180]	; (800444c <HAL_DMA_IRQHandler+0xe48>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d009      	beq.n	80043ae <HAL_DMA_IRQHandler+0xdaa>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a2c      	ldr	r2, [pc, #176]	; (8004450 <HAL_DMA_IRQHandler+0xe4c>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d004      	beq.n	80043ae <HAL_DMA_IRQHandler+0xdaa>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a2a      	ldr	r2, [pc, #168]	; (8004454 <HAL_DMA_IRQHandler+0xe50>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d108      	bne.n	80043c0 <HAL_DMA_IRQHandler+0xdbc>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 021c 	bic.w	r2, r2, #28
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	e007      	b.n	80043d0 <HAL_DMA_IRQHandler+0xdcc>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 020e 	bic.w	r2, r2, #14
 80043ce:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d4:	f003 031f 	and.w	r3, r3, #31
 80043d8:	2201      	movs	r2, #1
 80043da:	409a      	lsls	r2, r3
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d009      	beq.n	8004412 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	4798      	blx	r3
 8004406:	e004      	b.n	8004412 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004408:	bf00      	nop
 800440a:	e002      	b.n	8004412 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800440c:	bf00      	nop
 800440e:	e000      	b.n	8004412 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004410:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004412:	3728      	adds	r7, #40	; 0x28
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40020010 	.word	0x40020010
 800441c:	40020028 	.word	0x40020028
 8004420:	40020040 	.word	0x40020040
 8004424:	40020058 	.word	0x40020058
 8004428:	40020070 	.word	0x40020070
 800442c:	40020088 	.word	0x40020088
 8004430:	400200a0 	.word	0x400200a0
 8004434:	400200b8 	.word	0x400200b8
 8004438:	40020410 	.word	0x40020410
 800443c:	40020428 	.word	0x40020428
 8004440:	40020440 	.word	0x40020440
 8004444:	40020458 	.word	0x40020458
 8004448:	40020470 	.word	0x40020470
 800444c:	40020488 	.word	0x40020488
 8004450:	400204a0 	.word	0x400204a0
 8004454:	400204b8 	.word	0x400204b8

08004458 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a42      	ldr	r2, [pc, #264]	; (8004570 <DMA_CalcBaseAndBitshift+0x118>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d04a      	beq.n	8004500 <DMA_CalcBaseAndBitshift+0xa8>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a41      	ldr	r2, [pc, #260]	; (8004574 <DMA_CalcBaseAndBitshift+0x11c>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d045      	beq.n	8004500 <DMA_CalcBaseAndBitshift+0xa8>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a3f      	ldr	r2, [pc, #252]	; (8004578 <DMA_CalcBaseAndBitshift+0x120>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d040      	beq.n	8004500 <DMA_CalcBaseAndBitshift+0xa8>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a3e      	ldr	r2, [pc, #248]	; (800457c <DMA_CalcBaseAndBitshift+0x124>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d03b      	beq.n	8004500 <DMA_CalcBaseAndBitshift+0xa8>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a3c      	ldr	r2, [pc, #240]	; (8004580 <DMA_CalcBaseAndBitshift+0x128>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d036      	beq.n	8004500 <DMA_CalcBaseAndBitshift+0xa8>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a3b      	ldr	r2, [pc, #236]	; (8004584 <DMA_CalcBaseAndBitshift+0x12c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d031      	beq.n	8004500 <DMA_CalcBaseAndBitshift+0xa8>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a39      	ldr	r2, [pc, #228]	; (8004588 <DMA_CalcBaseAndBitshift+0x130>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d02c      	beq.n	8004500 <DMA_CalcBaseAndBitshift+0xa8>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a38      	ldr	r2, [pc, #224]	; (800458c <DMA_CalcBaseAndBitshift+0x134>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d027      	beq.n	8004500 <DMA_CalcBaseAndBitshift+0xa8>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a36      	ldr	r2, [pc, #216]	; (8004590 <DMA_CalcBaseAndBitshift+0x138>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d022      	beq.n	8004500 <DMA_CalcBaseAndBitshift+0xa8>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a35      	ldr	r2, [pc, #212]	; (8004594 <DMA_CalcBaseAndBitshift+0x13c>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d01d      	beq.n	8004500 <DMA_CalcBaseAndBitshift+0xa8>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a33      	ldr	r2, [pc, #204]	; (8004598 <DMA_CalcBaseAndBitshift+0x140>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d018      	beq.n	8004500 <DMA_CalcBaseAndBitshift+0xa8>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a32      	ldr	r2, [pc, #200]	; (800459c <DMA_CalcBaseAndBitshift+0x144>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d013      	beq.n	8004500 <DMA_CalcBaseAndBitshift+0xa8>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a30      	ldr	r2, [pc, #192]	; (80045a0 <DMA_CalcBaseAndBitshift+0x148>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d00e      	beq.n	8004500 <DMA_CalcBaseAndBitshift+0xa8>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a2f      	ldr	r2, [pc, #188]	; (80045a4 <DMA_CalcBaseAndBitshift+0x14c>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d009      	beq.n	8004500 <DMA_CalcBaseAndBitshift+0xa8>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a2d      	ldr	r2, [pc, #180]	; (80045a8 <DMA_CalcBaseAndBitshift+0x150>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d004      	beq.n	8004500 <DMA_CalcBaseAndBitshift+0xa8>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a2c      	ldr	r2, [pc, #176]	; (80045ac <DMA_CalcBaseAndBitshift+0x154>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d101      	bne.n	8004504 <DMA_CalcBaseAndBitshift+0xac>
 8004500:	2301      	movs	r3, #1
 8004502:	e000      	b.n	8004506 <DMA_CalcBaseAndBitshift+0xae>
 8004504:	2300      	movs	r3, #0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d024      	beq.n	8004554 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	b2db      	uxtb	r3, r3
 8004510:	3b10      	subs	r3, #16
 8004512:	4a27      	ldr	r2, [pc, #156]	; (80045b0 <DMA_CalcBaseAndBitshift+0x158>)
 8004514:	fba2 2303 	umull	r2, r3, r2, r3
 8004518:	091b      	lsrs	r3, r3, #4
 800451a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f003 0307 	and.w	r3, r3, #7
 8004522:	4a24      	ldr	r2, [pc, #144]	; (80045b4 <DMA_CalcBaseAndBitshift+0x15c>)
 8004524:	5cd3      	ldrb	r3, [r2, r3]
 8004526:	461a      	mov	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2b03      	cmp	r3, #3
 8004530:	d908      	bls.n	8004544 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	461a      	mov	r2, r3
 8004538:	4b1f      	ldr	r3, [pc, #124]	; (80045b8 <DMA_CalcBaseAndBitshift+0x160>)
 800453a:	4013      	ands	r3, r2
 800453c:	1d1a      	adds	r2, r3, #4
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	659a      	str	r2, [r3, #88]	; 0x58
 8004542:	e00d      	b.n	8004560 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	461a      	mov	r2, r3
 800454a:	4b1b      	ldr	r3, [pc, #108]	; (80045b8 <DMA_CalcBaseAndBitshift+0x160>)
 800454c:	4013      	ands	r3, r2
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6593      	str	r3, [r2, #88]	; 0x58
 8004552:	e005      	b.n	8004560 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004564:	4618      	mov	r0, r3
 8004566:	3714      	adds	r7, #20
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	40020010 	.word	0x40020010
 8004574:	40020028 	.word	0x40020028
 8004578:	40020040 	.word	0x40020040
 800457c:	40020058 	.word	0x40020058
 8004580:	40020070 	.word	0x40020070
 8004584:	40020088 	.word	0x40020088
 8004588:	400200a0 	.word	0x400200a0
 800458c:	400200b8 	.word	0x400200b8
 8004590:	40020410 	.word	0x40020410
 8004594:	40020428 	.word	0x40020428
 8004598:	40020440 	.word	0x40020440
 800459c:	40020458 	.word	0x40020458
 80045a0:	40020470 	.word	0x40020470
 80045a4:	40020488 	.word	0x40020488
 80045a8:	400204a0 	.word	0x400204a0
 80045ac:	400204b8 	.word	0x400204b8
 80045b0:	aaaaaaab 	.word	0xaaaaaaab
 80045b4:	080100e8 	.word	0x080100e8
 80045b8:	fffffc00 	.word	0xfffffc00

080045bc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045c4:	2300      	movs	r3, #0
 80045c6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d120      	bne.n	8004612 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d4:	2b03      	cmp	r3, #3
 80045d6:	d858      	bhi.n	800468a <DMA_CheckFifoParam+0xce>
 80045d8:	a201      	add	r2, pc, #4	; (adr r2, 80045e0 <DMA_CheckFifoParam+0x24>)
 80045da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045de:	bf00      	nop
 80045e0:	080045f1 	.word	0x080045f1
 80045e4:	08004603 	.word	0x08004603
 80045e8:	080045f1 	.word	0x080045f1
 80045ec:	0800468b 	.word	0x0800468b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d048      	beq.n	800468e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004600:	e045      	b.n	800468e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004606:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800460a:	d142      	bne.n	8004692 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004610:	e03f      	b.n	8004692 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800461a:	d123      	bne.n	8004664 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004620:	2b03      	cmp	r3, #3
 8004622:	d838      	bhi.n	8004696 <DMA_CheckFifoParam+0xda>
 8004624:	a201      	add	r2, pc, #4	; (adr r2, 800462c <DMA_CheckFifoParam+0x70>)
 8004626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462a:	bf00      	nop
 800462c:	0800463d 	.word	0x0800463d
 8004630:	08004643 	.word	0x08004643
 8004634:	0800463d 	.word	0x0800463d
 8004638:	08004655 	.word	0x08004655
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	73fb      	strb	r3, [r7, #15]
        break;
 8004640:	e030      	b.n	80046a4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004646:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d025      	beq.n	800469a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004652:	e022      	b.n	800469a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004658:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800465c:	d11f      	bne.n	800469e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004662:	e01c      	b.n	800469e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004668:	2b02      	cmp	r3, #2
 800466a:	d902      	bls.n	8004672 <DMA_CheckFifoParam+0xb6>
 800466c:	2b03      	cmp	r3, #3
 800466e:	d003      	beq.n	8004678 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004670:	e018      	b.n	80046a4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	73fb      	strb	r3, [r7, #15]
        break;
 8004676:	e015      	b.n	80046a4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00e      	beq.n	80046a2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	73fb      	strb	r3, [r7, #15]
    break;
 8004688:	e00b      	b.n	80046a2 <DMA_CheckFifoParam+0xe6>
        break;
 800468a:	bf00      	nop
 800468c:	e00a      	b.n	80046a4 <DMA_CheckFifoParam+0xe8>
        break;
 800468e:	bf00      	nop
 8004690:	e008      	b.n	80046a4 <DMA_CheckFifoParam+0xe8>
        break;
 8004692:	bf00      	nop
 8004694:	e006      	b.n	80046a4 <DMA_CheckFifoParam+0xe8>
        break;
 8004696:	bf00      	nop
 8004698:	e004      	b.n	80046a4 <DMA_CheckFifoParam+0xe8>
        break;
 800469a:	bf00      	nop
 800469c:	e002      	b.n	80046a4 <DMA_CheckFifoParam+0xe8>
        break;
 800469e:	bf00      	nop
 80046a0:	e000      	b.n	80046a4 <DMA_CheckFifoParam+0xe8>
    break;
 80046a2:	bf00      	nop
    }
  }

  return status;
 80046a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop

080046b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a38      	ldr	r2, [pc, #224]	; (80047a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d022      	beq.n	8004712 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a36      	ldr	r2, [pc, #216]	; (80047ac <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d01d      	beq.n	8004712 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a35      	ldr	r2, [pc, #212]	; (80047b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d018      	beq.n	8004712 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a33      	ldr	r2, [pc, #204]	; (80047b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d013      	beq.n	8004712 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a32      	ldr	r2, [pc, #200]	; (80047b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d00e      	beq.n	8004712 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a30      	ldr	r2, [pc, #192]	; (80047bc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d009      	beq.n	8004712 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a2f      	ldr	r2, [pc, #188]	; (80047c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d004      	beq.n	8004712 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a2d      	ldr	r2, [pc, #180]	; (80047c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d101      	bne.n	8004716 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004712:	2301      	movs	r3, #1
 8004714:	e000      	b.n	8004718 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004716:	2300      	movs	r3, #0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d01a      	beq.n	8004752 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	b2db      	uxtb	r3, r3
 8004722:	3b08      	subs	r3, #8
 8004724:	4a28      	ldr	r2, [pc, #160]	; (80047c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004726:	fba2 2303 	umull	r2, r3, r2, r3
 800472a:	091b      	lsrs	r3, r3, #4
 800472c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	4b26      	ldr	r3, [pc, #152]	; (80047cc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004732:	4413      	add	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	461a      	mov	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a24      	ldr	r2, [pc, #144]	; (80047d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004740:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f003 031f 	and.w	r3, r3, #31
 8004748:	2201      	movs	r2, #1
 800474a:	409a      	lsls	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004750:	e024      	b.n	800479c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	b2db      	uxtb	r3, r3
 8004758:	3b10      	subs	r3, #16
 800475a:	4a1e      	ldr	r2, [pc, #120]	; (80047d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800475c:	fba2 2303 	umull	r2, r3, r2, r3
 8004760:	091b      	lsrs	r3, r3, #4
 8004762:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	4a1c      	ldr	r2, [pc, #112]	; (80047d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d806      	bhi.n	800477a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	4a1b      	ldr	r2, [pc, #108]	; (80047dc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d902      	bls.n	800477a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	3308      	adds	r3, #8
 8004778:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	4b18      	ldr	r3, [pc, #96]	; (80047e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800477e:	4413      	add	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	461a      	mov	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a16      	ldr	r2, [pc, #88]	; (80047e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800478c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f003 031f 	and.w	r3, r3, #31
 8004794:	2201      	movs	r2, #1
 8004796:	409a      	lsls	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800479c:	bf00      	nop
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	58025408 	.word	0x58025408
 80047ac:	5802541c 	.word	0x5802541c
 80047b0:	58025430 	.word	0x58025430
 80047b4:	58025444 	.word	0x58025444
 80047b8:	58025458 	.word	0x58025458
 80047bc:	5802546c 	.word	0x5802546c
 80047c0:	58025480 	.word	0x58025480
 80047c4:	58025494 	.word	0x58025494
 80047c8:	cccccccd 	.word	0xcccccccd
 80047cc:	16009600 	.word	0x16009600
 80047d0:	58025880 	.word	0x58025880
 80047d4:	aaaaaaab 	.word	0xaaaaaaab
 80047d8:	400204b8 	.word	0x400204b8
 80047dc:	4002040f 	.word	0x4002040f
 80047e0:	10008200 	.word	0x10008200
 80047e4:	40020880 	.word	0x40020880

080047e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d04a      	beq.n	8004894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2b08      	cmp	r3, #8
 8004802:	d847      	bhi.n	8004894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a25      	ldr	r2, [pc, #148]	; (80048a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d022      	beq.n	8004854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a24      	ldr	r2, [pc, #144]	; (80048a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d01d      	beq.n	8004854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a22      	ldr	r2, [pc, #136]	; (80048a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d018      	beq.n	8004854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a21      	ldr	r2, [pc, #132]	; (80048ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d013      	beq.n	8004854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a1f      	ldr	r2, [pc, #124]	; (80048b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d00e      	beq.n	8004854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a1e      	ldr	r2, [pc, #120]	; (80048b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d009      	beq.n	8004854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a1c      	ldr	r2, [pc, #112]	; (80048b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d004      	beq.n	8004854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a1b      	ldr	r2, [pc, #108]	; (80048bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d101      	bne.n	8004858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004854:	2301      	movs	r3, #1
 8004856:	e000      	b.n	800485a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004858:	2300      	movs	r3, #0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00a      	beq.n	8004874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	4b17      	ldr	r3, [pc, #92]	; (80048c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004862:	4413      	add	r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	461a      	mov	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a15      	ldr	r2, [pc, #84]	; (80048c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004870:	671a      	str	r2, [r3, #112]	; 0x70
 8004872:	e009      	b.n	8004888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	4b14      	ldr	r3, [pc, #80]	; (80048c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004878:	4413      	add	r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	461a      	mov	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a11      	ldr	r2, [pc, #68]	; (80048cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004886:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	3b01      	subs	r3, #1
 800488c:	2201      	movs	r2, #1
 800488e:	409a      	lsls	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004894:	bf00      	nop
 8004896:	3714      	adds	r7, #20
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	58025408 	.word	0x58025408
 80048a4:	5802541c 	.word	0x5802541c
 80048a8:	58025430 	.word	0x58025430
 80048ac:	58025444 	.word	0x58025444
 80048b0:	58025458 	.word	0x58025458
 80048b4:	5802546c 	.word	0x5802546c
 80048b8:	58025480 	.word	0x58025480
 80048bc:	58025494 	.word	0x58025494
 80048c0:	1600963f 	.word	0x1600963f
 80048c4:	58025940 	.word	0x58025940
 80048c8:	1000823f 	.word	0x1000823f
 80048cc:	40020940 	.word	0x40020940

080048d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b089      	sub	sp, #36	; 0x24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80048da:	2300      	movs	r3, #0
 80048dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80048de:	4b89      	ldr	r3, [pc, #548]	; (8004b04 <HAL_GPIO_Init+0x234>)
 80048e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80048e2:	e194      	b.n	8004c0e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	2101      	movs	r1, #1
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	fa01 f303 	lsl.w	r3, r1, r3
 80048f0:	4013      	ands	r3, r2
 80048f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f000 8186 	beq.w	8004c08 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	2b02      	cmp	r3, #2
 8004902:	d003      	beq.n	800490c <HAL_GPIO_Init+0x3c>
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	2b12      	cmp	r3, #18
 800490a:	d123      	bne.n	8004954 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	08da      	lsrs	r2, r3, #3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	3208      	adds	r2, #8
 8004914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004918:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	220f      	movs	r2, #15
 8004924:	fa02 f303 	lsl.w	r3, r2, r3
 8004928:	43db      	mvns	r3, r3
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	4013      	ands	r3, r2
 800492e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	691a      	ldr	r2, [r3, #16]
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	f003 0307 	and.w	r3, r3, #7
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	fa02 f303 	lsl.w	r3, r2, r3
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	4313      	orrs	r3, r2
 8004944:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	08da      	lsrs	r2, r3, #3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	3208      	adds	r2, #8
 800494e:	69b9      	ldr	r1, [r7, #24]
 8004950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	2203      	movs	r2, #3
 8004960:	fa02 f303 	lsl.w	r3, r2, r3
 8004964:	43db      	mvns	r3, r3
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	4013      	ands	r3, r2
 800496a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f003 0203 	and.w	r2, r3, #3
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	fa02 f303 	lsl.w	r3, r2, r3
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	4313      	orrs	r3, r2
 8004980:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d00b      	beq.n	80049a8 <HAL_GPIO_Init+0xd8>
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	2b02      	cmp	r3, #2
 8004996:	d007      	beq.n	80049a8 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800499c:	2b11      	cmp	r3, #17
 800499e:	d003      	beq.n	80049a8 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	2b12      	cmp	r3, #18
 80049a6:	d130      	bne.n	8004a0a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	2203      	movs	r2, #3
 80049b4:	fa02 f303 	lsl.w	r3, r2, r3
 80049b8:	43db      	mvns	r3, r3
 80049ba:	69ba      	ldr	r2, [r7, #24]
 80049bc:	4013      	ands	r3, r2
 80049be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	68da      	ldr	r2, [r3, #12]
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	fa02 f303 	lsl.w	r3, r2, r3
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80049de:	2201      	movs	r2, #1
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	fa02 f303 	lsl.w	r3, r2, r3
 80049e6:	43db      	mvns	r3, r3
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	4013      	ands	r3, r2
 80049ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	091b      	lsrs	r3, r3, #4
 80049f4:	f003 0201 	and.w	r2, r3, #1
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	fa02 f303 	lsl.w	r3, r2, r3
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	2203      	movs	r2, #3
 8004a16:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1a:	43db      	mvns	r3, r3
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	4013      	ands	r3, r2
 8004a20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	689a      	ldr	r2, [r3, #8]
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	005b      	lsls	r3, r3, #1
 8004a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2e:	69ba      	ldr	r2, [r7, #24]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 80e0 	beq.w	8004c08 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a48:	4b2f      	ldr	r3, [pc, #188]	; (8004b08 <HAL_GPIO_Init+0x238>)
 8004a4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a4e:	4a2e      	ldr	r2, [pc, #184]	; (8004b08 <HAL_GPIO_Init+0x238>)
 8004a50:	f043 0302 	orr.w	r3, r3, #2
 8004a54:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004a58:	4b2b      	ldr	r3, [pc, #172]	; (8004b08 <HAL_GPIO_Init+0x238>)
 8004a5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	60fb      	str	r3, [r7, #12]
 8004a64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a66:	4a29      	ldr	r2, [pc, #164]	; (8004b0c <HAL_GPIO_Init+0x23c>)
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	089b      	lsrs	r3, r3, #2
 8004a6c:	3302      	adds	r3, #2
 8004a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	f003 0303 	and.w	r3, r3, #3
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	220f      	movs	r2, #15
 8004a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a82:	43db      	mvns	r3, r3
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	4013      	ands	r3, r2
 8004a88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a20      	ldr	r2, [pc, #128]	; (8004b10 <HAL_GPIO_Init+0x240>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d052      	beq.n	8004b38 <HAL_GPIO_Init+0x268>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a1f      	ldr	r2, [pc, #124]	; (8004b14 <HAL_GPIO_Init+0x244>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d031      	beq.n	8004afe <HAL_GPIO_Init+0x22e>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a1e      	ldr	r2, [pc, #120]	; (8004b18 <HAL_GPIO_Init+0x248>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d02b      	beq.n	8004afa <HAL_GPIO_Init+0x22a>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a1d      	ldr	r2, [pc, #116]	; (8004b1c <HAL_GPIO_Init+0x24c>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d025      	beq.n	8004af6 <HAL_GPIO_Init+0x226>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a1c      	ldr	r2, [pc, #112]	; (8004b20 <HAL_GPIO_Init+0x250>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d01f      	beq.n	8004af2 <HAL_GPIO_Init+0x222>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a1b      	ldr	r2, [pc, #108]	; (8004b24 <HAL_GPIO_Init+0x254>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d019      	beq.n	8004aee <HAL_GPIO_Init+0x21e>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a1a      	ldr	r2, [pc, #104]	; (8004b28 <HAL_GPIO_Init+0x258>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d013      	beq.n	8004aea <HAL_GPIO_Init+0x21a>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a19      	ldr	r2, [pc, #100]	; (8004b2c <HAL_GPIO_Init+0x25c>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d00d      	beq.n	8004ae6 <HAL_GPIO_Init+0x216>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a18      	ldr	r2, [pc, #96]	; (8004b30 <HAL_GPIO_Init+0x260>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d007      	beq.n	8004ae2 <HAL_GPIO_Init+0x212>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a17      	ldr	r2, [pc, #92]	; (8004b34 <HAL_GPIO_Init+0x264>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d101      	bne.n	8004ade <HAL_GPIO_Init+0x20e>
 8004ada:	2309      	movs	r3, #9
 8004adc:	e02d      	b.n	8004b3a <HAL_GPIO_Init+0x26a>
 8004ade:	230a      	movs	r3, #10
 8004ae0:	e02b      	b.n	8004b3a <HAL_GPIO_Init+0x26a>
 8004ae2:	2308      	movs	r3, #8
 8004ae4:	e029      	b.n	8004b3a <HAL_GPIO_Init+0x26a>
 8004ae6:	2307      	movs	r3, #7
 8004ae8:	e027      	b.n	8004b3a <HAL_GPIO_Init+0x26a>
 8004aea:	2306      	movs	r3, #6
 8004aec:	e025      	b.n	8004b3a <HAL_GPIO_Init+0x26a>
 8004aee:	2305      	movs	r3, #5
 8004af0:	e023      	b.n	8004b3a <HAL_GPIO_Init+0x26a>
 8004af2:	2304      	movs	r3, #4
 8004af4:	e021      	b.n	8004b3a <HAL_GPIO_Init+0x26a>
 8004af6:	2303      	movs	r3, #3
 8004af8:	e01f      	b.n	8004b3a <HAL_GPIO_Init+0x26a>
 8004afa:	2302      	movs	r3, #2
 8004afc:	e01d      	b.n	8004b3a <HAL_GPIO_Init+0x26a>
 8004afe:	2301      	movs	r3, #1
 8004b00:	e01b      	b.n	8004b3a <HAL_GPIO_Init+0x26a>
 8004b02:	bf00      	nop
 8004b04:	58000080 	.word	0x58000080
 8004b08:	58024400 	.word	0x58024400
 8004b0c:	58000400 	.word	0x58000400
 8004b10:	58020000 	.word	0x58020000
 8004b14:	58020400 	.word	0x58020400
 8004b18:	58020800 	.word	0x58020800
 8004b1c:	58020c00 	.word	0x58020c00
 8004b20:	58021000 	.word	0x58021000
 8004b24:	58021400 	.word	0x58021400
 8004b28:	58021800 	.word	0x58021800
 8004b2c:	58021c00 	.word	0x58021c00
 8004b30:	58022000 	.word	0x58022000
 8004b34:	58022400 	.word	0x58022400
 8004b38:	2300      	movs	r3, #0
 8004b3a:	69fa      	ldr	r2, [r7, #28]
 8004b3c:	f002 0203 	and.w	r2, r2, #3
 8004b40:	0092      	lsls	r2, r2, #2
 8004b42:	4093      	lsls	r3, r2
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b4a:	4938      	ldr	r1, [pc, #224]	; (8004c2c <HAL_GPIO_Init+0x35c>)
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	089b      	lsrs	r3, r3, #2
 8004b50:	3302      	adds	r3, #2
 8004b52:	69ba      	ldr	r2, [r7, #24]
 8004b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	43db      	mvns	r3, r3
 8004b62:	69ba      	ldr	r2, [r7, #24]
 8004b64:	4013      	ands	r3, r2
 8004b66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d003      	beq.n	8004b7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	43db      	mvns	r3, r3
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	4013      	ands	r3, r2
 8004b90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d003      	beq.n	8004ba6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	69ba      	ldr	r2, [r7, #24]
 8004baa:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	43db      	mvns	r3, r3
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	4013      	ands	r3, r2
 8004bbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004bca:	69ba      	ldr	r2, [r7, #24]
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004bd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	43db      	mvns	r3, r3
 8004be6:	69ba      	ldr	r2, [r7, #24]
 8004be8:	4013      	ands	r3, r2
 8004bea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d003      	beq.n	8004c00 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004c00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	fa22 f303 	lsr.w	r3, r2, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f47f ae63 	bne.w	80048e4 <HAL_GPIO_Init+0x14>
  }
}
 8004c1e:	bf00      	nop
 8004c20:	3724      	adds	r7, #36	; 0x24
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	58000400 	.word	0x58000400

08004c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	460b      	mov	r3, r1
 8004c3a:	807b      	strh	r3, [r7, #2]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c40:	787b      	ldrb	r3, [r7, #1]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c46:	887a      	ldrh	r2, [r7, #2]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004c4c:	e003      	b.n	8004c56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004c4e:	887b      	ldrh	r3, [r7, #2]
 8004c50:	041a      	lsls	r2, r3, #16
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	619a      	str	r2, [r3, #24]
}
 8004c56:	bf00      	nop
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b083      	sub	sp, #12
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	695a      	ldr	r2, [r3, #20]
 8004c72:	887b      	ldrh	r3, [r7, #2]
 8004c74:	401a      	ands	r2, r3
 8004c76:	887b      	ldrh	r3, [r7, #2]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d104      	bne.n	8004c86 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004c7c:	887b      	ldrh	r3, [r7, #2]
 8004c7e:	041a      	lsls	r2, r3, #16
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004c84:	e002      	b.n	8004c8c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004c86:	887a      	ldrh	r2, [r7, #2]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	619a      	str	r2, [r3, #24]
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e07f      	b.n	8004daa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d106      	bne.n	8004cc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7fc f810 	bl	8000ce4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2224      	movs	r2, #36	; 0x24
 8004cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 0201 	bic.w	r2, r2, #1
 8004cda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ce8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689a      	ldr	r2, [r3, #8]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004cf8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d107      	bne.n	8004d12 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689a      	ldr	r2, [r3, #8]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d0e:	609a      	str	r2, [r3, #8]
 8004d10:	e006      	b.n	8004d20 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	689a      	ldr	r2, [r3, #8]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004d1e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d104      	bne.n	8004d32 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d30:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	6859      	ldr	r1, [r3, #4]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	4b1d      	ldr	r3, [pc, #116]	; (8004db4 <HAL_I2C_Init+0x11c>)
 8004d3e:	430b      	orrs	r3, r1
 8004d40:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68da      	ldr	r2, [r3, #12]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d50:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691a      	ldr	r2, [r3, #16]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	ea42 0103 	orr.w	r1, r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	021a      	lsls	r2, r3, #8
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	69d9      	ldr	r1, [r3, #28]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a1a      	ldr	r2, [r3, #32]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f042 0201 	orr.w	r2, r2, #1
 8004d8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2220      	movs	r2, #32
 8004d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	02008000 	.word	0x02008000

08004db8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b20      	cmp	r3, #32
 8004dcc:	d138      	bne.n	8004e40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d101      	bne.n	8004ddc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004dd8:	2302      	movs	r3, #2
 8004dda:	e032      	b.n	8004e42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2224      	movs	r2, #36	; 0x24
 8004de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 0201 	bic.w	r2, r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6819      	ldr	r1, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	683a      	ldr	r2, [r7, #0]
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f042 0201 	orr.w	r2, r2, #1
 8004e2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	e000      	b.n	8004e42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004e40:	2302      	movs	r3, #2
  }
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b085      	sub	sp, #20
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
 8004e56:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	2b20      	cmp	r3, #32
 8004e62:	d139      	bne.n	8004ed8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d101      	bne.n	8004e72 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004e6e:	2302      	movs	r3, #2
 8004e70:	e033      	b.n	8004eda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2224      	movs	r2, #36	; 0x24
 8004e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 0201 	bic.w	r2, r2, #1
 8004e90:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004ea0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	021b      	lsls	r3, r3, #8
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f042 0201 	orr.w	r2, r2, #1
 8004ec2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	e000      	b.n	8004eda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004ed8:	2302      	movs	r3, #2
  }
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3714      	adds	r7, #20
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004ee6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ee8:	b08f      	sub	sp, #60	; 0x3c
 8004eea:	af0a      	add	r7, sp, #40	; 0x28
 8004eec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d101      	bne.n	8004ef8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e116      	b.n	8005126 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d106      	bne.n	8004f18 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f00a fc9c 	bl	800f850 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2203      	movs	r2, #3
 8004f1c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d102      	bne.n	8004f32 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f007 fd59 	bl	800c9ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	603b      	str	r3, [r7, #0]
 8004f42:	687e      	ldr	r6, [r7, #4]
 8004f44:	466d      	mov	r5, sp
 8004f46:	f106 0410 	add.w	r4, r6, #16
 8004f4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f56:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f5a:	1d33      	adds	r3, r6, #4
 8004f5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f5e:	6838      	ldr	r0, [r7, #0]
 8004f60:	f007 fc30 	bl	800c7c4 <USB_CoreInit>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d005      	beq.n	8004f76 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2202      	movs	r2, #2
 8004f6e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e0d7      	b.n	8005126 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f007 fd47 	bl	800ca10 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f82:	2300      	movs	r3, #0
 8004f84:	73fb      	strb	r3, [r7, #15]
 8004f86:	e04a      	b.n	800501e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004f88:	7bfa      	ldrb	r2, [r7, #15]
 8004f8a:	6879      	ldr	r1, [r7, #4]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	00db      	lsls	r3, r3, #3
 8004f90:	1a9b      	subs	r3, r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	440b      	add	r3, r1
 8004f96:	333d      	adds	r3, #61	; 0x3d
 8004f98:	2201      	movs	r2, #1
 8004f9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004f9c:	7bfa      	ldrb	r2, [r7, #15]
 8004f9e:	6879      	ldr	r1, [r7, #4]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	1a9b      	subs	r3, r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	440b      	add	r3, r1
 8004faa:	333c      	adds	r3, #60	; 0x3c
 8004fac:	7bfa      	ldrb	r2, [r7, #15]
 8004fae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004fb0:	7bfa      	ldrb	r2, [r7, #15]
 8004fb2:	7bfb      	ldrb	r3, [r7, #15]
 8004fb4:	b298      	uxth	r0, r3
 8004fb6:	6879      	ldr	r1, [r7, #4]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	00db      	lsls	r3, r3, #3
 8004fbc:	1a9b      	subs	r3, r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	440b      	add	r3, r1
 8004fc2:	3342      	adds	r3, #66	; 0x42
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004fc8:	7bfa      	ldrb	r2, [r7, #15]
 8004fca:	6879      	ldr	r1, [r7, #4]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	00db      	lsls	r3, r3, #3
 8004fd0:	1a9b      	subs	r3, r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	440b      	add	r3, r1
 8004fd6:	333f      	adds	r3, #63	; 0x3f
 8004fd8:	2200      	movs	r2, #0
 8004fda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004fdc:	7bfa      	ldrb	r2, [r7, #15]
 8004fde:	6879      	ldr	r1, [r7, #4]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	1a9b      	subs	r3, r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	440b      	add	r3, r1
 8004fea:	3344      	adds	r3, #68	; 0x44
 8004fec:	2200      	movs	r2, #0
 8004fee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004ff0:	7bfa      	ldrb	r2, [r7, #15]
 8004ff2:	6879      	ldr	r1, [r7, #4]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	1a9b      	subs	r3, r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	440b      	add	r3, r1
 8004ffe:	3348      	adds	r3, #72	; 0x48
 8005000:	2200      	movs	r2, #0
 8005002:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005004:	7bfa      	ldrb	r2, [r7, #15]
 8005006:	6879      	ldr	r1, [r7, #4]
 8005008:	4613      	mov	r3, r2
 800500a:	00db      	lsls	r3, r3, #3
 800500c:	1a9b      	subs	r3, r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	440b      	add	r3, r1
 8005012:	3350      	adds	r3, #80	; 0x50
 8005014:	2200      	movs	r2, #0
 8005016:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005018:	7bfb      	ldrb	r3, [r7, #15]
 800501a:	3301      	adds	r3, #1
 800501c:	73fb      	strb	r3, [r7, #15]
 800501e:	7bfa      	ldrb	r2, [r7, #15]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	429a      	cmp	r2, r3
 8005026:	d3af      	bcc.n	8004f88 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005028:	2300      	movs	r3, #0
 800502a:	73fb      	strb	r3, [r7, #15]
 800502c:	e044      	b.n	80050b8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800502e:	7bfa      	ldrb	r2, [r7, #15]
 8005030:	6879      	ldr	r1, [r7, #4]
 8005032:	4613      	mov	r3, r2
 8005034:	00db      	lsls	r3, r3, #3
 8005036:	1a9b      	subs	r3, r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	440b      	add	r3, r1
 800503c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005040:	2200      	movs	r2, #0
 8005042:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005044:	7bfa      	ldrb	r2, [r7, #15]
 8005046:	6879      	ldr	r1, [r7, #4]
 8005048:	4613      	mov	r3, r2
 800504a:	00db      	lsls	r3, r3, #3
 800504c:	1a9b      	subs	r3, r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	440b      	add	r3, r1
 8005052:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005056:	7bfa      	ldrb	r2, [r7, #15]
 8005058:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800505a:	7bfa      	ldrb	r2, [r7, #15]
 800505c:	6879      	ldr	r1, [r7, #4]
 800505e:	4613      	mov	r3, r2
 8005060:	00db      	lsls	r3, r3, #3
 8005062:	1a9b      	subs	r3, r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	440b      	add	r3, r1
 8005068:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800506c:	2200      	movs	r2, #0
 800506e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005070:	7bfa      	ldrb	r2, [r7, #15]
 8005072:	6879      	ldr	r1, [r7, #4]
 8005074:	4613      	mov	r3, r2
 8005076:	00db      	lsls	r3, r3, #3
 8005078:	1a9b      	subs	r3, r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	440b      	add	r3, r1
 800507e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005082:	2200      	movs	r2, #0
 8005084:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005086:	7bfa      	ldrb	r2, [r7, #15]
 8005088:	6879      	ldr	r1, [r7, #4]
 800508a:	4613      	mov	r3, r2
 800508c:	00db      	lsls	r3, r3, #3
 800508e:	1a9b      	subs	r3, r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	440b      	add	r3, r1
 8005094:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005098:	2200      	movs	r2, #0
 800509a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800509c:	7bfa      	ldrb	r2, [r7, #15]
 800509e:	6879      	ldr	r1, [r7, #4]
 80050a0:	4613      	mov	r3, r2
 80050a2:	00db      	lsls	r3, r3, #3
 80050a4:	1a9b      	subs	r3, r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	440b      	add	r3, r1
 80050aa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80050ae:	2200      	movs	r2, #0
 80050b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050b2:	7bfb      	ldrb	r3, [r7, #15]
 80050b4:	3301      	adds	r3, #1
 80050b6:	73fb      	strb	r3, [r7, #15]
 80050b8:	7bfa      	ldrb	r2, [r7, #15]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d3b5      	bcc.n	800502e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	603b      	str	r3, [r7, #0]
 80050c8:	687e      	ldr	r6, [r7, #4]
 80050ca:	466d      	mov	r5, sp
 80050cc:	f106 0410 	add.w	r4, r6, #16
 80050d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80050dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80050e0:	1d33      	adds	r3, r6, #4
 80050e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050e4:	6838      	ldr	r0, [r7, #0]
 80050e6:	f007 fcbd 	bl	800ca64 <USB_DevInit>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d005      	beq.n	80050fc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e014      	b.n	8005126 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005110:	2b01      	cmp	r3, #1
 8005112:	d102      	bne.n	800511a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f001 f891 	bl	800623c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4618      	mov	r0, r3
 8005120:	f008 fca4 	bl	800da6c <USB_DevDisconnect>

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800512e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b084      	sub	sp, #16
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005142:	2b01      	cmp	r3, #1
 8005144:	d101      	bne.n	800514a <HAL_PCD_Start+0x1c>
 8005146:	2302      	movs	r3, #2
 8005148:	e020      	b.n	800518c <HAL_PCD_Start+0x5e>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005156:	2b01      	cmp	r3, #1
 8005158:	d109      	bne.n	800516e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800515e:	2b01      	cmp	r3, #1
 8005160:	d005      	beq.n	800516e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005166:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4618      	mov	r0, r3
 8005174:	f008 fc62 	bl	800da3c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4618      	mov	r0, r3
 800517e:	f007 fc25 	bl	800c9cc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005194:	b590      	push	{r4, r7, lr}
 8005196:	b08d      	sub	sp, #52	; 0x34
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f008 fd09 	bl	800dbc2 <USB_GetMode>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	f040 83ca 	bne.w	800594c <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4618      	mov	r0, r3
 80051be:	f008 fc6d 	bl	800da9c <USB_ReadInterrupts>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f000 83c0 	beq.w	800594a <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f008 fc64 	bl	800da9c <USB_ReadInterrupts>
 80051d4:	4603      	mov	r3, r0
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d107      	bne.n	80051ee <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	695a      	ldr	r2, [r3, #20]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f002 0202 	and.w	r2, r2, #2
 80051ec:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f008 fc52 	bl	800da9c <USB_ReadInterrupts>
 80051f8:	4603      	mov	r3, r0
 80051fa:	f003 0310 	and.w	r3, r3, #16
 80051fe:	2b10      	cmp	r3, #16
 8005200:	d161      	bne.n	80052c6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	699a      	ldr	r2, [r3, #24]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 0210 	bic.w	r2, r2, #16
 8005210:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005212:	6a3b      	ldr	r3, [r7, #32]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	f003 020f 	and.w	r2, r3, #15
 800521e:	4613      	mov	r3, r2
 8005220:	00db      	lsls	r3, r3, #3
 8005222:	1a9b      	subs	r3, r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	4413      	add	r3, r2
 800522e:	3304      	adds	r3, #4
 8005230:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	0c5b      	lsrs	r3, r3, #17
 8005236:	f003 030f 	and.w	r3, r3, #15
 800523a:	2b02      	cmp	r3, #2
 800523c:	d124      	bne.n	8005288 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800523e:	69ba      	ldr	r2, [r7, #24]
 8005240:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005244:	4013      	ands	r3, r2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d035      	beq.n	80052b6 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	091b      	lsrs	r3, r3, #4
 8005252:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005254:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005258:	b29b      	uxth	r3, r3
 800525a:	461a      	mov	r2, r3
 800525c:	6a38      	ldr	r0, [r7, #32]
 800525e:	f008 faca 	bl	800d7f6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	68da      	ldr	r2, [r3, #12]
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	091b      	lsrs	r3, r3, #4
 800526a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800526e:	441a      	add	r2, r3
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	699a      	ldr	r2, [r3, #24]
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	091b      	lsrs	r3, r3, #4
 800527c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005280:	441a      	add	r2, r3
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	619a      	str	r2, [r3, #24]
 8005286:	e016      	b.n	80052b6 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	0c5b      	lsrs	r3, r3, #17
 800528c:	f003 030f 	and.w	r3, r3, #15
 8005290:	2b06      	cmp	r3, #6
 8005292:	d110      	bne.n	80052b6 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800529a:	2208      	movs	r2, #8
 800529c:	4619      	mov	r1, r3
 800529e:	6a38      	ldr	r0, [r7, #32]
 80052a0:	f008 faa9 	bl	800d7f6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	699a      	ldr	r2, [r3, #24]
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	091b      	lsrs	r3, r3, #4
 80052ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052b0:	441a      	add	r2, r3
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	699a      	ldr	r2, [r3, #24]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f042 0210 	orr.w	r2, r2, #16
 80052c4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4618      	mov	r0, r3
 80052cc:	f008 fbe6 	bl	800da9c <USB_ReadInterrupts>
 80052d0:	4603      	mov	r3, r0
 80052d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052d6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80052da:	d16e      	bne.n	80053ba <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80052dc:	2300      	movs	r3, #0
 80052de:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f008 fbec 	bl	800dac2 <USB_ReadDevAllOutEpInterrupt>
 80052ea:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80052ec:	e062      	b.n	80053b4 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80052ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d057      	beq.n	80053a8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052fe:	b2d2      	uxtb	r2, r2
 8005300:	4611      	mov	r1, r2
 8005302:	4618      	mov	r0, r3
 8005304:	f008 fc11 	bl	800db2a <USB_ReadDevOutEPInterrupt>
 8005308:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	f003 0301 	and.w	r3, r3, #1
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00c      	beq.n	800532e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005316:	015a      	lsls	r2, r3, #5
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	4413      	add	r3, r2
 800531c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005320:	461a      	mov	r2, r3
 8005322:	2301      	movs	r3, #1
 8005324:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005326:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 fddd 	bl	8005ee8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	f003 0308 	and.w	r3, r3, #8
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00c      	beq.n	8005352 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533a:	015a      	lsls	r2, r3, #5
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	4413      	add	r3, r2
 8005340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005344:	461a      	mov	r2, r3
 8005346:	2308      	movs	r3, #8
 8005348:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800534a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 fed7 	bl	8006100 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	f003 0310 	and.w	r3, r3, #16
 8005358:	2b00      	cmp	r3, #0
 800535a:	d008      	beq.n	800536e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	4413      	add	r3, r2
 8005364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005368:	461a      	mov	r2, r3
 800536a:	2310      	movs	r3, #16
 800536c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	f003 0320 	and.w	r3, r3, #32
 8005374:	2b00      	cmp	r3, #0
 8005376:	d008      	beq.n	800538a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	4413      	add	r3, r2
 8005380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005384:	461a      	mov	r2, r3
 8005386:	2320      	movs	r3, #32
 8005388:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d009      	beq.n	80053a8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	015a      	lsls	r2, r3, #5
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	4413      	add	r3, r2
 800539c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a0:	461a      	mov	r2, r3
 80053a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80053a6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80053a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053aa:	3301      	adds	r3, #1
 80053ac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80053ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b0:	085b      	lsrs	r3, r3, #1
 80053b2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80053b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d199      	bne.n	80052ee <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4618      	mov	r0, r3
 80053c0:	f008 fb6c 	bl	800da9c <USB_ReadInterrupts>
 80053c4:	4603      	mov	r3, r0
 80053c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053ce:	f040 80c0 	bne.w	8005552 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f008 fb8d 	bl	800daf6 <USB_ReadDevAllInEpInterrupt>
 80053dc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80053de:	2300      	movs	r3, #0
 80053e0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80053e2:	e0b2      	b.n	800554a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80053e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e6:	f003 0301 	and.w	r3, r3, #1
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f000 80a7 	beq.w	800553e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f6:	b2d2      	uxtb	r2, r2
 80053f8:	4611      	mov	r1, r2
 80053fa:	4618      	mov	r0, r3
 80053fc:	f008 fbb3 	bl	800db66 <USB_ReadDevInEPInterrupt>
 8005400:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	f003 0301 	and.w	r3, r3, #1
 8005408:	2b00      	cmp	r3, #0
 800540a:	d057      	beq.n	80054bc <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540e:	f003 030f 	and.w	r3, r3, #15
 8005412:	2201      	movs	r2, #1
 8005414:	fa02 f303 	lsl.w	r3, r2, r3
 8005418:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005420:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	43db      	mvns	r3, r3
 8005426:	69f9      	ldr	r1, [r7, #28]
 8005428:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800542c:	4013      	ands	r3, r2
 800542e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	4413      	add	r3, r2
 8005438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543c:	461a      	mov	r2, r3
 800543e:	2301      	movs	r3, #1
 8005440:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d132      	bne.n	80054b0 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800544a:	6879      	ldr	r1, [r7, #4]
 800544c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800544e:	4613      	mov	r3, r2
 8005450:	00db      	lsls	r3, r3, #3
 8005452:	1a9b      	subs	r3, r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	440b      	add	r3, r1
 8005458:	3348      	adds	r3, #72	; 0x48
 800545a:	6819      	ldr	r1, [r3, #0]
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005460:	4613      	mov	r3, r2
 8005462:	00db      	lsls	r3, r3, #3
 8005464:	1a9b      	subs	r3, r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4403      	add	r3, r0
 800546a:	3344      	adds	r3, #68	; 0x44
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4419      	add	r1, r3
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005474:	4613      	mov	r3, r2
 8005476:	00db      	lsls	r3, r3, #3
 8005478:	1a9b      	subs	r3, r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4403      	add	r3, r0
 800547e:	3348      	adds	r3, #72	; 0x48
 8005480:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	2b00      	cmp	r3, #0
 8005486:	d113      	bne.n	80054b0 <HAL_PCD_IRQHandler+0x31c>
 8005488:	6879      	ldr	r1, [r7, #4]
 800548a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800548c:	4613      	mov	r3, r2
 800548e:	00db      	lsls	r3, r3, #3
 8005490:	1a9b      	subs	r3, r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	440b      	add	r3, r1
 8005496:	3350      	adds	r3, #80	; 0x50
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d108      	bne.n	80054b0 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6818      	ldr	r0, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80054a8:	461a      	mov	r2, r3
 80054aa:	2101      	movs	r1, #1
 80054ac:	f008 fbbc 	bl	800dc28 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	4619      	mov	r1, r3
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f00a fa57 	bl	800f96a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	f003 0308 	and.w	r3, r3, #8
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d008      	beq.n	80054d8 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80054c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c8:	015a      	lsls	r2, r3, #5
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d2:	461a      	mov	r2, r3
 80054d4:	2308      	movs	r3, #8
 80054d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	f003 0310 	and.w	r3, r3, #16
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d008      	beq.n	80054f4 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80054e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ee:	461a      	mov	r2, r3
 80054f0:	2310      	movs	r3, #16
 80054f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d008      	beq.n	8005510 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005500:	015a      	lsls	r2, r3, #5
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	4413      	add	r3, r2
 8005506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800550a:	461a      	mov	r2, r3
 800550c:	2340      	movs	r3, #64	; 0x40
 800550e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d008      	beq.n	800552c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	015a      	lsls	r2, r3, #5
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	4413      	add	r3, r2
 8005522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005526:	461a      	mov	r2, r3
 8005528:	2302      	movs	r3, #2
 800552a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005532:	2b00      	cmp	r3, #0
 8005534:	d003      	beq.n	800553e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005536:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 fc48 	bl	8005dce <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800553e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005540:	3301      	adds	r3, #1
 8005542:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005546:	085b      	lsrs	r3, r3, #1
 8005548:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800554a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554c:	2b00      	cmp	r3, #0
 800554e:	f47f af49 	bne.w	80053e4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4618      	mov	r0, r3
 8005558:	f008 faa0 	bl	800da9c <USB_ReadInterrupts>
 800555c:	4603      	mov	r3, r0
 800555e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005562:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005566:	d122      	bne.n	80055ae <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	69fa      	ldr	r2, [r7, #28]
 8005572:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005576:	f023 0301 	bic.w	r3, r3, #1
 800557a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005582:	2b01      	cmp	r3, #1
 8005584:	d108      	bne.n	8005598 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800558e:	2100      	movs	r1, #0
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 fe77 	bl	8006284 <HAL_PCDEx_LPM_Callback>
 8005596:	e002      	b.n	800559e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f00a fa5d 	bl	800fa58 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	695a      	ldr	r2, [r3, #20]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80055ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f008 fa72 	bl	800da9c <USB_ReadInterrupts>
 80055b8:	4603      	mov	r3, r0
 80055ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055c2:	d112      	bne.n	80055ea <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f003 0301 	and.w	r3, r3, #1
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d102      	bne.n	80055da <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f00a fa19 	bl	800fa0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	695a      	ldr	r2, [r3, #20]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80055e8:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f008 fa54 	bl	800da9c <USB_ReadInterrupts>
 80055f4:	4603      	mov	r3, r0
 80055f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055fe:	d121      	bne.n	8005644 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	695a      	ldr	r2, [r3, #20]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800560e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005616:	2b00      	cmp	r3, #0
 8005618:	d111      	bne.n	800563e <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005628:	089b      	lsrs	r3, r3, #2
 800562a:	f003 020f 	and.w	r2, r3, #15
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005634:	2101      	movs	r1, #1
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 fe24 	bl	8006284 <HAL_PCDEx_LPM_Callback>
 800563c:	e002      	b.n	8005644 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f00a f9e4 	bl	800fa0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4618      	mov	r0, r3
 800564a:	f008 fa27 	bl	800da9c <USB_ReadInterrupts>
 800564e:	4603      	mov	r3, r0
 8005650:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005658:	f040 80c7 	bne.w	80057ea <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	69fa      	ldr	r2, [r7, #28]
 8005666:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800566a:	f023 0301 	bic.w	r3, r3, #1
 800566e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2110      	movs	r1, #16
 8005676:	4618      	mov	r0, r3
 8005678:	f007 fb52 	bl	800cd20 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800567c:	2300      	movs	r3, #0
 800567e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005680:	e056      	b.n	8005730 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005684:	015a      	lsls	r2, r3, #5
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	4413      	add	r3, r2
 800568a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800568e:	461a      	mov	r2, r3
 8005690:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005694:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005698:	015a      	lsls	r2, r3, #5
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	4413      	add	r3, r2
 800569e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056a6:	0151      	lsls	r1, r2, #5
 80056a8:	69fa      	ldr	r2, [r7, #28]
 80056aa:	440a      	add	r2, r1
 80056ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056b4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80056b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b8:	015a      	lsls	r2, r3, #5
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	4413      	add	r3, r2
 80056be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056c6:	0151      	lsls	r1, r2, #5
 80056c8:	69fa      	ldr	r2, [r7, #28]
 80056ca:	440a      	add	r2, r1
 80056cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80056d4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80056d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d8:	015a      	lsls	r2, r3, #5
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	4413      	add	r3, r2
 80056de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e2:	461a      	mov	r2, r3
 80056e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056e8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80056ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056fa:	0151      	lsls	r1, r2, #5
 80056fc:	69fa      	ldr	r2, [r7, #28]
 80056fe:	440a      	add	r2, r1
 8005700:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005704:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005708:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800570a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570c:	015a      	lsls	r2, r3, #5
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	4413      	add	r3, r2
 8005712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800571a:	0151      	lsls	r1, r2, #5
 800571c:	69fa      	ldr	r2, [r7, #28]
 800571e:	440a      	add	r2, r1
 8005720:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005724:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005728:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800572a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800572c:	3301      	adds	r3, #1
 800572e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005736:	429a      	cmp	r2, r3
 8005738:	d3a3      	bcc.n	8005682 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	69fa      	ldr	r2, [r7, #28]
 8005744:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005748:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800574c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005752:	2b00      	cmp	r3, #0
 8005754:	d016      	beq.n	8005784 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800575c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005760:	69fa      	ldr	r2, [r7, #28]
 8005762:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005766:	f043 030b 	orr.w	r3, r3, #11
 800576a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005776:	69fa      	ldr	r2, [r7, #28]
 8005778:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800577c:	f043 030b 	orr.w	r3, r3, #11
 8005780:	6453      	str	r3, [r2, #68]	; 0x44
 8005782:	e015      	b.n	80057b0 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800578a:	695a      	ldr	r2, [r3, #20]
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005792:	4619      	mov	r1, r3
 8005794:	f242 032b 	movw	r3, #8235	; 0x202b
 8005798:	4313      	orrs	r3, r2
 800579a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	69fa      	ldr	r2, [r7, #28]
 80057a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057aa:	f043 030b 	orr.w	r3, r3, #11
 80057ae:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	69fa      	ldr	r2, [r7, #28]
 80057ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057be:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80057c2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6818      	ldr	r0, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80057d4:	461a      	mov	r2, r3
 80057d6:	f008 fa27 	bl	800dc28 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	695a      	ldr	r2, [r3, #20]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80057e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f008 f954 	bl	800da9c <USB_ReadInterrupts>
 80057f4:	4603      	mov	r3, r0
 80057f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057fe:	d124      	bne.n	800584a <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4618      	mov	r0, r3
 8005806:	f008 f9eb 	bl	800dbe0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4618      	mov	r0, r3
 8005810:	f007 fae7 	bl	800cde2 <USB_GetDevSpeed>
 8005814:	4603      	mov	r3, r0
 8005816:	461a      	mov	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681c      	ldr	r4, [r3, #0]
 8005820:	f001 fc94 	bl	800714c <HAL_RCC_GetHCLKFreq>
 8005824:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800582a:	b2db      	uxtb	r3, r3
 800582c:	461a      	mov	r2, r3
 800582e:	4620      	mov	r0, r4
 8005830:	f007 f82a 	bl	800c888 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f00a f8c0 	bl	800f9ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	695a      	ldr	r2, [r3, #20]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005848:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4618      	mov	r0, r3
 8005850:	f008 f924 	bl	800da9c <USB_ReadInterrupts>
 8005854:	4603      	mov	r3, r0
 8005856:	f003 0308 	and.w	r3, r3, #8
 800585a:	2b08      	cmp	r3, #8
 800585c:	d10a      	bne.n	8005874 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f00a f89d 	bl	800f99e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	695a      	ldr	r2, [r3, #20]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f002 0208 	and.w	r2, r2, #8
 8005872:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4618      	mov	r0, r3
 800587a:	f008 f90f 	bl	800da9c <USB_ReadInterrupts>
 800587e:	4603      	mov	r3, r0
 8005880:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005884:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005888:	d10f      	bne.n	80058aa <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800588a:	2300      	movs	r3, #0
 800588c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005890:	b2db      	uxtb	r3, r3
 8005892:	4619      	mov	r1, r3
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f00a f8ff 	bl	800fa98 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	695a      	ldr	r2, [r3, #20]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80058a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f008 f8f4 	bl	800da9c <USB_ReadInterrupts>
 80058b4:	4603      	mov	r3, r0
 80058b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058be:	d10f      	bne.n	80058e0 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80058c0:	2300      	movs	r3, #0
 80058c2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	4619      	mov	r1, r3
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f00a f8d2 	bl	800fa74 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	695a      	ldr	r2, [r3, #20]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80058de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4618      	mov	r0, r3
 80058e6:	f008 f8d9 	bl	800da9c <USB_ReadInterrupts>
 80058ea:	4603      	mov	r3, r0
 80058ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80058f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058f4:	d10a      	bne.n	800590c <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f00a f8e0 	bl	800fabc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	695a      	ldr	r2, [r3, #20]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800590a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4618      	mov	r0, r3
 8005912:	f008 f8c3 	bl	800da9c <USB_ReadInterrupts>
 8005916:	4603      	mov	r3, r0
 8005918:	f003 0304 	and.w	r3, r3, #4
 800591c:	2b04      	cmp	r3, #4
 800591e:	d115      	bne.n	800594c <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	f003 0304 	and.w	r3, r3, #4
 800592e:	2b00      	cmp	r3, #0
 8005930:	d002      	beq.n	8005938 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f00a f8d0 	bl	800fad8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6859      	ldr	r1, [r3, #4]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	69ba      	ldr	r2, [r7, #24]
 8005944:	430a      	orrs	r2, r1
 8005946:	605a      	str	r2, [r3, #4]
 8005948:	e000      	b.n	800594c <HAL_PCD_IRQHandler+0x7b8>
      return;
 800594a:	bf00      	nop
    }
  }
}
 800594c:	3734      	adds	r7, #52	; 0x34
 800594e:	46bd      	mov	sp, r7
 8005950:	bd90      	pop	{r4, r7, pc}

08005952 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b082      	sub	sp, #8
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
 800595a:	460b      	mov	r3, r1
 800595c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005964:	2b01      	cmp	r3, #1
 8005966:	d101      	bne.n	800596c <HAL_PCD_SetAddress+0x1a>
 8005968:	2302      	movs	r3, #2
 800596a:	e013      	b.n	8005994 <HAL_PCD_SetAddress+0x42>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	78fa      	ldrb	r2, [r7, #3]
 8005978:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	78fa      	ldrb	r2, [r7, #3]
 8005982:	4611      	mov	r1, r2
 8005984:	4618      	mov	r0, r3
 8005986:	f008 f833 	bl	800d9f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005992:	2300      	movs	r3, #0
}
 8005994:	4618      	mov	r0, r3
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	4608      	mov	r0, r1
 80059a6:	4611      	mov	r1, r2
 80059a8:	461a      	mov	r2, r3
 80059aa:	4603      	mov	r3, r0
 80059ac:	70fb      	strb	r3, [r7, #3]
 80059ae:	460b      	mov	r3, r1
 80059b0:	803b      	strh	r3, [r7, #0]
 80059b2:	4613      	mov	r3, r2
 80059b4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80059b6:	2300      	movs	r3, #0
 80059b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80059ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	da0f      	bge.n	80059e2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059c2:	78fb      	ldrb	r3, [r7, #3]
 80059c4:	f003 020f 	and.w	r2, r3, #15
 80059c8:	4613      	mov	r3, r2
 80059ca:	00db      	lsls	r3, r3, #3
 80059cc:	1a9b      	subs	r3, r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	3338      	adds	r3, #56	; 0x38
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	4413      	add	r3, r2
 80059d6:	3304      	adds	r3, #4
 80059d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2201      	movs	r2, #1
 80059de:	705a      	strb	r2, [r3, #1]
 80059e0:	e00f      	b.n	8005a02 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059e2:	78fb      	ldrb	r3, [r7, #3]
 80059e4:	f003 020f 	and.w	r2, r3, #15
 80059e8:	4613      	mov	r3, r2
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	1a9b      	subs	r3, r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	4413      	add	r3, r2
 80059f8:	3304      	adds	r3, #4
 80059fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005a02:	78fb      	ldrb	r3, [r7, #3]
 8005a04:	f003 030f 	and.w	r3, r3, #15
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005a0e:	883a      	ldrh	r2, [r7, #0]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	78ba      	ldrb	r2, [r7, #2]
 8005a18:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	785b      	ldrb	r3, [r3, #1]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d004      	beq.n	8005a2c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005a2c:	78bb      	ldrb	r3, [r7, #2]
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d102      	bne.n	8005a38 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d101      	bne.n	8005a46 <HAL_PCD_EP_Open+0xaa>
 8005a42:	2302      	movs	r3, #2
 8005a44:	e00e      	b.n	8005a64 <HAL_PCD_EP_Open+0xc8>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68f9      	ldr	r1, [r7, #12]
 8005a54:	4618      	mov	r0, r3
 8005a56:	f007 f9e9 	bl	800ce2c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005a62:	7afb      	ldrb	r3, [r7, #11]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	460b      	mov	r3, r1
 8005a76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005a78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	da0f      	bge.n	8005aa0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a80:	78fb      	ldrb	r3, [r7, #3]
 8005a82:	f003 020f 	and.w	r2, r3, #15
 8005a86:	4613      	mov	r3, r2
 8005a88:	00db      	lsls	r3, r3, #3
 8005a8a:	1a9b      	subs	r3, r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	3338      	adds	r3, #56	; 0x38
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	4413      	add	r3, r2
 8005a94:	3304      	adds	r3, #4
 8005a96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	705a      	strb	r2, [r3, #1]
 8005a9e:	e00f      	b.n	8005ac0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005aa0:	78fb      	ldrb	r3, [r7, #3]
 8005aa2:	f003 020f 	and.w	r2, r3, #15
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	00db      	lsls	r3, r3, #3
 8005aaa:	1a9b      	subs	r3, r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	3304      	adds	r3, #4
 8005ab8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005ac0:	78fb      	ldrb	r3, [r7, #3]
 8005ac2:	f003 030f 	and.w	r3, r3, #15
 8005ac6:	b2da      	uxtb	r2, r3
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d101      	bne.n	8005ada <HAL_PCD_EP_Close+0x6e>
 8005ad6:	2302      	movs	r3, #2
 8005ad8:	e00e      	b.n	8005af8 <HAL_PCD_EP_Close+0x8c>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68f9      	ldr	r1, [r7, #12]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f007 fa27 	bl	800cf3c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b086      	sub	sp, #24
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	607a      	str	r2, [r7, #4]
 8005b0a:	603b      	str	r3, [r7, #0]
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b10:	7afb      	ldrb	r3, [r7, #11]
 8005b12:	f003 020f 	and.w	r2, r3, #15
 8005b16:	4613      	mov	r3, r2
 8005b18:	00db      	lsls	r3, r3, #3
 8005b1a:	1a9b      	subs	r3, r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	4413      	add	r3, r2
 8005b26:	3304      	adds	r3, #4
 8005b28:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b42:	7afb      	ldrb	r3, [r7, #11]
 8005b44:	f003 030f 	and.w	r3, r3, #15
 8005b48:	b2da      	uxtb	r2, r3
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d102      	bne.n	8005b5c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005b5c:	7afb      	ldrb	r3, [r7, #11]
 8005b5e:	f003 030f 	and.w	r3, r3, #15
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d109      	bne.n	8005b7a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6818      	ldr	r0, [r3, #0]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	461a      	mov	r2, r3
 8005b72:	6979      	ldr	r1, [r7, #20]
 8005b74:	f007 fcb2 	bl	800d4dc <USB_EP0StartXfer>
 8005b78:	e008      	b.n	8005b8c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6818      	ldr	r0, [r3, #0]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	461a      	mov	r2, r3
 8005b86:	6979      	ldr	r1, [r7, #20]
 8005b88:	f007 fa5c 	bl	800d044 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3718      	adds	r7, #24
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b083      	sub	sp, #12
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005ba2:	78fb      	ldrb	r3, [r7, #3]
 8005ba4:	f003 020f 	and.w	r2, r3, #15
 8005ba8:	6879      	ldr	r1, [r7, #4]
 8005baa:	4613      	mov	r3, r2
 8005bac:	00db      	lsls	r3, r3, #3
 8005bae:	1a9b      	subs	r3, r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	440b      	add	r3, r1
 8005bb4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005bb8:	681b      	ldr	r3, [r3, #0]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b086      	sub	sp, #24
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	60f8      	str	r0, [r7, #12]
 8005bce:	607a      	str	r2, [r7, #4]
 8005bd0:	603b      	str	r3, [r7, #0]
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bd6:	7afb      	ldrb	r3, [r7, #11]
 8005bd8:	f003 020f 	and.w	r2, r3, #15
 8005bdc:	4613      	mov	r3, r2
 8005bde:	00db      	lsls	r3, r3, #3
 8005be0:	1a9b      	subs	r3, r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	3338      	adds	r3, #56	; 0x38
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	4413      	add	r3, r2
 8005bea:	3304      	adds	r3, #4
 8005bec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	2201      	movs	r2, #1
 8005c04:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c06:	7afb      	ldrb	r3, [r7, #11]
 8005c08:	f003 030f 	and.w	r3, r3, #15
 8005c0c:	b2da      	uxtb	r2, r3
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d102      	bne.n	8005c20 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c20:	7afb      	ldrb	r3, [r7, #11]
 8005c22:	f003 030f 	and.w	r3, r3, #15
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d109      	bne.n	8005c3e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6818      	ldr	r0, [r3, #0]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	461a      	mov	r2, r3
 8005c36:	6979      	ldr	r1, [r7, #20]
 8005c38:	f007 fc50 	bl	800d4dc <USB_EP0StartXfer>
 8005c3c:	e008      	b.n	8005c50 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6818      	ldr	r0, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	461a      	mov	r2, r3
 8005c4a:	6979      	ldr	r1, [r7, #20]
 8005c4c:	f007 f9fa 	bl	800d044 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3718      	adds	r7, #24
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b084      	sub	sp, #16
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
 8005c62:	460b      	mov	r3, r1
 8005c64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005c66:	78fb      	ldrb	r3, [r7, #3]
 8005c68:	f003 020f 	and.w	r2, r3, #15
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d901      	bls.n	8005c78 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e050      	b.n	8005d1a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005c78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	da0f      	bge.n	8005ca0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c80:	78fb      	ldrb	r3, [r7, #3]
 8005c82:	f003 020f 	and.w	r2, r3, #15
 8005c86:	4613      	mov	r3, r2
 8005c88:	00db      	lsls	r3, r3, #3
 8005c8a:	1a9b      	subs	r3, r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	3338      	adds	r3, #56	; 0x38
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	4413      	add	r3, r2
 8005c94:	3304      	adds	r3, #4
 8005c96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	705a      	strb	r2, [r3, #1]
 8005c9e:	e00d      	b.n	8005cbc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005ca0:	78fa      	ldrb	r2, [r7, #3]
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	00db      	lsls	r3, r3, #3
 8005ca6:	1a9b      	subs	r3, r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	3304      	adds	r3, #4
 8005cb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005cc2:	78fb      	ldrb	r3, [r7, #3]
 8005cc4:	f003 030f 	and.w	r3, r3, #15
 8005cc8:	b2da      	uxtb	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d101      	bne.n	8005cdc <HAL_PCD_EP_SetStall+0x82>
 8005cd8:	2302      	movs	r3, #2
 8005cda:	e01e      	b.n	8005d1a <HAL_PCD_EP_SetStall+0xc0>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68f9      	ldr	r1, [r7, #12]
 8005cea:	4618      	mov	r0, r3
 8005cec:	f007 fdac 	bl	800d848 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005cf0:	78fb      	ldrb	r3, [r7, #3]
 8005cf2:	f003 030f 	and.w	r3, r3, #15
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d10a      	bne.n	8005d10 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6818      	ldr	r0, [r3, #0]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	b2d9      	uxtb	r1, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	f007 ff8c 	bl	800dc28 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b084      	sub	sp, #16
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005d2e:	78fb      	ldrb	r3, [r7, #3]
 8005d30:	f003 020f 	and.w	r2, r3, #15
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d901      	bls.n	8005d40 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e042      	b.n	8005dc6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005d40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	da0f      	bge.n	8005d68 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d48:	78fb      	ldrb	r3, [r7, #3]
 8005d4a:	f003 020f 	and.w	r2, r3, #15
 8005d4e:	4613      	mov	r3, r2
 8005d50:	00db      	lsls	r3, r3, #3
 8005d52:	1a9b      	subs	r3, r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	3338      	adds	r3, #56	; 0x38
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	3304      	adds	r3, #4
 8005d5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2201      	movs	r2, #1
 8005d64:	705a      	strb	r2, [r3, #1]
 8005d66:	e00f      	b.n	8005d88 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d68:	78fb      	ldrb	r3, [r7, #3]
 8005d6a:	f003 020f 	and.w	r2, r3, #15
 8005d6e:	4613      	mov	r3, r2
 8005d70:	00db      	lsls	r3, r3, #3
 8005d72:	1a9b      	subs	r3, r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	3304      	adds	r3, #4
 8005d80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d8e:	78fb      	ldrb	r3, [r7, #3]
 8005d90:	f003 030f 	and.w	r3, r3, #15
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d101      	bne.n	8005da8 <HAL_PCD_EP_ClrStall+0x86>
 8005da4:	2302      	movs	r3, #2
 8005da6:	e00e      	b.n	8005dc6 <HAL_PCD_EP_ClrStall+0xa4>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68f9      	ldr	r1, [r7, #12]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f007 fdb4 	bl	800d924 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b08a      	sub	sp, #40	; 0x28
 8005dd2:	af02      	add	r7, sp, #8
 8005dd4:	6078      	str	r0, [r7, #4]
 8005dd6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	4613      	mov	r3, r2
 8005de6:	00db      	lsls	r3, r3, #3
 8005de8:	1a9b      	subs	r3, r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	3338      	adds	r3, #56	; 0x38
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	4413      	add	r3, r2
 8005df2:	3304      	adds	r3, #4
 8005df4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	699a      	ldr	r2, [r3, #24]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d901      	bls.n	8005e06 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e06c      	b.n	8005ee0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	695a      	ldr	r2, [r3, #20]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	69fa      	ldr	r2, [r7, #28]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d902      	bls.n	8005e22 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	3303      	adds	r3, #3
 8005e26:	089b      	lsrs	r3, r3, #2
 8005e28:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e2a:	e02b      	b.n	8005e84 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	695a      	ldr	r2, [r3, #20]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	69fa      	ldr	r2, [r7, #28]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d902      	bls.n	8005e48 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	3303      	adds	r3, #3
 8005e4c:	089b      	lsrs	r3, r3, #2
 8005e4e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	68d9      	ldr	r1, [r3, #12]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	b2da      	uxtb	r2, r3
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	9300      	str	r3, [sp, #0]
 8005e64:	4603      	mov	r3, r0
 8005e66:	6978      	ldr	r0, [r7, #20]
 8005e68:	f007 fc90 	bl	800d78c <USB_WritePacket>

    ep->xfer_buff  += len;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	68da      	ldr	r2, [r3, #12]
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	441a      	add	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	699a      	ldr	r2, [r3, #24]
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	441a      	add	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	69ba      	ldr	r2, [r7, #24]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d809      	bhi.n	8005eae <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	699a      	ldr	r2, [r3, #24]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d203      	bcs.n	8005eae <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1be      	bne.n	8005e2c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	695a      	ldr	r2, [r3, #20]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	699b      	ldr	r3, [r3, #24]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d811      	bhi.n	8005ede <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	f003 030f 	and.w	r3, r3, #15
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ece:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	43db      	mvns	r3, r3
 8005ed4:	6939      	ldr	r1, [r7, #16]
 8005ed6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005eda:	4013      	ands	r3, r2
 8005edc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3720      	adds	r7, #32
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b086      	sub	sp, #24
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	333c      	adds	r3, #60	; 0x3c
 8005f00:	3304      	adds	r3, #4
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	015a      	lsls	r2, r3, #5
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	f040 80a0 	bne.w	8006060 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	f003 0308 	and.w	r3, r3, #8
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d015      	beq.n	8005f56 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	4a72      	ldr	r2, [pc, #456]	; (80060f8 <PCD_EP_OutXfrComplete_int+0x210>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	f240 80dd 	bls.w	80060ee <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f000 80d7 	beq.w	80060ee <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	015a      	lsls	r2, r3, #5
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	4413      	add	r3, r2
 8005f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f52:	6093      	str	r3, [r2, #8]
 8005f54:	e0cb      	b.n	80060ee <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	f003 0320 	and.w	r3, r3, #32
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d009      	beq.n	8005f74 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	015a      	lsls	r2, r3, #5
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	4413      	add	r3, r2
 8005f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	2320      	movs	r3, #32
 8005f70:	6093      	str	r3, [r2, #8]
 8005f72:	e0bc      	b.n	80060ee <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f040 80b7 	bne.w	80060ee <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	4a5d      	ldr	r2, [pc, #372]	; (80060f8 <PCD_EP_OutXfrComplete_int+0x210>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d90f      	bls.n	8005fa8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00a      	beq.n	8005fa8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fa4:	6093      	str	r3, [r2, #8]
 8005fa6:	e0a2      	b.n	80060ee <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005fa8:	6879      	ldr	r1, [r7, #4]
 8005faa:	683a      	ldr	r2, [r7, #0]
 8005fac:	4613      	mov	r3, r2
 8005fae:	00db      	lsls	r3, r3, #3
 8005fb0:	1a9b      	subs	r3, r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	440b      	add	r3, r1
 8005fb6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005fba:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	0159      	lsls	r1, r3, #5
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	440b      	add	r3, r1
 8005fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005fce:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	00db      	lsls	r3, r3, #3
 8005fd8:	1a9b      	subs	r3, r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4403      	add	r3, r0
 8005fde:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005fe2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005fe4:	6879      	ldr	r1, [r7, #4]
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	4613      	mov	r3, r2
 8005fea:	00db      	lsls	r3, r3, #3
 8005fec:	1a9b      	subs	r3, r3, r2
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	440b      	add	r3, r1
 8005ff2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005ff6:	6819      	ldr	r1, [r3, #0]
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	683a      	ldr	r2, [r7, #0]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	00db      	lsls	r3, r3, #3
 8006000:	1a9b      	subs	r3, r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4403      	add	r3, r0
 8006006:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4419      	add	r1, r3
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	683a      	ldr	r2, [r7, #0]
 8006012:	4613      	mov	r3, r2
 8006014:	00db      	lsls	r3, r3, #3
 8006016:	1a9b      	subs	r3, r3, r2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4403      	add	r3, r0
 800601c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006020:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d114      	bne.n	8006052 <PCD_EP_OutXfrComplete_int+0x16a>
 8006028:	6879      	ldr	r1, [r7, #4]
 800602a:	683a      	ldr	r2, [r7, #0]
 800602c:	4613      	mov	r3, r2
 800602e:	00db      	lsls	r3, r3, #3
 8006030:	1a9b      	subs	r3, r3, r2
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	440b      	add	r3, r1
 8006036:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d108      	bne.n	8006052 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6818      	ldr	r0, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800604a:	461a      	mov	r2, r3
 800604c:	2101      	movs	r1, #1
 800604e:	f007 fdeb 	bl	800dc28 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	b2db      	uxtb	r3, r3
 8006056:	4619      	mov	r1, r3
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f009 fc6b 	bl	800f934 <HAL_PCD_DataOutStageCallback>
 800605e:	e046      	b.n	80060ee <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	4a26      	ldr	r2, [pc, #152]	; (80060fc <PCD_EP_OutXfrComplete_int+0x214>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d124      	bne.n	80060b2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00a      	beq.n	8006088 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	015a      	lsls	r2, r3, #5
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	4413      	add	r3, r2
 800607a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800607e:	461a      	mov	r2, r3
 8006080:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006084:	6093      	str	r3, [r2, #8]
 8006086:	e032      	b.n	80060ee <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	f003 0320 	and.w	r3, r3, #32
 800608e:	2b00      	cmp	r3, #0
 8006090:	d008      	beq.n	80060a4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	015a      	lsls	r2, r3, #5
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	4413      	add	r3, r2
 800609a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800609e:	461a      	mov	r2, r3
 80060a0:	2320      	movs	r3, #32
 80060a2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	4619      	mov	r1, r3
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f009 fc42 	bl	800f934 <HAL_PCD_DataOutStageCallback>
 80060b0:	e01d      	b.n	80060ee <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d114      	bne.n	80060e2 <PCD_EP_OutXfrComplete_int+0x1fa>
 80060b8:	6879      	ldr	r1, [r7, #4]
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	4613      	mov	r3, r2
 80060be:	00db      	lsls	r3, r3, #3
 80060c0:	1a9b      	subs	r3, r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	440b      	add	r3, r1
 80060c6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d108      	bne.n	80060e2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6818      	ldr	r0, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80060da:	461a      	mov	r2, r3
 80060dc:	2100      	movs	r1, #0
 80060de:	f007 fda3 	bl	800dc28 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	4619      	mov	r1, r3
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f009 fc23 	bl	800f934 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3718      	adds	r7, #24
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	4f54300a 	.word	0x4f54300a
 80060fc:	4f54310a 	.word	0x4f54310a

08006100 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	333c      	adds	r3, #60	; 0x3c
 8006118:	3304      	adds	r3, #4
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	015a      	lsls	r2, r3, #5
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	4413      	add	r3, r2
 8006126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	4a15      	ldr	r2, [pc, #84]	; (8006188 <PCD_EP_OutSetupPacket_int+0x88>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d90e      	bls.n	8006154 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800613c:	2b00      	cmp	r3, #0
 800613e:	d009      	beq.n	8006154 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	015a      	lsls	r2, r3, #5
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	4413      	add	r3, r2
 8006148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800614c:	461a      	mov	r2, r3
 800614e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006152:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f009 fbdb 	bl	800f910 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	4a0a      	ldr	r2, [pc, #40]	; (8006188 <PCD_EP_OutSetupPacket_int+0x88>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d90c      	bls.n	800617c <PCD_EP_OutSetupPacket_int+0x7c>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d108      	bne.n	800617c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6818      	ldr	r0, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006174:	461a      	mov	r2, r3
 8006176:	2101      	movs	r1, #1
 8006178:	f007 fd56 	bl	800dc28 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3718      	adds	r7, #24
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	4f54300a 	.word	0x4f54300a

0800618c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	460b      	mov	r3, r1
 8006196:	70fb      	strb	r3, [r7, #3]
 8006198:	4613      	mov	r3, r2
 800619a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80061a4:	78fb      	ldrb	r3, [r7, #3]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d107      	bne.n	80061ba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80061aa:	883b      	ldrh	r3, [r7, #0]
 80061ac:	0419      	lsls	r1, r3, #16
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	430a      	orrs	r2, r1
 80061b6:	629a      	str	r2, [r3, #40]	; 0x28
 80061b8:	e028      	b.n	800620c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c0:	0c1b      	lsrs	r3, r3, #16
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	4413      	add	r3, r2
 80061c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80061c8:	2300      	movs	r3, #0
 80061ca:	73fb      	strb	r3, [r7, #15]
 80061cc:	e00d      	b.n	80061ea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	7bfb      	ldrb	r3, [r7, #15]
 80061d4:	3340      	adds	r3, #64	; 0x40
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	4413      	add	r3, r2
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	0c1b      	lsrs	r3, r3, #16
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	4413      	add	r3, r2
 80061e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80061e4:	7bfb      	ldrb	r3, [r7, #15]
 80061e6:	3301      	adds	r3, #1
 80061e8:	73fb      	strb	r3, [r7, #15]
 80061ea:	7bfa      	ldrb	r2, [r7, #15]
 80061ec:	78fb      	ldrb	r3, [r7, #3]
 80061ee:	3b01      	subs	r3, #1
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d3ec      	bcc.n	80061ce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80061f4:	883b      	ldrh	r3, [r7, #0]
 80061f6:	0418      	lsls	r0, r3, #16
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6819      	ldr	r1, [r3, #0]
 80061fc:	78fb      	ldrb	r3, [r7, #3]
 80061fe:	3b01      	subs	r3, #1
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	4302      	orrs	r2, r0
 8006204:	3340      	adds	r3, #64	; 0x40
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	440b      	add	r3, r1
 800620a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3714      	adds	r7, #20
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800621a:	b480      	push	{r7}
 800621c:	b083      	sub	sp, #12
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
 8006222:	460b      	mov	r3, r1
 8006224:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	887a      	ldrh	r2, [r7, #2]
 800622c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2201      	movs	r2, #1
 800624e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800626a:	4b05      	ldr	r3, [pc, #20]	; (8006280 <HAL_PCDEx_ActivateLPM+0x44>)
 800626c:	4313      	orrs	r3, r2
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3714      	adds	r7, #20
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr
 8006280:	10000003 	.word	0x10000003

08006284 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	460b      	mov	r3, r1
 800628e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 800629c:	b480      	push	{r7}
 800629e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 80062a0:	4b05      	ldr	r3, [pc, #20]	; (80062b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a04      	ldr	r2, [pc, #16]	; (80062b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80062a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062aa:	6013      	str	r3, [r2, #0]
}
 80062ac:	bf00      	nop
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	58024800 	.word	0x58024800

080062bc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80062c4:	4b19      	ldr	r3, [pc, #100]	; (800632c <HAL_PWREx_ConfigSupply+0x70>)
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	f003 0304 	and.w	r3, r3, #4
 80062cc:	2b04      	cmp	r3, #4
 80062ce:	d00a      	beq.n	80062e6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80062d0:	4b16      	ldr	r3, [pc, #88]	; (800632c <HAL_PWREx_ConfigSupply+0x70>)
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	f003 0307 	and.w	r3, r3, #7
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d001      	beq.n	80062e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e01f      	b.n	8006322 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80062e2:	2300      	movs	r3, #0
 80062e4:	e01d      	b.n	8006322 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80062e6:	4b11      	ldr	r3, [pc, #68]	; (800632c <HAL_PWREx_ConfigSupply+0x70>)
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	f023 0207 	bic.w	r2, r3, #7
 80062ee:	490f      	ldr	r1, [pc, #60]	; (800632c <HAL_PWREx_ConfigSupply+0x70>)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80062f6:	f7fb fcd3 	bl	8001ca0 <HAL_GetTick>
 80062fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80062fc:	e009      	b.n	8006312 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80062fe:	f7fb fccf 	bl	8001ca0 <HAL_GetTick>
 8006302:	4602      	mov	r2, r0
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800630c:	d901      	bls.n	8006312 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e007      	b.n	8006322 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006312:	4b06      	ldr	r3, [pc, #24]	; (800632c <HAL_PWREx_ConfigSupply+0x70>)
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800631a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800631e:	d1ee      	bne.n	80062fe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	58024800 	.word	0x58024800

08006330 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006330:	b480      	push	{r7}
 8006332:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006334:	4b05      	ldr	r3, [pc, #20]	; (800634c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	4a04      	ldr	r2, [pc, #16]	; (800634c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800633a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800633e:	60d3      	str	r3, [r2, #12]
}
 8006340:	bf00      	nop
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	58024800 	.word	0x58024800

08006350 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b08c      	sub	sp, #48	; 0x30
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e3c4      	b.n	8006aec <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b00      	cmp	r3, #0
 800636c:	f000 8087 	beq.w	800647e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006370:	4ba2      	ldr	r3, [pc, #648]	; (80065fc <HAL_RCC_OscConfig+0x2ac>)
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006378:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800637a:	4ba0      	ldr	r3, [pc, #640]	; (80065fc <HAL_RCC_OscConfig+0x2ac>)
 800637c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006382:	2b10      	cmp	r3, #16
 8006384:	d007      	beq.n	8006396 <HAL_RCC_OscConfig+0x46>
 8006386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006388:	2b18      	cmp	r3, #24
 800638a:	d110      	bne.n	80063ae <HAL_RCC_OscConfig+0x5e>
 800638c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638e:	f003 0303 	and.w	r3, r3, #3
 8006392:	2b02      	cmp	r3, #2
 8006394:	d10b      	bne.n	80063ae <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006396:	4b99      	ldr	r3, [pc, #612]	; (80065fc <HAL_RCC_OscConfig+0x2ac>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d06c      	beq.n	800647c <HAL_RCC_OscConfig+0x12c>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d168      	bne.n	800647c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e39e      	b.n	8006aec <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063b6:	d106      	bne.n	80063c6 <HAL_RCC_OscConfig+0x76>
 80063b8:	4b90      	ldr	r3, [pc, #576]	; (80065fc <HAL_RCC_OscConfig+0x2ac>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a8f      	ldr	r2, [pc, #572]	; (80065fc <HAL_RCC_OscConfig+0x2ac>)
 80063be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063c2:	6013      	str	r3, [r2, #0]
 80063c4:	e02e      	b.n	8006424 <HAL_RCC_OscConfig+0xd4>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10c      	bne.n	80063e8 <HAL_RCC_OscConfig+0x98>
 80063ce:	4b8b      	ldr	r3, [pc, #556]	; (80065fc <HAL_RCC_OscConfig+0x2ac>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a8a      	ldr	r2, [pc, #552]	; (80065fc <HAL_RCC_OscConfig+0x2ac>)
 80063d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063d8:	6013      	str	r3, [r2, #0]
 80063da:	4b88      	ldr	r3, [pc, #544]	; (80065fc <HAL_RCC_OscConfig+0x2ac>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a87      	ldr	r2, [pc, #540]	; (80065fc <HAL_RCC_OscConfig+0x2ac>)
 80063e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063e4:	6013      	str	r3, [r2, #0]
 80063e6:	e01d      	b.n	8006424 <HAL_RCC_OscConfig+0xd4>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063f0:	d10c      	bne.n	800640c <HAL_RCC_OscConfig+0xbc>
 80063f2:	4b82      	ldr	r3, [pc, #520]	; (80065fc <HAL_RCC_OscConfig+0x2ac>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a81      	ldr	r2, [pc, #516]	; (80065fc <HAL_RCC_OscConfig+0x2ac>)
 80063f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063fc:	6013      	str	r3, [r2, #0]
 80063fe:	4b7f      	ldr	r3, [pc, #508]	; (80065fc <HAL_RCC_OscConfig+0x2ac>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a7e      	ldr	r2, [pc, #504]	; (80065fc <HAL_RCC_OscConfig+0x2ac>)
 8006404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006408:	6013      	str	r3, [r2, #0]
 800640a:	e00b      	b.n	8006424 <HAL_RCC_OscConfig+0xd4>
 800640c:	4b7b      	ldr	r3, [pc, #492]	; (80065fc <HAL_RCC_OscConfig+0x2ac>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a7a      	ldr	r2, [pc, #488]	; (80065fc <HAL_RCC_OscConfig+0x2ac>)
 8006412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006416:	6013      	str	r3, [r2, #0]
 8006418:	4b78      	ldr	r3, [pc, #480]	; (80065fc <HAL_RCC_OscConfig+0x2ac>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a77      	ldr	r2, [pc, #476]	; (80065fc <HAL_RCC_OscConfig+0x2ac>)
 800641e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d013      	beq.n	8006454 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800642c:	f7fb fc38 	bl	8001ca0 <HAL_GetTick>
 8006430:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006432:	e008      	b.n	8006446 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006434:	f7fb fc34 	bl	8001ca0 <HAL_GetTick>
 8006438:	4602      	mov	r2, r0
 800643a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	2b64      	cmp	r3, #100	; 0x64
 8006440:	d901      	bls.n	8006446 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e352      	b.n	8006aec <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006446:	4b6d      	ldr	r3, [pc, #436]	; (80065fc <HAL_RCC_OscConfig+0x2ac>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d0f0      	beq.n	8006434 <HAL_RCC_OscConfig+0xe4>
 8006452:	e014      	b.n	800647e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006454:	f7fb fc24 	bl	8001ca0 <HAL_GetTick>
 8006458:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800645a:	e008      	b.n	800646e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800645c:	f7fb fc20 	bl	8001ca0 <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	2b64      	cmp	r3, #100	; 0x64
 8006468:	d901      	bls.n	800646e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e33e      	b.n	8006aec <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800646e:	4b63      	ldr	r3, [pc, #396]	; (80065fc <HAL_RCC_OscConfig+0x2ac>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1f0      	bne.n	800645c <HAL_RCC_OscConfig+0x10c>
 800647a:	e000      	b.n	800647e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800647c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0302 	and.w	r3, r3, #2
 8006486:	2b00      	cmp	r3, #0
 8006488:	f000 8092 	beq.w	80065b0 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800648c:	4b5b      	ldr	r3, [pc, #364]	; (80065fc <HAL_RCC_OscConfig+0x2ac>)
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006494:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006496:	4b59      	ldr	r3, [pc, #356]	; (80065fc <HAL_RCC_OscConfig+0x2ac>)
 8006498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800649a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800649c:	6a3b      	ldr	r3, [r7, #32]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d007      	beq.n	80064b2 <HAL_RCC_OscConfig+0x162>
 80064a2:	6a3b      	ldr	r3, [r7, #32]
 80064a4:	2b18      	cmp	r3, #24
 80064a6:	d12d      	bne.n	8006504 <HAL_RCC_OscConfig+0x1b4>
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	f003 0303 	and.w	r3, r3, #3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d128      	bne.n	8006504 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064b2:	4b52      	ldr	r3, [pc, #328]	; (80065fc <HAL_RCC_OscConfig+0x2ac>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0304 	and.w	r3, r3, #4
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d005      	beq.n	80064ca <HAL_RCC_OscConfig+0x17a>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d101      	bne.n	80064ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e310      	b.n	8006aec <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064ca:	f7fb fc17 	bl	8001cfc <HAL_GetREVID>
 80064ce:	4602      	mov	r2, r0
 80064d0:	f241 0303 	movw	r3, #4099	; 0x1003
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d80a      	bhi.n	80064ee <HAL_RCC_OscConfig+0x19e>
 80064d8:	4b48      	ldr	r3, [pc, #288]	; (80065fc <HAL_RCC_OscConfig+0x2ac>)
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	031b      	lsls	r3, r3, #12
 80064e6:	4945      	ldr	r1, [pc, #276]	; (80065fc <HAL_RCC_OscConfig+0x2ac>)
 80064e8:	4313      	orrs	r3, r2
 80064ea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064ec:	e060      	b.n	80065b0 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064ee:	4b43      	ldr	r3, [pc, #268]	; (80065fc <HAL_RCC_OscConfig+0x2ac>)
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	061b      	lsls	r3, r3, #24
 80064fc:	493f      	ldr	r1, [pc, #252]	; (80065fc <HAL_RCC_OscConfig+0x2ac>)
 80064fe:	4313      	orrs	r3, r2
 8006500:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006502:	e055      	b.n	80065b0 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d038      	beq.n	800657e <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800650c:	4b3b      	ldr	r3, [pc, #236]	; (80065fc <HAL_RCC_OscConfig+0x2ac>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f023 0219 	bic.w	r2, r3, #25
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	4938      	ldr	r1, [pc, #224]	; (80065fc <HAL_RCC_OscConfig+0x2ac>)
 800651a:	4313      	orrs	r3, r2
 800651c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800651e:	f7fb fbbf 	bl	8001ca0 <HAL_GetTick>
 8006522:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006524:	e008      	b.n	8006538 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006526:	f7fb fbbb 	bl	8001ca0 <HAL_GetTick>
 800652a:	4602      	mov	r2, r0
 800652c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	2b02      	cmp	r3, #2
 8006532:	d901      	bls.n	8006538 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8006534:	2303      	movs	r3, #3
 8006536:	e2d9      	b.n	8006aec <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006538:	4b30      	ldr	r3, [pc, #192]	; (80065fc <HAL_RCC_OscConfig+0x2ac>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0304 	and.w	r3, r3, #4
 8006540:	2b00      	cmp	r3, #0
 8006542:	d0f0      	beq.n	8006526 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006544:	f7fb fbda 	bl	8001cfc <HAL_GetREVID>
 8006548:	4602      	mov	r2, r0
 800654a:	f241 0303 	movw	r3, #4099	; 0x1003
 800654e:	429a      	cmp	r2, r3
 8006550:	d80a      	bhi.n	8006568 <HAL_RCC_OscConfig+0x218>
 8006552:	4b2a      	ldr	r3, [pc, #168]	; (80065fc <HAL_RCC_OscConfig+0x2ac>)
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	031b      	lsls	r3, r3, #12
 8006560:	4926      	ldr	r1, [pc, #152]	; (80065fc <HAL_RCC_OscConfig+0x2ac>)
 8006562:	4313      	orrs	r3, r2
 8006564:	604b      	str	r3, [r1, #4]
 8006566:	e023      	b.n	80065b0 <HAL_RCC_OscConfig+0x260>
 8006568:	4b24      	ldr	r3, [pc, #144]	; (80065fc <HAL_RCC_OscConfig+0x2ac>)
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	061b      	lsls	r3, r3, #24
 8006576:	4921      	ldr	r1, [pc, #132]	; (80065fc <HAL_RCC_OscConfig+0x2ac>)
 8006578:	4313      	orrs	r3, r2
 800657a:	604b      	str	r3, [r1, #4]
 800657c:	e018      	b.n	80065b0 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800657e:	4b1f      	ldr	r3, [pc, #124]	; (80065fc <HAL_RCC_OscConfig+0x2ac>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a1e      	ldr	r2, [pc, #120]	; (80065fc <HAL_RCC_OscConfig+0x2ac>)
 8006584:	f023 0301 	bic.w	r3, r3, #1
 8006588:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800658a:	f7fb fb89 	bl	8001ca0 <HAL_GetTick>
 800658e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006590:	e008      	b.n	80065a4 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006592:	f7fb fb85 	bl	8001ca0 <HAL_GetTick>
 8006596:	4602      	mov	r2, r0
 8006598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	2b02      	cmp	r3, #2
 800659e:	d901      	bls.n	80065a4 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e2a3      	b.n	8006aec <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80065a4:	4b15      	ldr	r3, [pc, #84]	; (80065fc <HAL_RCC_OscConfig+0x2ac>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 0304 	and.w	r3, r3, #4
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1f0      	bne.n	8006592 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0310 	and.w	r3, r3, #16
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 8091 	beq.w	80066e0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065be:	4b0f      	ldr	r3, [pc, #60]	; (80065fc <HAL_RCC_OscConfig+0x2ac>)
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065c6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80065c8:	4b0c      	ldr	r3, [pc, #48]	; (80065fc <HAL_RCC_OscConfig+0x2ac>)
 80065ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065cc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	2b08      	cmp	r3, #8
 80065d2:	d007      	beq.n	80065e4 <HAL_RCC_OscConfig+0x294>
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	2b18      	cmp	r3, #24
 80065d8:	d12f      	bne.n	800663a <HAL_RCC_OscConfig+0x2ea>
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	f003 0303 	and.w	r3, r3, #3
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d12a      	bne.n	800663a <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80065e4:	4b05      	ldr	r3, [pc, #20]	; (80065fc <HAL_RCC_OscConfig+0x2ac>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d007      	beq.n	8006600 <HAL_RCC_OscConfig+0x2b0>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	69db      	ldr	r3, [r3, #28]
 80065f4:	2b80      	cmp	r3, #128	; 0x80
 80065f6:	d003      	beq.n	8006600 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e277      	b.n	8006aec <HAL_RCC_OscConfig+0x79c>
 80065fc:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006600:	f7fb fb7c 	bl	8001cfc <HAL_GetREVID>
 8006604:	4602      	mov	r2, r0
 8006606:	f241 0303 	movw	r3, #4099	; 0x1003
 800660a:	429a      	cmp	r2, r3
 800660c:	d80a      	bhi.n	8006624 <HAL_RCC_OscConfig+0x2d4>
 800660e:	4ba2      	ldr	r3, [pc, #648]	; (8006898 <HAL_RCC_OscConfig+0x548>)
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	069b      	lsls	r3, r3, #26
 800661c:	499e      	ldr	r1, [pc, #632]	; (8006898 <HAL_RCC_OscConfig+0x548>)
 800661e:	4313      	orrs	r3, r2
 8006620:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006622:	e05d      	b.n	80066e0 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006624:	4b9c      	ldr	r3, [pc, #624]	; (8006898 <HAL_RCC_OscConfig+0x548>)
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a1b      	ldr	r3, [r3, #32]
 8006630:	061b      	lsls	r3, r3, #24
 8006632:	4999      	ldr	r1, [pc, #612]	; (8006898 <HAL_RCC_OscConfig+0x548>)
 8006634:	4313      	orrs	r3, r2
 8006636:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006638:	e052      	b.n	80066e0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	69db      	ldr	r3, [r3, #28]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d035      	beq.n	80066ae <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006642:	4b95      	ldr	r3, [pc, #596]	; (8006898 <HAL_RCC_OscConfig+0x548>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a94      	ldr	r2, [pc, #592]	; (8006898 <HAL_RCC_OscConfig+0x548>)
 8006648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800664c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800664e:	f7fb fb27 	bl	8001ca0 <HAL_GetTick>
 8006652:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006654:	e008      	b.n	8006668 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006656:	f7fb fb23 	bl	8001ca0 <HAL_GetTick>
 800665a:	4602      	mov	r2, r0
 800665c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	2b02      	cmp	r3, #2
 8006662:	d901      	bls.n	8006668 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8006664:	2303      	movs	r3, #3
 8006666:	e241      	b.n	8006aec <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006668:	4b8b      	ldr	r3, [pc, #556]	; (8006898 <HAL_RCC_OscConfig+0x548>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006670:	2b00      	cmp	r3, #0
 8006672:	d0f0      	beq.n	8006656 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006674:	f7fb fb42 	bl	8001cfc <HAL_GetREVID>
 8006678:	4602      	mov	r2, r0
 800667a:	f241 0303 	movw	r3, #4099	; 0x1003
 800667e:	429a      	cmp	r2, r3
 8006680:	d80a      	bhi.n	8006698 <HAL_RCC_OscConfig+0x348>
 8006682:	4b85      	ldr	r3, [pc, #532]	; (8006898 <HAL_RCC_OscConfig+0x548>)
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	069b      	lsls	r3, r3, #26
 8006690:	4981      	ldr	r1, [pc, #516]	; (8006898 <HAL_RCC_OscConfig+0x548>)
 8006692:	4313      	orrs	r3, r2
 8006694:	604b      	str	r3, [r1, #4]
 8006696:	e023      	b.n	80066e0 <HAL_RCC_OscConfig+0x390>
 8006698:	4b7f      	ldr	r3, [pc, #508]	; (8006898 <HAL_RCC_OscConfig+0x548>)
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a1b      	ldr	r3, [r3, #32]
 80066a4:	061b      	lsls	r3, r3, #24
 80066a6:	497c      	ldr	r1, [pc, #496]	; (8006898 <HAL_RCC_OscConfig+0x548>)
 80066a8:	4313      	orrs	r3, r2
 80066aa:	60cb      	str	r3, [r1, #12]
 80066ac:	e018      	b.n	80066e0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80066ae:	4b7a      	ldr	r3, [pc, #488]	; (8006898 <HAL_RCC_OscConfig+0x548>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a79      	ldr	r2, [pc, #484]	; (8006898 <HAL_RCC_OscConfig+0x548>)
 80066b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066ba:	f7fb faf1 	bl	8001ca0 <HAL_GetTick>
 80066be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80066c0:	e008      	b.n	80066d4 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80066c2:	f7fb faed 	bl	8001ca0 <HAL_GetTick>
 80066c6:	4602      	mov	r2, r0
 80066c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d901      	bls.n	80066d4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e20b      	b.n	8006aec <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80066d4:	4b70      	ldr	r3, [pc, #448]	; (8006898 <HAL_RCC_OscConfig+0x548>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1f0      	bne.n	80066c2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0308 	and.w	r3, r3, #8
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d036      	beq.n	800675a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	695b      	ldr	r3, [r3, #20]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d019      	beq.n	8006728 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066f4:	4b68      	ldr	r3, [pc, #416]	; (8006898 <HAL_RCC_OscConfig+0x548>)
 80066f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066f8:	4a67      	ldr	r2, [pc, #412]	; (8006898 <HAL_RCC_OscConfig+0x548>)
 80066fa:	f043 0301 	orr.w	r3, r3, #1
 80066fe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006700:	f7fb face 	bl	8001ca0 <HAL_GetTick>
 8006704:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006706:	e008      	b.n	800671a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006708:	f7fb faca 	bl	8001ca0 <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	2b02      	cmp	r3, #2
 8006714:	d901      	bls.n	800671a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e1e8      	b.n	8006aec <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800671a:	4b5f      	ldr	r3, [pc, #380]	; (8006898 <HAL_RCC_OscConfig+0x548>)
 800671c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800671e:	f003 0302 	and.w	r3, r3, #2
 8006722:	2b00      	cmp	r3, #0
 8006724:	d0f0      	beq.n	8006708 <HAL_RCC_OscConfig+0x3b8>
 8006726:	e018      	b.n	800675a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006728:	4b5b      	ldr	r3, [pc, #364]	; (8006898 <HAL_RCC_OscConfig+0x548>)
 800672a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800672c:	4a5a      	ldr	r2, [pc, #360]	; (8006898 <HAL_RCC_OscConfig+0x548>)
 800672e:	f023 0301 	bic.w	r3, r3, #1
 8006732:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006734:	f7fb fab4 	bl	8001ca0 <HAL_GetTick>
 8006738:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800673a:	e008      	b.n	800674e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800673c:	f7fb fab0 	bl	8001ca0 <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	2b02      	cmp	r3, #2
 8006748:	d901      	bls.n	800674e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e1ce      	b.n	8006aec <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800674e:	4b52      	ldr	r3, [pc, #328]	; (8006898 <HAL_RCC_OscConfig+0x548>)
 8006750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006752:	f003 0302 	and.w	r3, r3, #2
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1f0      	bne.n	800673c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0320 	and.w	r3, r3, #32
 8006762:	2b00      	cmp	r3, #0
 8006764:	d036      	beq.n	80067d4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d019      	beq.n	80067a2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800676e:	4b4a      	ldr	r3, [pc, #296]	; (8006898 <HAL_RCC_OscConfig+0x548>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a49      	ldr	r2, [pc, #292]	; (8006898 <HAL_RCC_OscConfig+0x548>)
 8006774:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006778:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800677a:	f7fb fa91 	bl	8001ca0 <HAL_GetTick>
 800677e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006780:	e008      	b.n	8006794 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006782:	f7fb fa8d 	bl	8001ca0 <HAL_GetTick>
 8006786:	4602      	mov	r2, r0
 8006788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	2b02      	cmp	r3, #2
 800678e:	d901      	bls.n	8006794 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8006790:	2303      	movs	r3, #3
 8006792:	e1ab      	b.n	8006aec <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006794:	4b40      	ldr	r3, [pc, #256]	; (8006898 <HAL_RCC_OscConfig+0x548>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800679c:	2b00      	cmp	r3, #0
 800679e:	d0f0      	beq.n	8006782 <HAL_RCC_OscConfig+0x432>
 80067a0:	e018      	b.n	80067d4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80067a2:	4b3d      	ldr	r3, [pc, #244]	; (8006898 <HAL_RCC_OscConfig+0x548>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a3c      	ldr	r2, [pc, #240]	; (8006898 <HAL_RCC_OscConfig+0x548>)
 80067a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80067ae:	f7fb fa77 	bl	8001ca0 <HAL_GetTick>
 80067b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80067b4:	e008      	b.n	80067c8 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80067b6:	f7fb fa73 	bl	8001ca0 <HAL_GetTick>
 80067ba:	4602      	mov	r2, r0
 80067bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d901      	bls.n	80067c8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e191      	b.n	8006aec <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80067c8:	4b33      	ldr	r3, [pc, #204]	; (8006898 <HAL_RCC_OscConfig+0x548>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1f0      	bne.n	80067b6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0304 	and.w	r3, r3, #4
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 8086 	beq.w	80068ee <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80067e2:	4b2e      	ldr	r3, [pc, #184]	; (800689c <HAL_RCC_OscConfig+0x54c>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a2d      	ldr	r2, [pc, #180]	; (800689c <HAL_RCC_OscConfig+0x54c>)
 80067e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067ee:	f7fb fa57 	bl	8001ca0 <HAL_GetTick>
 80067f2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067f4:	e008      	b.n	8006808 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80067f6:	f7fb fa53 	bl	8001ca0 <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	2b64      	cmp	r3, #100	; 0x64
 8006802:	d901      	bls.n	8006808 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8006804:	2303      	movs	r3, #3
 8006806:	e171      	b.n	8006aec <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006808:	4b24      	ldr	r3, [pc, #144]	; (800689c <HAL_RCC_OscConfig+0x54c>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006810:	2b00      	cmp	r3, #0
 8006812:	d0f0      	beq.n	80067f6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	2b01      	cmp	r3, #1
 800681a:	d106      	bne.n	800682a <HAL_RCC_OscConfig+0x4da>
 800681c:	4b1e      	ldr	r3, [pc, #120]	; (8006898 <HAL_RCC_OscConfig+0x548>)
 800681e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006820:	4a1d      	ldr	r2, [pc, #116]	; (8006898 <HAL_RCC_OscConfig+0x548>)
 8006822:	f043 0301 	orr.w	r3, r3, #1
 8006826:	6713      	str	r3, [r2, #112]	; 0x70
 8006828:	e02d      	b.n	8006886 <HAL_RCC_OscConfig+0x536>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10c      	bne.n	800684c <HAL_RCC_OscConfig+0x4fc>
 8006832:	4b19      	ldr	r3, [pc, #100]	; (8006898 <HAL_RCC_OscConfig+0x548>)
 8006834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006836:	4a18      	ldr	r2, [pc, #96]	; (8006898 <HAL_RCC_OscConfig+0x548>)
 8006838:	f023 0301 	bic.w	r3, r3, #1
 800683c:	6713      	str	r3, [r2, #112]	; 0x70
 800683e:	4b16      	ldr	r3, [pc, #88]	; (8006898 <HAL_RCC_OscConfig+0x548>)
 8006840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006842:	4a15      	ldr	r2, [pc, #84]	; (8006898 <HAL_RCC_OscConfig+0x548>)
 8006844:	f023 0304 	bic.w	r3, r3, #4
 8006848:	6713      	str	r3, [r2, #112]	; 0x70
 800684a:	e01c      	b.n	8006886 <HAL_RCC_OscConfig+0x536>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	2b05      	cmp	r3, #5
 8006852:	d10c      	bne.n	800686e <HAL_RCC_OscConfig+0x51e>
 8006854:	4b10      	ldr	r3, [pc, #64]	; (8006898 <HAL_RCC_OscConfig+0x548>)
 8006856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006858:	4a0f      	ldr	r2, [pc, #60]	; (8006898 <HAL_RCC_OscConfig+0x548>)
 800685a:	f043 0304 	orr.w	r3, r3, #4
 800685e:	6713      	str	r3, [r2, #112]	; 0x70
 8006860:	4b0d      	ldr	r3, [pc, #52]	; (8006898 <HAL_RCC_OscConfig+0x548>)
 8006862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006864:	4a0c      	ldr	r2, [pc, #48]	; (8006898 <HAL_RCC_OscConfig+0x548>)
 8006866:	f043 0301 	orr.w	r3, r3, #1
 800686a:	6713      	str	r3, [r2, #112]	; 0x70
 800686c:	e00b      	b.n	8006886 <HAL_RCC_OscConfig+0x536>
 800686e:	4b0a      	ldr	r3, [pc, #40]	; (8006898 <HAL_RCC_OscConfig+0x548>)
 8006870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006872:	4a09      	ldr	r2, [pc, #36]	; (8006898 <HAL_RCC_OscConfig+0x548>)
 8006874:	f023 0301 	bic.w	r3, r3, #1
 8006878:	6713      	str	r3, [r2, #112]	; 0x70
 800687a:	4b07      	ldr	r3, [pc, #28]	; (8006898 <HAL_RCC_OscConfig+0x548>)
 800687c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800687e:	4a06      	ldr	r2, [pc, #24]	; (8006898 <HAL_RCC_OscConfig+0x548>)
 8006880:	f023 0304 	bic.w	r3, r3, #4
 8006884:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d01a      	beq.n	80068c4 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800688e:	f7fb fa07 	bl	8001ca0 <HAL_GetTick>
 8006892:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006894:	e00f      	b.n	80068b6 <HAL_RCC_OscConfig+0x566>
 8006896:	bf00      	nop
 8006898:	58024400 	.word	0x58024400
 800689c:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068a0:	f7fb f9fe 	bl	8001ca0 <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d901      	bls.n	80068b6 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e11a      	b.n	8006aec <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068b6:	4b8f      	ldr	r3, [pc, #572]	; (8006af4 <HAL_RCC_OscConfig+0x7a4>)
 80068b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ba:	f003 0302 	and.w	r3, r3, #2
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d0ee      	beq.n	80068a0 <HAL_RCC_OscConfig+0x550>
 80068c2:	e014      	b.n	80068ee <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068c4:	f7fb f9ec 	bl	8001ca0 <HAL_GetTick>
 80068c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80068ca:	e00a      	b.n	80068e2 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068cc:	f7fb f9e8 	bl	8001ca0 <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80068da:	4293      	cmp	r3, r2
 80068dc:	d901      	bls.n	80068e2 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e104      	b.n	8006aec <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80068e2:	4b84      	ldr	r3, [pc, #528]	; (8006af4 <HAL_RCC_OscConfig+0x7a4>)
 80068e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068e6:	f003 0302 	and.w	r3, r3, #2
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1ee      	bne.n	80068cc <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	f000 80f9 	beq.w	8006aea <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80068f8:	4b7e      	ldr	r3, [pc, #504]	; (8006af4 <HAL_RCC_OscConfig+0x7a4>)
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006900:	2b18      	cmp	r3, #24
 8006902:	f000 80b4 	beq.w	8006a6e <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690a:	2b02      	cmp	r3, #2
 800690c:	f040 8095 	bne.w	8006a3a <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006910:	4b78      	ldr	r3, [pc, #480]	; (8006af4 <HAL_RCC_OscConfig+0x7a4>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a77      	ldr	r2, [pc, #476]	; (8006af4 <HAL_RCC_OscConfig+0x7a4>)
 8006916:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800691a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800691c:	f7fb f9c0 	bl	8001ca0 <HAL_GetTick>
 8006920:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006922:	e008      	b.n	8006936 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006924:	f7fb f9bc 	bl	8001ca0 <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	2b02      	cmp	r3, #2
 8006930:	d901      	bls.n	8006936 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e0da      	b.n	8006aec <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006936:	4b6f      	ldr	r3, [pc, #444]	; (8006af4 <HAL_RCC_OscConfig+0x7a4>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1f0      	bne.n	8006924 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006942:	4b6c      	ldr	r3, [pc, #432]	; (8006af4 <HAL_RCC_OscConfig+0x7a4>)
 8006944:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006946:	4b6c      	ldr	r3, [pc, #432]	; (8006af8 <HAL_RCC_OscConfig+0x7a8>)
 8006948:	4013      	ands	r3, r2
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006952:	0112      	lsls	r2, r2, #4
 8006954:	430a      	orrs	r2, r1
 8006956:	4967      	ldr	r1, [pc, #412]	; (8006af4 <HAL_RCC_OscConfig+0x7a4>)
 8006958:	4313      	orrs	r3, r2
 800695a:	628b      	str	r3, [r1, #40]	; 0x28
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006960:	3b01      	subs	r3, #1
 8006962:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800696a:	3b01      	subs	r3, #1
 800696c:	025b      	lsls	r3, r3, #9
 800696e:	b29b      	uxth	r3, r3
 8006970:	431a      	orrs	r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006976:	3b01      	subs	r3, #1
 8006978:	041b      	lsls	r3, r3, #16
 800697a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800697e:	431a      	orrs	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006984:	3b01      	subs	r3, #1
 8006986:	061b      	lsls	r3, r3, #24
 8006988:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800698c:	4959      	ldr	r1, [pc, #356]	; (8006af4 <HAL_RCC_OscConfig+0x7a4>)
 800698e:	4313      	orrs	r3, r2
 8006990:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006992:	4b58      	ldr	r3, [pc, #352]	; (8006af4 <HAL_RCC_OscConfig+0x7a4>)
 8006994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006996:	4a57      	ldr	r2, [pc, #348]	; (8006af4 <HAL_RCC_OscConfig+0x7a4>)
 8006998:	f023 0301 	bic.w	r3, r3, #1
 800699c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800699e:	4b55      	ldr	r3, [pc, #340]	; (8006af4 <HAL_RCC_OscConfig+0x7a4>)
 80069a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069a2:	4b56      	ldr	r3, [pc, #344]	; (8006afc <HAL_RCC_OscConfig+0x7ac>)
 80069a4:	4013      	ands	r3, r2
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80069aa:	00d2      	lsls	r2, r2, #3
 80069ac:	4951      	ldr	r1, [pc, #324]	; (8006af4 <HAL_RCC_OscConfig+0x7a4>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80069b2:	4b50      	ldr	r3, [pc, #320]	; (8006af4 <HAL_RCC_OscConfig+0x7a4>)
 80069b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b6:	f023 020c 	bic.w	r2, r3, #12
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069be:	494d      	ldr	r1, [pc, #308]	; (8006af4 <HAL_RCC_OscConfig+0x7a4>)
 80069c0:	4313      	orrs	r3, r2
 80069c2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80069c4:	4b4b      	ldr	r3, [pc, #300]	; (8006af4 <HAL_RCC_OscConfig+0x7a4>)
 80069c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c8:	f023 0202 	bic.w	r2, r3, #2
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069d0:	4948      	ldr	r1, [pc, #288]	; (8006af4 <HAL_RCC_OscConfig+0x7a4>)
 80069d2:	4313      	orrs	r3, r2
 80069d4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80069d6:	4b47      	ldr	r3, [pc, #284]	; (8006af4 <HAL_RCC_OscConfig+0x7a4>)
 80069d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069da:	4a46      	ldr	r2, [pc, #280]	; (8006af4 <HAL_RCC_OscConfig+0x7a4>)
 80069dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069e2:	4b44      	ldr	r3, [pc, #272]	; (8006af4 <HAL_RCC_OscConfig+0x7a4>)
 80069e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e6:	4a43      	ldr	r2, [pc, #268]	; (8006af4 <HAL_RCC_OscConfig+0x7a4>)
 80069e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80069ee:	4b41      	ldr	r3, [pc, #260]	; (8006af4 <HAL_RCC_OscConfig+0x7a4>)
 80069f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f2:	4a40      	ldr	r2, [pc, #256]	; (8006af4 <HAL_RCC_OscConfig+0x7a4>)
 80069f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80069fa:	4b3e      	ldr	r3, [pc, #248]	; (8006af4 <HAL_RCC_OscConfig+0x7a4>)
 80069fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fe:	4a3d      	ldr	r2, [pc, #244]	; (8006af4 <HAL_RCC_OscConfig+0x7a4>)
 8006a00:	f043 0301 	orr.w	r3, r3, #1
 8006a04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a06:	4b3b      	ldr	r3, [pc, #236]	; (8006af4 <HAL_RCC_OscConfig+0x7a4>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a3a      	ldr	r2, [pc, #232]	; (8006af4 <HAL_RCC_OscConfig+0x7a4>)
 8006a0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a12:	f7fb f945 	bl	8001ca0 <HAL_GetTick>
 8006a16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a18:	e008      	b.n	8006a2c <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a1a:	f7fb f941 	bl	8001ca0 <HAL_GetTick>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a22:	1ad3      	subs	r3, r2, r3
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d901      	bls.n	8006a2c <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e05f      	b.n	8006aec <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a2c:	4b31      	ldr	r3, [pc, #196]	; (8006af4 <HAL_RCC_OscConfig+0x7a4>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d0f0      	beq.n	8006a1a <HAL_RCC_OscConfig+0x6ca>
 8006a38:	e057      	b.n	8006aea <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a3a:	4b2e      	ldr	r3, [pc, #184]	; (8006af4 <HAL_RCC_OscConfig+0x7a4>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a2d      	ldr	r2, [pc, #180]	; (8006af4 <HAL_RCC_OscConfig+0x7a4>)
 8006a40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a46:	f7fb f92b 	bl	8001ca0 <HAL_GetTick>
 8006a4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a4c:	e008      	b.n	8006a60 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a4e:	f7fb f927 	bl	8001ca0 <HAL_GetTick>
 8006a52:	4602      	mov	r2, r0
 8006a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d901      	bls.n	8006a60 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e045      	b.n	8006aec <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a60:	4b24      	ldr	r3, [pc, #144]	; (8006af4 <HAL_RCC_OscConfig+0x7a4>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1f0      	bne.n	8006a4e <HAL_RCC_OscConfig+0x6fe>
 8006a6c:	e03d      	b.n	8006aea <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006a6e:	4b21      	ldr	r3, [pc, #132]	; (8006af4 <HAL_RCC_OscConfig+0x7a4>)
 8006a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a72:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006a74:	4b1f      	ldr	r3, [pc, #124]	; (8006af4 <HAL_RCC_OscConfig+0x7a4>)
 8006a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a78:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d031      	beq.n	8006ae6 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	f003 0203 	and.w	r2, r3, #3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d12a      	bne.n	8006ae6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	091b      	lsrs	r3, r3, #4
 8006a94:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d122      	bne.n	8006ae6 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aaa:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d11a      	bne.n	8006ae6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	0a5b      	lsrs	r3, r3, #9
 8006ab4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006abc:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d111      	bne.n	8006ae6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	0c1b      	lsrs	r3, r3, #16
 8006ac6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ace:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d108      	bne.n	8006ae6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	0e1b      	lsrs	r3, r3, #24
 8006ad8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d001      	beq.n	8006aea <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e000      	b.n	8006aec <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3730      	adds	r7, #48	; 0x30
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	58024400 	.word	0x58024400
 8006af8:	fffffc0c 	.word	0xfffffc0c
 8006afc:	ffff0007 	.word	0xffff0007

08006b00 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d101      	bne.n	8006b14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e18d      	b.n	8006e30 <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b14:	4b8a      	ldr	r3, [pc, #552]	; (8006d40 <HAL_RCC_ClockConfig+0x240>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 030f 	and.w	r3, r3, #15
 8006b1c:	683a      	ldr	r2, [r7, #0]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d910      	bls.n	8006b44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b22:	4b87      	ldr	r3, [pc, #540]	; (8006d40 <HAL_RCC_ClockConfig+0x240>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f023 020f 	bic.w	r2, r3, #15
 8006b2a:	4985      	ldr	r1, [pc, #532]	; (8006d40 <HAL_RCC_ClockConfig+0x240>)
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b32:	4b83      	ldr	r3, [pc, #524]	; (8006d40 <HAL_RCC_ClockConfig+0x240>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 030f 	and.w	r3, r3, #15
 8006b3a:	683a      	ldr	r2, [r7, #0]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d001      	beq.n	8006b44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e175      	b.n	8006e30 <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 0304 	and.w	r3, r3, #4
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d010      	beq.n	8006b72 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	691a      	ldr	r2, [r3, #16]
 8006b54:	4b7b      	ldr	r3, [pc, #492]	; (8006d44 <HAL_RCC_ClockConfig+0x244>)
 8006b56:	699b      	ldr	r3, [r3, #24]
 8006b58:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d908      	bls.n	8006b72 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006b60:	4b78      	ldr	r3, [pc, #480]	; (8006d44 <HAL_RCC_ClockConfig+0x244>)
 8006b62:	699b      	ldr	r3, [r3, #24]
 8006b64:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	4975      	ldr	r1, [pc, #468]	; (8006d44 <HAL_RCC_ClockConfig+0x244>)
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 0308 	and.w	r3, r3, #8
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d010      	beq.n	8006ba0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	695a      	ldr	r2, [r3, #20]
 8006b82:	4b70      	ldr	r3, [pc, #448]	; (8006d44 <HAL_RCC_ClockConfig+0x244>)
 8006b84:	69db      	ldr	r3, [r3, #28]
 8006b86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d908      	bls.n	8006ba0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006b8e:	4b6d      	ldr	r3, [pc, #436]	; (8006d44 <HAL_RCC_ClockConfig+0x244>)
 8006b90:	69db      	ldr	r3, [r3, #28]
 8006b92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	695b      	ldr	r3, [r3, #20]
 8006b9a:	496a      	ldr	r1, [pc, #424]	; (8006d44 <HAL_RCC_ClockConfig+0x244>)
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0310 	and.w	r3, r3, #16
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d010      	beq.n	8006bce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	699a      	ldr	r2, [r3, #24]
 8006bb0:	4b64      	ldr	r3, [pc, #400]	; (8006d44 <HAL_RCC_ClockConfig+0x244>)
 8006bb2:	69db      	ldr	r3, [r3, #28]
 8006bb4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d908      	bls.n	8006bce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006bbc:	4b61      	ldr	r3, [pc, #388]	; (8006d44 <HAL_RCC_ClockConfig+0x244>)
 8006bbe:	69db      	ldr	r3, [r3, #28]
 8006bc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	699b      	ldr	r3, [r3, #24]
 8006bc8:	495e      	ldr	r1, [pc, #376]	; (8006d44 <HAL_RCC_ClockConfig+0x244>)
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 0320 	and.w	r3, r3, #32
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d010      	beq.n	8006bfc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	69da      	ldr	r2, [r3, #28]
 8006bde:	4b59      	ldr	r3, [pc, #356]	; (8006d44 <HAL_RCC_ClockConfig+0x244>)
 8006be0:	6a1b      	ldr	r3, [r3, #32]
 8006be2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d908      	bls.n	8006bfc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006bea:	4b56      	ldr	r3, [pc, #344]	; (8006d44 <HAL_RCC_ClockConfig+0x244>)
 8006bec:	6a1b      	ldr	r3, [r3, #32]
 8006bee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	69db      	ldr	r3, [r3, #28]
 8006bf6:	4953      	ldr	r1, [pc, #332]	; (8006d44 <HAL_RCC_ClockConfig+0x244>)
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 0302 	and.w	r3, r3, #2
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d010      	beq.n	8006c2a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68da      	ldr	r2, [r3, #12]
 8006c0c:	4b4d      	ldr	r3, [pc, #308]	; (8006d44 <HAL_RCC_ClockConfig+0x244>)
 8006c0e:	699b      	ldr	r3, [r3, #24]
 8006c10:	f003 030f 	and.w	r3, r3, #15
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d908      	bls.n	8006c2a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c18:	4b4a      	ldr	r3, [pc, #296]	; (8006d44 <HAL_RCC_ClockConfig+0x244>)
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	f023 020f 	bic.w	r2, r3, #15
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	4947      	ldr	r1, [pc, #284]	; (8006d44 <HAL_RCC_ClockConfig+0x244>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d055      	beq.n	8006ce2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006c36:	4b43      	ldr	r3, [pc, #268]	; (8006d44 <HAL_RCC_ClockConfig+0x244>)
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	4940      	ldr	r1, [pc, #256]	; (8006d44 <HAL_RCC_ClockConfig+0x244>)
 8006c44:	4313      	orrs	r3, r2
 8006c46:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d107      	bne.n	8006c60 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c50:	4b3c      	ldr	r3, [pc, #240]	; (8006d44 <HAL_RCC_ClockConfig+0x244>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d121      	bne.n	8006ca0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e0e7      	b.n	8006e30 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	2b03      	cmp	r3, #3
 8006c66:	d107      	bne.n	8006c78 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c68:	4b36      	ldr	r3, [pc, #216]	; (8006d44 <HAL_RCC_ClockConfig+0x244>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d115      	bne.n	8006ca0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e0db      	b.n	8006e30 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d107      	bne.n	8006c90 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c80:	4b30      	ldr	r3, [pc, #192]	; (8006d44 <HAL_RCC_ClockConfig+0x244>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d109      	bne.n	8006ca0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e0cf      	b.n	8006e30 <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c90:	4b2c      	ldr	r3, [pc, #176]	; (8006d44 <HAL_RCC_ClockConfig+0x244>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0304 	and.w	r3, r3, #4
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d101      	bne.n	8006ca0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e0c7      	b.n	8006e30 <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ca0:	4b28      	ldr	r3, [pc, #160]	; (8006d44 <HAL_RCC_ClockConfig+0x244>)
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	f023 0207 	bic.w	r2, r3, #7
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	4925      	ldr	r1, [pc, #148]	; (8006d44 <HAL_RCC_ClockConfig+0x244>)
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cb2:	f7fa fff5 	bl	8001ca0 <HAL_GetTick>
 8006cb6:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cb8:	e00a      	b.n	8006cd0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cba:	f7fa fff1 	bl	8001ca0 <HAL_GetTick>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d901      	bls.n	8006cd0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e0af      	b.n	8006e30 <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cd0:	4b1c      	ldr	r3, [pc, #112]	; (8006d44 <HAL_RCC_ClockConfig+0x244>)
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	00db      	lsls	r3, r3, #3
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d1eb      	bne.n	8006cba <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0302 	and.w	r3, r3, #2
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d010      	beq.n	8006d10 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	68da      	ldr	r2, [r3, #12]
 8006cf2:	4b14      	ldr	r3, [pc, #80]	; (8006d44 <HAL_RCC_ClockConfig+0x244>)
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	f003 030f 	and.w	r3, r3, #15
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d208      	bcs.n	8006d10 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cfe:	4b11      	ldr	r3, [pc, #68]	; (8006d44 <HAL_RCC_ClockConfig+0x244>)
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	f023 020f 	bic.w	r2, r3, #15
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	490e      	ldr	r1, [pc, #56]	; (8006d44 <HAL_RCC_ClockConfig+0x244>)
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d10:	4b0b      	ldr	r3, [pc, #44]	; (8006d40 <HAL_RCC_ClockConfig+0x240>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 030f 	and.w	r3, r3, #15
 8006d18:	683a      	ldr	r2, [r7, #0]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d214      	bcs.n	8006d48 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d1e:	4b08      	ldr	r3, [pc, #32]	; (8006d40 <HAL_RCC_ClockConfig+0x240>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f023 020f 	bic.w	r2, r3, #15
 8006d26:	4906      	ldr	r1, [pc, #24]	; (8006d40 <HAL_RCC_ClockConfig+0x240>)
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d2e:	4b04      	ldr	r3, [pc, #16]	; (8006d40 <HAL_RCC_ClockConfig+0x240>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 030f 	and.w	r3, r3, #15
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d005      	beq.n	8006d48 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e077      	b.n	8006e30 <HAL_RCC_ClockConfig+0x330>
 8006d40:	52002000 	.word	0x52002000
 8006d44:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0304 	and.w	r3, r3, #4
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d010      	beq.n	8006d76 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	691a      	ldr	r2, [r3, #16]
 8006d58:	4b37      	ldr	r3, [pc, #220]	; (8006e38 <HAL_RCC_ClockConfig+0x338>)
 8006d5a:	699b      	ldr	r3, [r3, #24]
 8006d5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d208      	bcs.n	8006d76 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006d64:	4b34      	ldr	r3, [pc, #208]	; (8006e38 <HAL_RCC_ClockConfig+0x338>)
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	4931      	ldr	r1, [pc, #196]	; (8006e38 <HAL_RCC_ClockConfig+0x338>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0308 	and.w	r3, r3, #8
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d010      	beq.n	8006da4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	695a      	ldr	r2, [r3, #20]
 8006d86:	4b2c      	ldr	r3, [pc, #176]	; (8006e38 <HAL_RCC_ClockConfig+0x338>)
 8006d88:	69db      	ldr	r3, [r3, #28]
 8006d8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d208      	bcs.n	8006da4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006d92:	4b29      	ldr	r3, [pc, #164]	; (8006e38 <HAL_RCC_ClockConfig+0x338>)
 8006d94:	69db      	ldr	r3, [r3, #28]
 8006d96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	4926      	ldr	r1, [pc, #152]	; (8006e38 <HAL_RCC_ClockConfig+0x338>)
 8006da0:	4313      	orrs	r3, r2
 8006da2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 0310 	and.w	r3, r3, #16
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d010      	beq.n	8006dd2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	699a      	ldr	r2, [r3, #24]
 8006db4:	4b20      	ldr	r3, [pc, #128]	; (8006e38 <HAL_RCC_ClockConfig+0x338>)
 8006db6:	69db      	ldr	r3, [r3, #28]
 8006db8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d208      	bcs.n	8006dd2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006dc0:	4b1d      	ldr	r3, [pc, #116]	; (8006e38 <HAL_RCC_ClockConfig+0x338>)
 8006dc2:	69db      	ldr	r3, [r3, #28]
 8006dc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	491a      	ldr	r1, [pc, #104]	; (8006e38 <HAL_RCC_ClockConfig+0x338>)
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 0320 	and.w	r3, r3, #32
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d010      	beq.n	8006e00 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	69da      	ldr	r2, [r3, #28]
 8006de2:	4b15      	ldr	r3, [pc, #84]	; (8006e38 <HAL_RCC_ClockConfig+0x338>)
 8006de4:	6a1b      	ldr	r3, [r3, #32]
 8006de6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d208      	bcs.n	8006e00 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006dee:	4b12      	ldr	r3, [pc, #72]	; (8006e38 <HAL_RCC_ClockConfig+0x338>)
 8006df0:	6a1b      	ldr	r3, [r3, #32]
 8006df2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	69db      	ldr	r3, [r3, #28]
 8006dfa:	490f      	ldr	r1, [pc, #60]	; (8006e38 <HAL_RCC_ClockConfig+0x338>)
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006e00:	f000 f832 	bl	8006e68 <HAL_RCC_GetSysClockFreq>
 8006e04:	4601      	mov	r1, r0
 8006e06:	4b0c      	ldr	r3, [pc, #48]	; (8006e38 <HAL_RCC_ClockConfig+0x338>)
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	0a1b      	lsrs	r3, r3, #8
 8006e0c:	f003 030f 	and.w	r3, r3, #15
 8006e10:	4a0a      	ldr	r2, [pc, #40]	; (8006e3c <HAL_RCC_ClockConfig+0x33c>)
 8006e12:	5cd3      	ldrb	r3, [r2, r3]
 8006e14:	f003 031f 	and.w	r3, r3, #31
 8006e18:	fa21 f303 	lsr.w	r3, r1, r3
 8006e1c:	4a08      	ldr	r2, [pc, #32]	; (8006e40 <HAL_RCC_ClockConfig+0x340>)
 8006e1e:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif
  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006e20:	4b08      	ldr	r3, [pc, #32]	; (8006e44 <HAL_RCC_ClockConfig+0x344>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7fa fef1 	bl	8001c0c <HAL_InitTick>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8006e2e:	7afb      	ldrb	r3, [r7, #11]
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3710      	adds	r7, #16
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	58024400 	.word	0x58024400
 8006e3c:	080100d8 	.word	0x080100d8
 8006e40:	24000000 	.word	0x24000000
 8006e44:	24000008 	.word	0x24000008

08006e48 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8006e4c:	4b05      	ldr	r3, [pc, #20]	; (8006e64 <HAL_RCC_EnableCSS+0x1c>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a04      	ldr	r2, [pc, #16]	; (8006e64 <HAL_RCC_EnableCSS+0x1c>)
 8006e52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e56:	6013      	str	r3, [r2, #0]
}
 8006e58:	bf00      	nop
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop
 8006e64:	58024400 	.word	0x58024400

08006e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b089      	sub	sp, #36	; 0x24
 8006e6c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e6e:	4baf      	ldr	r3, [pc, #700]	; (800712c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e76:	2b18      	cmp	r3, #24
 8006e78:	f200 814e 	bhi.w	8007118 <HAL_RCC_GetSysClockFreq+0x2b0>
 8006e7c:	a201      	add	r2, pc, #4	; (adr r2, 8006e84 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e82:	bf00      	nop
 8006e84:	08006ee9 	.word	0x08006ee9
 8006e88:	08007119 	.word	0x08007119
 8006e8c:	08007119 	.word	0x08007119
 8006e90:	08007119 	.word	0x08007119
 8006e94:	08007119 	.word	0x08007119
 8006e98:	08007119 	.word	0x08007119
 8006e9c:	08007119 	.word	0x08007119
 8006ea0:	08007119 	.word	0x08007119
 8006ea4:	08006f0f 	.word	0x08006f0f
 8006ea8:	08007119 	.word	0x08007119
 8006eac:	08007119 	.word	0x08007119
 8006eb0:	08007119 	.word	0x08007119
 8006eb4:	08007119 	.word	0x08007119
 8006eb8:	08007119 	.word	0x08007119
 8006ebc:	08007119 	.word	0x08007119
 8006ec0:	08007119 	.word	0x08007119
 8006ec4:	08006f15 	.word	0x08006f15
 8006ec8:	08007119 	.word	0x08007119
 8006ecc:	08007119 	.word	0x08007119
 8006ed0:	08007119 	.word	0x08007119
 8006ed4:	08007119 	.word	0x08007119
 8006ed8:	08007119 	.word	0x08007119
 8006edc:	08007119 	.word	0x08007119
 8006ee0:	08007119 	.word	0x08007119
 8006ee4:	08006f1b 	.word	0x08006f1b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ee8:	4b90      	ldr	r3, [pc, #576]	; (800712c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 0320 	and.w	r3, r3, #32
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d009      	beq.n	8006f08 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ef4:	4b8d      	ldr	r3, [pc, #564]	; (800712c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	08db      	lsrs	r3, r3, #3
 8006efa:	f003 0303 	and.w	r3, r3, #3
 8006efe:	4a8c      	ldr	r2, [pc, #560]	; (8007130 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006f00:	fa22 f303 	lsr.w	r3, r2, r3
 8006f04:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006f06:	e10a      	b.n	800711e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006f08:	4b89      	ldr	r3, [pc, #548]	; (8007130 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006f0a:	61bb      	str	r3, [r7, #24]
    break;
 8006f0c:	e107      	b.n	800711e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006f0e:	4b89      	ldr	r3, [pc, #548]	; (8007134 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006f10:	61bb      	str	r3, [r7, #24]
    break;
 8006f12:	e104      	b.n	800711e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006f14:	4b88      	ldr	r3, [pc, #544]	; (8007138 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8006f16:	61bb      	str	r3, [r7, #24]
    break;
 8006f18:	e101      	b.n	800711e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f1a:	4b84      	ldr	r3, [pc, #528]	; (800712c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f1e:	f003 0303 	and.w	r3, r3, #3
 8006f22:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006f24:	4b81      	ldr	r3, [pc, #516]	; (800712c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f28:	091b      	lsrs	r3, r3, #4
 8006f2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f2e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006f30:	4b7e      	ldr	r3, [pc, #504]	; (800712c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f34:	f003 0301 	and.w	r3, r3, #1
 8006f38:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006f3a:	4b7c      	ldr	r3, [pc, #496]	; (800712c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f3e:	08db      	lsrs	r3, r3, #3
 8006f40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	fb02 f303 	mul.w	r3, r2, r3
 8006f4a:	ee07 3a90 	vmov	s15, r3
 8006f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f52:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f000 80da 	beq.w	8007112 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d05a      	beq.n	800701a <HAL_RCC_GetSysClockFreq+0x1b2>
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d302      	bcc.n	8006f6e <HAL_RCC_GetSysClockFreq+0x106>
 8006f68:	2b02      	cmp	r3, #2
 8006f6a:	d078      	beq.n	800705e <HAL_RCC_GetSysClockFreq+0x1f6>
 8006f6c:	e099      	b.n	80070a2 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f6e:	4b6f      	ldr	r3, [pc, #444]	; (800712c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0320 	and.w	r3, r3, #32
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d02d      	beq.n	8006fd6 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006f7a:	4b6c      	ldr	r3, [pc, #432]	; (800712c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	08db      	lsrs	r3, r3, #3
 8006f80:	f003 0303 	and.w	r3, r3, #3
 8006f84:	4a6a      	ldr	r2, [pc, #424]	; (8007130 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006f86:	fa22 f303 	lsr.w	r3, r2, r3
 8006f8a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	ee07 3a90 	vmov	s15, r3
 8006f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	ee07 3a90 	vmov	s15, r3
 8006f9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fa4:	4b61      	ldr	r3, [pc, #388]	; (800712c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fac:	ee07 3a90 	vmov	s15, r3
 8006fb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fb4:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fb8:	eddf 5a60 	vldr	s11, [pc, #384]	; 800713c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006fbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fd0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006fd4:	e087      	b.n	80070e6 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	ee07 3a90 	vmov	s15, r3
 8006fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fe0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8007140 <HAL_RCC_GetSysClockFreq+0x2d8>
 8006fe4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fe8:	4b50      	ldr	r3, [pc, #320]	; (800712c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ff0:	ee07 3a90 	vmov	s15, r3
 8006ff4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ff8:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ffc:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800713c <HAL_RCC_GetSysClockFreq+0x2d4>
 8007000:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007004:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007008:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800700c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007010:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007014:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007018:	e065      	b.n	80070e6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	ee07 3a90 	vmov	s15, r3
 8007020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007024:	eddf 6a47 	vldr	s13, [pc, #284]	; 8007144 <HAL_RCC_GetSysClockFreq+0x2dc>
 8007028:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800702c:	4b3f      	ldr	r3, [pc, #252]	; (800712c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800702e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007034:	ee07 3a90 	vmov	s15, r3
 8007038:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800703c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007040:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800713c <HAL_RCC_GetSysClockFreq+0x2d4>
 8007044:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007048:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800704c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007050:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007054:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007058:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800705c:	e043      	b.n	80070e6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	ee07 3a90 	vmov	s15, r3
 8007064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007068:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007148 <HAL_RCC_GetSysClockFreq+0x2e0>
 800706c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007070:	4b2e      	ldr	r3, [pc, #184]	; (800712c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007078:	ee07 3a90 	vmov	s15, r3
 800707c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007080:	ed97 6a02 	vldr	s12, [r7, #8]
 8007084:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800713c <HAL_RCC_GetSysClockFreq+0x2d4>
 8007088:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800708c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007090:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007094:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800709c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070a0:	e021      	b.n	80070e6 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	ee07 3a90 	vmov	s15, r3
 80070a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ac:	eddf 6a25 	vldr	s13, [pc, #148]	; 8007144 <HAL_RCC_GetSysClockFreq+0x2dc>
 80070b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070b4:	4b1d      	ldr	r3, [pc, #116]	; (800712c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80070b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070bc:	ee07 3a90 	vmov	s15, r3
 80070c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80070c8:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800713c <HAL_RCC_GetSysClockFreq+0x2d4>
 80070cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070e4:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80070e6:	4b11      	ldr	r3, [pc, #68]	; (800712c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80070e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ea:	0a5b      	lsrs	r3, r3, #9
 80070ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070f0:	3301      	adds	r3, #1
 80070f2:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	ee07 3a90 	vmov	s15, r3
 80070fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80070fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8007102:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007106:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800710a:	ee17 3a90 	vmov	r3, s15
 800710e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007110:	e005      	b.n	800711e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8007112:	2300      	movs	r3, #0
 8007114:	61bb      	str	r3, [r7, #24]
    break;
 8007116:	e002      	b.n	800711e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8007118:	4b06      	ldr	r3, [pc, #24]	; (8007134 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800711a:	61bb      	str	r3, [r7, #24]
    break;
 800711c:	bf00      	nop
  }

  return sysclockfreq;
 800711e:	69bb      	ldr	r3, [r7, #24]
}
 8007120:	4618      	mov	r0, r3
 8007122:	3724      	adds	r7, #36	; 0x24
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr
 800712c:	58024400 	.word	0x58024400
 8007130:	03d09000 	.word	0x03d09000
 8007134:	003d0900 	.word	0x003d0900
 8007138:	017d7840 	.word	0x017d7840
 800713c:	46000000 	.word	0x46000000
 8007140:	4c742400 	.word	0x4c742400
 8007144:	4a742400 	.word	0x4a742400
 8007148:	4bbebc20 	.word	0x4bbebc20

0800714c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007150:	f001 fdb0 	bl	8008cb4 <HAL_RCCEx_GetD1SysClockFreq>
 8007154:	4601      	mov	r1, r0
 8007156:	4b08      	ldr	r3, [pc, #32]	; (8007178 <HAL_RCC_GetHCLKFreq+0x2c>)
 8007158:	699b      	ldr	r3, [r3, #24]
 800715a:	f003 030f 	and.w	r3, r3, #15
 800715e:	4a07      	ldr	r2, [pc, #28]	; (800717c <HAL_RCC_GetHCLKFreq+0x30>)
 8007160:	5cd3      	ldrb	r3, [r2, r3]
 8007162:	f003 031f 	and.w	r3, r3, #31
 8007166:	fa21 f303 	lsr.w	r3, r1, r3
 800716a:	4a05      	ldr	r2, [pc, #20]	; (8007180 <HAL_RCC_GetHCLKFreq+0x34>)
 800716c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif
  return SystemD2Clock;
 800716e:	4b04      	ldr	r3, [pc, #16]	; (8007180 <HAL_RCC_GetHCLKFreq+0x34>)
 8007170:	681b      	ldr	r3, [r3, #0]
}
 8007172:	4618      	mov	r0, r3
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	58024400 	.word	0x58024400
 800717c:	080100d8 	.word	0x080100d8
 8007180:	24000004 	.word	0x24000004

08007184 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007188:	f7ff ffe0 	bl	800714c <HAL_RCC_GetHCLKFreq>
 800718c:	4601      	mov	r1, r0
 800718e:	4b06      	ldr	r3, [pc, #24]	; (80071a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007190:	69db      	ldr	r3, [r3, #28]
 8007192:	091b      	lsrs	r3, r3, #4
 8007194:	f003 0307 	and.w	r3, r3, #7
 8007198:	4a04      	ldr	r2, [pc, #16]	; (80071ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800719a:	5cd3      	ldrb	r3, [r2, r3]
 800719c:	f003 031f 	and.w	r3, r3, #31
 80071a0:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> POSITION_VAL(RCC_CDCFGR2_CDPPRE1_0)]);
#endif
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	58024400 	.word	0x58024400
 80071ac:	080100d8 	.word	0x080100d8

080071b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80071b4:	f7ff ffca 	bl	800714c <HAL_RCC_GetHCLKFreq>
 80071b8:	4601      	mov	r1, r0
 80071ba:	4b06      	ldr	r3, [pc, #24]	; (80071d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80071bc:	69db      	ldr	r3, [r3, #28]
 80071be:	0a1b      	lsrs	r3, r3, #8
 80071c0:	f003 0307 	and.w	r3, r3, #7
 80071c4:	4a04      	ldr	r2, [pc, #16]	; (80071d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80071c6:	5cd3      	ldrb	r3, [r2, r3]
 80071c8:	f003 031f 	and.w	r3, r3, #31
 80071cc:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	58024400 	.word	0x58024400
 80071d8:	080100d8 	.word	0x080100d8

080071dc <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80071e0:	4b07      	ldr	r3, [pc, #28]	; (8007200 <HAL_RCC_NMI_IRQHandler+0x24>)
 80071e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071ec:	d105      	bne.n	80071fa <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 80071ee:	f000 f809 	bl	8007204 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80071f2:	4b03      	ldr	r3, [pc, #12]	; (8007200 <HAL_RCC_NMI_IRQHandler+0x24>)
 80071f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80071f8:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 80071fa:	bf00      	nop
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	58024400 	.word	0x58024400

08007204 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 8007204:	b480      	push	{r7}
 8007206:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 8007208:	bf00      	nop
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
	...

08007214 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b086      	sub	sp, #24
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800721c:	2300      	movs	r3, #0
 800721e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007220:	2300      	movs	r3, #0
 8007222:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800722c:	2b00      	cmp	r3, #0
 800722e:	d03d      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007234:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007238:	d013      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800723a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800723e:	d802      	bhi.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007240:	2b00      	cmp	r3, #0
 8007242:	d007      	beq.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8007244:	e01f      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007246:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800724a:	d013      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800724c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007250:	d01c      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8007252:	e018      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007254:	4baf      	ldr	r3, [pc, #700]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007258:	4aae      	ldr	r2, [pc, #696]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800725a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800725e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007260:	e015      	b.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	3304      	adds	r3, #4
 8007266:	2102      	movs	r1, #2
 8007268:	4618      	mov	r0, r3
 800726a:	f001 fd3f 	bl	8008cec <RCCEx_PLL2_Config>
 800726e:	4603      	mov	r3, r0
 8007270:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007272:	e00c      	b.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	3324      	adds	r3, #36	; 0x24
 8007278:	2102      	movs	r1, #2
 800727a:	4618      	mov	r0, r3
 800727c:	f001 fde8 	bl	8008e50 <RCCEx_PLL3_Config>
 8007280:	4603      	mov	r3, r0
 8007282:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007284:	e003      	b.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	75fb      	strb	r3, [r7, #23]
      break;
 800728a:	e000      	b.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800728c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800728e:	7dfb      	ldrb	r3, [r7, #23]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d109      	bne.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007294:	4b9f      	ldr	r3, [pc, #636]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007298:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072a0:	499c      	ldr	r1, [pc, #624]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80072a2:	4313      	orrs	r3, r2
 80072a4:	650b      	str	r3, [r1, #80]	; 0x50
 80072a6:	e001      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072a8:	7dfb      	ldrb	r3, [r7, #23]
 80072aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d03d      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072bc:	2b04      	cmp	r3, #4
 80072be:	d826      	bhi.n	800730e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80072c0:	a201      	add	r2, pc, #4	; (adr r2, 80072c8 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80072c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c6:	bf00      	nop
 80072c8:	080072dd 	.word	0x080072dd
 80072cc:	080072eb 	.word	0x080072eb
 80072d0:	080072fd 	.word	0x080072fd
 80072d4:	08007315 	.word	0x08007315
 80072d8:	08007315 	.word	0x08007315
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072dc:	4b8d      	ldr	r3, [pc, #564]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80072de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e0:	4a8c      	ldr	r2, [pc, #560]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80072e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80072e8:	e015      	b.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	3304      	adds	r3, #4
 80072ee:	2100      	movs	r1, #0
 80072f0:	4618      	mov	r0, r3
 80072f2:	f001 fcfb 	bl	8008cec <RCCEx_PLL2_Config>
 80072f6:	4603      	mov	r3, r0
 80072f8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80072fa:	e00c      	b.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	3324      	adds	r3, #36	; 0x24
 8007300:	2100      	movs	r1, #0
 8007302:	4618      	mov	r0, r3
 8007304:	f001 fda4 	bl	8008e50 <RCCEx_PLL3_Config>
 8007308:	4603      	mov	r3, r0
 800730a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800730c:	e003      	b.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	75fb      	strb	r3, [r7, #23]
      break;
 8007312:	e000      	b.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8007314:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007316:	7dfb      	ldrb	r3, [r7, #23]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d109      	bne.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800731c:	4b7d      	ldr	r3, [pc, #500]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800731e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007320:	f023 0207 	bic.w	r2, r3, #7
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007328:	497a      	ldr	r1, [pc, #488]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800732a:	4313      	orrs	r3, r2
 800732c:	650b      	str	r3, [r1, #80]	; 0x50
 800732e:	e001      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007330:	7dfb      	ldrb	r3, [r7, #23]
 8007332:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800733c:	2b00      	cmp	r3, #0
 800733e:	d03e      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007344:	2b80      	cmp	r3, #128	; 0x80
 8007346:	d01c      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8007348:	2b80      	cmp	r3, #128	; 0x80
 800734a:	d804      	bhi.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800734c:	2b00      	cmp	r3, #0
 800734e:	d008      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007350:	2b40      	cmp	r3, #64	; 0x40
 8007352:	d00d      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007354:	e01e      	b.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007356:	2bc0      	cmp	r3, #192	; 0xc0
 8007358:	d01f      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x186>
 800735a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800735e:	d01e      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007360:	e018      	b.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007362:	4b6c      	ldr	r3, [pc, #432]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007366:	4a6b      	ldr	r2, [pc, #428]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800736c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800736e:	e017      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	3304      	adds	r3, #4
 8007374:	2100      	movs	r1, #0
 8007376:	4618      	mov	r0, r3
 8007378:	f001 fcb8 	bl	8008cec <RCCEx_PLL2_Config>
 800737c:	4603      	mov	r3, r0
 800737e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007380:	e00e      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	3324      	adds	r3, #36	; 0x24
 8007386:	2100      	movs	r1, #0
 8007388:	4618      	mov	r0, r3
 800738a:	f001 fd61 	bl	8008e50 <RCCEx_PLL3_Config>
 800738e:	4603      	mov	r3, r0
 8007390:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007392:	e005      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	75fb      	strb	r3, [r7, #23]
      break;
 8007398:	e002      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800739a:	bf00      	nop
 800739c:	e000      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800739e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073a0:	7dfb      	ldrb	r3, [r7, #23]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d109      	bne.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80073a6:	4b5b      	ldr	r3, [pc, #364]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80073a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073aa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073b2:	4958      	ldr	r1, [pc, #352]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80073b4:	4313      	orrs	r3, r2
 80073b6:	650b      	str	r3, [r1, #80]	; 0x50
 80073b8:	e001      	b.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ba:	7dfb      	ldrb	r3, [r7, #23]
 80073bc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d044      	beq.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80073d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073d4:	d01f      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80073d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073da:	d805      	bhi.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00a      	beq.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80073e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073e4:	d00e      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80073e6:	e01f      	b.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80073e8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80073ec:	d01f      	beq.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80073ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80073f2:	d01e      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80073f4:	e018      	b.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073f6:	4b47      	ldr	r3, [pc, #284]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80073f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fa:	4a46      	ldr	r2, [pc, #280]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80073fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007400:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007402:	e017      	b.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	3304      	adds	r3, #4
 8007408:	2100      	movs	r1, #0
 800740a:	4618      	mov	r0, r3
 800740c:	f001 fc6e 	bl	8008cec <RCCEx_PLL2_Config>
 8007410:	4603      	mov	r3, r0
 8007412:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007414:	e00e      	b.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	3324      	adds	r3, #36	; 0x24
 800741a:	2100      	movs	r1, #0
 800741c:	4618      	mov	r0, r3
 800741e:	f001 fd17 	bl	8008e50 <RCCEx_PLL3_Config>
 8007422:	4603      	mov	r3, r0
 8007424:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007426:	e005      	b.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	75fb      	strb	r3, [r7, #23]
      break;
 800742c:	e002      	b.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800742e:	bf00      	nop
 8007430:	e000      	b.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8007432:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007434:	7dfb      	ldrb	r3, [r7, #23]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d10a      	bne.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800743a:	4b36      	ldr	r3, [pc, #216]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800743c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800743e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007448:	4932      	ldr	r1, [pc, #200]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800744a:	4313      	orrs	r3, r2
 800744c:	658b      	str	r3, [r1, #88]	; 0x58
 800744e:	e001      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007450:	7dfb      	ldrb	r3, [r7, #23]
 8007452:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800745c:	2b00      	cmp	r3, #0
 800745e:	d044      	beq.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007466:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800746a:	d01f      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x298>
 800746c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007470:	d805      	bhi.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00a      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8007476:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800747a:	d00e      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800747c:	e01f      	b.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800747e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007482:	d01f      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007484:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007488:	d01e      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800748a:	e018      	b.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800748c:	4b21      	ldr	r3, [pc, #132]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800748e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007490:	4a20      	ldr	r2, [pc, #128]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007492:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007496:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007498:	e017      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	3304      	adds	r3, #4
 800749e:	2100      	movs	r1, #0
 80074a0:	4618      	mov	r0, r3
 80074a2:	f001 fc23 	bl	8008cec <RCCEx_PLL2_Config>
 80074a6:	4603      	mov	r3, r0
 80074a8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80074aa:	e00e      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	3324      	adds	r3, #36	; 0x24
 80074b0:	2100      	movs	r1, #0
 80074b2:	4618      	mov	r0, r3
 80074b4:	f001 fccc 	bl	8008e50 <RCCEx_PLL3_Config>
 80074b8:	4603      	mov	r3, r0
 80074ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80074bc:	e005      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	75fb      	strb	r3, [r7, #23]
      break;
 80074c2:	e002      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80074c4:	bf00      	nop
 80074c6:	e000      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80074c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074ca:	7dfb      	ldrb	r3, [r7, #23]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10a      	bne.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80074d0:	4b10      	ldr	r3, [pc, #64]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80074d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074d4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80074de:	490d      	ldr	r1, [pc, #52]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80074e0:	4313      	orrs	r3, r2
 80074e2:	658b      	str	r3, [r1, #88]	; 0x58
 80074e4:	e001      	b.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074e6:	7dfb      	ldrb	r3, [r7, #23]
 80074e8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d035      	beq.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074fa:	2b10      	cmp	r3, #16
 80074fc:	d00c      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80074fe:	2b10      	cmp	r3, #16
 8007500:	d802      	bhi.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8007502:	2b00      	cmp	r3, #0
 8007504:	d01b      	beq.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8007506:	e017      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007508:	2b20      	cmp	r3, #32
 800750a:	d00c      	beq.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800750c:	2b30      	cmp	r3, #48	; 0x30
 800750e:	d018      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8007510:	e012      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007512:	bf00      	nop
 8007514:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007518:	4baf      	ldr	r3, [pc, #700]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800751a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800751c:	4aae      	ldr	r2, [pc, #696]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800751e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007522:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007524:	e00e      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	3304      	adds	r3, #4
 800752a:	2102      	movs	r1, #2
 800752c:	4618      	mov	r0, r3
 800752e:	f001 fbdd 	bl	8008cec <RCCEx_PLL2_Config>
 8007532:	4603      	mov	r3, r0
 8007534:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007536:	e005      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	75fb      	strb	r3, [r7, #23]
      break;
 800753c:	e002      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800753e:	bf00      	nop
 8007540:	e000      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8007542:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007544:	7dfb      	ldrb	r3, [r7, #23]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d109      	bne.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800754a:	4ba3      	ldr	r3, [pc, #652]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800754c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800754e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007556:	49a0      	ldr	r1, [pc, #640]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007558:	4313      	orrs	r3, r2
 800755a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800755c:	e001      	b.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800755e:	7dfb      	ldrb	r3, [r7, #23]
 8007560:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800756a:	2b00      	cmp	r3, #0
 800756c:	d042      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007572:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007576:	d01f      	beq.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8007578:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800757c:	d805      	bhi.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00a      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8007582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007586:	d00e      	beq.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8007588:	e01f      	b.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800758a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800758e:	d01f      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007590:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007594:	d01e      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8007596:	e018      	b.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007598:	4b8f      	ldr	r3, [pc, #572]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800759a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759c:	4a8e      	ldr	r2, [pc, #568]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800759e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80075a4:	e017      	b.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	3304      	adds	r3, #4
 80075aa:	2100      	movs	r1, #0
 80075ac:	4618      	mov	r0, r3
 80075ae:	f001 fb9d 	bl	8008cec <RCCEx_PLL2_Config>
 80075b2:	4603      	mov	r3, r0
 80075b4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80075b6:	e00e      	b.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	3324      	adds	r3, #36	; 0x24
 80075bc:	2100      	movs	r1, #0
 80075be:	4618      	mov	r0, r3
 80075c0:	f001 fc46 	bl	8008e50 <RCCEx_PLL3_Config>
 80075c4:	4603      	mov	r3, r0
 80075c6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80075c8:	e005      	b.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	75fb      	strb	r3, [r7, #23]
      break;
 80075ce:	e002      	b.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80075d0:	bf00      	nop
 80075d2:	e000      	b.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80075d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075d6:	7dfb      	ldrb	r3, [r7, #23]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d109      	bne.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80075dc:	4b7e      	ldr	r3, [pc, #504]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80075de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075e0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075e8:	497b      	ldr	r1, [pc, #492]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80075ea:	4313      	orrs	r3, r2
 80075ec:	650b      	str	r3, [r1, #80]	; 0x50
 80075ee:	e001      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075f0:	7dfb      	ldrb	r3, [r7, #23]
 80075f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d042      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007604:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007608:	d01b      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800760a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800760e:	d805      	bhi.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007610:	2b00      	cmp	r3, #0
 8007612:	d022      	beq.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x446>
 8007614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007618:	d00a      	beq.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800761a:	e01b      	b.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800761c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007620:	d01d      	beq.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8007622:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007626:	d01c      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8007628:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800762c:	d01b      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800762e:	e011      	b.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	3304      	adds	r3, #4
 8007634:	2101      	movs	r1, #1
 8007636:	4618      	mov	r0, r3
 8007638:	f001 fb58 	bl	8008cec <RCCEx_PLL2_Config>
 800763c:	4603      	mov	r3, r0
 800763e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007640:	e012      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	3324      	adds	r3, #36	; 0x24
 8007646:	2101      	movs	r1, #1
 8007648:	4618      	mov	r0, r3
 800764a:	f001 fc01 	bl	8008e50 <RCCEx_PLL3_Config>
 800764e:	4603      	mov	r3, r0
 8007650:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007652:	e009      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	75fb      	strb	r3, [r7, #23]
      break;
 8007658:	e006      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800765a:	bf00      	nop
 800765c:	e004      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800765e:	bf00      	nop
 8007660:	e002      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007662:	bf00      	nop
 8007664:	e000      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007666:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007668:	7dfb      	ldrb	r3, [r7, #23]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d109      	bne.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800766e:	4b5a      	ldr	r3, [pc, #360]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007672:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800767a:	4957      	ldr	r1, [pc, #348]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800767c:	4313      	orrs	r3, r2
 800767e:	650b      	str	r3, [r1, #80]	; 0x50
 8007680:	e001      	b.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007682:	7dfb      	ldrb	r3, [r7, #23]
 8007684:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800768e:	2b00      	cmp	r3, #0
 8007690:	d044      	beq.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007698:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800769c:	d01b      	beq.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800769e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076a2:	d805      	bhi.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d022      	beq.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80076a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076ac:	d00a      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80076ae:	e01b      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80076b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076b4:	d01d      	beq.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80076b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80076ba:	d01c      	beq.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80076bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80076c0:	d01b      	beq.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80076c2:	e011      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	3304      	adds	r3, #4
 80076c8:	2101      	movs	r1, #1
 80076ca:	4618      	mov	r0, r3
 80076cc:	f001 fb0e 	bl	8008cec <RCCEx_PLL2_Config>
 80076d0:	4603      	mov	r3, r0
 80076d2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80076d4:	e012      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	3324      	adds	r3, #36	; 0x24
 80076da:	2101      	movs	r1, #1
 80076dc:	4618      	mov	r0, r3
 80076de:	f001 fbb7 	bl	8008e50 <RCCEx_PLL3_Config>
 80076e2:	4603      	mov	r3, r0
 80076e4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80076e6:	e009      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	75fb      	strb	r3, [r7, #23]
      break;
 80076ec:	e006      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80076ee:	bf00      	nop
 80076f0:	e004      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80076f2:	bf00      	nop
 80076f4:	e002      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80076f6:	bf00      	nop
 80076f8:	e000      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80076fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076fc:	7dfb      	ldrb	r3, [r7, #23]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d10a      	bne.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007702:	4b35      	ldr	r3, [pc, #212]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007706:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007710:	4931      	ldr	r1, [pc, #196]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007712:	4313      	orrs	r3, r2
 8007714:	658b      	str	r3, [r1, #88]	; 0x58
 8007716:	e001      	b.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007718:	7dfb      	ldrb	r3, [r7, #23]
 800771a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007724:	2b00      	cmp	r3, #0
 8007726:	d02d      	beq.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800772c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007730:	d005      	beq.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007732:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007736:	d009      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x538>
 8007738:	2b00      	cmp	r3, #0
 800773a:	d013      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800773c:	e00f      	b.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800773e:	4b26      	ldr	r3, [pc, #152]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007742:	4a25      	ldr	r2, [pc, #148]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007748:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800774a:	e00c      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	3304      	adds	r3, #4
 8007750:	2101      	movs	r1, #1
 8007752:	4618      	mov	r0, r3
 8007754:	f001 faca 	bl	8008cec <RCCEx_PLL2_Config>
 8007758:	4603      	mov	r3, r0
 800775a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800775c:	e003      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	75fb      	strb	r3, [r7, #23]
      break;
 8007762:	e000      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8007764:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007766:	7dfb      	ldrb	r3, [r7, #23]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d109      	bne.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800776c:	4b1a      	ldr	r3, [pc, #104]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800776e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007770:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007778:	4917      	ldr	r1, [pc, #92]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800777a:	4313      	orrs	r3, r2
 800777c:	650b      	str	r3, [r1, #80]	; 0x50
 800777e:	e001      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007780:	7dfb      	ldrb	r3, [r7, #23]
 8007782:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800778c:	2b00      	cmp	r3, #0
 800778e:	d035      	beq.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007794:	2b03      	cmp	r3, #3
 8007796:	d81b      	bhi.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007798:	a201      	add	r2, pc, #4	; (adr r2, 80077a0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800779a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800779e:	bf00      	nop
 80077a0:	080077dd 	.word	0x080077dd
 80077a4:	080077b1 	.word	0x080077b1
 80077a8:	080077bf 	.word	0x080077bf
 80077ac:	080077dd 	.word	0x080077dd
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077b0:	4b09      	ldr	r3, [pc, #36]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80077b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b4:	4a08      	ldr	r2, [pc, #32]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80077b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80077bc:	e00f      	b.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	3304      	adds	r3, #4
 80077c2:	2102      	movs	r1, #2
 80077c4:	4618      	mov	r0, r3
 80077c6:	f001 fa91 	bl	8008cec <RCCEx_PLL2_Config>
 80077ca:	4603      	mov	r3, r0
 80077cc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80077ce:	e006      	b.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	75fb      	strb	r3, [r7, #23]
      break;
 80077d4:	e003      	b.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80077d6:	bf00      	nop
 80077d8:	58024400 	.word	0x58024400
      break;
 80077dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077de:	7dfb      	ldrb	r3, [r7, #23]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d109      	bne.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80077e4:	4bba      	ldr	r3, [pc, #744]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80077e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077e8:	f023 0203 	bic.w	r2, r3, #3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077f0:	49b7      	ldr	r1, [pc, #732]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80077f2:	4313      	orrs	r3, r2
 80077f4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80077f6:	e001      	b.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077f8:	7dfb      	ldrb	r3, [r7, #23]
 80077fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007804:	2b00      	cmp	r3, #0
 8007806:	f000 8086 	beq.w	8007916 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800780a:	4bb2      	ldr	r3, [pc, #712]	; (8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4ab1      	ldr	r2, [pc, #708]	; (8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007814:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007816:	f7fa fa43 	bl	8001ca0 <HAL_GetTick>
 800781a:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800781c:	e009      	b.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800781e:	f7fa fa3f 	bl	8001ca0 <HAL_GetTick>
 8007822:	4602      	mov	r2, r0
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	1ad3      	subs	r3, r2, r3
 8007828:	2b64      	cmp	r3, #100	; 0x64
 800782a:	d902      	bls.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 800782c:	2303      	movs	r3, #3
 800782e:	75fb      	strb	r3, [r7, #23]
        break;
 8007830:	e005      	b.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007832:	4ba8      	ldr	r3, [pc, #672]	; (8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800783a:	2b00      	cmp	r3, #0
 800783c:	d0ef      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800783e:	7dfb      	ldrb	r3, [r7, #23]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d166      	bne.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007844:	4ba2      	ldr	r3, [pc, #648]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007846:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800784e:	4053      	eors	r3, r2
 8007850:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007854:	2b00      	cmp	r3, #0
 8007856:	d013      	beq.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007858:	4b9d      	ldr	r3, [pc, #628]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800785a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800785c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007860:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007862:	4b9b      	ldr	r3, [pc, #620]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007866:	4a9a      	ldr	r2, [pc, #616]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800786c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800786e:	4b98      	ldr	r3, [pc, #608]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007872:	4a97      	ldr	r2, [pc, #604]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007874:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007878:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800787a:	4a95      	ldr	r2, [pc, #596]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007886:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800788a:	d115      	bne.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800788c:	f7fa fa08 	bl	8001ca0 <HAL_GetTick>
 8007890:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007892:	e00b      	b.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007894:	f7fa fa04 	bl	8001ca0 <HAL_GetTick>
 8007898:	4602      	mov	r2, r0
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	f241 3288 	movw	r2, #5000	; 0x1388
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d902      	bls.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80078a6:	2303      	movs	r3, #3
 80078a8:	75fb      	strb	r3, [r7, #23]
            break;
 80078aa:	e005      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80078ac:	4b88      	ldr	r3, [pc, #544]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80078ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078b0:	f003 0302 	and.w	r3, r3, #2
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d0ed      	beq.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80078b8:	7dfb      	ldrb	r3, [r7, #23]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d126      	bne.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80078c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078cc:	d10d      	bne.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80078ce:	4b80      	ldr	r3, [pc, #512]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80078dc:	0919      	lsrs	r1, r3, #4
 80078de:	4b7e      	ldr	r3, [pc, #504]	; (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80078e0:	400b      	ands	r3, r1
 80078e2:	497b      	ldr	r1, [pc, #492]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80078e4:	4313      	orrs	r3, r2
 80078e6:	610b      	str	r3, [r1, #16]
 80078e8:	e005      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80078ea:	4b79      	ldr	r3, [pc, #484]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	4a78      	ldr	r2, [pc, #480]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80078f0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80078f4:	6113      	str	r3, [r2, #16]
 80078f6:	4b76      	ldr	r3, [pc, #472]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80078f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007904:	4972      	ldr	r1, [pc, #456]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007906:	4313      	orrs	r3, r2
 8007908:	670b      	str	r3, [r1, #112]	; 0x70
 800790a:	e004      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800790c:	7dfb      	ldrb	r3, [r7, #23]
 800790e:	75bb      	strb	r3, [r7, #22]
 8007910:	e001      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007912:	7dfb      	ldrb	r3, [r7, #23]
 8007914:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 0301 	and.w	r3, r3, #1
 800791e:	2b00      	cmp	r3, #0
 8007920:	d07d      	beq.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007926:	2b28      	cmp	r3, #40	; 0x28
 8007928:	d866      	bhi.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800792a:	a201      	add	r2, pc, #4	; (adr r2, 8007930 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800792c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007930:	080079ff 	.word	0x080079ff
 8007934:	080079f9 	.word	0x080079f9
 8007938:	080079f9 	.word	0x080079f9
 800793c:	080079f9 	.word	0x080079f9
 8007940:	080079f9 	.word	0x080079f9
 8007944:	080079f9 	.word	0x080079f9
 8007948:	080079f9 	.word	0x080079f9
 800794c:	080079f9 	.word	0x080079f9
 8007950:	080079d5 	.word	0x080079d5
 8007954:	080079f9 	.word	0x080079f9
 8007958:	080079f9 	.word	0x080079f9
 800795c:	080079f9 	.word	0x080079f9
 8007960:	080079f9 	.word	0x080079f9
 8007964:	080079f9 	.word	0x080079f9
 8007968:	080079f9 	.word	0x080079f9
 800796c:	080079f9 	.word	0x080079f9
 8007970:	080079e7 	.word	0x080079e7
 8007974:	080079f9 	.word	0x080079f9
 8007978:	080079f9 	.word	0x080079f9
 800797c:	080079f9 	.word	0x080079f9
 8007980:	080079f9 	.word	0x080079f9
 8007984:	080079f9 	.word	0x080079f9
 8007988:	080079f9 	.word	0x080079f9
 800798c:	080079f9 	.word	0x080079f9
 8007990:	080079ff 	.word	0x080079ff
 8007994:	080079f9 	.word	0x080079f9
 8007998:	080079f9 	.word	0x080079f9
 800799c:	080079f9 	.word	0x080079f9
 80079a0:	080079f9 	.word	0x080079f9
 80079a4:	080079f9 	.word	0x080079f9
 80079a8:	080079f9 	.word	0x080079f9
 80079ac:	080079f9 	.word	0x080079f9
 80079b0:	080079ff 	.word	0x080079ff
 80079b4:	080079f9 	.word	0x080079f9
 80079b8:	080079f9 	.word	0x080079f9
 80079bc:	080079f9 	.word	0x080079f9
 80079c0:	080079f9 	.word	0x080079f9
 80079c4:	080079f9 	.word	0x080079f9
 80079c8:	080079f9 	.word	0x080079f9
 80079cc:	080079f9 	.word	0x080079f9
 80079d0:	080079ff 	.word	0x080079ff
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	3304      	adds	r3, #4
 80079d8:	2101      	movs	r1, #1
 80079da:	4618      	mov	r0, r3
 80079dc:	f001 f986 	bl	8008cec <RCCEx_PLL2_Config>
 80079e0:	4603      	mov	r3, r0
 80079e2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80079e4:	e00c      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	3324      	adds	r3, #36	; 0x24
 80079ea:	2101      	movs	r1, #1
 80079ec:	4618      	mov	r0, r3
 80079ee:	f001 fa2f 	bl	8008e50 <RCCEx_PLL3_Config>
 80079f2:	4603      	mov	r3, r0
 80079f4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80079f6:	e003      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	75fb      	strb	r3, [r7, #23]
      break;
 80079fc:	e000      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80079fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a00:	7dfb      	ldrb	r3, [r7, #23]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d109      	bne.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007a06:	4b32      	ldr	r3, [pc, #200]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a0a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a12:	492f      	ldr	r1, [pc, #188]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a14:	4313      	orrs	r3, r2
 8007a16:	654b      	str	r3, [r1, #84]	; 0x54
 8007a18:	e001      	b.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a1a:	7dfb      	ldrb	r3, [r7, #23]
 8007a1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 0302 	and.w	r3, r3, #2
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d037      	beq.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a2e:	2b05      	cmp	r3, #5
 8007a30:	d820      	bhi.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8007a32:	a201      	add	r2, pc, #4	; (adr r2, 8007a38 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a38:	08007a7b 	.word	0x08007a7b
 8007a3c:	08007a51 	.word	0x08007a51
 8007a40:	08007a63 	.word	0x08007a63
 8007a44:	08007a7b 	.word	0x08007a7b
 8007a48:	08007a7b 	.word	0x08007a7b
 8007a4c:	08007a7b 	.word	0x08007a7b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	3304      	adds	r3, #4
 8007a54:	2101      	movs	r1, #1
 8007a56:	4618      	mov	r0, r3
 8007a58:	f001 f948 	bl	8008cec <RCCEx_PLL2_Config>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007a60:	e00c      	b.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	3324      	adds	r3, #36	; 0x24
 8007a66:	2101      	movs	r1, #1
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f001 f9f1 	bl	8008e50 <RCCEx_PLL3_Config>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007a72:	e003      	b.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	75fb      	strb	r3, [r7, #23]
      break;
 8007a78:	e000      	b.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8007a7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a7c:	7dfb      	ldrb	r3, [r7, #23]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d109      	bne.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007a82:	4b13      	ldr	r3, [pc, #76]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a86:	f023 0207 	bic.w	r2, r3, #7
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a8e:	4910      	ldr	r1, [pc, #64]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a90:	4313      	orrs	r3, r2
 8007a92:	654b      	str	r3, [r1, #84]	; 0x54
 8007a94:	e001      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a96:	7dfb      	ldrb	r3, [r7, #23]
 8007a98:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f003 0304 	and.w	r3, r3, #4
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d040      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aac:	2b05      	cmp	r3, #5
 8007aae:	d827      	bhi.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8007ab0:	a201      	add	r2, pc, #4	; (adr r2, 8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8007ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab6:	bf00      	nop
 8007ab8:	08007b07 	.word	0x08007b07
 8007abc:	08007add 	.word	0x08007add
 8007ac0:	08007aef 	.word	0x08007aef
 8007ac4:	08007b07 	.word	0x08007b07
 8007ac8:	08007b07 	.word	0x08007b07
 8007acc:	08007b07 	.word	0x08007b07
 8007ad0:	58024400 	.word	0x58024400
 8007ad4:	58024800 	.word	0x58024800
 8007ad8:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	3304      	adds	r3, #4
 8007ae0:	2101      	movs	r1, #1
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f001 f902 	bl	8008cec <RCCEx_PLL2_Config>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007aec:	e00c      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	3324      	adds	r3, #36	; 0x24
 8007af2:	2101      	movs	r1, #1
 8007af4:	4618      	mov	r0, r3
 8007af6:	f001 f9ab 	bl	8008e50 <RCCEx_PLL3_Config>
 8007afa:	4603      	mov	r3, r0
 8007afc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007afe:	e003      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	75fb      	strb	r3, [r7, #23]
      break;
 8007b04:	e000      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8007b06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b08:	7dfb      	ldrb	r3, [r7, #23]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d10a      	bne.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007b0e:	4bb2      	ldr	r3, [pc, #712]	; (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b12:	f023 0207 	bic.w	r2, r3, #7
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b1c:	49ae      	ldr	r1, [pc, #696]	; (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	658b      	str	r3, [r1, #88]	; 0x58
 8007b22:	e001      	b.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b24:	7dfb      	ldrb	r3, [r7, #23]
 8007b26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f003 0320 	and.w	r3, r3, #32
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d044      	beq.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b3e:	d01b      	beq.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8007b40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b44:	d805      	bhi.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d022      	beq.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8007b4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b4e:	d00a      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8007b50:	e01b      	b.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8007b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b56:	d01d      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8007b58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b5c:	d01c      	beq.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8007b5e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007b62:	d01b      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8007b64:	e011      	b.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	3304      	adds	r3, #4
 8007b6a:	2100      	movs	r1, #0
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f001 f8bd 	bl	8008cec <RCCEx_PLL2_Config>
 8007b72:	4603      	mov	r3, r0
 8007b74:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007b76:	e012      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	3324      	adds	r3, #36	; 0x24
 8007b7c:	2102      	movs	r1, #2
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f001 f966 	bl	8008e50 <RCCEx_PLL3_Config>
 8007b84:	4603      	mov	r3, r0
 8007b86:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007b88:	e009      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	75fb      	strb	r3, [r7, #23]
      break;
 8007b8e:	e006      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007b90:	bf00      	nop
 8007b92:	e004      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007b94:	bf00      	nop
 8007b96:	e002      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007b98:	bf00      	nop
 8007b9a:	e000      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007b9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d10a      	bne.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007ba4:	4b8c      	ldr	r3, [pc, #560]	; (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ba8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bb2:	4989      	ldr	r1, [pc, #548]	; (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	654b      	str	r3, [r1, #84]	; 0x54
 8007bb8:	e001      	b.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bba:	7dfb      	ldrb	r3, [r7, #23]
 8007bbc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d044      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007bd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bd4:	d01b      	beq.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8007bd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bda:	d805      	bhi.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d022      	beq.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007be4:	d00a      	beq.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8007be6:	e01b      	b.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8007be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bec:	d01d      	beq.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007bee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007bf2:	d01c      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8007bf4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007bf8:	d01b      	beq.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8007bfa:	e011      	b.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	3304      	adds	r3, #4
 8007c00:	2100      	movs	r1, #0
 8007c02:	4618      	mov	r0, r3
 8007c04:	f001 f872 	bl	8008cec <RCCEx_PLL2_Config>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007c0c:	e012      	b.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	3324      	adds	r3, #36	; 0x24
 8007c12:	2102      	movs	r1, #2
 8007c14:	4618      	mov	r0, r3
 8007c16:	f001 f91b 	bl	8008e50 <RCCEx_PLL3_Config>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007c1e:	e009      	b.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	75fb      	strb	r3, [r7, #23]
      break;
 8007c24:	e006      	b.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007c26:	bf00      	nop
 8007c28:	e004      	b.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007c2a:	bf00      	nop
 8007c2c:	e002      	b.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007c2e:	bf00      	nop
 8007c30:	e000      	b.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007c32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c34:	7dfb      	ldrb	r3, [r7, #23]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d10a      	bne.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007c3a:	4b67      	ldr	r3, [pc, #412]	; (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c3e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c48:	4963      	ldr	r1, [pc, #396]	; (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	658b      	str	r3, [r1, #88]	; 0x58
 8007c4e:	e001      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c50:	7dfb      	ldrb	r3, [r7, #23]
 8007c52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d044      	beq.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c6a:	d01b      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8007c6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c70:	d805      	bhi.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d022      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007c76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c7a:	d00a      	beq.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007c7c:	e01b      	b.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8007c7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c82:	d01d      	beq.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007c84:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007c88:	d01c      	beq.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8007c8a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007c8e:	d01b      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8007c90:	e011      	b.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	3304      	adds	r3, #4
 8007c96:	2100      	movs	r1, #0
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f001 f827 	bl	8008cec <RCCEx_PLL2_Config>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007ca2:	e012      	b.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	3324      	adds	r3, #36	; 0x24
 8007ca8:	2102      	movs	r1, #2
 8007caa:	4618      	mov	r0, r3
 8007cac:	f001 f8d0 	bl	8008e50 <RCCEx_PLL3_Config>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007cb4:	e009      	b.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	75fb      	strb	r3, [r7, #23]
      break;
 8007cba:	e006      	b.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007cbc:	bf00      	nop
 8007cbe:	e004      	b.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007cc0:	bf00      	nop
 8007cc2:	e002      	b.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007cc4:	bf00      	nop
 8007cc6:	e000      	b.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007cc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cca:	7dfb      	ldrb	r3, [r7, #23]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d10a      	bne.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007cd0:	4b41      	ldr	r3, [pc, #260]	; (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cd4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007cde:	493e      	ldr	r1, [pc, #248]	; (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	658b      	str	r3, [r1, #88]	; 0x58
 8007ce4:	e001      	b.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ce6:	7dfb      	ldrb	r3, [r7, #23]
 8007ce8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f003 0308 	and.w	r3, r3, #8
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d01a      	beq.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d00:	d10a      	bne.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	3324      	adds	r3, #36	; 0x24
 8007d06:	2102      	movs	r1, #2
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f001 f8a1 	bl	8008e50 <RCCEx_PLL3_Config>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d001      	beq.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007d18:	4b2f      	ldr	r3, [pc, #188]	; (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d1c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d26:	492c      	ldr	r1, [pc, #176]	; (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f003 0310 	and.w	r3, r3, #16
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d01a      	beq.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d42:	d10a      	bne.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	3324      	adds	r3, #36	; 0x24
 8007d48:	2102      	movs	r1, #2
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f001 f880 	bl	8008e50 <RCCEx_PLL3_Config>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d001      	beq.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007d5a:	4b1f      	ldr	r3, [pc, #124]	; (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d68:	491b      	ldr	r1, [pc, #108]	; (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d032      	beq.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d84:	d00d      	beq.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8007d86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d8a:	d016      	beq.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d111      	bne.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	3304      	adds	r3, #4
 8007d94:	2100      	movs	r1, #0
 8007d96:	4618      	mov	r0, r3
 8007d98:	f000 ffa8 	bl	8008cec <RCCEx_PLL2_Config>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007da0:	e00c      	b.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	3324      	adds	r3, #36	; 0x24
 8007da6:	2102      	movs	r1, #2
 8007da8:	4618      	mov	r0, r3
 8007daa:	f001 f851 	bl	8008e50 <RCCEx_PLL3_Config>
 8007dae:	4603      	mov	r3, r0
 8007db0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007db2:	e003      	b.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	75fb      	strb	r3, [r7, #23]
      break;
 8007db8:	e000      	b.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8007dba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dbc:	7dfb      	ldrb	r3, [r7, #23]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d10c      	bne.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007dc2:	4b05      	ldr	r3, [pc, #20]	; (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dc6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007dd0:	4901      	ldr	r1, [pc, #4]	; (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	658b      	str	r3, [r1, #88]	; 0x58
 8007dd6:	e003      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8007dd8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ddc:	7dfb      	ldrb	r3, [r7, #23]
 8007dde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d02f      	beq.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007df2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007df6:	d00c      	beq.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007df8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007dfc:	d015      	beq.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8007dfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e02:	d10f      	bne.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e04:	4b71      	ldr	r3, [pc, #452]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e08:	4a70      	ldr	r2, [pc, #448]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007e0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007e10:	e00c      	b.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	3324      	adds	r3, #36	; 0x24
 8007e16:	2101      	movs	r1, #1
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f001 f819 	bl	8008e50 <RCCEx_PLL3_Config>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007e22:	e003      	b.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e24:	2301      	movs	r3, #1
 8007e26:	75fb      	strb	r3, [r7, #23]
      break;
 8007e28:	e000      	b.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8007e2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e2c:	7dfb      	ldrb	r3, [r7, #23]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d10a      	bne.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007e32:	4b66      	ldr	r3, [pc, #408]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e40:	4962      	ldr	r1, [pc, #392]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007e42:	4313      	orrs	r3, r2
 8007e44:	654b      	str	r3, [r1, #84]	; 0x54
 8007e46:	e001      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e48:	7dfb      	ldrb	r3, [r7, #23]
 8007e4a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d029      	beq.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d003      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8007e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e64:	d007      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8007e66:	e00f      	b.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e68:	4b58      	ldr	r3, [pc, #352]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e6c:	4a57      	ldr	r2, [pc, #348]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007e6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007e74:	e00b      	b.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	3304      	adds	r3, #4
 8007e7a:	2102      	movs	r1, #2
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f000 ff35 	bl	8008cec <RCCEx_PLL2_Config>
 8007e82:	4603      	mov	r3, r0
 8007e84:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007e86:	e002      	b.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8007e8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e8e:	7dfb      	ldrb	r3, [r7, #23]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d109      	bne.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007e94:	4b4d      	ldr	r3, [pc, #308]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ea0:	494a      	ldr	r1, [pc, #296]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007ea6:	e001      	b.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ea8:	7dfb      	ldrb	r3, [r7, #23]
 8007eaa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00a      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	3324      	adds	r3, #36	; 0x24
 8007ebc:	2102      	movs	r1, #2
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f000 ffc6 	bl	8008e50 <RCCEx_PLL3_Config>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d001      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d02f      	beq.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ee2:	d00c      	beq.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ee8:	d802      	bhi.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d011      	beq.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8007eee:	e00d      	b.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8007ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ef4:	d00f      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8007ef6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007efa:	d00e      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8007efc:	e006      	b.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007efe:	4b33      	ldr	r3, [pc, #204]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f02:	4a32      	ldr	r2, [pc, #200]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007f0a:	e007      	b.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	75fb      	strb	r3, [r7, #23]
      break;
 8007f10:	e004      	b.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007f12:	bf00      	nop
 8007f14:	e002      	b.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007f16:	bf00      	nop
 8007f18:	e000      	b.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007f1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f1c:	7dfb      	ldrb	r3, [r7, #23]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d109      	bne.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f22:	4b2a      	ldr	r3, [pc, #168]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f2e:	4927      	ldr	r1, [pc, #156]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007f30:	4313      	orrs	r3, r2
 8007f32:	654b      	str	r3, [r1, #84]	; 0x54
 8007f34:	e001      	b.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f36:	7dfb      	ldrb	r3, [r7, #23]
 8007f38:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d008      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007f46:	4b21      	ldr	r3, [pc, #132]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f4a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f52:	491e      	ldr	r1, [pc, #120]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007f54:	4313      	orrs	r3, r2
 8007f56:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d008      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007f64:	4b19      	ldr	r3, [pc, #100]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f68:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f70:	4916      	ldr	r1, [pc, #88]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007f72:	4313      	orrs	r3, r2
 8007f74:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00d      	beq.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007f82:	4b12      	ldr	r3, [pc, #72]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	4a11      	ldr	r2, [pc, #68]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007f88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007f8c:	6113      	str	r3, [r2, #16]
 8007f8e:	4b0f      	ldr	r3, [pc, #60]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007f90:	691a      	ldr	r2, [r3, #16]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007f98:	490c      	ldr	r1, [pc, #48]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	da08      	bge.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007fa6:	4b09      	ldr	r3, [pc, #36]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007faa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fb2:	4906      	ldr	r1, [pc, #24]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007fb8:	7dbb      	ldrb	r3, [r7, #22]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d101      	bne.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	e000      	b.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3718      	adds	r7, #24
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	58024400 	.word	0x58024400

08007fd0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b090      	sub	sp, #64	; 0x40
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fde:	d150      	bne.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007fe0:	4ba1      	ldr	r3, [pc, #644]	; (8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fe4:	f003 0307 	and.w	r3, r3, #7
 8007fe8:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fec:	2b04      	cmp	r3, #4
 8007fee:	d844      	bhi.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8007ff0:	a201      	add	r2, pc, #4	; (adr r2, 8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8007ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff6:	bf00      	nop
 8007ff8:	0800800d 	.word	0x0800800d
 8007ffc:	0800801d 	.word	0x0800801d
 8008000:	0800802d 	.word	0x0800802d
 8008004:	08008075 	.word	0x08008075
 8008008:	0800803d 	.word	0x0800803d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800800c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008010:	4618      	mov	r0, r3
 8008012:	f000 fd03 	bl	8008a1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008018:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800801a:	e241      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800801c:	f107 0318 	add.w	r3, r7, #24
 8008020:	4618      	mov	r0, r3
 8008022:	f000 fa63 	bl	80084ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800802a:	e239      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800802c:	f107 030c 	add.w	r3, r7, #12
 8008030:	4618      	mov	r0, r3
 8008032:	f000 fba7 	bl	8008784 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800803a:	e231      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800803c:	4b8a      	ldr	r3, [pc, #552]	; (8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800803e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008040:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008044:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008048:	2b00      	cmp	r3, #0
 800804a:	d102      	bne.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800804c:	4b87      	ldr	r3, [pc, #540]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800804e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008050:	e226      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008054:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008058:	d102      	bne.n	8008060 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800805a:	4b85      	ldr	r3, [pc, #532]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800805c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800805e:	e21f      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008062:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008066:	d102      	bne.n	800806e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8008068:	4b82      	ldr	r3, [pc, #520]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800806a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800806c:	e218      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800806e:	2300      	movs	r3, #0
 8008070:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008072:	e215      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008074:	4b80      	ldr	r3, [pc, #512]	; (8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008076:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008078:	e212      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800807a:	2300      	movs	r3, #0
 800807c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800807e:	bf00      	nop
 8008080:	e20e      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008088:	d14f      	bne.n	800812a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800808a:	4b77      	ldr	r3, [pc, #476]	; (8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800808c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800808e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008092:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008096:	2b80      	cmp	r3, #128	; 0x80
 8008098:	d01c      	beq.n	80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800809a:	2b80      	cmp	r3, #128	; 0x80
 800809c:	d804      	bhi.n	80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d008      	beq.n	80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 80080a2:	2b40      	cmp	r3, #64	; 0x40
 80080a4:	d00e      	beq.n	80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80080a6:	e03c      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 80080a8:	2bc0      	cmp	r3, #192	; 0xc0
 80080aa:	d037      	beq.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80080ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080b0:	d018      	beq.n	80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 80080b2:	e036      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080b8:	4618      	mov	r0, r3
 80080ba:	f000 fcaf 	bl	8008a1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080c2:	e1ed      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080c4:	f107 0318 	add.w	r3, r7, #24
 80080c8:	4618      	mov	r0, r3
 80080ca:	f000 fa0f 	bl	80084ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080d2:	e1e5      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080d4:	f107 030c 	add.w	r3, r7, #12
 80080d8:	4618      	mov	r0, r3
 80080da:	f000 fb53 	bl	8008784 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080e2:	e1dd      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80080e4:	4b60      	ldr	r3, [pc, #384]	; (8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80080e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80080ec:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80080ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d102      	bne.n	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80080f4:	4b5d      	ldr	r3, [pc, #372]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80080f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80080f8:	e1d2      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80080fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008100:	d102      	bne.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8008102:	4b5b      	ldr	r3, [pc, #364]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008104:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008106:	e1cb      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800810a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800810e:	d102      	bne.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8008110:	4b58      	ldr	r3, [pc, #352]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008112:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008114:	e1c4      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008116:	2300      	movs	r3, #0
 8008118:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800811a:	e1c1      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800811c:	4b56      	ldr	r3, [pc, #344]	; (8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800811e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008120:	e1be      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008122:	2300      	movs	r3, #0
 8008124:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008126:	bf00      	nop
 8008128:	e1ba      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008130:	d153      	bne.n	80081da <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008132:	4b4d      	ldr	r3, [pc, #308]	; (8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008136:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800813a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800813c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008142:	d01f      	beq.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8008144:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008148:	d805      	bhi.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00a      	beq.n	8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800814e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008152:	d00f      	beq.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8008154:	e03d      	b.n	80081d2 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8008156:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800815a:	d037      	beq.n	80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800815c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008160:	d018      	beq.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8008162:	e036      	b.n	80081d2 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008168:	4618      	mov	r0, r3
 800816a:	f000 fc57 	bl	8008a1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800816e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008170:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008172:	e195      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008174:	f107 0318 	add.w	r3, r7, #24
 8008178:	4618      	mov	r0, r3
 800817a:	f000 f9b7 	bl	80084ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008182:	e18d      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008184:	f107 030c 	add.w	r3, r7, #12
 8008188:	4618      	mov	r0, r3
 800818a:	f000 fafb 	bl	8008784 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008192:	e185      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008194:	4b34      	ldr	r3, [pc, #208]	; (8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008198:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800819c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800819e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d102      	bne.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80081a4:	4b31      	ldr	r3, [pc, #196]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80081a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80081a8:	e17a      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80081aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081b0:	d102      	bne.n	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 80081b2:	4b2f      	ldr	r3, [pc, #188]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80081b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081b6:	e173      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80081b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081be:	d102      	bne.n	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 80081c0:	4b2c      	ldr	r3, [pc, #176]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80081c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081c4:	e16c      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80081c6:	2300      	movs	r3, #0
 80081c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081ca:	e169      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80081cc:	4b2a      	ldr	r3, [pc, #168]	; (8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80081ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081d0:	e166      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80081d2:	2300      	movs	r3, #0
 80081d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081d6:	bf00      	nop
 80081d8:	e162      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081e0:	d15d      	bne.n	800829e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80081e2:	4b21      	ldr	r3, [pc, #132]	; (8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80081e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081e6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80081ea:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80081ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081f2:	d01f      	beq.n	8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80081f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081f8:	d805      	bhi.n	8008206 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d00a      	beq.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80081fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008202:	d00f      	beq.n	8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8008204:	e047      	b.n	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8008206:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800820a:	d041      	beq.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 800820c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008210:	d018      	beq.n	8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8008212:	e040      	b.n	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008218:	4618      	mov	r0, r3
 800821a:	f000 fbff 	bl	8008a1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800821e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008220:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008222:	e13d      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008224:	f107 0318 	add.w	r3, r7, #24
 8008228:	4618      	mov	r0, r3
 800822a:	f000 f95f 	bl	80084ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008232:	e135      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008234:	f107 030c 	add.w	r3, r7, #12
 8008238:	4618      	mov	r0, r3
 800823a:	f000 faa3 	bl	8008784 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008242:	e12d      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008244:	4b08      	ldr	r3, [pc, #32]	; (8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008248:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800824c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800824e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008250:	2b00      	cmp	r3, #0
 8008252:	d102      	bne.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008254:	4b05      	ldr	r3, [pc, #20]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008256:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008258:	e122      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800825a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800825c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008260:	d10c      	bne.n	800827c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8008262:	4b03      	ldr	r3, [pc, #12]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008264:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008266:	e11b      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008268:	58024400 	.word	0x58024400
 800826c:	03d09000 	.word	0x03d09000
 8008270:	003d0900 	.word	0x003d0900
 8008274:	017d7840 	.word	0x017d7840
 8008278:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800827c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800827e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008282:	d102      	bne.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8008284:	4b89      	ldr	r3, [pc, #548]	; (80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008286:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008288:	e10a      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800828a:	2300      	movs	r3, #0
 800828c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800828e:	e107      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008290:	4b87      	ldr	r3, [pc, #540]	; (80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8008292:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008294:	e104      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008296:	2300      	movs	r3, #0
 8008298:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800829a:	bf00      	nop
 800829c:	e100      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082a4:	d153      	bne.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80082a6:	4b83      	ldr	r3, [pc, #524]	; (80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80082a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082aa:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80082ae:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80082b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082b6:	d01f      	beq.n	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80082b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082bc:	d805      	bhi.n	80082ca <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d00a      	beq.n	80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 80082c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082c6:	d00f      	beq.n	80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80082c8:	e03d      	b.n	8008346 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 80082ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80082ce:	d037      	beq.n	8008340 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80082d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082d4:	d018      	beq.n	8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80082d6:	e036      	b.n	8008346 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082dc:	4618      	mov	r0, r3
 80082de:	f000 fb9d 	bl	8008a1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80082e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082e6:	e0db      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082e8:	f107 0318 	add.w	r3, r7, #24
 80082ec:	4618      	mov	r0, r3
 80082ee:	f000 f8fd 	bl	80084ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082f6:	e0d3      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082f8:	f107 030c 	add.w	r3, r7, #12
 80082fc:	4618      	mov	r0, r3
 80082fe:	f000 fa41 	bl	8008784 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008306:	e0cb      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008308:	4b6a      	ldr	r3, [pc, #424]	; (80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800830a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800830c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008310:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008314:	2b00      	cmp	r3, #0
 8008316:	d102      	bne.n	800831e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008318:	4b67      	ldr	r3, [pc, #412]	; (80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800831a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800831c:	e0c0      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800831e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008320:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008324:	d102      	bne.n	800832c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8008326:	4b65      	ldr	r3, [pc, #404]	; (80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008328:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800832a:	e0b9      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800832c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800832e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008332:	d102      	bne.n	800833a <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8008334:	4b5d      	ldr	r3, [pc, #372]	; (80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008336:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008338:	e0b2      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800833a:	2300      	movs	r3, #0
 800833c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800833e:	e0af      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008340:	4b5b      	ldr	r3, [pc, #364]	; (80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8008342:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008344:	e0ac      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008346:	2300      	movs	r3, #0
 8008348:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800834a:	bf00      	nop
 800834c:	e0a8      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008354:	d13d      	bne.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008356:	4b57      	ldr	r3, [pc, #348]	; (80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800835a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800835e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008366:	d00c      	beq.n	8008382 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008368:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800836c:	d011      	beq.n	8008392 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800836e:	2b00      	cmp	r3, #0
 8008370:	d12b      	bne.n	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008372:	f107 0318 	add.w	r3, r7, #24
 8008376:	4618      	mov	r0, r3
 8008378:	f000 f8b8 	bl	80084ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800837c:	69bb      	ldr	r3, [r7, #24]
 800837e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008380:	e08e      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008382:	f107 030c 	add.w	r3, r7, #12
 8008386:	4618      	mov	r0, r3
 8008388:	f000 f9fc 	bl	8008784 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008390:	e086      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008392:	4b48      	ldr	r3, [pc, #288]	; (80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008396:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800839a:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800839c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d102      	bne.n	80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80083a2:	4b45      	ldr	r3, [pc, #276]	; (80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80083a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80083a6:	e07b      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80083a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083ae:	d102      	bne.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 80083b0:	4b42      	ldr	r3, [pc, #264]	; (80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80083b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083b4:	e074      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80083b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083bc:	d102      	bne.n	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 80083be:	4b3b      	ldr	r3, [pc, #236]	; (80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80083c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083c2:	e06d      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80083c4:	2300      	movs	r3, #0
 80083c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083c8:	e06a      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80083ca:	2300      	movs	r3, #0
 80083cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083ce:	bf00      	nop
 80083d0:	e066      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083d8:	d11f      	bne.n	800841a <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80083da:	4b36      	ldr	r3, [pc, #216]	; (80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80083dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083e2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80083e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d003      	beq.n	80083f2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80083ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083ee:	d008      	beq.n	8008402 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80083f0:	e00f      	b.n	8008412 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083f6:	4618      	mov	r0, r3
 80083f8:	f000 fb10 	bl	8008a1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80083fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008400:	e04e      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008402:	f107 0318 	add.w	r3, r7, #24
 8008406:	4618      	mov	r0, r3
 8008408:	f000 f870 	bl	80084ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800840c:	6a3b      	ldr	r3, [r7, #32]
 800840e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008410:	e046      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008412:	2300      	movs	r3, #0
 8008414:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008416:	bf00      	nop
 8008418:	e042      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008420:	d13c      	bne.n	800849c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008422:	4b24      	ldr	r3, [pc, #144]	; (80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008426:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800842a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800842c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008432:	d01e      	beq.n	8008472 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8008434:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008438:	d805      	bhi.n	8008446 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00d      	beq.n	800845a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800843e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008442:	d00e      	beq.n	8008462 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8008444:	e026      	b.n	8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8008446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800844a:	d01d      	beq.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800844c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008450:	d01d      	beq.n	800848e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8008452:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008456:	d014      	beq.n	8008482 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8008458:	e01c      	b.n	8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800845a:	f000 f831 	bl	80084c0 <HAL_RCCEx_GetD3PCLK1Freq>
 800845e:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008460:	e01e      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008462:	f107 0318 	add.w	r3, r7, #24
 8008466:	4618      	mov	r0, r3
 8008468:	f000 f840 	bl	80084ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008470:	e016      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008472:	f107 030c 	add.w	r3, r7, #12
 8008476:	4618      	mov	r0, r3
 8008478:	f000 f984 	bl	8008784 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008480:	e00e      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8008482:	4b0d      	ldr	r3, [pc, #52]	; (80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008484:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008486:	e00b      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8008488:	4b0c      	ldr	r3, [pc, #48]	; (80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800848a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800848c:	e008      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800848e:	4b07      	ldr	r3, [pc, #28]	; (80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008490:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008492:	e005      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008494:	2300      	movs	r3, #0
 8008496:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008498:	bf00      	nop
 800849a:	e001      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 800849c:	2300      	movs	r3, #0
 800849e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80084a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3740      	adds	r7, #64	; 0x40
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	017d7840 	.word	0x017d7840
 80084b0:	00bb8000 	.word	0x00bb8000
 80084b4:	58024400 	.word	0x58024400
 80084b8:	03d09000 	.word	0x03d09000
 80084bc:	003d0900 	.word	0x003d0900

080084c0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80084c4:	f7fe fe42 	bl	800714c <HAL_RCC_GetHCLKFreq>
 80084c8:	4601      	mov	r1, r0
 80084ca:	4b06      	ldr	r3, [pc, #24]	; (80084e4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80084cc:	6a1b      	ldr	r3, [r3, #32]
 80084ce:	091b      	lsrs	r3, r3, #4
 80084d0:	f003 0307 	and.w	r3, r3, #7
 80084d4:	4a04      	ldr	r2, [pc, #16]	; (80084e8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80084d6:	5cd3      	ldrb	r3, [r2, r3]
 80084d8:	f003 031f 	and.w	r3, r3, #31
 80084dc:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	58024400 	.word	0x58024400
 80084e8:	080100d8 	.word	0x080100d8

080084ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b089      	sub	sp, #36	; 0x24
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80084f4:	4b9d      	ldr	r3, [pc, #628]	; (800876c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80084f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f8:	f003 0303 	and.w	r3, r3, #3
 80084fc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80084fe:	4b9b      	ldr	r3, [pc, #620]	; (800876c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008502:	0b1b      	lsrs	r3, r3, #12
 8008504:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008508:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800850a:	4b98      	ldr	r3, [pc, #608]	; (800876c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800850c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800850e:	091b      	lsrs	r3, r3, #4
 8008510:	f003 0301 	and.w	r3, r3, #1
 8008514:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008516:	4b95      	ldr	r3, [pc, #596]	; (800876c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800851a:	08db      	lsrs	r3, r3, #3
 800851c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008520:	693a      	ldr	r2, [r7, #16]
 8008522:	fb02 f303 	mul.w	r3, r2, r3
 8008526:	ee07 3a90 	vmov	s15, r3
 800852a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800852e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	2b00      	cmp	r3, #0
 8008536:	f000 810a 	beq.w	800874e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800853a:	69bb      	ldr	r3, [r7, #24]
 800853c:	2b01      	cmp	r3, #1
 800853e:	d05a      	beq.n	80085f6 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8008540:	2b01      	cmp	r3, #1
 8008542:	d302      	bcc.n	800854a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8008544:	2b02      	cmp	r3, #2
 8008546:	d078      	beq.n	800863a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8008548:	e099      	b.n	800867e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800854a:	4b88      	ldr	r3, [pc, #544]	; (800876c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f003 0320 	and.w	r3, r3, #32
 8008552:	2b00      	cmp	r3, #0
 8008554:	d02d      	beq.n	80085b2 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008556:	4b85      	ldr	r3, [pc, #532]	; (800876c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	08db      	lsrs	r3, r3, #3
 800855c:	f003 0303 	and.w	r3, r3, #3
 8008560:	4a83      	ldr	r2, [pc, #524]	; (8008770 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8008562:	fa22 f303 	lsr.w	r3, r2, r3
 8008566:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	ee07 3a90 	vmov	s15, r3
 800856e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	ee07 3a90 	vmov	s15, r3
 8008578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800857c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008580:	4b7a      	ldr	r3, [pc, #488]	; (800876c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008588:	ee07 3a90 	vmov	s15, r3
 800858c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008590:	ed97 6a03 	vldr	s12, [r7, #12]
 8008594:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008774 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008598:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800859c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085ac:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80085b0:	e087      	b.n	80086c2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	ee07 3a90 	vmov	s15, r3
 80085b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085bc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008778 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80085c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085c4:	4b69      	ldr	r3, [pc, #420]	; (800876c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80085c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085cc:	ee07 3a90 	vmov	s15, r3
 80085d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80085d8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008774 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80085dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085f4:	e065      	b.n	80086c2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	ee07 3a90 	vmov	s15, r3
 80085fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008600:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800877c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008604:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008608:	4b58      	ldr	r3, [pc, #352]	; (800876c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800860a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800860c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008610:	ee07 3a90 	vmov	s15, r3
 8008614:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008618:	ed97 6a03 	vldr	s12, [r7, #12]
 800861c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008774 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008620:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008624:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008628:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800862c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008630:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008634:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008638:	e043      	b.n	80086c2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	ee07 3a90 	vmov	s15, r3
 8008640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008644:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008780 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8008648:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800864c:	4b47      	ldr	r3, [pc, #284]	; (800876c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800864e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008654:	ee07 3a90 	vmov	s15, r3
 8008658:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800865c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008660:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008774 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008664:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008668:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800866c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008670:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008678:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800867c:	e021      	b.n	80086c2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	ee07 3a90 	vmov	s15, r3
 8008684:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008688:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800877c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800868c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008690:	4b36      	ldr	r3, [pc, #216]	; (800876c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008698:	ee07 3a90 	vmov	s15, r3
 800869c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80086a4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008774 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80086a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086c0:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80086c2:	4b2a      	ldr	r3, [pc, #168]	; (800876c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80086c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c6:	0a5b      	lsrs	r3, r3, #9
 80086c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086cc:	ee07 3a90 	vmov	s15, r3
 80086d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80086e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086e8:	ee17 2a90 	vmov	r2, s15
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80086f0:	4b1e      	ldr	r3, [pc, #120]	; (800876c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80086f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f4:	0c1b      	lsrs	r3, r3, #16
 80086f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086fa:	ee07 3a90 	vmov	s15, r3
 80086fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008702:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008706:	ee37 7a87 	vadd.f32	s14, s15, s14
 800870a:	edd7 6a07 	vldr	s13, [r7, #28]
 800870e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008712:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008716:	ee17 2a90 	vmov	r2, s15
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800871e:	4b13      	ldr	r3, [pc, #76]	; (800876c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008722:	0e1b      	lsrs	r3, r3, #24
 8008724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008728:	ee07 3a90 	vmov	s15, r3
 800872c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008730:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008734:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008738:	edd7 6a07 	vldr	s13, [r7, #28]
 800873c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008740:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008744:	ee17 2a90 	vmov	r2, s15
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800874c:	e008      	b.n	8008760 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	609a      	str	r2, [r3, #8]
}
 8008760:	bf00      	nop
 8008762:	3724      	adds	r7, #36	; 0x24
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr
 800876c:	58024400 	.word	0x58024400
 8008770:	03d09000 	.word	0x03d09000
 8008774:	46000000 	.word	0x46000000
 8008778:	4c742400 	.word	0x4c742400
 800877c:	4a742400 	.word	0x4a742400
 8008780:	4bbebc20 	.word	0x4bbebc20

08008784 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008784:	b480      	push	{r7}
 8008786:	b089      	sub	sp, #36	; 0x24
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800878c:	4b9d      	ldr	r3, [pc, #628]	; (8008a04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800878e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008790:	f003 0303 	and.w	r3, r3, #3
 8008794:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008796:	4b9b      	ldr	r3, [pc, #620]	; (8008a04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800879a:	0d1b      	lsrs	r3, r3, #20
 800879c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087a0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80087a2:	4b98      	ldr	r3, [pc, #608]	; (8008a04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80087a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a6:	0a1b      	lsrs	r3, r3, #8
 80087a8:	f003 0301 	and.w	r3, r3, #1
 80087ac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80087ae:	4b95      	ldr	r3, [pc, #596]	; (8008a04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80087b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087b2:	08db      	lsrs	r3, r3, #3
 80087b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087b8:	693a      	ldr	r2, [r7, #16]
 80087ba:	fb02 f303 	mul.w	r3, r2, r3
 80087be:	ee07 3a90 	vmov	s15, r3
 80087c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	f000 810a 	beq.w	80089e6 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d05a      	beq.n	800888e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d302      	bcc.n	80087e2 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80087dc:	2b02      	cmp	r3, #2
 80087de:	d078      	beq.n	80088d2 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80087e0:	e099      	b.n	8008916 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087e2:	4b88      	ldr	r3, [pc, #544]	; (8008a04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f003 0320 	and.w	r3, r3, #32
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d02d      	beq.n	800884a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80087ee:	4b85      	ldr	r3, [pc, #532]	; (8008a04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	08db      	lsrs	r3, r3, #3
 80087f4:	f003 0303 	and.w	r3, r3, #3
 80087f8:	4a83      	ldr	r2, [pc, #524]	; (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80087fa:	fa22 f303 	lsr.w	r3, r2, r3
 80087fe:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	ee07 3a90 	vmov	s15, r3
 8008806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	ee07 3a90 	vmov	s15, r3
 8008810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008814:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008818:	4b7a      	ldr	r3, [pc, #488]	; (8008a04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800881a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800881c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008820:	ee07 3a90 	vmov	s15, r3
 8008824:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008828:	ed97 6a03 	vldr	s12, [r7, #12]
 800882c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008a0c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008830:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008834:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008838:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800883c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008840:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008844:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008848:	e087      	b.n	800895a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	ee07 3a90 	vmov	s15, r3
 8008850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008854:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008a10 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8008858:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800885c:	4b69      	ldr	r3, [pc, #420]	; (8008a04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800885e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008864:	ee07 3a90 	vmov	s15, r3
 8008868:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800886c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008870:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008a0c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008874:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008878:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800887c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008880:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008884:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008888:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800888c:	e065      	b.n	800895a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	ee07 3a90 	vmov	s15, r3
 8008894:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008898:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800889c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088a0:	4b58      	ldr	r3, [pc, #352]	; (8008a04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80088a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088a8:	ee07 3a90 	vmov	s15, r3
 80088ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80088b4:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008a0c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80088b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088d0:	e043      	b.n	800895a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	ee07 3a90 	vmov	s15, r3
 80088d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088dc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008a18 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80088e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088e4:	4b47      	ldr	r3, [pc, #284]	; (8008a04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80088e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ec:	ee07 3a90 	vmov	s15, r3
 80088f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80088f8:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008a0c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80088fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008900:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008904:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008908:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800890c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008910:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008914:	e021      	b.n	800895a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	ee07 3a90 	vmov	s15, r3
 800891c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008920:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008924:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008928:	4b36      	ldr	r3, [pc, #216]	; (8008a04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800892a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008930:	ee07 3a90 	vmov	s15, r3
 8008934:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008938:	ed97 6a03 	vldr	s12, [r7, #12]
 800893c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008a0c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008940:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008944:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008948:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800894c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008954:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008958:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800895a:	4b2a      	ldr	r3, [pc, #168]	; (8008a04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800895c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800895e:	0a5b      	lsrs	r3, r3, #9
 8008960:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008964:	ee07 3a90 	vmov	s15, r3
 8008968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800896c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008970:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008974:	edd7 6a07 	vldr	s13, [r7, #28]
 8008978:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800897c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008980:	ee17 2a90 	vmov	r2, s15
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008988:	4b1e      	ldr	r3, [pc, #120]	; (8008a04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800898a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800898c:	0c1b      	lsrs	r3, r3, #16
 800898e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008992:	ee07 3a90 	vmov	s15, r3
 8008996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800899a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800899e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80089a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089ae:	ee17 2a90 	vmov	r2, s15
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80089b6:	4b13      	ldr	r3, [pc, #76]	; (8008a04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80089b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ba:	0e1b      	lsrs	r3, r3, #24
 80089bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089c0:	ee07 3a90 	vmov	s15, r3
 80089c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80089d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089dc:	ee17 2a90 	vmov	r2, s15
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80089e4:	e008      	b.n	80089f8 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2200      	movs	r2, #0
 80089ea:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2200      	movs	r2, #0
 80089f0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	609a      	str	r2, [r3, #8]
}
 80089f8:	bf00      	nop
 80089fa:	3724      	adds	r7, #36	; 0x24
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr
 8008a04:	58024400 	.word	0x58024400
 8008a08:	03d09000 	.word	0x03d09000
 8008a0c:	46000000 	.word	0x46000000
 8008a10:	4c742400 	.word	0x4c742400
 8008a14:	4a742400 	.word	0x4a742400
 8008a18:	4bbebc20 	.word	0x4bbebc20

08008a1c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b089      	sub	sp, #36	; 0x24
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a24:	4b9d      	ldr	r3, [pc, #628]	; (8008c9c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a28:	f003 0303 	and.w	r3, r3, #3
 8008a2c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008a2e:	4b9b      	ldr	r3, [pc, #620]	; (8008c9c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a32:	091b      	lsrs	r3, r3, #4
 8008a34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a38:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008a3a:	4b98      	ldr	r3, [pc, #608]	; (8008c9c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a3e:	f003 0301 	and.w	r3, r3, #1
 8008a42:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008a44:	4b95      	ldr	r3, [pc, #596]	; (8008c9c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a48:	08db      	lsrs	r3, r3, #3
 8008a4a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a4e:	693a      	ldr	r2, [r7, #16]
 8008a50:	fb02 f303 	mul.w	r3, r2, r3
 8008a54:	ee07 3a90 	vmov	s15, r3
 8008a58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a5c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	f000 810a 	beq.w	8008c7c <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8008a68:	69bb      	ldr	r3, [r7, #24]
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d05a      	beq.n	8008b24 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d302      	bcc.n	8008a78 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	d078      	beq.n	8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8008a76:	e099      	b.n	8008bac <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a78:	4b88      	ldr	r3, [pc, #544]	; (8008c9c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f003 0320 	and.w	r3, r3, #32
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d02d      	beq.n	8008ae0 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a84:	4b85      	ldr	r3, [pc, #532]	; (8008c9c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	08db      	lsrs	r3, r3, #3
 8008a8a:	f003 0303 	and.w	r3, r3, #3
 8008a8e:	4a84      	ldr	r2, [pc, #528]	; (8008ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8008a90:	fa22 f303 	lsr.w	r3, r2, r3
 8008a94:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	ee07 3a90 	vmov	s15, r3
 8008a9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	ee07 3a90 	vmov	s15, r3
 8008aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aae:	4b7b      	ldr	r3, [pc, #492]	; (8008c9c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ab6:	ee07 3a90 	vmov	s15, r3
 8008aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008abe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ac2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ace:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ada:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008ade:	e087      	b.n	8008bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	ee07 3a90 	vmov	s15, r3
 8008ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008ca8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8008aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008af2:	4b6a      	ldr	r3, [pc, #424]	; (8008c9c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008afa:	ee07 3a90 	vmov	s15, r3
 8008afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b02:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b06:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b22:	e065      	b.n	8008bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	ee07 3a90 	vmov	s15, r3
 8008b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b2e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008cac <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b36:	4b59      	ldr	r3, [pc, #356]	; (8008c9c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b3e:	ee07 3a90 	vmov	s15, r3
 8008b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b46:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b4a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b66:	e043      	b.n	8008bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	ee07 3a90 	vmov	s15, r3
 8008b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b72:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008cb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b7a:	4b48      	ldr	r3, [pc, #288]	; (8008c9c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b82:	ee07 3a90 	vmov	s15, r3
 8008b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b8e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ba6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008baa:	e021      	b.n	8008bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	ee07 3a90 	vmov	s15, r3
 8008bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bb6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008cac <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bbe:	4b37      	ldr	r3, [pc, #220]	; (8008c9c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bc6:	ee07 3a90 	vmov	s15, r3
 8008bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bd2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008bee:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008bf0:	4b2a      	ldr	r3, [pc, #168]	; (8008c9c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bf4:	0a5b      	lsrs	r3, r3, #9
 8008bf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bfa:	ee07 3a90 	vmov	s15, r3
 8008bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c16:	ee17 2a90 	vmov	r2, s15
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008c1e:	4b1f      	ldr	r3, [pc, #124]	; (8008c9c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c22:	0c1b      	lsrs	r3, r3, #16
 8008c24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c28:	ee07 3a90 	vmov	s15, r3
 8008c2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c38:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c44:	ee17 2a90 	vmov	r2, s15
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008c4c:	4b13      	ldr	r3, [pc, #76]	; (8008c9c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c50:	0e1b      	lsrs	r3, r3, #24
 8008c52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c56:	ee07 3a90 	vmov	s15, r3
 8008c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c66:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c72:	ee17 2a90 	vmov	r2, s15
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008c7a:	e008      	b.n	8008c8e <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2200      	movs	r2, #0
 8008c86:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	609a      	str	r2, [r3, #8]
}
 8008c8e:	bf00      	nop
 8008c90:	3724      	adds	r7, #36	; 0x24
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
 8008c9c:	58024400 	.word	0x58024400
 8008ca0:	03d09000 	.word	0x03d09000
 8008ca4:	46000000 	.word	0x46000000
 8008ca8:	4c742400 	.word	0x4c742400
 8008cac:	4a742400 	.word	0x4a742400
 8008cb0:	4bbebc20 	.word	0x4bbebc20

08008cb4 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1CPRE)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008cb8:	f7fe f8d6 	bl	8006e68 <HAL_RCC_GetSysClockFreq>
 8008cbc:	4601      	mov	r1, r0
 8008cbe:	4b08      	ldr	r3, [pc, #32]	; (8008ce0 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8008cc0:	699b      	ldr	r3, [r3, #24]
 8008cc2:	0a1b      	lsrs	r3, r3, #8
 8008cc4:	f003 030f 	and.w	r3, r3, #15
 8008cc8:	4a06      	ldr	r2, [pc, #24]	; (8008ce4 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8008cca:	5cd3      	ldrb	r3, [r2, r3]
 8008ccc:	f003 031f 	and.w	r3, r3, #31
 8008cd0:	fa21 f303 	lsr.w	r3, r1, r3
 8008cd4:	4a04      	ldr	r2, [pc, #16]	; (8008ce8 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8008cd6:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif
  return SystemCoreClock;
 8008cd8:	4b03      	ldr	r3, [pc, #12]	; (8008ce8 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8008cda:	681b      	ldr	r3, [r3, #0]
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	58024400 	.word	0x58024400
 8008ce4:	080100d8 	.word	0x080100d8
 8008ce8:	24000000 	.word	0x24000000

08008cec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008cfa:	4b53      	ldr	r3, [pc, #332]	; (8008e48 <RCCEx_PLL2_Config+0x15c>)
 8008cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cfe:	f003 0303 	and.w	r3, r3, #3
 8008d02:	2b03      	cmp	r3, #3
 8008d04:	d101      	bne.n	8008d0a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008d06:	2301      	movs	r3, #1
 8008d08:	e099      	b.n	8008e3e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008d0a:	4b4f      	ldr	r3, [pc, #316]	; (8008e48 <RCCEx_PLL2_Config+0x15c>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a4e      	ldr	r2, [pc, #312]	; (8008e48 <RCCEx_PLL2_Config+0x15c>)
 8008d10:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008d14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d16:	f7f8 ffc3 	bl	8001ca0 <HAL_GetTick>
 8008d1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008d1c:	e008      	b.n	8008d30 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008d1e:	f7f8 ffbf 	bl	8001ca0 <HAL_GetTick>
 8008d22:	4602      	mov	r2, r0
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	1ad3      	subs	r3, r2, r3
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	d901      	bls.n	8008d30 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008d2c:	2303      	movs	r3, #3
 8008d2e:	e086      	b.n	8008e3e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008d30:	4b45      	ldr	r3, [pc, #276]	; (8008e48 <RCCEx_PLL2_Config+0x15c>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d1f0      	bne.n	8008d1e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008d3c:	4b42      	ldr	r3, [pc, #264]	; (8008e48 <RCCEx_PLL2_Config+0x15c>)
 8008d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d40:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	031b      	lsls	r3, r3, #12
 8008d4a:	493f      	ldr	r1, [pc, #252]	; (8008e48 <RCCEx_PLL2_Config+0x15c>)
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	628b      	str	r3, [r1, #40]	; 0x28
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	3b01      	subs	r3, #1
 8008d56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	3b01      	subs	r3, #1
 8008d60:	025b      	lsls	r3, r3, #9
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	431a      	orrs	r2, r3
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	68db      	ldr	r3, [r3, #12]
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	041b      	lsls	r3, r3, #16
 8008d6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008d72:	431a      	orrs	r2, r3
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	3b01      	subs	r3, #1
 8008d7a:	061b      	lsls	r3, r3, #24
 8008d7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008d80:	4931      	ldr	r1, [pc, #196]	; (8008e48 <RCCEx_PLL2_Config+0x15c>)
 8008d82:	4313      	orrs	r3, r2
 8008d84:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008d86:	4b30      	ldr	r3, [pc, #192]	; (8008e48 <RCCEx_PLL2_Config+0x15c>)
 8008d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	695b      	ldr	r3, [r3, #20]
 8008d92:	492d      	ldr	r1, [pc, #180]	; (8008e48 <RCCEx_PLL2_Config+0x15c>)
 8008d94:	4313      	orrs	r3, r2
 8008d96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008d98:	4b2b      	ldr	r3, [pc, #172]	; (8008e48 <RCCEx_PLL2_Config+0x15c>)
 8008d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d9c:	f023 0220 	bic.w	r2, r3, #32
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	699b      	ldr	r3, [r3, #24]
 8008da4:	4928      	ldr	r1, [pc, #160]	; (8008e48 <RCCEx_PLL2_Config+0x15c>)
 8008da6:	4313      	orrs	r3, r2
 8008da8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008daa:	4b27      	ldr	r3, [pc, #156]	; (8008e48 <RCCEx_PLL2_Config+0x15c>)
 8008dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dae:	4a26      	ldr	r2, [pc, #152]	; (8008e48 <RCCEx_PLL2_Config+0x15c>)
 8008db0:	f023 0310 	bic.w	r3, r3, #16
 8008db4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008db6:	4b24      	ldr	r3, [pc, #144]	; (8008e48 <RCCEx_PLL2_Config+0x15c>)
 8008db8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008dba:	4b24      	ldr	r3, [pc, #144]	; (8008e4c <RCCEx_PLL2_Config+0x160>)
 8008dbc:	4013      	ands	r3, r2
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	69d2      	ldr	r2, [r2, #28]
 8008dc2:	00d2      	lsls	r2, r2, #3
 8008dc4:	4920      	ldr	r1, [pc, #128]	; (8008e48 <RCCEx_PLL2_Config+0x15c>)
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008dca:	4b1f      	ldr	r3, [pc, #124]	; (8008e48 <RCCEx_PLL2_Config+0x15c>)
 8008dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dce:	4a1e      	ldr	r2, [pc, #120]	; (8008e48 <RCCEx_PLL2_Config+0x15c>)
 8008dd0:	f043 0310 	orr.w	r3, r3, #16
 8008dd4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d106      	bne.n	8008dea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008ddc:	4b1a      	ldr	r3, [pc, #104]	; (8008e48 <RCCEx_PLL2_Config+0x15c>)
 8008dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de0:	4a19      	ldr	r2, [pc, #100]	; (8008e48 <RCCEx_PLL2_Config+0x15c>)
 8008de2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008de6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008de8:	e00f      	b.n	8008e0a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d106      	bne.n	8008dfe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008df0:	4b15      	ldr	r3, [pc, #84]	; (8008e48 <RCCEx_PLL2_Config+0x15c>)
 8008df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df4:	4a14      	ldr	r2, [pc, #80]	; (8008e48 <RCCEx_PLL2_Config+0x15c>)
 8008df6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008dfa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008dfc:	e005      	b.n	8008e0a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008dfe:	4b12      	ldr	r3, [pc, #72]	; (8008e48 <RCCEx_PLL2_Config+0x15c>)
 8008e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e02:	4a11      	ldr	r2, [pc, #68]	; (8008e48 <RCCEx_PLL2_Config+0x15c>)
 8008e04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008e08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008e0a:	4b0f      	ldr	r3, [pc, #60]	; (8008e48 <RCCEx_PLL2_Config+0x15c>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a0e      	ldr	r2, [pc, #56]	; (8008e48 <RCCEx_PLL2_Config+0x15c>)
 8008e10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008e14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e16:	f7f8 ff43 	bl	8001ca0 <HAL_GetTick>
 8008e1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008e1c:	e008      	b.n	8008e30 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008e1e:	f7f8 ff3f 	bl	8001ca0 <HAL_GetTick>
 8008e22:	4602      	mov	r2, r0
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	1ad3      	subs	r3, r2, r3
 8008e28:	2b02      	cmp	r3, #2
 8008e2a:	d901      	bls.n	8008e30 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008e2c:	2303      	movs	r3, #3
 8008e2e:	e006      	b.n	8008e3e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008e30:	4b05      	ldr	r3, [pc, #20]	; (8008e48 <RCCEx_PLL2_Config+0x15c>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d0f0      	beq.n	8008e1e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	58024400 	.word	0x58024400
 8008e4c:	ffff0007 	.word	0xffff0007

08008e50 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008e5e:	4b53      	ldr	r3, [pc, #332]	; (8008fac <RCCEx_PLL3_Config+0x15c>)
 8008e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e62:	f003 0303 	and.w	r3, r3, #3
 8008e66:	2b03      	cmp	r3, #3
 8008e68:	d101      	bne.n	8008e6e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e099      	b.n	8008fa2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008e6e:	4b4f      	ldr	r3, [pc, #316]	; (8008fac <RCCEx_PLL3_Config+0x15c>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a4e      	ldr	r2, [pc, #312]	; (8008fac <RCCEx_PLL3_Config+0x15c>)
 8008e74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e7a:	f7f8 ff11 	bl	8001ca0 <HAL_GetTick>
 8008e7e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008e80:	e008      	b.n	8008e94 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008e82:	f7f8 ff0d 	bl	8001ca0 <HAL_GetTick>
 8008e86:	4602      	mov	r2, r0
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	1ad3      	subs	r3, r2, r3
 8008e8c:	2b02      	cmp	r3, #2
 8008e8e:	d901      	bls.n	8008e94 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008e90:	2303      	movs	r3, #3
 8008e92:	e086      	b.n	8008fa2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008e94:	4b45      	ldr	r3, [pc, #276]	; (8008fac <RCCEx_PLL3_Config+0x15c>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d1f0      	bne.n	8008e82 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008ea0:	4b42      	ldr	r3, [pc, #264]	; (8008fac <RCCEx_PLL3_Config+0x15c>)
 8008ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	051b      	lsls	r3, r3, #20
 8008eae:	493f      	ldr	r1, [pc, #252]	; (8008fac <RCCEx_PLL3_Config+0x15c>)
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	628b      	str	r3, [r1, #40]	; 0x28
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	3b01      	subs	r3, #1
 8008eba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	3b01      	subs	r3, #1
 8008ec4:	025b      	lsls	r3, r3, #9
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	431a      	orrs	r2, r3
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	68db      	ldr	r3, [r3, #12]
 8008ece:	3b01      	subs	r3, #1
 8008ed0:	041b      	lsls	r3, r3, #16
 8008ed2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008ed6:	431a      	orrs	r2, r3
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	691b      	ldr	r3, [r3, #16]
 8008edc:	3b01      	subs	r3, #1
 8008ede:	061b      	lsls	r3, r3, #24
 8008ee0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008ee4:	4931      	ldr	r1, [pc, #196]	; (8008fac <RCCEx_PLL3_Config+0x15c>)
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008eea:	4b30      	ldr	r3, [pc, #192]	; (8008fac <RCCEx_PLL3_Config+0x15c>)
 8008eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	695b      	ldr	r3, [r3, #20]
 8008ef6:	492d      	ldr	r1, [pc, #180]	; (8008fac <RCCEx_PLL3_Config+0x15c>)
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008efc:	4b2b      	ldr	r3, [pc, #172]	; (8008fac <RCCEx_PLL3_Config+0x15c>)
 8008efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f00:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	699b      	ldr	r3, [r3, #24]
 8008f08:	4928      	ldr	r1, [pc, #160]	; (8008fac <RCCEx_PLL3_Config+0x15c>)
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008f0e:	4b27      	ldr	r3, [pc, #156]	; (8008fac <RCCEx_PLL3_Config+0x15c>)
 8008f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f12:	4a26      	ldr	r2, [pc, #152]	; (8008fac <RCCEx_PLL3_Config+0x15c>)
 8008f14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008f1a:	4b24      	ldr	r3, [pc, #144]	; (8008fac <RCCEx_PLL3_Config+0x15c>)
 8008f1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f1e:	4b24      	ldr	r3, [pc, #144]	; (8008fb0 <RCCEx_PLL3_Config+0x160>)
 8008f20:	4013      	ands	r3, r2
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	69d2      	ldr	r2, [r2, #28]
 8008f26:	00d2      	lsls	r2, r2, #3
 8008f28:	4920      	ldr	r1, [pc, #128]	; (8008fac <RCCEx_PLL3_Config+0x15c>)
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008f2e:	4b1f      	ldr	r3, [pc, #124]	; (8008fac <RCCEx_PLL3_Config+0x15c>)
 8008f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f32:	4a1e      	ldr	r2, [pc, #120]	; (8008fac <RCCEx_PLL3_Config+0x15c>)
 8008f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d106      	bne.n	8008f4e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008f40:	4b1a      	ldr	r3, [pc, #104]	; (8008fac <RCCEx_PLL3_Config+0x15c>)
 8008f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f44:	4a19      	ldr	r2, [pc, #100]	; (8008fac <RCCEx_PLL3_Config+0x15c>)
 8008f46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008f4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008f4c:	e00f      	b.n	8008f6e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d106      	bne.n	8008f62 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008f54:	4b15      	ldr	r3, [pc, #84]	; (8008fac <RCCEx_PLL3_Config+0x15c>)
 8008f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f58:	4a14      	ldr	r2, [pc, #80]	; (8008fac <RCCEx_PLL3_Config+0x15c>)
 8008f5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008f5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008f60:	e005      	b.n	8008f6e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008f62:	4b12      	ldr	r3, [pc, #72]	; (8008fac <RCCEx_PLL3_Config+0x15c>)
 8008f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f66:	4a11      	ldr	r2, [pc, #68]	; (8008fac <RCCEx_PLL3_Config+0x15c>)
 8008f68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f6c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008f6e:	4b0f      	ldr	r3, [pc, #60]	; (8008fac <RCCEx_PLL3_Config+0x15c>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a0e      	ldr	r2, [pc, #56]	; (8008fac <RCCEx_PLL3_Config+0x15c>)
 8008f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f7a:	f7f8 fe91 	bl	8001ca0 <HAL_GetTick>
 8008f7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008f80:	e008      	b.n	8008f94 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008f82:	f7f8 fe8d 	bl	8001ca0 <HAL_GetTick>
 8008f86:	4602      	mov	r2, r0
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	1ad3      	subs	r3, r2, r3
 8008f8c:	2b02      	cmp	r3, #2
 8008f8e:	d901      	bls.n	8008f94 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008f90:	2303      	movs	r3, #3
 8008f92:	e006      	b.n	8008fa2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008f94:	4b05      	ldr	r3, [pc, #20]	; (8008fac <RCCEx_PLL3_Config+0x15c>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d0f0      	beq.n	8008f82 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3710      	adds	r7, #16
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	58024400 	.word	0x58024400
 8008fb0:	ffff0007 	.word	0xffff0007

08008fb4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	f000 808a 	beq.w	80090dc <HAL_RTC_Init+0x128>
  {
    status = HAL_OK;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	73fb      	strb	r3, [r7, #15]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d106      	bne.n	8008fe6 <HAL_RTC_Init+0x32>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f7f7 ffb7 	bl	8000f54 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2202      	movs	r2, #2
 8008fea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	22ca      	movs	r2, #202	; 0xca
 8008ff4:	625a      	str	r2, [r3, #36]	; 0x24
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	2253      	movs	r2, #83	; 0x53
 8008ffc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 f89a 	bl	8009138 <RTC_EnterInitMode>
 8009004:	4603      	mov	r3, r0
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00a      	beq.n	8009020 <HAL_RTC_Init+0x6c>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	22ff      	movs	r2, #255	; 0xff
 8009010:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2204      	movs	r2, #4
 8009016:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	73fb      	strb	r3, [r7, #15]
 800901e:	e05d      	b.n	80090dc <HAL_RTC_Init+0x128>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	6899      	ldr	r1, [r3, #8]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	4b2f      	ldr	r3, [pc, #188]	; (80090e8 <HAL_RTC_Init+0x134>)
 800902c:	400b      	ands	r3, r1
 800902e:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	6899      	ldr	r1, [r3, #8]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	685a      	ldr	r2, [r3, #4]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	691b      	ldr	r3, [r3, #16]
 800903e:	431a      	orrs	r2, r3
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	699b      	ldr	r3, [r3, #24]
 8009044:	431a      	orrs	r2, r3
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	430a      	orrs	r2, r1
 800904c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	0419      	lsls	r1, r3, #16
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	68da      	ldr	r2, [r3, #12]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	430a      	orrs	r2, r1
 800905e:	611a      	str	r2, [r3, #16]
      /* Exit Initialization mode */
#if defined(RTC_ICSR_INIT)
      CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
#endif /* RTC_ICSR_INIT */
#if defined(RTC_ISR_INIT)
      CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	68da      	ldr	r2, [r3, #12]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800906e:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_INIT */

      /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	f003 0320 	and.w	r3, r3, #32
 800907a:	2b00      	cmp	r3, #0
 800907c:	d10f      	bne.n	800909e <HAL_RTC_Init+0xea>
      {
        if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 f834 	bl	80090ec <HAL_RTC_WaitForSynchro>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d009      	beq.n	800909e <HAL_RTC_Init+0xea>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	22ff      	movs	r2, #255	; 0xff
 8009090:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2204      	movs	r2, #4
 8009096:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          status = HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	73fb      	strb	r3, [r7, #15]
        }
      }

      if(status == HAL_OK)
 800909e:	7bfb      	ldrb	r3, [r7, #15]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d11b      	bne.n	80090dc <HAL_RTC_Init+0x128>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f022 0203 	bic.w	r2, r2, #3
 80090b2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	69da      	ldr	r2, [r3, #28]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	695b      	ldr	r3, [r3, #20]
 80090c2:	431a      	orrs	r2, r3
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	430a      	orrs	r2, r1
 80090ca:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	22ff      	movs	r2, #255	; 0xff
 80090d2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2201      	movs	r2, #1
 80090d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  /* return status */
  return status;
 80090dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	ff8fffbf 	.word	0xff8fffbf

080090ec <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	68da      	ldr	r2, [r3, #12]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009102:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8009104:	f7f8 fdcc 	bl	8001ca0 <HAL_GetTick>
 8009108:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800910a:	e009      	b.n	8009120 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800910c:	f7f8 fdc8 	bl	8001ca0 <HAL_GetTick>
 8009110:	4602      	mov	r2, r0
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	1ad3      	subs	r3, r2, r3
 8009116:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800911a:	d901      	bls.n	8009120 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800911c:	2303      	movs	r3, #3
 800911e:	e007      	b.n	8009130 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	f003 0320 	and.w	r3, r3, #32
 800912a:	2b00      	cmp	r3, #0
 800912c:	d0ee      	beq.n	800910c <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800912e:	2300      	movs	r3, #0
}
 8009130:	4618      	mov	r0, r3
 8009132:	3710      	adds	r7, #16
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800914a:	2b00      	cmp	r3, #0
 800914c:	d119      	bne.n	8009182 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f04f 32ff 	mov.w	r2, #4294967295
 8009156:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009158:	f7f8 fda2 	bl	8001ca0 <HAL_GetTick>
 800915c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800915e:	e009      	b.n	8009174 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009160:	f7f8 fd9e 	bl	8001ca0 <HAL_GetTick>
 8009164:	4602      	mov	r2, r0
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	1ad3      	subs	r3, r2, r3
 800916a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800916e:	d901      	bls.n	8009174 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8009170:	2303      	movs	r3, #3
 8009172:	e007      	b.n	8009184 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	68db      	ldr	r3, [r3, #12]
 800917a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800917e:	2b00      	cmp	r3, #0
 8009180:	d0ee      	beq.n	8009160 <RTC_EnterInitMode+0x28>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return HAL_OK;
 8009182:	2300      	movs	r3, #0
}
 8009184:	4618      	mov	r0, r3
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8009194:	2300      	movs	r3, #0
 8009196:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d101      	bne.n	80091a2 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800919e:	2301      	movs	r3, #1
 80091a0:	e0e2      	b.n	8009368 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a70      	ldr	r2, [pc, #448]	; (8009370 <HAL_SPI_Init+0x1e4>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d00f      	beq.n	80091d2 <HAL_SPI_Init+0x46>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a6f      	ldr	r2, [pc, #444]	; (8009374 <HAL_SPI_Init+0x1e8>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d00a      	beq.n	80091d2 <HAL_SPI_Init+0x46>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a6d      	ldr	r2, [pc, #436]	; (8009378 <HAL_SPI_Init+0x1ec>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d005      	beq.n	80091d2 <HAL_SPI_Init+0x46>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	2b0f      	cmp	r3, #15
 80091cc:	d901      	bls.n	80091d2 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	e0ca      	b.n	8009368 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 f8d2 	bl	800937c <SPI_GetPacketSize>
 80091d8:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a64      	ldr	r2, [pc, #400]	; (8009370 <HAL_SPI_Init+0x1e4>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d00c      	beq.n	80091fe <HAL_SPI_Init+0x72>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a62      	ldr	r2, [pc, #392]	; (8009374 <HAL_SPI_Init+0x1e8>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d007      	beq.n	80091fe <HAL_SPI_Init+0x72>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a61      	ldr	r2, [pc, #388]	; (8009378 <HAL_SPI_Init+0x1ec>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d002      	beq.n	80091fe <HAL_SPI_Init+0x72>
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	2b08      	cmp	r3, #8
 80091fc:	d811      	bhi.n	8009222 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009202:	4a5b      	ldr	r2, [pc, #364]	; (8009370 <HAL_SPI_Init+0x1e4>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d009      	beq.n	800921c <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a59      	ldr	r2, [pc, #356]	; (8009374 <HAL_SPI_Init+0x1e8>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d004      	beq.n	800921c <HAL_SPI_Init+0x90>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4a58      	ldr	r2, [pc, #352]	; (8009378 <HAL_SPI_Init+0x1ec>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d104      	bne.n	8009226 <HAL_SPI_Init+0x9a>
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	2b10      	cmp	r3, #16
 8009220:	d901      	bls.n	8009226 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8009222:	2301      	movs	r3, #1
 8009224:	e0a0      	b.n	8009368 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800922c:	b2db      	uxtb	r3, r3
 800922e:	2b00      	cmp	r3, #0
 8009230:	d106      	bne.n	8009240 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f7f7 fffc 	bl	8001238 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2202      	movs	r2, #2
 8009244:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	681a      	ldr	r2, [r3, #0]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f022 0201 	bic.w	r2, r2, #1
 8009256:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	699b      	ldr	r3, [r3, #24]
 800925c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009260:	d110      	bne.n	8009284 <HAL_SPI_Init+0xf8>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800926a:	d10b      	bne.n	8009284 <HAL_SPI_Init+0xf8>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009270:	2b00      	cmp	r3, #0
 8009272:	d107      	bne.n	8009284 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009282:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	69da      	ldr	r2, [r3, #28]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800928c:	431a      	orrs	r2, r3
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	431a      	orrs	r2, r3
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009296:	ea42 0103 	orr.w	r1, r2, r3
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	68da      	ldr	r2, [r3, #12]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	430a      	orrs	r2, r1
 80092a4:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ae:	431a      	orrs	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092b4:	431a      	orrs	r2, r3
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	699b      	ldr	r3, [r3, #24]
 80092ba:	431a      	orrs	r2, r3
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	691b      	ldr	r3, [r3, #16]
 80092c0:	431a      	orrs	r2, r3
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	695b      	ldr	r3, [r3, #20]
 80092c6:	431a      	orrs	r2, r3
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6a1b      	ldr	r3, [r3, #32]
 80092cc:	431a      	orrs	r2, r3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	431a      	orrs	r2, r3
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092d8:	431a      	orrs	r2, r3
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	431a      	orrs	r2, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092e4:	ea42 0103 	orr.w	r1, r2, r3
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	430a      	orrs	r2, r1
 80092f2:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d113      	bne.n	8009324 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800930e:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009322:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f022 0201 	bic.w	r2, r2, #1
 8009332:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800933c:	2b00      	cmp	r3, #0
 800933e:	d00a      	beq.n	8009356 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	430a      	orrs	r2, r1
 8009354:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2201      	movs	r2, #1
 8009362:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009366:	2300      	movs	r3, #0
}
 8009368:	4618      	mov	r0, r3
 800936a:	3710      	adds	r7, #16
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}
 8009370:	40013000 	.word	0x40013000
 8009374:	40003800 	.word	0x40003800
 8009378:	40003c00 	.word	0x40003c00

0800937c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800937c:	b480      	push	{r7}
 800937e:	b085      	sub	sp, #20
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009388:	095b      	lsrs	r3, r3, #5
 800938a:	3301      	adds	r3, #1
 800938c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	3301      	adds	r3, #1
 8009394:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	3307      	adds	r3, #7
 800939a:	08db      	lsrs	r3, r3, #3
 800939c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	68fa      	ldr	r2, [r7, #12]
 80093a2:	fb02 f303 	mul.w	r3, r2, r3
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3714      	adds	r7, #20
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr

080093b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80093b2:	b580      	push	{r7, lr}
 80093b4:	b082      	sub	sp, #8
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d101      	bne.n	80093c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80093c0:	2301      	movs	r3, #1
 80093c2:	e01d      	b.n	8009400 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d106      	bne.n	80093de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2200      	movs	r2, #0
 80093d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f7f8 fa4b 	bl	8001874 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2202      	movs	r2, #2
 80093e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	3304      	adds	r3, #4
 80093ee:	4619      	mov	r1, r3
 80093f0:	4610      	mov	r0, r2
 80093f2:	f000 f921 	bl	8009638 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2201      	movs	r2, #1
 80093fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80093fe:	2300      	movs	r3, #0
}
 8009400:	4618      	mov	r0, r3
 8009402:	3708      	adds	r7, #8
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800941a:	2b01      	cmp	r3, #1
 800941c:	d101      	bne.n	8009422 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800941e:	2302      	movs	r3, #2
 8009420:	e105      	b.n	800962e <HAL_TIM_PWM_ConfigChannel+0x226>
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2201      	movs	r2, #1
 8009426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2202      	movs	r2, #2
 800942e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2b14      	cmp	r3, #20
 8009436:	f200 80f0 	bhi.w	800961a <HAL_TIM_PWM_ConfigChannel+0x212>
 800943a:	a201      	add	r2, pc, #4	; (adr r2, 8009440 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800943c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009440:	08009495 	.word	0x08009495
 8009444:	0800961b 	.word	0x0800961b
 8009448:	0800961b 	.word	0x0800961b
 800944c:	0800961b 	.word	0x0800961b
 8009450:	080094d5 	.word	0x080094d5
 8009454:	0800961b 	.word	0x0800961b
 8009458:	0800961b 	.word	0x0800961b
 800945c:	0800961b 	.word	0x0800961b
 8009460:	08009517 	.word	0x08009517
 8009464:	0800961b 	.word	0x0800961b
 8009468:	0800961b 	.word	0x0800961b
 800946c:	0800961b 	.word	0x0800961b
 8009470:	08009557 	.word	0x08009557
 8009474:	0800961b 	.word	0x0800961b
 8009478:	0800961b 	.word	0x0800961b
 800947c:	0800961b 	.word	0x0800961b
 8009480:	08009599 	.word	0x08009599
 8009484:	0800961b 	.word	0x0800961b
 8009488:	0800961b 	.word	0x0800961b
 800948c:	0800961b 	.word	0x0800961b
 8009490:	080095d9 	.word	0x080095d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	68b9      	ldr	r1, [r7, #8]
 800949a:	4618      	mov	r0, r3
 800949c:	f000 f966 	bl	800976c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	699a      	ldr	r2, [r3, #24]
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f042 0208 	orr.w	r2, r2, #8
 80094ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	699a      	ldr	r2, [r3, #24]
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f022 0204 	bic.w	r2, r2, #4
 80094be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	6999      	ldr	r1, [r3, #24]
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	691a      	ldr	r2, [r3, #16]
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	430a      	orrs	r2, r1
 80094d0:	619a      	str	r2, [r3, #24]
      break;
 80094d2:	e0a3      	b.n	800961c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	68b9      	ldr	r1, [r7, #8]
 80094da:	4618      	mov	r0, r3
 80094dc:	f000 f9d6 	bl	800988c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	699a      	ldr	r2, [r3, #24]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	699a      	ldr	r2, [r3, #24]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	6999      	ldr	r1, [r3, #24]
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	691b      	ldr	r3, [r3, #16]
 800950a:	021a      	lsls	r2, r3, #8
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	430a      	orrs	r2, r1
 8009512:	619a      	str	r2, [r3, #24]
      break;
 8009514:	e082      	b.n	800961c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	68b9      	ldr	r1, [r7, #8]
 800951c:	4618      	mov	r0, r3
 800951e:	f000 fa3f 	bl	80099a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	69da      	ldr	r2, [r3, #28]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f042 0208 	orr.w	r2, r2, #8
 8009530:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	69da      	ldr	r2, [r3, #28]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f022 0204 	bic.w	r2, r2, #4
 8009540:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	69d9      	ldr	r1, [r3, #28]
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	691a      	ldr	r2, [r3, #16]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	430a      	orrs	r2, r1
 8009552:	61da      	str	r2, [r3, #28]
      break;
 8009554:	e062      	b.n	800961c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	68b9      	ldr	r1, [r7, #8]
 800955c:	4618      	mov	r0, r3
 800955e:	f000 faa5 	bl	8009aac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	69da      	ldr	r2, [r3, #28]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009570:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	69da      	ldr	r2, [r3, #28]
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009580:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	69d9      	ldr	r1, [r3, #28]
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	691b      	ldr	r3, [r3, #16]
 800958c:	021a      	lsls	r2, r3, #8
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	430a      	orrs	r2, r1
 8009594:	61da      	str	r2, [r3, #28]
      break;
 8009596:	e041      	b.n	800961c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	68b9      	ldr	r1, [r7, #8]
 800959e:	4618      	mov	r0, r3
 80095a0:	f000 faec 	bl	8009b7c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f042 0208 	orr.w	r2, r2, #8
 80095b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f022 0204 	bic.w	r2, r2, #4
 80095c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	691a      	ldr	r2, [r3, #16]
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	430a      	orrs	r2, r1
 80095d4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80095d6:	e021      	b.n	800961c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	68b9      	ldr	r1, [r7, #8]
 80095de:	4618      	mov	r0, r3
 80095e0:	f000 fb2e 	bl	8009c40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80095f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009602:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	691b      	ldr	r3, [r3, #16]
 800960e:	021a      	lsls	r2, r3, #8
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	430a      	orrs	r2, r1
 8009616:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009618:	e000      	b.n	800961c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800961a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2201      	movs	r2, #1
 8009620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2200      	movs	r2, #0
 8009628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800962c:	2300      	movs	r3, #0
}
 800962e:	4618      	mov	r0, r3
 8009630:	3710      	adds	r7, #16
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop

08009638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009638:	b480      	push	{r7}
 800963a:	b085      	sub	sp, #20
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	4a40      	ldr	r2, [pc, #256]	; (800974c <TIM_Base_SetConfig+0x114>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d013      	beq.n	8009678 <TIM_Base_SetConfig+0x40>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009656:	d00f      	beq.n	8009678 <TIM_Base_SetConfig+0x40>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	4a3d      	ldr	r2, [pc, #244]	; (8009750 <TIM_Base_SetConfig+0x118>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d00b      	beq.n	8009678 <TIM_Base_SetConfig+0x40>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	4a3c      	ldr	r2, [pc, #240]	; (8009754 <TIM_Base_SetConfig+0x11c>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d007      	beq.n	8009678 <TIM_Base_SetConfig+0x40>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	4a3b      	ldr	r2, [pc, #236]	; (8009758 <TIM_Base_SetConfig+0x120>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d003      	beq.n	8009678 <TIM_Base_SetConfig+0x40>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	4a3a      	ldr	r2, [pc, #232]	; (800975c <TIM_Base_SetConfig+0x124>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d108      	bne.n	800968a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800967e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	68fa      	ldr	r2, [r7, #12]
 8009686:	4313      	orrs	r3, r2
 8009688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	4a2f      	ldr	r2, [pc, #188]	; (800974c <TIM_Base_SetConfig+0x114>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d01f      	beq.n	80096d2 <TIM_Base_SetConfig+0x9a>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009698:	d01b      	beq.n	80096d2 <TIM_Base_SetConfig+0x9a>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	4a2c      	ldr	r2, [pc, #176]	; (8009750 <TIM_Base_SetConfig+0x118>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d017      	beq.n	80096d2 <TIM_Base_SetConfig+0x9a>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	4a2b      	ldr	r2, [pc, #172]	; (8009754 <TIM_Base_SetConfig+0x11c>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d013      	beq.n	80096d2 <TIM_Base_SetConfig+0x9a>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	4a2a      	ldr	r2, [pc, #168]	; (8009758 <TIM_Base_SetConfig+0x120>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d00f      	beq.n	80096d2 <TIM_Base_SetConfig+0x9a>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	4a29      	ldr	r2, [pc, #164]	; (800975c <TIM_Base_SetConfig+0x124>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d00b      	beq.n	80096d2 <TIM_Base_SetConfig+0x9a>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	4a28      	ldr	r2, [pc, #160]	; (8009760 <TIM_Base_SetConfig+0x128>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d007      	beq.n	80096d2 <TIM_Base_SetConfig+0x9a>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	4a27      	ldr	r2, [pc, #156]	; (8009764 <TIM_Base_SetConfig+0x12c>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d003      	beq.n	80096d2 <TIM_Base_SetConfig+0x9a>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	4a26      	ldr	r2, [pc, #152]	; (8009768 <TIM_Base_SetConfig+0x130>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d108      	bne.n	80096e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	68fa      	ldr	r2, [r7, #12]
 80096e0:	4313      	orrs	r3, r2
 80096e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	695b      	ldr	r3, [r3, #20]
 80096ee:	4313      	orrs	r3, r2
 80096f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	68fa      	ldr	r2, [r7, #12]
 80096f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	689a      	ldr	r2, [r3, #8]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	4a10      	ldr	r2, [pc, #64]	; (800974c <TIM_Base_SetConfig+0x114>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d00f      	beq.n	8009730 <TIM_Base_SetConfig+0xf8>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	4a12      	ldr	r2, [pc, #72]	; (800975c <TIM_Base_SetConfig+0x124>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d00b      	beq.n	8009730 <TIM_Base_SetConfig+0xf8>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	4a11      	ldr	r2, [pc, #68]	; (8009760 <TIM_Base_SetConfig+0x128>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d007      	beq.n	8009730 <TIM_Base_SetConfig+0xf8>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	4a10      	ldr	r2, [pc, #64]	; (8009764 <TIM_Base_SetConfig+0x12c>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d003      	beq.n	8009730 <TIM_Base_SetConfig+0xf8>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	4a0f      	ldr	r2, [pc, #60]	; (8009768 <TIM_Base_SetConfig+0x130>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d103      	bne.n	8009738 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	691a      	ldr	r2, [r3, #16]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2201      	movs	r2, #1
 800973c:	615a      	str	r2, [r3, #20]
}
 800973e:	bf00      	nop
 8009740:	3714      	adds	r7, #20
 8009742:	46bd      	mov	sp, r7
 8009744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009748:	4770      	bx	lr
 800974a:	bf00      	nop
 800974c:	40010000 	.word	0x40010000
 8009750:	40000400 	.word	0x40000400
 8009754:	40000800 	.word	0x40000800
 8009758:	40000c00 	.word	0x40000c00
 800975c:	40010400 	.word	0x40010400
 8009760:	40014000 	.word	0x40014000
 8009764:	40014400 	.word	0x40014400
 8009768:	40014800 	.word	0x40014800

0800976c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800976c:	b480      	push	{r7}
 800976e:	b087      	sub	sp, #28
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6a1b      	ldr	r3, [r3, #32]
 800977a:	f023 0201 	bic.w	r2, r3, #1
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6a1b      	ldr	r3, [r3, #32]
 8009786:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	699b      	ldr	r3, [r3, #24]
 8009792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009794:	68fa      	ldr	r2, [r7, #12]
 8009796:	4b37      	ldr	r3, [pc, #220]	; (8009874 <TIM_OC1_SetConfig+0x108>)
 8009798:	4013      	ands	r3, r2
 800979a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f023 0303 	bic.w	r3, r3, #3
 80097a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	68fa      	ldr	r2, [r7, #12]
 80097aa:	4313      	orrs	r3, r2
 80097ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	f023 0302 	bic.w	r3, r3, #2
 80097b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	697a      	ldr	r2, [r7, #20]
 80097bc:	4313      	orrs	r3, r2
 80097be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	4a2d      	ldr	r2, [pc, #180]	; (8009878 <TIM_OC1_SetConfig+0x10c>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d00f      	beq.n	80097e8 <TIM_OC1_SetConfig+0x7c>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	4a2c      	ldr	r2, [pc, #176]	; (800987c <TIM_OC1_SetConfig+0x110>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d00b      	beq.n	80097e8 <TIM_OC1_SetConfig+0x7c>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	4a2b      	ldr	r2, [pc, #172]	; (8009880 <TIM_OC1_SetConfig+0x114>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d007      	beq.n	80097e8 <TIM_OC1_SetConfig+0x7c>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	4a2a      	ldr	r2, [pc, #168]	; (8009884 <TIM_OC1_SetConfig+0x118>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d003      	beq.n	80097e8 <TIM_OC1_SetConfig+0x7c>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	4a29      	ldr	r2, [pc, #164]	; (8009888 <TIM_OC1_SetConfig+0x11c>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d10c      	bne.n	8009802 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	f023 0308 	bic.w	r3, r3, #8
 80097ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	697a      	ldr	r2, [r7, #20]
 80097f6:	4313      	orrs	r3, r2
 80097f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	f023 0304 	bic.w	r3, r3, #4
 8009800:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	4a1c      	ldr	r2, [pc, #112]	; (8009878 <TIM_OC1_SetConfig+0x10c>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d00f      	beq.n	800982a <TIM_OC1_SetConfig+0xbe>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	4a1b      	ldr	r2, [pc, #108]	; (800987c <TIM_OC1_SetConfig+0x110>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d00b      	beq.n	800982a <TIM_OC1_SetConfig+0xbe>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	4a1a      	ldr	r2, [pc, #104]	; (8009880 <TIM_OC1_SetConfig+0x114>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d007      	beq.n	800982a <TIM_OC1_SetConfig+0xbe>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	4a19      	ldr	r2, [pc, #100]	; (8009884 <TIM_OC1_SetConfig+0x118>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d003      	beq.n	800982a <TIM_OC1_SetConfig+0xbe>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	4a18      	ldr	r2, [pc, #96]	; (8009888 <TIM_OC1_SetConfig+0x11c>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d111      	bne.n	800984e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009830:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009838:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	695b      	ldr	r3, [r3, #20]
 800983e:	693a      	ldr	r2, [r7, #16]
 8009840:	4313      	orrs	r3, r2
 8009842:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	699b      	ldr	r3, [r3, #24]
 8009848:	693a      	ldr	r2, [r7, #16]
 800984a:	4313      	orrs	r3, r2
 800984c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	693a      	ldr	r2, [r7, #16]
 8009852:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	68fa      	ldr	r2, [r7, #12]
 8009858:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	685a      	ldr	r2, [r3, #4]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	697a      	ldr	r2, [r7, #20]
 8009866:	621a      	str	r2, [r3, #32]
}
 8009868:	bf00      	nop
 800986a:	371c      	adds	r7, #28
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr
 8009874:	fffeff8f 	.word	0xfffeff8f
 8009878:	40010000 	.word	0x40010000
 800987c:	40010400 	.word	0x40010400
 8009880:	40014000 	.word	0x40014000
 8009884:	40014400 	.word	0x40014400
 8009888:	40014800 	.word	0x40014800

0800988c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800988c:	b480      	push	{r7}
 800988e:	b087      	sub	sp, #28
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6a1b      	ldr	r3, [r3, #32]
 800989a:	f023 0210 	bic.w	r2, r3, #16
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6a1b      	ldr	r3, [r3, #32]
 80098a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	699b      	ldr	r3, [r3, #24]
 80098b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80098b4:	68fa      	ldr	r2, [r7, #12]
 80098b6:	4b34      	ldr	r3, [pc, #208]	; (8009988 <TIM_OC2_SetConfig+0xfc>)
 80098b8:	4013      	ands	r3, r2
 80098ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	021b      	lsls	r3, r3, #8
 80098ca:	68fa      	ldr	r2, [r7, #12]
 80098cc:	4313      	orrs	r3, r2
 80098ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	f023 0320 	bic.w	r3, r3, #32
 80098d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	011b      	lsls	r3, r3, #4
 80098de:	697a      	ldr	r2, [r7, #20]
 80098e0:	4313      	orrs	r3, r2
 80098e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	4a29      	ldr	r2, [pc, #164]	; (800998c <TIM_OC2_SetConfig+0x100>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d003      	beq.n	80098f4 <TIM_OC2_SetConfig+0x68>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	4a28      	ldr	r2, [pc, #160]	; (8009990 <TIM_OC2_SetConfig+0x104>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d10d      	bne.n	8009910 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	011b      	lsls	r3, r3, #4
 8009902:	697a      	ldr	r2, [r7, #20]
 8009904:	4313      	orrs	r3, r2
 8009906:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800990e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	4a1e      	ldr	r2, [pc, #120]	; (800998c <TIM_OC2_SetConfig+0x100>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d00f      	beq.n	8009938 <TIM_OC2_SetConfig+0xac>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	4a1d      	ldr	r2, [pc, #116]	; (8009990 <TIM_OC2_SetConfig+0x104>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d00b      	beq.n	8009938 <TIM_OC2_SetConfig+0xac>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	4a1c      	ldr	r2, [pc, #112]	; (8009994 <TIM_OC2_SetConfig+0x108>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d007      	beq.n	8009938 <TIM_OC2_SetConfig+0xac>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	4a1b      	ldr	r2, [pc, #108]	; (8009998 <TIM_OC2_SetConfig+0x10c>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d003      	beq.n	8009938 <TIM_OC2_SetConfig+0xac>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	4a1a      	ldr	r2, [pc, #104]	; (800999c <TIM_OC2_SetConfig+0x110>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d113      	bne.n	8009960 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800993e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009946:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	695b      	ldr	r3, [r3, #20]
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	693a      	ldr	r2, [r7, #16]
 8009950:	4313      	orrs	r3, r2
 8009952:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	699b      	ldr	r3, [r3, #24]
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	693a      	ldr	r2, [r7, #16]
 800995c:	4313      	orrs	r3, r2
 800995e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	693a      	ldr	r2, [r7, #16]
 8009964:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	68fa      	ldr	r2, [r7, #12]
 800996a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	685a      	ldr	r2, [r3, #4]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	697a      	ldr	r2, [r7, #20]
 8009978:	621a      	str	r2, [r3, #32]
}
 800997a:	bf00      	nop
 800997c:	371c      	adds	r7, #28
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop
 8009988:	feff8fff 	.word	0xfeff8fff
 800998c:	40010000 	.word	0x40010000
 8009990:	40010400 	.word	0x40010400
 8009994:	40014000 	.word	0x40014000
 8009998:	40014400 	.word	0x40014400
 800999c:	40014800 	.word	0x40014800

080099a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b087      	sub	sp, #28
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6a1b      	ldr	r3, [r3, #32]
 80099ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6a1b      	ldr	r3, [r3, #32]
 80099ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	69db      	ldr	r3, [r3, #28]
 80099c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f023 0303 	bic.w	r3, r3, #3
 80099d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	68fa      	ldr	r2, [r7, #12]
 80099de:	4313      	orrs	r3, r2
 80099e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80099e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	689b      	ldr	r3, [r3, #8]
 80099ee:	021b      	lsls	r3, r3, #8
 80099f0:	697a      	ldr	r2, [r7, #20]
 80099f2:	4313      	orrs	r3, r2
 80099f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	4a27      	ldr	r2, [pc, #156]	; (8009a98 <TIM_OC3_SetConfig+0xf8>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d003      	beq.n	8009a06 <TIM_OC3_SetConfig+0x66>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	4a26      	ldr	r2, [pc, #152]	; (8009a9c <TIM_OC3_SetConfig+0xfc>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d10d      	bne.n	8009a22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009a0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	68db      	ldr	r3, [r3, #12]
 8009a12:	021b      	lsls	r3, r3, #8
 8009a14:	697a      	ldr	r2, [r7, #20]
 8009a16:	4313      	orrs	r3, r2
 8009a18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	4a1c      	ldr	r2, [pc, #112]	; (8009a98 <TIM_OC3_SetConfig+0xf8>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d00f      	beq.n	8009a4a <TIM_OC3_SetConfig+0xaa>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	4a1b      	ldr	r2, [pc, #108]	; (8009a9c <TIM_OC3_SetConfig+0xfc>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d00b      	beq.n	8009a4a <TIM_OC3_SetConfig+0xaa>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	4a1a      	ldr	r2, [pc, #104]	; (8009aa0 <TIM_OC3_SetConfig+0x100>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d007      	beq.n	8009a4a <TIM_OC3_SetConfig+0xaa>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	4a19      	ldr	r2, [pc, #100]	; (8009aa4 <TIM_OC3_SetConfig+0x104>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d003      	beq.n	8009a4a <TIM_OC3_SetConfig+0xaa>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	4a18      	ldr	r2, [pc, #96]	; (8009aa8 <TIM_OC3_SetConfig+0x108>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d113      	bne.n	8009a72 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	695b      	ldr	r3, [r3, #20]
 8009a5e:	011b      	lsls	r3, r3, #4
 8009a60:	693a      	ldr	r2, [r7, #16]
 8009a62:	4313      	orrs	r3, r2
 8009a64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	699b      	ldr	r3, [r3, #24]
 8009a6a:	011b      	lsls	r3, r3, #4
 8009a6c:	693a      	ldr	r2, [r7, #16]
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	693a      	ldr	r2, [r7, #16]
 8009a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	68fa      	ldr	r2, [r7, #12]
 8009a7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	685a      	ldr	r2, [r3, #4]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	697a      	ldr	r2, [r7, #20]
 8009a8a:	621a      	str	r2, [r3, #32]
}
 8009a8c:	bf00      	nop
 8009a8e:	371c      	adds	r7, #28
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr
 8009a98:	40010000 	.word	0x40010000
 8009a9c:	40010400 	.word	0x40010400
 8009aa0:	40014000 	.word	0x40014000
 8009aa4:	40014400 	.word	0x40014400
 8009aa8:	40014800 	.word	0x40014800

08009aac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b087      	sub	sp, #28
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6a1b      	ldr	r3, [r3, #32]
 8009aba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6a1b      	ldr	r3, [r3, #32]
 8009ac6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	69db      	ldr	r3, [r3, #28]
 8009ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ae2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	021b      	lsls	r3, r3, #8
 8009aea:	68fa      	ldr	r2, [r7, #12]
 8009aec:	4313      	orrs	r3, r2
 8009aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009af6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	689b      	ldr	r3, [r3, #8]
 8009afc:	031b      	lsls	r3, r3, #12
 8009afe:	693a      	ldr	r2, [r7, #16]
 8009b00:	4313      	orrs	r3, r2
 8009b02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	4a18      	ldr	r2, [pc, #96]	; (8009b68 <TIM_OC4_SetConfig+0xbc>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d00f      	beq.n	8009b2c <TIM_OC4_SetConfig+0x80>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	4a17      	ldr	r2, [pc, #92]	; (8009b6c <TIM_OC4_SetConfig+0xc0>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d00b      	beq.n	8009b2c <TIM_OC4_SetConfig+0x80>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	4a16      	ldr	r2, [pc, #88]	; (8009b70 <TIM_OC4_SetConfig+0xc4>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d007      	beq.n	8009b2c <TIM_OC4_SetConfig+0x80>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	4a15      	ldr	r2, [pc, #84]	; (8009b74 <TIM_OC4_SetConfig+0xc8>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d003      	beq.n	8009b2c <TIM_OC4_SetConfig+0x80>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	4a14      	ldr	r2, [pc, #80]	; (8009b78 <TIM_OC4_SetConfig+0xcc>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d109      	bne.n	8009b40 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	695b      	ldr	r3, [r3, #20]
 8009b38:	019b      	lsls	r3, r3, #6
 8009b3a:	697a      	ldr	r2, [r7, #20]
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	697a      	ldr	r2, [r7, #20]
 8009b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	68fa      	ldr	r2, [r7, #12]
 8009b4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	685a      	ldr	r2, [r3, #4]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	693a      	ldr	r2, [r7, #16]
 8009b58:	621a      	str	r2, [r3, #32]
}
 8009b5a:	bf00      	nop
 8009b5c:	371c      	adds	r7, #28
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr
 8009b66:	bf00      	nop
 8009b68:	40010000 	.word	0x40010000
 8009b6c:	40010400 	.word	0x40010400
 8009b70:	40014000 	.word	0x40014000
 8009b74:	40014400 	.word	0x40014400
 8009b78:	40014800 	.word	0x40014800

08009b7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b087      	sub	sp, #28
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6a1b      	ldr	r3, [r3, #32]
 8009b8a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6a1b      	ldr	r3, [r3, #32]
 8009b96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	685b      	ldr	r3, [r3, #4]
 8009b9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009baa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	68fa      	ldr	r2, [r7, #12]
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009bbc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	689b      	ldr	r3, [r3, #8]
 8009bc2:	041b      	lsls	r3, r3, #16
 8009bc4:	693a      	ldr	r2, [r7, #16]
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	4a17      	ldr	r2, [pc, #92]	; (8009c2c <TIM_OC5_SetConfig+0xb0>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d00f      	beq.n	8009bf2 <TIM_OC5_SetConfig+0x76>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	4a16      	ldr	r2, [pc, #88]	; (8009c30 <TIM_OC5_SetConfig+0xb4>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d00b      	beq.n	8009bf2 <TIM_OC5_SetConfig+0x76>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	4a15      	ldr	r2, [pc, #84]	; (8009c34 <TIM_OC5_SetConfig+0xb8>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d007      	beq.n	8009bf2 <TIM_OC5_SetConfig+0x76>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	4a14      	ldr	r2, [pc, #80]	; (8009c38 <TIM_OC5_SetConfig+0xbc>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d003      	beq.n	8009bf2 <TIM_OC5_SetConfig+0x76>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	4a13      	ldr	r2, [pc, #76]	; (8009c3c <TIM_OC5_SetConfig+0xc0>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d109      	bne.n	8009c06 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009bf8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	695b      	ldr	r3, [r3, #20]
 8009bfe:	021b      	lsls	r3, r3, #8
 8009c00:	697a      	ldr	r2, [r7, #20]
 8009c02:	4313      	orrs	r3, r2
 8009c04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	697a      	ldr	r2, [r7, #20]
 8009c0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	68fa      	ldr	r2, [r7, #12]
 8009c10:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	685a      	ldr	r2, [r3, #4]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	693a      	ldr	r2, [r7, #16]
 8009c1e:	621a      	str	r2, [r3, #32]
}
 8009c20:	bf00      	nop
 8009c22:	371c      	adds	r7, #28
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr
 8009c2c:	40010000 	.word	0x40010000
 8009c30:	40010400 	.word	0x40010400
 8009c34:	40014000 	.word	0x40014000
 8009c38:	40014400 	.word	0x40014400
 8009c3c:	40014800 	.word	0x40014800

08009c40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b087      	sub	sp, #28
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6a1b      	ldr	r3, [r3, #32]
 8009c4e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6a1b      	ldr	r3, [r3, #32]
 8009c5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	021b      	lsls	r3, r3, #8
 8009c76:	68fa      	ldr	r2, [r7, #12]
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009c82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	689b      	ldr	r3, [r3, #8]
 8009c88:	051b      	lsls	r3, r3, #20
 8009c8a:	693a      	ldr	r2, [r7, #16]
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	4a18      	ldr	r2, [pc, #96]	; (8009cf4 <TIM_OC6_SetConfig+0xb4>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d00f      	beq.n	8009cb8 <TIM_OC6_SetConfig+0x78>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	4a17      	ldr	r2, [pc, #92]	; (8009cf8 <TIM_OC6_SetConfig+0xb8>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d00b      	beq.n	8009cb8 <TIM_OC6_SetConfig+0x78>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	4a16      	ldr	r2, [pc, #88]	; (8009cfc <TIM_OC6_SetConfig+0xbc>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d007      	beq.n	8009cb8 <TIM_OC6_SetConfig+0x78>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	4a15      	ldr	r2, [pc, #84]	; (8009d00 <TIM_OC6_SetConfig+0xc0>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d003      	beq.n	8009cb8 <TIM_OC6_SetConfig+0x78>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	4a14      	ldr	r2, [pc, #80]	; (8009d04 <TIM_OC6_SetConfig+0xc4>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d109      	bne.n	8009ccc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009cbe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	695b      	ldr	r3, [r3, #20]
 8009cc4:	029b      	lsls	r3, r3, #10
 8009cc6:	697a      	ldr	r2, [r7, #20]
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	697a      	ldr	r2, [r7, #20]
 8009cd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	68fa      	ldr	r2, [r7, #12]
 8009cd6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	685a      	ldr	r2, [r3, #4]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	693a      	ldr	r2, [r7, #16]
 8009ce4:	621a      	str	r2, [r3, #32]
}
 8009ce6:	bf00      	nop
 8009ce8:	371c      	adds	r7, #28
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr
 8009cf2:	bf00      	nop
 8009cf4:	40010000 	.word	0x40010000
 8009cf8:	40010400 	.word	0x40010400
 8009cfc:	40014000 	.word	0x40014000
 8009d00:	40014400 	.word	0x40014400
 8009d04:	40014800 	.word	0x40014800

08009d08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b085      	sub	sp, #20
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	d101      	bne.n	8009d20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009d1c:	2302      	movs	r3, #2
 8009d1e:	e068      	b.n	8009df2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2201      	movs	r2, #1
 8009d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2202      	movs	r2, #2
 8009d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a2e      	ldr	r2, [pc, #184]	; (8009e00 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d004      	beq.n	8009d54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a2d      	ldr	r2, [pc, #180]	; (8009e04 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d108      	bne.n	8009d66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009d5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	4313      	orrs	r3, r2
 8009d64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	68fa      	ldr	r2, [r7, #12]
 8009d74:	4313      	orrs	r3, r2
 8009d76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	68fa      	ldr	r2, [r7, #12]
 8009d7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4a1e      	ldr	r2, [pc, #120]	; (8009e00 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d01d      	beq.n	8009dc6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d92:	d018      	beq.n	8009dc6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a1b      	ldr	r2, [pc, #108]	; (8009e08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d013      	beq.n	8009dc6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	4a1a      	ldr	r2, [pc, #104]	; (8009e0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d00e      	beq.n	8009dc6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4a18      	ldr	r2, [pc, #96]	; (8009e10 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d009      	beq.n	8009dc6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4a13      	ldr	r2, [pc, #76]	; (8009e04 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d004      	beq.n	8009dc6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a14      	ldr	r2, [pc, #80]	; (8009e14 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d10c      	bne.n	8009de0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009dcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	689b      	ldr	r3, [r3, #8]
 8009dd2:	68ba      	ldr	r2, [r7, #8]
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	68ba      	ldr	r2, [r7, #8]
 8009dde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2201      	movs	r2, #1
 8009de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2200      	movs	r2, #0
 8009dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009df0:	2300      	movs	r3, #0
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3714      	adds	r7, #20
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr
 8009dfe:	bf00      	nop
 8009e00:	40010000 	.word	0x40010000
 8009e04:	40010400 	.word	0x40010400
 8009e08:	40000400 	.word	0x40000400
 8009e0c:	40000800 	.word	0x40000800
 8009e10:	40000c00 	.word	0x40000c00
 8009e14:	40001800 	.word	0x40001800

08009e18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b085      	sub	sp, #20
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009e22:	2300      	movs	r3, #0
 8009e24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d101      	bne.n	8009e34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009e30:	2302      	movs	r3, #2
 8009e32:	e065      	b.n	8009f00 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2201      	movs	r2, #1
 8009e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	68db      	ldr	r3, [r3, #12]
 8009e46:	4313      	orrs	r3, r2
 8009e48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	689b      	ldr	r3, [r3, #8]
 8009e54:	4313      	orrs	r3, r2
 8009e56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	685b      	ldr	r3, [r3, #4]
 8009e62:	4313      	orrs	r3, r2
 8009e64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4313      	orrs	r3, r2
 8009e72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	691b      	ldr	r3, [r3, #16]
 8009e7e:	4313      	orrs	r3, r2
 8009e80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	695b      	ldr	r3, [r3, #20]
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	699b      	ldr	r3, [r3, #24]
 8009ea8:	041b      	lsls	r3, r3, #16
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4a16      	ldr	r2, [pc, #88]	; (8009f0c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d004      	beq.n	8009ec2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a14      	ldr	r2, [pc, #80]	; (8009f10 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d115      	bne.n	8009eee <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ecc:	051b      	lsls	r3, r3, #20
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	69db      	ldr	r3, [r3, #28]
 8009edc:	4313      	orrs	r3, r2
 8009ede:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	6a1b      	ldr	r3, [r3, #32]
 8009eea:	4313      	orrs	r3, r2
 8009eec:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	68fa      	ldr	r2, [r7, #12]
 8009ef4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009efe:	2300      	movs	r3, #0
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3714      	adds	r7, #20
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr
 8009f0c:	40010000 	.word	0x40010000
 8009f10:	40010400 	.word	0x40010400

08009f14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b082      	sub	sp, #8
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d101      	bne.n	8009f26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f22:	2301      	movs	r3, #1
 8009f24:	e042      	b.n	8009fac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d106      	bne.n	8009f3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f7f7 fd87 	bl	8001a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2224      	movs	r2, #36	; 0x24
 8009f42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f022 0201 	bic.w	r2, r2, #1
 8009f54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 f82e 	bl	8009fb8 <UART_SetConfig>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b01      	cmp	r3, #1
 8009f60:	d101      	bne.n	8009f66 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009f62:	2301      	movs	r3, #1
 8009f64:	e022      	b.n	8009fac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d002      	beq.n	8009f74 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f002 f9a0 	bl	800c2b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	685a      	ldr	r2, [r3, #4]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009f82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	689a      	ldr	r2, [r3, #8]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009f92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f042 0201 	orr.w	r2, r2, #1
 8009fa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f002 fa27 	bl	800c3f8 <UART_CheckIdleState>
 8009faa:	4603      	mov	r3, r0
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3708      	adds	r7, #8
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}
 8009fb4:	0000      	movs	r0, r0
	...

08009fb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009fb8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009fbc:	b090      	sub	sp, #64	; 0x40
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	689a      	ldr	r2, [r3, #8]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	691b      	ldr	r3, [r3, #16]
 8009fd8:	431a      	orrs	r2, r3
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	695b      	ldr	r3, [r3, #20]
 8009fde:	431a      	orrs	r2, r3
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	69db      	ldr	r3, [r3, #28]
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	681a      	ldr	r2, [r3, #0]
 8009ff8:	4bc1      	ldr	r3, [pc, #772]	; (800a300 <UART_SetConfig+0x348>)
 8009ffa:	4013      	ands	r3, r2
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	6812      	ldr	r2, [r2, #0]
 800a000:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a002:	430b      	orrs	r3, r1
 800a004:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	68da      	ldr	r2, [r3, #12]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	430a      	orrs	r2, r1
 800a01a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	699b      	ldr	r3, [r3, #24]
 800a020:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4ab7      	ldr	r2, [pc, #732]	; (800a304 <UART_SetConfig+0x34c>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d004      	beq.n	800a036 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6a1b      	ldr	r3, [r3, #32]
 800a030:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a032:	4313      	orrs	r3, r2
 800a034:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	689a      	ldr	r2, [r3, #8]
 800a03c:	4bb2      	ldr	r3, [pc, #712]	; (800a308 <UART_SetConfig+0x350>)
 800a03e:	4013      	ands	r3, r2
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	6812      	ldr	r2, [r2, #0]
 800a044:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a046:	430b      	orrs	r3, r1
 800a048:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a050:	f023 010f 	bic.w	r1, r3, #15
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	430a      	orrs	r2, r1
 800a05e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4aa9      	ldr	r2, [pc, #676]	; (800a30c <UART_SetConfig+0x354>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d177      	bne.n	800a15a <UART_SetConfig+0x1a2>
 800a06a:	4ba9      	ldr	r3, [pc, #676]	; (800a310 <UART_SetConfig+0x358>)
 800a06c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a06e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a072:	2b28      	cmp	r3, #40	; 0x28
 800a074:	d86c      	bhi.n	800a150 <UART_SetConfig+0x198>
 800a076:	a201      	add	r2, pc, #4	; (adr r2, 800a07c <UART_SetConfig+0xc4>)
 800a078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a07c:	0800a121 	.word	0x0800a121
 800a080:	0800a151 	.word	0x0800a151
 800a084:	0800a151 	.word	0x0800a151
 800a088:	0800a151 	.word	0x0800a151
 800a08c:	0800a151 	.word	0x0800a151
 800a090:	0800a151 	.word	0x0800a151
 800a094:	0800a151 	.word	0x0800a151
 800a098:	0800a151 	.word	0x0800a151
 800a09c:	0800a129 	.word	0x0800a129
 800a0a0:	0800a151 	.word	0x0800a151
 800a0a4:	0800a151 	.word	0x0800a151
 800a0a8:	0800a151 	.word	0x0800a151
 800a0ac:	0800a151 	.word	0x0800a151
 800a0b0:	0800a151 	.word	0x0800a151
 800a0b4:	0800a151 	.word	0x0800a151
 800a0b8:	0800a151 	.word	0x0800a151
 800a0bc:	0800a131 	.word	0x0800a131
 800a0c0:	0800a151 	.word	0x0800a151
 800a0c4:	0800a151 	.word	0x0800a151
 800a0c8:	0800a151 	.word	0x0800a151
 800a0cc:	0800a151 	.word	0x0800a151
 800a0d0:	0800a151 	.word	0x0800a151
 800a0d4:	0800a151 	.word	0x0800a151
 800a0d8:	0800a151 	.word	0x0800a151
 800a0dc:	0800a139 	.word	0x0800a139
 800a0e0:	0800a151 	.word	0x0800a151
 800a0e4:	0800a151 	.word	0x0800a151
 800a0e8:	0800a151 	.word	0x0800a151
 800a0ec:	0800a151 	.word	0x0800a151
 800a0f0:	0800a151 	.word	0x0800a151
 800a0f4:	0800a151 	.word	0x0800a151
 800a0f8:	0800a151 	.word	0x0800a151
 800a0fc:	0800a141 	.word	0x0800a141
 800a100:	0800a151 	.word	0x0800a151
 800a104:	0800a151 	.word	0x0800a151
 800a108:	0800a151 	.word	0x0800a151
 800a10c:	0800a151 	.word	0x0800a151
 800a110:	0800a151 	.word	0x0800a151
 800a114:	0800a151 	.word	0x0800a151
 800a118:	0800a151 	.word	0x0800a151
 800a11c:	0800a149 	.word	0x0800a149
 800a120:	2301      	movs	r3, #1
 800a122:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a126:	e233      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a128:	2304      	movs	r3, #4
 800a12a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a12e:	e22f      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a130:	2308      	movs	r3, #8
 800a132:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a136:	e22b      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a138:	2310      	movs	r3, #16
 800a13a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a13e:	e227      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a140:	2320      	movs	r3, #32
 800a142:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a146:	e223      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a148:	2340      	movs	r3, #64	; 0x40
 800a14a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a14e:	e21f      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a150:	2380      	movs	r3, #128	; 0x80
 800a152:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a156:	bf00      	nop
 800a158:	e21a      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4a6d      	ldr	r2, [pc, #436]	; (800a314 <UART_SetConfig+0x35c>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d132      	bne.n	800a1ca <UART_SetConfig+0x212>
 800a164:	4b6a      	ldr	r3, [pc, #424]	; (800a310 <UART_SetConfig+0x358>)
 800a166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a168:	f003 0307 	and.w	r3, r3, #7
 800a16c:	2b05      	cmp	r3, #5
 800a16e:	d827      	bhi.n	800a1c0 <UART_SetConfig+0x208>
 800a170:	a201      	add	r2, pc, #4	; (adr r2, 800a178 <UART_SetConfig+0x1c0>)
 800a172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a176:	bf00      	nop
 800a178:	0800a191 	.word	0x0800a191
 800a17c:	0800a199 	.word	0x0800a199
 800a180:	0800a1a1 	.word	0x0800a1a1
 800a184:	0800a1a9 	.word	0x0800a1a9
 800a188:	0800a1b1 	.word	0x0800a1b1
 800a18c:	0800a1b9 	.word	0x0800a1b9
 800a190:	2300      	movs	r3, #0
 800a192:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a196:	e1fb      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a198:	2304      	movs	r3, #4
 800a19a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a19e:	e1f7      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a1a0:	2308      	movs	r3, #8
 800a1a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1a6:	e1f3      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a1a8:	2310      	movs	r3, #16
 800a1aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1ae:	e1ef      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a1b0:	2320      	movs	r3, #32
 800a1b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1b6:	e1eb      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a1b8:	2340      	movs	r3, #64	; 0x40
 800a1ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1be:	e1e7      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a1c0:	2380      	movs	r3, #128	; 0x80
 800a1c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1c6:	bf00      	nop
 800a1c8:	e1e2      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4a52      	ldr	r2, [pc, #328]	; (800a318 <UART_SetConfig+0x360>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d132      	bne.n	800a23a <UART_SetConfig+0x282>
 800a1d4:	4b4e      	ldr	r3, [pc, #312]	; (800a310 <UART_SetConfig+0x358>)
 800a1d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1d8:	f003 0307 	and.w	r3, r3, #7
 800a1dc:	2b05      	cmp	r3, #5
 800a1de:	d827      	bhi.n	800a230 <UART_SetConfig+0x278>
 800a1e0:	a201      	add	r2, pc, #4	; (adr r2, 800a1e8 <UART_SetConfig+0x230>)
 800a1e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e6:	bf00      	nop
 800a1e8:	0800a201 	.word	0x0800a201
 800a1ec:	0800a209 	.word	0x0800a209
 800a1f0:	0800a211 	.word	0x0800a211
 800a1f4:	0800a219 	.word	0x0800a219
 800a1f8:	0800a221 	.word	0x0800a221
 800a1fc:	0800a229 	.word	0x0800a229
 800a200:	2300      	movs	r3, #0
 800a202:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a206:	e1c3      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a208:	2304      	movs	r3, #4
 800a20a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a20e:	e1bf      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a210:	2308      	movs	r3, #8
 800a212:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a216:	e1bb      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a218:	2310      	movs	r3, #16
 800a21a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a21e:	e1b7      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a220:	2320      	movs	r3, #32
 800a222:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a226:	e1b3      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a228:	2340      	movs	r3, #64	; 0x40
 800a22a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a22e:	e1af      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a230:	2380      	movs	r3, #128	; 0x80
 800a232:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a236:	bf00      	nop
 800a238:	e1aa      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	4a37      	ldr	r2, [pc, #220]	; (800a31c <UART_SetConfig+0x364>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d132      	bne.n	800a2aa <UART_SetConfig+0x2f2>
 800a244:	4b32      	ldr	r3, [pc, #200]	; (800a310 <UART_SetConfig+0x358>)
 800a246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a248:	f003 0307 	and.w	r3, r3, #7
 800a24c:	2b05      	cmp	r3, #5
 800a24e:	d827      	bhi.n	800a2a0 <UART_SetConfig+0x2e8>
 800a250:	a201      	add	r2, pc, #4	; (adr r2, 800a258 <UART_SetConfig+0x2a0>)
 800a252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a256:	bf00      	nop
 800a258:	0800a271 	.word	0x0800a271
 800a25c:	0800a279 	.word	0x0800a279
 800a260:	0800a281 	.word	0x0800a281
 800a264:	0800a289 	.word	0x0800a289
 800a268:	0800a291 	.word	0x0800a291
 800a26c:	0800a299 	.word	0x0800a299
 800a270:	2300      	movs	r3, #0
 800a272:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a276:	e18b      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a278:	2304      	movs	r3, #4
 800a27a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a27e:	e187      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a280:	2308      	movs	r3, #8
 800a282:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a286:	e183      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a288:	2310      	movs	r3, #16
 800a28a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a28e:	e17f      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a290:	2320      	movs	r3, #32
 800a292:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a296:	e17b      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a298:	2340      	movs	r3, #64	; 0x40
 800a29a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a29e:	e177      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a2a0:	2380      	movs	r3, #128	; 0x80
 800a2a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2a6:	bf00      	nop
 800a2a8:	e172      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4a1c      	ldr	r2, [pc, #112]	; (800a320 <UART_SetConfig+0x368>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d144      	bne.n	800a33e <UART_SetConfig+0x386>
 800a2b4:	4b16      	ldr	r3, [pc, #88]	; (800a310 <UART_SetConfig+0x358>)
 800a2b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2b8:	f003 0307 	and.w	r3, r3, #7
 800a2bc:	2b05      	cmp	r3, #5
 800a2be:	d839      	bhi.n	800a334 <UART_SetConfig+0x37c>
 800a2c0:	a201      	add	r2, pc, #4	; (adr r2, 800a2c8 <UART_SetConfig+0x310>)
 800a2c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2c6:	bf00      	nop
 800a2c8:	0800a2e1 	.word	0x0800a2e1
 800a2cc:	0800a2e9 	.word	0x0800a2e9
 800a2d0:	0800a2f1 	.word	0x0800a2f1
 800a2d4:	0800a2f9 	.word	0x0800a2f9
 800a2d8:	0800a325 	.word	0x0800a325
 800a2dc:	0800a32d 	.word	0x0800a32d
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2e6:	e153      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a2e8:	2304      	movs	r3, #4
 800a2ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2ee:	e14f      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a2f0:	2308      	movs	r3, #8
 800a2f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2f6:	e14b      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a2f8:	2310      	movs	r3, #16
 800a2fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2fe:	e147      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a300:	cfff69f3 	.word	0xcfff69f3
 800a304:	58000c00 	.word	0x58000c00
 800a308:	11fff4ff 	.word	0x11fff4ff
 800a30c:	40011000 	.word	0x40011000
 800a310:	58024400 	.word	0x58024400
 800a314:	40004400 	.word	0x40004400
 800a318:	40004800 	.word	0x40004800
 800a31c:	40004c00 	.word	0x40004c00
 800a320:	40005000 	.word	0x40005000
 800a324:	2320      	movs	r3, #32
 800a326:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a32a:	e131      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a32c:	2340      	movs	r3, #64	; 0x40
 800a32e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a332:	e12d      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a334:	2380      	movs	r3, #128	; 0x80
 800a336:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a33a:	bf00      	nop
 800a33c:	e128      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4ac3      	ldr	r2, [pc, #780]	; (800a650 <UART_SetConfig+0x698>)
 800a344:	4293      	cmp	r3, r2
 800a346:	d178      	bne.n	800a43a <UART_SetConfig+0x482>
 800a348:	4bc2      	ldr	r3, [pc, #776]	; (800a654 <UART_SetConfig+0x69c>)
 800a34a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a34c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a350:	2b28      	cmp	r3, #40	; 0x28
 800a352:	d86d      	bhi.n	800a430 <UART_SetConfig+0x478>
 800a354:	a201      	add	r2, pc, #4	; (adr r2, 800a35c <UART_SetConfig+0x3a4>)
 800a356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a35a:	bf00      	nop
 800a35c:	0800a401 	.word	0x0800a401
 800a360:	0800a431 	.word	0x0800a431
 800a364:	0800a431 	.word	0x0800a431
 800a368:	0800a431 	.word	0x0800a431
 800a36c:	0800a431 	.word	0x0800a431
 800a370:	0800a431 	.word	0x0800a431
 800a374:	0800a431 	.word	0x0800a431
 800a378:	0800a431 	.word	0x0800a431
 800a37c:	0800a409 	.word	0x0800a409
 800a380:	0800a431 	.word	0x0800a431
 800a384:	0800a431 	.word	0x0800a431
 800a388:	0800a431 	.word	0x0800a431
 800a38c:	0800a431 	.word	0x0800a431
 800a390:	0800a431 	.word	0x0800a431
 800a394:	0800a431 	.word	0x0800a431
 800a398:	0800a431 	.word	0x0800a431
 800a39c:	0800a411 	.word	0x0800a411
 800a3a0:	0800a431 	.word	0x0800a431
 800a3a4:	0800a431 	.word	0x0800a431
 800a3a8:	0800a431 	.word	0x0800a431
 800a3ac:	0800a431 	.word	0x0800a431
 800a3b0:	0800a431 	.word	0x0800a431
 800a3b4:	0800a431 	.word	0x0800a431
 800a3b8:	0800a431 	.word	0x0800a431
 800a3bc:	0800a419 	.word	0x0800a419
 800a3c0:	0800a431 	.word	0x0800a431
 800a3c4:	0800a431 	.word	0x0800a431
 800a3c8:	0800a431 	.word	0x0800a431
 800a3cc:	0800a431 	.word	0x0800a431
 800a3d0:	0800a431 	.word	0x0800a431
 800a3d4:	0800a431 	.word	0x0800a431
 800a3d8:	0800a431 	.word	0x0800a431
 800a3dc:	0800a421 	.word	0x0800a421
 800a3e0:	0800a431 	.word	0x0800a431
 800a3e4:	0800a431 	.word	0x0800a431
 800a3e8:	0800a431 	.word	0x0800a431
 800a3ec:	0800a431 	.word	0x0800a431
 800a3f0:	0800a431 	.word	0x0800a431
 800a3f4:	0800a431 	.word	0x0800a431
 800a3f8:	0800a431 	.word	0x0800a431
 800a3fc:	0800a429 	.word	0x0800a429
 800a400:	2301      	movs	r3, #1
 800a402:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a406:	e0c3      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a408:	2304      	movs	r3, #4
 800a40a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a40e:	e0bf      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a410:	2308      	movs	r3, #8
 800a412:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a416:	e0bb      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a418:	2310      	movs	r3, #16
 800a41a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a41e:	e0b7      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a420:	2320      	movs	r3, #32
 800a422:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a426:	e0b3      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a428:	2340      	movs	r3, #64	; 0x40
 800a42a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a42e:	e0af      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a430:	2380      	movs	r3, #128	; 0x80
 800a432:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a436:	bf00      	nop
 800a438:	e0aa      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4a86      	ldr	r2, [pc, #536]	; (800a658 <UART_SetConfig+0x6a0>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d132      	bne.n	800a4aa <UART_SetConfig+0x4f2>
 800a444:	4b83      	ldr	r3, [pc, #524]	; (800a654 <UART_SetConfig+0x69c>)
 800a446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a448:	f003 0307 	and.w	r3, r3, #7
 800a44c:	2b05      	cmp	r3, #5
 800a44e:	d827      	bhi.n	800a4a0 <UART_SetConfig+0x4e8>
 800a450:	a201      	add	r2, pc, #4	; (adr r2, 800a458 <UART_SetConfig+0x4a0>)
 800a452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a456:	bf00      	nop
 800a458:	0800a471 	.word	0x0800a471
 800a45c:	0800a479 	.word	0x0800a479
 800a460:	0800a481 	.word	0x0800a481
 800a464:	0800a489 	.word	0x0800a489
 800a468:	0800a491 	.word	0x0800a491
 800a46c:	0800a499 	.word	0x0800a499
 800a470:	2300      	movs	r3, #0
 800a472:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a476:	e08b      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a478:	2304      	movs	r3, #4
 800a47a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a47e:	e087      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a480:	2308      	movs	r3, #8
 800a482:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a486:	e083      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a488:	2310      	movs	r3, #16
 800a48a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a48e:	e07f      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a490:	2320      	movs	r3, #32
 800a492:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a496:	e07b      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a498:	2340      	movs	r3, #64	; 0x40
 800a49a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a49e:	e077      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a4a0:	2380      	movs	r3, #128	; 0x80
 800a4a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4a6:	bf00      	nop
 800a4a8:	e072      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4a6b      	ldr	r2, [pc, #428]	; (800a65c <UART_SetConfig+0x6a4>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d132      	bne.n	800a51a <UART_SetConfig+0x562>
 800a4b4:	4b67      	ldr	r3, [pc, #412]	; (800a654 <UART_SetConfig+0x69c>)
 800a4b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4b8:	f003 0307 	and.w	r3, r3, #7
 800a4bc:	2b05      	cmp	r3, #5
 800a4be:	d827      	bhi.n	800a510 <UART_SetConfig+0x558>
 800a4c0:	a201      	add	r2, pc, #4	; (adr r2, 800a4c8 <UART_SetConfig+0x510>)
 800a4c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4c6:	bf00      	nop
 800a4c8:	0800a4e1 	.word	0x0800a4e1
 800a4cc:	0800a4e9 	.word	0x0800a4e9
 800a4d0:	0800a4f1 	.word	0x0800a4f1
 800a4d4:	0800a4f9 	.word	0x0800a4f9
 800a4d8:	0800a501 	.word	0x0800a501
 800a4dc:	0800a509 	.word	0x0800a509
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4e6:	e053      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a4e8:	2304      	movs	r3, #4
 800a4ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4ee:	e04f      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a4f0:	2308      	movs	r3, #8
 800a4f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4f6:	e04b      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a4f8:	2310      	movs	r3, #16
 800a4fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4fe:	e047      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a500:	2320      	movs	r3, #32
 800a502:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a506:	e043      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a508:	2340      	movs	r3, #64	; 0x40
 800a50a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a50e:	e03f      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a510:	2380      	movs	r3, #128	; 0x80
 800a512:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a516:	bf00      	nop
 800a518:	e03a      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	4a50      	ldr	r2, [pc, #320]	; (800a660 <UART_SetConfig+0x6a8>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d132      	bne.n	800a58a <UART_SetConfig+0x5d2>
 800a524:	4b4b      	ldr	r3, [pc, #300]	; (800a654 <UART_SetConfig+0x69c>)
 800a526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a528:	f003 0307 	and.w	r3, r3, #7
 800a52c:	2b05      	cmp	r3, #5
 800a52e:	d827      	bhi.n	800a580 <UART_SetConfig+0x5c8>
 800a530:	a201      	add	r2, pc, #4	; (adr r2, 800a538 <UART_SetConfig+0x580>)
 800a532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a536:	bf00      	nop
 800a538:	0800a551 	.word	0x0800a551
 800a53c:	0800a559 	.word	0x0800a559
 800a540:	0800a561 	.word	0x0800a561
 800a544:	0800a569 	.word	0x0800a569
 800a548:	0800a571 	.word	0x0800a571
 800a54c:	0800a579 	.word	0x0800a579
 800a550:	2302      	movs	r3, #2
 800a552:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a556:	e01b      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a558:	2304      	movs	r3, #4
 800a55a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a55e:	e017      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a560:	2308      	movs	r3, #8
 800a562:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a566:	e013      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a568:	2310      	movs	r3, #16
 800a56a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a56e:	e00f      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a570:	2320      	movs	r3, #32
 800a572:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a576:	e00b      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a578:	2340      	movs	r3, #64	; 0x40
 800a57a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a57e:	e007      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a580:	2380      	movs	r3, #128	; 0x80
 800a582:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a586:	bf00      	nop
 800a588:	e002      	b.n	800a590 <UART_SetConfig+0x5d8>
 800a58a:	2380      	movs	r3, #128	; 0x80
 800a58c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4a32      	ldr	r2, [pc, #200]	; (800a660 <UART_SetConfig+0x6a8>)
 800a596:	4293      	cmp	r3, r2
 800a598:	f040 86f7 	bne.w	800b38a <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a59c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a5a0:	2b08      	cmp	r3, #8
 800a5a2:	f000 80c0 	beq.w	800a726 <UART_SetConfig+0x76e>
 800a5a6:	2b08      	cmp	r3, #8
 800a5a8:	dc04      	bgt.n	800a5b4 <UART_SetConfig+0x5fc>
 800a5aa:	2b02      	cmp	r3, #2
 800a5ac:	d00c      	beq.n	800a5c8 <UART_SetConfig+0x610>
 800a5ae:	2b04      	cmp	r3, #4
 800a5b0:	d065      	beq.n	800a67e <UART_SetConfig+0x6c6>
 800a5b2:	e27a      	b.n	800aaaa <UART_SetConfig+0xaf2>
 800a5b4:	2b20      	cmp	r3, #32
 800a5b6:	f000 81b0 	beq.w	800a91a <UART_SetConfig+0x962>
 800a5ba:	2b40      	cmp	r3, #64	; 0x40
 800a5bc:	f000 821e 	beq.w	800a9fc <UART_SetConfig+0xa44>
 800a5c0:	2b10      	cmp	r3, #16
 800a5c2:	f000 8104 	beq.w	800a7ce <UART_SetConfig+0x816>
 800a5c6:	e270      	b.n	800aaaa <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a5c8:	f7fd ff7a 	bl	80084c0 <HAL_RCCEx_GetD3PCLK1Freq>
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d04e      	beq.n	800a674 <UART_SetConfig+0x6bc>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	d048      	beq.n	800a670 <UART_SetConfig+0x6b8>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e2:	2b02      	cmp	r3, #2
 800a5e4:	d042      	beq.n	800a66c <UART_SetConfig+0x6b4>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ea:	2b03      	cmp	r3, #3
 800a5ec:	d03c      	beq.n	800a668 <UART_SetConfig+0x6b0>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f2:	2b04      	cmp	r3, #4
 800a5f4:	d036      	beq.n	800a664 <UART_SetConfig+0x6ac>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5fa:	2b05      	cmp	r3, #5
 800a5fc:	d026      	beq.n	800a64c <UART_SetConfig+0x694>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a602:	2b06      	cmp	r3, #6
 800a604:	d020      	beq.n	800a648 <UART_SetConfig+0x690>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a60a:	2b07      	cmp	r3, #7
 800a60c:	d01a      	beq.n	800a644 <UART_SetConfig+0x68c>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a612:	2b08      	cmp	r3, #8
 800a614:	d014      	beq.n	800a640 <UART_SetConfig+0x688>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a61a:	2b09      	cmp	r3, #9
 800a61c:	d00e      	beq.n	800a63c <UART_SetConfig+0x684>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a622:	2b0a      	cmp	r3, #10
 800a624:	d008      	beq.n	800a638 <UART_SetConfig+0x680>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a62a:	2b0b      	cmp	r3, #11
 800a62c:	d102      	bne.n	800a634 <UART_SetConfig+0x67c>
 800a62e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a632:	e020      	b.n	800a676 <UART_SetConfig+0x6be>
 800a634:	2301      	movs	r3, #1
 800a636:	e01e      	b.n	800a676 <UART_SetConfig+0x6be>
 800a638:	2380      	movs	r3, #128	; 0x80
 800a63a:	e01c      	b.n	800a676 <UART_SetConfig+0x6be>
 800a63c:	2340      	movs	r3, #64	; 0x40
 800a63e:	e01a      	b.n	800a676 <UART_SetConfig+0x6be>
 800a640:	2320      	movs	r3, #32
 800a642:	e018      	b.n	800a676 <UART_SetConfig+0x6be>
 800a644:	2310      	movs	r3, #16
 800a646:	e016      	b.n	800a676 <UART_SetConfig+0x6be>
 800a648:	230c      	movs	r3, #12
 800a64a:	e014      	b.n	800a676 <UART_SetConfig+0x6be>
 800a64c:	230a      	movs	r3, #10
 800a64e:	e012      	b.n	800a676 <UART_SetConfig+0x6be>
 800a650:	40011400 	.word	0x40011400
 800a654:	58024400 	.word	0x58024400
 800a658:	40007800 	.word	0x40007800
 800a65c:	40007c00 	.word	0x40007c00
 800a660:	58000c00 	.word	0x58000c00
 800a664:	2308      	movs	r3, #8
 800a666:	e006      	b.n	800a676 <UART_SetConfig+0x6be>
 800a668:	2306      	movs	r3, #6
 800a66a:	e004      	b.n	800a676 <UART_SetConfig+0x6be>
 800a66c:	2304      	movs	r3, #4
 800a66e:	e002      	b.n	800a676 <UART_SetConfig+0x6be>
 800a670:	2302      	movs	r3, #2
 800a672:	e000      	b.n	800a676 <UART_SetConfig+0x6be>
 800a674:	2301      	movs	r3, #1
 800a676:	fbb2 f3f3 	udiv	r3, r2, r3
 800a67a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a67c:	e219      	b.n	800aab2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a67e:	f107 0318 	add.w	r3, r7, #24
 800a682:	4618      	mov	r0, r3
 800a684:	f7fd ff32 	bl	80084ec <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a688:	69fa      	ldr	r2, [r7, #28]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d044      	beq.n	800a71c <UART_SetConfig+0x764>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a696:	2b01      	cmp	r3, #1
 800a698:	d03e      	beq.n	800a718 <UART_SetConfig+0x760>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69e:	2b02      	cmp	r3, #2
 800a6a0:	d038      	beq.n	800a714 <UART_SetConfig+0x75c>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a6:	2b03      	cmp	r3, #3
 800a6a8:	d032      	beq.n	800a710 <UART_SetConfig+0x758>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ae:	2b04      	cmp	r3, #4
 800a6b0:	d02c      	beq.n	800a70c <UART_SetConfig+0x754>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b6:	2b05      	cmp	r3, #5
 800a6b8:	d026      	beq.n	800a708 <UART_SetConfig+0x750>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6be:	2b06      	cmp	r3, #6
 800a6c0:	d020      	beq.n	800a704 <UART_SetConfig+0x74c>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c6:	2b07      	cmp	r3, #7
 800a6c8:	d01a      	beq.n	800a700 <UART_SetConfig+0x748>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ce:	2b08      	cmp	r3, #8
 800a6d0:	d014      	beq.n	800a6fc <UART_SetConfig+0x744>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d6:	2b09      	cmp	r3, #9
 800a6d8:	d00e      	beq.n	800a6f8 <UART_SetConfig+0x740>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6de:	2b0a      	cmp	r3, #10
 800a6e0:	d008      	beq.n	800a6f4 <UART_SetConfig+0x73c>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e6:	2b0b      	cmp	r3, #11
 800a6e8:	d102      	bne.n	800a6f0 <UART_SetConfig+0x738>
 800a6ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6ee:	e016      	b.n	800a71e <UART_SetConfig+0x766>
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	e014      	b.n	800a71e <UART_SetConfig+0x766>
 800a6f4:	2380      	movs	r3, #128	; 0x80
 800a6f6:	e012      	b.n	800a71e <UART_SetConfig+0x766>
 800a6f8:	2340      	movs	r3, #64	; 0x40
 800a6fa:	e010      	b.n	800a71e <UART_SetConfig+0x766>
 800a6fc:	2320      	movs	r3, #32
 800a6fe:	e00e      	b.n	800a71e <UART_SetConfig+0x766>
 800a700:	2310      	movs	r3, #16
 800a702:	e00c      	b.n	800a71e <UART_SetConfig+0x766>
 800a704:	230c      	movs	r3, #12
 800a706:	e00a      	b.n	800a71e <UART_SetConfig+0x766>
 800a708:	230a      	movs	r3, #10
 800a70a:	e008      	b.n	800a71e <UART_SetConfig+0x766>
 800a70c:	2308      	movs	r3, #8
 800a70e:	e006      	b.n	800a71e <UART_SetConfig+0x766>
 800a710:	2306      	movs	r3, #6
 800a712:	e004      	b.n	800a71e <UART_SetConfig+0x766>
 800a714:	2304      	movs	r3, #4
 800a716:	e002      	b.n	800a71e <UART_SetConfig+0x766>
 800a718:	2302      	movs	r3, #2
 800a71a:	e000      	b.n	800a71e <UART_SetConfig+0x766>
 800a71c:	2301      	movs	r3, #1
 800a71e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a722:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a724:	e1c5      	b.n	800aab2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a726:	f107 030c 	add.w	r3, r7, #12
 800a72a:	4618      	mov	r0, r3
 800a72c:	f7fe f82a 	bl	8008784 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a730:	693a      	ldr	r2, [r7, #16]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a736:	2b00      	cmp	r3, #0
 800a738:	d044      	beq.n	800a7c4 <UART_SetConfig+0x80c>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a73e:	2b01      	cmp	r3, #1
 800a740:	d03e      	beq.n	800a7c0 <UART_SetConfig+0x808>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a746:	2b02      	cmp	r3, #2
 800a748:	d038      	beq.n	800a7bc <UART_SetConfig+0x804>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a74e:	2b03      	cmp	r3, #3
 800a750:	d032      	beq.n	800a7b8 <UART_SetConfig+0x800>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a756:	2b04      	cmp	r3, #4
 800a758:	d02c      	beq.n	800a7b4 <UART_SetConfig+0x7fc>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75e:	2b05      	cmp	r3, #5
 800a760:	d026      	beq.n	800a7b0 <UART_SetConfig+0x7f8>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a766:	2b06      	cmp	r3, #6
 800a768:	d020      	beq.n	800a7ac <UART_SetConfig+0x7f4>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76e:	2b07      	cmp	r3, #7
 800a770:	d01a      	beq.n	800a7a8 <UART_SetConfig+0x7f0>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a776:	2b08      	cmp	r3, #8
 800a778:	d014      	beq.n	800a7a4 <UART_SetConfig+0x7ec>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77e:	2b09      	cmp	r3, #9
 800a780:	d00e      	beq.n	800a7a0 <UART_SetConfig+0x7e8>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a786:	2b0a      	cmp	r3, #10
 800a788:	d008      	beq.n	800a79c <UART_SetConfig+0x7e4>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a78e:	2b0b      	cmp	r3, #11
 800a790:	d102      	bne.n	800a798 <UART_SetConfig+0x7e0>
 800a792:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a796:	e016      	b.n	800a7c6 <UART_SetConfig+0x80e>
 800a798:	2301      	movs	r3, #1
 800a79a:	e014      	b.n	800a7c6 <UART_SetConfig+0x80e>
 800a79c:	2380      	movs	r3, #128	; 0x80
 800a79e:	e012      	b.n	800a7c6 <UART_SetConfig+0x80e>
 800a7a0:	2340      	movs	r3, #64	; 0x40
 800a7a2:	e010      	b.n	800a7c6 <UART_SetConfig+0x80e>
 800a7a4:	2320      	movs	r3, #32
 800a7a6:	e00e      	b.n	800a7c6 <UART_SetConfig+0x80e>
 800a7a8:	2310      	movs	r3, #16
 800a7aa:	e00c      	b.n	800a7c6 <UART_SetConfig+0x80e>
 800a7ac:	230c      	movs	r3, #12
 800a7ae:	e00a      	b.n	800a7c6 <UART_SetConfig+0x80e>
 800a7b0:	230a      	movs	r3, #10
 800a7b2:	e008      	b.n	800a7c6 <UART_SetConfig+0x80e>
 800a7b4:	2308      	movs	r3, #8
 800a7b6:	e006      	b.n	800a7c6 <UART_SetConfig+0x80e>
 800a7b8:	2306      	movs	r3, #6
 800a7ba:	e004      	b.n	800a7c6 <UART_SetConfig+0x80e>
 800a7bc:	2304      	movs	r3, #4
 800a7be:	e002      	b.n	800a7c6 <UART_SetConfig+0x80e>
 800a7c0:	2302      	movs	r3, #2
 800a7c2:	e000      	b.n	800a7c6 <UART_SetConfig+0x80e>
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a7cc:	e171      	b.n	800aab2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7ce:	4b7a      	ldr	r3, [pc, #488]	; (800a9b8 <UART_SetConfig+0xa00>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f003 0320 	and.w	r3, r3, #32
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d054      	beq.n	800a884 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a7da:	4b77      	ldr	r3, [pc, #476]	; (800a9b8 <UART_SetConfig+0xa00>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	08db      	lsrs	r3, r3, #3
 800a7e0:	f003 0303 	and.w	r3, r3, #3
 800a7e4:	4a75      	ldr	r2, [pc, #468]	; (800a9bc <UART_SetConfig+0xa04>)
 800a7e6:	40da      	lsrs	r2, r3
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d044      	beq.n	800a87a <UART_SetConfig+0x8c2>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d03e      	beq.n	800a876 <UART_SetConfig+0x8be>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7fc:	2b02      	cmp	r3, #2
 800a7fe:	d038      	beq.n	800a872 <UART_SetConfig+0x8ba>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a804:	2b03      	cmp	r3, #3
 800a806:	d032      	beq.n	800a86e <UART_SetConfig+0x8b6>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a80c:	2b04      	cmp	r3, #4
 800a80e:	d02c      	beq.n	800a86a <UART_SetConfig+0x8b2>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a814:	2b05      	cmp	r3, #5
 800a816:	d026      	beq.n	800a866 <UART_SetConfig+0x8ae>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a81c:	2b06      	cmp	r3, #6
 800a81e:	d020      	beq.n	800a862 <UART_SetConfig+0x8aa>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a824:	2b07      	cmp	r3, #7
 800a826:	d01a      	beq.n	800a85e <UART_SetConfig+0x8a6>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a82c:	2b08      	cmp	r3, #8
 800a82e:	d014      	beq.n	800a85a <UART_SetConfig+0x8a2>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a834:	2b09      	cmp	r3, #9
 800a836:	d00e      	beq.n	800a856 <UART_SetConfig+0x89e>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83c:	2b0a      	cmp	r3, #10
 800a83e:	d008      	beq.n	800a852 <UART_SetConfig+0x89a>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a844:	2b0b      	cmp	r3, #11
 800a846:	d102      	bne.n	800a84e <UART_SetConfig+0x896>
 800a848:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a84c:	e016      	b.n	800a87c <UART_SetConfig+0x8c4>
 800a84e:	2301      	movs	r3, #1
 800a850:	e014      	b.n	800a87c <UART_SetConfig+0x8c4>
 800a852:	2380      	movs	r3, #128	; 0x80
 800a854:	e012      	b.n	800a87c <UART_SetConfig+0x8c4>
 800a856:	2340      	movs	r3, #64	; 0x40
 800a858:	e010      	b.n	800a87c <UART_SetConfig+0x8c4>
 800a85a:	2320      	movs	r3, #32
 800a85c:	e00e      	b.n	800a87c <UART_SetConfig+0x8c4>
 800a85e:	2310      	movs	r3, #16
 800a860:	e00c      	b.n	800a87c <UART_SetConfig+0x8c4>
 800a862:	230c      	movs	r3, #12
 800a864:	e00a      	b.n	800a87c <UART_SetConfig+0x8c4>
 800a866:	230a      	movs	r3, #10
 800a868:	e008      	b.n	800a87c <UART_SetConfig+0x8c4>
 800a86a:	2308      	movs	r3, #8
 800a86c:	e006      	b.n	800a87c <UART_SetConfig+0x8c4>
 800a86e:	2306      	movs	r3, #6
 800a870:	e004      	b.n	800a87c <UART_SetConfig+0x8c4>
 800a872:	2304      	movs	r3, #4
 800a874:	e002      	b.n	800a87c <UART_SetConfig+0x8c4>
 800a876:	2302      	movs	r3, #2
 800a878:	e000      	b.n	800a87c <UART_SetConfig+0x8c4>
 800a87a:	2301      	movs	r3, #1
 800a87c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a880:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800a882:	e116      	b.n	800aab2 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d043      	beq.n	800a914 <UART_SetConfig+0x95c>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a890:	2b01      	cmp	r3, #1
 800a892:	d03d      	beq.n	800a910 <UART_SetConfig+0x958>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a898:	2b02      	cmp	r3, #2
 800a89a:	d037      	beq.n	800a90c <UART_SetConfig+0x954>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a0:	2b03      	cmp	r3, #3
 800a8a2:	d031      	beq.n	800a908 <UART_SetConfig+0x950>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a8:	2b04      	cmp	r3, #4
 800a8aa:	d02b      	beq.n	800a904 <UART_SetConfig+0x94c>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b0:	2b05      	cmp	r3, #5
 800a8b2:	d025      	beq.n	800a900 <UART_SetConfig+0x948>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b8:	2b06      	cmp	r3, #6
 800a8ba:	d01f      	beq.n	800a8fc <UART_SetConfig+0x944>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c0:	2b07      	cmp	r3, #7
 800a8c2:	d019      	beq.n	800a8f8 <UART_SetConfig+0x940>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c8:	2b08      	cmp	r3, #8
 800a8ca:	d013      	beq.n	800a8f4 <UART_SetConfig+0x93c>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d0:	2b09      	cmp	r3, #9
 800a8d2:	d00d      	beq.n	800a8f0 <UART_SetConfig+0x938>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d8:	2b0a      	cmp	r3, #10
 800a8da:	d007      	beq.n	800a8ec <UART_SetConfig+0x934>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e0:	2b0b      	cmp	r3, #11
 800a8e2:	d101      	bne.n	800a8e8 <UART_SetConfig+0x930>
 800a8e4:	4b36      	ldr	r3, [pc, #216]	; (800a9c0 <UART_SetConfig+0xa08>)
 800a8e6:	e016      	b.n	800a916 <UART_SetConfig+0x95e>
 800a8e8:	4b34      	ldr	r3, [pc, #208]	; (800a9bc <UART_SetConfig+0xa04>)
 800a8ea:	e014      	b.n	800a916 <UART_SetConfig+0x95e>
 800a8ec:	4b35      	ldr	r3, [pc, #212]	; (800a9c4 <UART_SetConfig+0xa0c>)
 800a8ee:	e012      	b.n	800a916 <UART_SetConfig+0x95e>
 800a8f0:	4b35      	ldr	r3, [pc, #212]	; (800a9c8 <UART_SetConfig+0xa10>)
 800a8f2:	e010      	b.n	800a916 <UART_SetConfig+0x95e>
 800a8f4:	4b35      	ldr	r3, [pc, #212]	; (800a9cc <UART_SetConfig+0xa14>)
 800a8f6:	e00e      	b.n	800a916 <UART_SetConfig+0x95e>
 800a8f8:	4b35      	ldr	r3, [pc, #212]	; (800a9d0 <UART_SetConfig+0xa18>)
 800a8fa:	e00c      	b.n	800a916 <UART_SetConfig+0x95e>
 800a8fc:	4b35      	ldr	r3, [pc, #212]	; (800a9d4 <UART_SetConfig+0xa1c>)
 800a8fe:	e00a      	b.n	800a916 <UART_SetConfig+0x95e>
 800a900:	4b35      	ldr	r3, [pc, #212]	; (800a9d8 <UART_SetConfig+0xa20>)
 800a902:	e008      	b.n	800a916 <UART_SetConfig+0x95e>
 800a904:	4b35      	ldr	r3, [pc, #212]	; (800a9dc <UART_SetConfig+0xa24>)
 800a906:	e006      	b.n	800a916 <UART_SetConfig+0x95e>
 800a908:	4b35      	ldr	r3, [pc, #212]	; (800a9e0 <UART_SetConfig+0xa28>)
 800a90a:	e004      	b.n	800a916 <UART_SetConfig+0x95e>
 800a90c:	4b35      	ldr	r3, [pc, #212]	; (800a9e4 <UART_SetConfig+0xa2c>)
 800a90e:	e002      	b.n	800a916 <UART_SetConfig+0x95e>
 800a910:	4b35      	ldr	r3, [pc, #212]	; (800a9e8 <UART_SetConfig+0xa30>)
 800a912:	e000      	b.n	800a916 <UART_SetConfig+0x95e>
 800a914:	4b29      	ldr	r3, [pc, #164]	; (800a9bc <UART_SetConfig+0xa04>)
 800a916:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a918:	e0cb      	b.n	800aab2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d046      	beq.n	800a9b0 <UART_SetConfig+0x9f8>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a926:	2b01      	cmp	r3, #1
 800a928:	d040      	beq.n	800a9ac <UART_SetConfig+0x9f4>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a92e:	2b02      	cmp	r3, #2
 800a930:	d03a      	beq.n	800a9a8 <UART_SetConfig+0x9f0>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a936:	2b03      	cmp	r3, #3
 800a938:	d034      	beq.n	800a9a4 <UART_SetConfig+0x9ec>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a93e:	2b04      	cmp	r3, #4
 800a940:	d02e      	beq.n	800a9a0 <UART_SetConfig+0x9e8>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a946:	2b05      	cmp	r3, #5
 800a948:	d028      	beq.n	800a99c <UART_SetConfig+0x9e4>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a94e:	2b06      	cmp	r3, #6
 800a950:	d022      	beq.n	800a998 <UART_SetConfig+0x9e0>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a956:	2b07      	cmp	r3, #7
 800a958:	d01c      	beq.n	800a994 <UART_SetConfig+0x9dc>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a95e:	2b08      	cmp	r3, #8
 800a960:	d016      	beq.n	800a990 <UART_SetConfig+0x9d8>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a966:	2b09      	cmp	r3, #9
 800a968:	d00f      	beq.n	800a98a <UART_SetConfig+0x9d2>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a96e:	2b0a      	cmp	r3, #10
 800a970:	d008      	beq.n	800a984 <UART_SetConfig+0x9cc>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a976:	2b0b      	cmp	r3, #11
 800a978:	d102      	bne.n	800a980 <UART_SetConfig+0x9c8>
 800a97a:	f643 5309 	movw	r3, #15625	; 0x3d09
 800a97e:	e018      	b.n	800a9b2 <UART_SetConfig+0x9fa>
 800a980:	4b13      	ldr	r3, [pc, #76]	; (800a9d0 <UART_SetConfig+0xa18>)
 800a982:	e016      	b.n	800a9b2 <UART_SetConfig+0x9fa>
 800a984:	f647 2312 	movw	r3, #31250	; 0x7a12
 800a988:	e013      	b.n	800a9b2 <UART_SetConfig+0x9fa>
 800a98a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a98e:	e010      	b.n	800a9b2 <UART_SetConfig+0x9fa>
 800a990:	4b16      	ldr	r3, [pc, #88]	; (800a9ec <UART_SetConfig+0xa34>)
 800a992:	e00e      	b.n	800a9b2 <UART_SetConfig+0x9fa>
 800a994:	4b0a      	ldr	r3, [pc, #40]	; (800a9c0 <UART_SetConfig+0xa08>)
 800a996:	e00c      	b.n	800a9b2 <UART_SetConfig+0x9fa>
 800a998:	4b15      	ldr	r3, [pc, #84]	; (800a9f0 <UART_SetConfig+0xa38>)
 800a99a:	e00a      	b.n	800a9b2 <UART_SetConfig+0x9fa>
 800a99c:	4b15      	ldr	r3, [pc, #84]	; (800a9f4 <UART_SetConfig+0xa3c>)
 800a99e:	e008      	b.n	800a9b2 <UART_SetConfig+0x9fa>
 800a9a0:	4b08      	ldr	r3, [pc, #32]	; (800a9c4 <UART_SetConfig+0xa0c>)
 800a9a2:	e006      	b.n	800a9b2 <UART_SetConfig+0x9fa>
 800a9a4:	4b14      	ldr	r3, [pc, #80]	; (800a9f8 <UART_SetConfig+0xa40>)
 800a9a6:	e004      	b.n	800a9b2 <UART_SetConfig+0x9fa>
 800a9a8:	4b07      	ldr	r3, [pc, #28]	; (800a9c8 <UART_SetConfig+0xa10>)
 800a9aa:	e002      	b.n	800a9b2 <UART_SetConfig+0x9fa>
 800a9ac:	4b07      	ldr	r3, [pc, #28]	; (800a9cc <UART_SetConfig+0xa14>)
 800a9ae:	e000      	b.n	800a9b2 <UART_SetConfig+0x9fa>
 800a9b0:	4b07      	ldr	r3, [pc, #28]	; (800a9d0 <UART_SetConfig+0xa18>)
 800a9b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a9b4:	e07d      	b.n	800aab2 <UART_SetConfig+0xafa>
 800a9b6:	bf00      	nop
 800a9b8:	58024400 	.word	0x58024400
 800a9bc:	03d09000 	.word	0x03d09000
 800a9c0:	0003d090 	.word	0x0003d090
 800a9c4:	0007a120 	.word	0x0007a120
 800a9c8:	000f4240 	.word	0x000f4240
 800a9cc:	001e8480 	.word	0x001e8480
 800a9d0:	003d0900 	.word	0x003d0900
 800a9d4:	00516155 	.word	0x00516155
 800a9d8:	0061a800 	.word	0x0061a800
 800a9dc:	007a1200 	.word	0x007a1200
 800a9e0:	00a2c2aa 	.word	0x00a2c2aa
 800a9e4:	00f42400 	.word	0x00f42400
 800a9e8:	01e84800 	.word	0x01e84800
 800a9ec:	0001e848 	.word	0x0001e848
 800a9f0:	00051615 	.word	0x00051615
 800a9f4:	00061a80 	.word	0x00061a80
 800a9f8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d04e      	beq.n	800aaa2 <UART_SetConfig+0xaea>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	d047      	beq.n	800aa9c <UART_SetConfig+0xae4>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa10:	2b02      	cmp	r3, #2
 800aa12:	d040      	beq.n	800aa96 <UART_SetConfig+0xade>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa18:	2b03      	cmp	r3, #3
 800aa1a:	d039      	beq.n	800aa90 <UART_SetConfig+0xad8>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa20:	2b04      	cmp	r3, #4
 800aa22:	d032      	beq.n	800aa8a <UART_SetConfig+0xad2>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa28:	2b05      	cmp	r3, #5
 800aa2a:	d02b      	beq.n	800aa84 <UART_SetConfig+0xacc>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa30:	2b06      	cmp	r3, #6
 800aa32:	d024      	beq.n	800aa7e <UART_SetConfig+0xac6>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa38:	2b07      	cmp	r3, #7
 800aa3a:	d01d      	beq.n	800aa78 <UART_SetConfig+0xac0>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa40:	2b08      	cmp	r3, #8
 800aa42:	d016      	beq.n	800aa72 <UART_SetConfig+0xaba>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa48:	2b09      	cmp	r3, #9
 800aa4a:	d00f      	beq.n	800aa6c <UART_SetConfig+0xab4>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa50:	2b0a      	cmp	r3, #10
 800aa52:	d008      	beq.n	800aa66 <UART_SetConfig+0xaae>
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa58:	2b0b      	cmp	r3, #11
 800aa5a:	d101      	bne.n	800aa60 <UART_SetConfig+0xaa8>
 800aa5c:	2380      	movs	r3, #128	; 0x80
 800aa5e:	e022      	b.n	800aaa6 <UART_SetConfig+0xaee>
 800aa60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa64:	e01f      	b.n	800aaa6 <UART_SetConfig+0xaee>
 800aa66:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa6a:	e01c      	b.n	800aaa6 <UART_SetConfig+0xaee>
 800aa6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa70:	e019      	b.n	800aaa6 <UART_SetConfig+0xaee>
 800aa72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa76:	e016      	b.n	800aaa6 <UART_SetConfig+0xaee>
 800aa78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aa7c:	e013      	b.n	800aaa6 <UART_SetConfig+0xaee>
 800aa7e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800aa82:	e010      	b.n	800aaa6 <UART_SetConfig+0xaee>
 800aa84:	f640 43cc 	movw	r3, #3276	; 0xccc
 800aa88:	e00d      	b.n	800aaa6 <UART_SetConfig+0xaee>
 800aa8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa8e:	e00a      	b.n	800aaa6 <UART_SetConfig+0xaee>
 800aa90:	f241 5355 	movw	r3, #5461	; 0x1555
 800aa94:	e007      	b.n	800aaa6 <UART_SetConfig+0xaee>
 800aa96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aa9a:	e004      	b.n	800aaa6 <UART_SetConfig+0xaee>
 800aa9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aaa0:	e001      	b.n	800aaa6 <UART_SetConfig+0xaee>
 800aaa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aaa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aaa8:	e003      	b.n	800aab2 <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800aab0:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800aab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	f001 83e8 	beq.w	800c28a <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	685a      	ldr	r2, [r3, #4]
 800aabe:	4613      	mov	r3, r2
 800aac0:	005b      	lsls	r3, r3, #1
 800aac2:	4413      	add	r3, r2
 800aac4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aac6:	429a      	cmp	r2, r3
 800aac8:	d305      	bcc.n	800aad6 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aad0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d904      	bls.n	800aae0 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800aad6:	2301      	movs	r3, #1
 800aad8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aadc:	f001 bbd5 	b.w	800c28a <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 800aae0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800aae4:	2b08      	cmp	r3, #8
 800aae6:	f000 8154 	beq.w	800ad92 <UART_SetConfig+0xdda>
 800aaea:	2b08      	cmp	r3, #8
 800aaec:	dc06      	bgt.n	800aafc <UART_SetConfig+0xb44>
 800aaee:	2b02      	cmp	r3, #2
 800aaf0:	d00f      	beq.n	800ab12 <UART_SetConfig+0xb5a>
 800aaf2:	2b04      	cmp	r3, #4
 800aaf4:	f000 80ac 	beq.w	800ac50 <UART_SetConfig+0xc98>
 800aaf8:	f000 bc30 	b.w	800b35c <UART_SetConfig+0x13a4>
 800aafc:	2b20      	cmp	r3, #32
 800aafe:	f000 832d 	beq.w	800b15c <UART_SetConfig+0x11a4>
 800ab02:	2b40      	cmp	r3, #64	; 0x40
 800ab04:	f000 83a5 	beq.w	800b252 <UART_SetConfig+0x129a>
 800ab08:	2b10      	cmp	r3, #16
 800ab0a:	f000 81e3 	beq.w	800aed4 <UART_SetConfig+0xf1c>
 800ab0e:	f000 bc25 	b.w	800b35c <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ab12:	f7fd fcd5 	bl	80084c0 <HAL_RCCEx_GetD3PCLK1Freq>
 800ab16:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f04f 0100 	mov.w	r1, #0
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d067      	beq.n	800abf8 <UART_SetConfig+0xc40>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d05e      	beq.n	800abee <UART_SetConfig+0xc36>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab34:	2b02      	cmp	r3, #2
 800ab36:	d055      	beq.n	800abe4 <UART_SetConfig+0xc2c>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab3c:	2b03      	cmp	r3, #3
 800ab3e:	d04c      	beq.n	800abda <UART_SetConfig+0xc22>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab44:	2b04      	cmp	r3, #4
 800ab46:	d043      	beq.n	800abd0 <UART_SetConfig+0xc18>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab4c:	2b05      	cmp	r3, #5
 800ab4e:	d03a      	beq.n	800abc6 <UART_SetConfig+0xc0e>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab54:	2b06      	cmp	r3, #6
 800ab56:	d031      	beq.n	800abbc <UART_SetConfig+0xc04>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab5c:	2b07      	cmp	r3, #7
 800ab5e:	d028      	beq.n	800abb2 <UART_SetConfig+0xbfa>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab64:	2b08      	cmp	r3, #8
 800ab66:	d01f      	beq.n	800aba8 <UART_SetConfig+0xbf0>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab6c:	2b09      	cmp	r3, #9
 800ab6e:	d016      	beq.n	800ab9e <UART_SetConfig+0xbe6>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab74:	2b0a      	cmp	r3, #10
 800ab76:	d00d      	beq.n	800ab94 <UART_SetConfig+0xbdc>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab7c:	2b0b      	cmp	r3, #11
 800ab7e:	d104      	bne.n	800ab8a <UART_SetConfig+0xbd2>
 800ab80:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab84:	f04f 0400 	mov.w	r4, #0
 800ab88:	e03a      	b.n	800ac00 <UART_SetConfig+0xc48>
 800ab8a:	f04f 0301 	mov.w	r3, #1
 800ab8e:	f04f 0400 	mov.w	r4, #0
 800ab92:	e035      	b.n	800ac00 <UART_SetConfig+0xc48>
 800ab94:	f04f 0380 	mov.w	r3, #128	; 0x80
 800ab98:	f04f 0400 	mov.w	r4, #0
 800ab9c:	e030      	b.n	800ac00 <UART_SetConfig+0xc48>
 800ab9e:	f04f 0340 	mov.w	r3, #64	; 0x40
 800aba2:	f04f 0400 	mov.w	r4, #0
 800aba6:	e02b      	b.n	800ac00 <UART_SetConfig+0xc48>
 800aba8:	f04f 0320 	mov.w	r3, #32
 800abac:	f04f 0400 	mov.w	r4, #0
 800abb0:	e026      	b.n	800ac00 <UART_SetConfig+0xc48>
 800abb2:	f04f 0310 	mov.w	r3, #16
 800abb6:	f04f 0400 	mov.w	r4, #0
 800abba:	e021      	b.n	800ac00 <UART_SetConfig+0xc48>
 800abbc:	f04f 030c 	mov.w	r3, #12
 800abc0:	f04f 0400 	mov.w	r4, #0
 800abc4:	e01c      	b.n	800ac00 <UART_SetConfig+0xc48>
 800abc6:	f04f 030a 	mov.w	r3, #10
 800abca:	f04f 0400 	mov.w	r4, #0
 800abce:	e017      	b.n	800ac00 <UART_SetConfig+0xc48>
 800abd0:	f04f 0308 	mov.w	r3, #8
 800abd4:	f04f 0400 	mov.w	r4, #0
 800abd8:	e012      	b.n	800ac00 <UART_SetConfig+0xc48>
 800abda:	f04f 0306 	mov.w	r3, #6
 800abde:	f04f 0400 	mov.w	r4, #0
 800abe2:	e00d      	b.n	800ac00 <UART_SetConfig+0xc48>
 800abe4:	f04f 0304 	mov.w	r3, #4
 800abe8:	f04f 0400 	mov.w	r4, #0
 800abec:	e008      	b.n	800ac00 <UART_SetConfig+0xc48>
 800abee:	f04f 0302 	mov.w	r3, #2
 800abf2:	f04f 0400 	mov.w	r4, #0
 800abf6:	e003      	b.n	800ac00 <UART_SetConfig+0xc48>
 800abf8:	f04f 0301 	mov.w	r3, #1
 800abfc:	f04f 0400 	mov.w	r4, #0
 800ac00:	461a      	mov	r2, r3
 800ac02:	4623      	mov	r3, r4
 800ac04:	f7f5 fb68 	bl	80002d8 <__aeabi_uldivmod>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	460c      	mov	r4, r1
 800ac0c:	4619      	mov	r1, r3
 800ac0e:	4622      	mov	r2, r4
 800ac10:	f04f 0300 	mov.w	r3, #0
 800ac14:	f04f 0400 	mov.w	r4, #0
 800ac18:	0214      	lsls	r4, r2, #8
 800ac1a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ac1e:	020b      	lsls	r3, r1, #8
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	6852      	ldr	r2, [r2, #4]
 800ac24:	0852      	lsrs	r2, r2, #1
 800ac26:	4611      	mov	r1, r2
 800ac28:	f04f 0200 	mov.w	r2, #0
 800ac2c:	eb13 0b01 	adds.w	fp, r3, r1
 800ac30:	eb44 0c02 	adc.w	ip, r4, r2
 800ac34:	4658      	mov	r0, fp
 800ac36:	4661      	mov	r1, ip
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	f04f 0400 	mov.w	r4, #0
 800ac40:	461a      	mov	r2, r3
 800ac42:	4623      	mov	r3, r4
 800ac44:	f7f5 fb48 	bl	80002d8 <__aeabi_uldivmod>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	460c      	mov	r4, r1
 800ac4c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ac4e:	e389      	b.n	800b364 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac50:	f107 0318 	add.w	r3, r7, #24
 800ac54:	4618      	mov	r0, r3
 800ac56:	f7fd fc49 	bl	80084ec <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac5a:	69fb      	ldr	r3, [r7, #28]
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f04f 0100 	mov.w	r1, #0
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d067      	beq.n	800ad3a <UART_SetConfig+0xd82>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac6e:	2b01      	cmp	r3, #1
 800ac70:	d05e      	beq.n	800ad30 <UART_SetConfig+0xd78>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac76:	2b02      	cmp	r3, #2
 800ac78:	d055      	beq.n	800ad26 <UART_SetConfig+0xd6e>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac7e:	2b03      	cmp	r3, #3
 800ac80:	d04c      	beq.n	800ad1c <UART_SetConfig+0xd64>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac86:	2b04      	cmp	r3, #4
 800ac88:	d043      	beq.n	800ad12 <UART_SetConfig+0xd5a>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac8e:	2b05      	cmp	r3, #5
 800ac90:	d03a      	beq.n	800ad08 <UART_SetConfig+0xd50>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac96:	2b06      	cmp	r3, #6
 800ac98:	d031      	beq.n	800acfe <UART_SetConfig+0xd46>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac9e:	2b07      	cmp	r3, #7
 800aca0:	d028      	beq.n	800acf4 <UART_SetConfig+0xd3c>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca6:	2b08      	cmp	r3, #8
 800aca8:	d01f      	beq.n	800acea <UART_SetConfig+0xd32>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acae:	2b09      	cmp	r3, #9
 800acb0:	d016      	beq.n	800ace0 <UART_SetConfig+0xd28>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb6:	2b0a      	cmp	r3, #10
 800acb8:	d00d      	beq.n	800acd6 <UART_SetConfig+0xd1e>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acbe:	2b0b      	cmp	r3, #11
 800acc0:	d104      	bne.n	800accc <UART_SetConfig+0xd14>
 800acc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acc6:	f04f 0400 	mov.w	r4, #0
 800acca:	e03a      	b.n	800ad42 <UART_SetConfig+0xd8a>
 800accc:	f04f 0301 	mov.w	r3, #1
 800acd0:	f04f 0400 	mov.w	r4, #0
 800acd4:	e035      	b.n	800ad42 <UART_SetConfig+0xd8a>
 800acd6:	f04f 0380 	mov.w	r3, #128	; 0x80
 800acda:	f04f 0400 	mov.w	r4, #0
 800acde:	e030      	b.n	800ad42 <UART_SetConfig+0xd8a>
 800ace0:	f04f 0340 	mov.w	r3, #64	; 0x40
 800ace4:	f04f 0400 	mov.w	r4, #0
 800ace8:	e02b      	b.n	800ad42 <UART_SetConfig+0xd8a>
 800acea:	f04f 0320 	mov.w	r3, #32
 800acee:	f04f 0400 	mov.w	r4, #0
 800acf2:	e026      	b.n	800ad42 <UART_SetConfig+0xd8a>
 800acf4:	f04f 0310 	mov.w	r3, #16
 800acf8:	f04f 0400 	mov.w	r4, #0
 800acfc:	e021      	b.n	800ad42 <UART_SetConfig+0xd8a>
 800acfe:	f04f 030c 	mov.w	r3, #12
 800ad02:	f04f 0400 	mov.w	r4, #0
 800ad06:	e01c      	b.n	800ad42 <UART_SetConfig+0xd8a>
 800ad08:	f04f 030a 	mov.w	r3, #10
 800ad0c:	f04f 0400 	mov.w	r4, #0
 800ad10:	e017      	b.n	800ad42 <UART_SetConfig+0xd8a>
 800ad12:	f04f 0308 	mov.w	r3, #8
 800ad16:	f04f 0400 	mov.w	r4, #0
 800ad1a:	e012      	b.n	800ad42 <UART_SetConfig+0xd8a>
 800ad1c:	f04f 0306 	mov.w	r3, #6
 800ad20:	f04f 0400 	mov.w	r4, #0
 800ad24:	e00d      	b.n	800ad42 <UART_SetConfig+0xd8a>
 800ad26:	f04f 0304 	mov.w	r3, #4
 800ad2a:	f04f 0400 	mov.w	r4, #0
 800ad2e:	e008      	b.n	800ad42 <UART_SetConfig+0xd8a>
 800ad30:	f04f 0302 	mov.w	r3, #2
 800ad34:	f04f 0400 	mov.w	r4, #0
 800ad38:	e003      	b.n	800ad42 <UART_SetConfig+0xd8a>
 800ad3a:	f04f 0301 	mov.w	r3, #1
 800ad3e:	f04f 0400 	mov.w	r4, #0
 800ad42:	461a      	mov	r2, r3
 800ad44:	4623      	mov	r3, r4
 800ad46:	f7f5 fac7 	bl	80002d8 <__aeabi_uldivmod>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	460c      	mov	r4, r1
 800ad4e:	4619      	mov	r1, r3
 800ad50:	4622      	mov	r2, r4
 800ad52:	f04f 0300 	mov.w	r3, #0
 800ad56:	f04f 0400 	mov.w	r4, #0
 800ad5a:	0214      	lsls	r4, r2, #8
 800ad5c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ad60:	020b      	lsls	r3, r1, #8
 800ad62:	687a      	ldr	r2, [r7, #4]
 800ad64:	6852      	ldr	r2, [r2, #4]
 800ad66:	0852      	lsrs	r2, r2, #1
 800ad68:	4611      	mov	r1, r2
 800ad6a:	f04f 0200 	mov.w	r2, #0
 800ad6e:	eb13 0b01 	adds.w	fp, r3, r1
 800ad72:	eb44 0c02 	adc.w	ip, r4, r2
 800ad76:	4658      	mov	r0, fp
 800ad78:	4661      	mov	r1, ip
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	f04f 0400 	mov.w	r4, #0
 800ad82:	461a      	mov	r2, r3
 800ad84:	4623      	mov	r3, r4
 800ad86:	f7f5 faa7 	bl	80002d8 <__aeabi_uldivmod>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	460c      	mov	r4, r1
 800ad8e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ad90:	e2e8      	b.n	800b364 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad92:	f107 030c 	add.w	r3, r7, #12
 800ad96:	4618      	mov	r0, r3
 800ad98:	f7fd fcf4 	bl	8008784 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f04f 0100 	mov.w	r1, #0
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d067      	beq.n	800ae7c <UART_SetConfig+0xec4>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	d05e      	beq.n	800ae72 <UART_SetConfig+0xeba>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb8:	2b02      	cmp	r3, #2
 800adba:	d055      	beq.n	800ae68 <UART_SetConfig+0xeb0>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc0:	2b03      	cmp	r3, #3
 800adc2:	d04c      	beq.n	800ae5e <UART_SetConfig+0xea6>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc8:	2b04      	cmp	r3, #4
 800adca:	d043      	beq.n	800ae54 <UART_SetConfig+0xe9c>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add0:	2b05      	cmp	r3, #5
 800add2:	d03a      	beq.n	800ae4a <UART_SetConfig+0xe92>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add8:	2b06      	cmp	r3, #6
 800adda:	d031      	beq.n	800ae40 <UART_SetConfig+0xe88>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade0:	2b07      	cmp	r3, #7
 800ade2:	d028      	beq.n	800ae36 <UART_SetConfig+0xe7e>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade8:	2b08      	cmp	r3, #8
 800adea:	d01f      	beq.n	800ae2c <UART_SetConfig+0xe74>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf0:	2b09      	cmp	r3, #9
 800adf2:	d016      	beq.n	800ae22 <UART_SetConfig+0xe6a>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf8:	2b0a      	cmp	r3, #10
 800adfa:	d00d      	beq.n	800ae18 <UART_SetConfig+0xe60>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae00:	2b0b      	cmp	r3, #11
 800ae02:	d104      	bne.n	800ae0e <UART_SetConfig+0xe56>
 800ae04:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae08:	f04f 0400 	mov.w	r4, #0
 800ae0c:	e03a      	b.n	800ae84 <UART_SetConfig+0xecc>
 800ae0e:	f04f 0301 	mov.w	r3, #1
 800ae12:	f04f 0400 	mov.w	r4, #0
 800ae16:	e035      	b.n	800ae84 <UART_SetConfig+0xecc>
 800ae18:	f04f 0380 	mov.w	r3, #128	; 0x80
 800ae1c:	f04f 0400 	mov.w	r4, #0
 800ae20:	e030      	b.n	800ae84 <UART_SetConfig+0xecc>
 800ae22:	f04f 0340 	mov.w	r3, #64	; 0x40
 800ae26:	f04f 0400 	mov.w	r4, #0
 800ae2a:	e02b      	b.n	800ae84 <UART_SetConfig+0xecc>
 800ae2c:	f04f 0320 	mov.w	r3, #32
 800ae30:	f04f 0400 	mov.w	r4, #0
 800ae34:	e026      	b.n	800ae84 <UART_SetConfig+0xecc>
 800ae36:	f04f 0310 	mov.w	r3, #16
 800ae3a:	f04f 0400 	mov.w	r4, #0
 800ae3e:	e021      	b.n	800ae84 <UART_SetConfig+0xecc>
 800ae40:	f04f 030c 	mov.w	r3, #12
 800ae44:	f04f 0400 	mov.w	r4, #0
 800ae48:	e01c      	b.n	800ae84 <UART_SetConfig+0xecc>
 800ae4a:	f04f 030a 	mov.w	r3, #10
 800ae4e:	f04f 0400 	mov.w	r4, #0
 800ae52:	e017      	b.n	800ae84 <UART_SetConfig+0xecc>
 800ae54:	f04f 0308 	mov.w	r3, #8
 800ae58:	f04f 0400 	mov.w	r4, #0
 800ae5c:	e012      	b.n	800ae84 <UART_SetConfig+0xecc>
 800ae5e:	f04f 0306 	mov.w	r3, #6
 800ae62:	f04f 0400 	mov.w	r4, #0
 800ae66:	e00d      	b.n	800ae84 <UART_SetConfig+0xecc>
 800ae68:	f04f 0304 	mov.w	r3, #4
 800ae6c:	f04f 0400 	mov.w	r4, #0
 800ae70:	e008      	b.n	800ae84 <UART_SetConfig+0xecc>
 800ae72:	f04f 0302 	mov.w	r3, #2
 800ae76:	f04f 0400 	mov.w	r4, #0
 800ae7a:	e003      	b.n	800ae84 <UART_SetConfig+0xecc>
 800ae7c:	f04f 0301 	mov.w	r3, #1
 800ae80:	f04f 0400 	mov.w	r4, #0
 800ae84:	461a      	mov	r2, r3
 800ae86:	4623      	mov	r3, r4
 800ae88:	f7f5 fa26 	bl	80002d8 <__aeabi_uldivmod>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	460c      	mov	r4, r1
 800ae90:	4619      	mov	r1, r3
 800ae92:	4622      	mov	r2, r4
 800ae94:	f04f 0300 	mov.w	r3, #0
 800ae98:	f04f 0400 	mov.w	r4, #0
 800ae9c:	0214      	lsls	r4, r2, #8
 800ae9e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800aea2:	020b      	lsls	r3, r1, #8
 800aea4:	687a      	ldr	r2, [r7, #4]
 800aea6:	6852      	ldr	r2, [r2, #4]
 800aea8:	0852      	lsrs	r2, r2, #1
 800aeaa:	4611      	mov	r1, r2
 800aeac:	f04f 0200 	mov.w	r2, #0
 800aeb0:	eb13 0b01 	adds.w	fp, r3, r1
 800aeb4:	eb44 0c02 	adc.w	ip, r4, r2
 800aeb8:	4658      	mov	r0, fp
 800aeba:	4661      	mov	r1, ip
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	685b      	ldr	r3, [r3, #4]
 800aec0:	f04f 0400 	mov.w	r4, #0
 800aec4:	461a      	mov	r2, r3
 800aec6:	4623      	mov	r3, r4
 800aec8:	f7f5 fa06 	bl	80002d8 <__aeabi_uldivmod>
 800aecc:	4603      	mov	r3, r0
 800aece:	460c      	mov	r4, r1
 800aed0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800aed2:	e247      	b.n	800b364 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aed4:	4b96      	ldr	r3, [pc, #600]	; (800b130 <UART_SetConfig+0x1178>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f003 0320 	and.w	r3, r3, #32
 800aedc:	2b00      	cmp	r3, #0
 800aede:	f000 80a3 	beq.w	800b028 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aee2:	4b93      	ldr	r3, [pc, #588]	; (800b130 <UART_SetConfig+0x1178>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	08db      	lsrs	r3, r3, #3
 800aee8:	f003 0303 	and.w	r3, r3, #3
 800aeec:	4a91      	ldr	r2, [pc, #580]	; (800b134 <UART_SetConfig+0x117c>)
 800aeee:	fa22 f303 	lsr.w	r3, r2, r3
 800aef2:	4618      	mov	r0, r3
 800aef4:	f04f 0100 	mov.w	r1, #0
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d067      	beq.n	800afd0 <UART_SetConfig+0x1018>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af04:	2b01      	cmp	r3, #1
 800af06:	d05e      	beq.n	800afc6 <UART_SetConfig+0x100e>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af0c:	2b02      	cmp	r3, #2
 800af0e:	d055      	beq.n	800afbc <UART_SetConfig+0x1004>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af14:	2b03      	cmp	r3, #3
 800af16:	d04c      	beq.n	800afb2 <UART_SetConfig+0xffa>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af1c:	2b04      	cmp	r3, #4
 800af1e:	d043      	beq.n	800afa8 <UART_SetConfig+0xff0>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af24:	2b05      	cmp	r3, #5
 800af26:	d03a      	beq.n	800af9e <UART_SetConfig+0xfe6>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af2c:	2b06      	cmp	r3, #6
 800af2e:	d031      	beq.n	800af94 <UART_SetConfig+0xfdc>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af34:	2b07      	cmp	r3, #7
 800af36:	d028      	beq.n	800af8a <UART_SetConfig+0xfd2>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af3c:	2b08      	cmp	r3, #8
 800af3e:	d01f      	beq.n	800af80 <UART_SetConfig+0xfc8>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af44:	2b09      	cmp	r3, #9
 800af46:	d016      	beq.n	800af76 <UART_SetConfig+0xfbe>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af4c:	2b0a      	cmp	r3, #10
 800af4e:	d00d      	beq.n	800af6c <UART_SetConfig+0xfb4>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af54:	2b0b      	cmp	r3, #11
 800af56:	d104      	bne.n	800af62 <UART_SetConfig+0xfaa>
 800af58:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af5c:	f04f 0400 	mov.w	r4, #0
 800af60:	e03a      	b.n	800afd8 <UART_SetConfig+0x1020>
 800af62:	f04f 0301 	mov.w	r3, #1
 800af66:	f04f 0400 	mov.w	r4, #0
 800af6a:	e035      	b.n	800afd8 <UART_SetConfig+0x1020>
 800af6c:	f04f 0380 	mov.w	r3, #128	; 0x80
 800af70:	f04f 0400 	mov.w	r4, #0
 800af74:	e030      	b.n	800afd8 <UART_SetConfig+0x1020>
 800af76:	f04f 0340 	mov.w	r3, #64	; 0x40
 800af7a:	f04f 0400 	mov.w	r4, #0
 800af7e:	e02b      	b.n	800afd8 <UART_SetConfig+0x1020>
 800af80:	f04f 0320 	mov.w	r3, #32
 800af84:	f04f 0400 	mov.w	r4, #0
 800af88:	e026      	b.n	800afd8 <UART_SetConfig+0x1020>
 800af8a:	f04f 0310 	mov.w	r3, #16
 800af8e:	f04f 0400 	mov.w	r4, #0
 800af92:	e021      	b.n	800afd8 <UART_SetConfig+0x1020>
 800af94:	f04f 030c 	mov.w	r3, #12
 800af98:	f04f 0400 	mov.w	r4, #0
 800af9c:	e01c      	b.n	800afd8 <UART_SetConfig+0x1020>
 800af9e:	f04f 030a 	mov.w	r3, #10
 800afa2:	f04f 0400 	mov.w	r4, #0
 800afa6:	e017      	b.n	800afd8 <UART_SetConfig+0x1020>
 800afa8:	f04f 0308 	mov.w	r3, #8
 800afac:	f04f 0400 	mov.w	r4, #0
 800afb0:	e012      	b.n	800afd8 <UART_SetConfig+0x1020>
 800afb2:	f04f 0306 	mov.w	r3, #6
 800afb6:	f04f 0400 	mov.w	r4, #0
 800afba:	e00d      	b.n	800afd8 <UART_SetConfig+0x1020>
 800afbc:	f04f 0304 	mov.w	r3, #4
 800afc0:	f04f 0400 	mov.w	r4, #0
 800afc4:	e008      	b.n	800afd8 <UART_SetConfig+0x1020>
 800afc6:	f04f 0302 	mov.w	r3, #2
 800afca:	f04f 0400 	mov.w	r4, #0
 800afce:	e003      	b.n	800afd8 <UART_SetConfig+0x1020>
 800afd0:	f04f 0301 	mov.w	r3, #1
 800afd4:	f04f 0400 	mov.w	r4, #0
 800afd8:	461a      	mov	r2, r3
 800afda:	4623      	mov	r3, r4
 800afdc:	f7f5 f97c 	bl	80002d8 <__aeabi_uldivmod>
 800afe0:	4603      	mov	r3, r0
 800afe2:	460c      	mov	r4, r1
 800afe4:	4619      	mov	r1, r3
 800afe6:	4622      	mov	r2, r4
 800afe8:	f04f 0300 	mov.w	r3, #0
 800afec:	f04f 0400 	mov.w	r4, #0
 800aff0:	0214      	lsls	r4, r2, #8
 800aff2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800aff6:	020b      	lsls	r3, r1, #8
 800aff8:	687a      	ldr	r2, [r7, #4]
 800affa:	6852      	ldr	r2, [r2, #4]
 800affc:	0852      	lsrs	r2, r2, #1
 800affe:	4611      	mov	r1, r2
 800b000:	f04f 0200 	mov.w	r2, #0
 800b004:	eb13 0b01 	adds.w	fp, r3, r1
 800b008:	eb44 0c02 	adc.w	ip, r4, r2
 800b00c:	4658      	mov	r0, fp
 800b00e:	4661      	mov	r1, ip
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	f04f 0400 	mov.w	r4, #0
 800b018:	461a      	mov	r2, r3
 800b01a:	4623      	mov	r3, r4
 800b01c:	f7f5 f95c 	bl	80002d8 <__aeabi_uldivmod>
 800b020:	4603      	mov	r3, r0
 800b022:	460c      	mov	r4, r1
 800b024:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800b026:	e19d      	b.n	800b364 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d05b      	beq.n	800b0e8 <UART_SetConfig+0x1130>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b034:	2b01      	cmp	r3, #1
 800b036:	d053      	beq.n	800b0e0 <UART_SetConfig+0x1128>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b03c:	2b02      	cmp	r3, #2
 800b03e:	d04b      	beq.n	800b0d8 <UART_SetConfig+0x1120>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b044:	2b03      	cmp	r3, #3
 800b046:	d043      	beq.n	800b0d0 <UART_SetConfig+0x1118>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b04c:	2b04      	cmp	r3, #4
 800b04e:	d03b      	beq.n	800b0c8 <UART_SetConfig+0x1110>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b054:	2b05      	cmp	r3, #5
 800b056:	d033      	beq.n	800b0c0 <UART_SetConfig+0x1108>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b05c:	2b06      	cmp	r3, #6
 800b05e:	d02b      	beq.n	800b0b8 <UART_SetConfig+0x1100>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b064:	2b07      	cmp	r3, #7
 800b066:	d023      	beq.n	800b0b0 <UART_SetConfig+0x10f8>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b06c:	2b08      	cmp	r3, #8
 800b06e:	d01b      	beq.n	800b0a8 <UART_SetConfig+0x10f0>
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b074:	2b09      	cmp	r3, #9
 800b076:	d013      	beq.n	800b0a0 <UART_SetConfig+0x10e8>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b07c:	2b0a      	cmp	r3, #10
 800b07e:	d00b      	beq.n	800b098 <UART_SetConfig+0x10e0>
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b084:	2b0b      	cmp	r3, #11
 800b086:	d103      	bne.n	800b090 <UART_SetConfig+0x10d8>
 800b088:	4b2a      	ldr	r3, [pc, #168]	; (800b134 <UART_SetConfig+0x117c>)
 800b08a:	f04f 0400 	mov.w	r4, #0
 800b08e:	e02e      	b.n	800b0ee <UART_SetConfig+0x1136>
 800b090:	4b29      	ldr	r3, [pc, #164]	; (800b138 <UART_SetConfig+0x1180>)
 800b092:	f04f 0403 	mov.w	r4, #3
 800b096:	e02a      	b.n	800b0ee <UART_SetConfig+0x1136>
 800b098:	4b28      	ldr	r3, [pc, #160]	; (800b13c <UART_SetConfig+0x1184>)
 800b09a:	f04f 0400 	mov.w	r4, #0
 800b09e:	e026      	b.n	800b0ee <UART_SetConfig+0x1136>
 800b0a0:	4b27      	ldr	r3, [pc, #156]	; (800b140 <UART_SetConfig+0x1188>)
 800b0a2:	f04f 0400 	mov.w	r4, #0
 800b0a6:	e022      	b.n	800b0ee <UART_SetConfig+0x1136>
 800b0a8:	4b26      	ldr	r3, [pc, #152]	; (800b144 <UART_SetConfig+0x118c>)
 800b0aa:	f04f 0400 	mov.w	r4, #0
 800b0ae:	e01e      	b.n	800b0ee <UART_SetConfig+0x1136>
 800b0b0:	4b25      	ldr	r3, [pc, #148]	; (800b148 <UART_SetConfig+0x1190>)
 800b0b2:	f04f 0400 	mov.w	r4, #0
 800b0b6:	e01a      	b.n	800b0ee <UART_SetConfig+0x1136>
 800b0b8:	a419      	add	r4, pc, #100	; (adr r4, 800b120 <UART_SetConfig+0x1168>)
 800b0ba:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b0be:	e016      	b.n	800b0ee <UART_SetConfig+0x1136>
 800b0c0:	4b22      	ldr	r3, [pc, #136]	; (800b14c <UART_SetConfig+0x1194>)
 800b0c2:	f04f 0400 	mov.w	r4, #0
 800b0c6:	e012      	b.n	800b0ee <UART_SetConfig+0x1136>
 800b0c8:	4b21      	ldr	r3, [pc, #132]	; (800b150 <UART_SetConfig+0x1198>)
 800b0ca:	f04f 0400 	mov.w	r4, #0
 800b0ce:	e00e      	b.n	800b0ee <UART_SetConfig+0x1136>
 800b0d0:	a415      	add	r4, pc, #84	; (adr r4, 800b128 <UART_SetConfig+0x1170>)
 800b0d2:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b0d6:	e00a      	b.n	800b0ee <UART_SetConfig+0x1136>
 800b0d8:	4b1e      	ldr	r3, [pc, #120]	; (800b154 <UART_SetConfig+0x119c>)
 800b0da:	f04f 0400 	mov.w	r4, #0
 800b0de:	e006      	b.n	800b0ee <UART_SetConfig+0x1136>
 800b0e0:	4b1d      	ldr	r3, [pc, #116]	; (800b158 <UART_SetConfig+0x11a0>)
 800b0e2:	f04f 0401 	mov.w	r4, #1
 800b0e6:	e002      	b.n	800b0ee <UART_SetConfig+0x1136>
 800b0e8:	4b13      	ldr	r3, [pc, #76]	; (800b138 <UART_SetConfig+0x1180>)
 800b0ea:	f04f 0403 	mov.w	r4, #3
 800b0ee:	687a      	ldr	r2, [r7, #4]
 800b0f0:	6852      	ldr	r2, [r2, #4]
 800b0f2:	0852      	lsrs	r2, r2, #1
 800b0f4:	4611      	mov	r1, r2
 800b0f6:	f04f 0200 	mov.w	r2, #0
 800b0fa:	eb13 0b01 	adds.w	fp, r3, r1
 800b0fe:	eb44 0c02 	adc.w	ip, r4, r2
 800b102:	4658      	mov	r0, fp
 800b104:	4661      	mov	r1, ip
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	f04f 0400 	mov.w	r4, #0
 800b10e:	461a      	mov	r2, r3
 800b110:	4623      	mov	r3, r4
 800b112:	f7f5 f8e1 	bl	80002d8 <__aeabi_uldivmod>
 800b116:	4603      	mov	r3, r0
 800b118:	460c      	mov	r4, r1
 800b11a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b11c:	e122      	b.n	800b364 <UART_SetConfig+0x13ac>
 800b11e:	bf00      	nop
 800b120:	51615500 	.word	0x51615500
 800b124:	00000000 	.word	0x00000000
 800b128:	a2c2aa00 	.word	0xa2c2aa00
 800b12c:	00000000 	.word	0x00000000
 800b130:	58024400 	.word	0x58024400
 800b134:	03d09000 	.word	0x03d09000
 800b138:	d0900000 	.word	0xd0900000
 800b13c:	07a12000 	.word	0x07a12000
 800b140:	0f424000 	.word	0x0f424000
 800b144:	1e848000 	.word	0x1e848000
 800b148:	3d090000 	.word	0x3d090000
 800b14c:	61a80000 	.word	0x61a80000
 800b150:	7a120000 	.word	0x7a120000
 800b154:	f4240000 	.word	0xf4240000
 800b158:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b160:	2b00      	cmp	r3, #0
 800b162:	d05b      	beq.n	800b21c <UART_SetConfig+0x1264>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b168:	2b01      	cmp	r3, #1
 800b16a:	d053      	beq.n	800b214 <UART_SetConfig+0x125c>
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b170:	2b02      	cmp	r3, #2
 800b172:	d04b      	beq.n	800b20c <UART_SetConfig+0x1254>
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b178:	2b03      	cmp	r3, #3
 800b17a:	d043      	beq.n	800b204 <UART_SetConfig+0x124c>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b180:	2b04      	cmp	r3, #4
 800b182:	d03b      	beq.n	800b1fc <UART_SetConfig+0x1244>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b188:	2b05      	cmp	r3, #5
 800b18a:	d033      	beq.n	800b1f4 <UART_SetConfig+0x123c>
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b190:	2b06      	cmp	r3, #6
 800b192:	d02b      	beq.n	800b1ec <UART_SetConfig+0x1234>
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b198:	2b07      	cmp	r3, #7
 800b19a:	d023      	beq.n	800b1e4 <UART_SetConfig+0x122c>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a0:	2b08      	cmp	r3, #8
 800b1a2:	d01b      	beq.n	800b1dc <UART_SetConfig+0x1224>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a8:	2b09      	cmp	r3, #9
 800b1aa:	d013      	beq.n	800b1d4 <UART_SetConfig+0x121c>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b0:	2b0a      	cmp	r3, #10
 800b1b2:	d00b      	beq.n	800b1cc <UART_SetConfig+0x1214>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b8:	2b0b      	cmp	r3, #11
 800b1ba:	d103      	bne.n	800b1c4 <UART_SetConfig+0x120c>
 800b1bc:	4bc0      	ldr	r3, [pc, #768]	; (800b4c0 <UART_SetConfig+0x1508>)
 800b1be:	f04f 0400 	mov.w	r4, #0
 800b1c2:	e02e      	b.n	800b222 <UART_SetConfig+0x126a>
 800b1c4:	4bbf      	ldr	r3, [pc, #764]	; (800b4c4 <UART_SetConfig+0x150c>)
 800b1c6:	f04f 0400 	mov.w	r4, #0
 800b1ca:	e02a      	b.n	800b222 <UART_SetConfig+0x126a>
 800b1cc:	4bbe      	ldr	r3, [pc, #760]	; (800b4c8 <UART_SetConfig+0x1510>)
 800b1ce:	f04f 0400 	mov.w	r4, #0
 800b1d2:	e026      	b.n	800b222 <UART_SetConfig+0x126a>
 800b1d4:	4bbd      	ldr	r3, [pc, #756]	; (800b4cc <UART_SetConfig+0x1514>)
 800b1d6:	f04f 0400 	mov.w	r4, #0
 800b1da:	e022      	b.n	800b222 <UART_SetConfig+0x126a>
 800b1dc:	4bbc      	ldr	r3, [pc, #752]	; (800b4d0 <UART_SetConfig+0x1518>)
 800b1de:	f04f 0400 	mov.w	r4, #0
 800b1e2:	e01e      	b.n	800b222 <UART_SetConfig+0x126a>
 800b1e4:	4bbb      	ldr	r3, [pc, #748]	; (800b4d4 <UART_SetConfig+0x151c>)
 800b1e6:	f04f 0400 	mov.w	r4, #0
 800b1ea:	e01a      	b.n	800b222 <UART_SetConfig+0x126a>
 800b1ec:	a4b0      	add	r4, pc, #704	; (adr r4, 800b4b0 <UART_SetConfig+0x14f8>)
 800b1ee:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b1f2:	e016      	b.n	800b222 <UART_SetConfig+0x126a>
 800b1f4:	4bb8      	ldr	r3, [pc, #736]	; (800b4d8 <UART_SetConfig+0x1520>)
 800b1f6:	f04f 0400 	mov.w	r4, #0
 800b1fa:	e012      	b.n	800b222 <UART_SetConfig+0x126a>
 800b1fc:	4bb7      	ldr	r3, [pc, #732]	; (800b4dc <UART_SetConfig+0x1524>)
 800b1fe:	f04f 0400 	mov.w	r4, #0
 800b202:	e00e      	b.n	800b222 <UART_SetConfig+0x126a>
 800b204:	a4ac      	add	r4, pc, #688	; (adr r4, 800b4b8 <UART_SetConfig+0x1500>)
 800b206:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b20a:	e00a      	b.n	800b222 <UART_SetConfig+0x126a>
 800b20c:	4bb4      	ldr	r3, [pc, #720]	; (800b4e0 <UART_SetConfig+0x1528>)
 800b20e:	f04f 0400 	mov.w	r4, #0
 800b212:	e006      	b.n	800b222 <UART_SetConfig+0x126a>
 800b214:	4bb3      	ldr	r3, [pc, #716]	; (800b4e4 <UART_SetConfig+0x152c>)
 800b216:	f04f 0400 	mov.w	r4, #0
 800b21a:	e002      	b.n	800b222 <UART_SetConfig+0x126a>
 800b21c:	4ba9      	ldr	r3, [pc, #676]	; (800b4c4 <UART_SetConfig+0x150c>)
 800b21e:	f04f 0400 	mov.w	r4, #0
 800b222:	687a      	ldr	r2, [r7, #4]
 800b224:	6852      	ldr	r2, [r2, #4]
 800b226:	0852      	lsrs	r2, r2, #1
 800b228:	4611      	mov	r1, r2
 800b22a:	f04f 0200 	mov.w	r2, #0
 800b22e:	eb13 0b01 	adds.w	fp, r3, r1
 800b232:	eb44 0c02 	adc.w	ip, r4, r2
 800b236:	4658      	mov	r0, fp
 800b238:	4661      	mov	r1, ip
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	f04f 0400 	mov.w	r4, #0
 800b242:	461a      	mov	r2, r3
 800b244:	4623      	mov	r3, r4
 800b246:	f7f5 f847 	bl	80002d8 <__aeabi_uldivmod>
 800b24a:	4603      	mov	r3, r0
 800b24c:	460c      	mov	r4, r1
 800b24e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b250:	e088      	b.n	800b364 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b256:	2b00      	cmp	r3, #0
 800b258:	d064      	beq.n	800b324 <UART_SetConfig+0x136c>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b25e:	2b01      	cmp	r3, #1
 800b260:	d05b      	beq.n	800b31a <UART_SetConfig+0x1362>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b266:	2b02      	cmp	r3, #2
 800b268:	d052      	beq.n	800b310 <UART_SetConfig+0x1358>
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b26e:	2b03      	cmp	r3, #3
 800b270:	d04a      	beq.n	800b308 <UART_SetConfig+0x1350>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b276:	2b04      	cmp	r3, #4
 800b278:	d041      	beq.n	800b2fe <UART_SetConfig+0x1346>
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b27e:	2b05      	cmp	r3, #5
 800b280:	d039      	beq.n	800b2f6 <UART_SetConfig+0x133e>
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b286:	2b06      	cmp	r3, #6
 800b288:	d031      	beq.n	800b2ee <UART_SetConfig+0x1336>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b28e:	2b07      	cmp	r3, #7
 800b290:	d028      	beq.n	800b2e4 <UART_SetConfig+0x132c>
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b296:	2b08      	cmp	r3, #8
 800b298:	d01f      	beq.n	800b2da <UART_SetConfig+0x1322>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b29e:	2b09      	cmp	r3, #9
 800b2a0:	d016      	beq.n	800b2d0 <UART_SetConfig+0x1318>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a6:	2b0a      	cmp	r3, #10
 800b2a8:	d00d      	beq.n	800b2c6 <UART_SetConfig+0x130e>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ae:	2b0b      	cmp	r3, #11
 800b2b0:	d104      	bne.n	800b2bc <UART_SetConfig+0x1304>
 800b2b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b2b6:	f04f 0400 	mov.w	r4, #0
 800b2ba:	e037      	b.n	800b32c <UART_SetConfig+0x1374>
 800b2bc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b2c0:	f04f 0400 	mov.w	r4, #0
 800b2c4:	e032      	b.n	800b32c <UART_SetConfig+0x1374>
 800b2c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b2ca:	f04f 0400 	mov.w	r4, #0
 800b2ce:	e02d      	b.n	800b32c <UART_SetConfig+0x1374>
 800b2d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b2d4:	f04f 0400 	mov.w	r4, #0
 800b2d8:	e028      	b.n	800b32c <UART_SetConfig+0x1374>
 800b2da:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b2de:	f04f 0400 	mov.w	r4, #0
 800b2e2:	e023      	b.n	800b32c <UART_SetConfig+0x1374>
 800b2e4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b2e8:	f04f 0400 	mov.w	r4, #0
 800b2ec:	e01e      	b.n	800b32c <UART_SetConfig+0x1374>
 800b2ee:	4b7e      	ldr	r3, [pc, #504]	; (800b4e8 <UART_SetConfig+0x1530>)
 800b2f0:	f04f 0400 	mov.w	r4, #0
 800b2f4:	e01a      	b.n	800b32c <UART_SetConfig+0x1374>
 800b2f6:	4b7d      	ldr	r3, [pc, #500]	; (800b4ec <UART_SetConfig+0x1534>)
 800b2f8:	f04f 0400 	mov.w	r4, #0
 800b2fc:	e016      	b.n	800b32c <UART_SetConfig+0x1374>
 800b2fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b302:	f04f 0400 	mov.w	r4, #0
 800b306:	e011      	b.n	800b32c <UART_SetConfig+0x1374>
 800b308:	4b79      	ldr	r3, [pc, #484]	; (800b4f0 <UART_SetConfig+0x1538>)
 800b30a:	f04f 0400 	mov.w	r4, #0
 800b30e:	e00d      	b.n	800b32c <UART_SetConfig+0x1374>
 800b310:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b314:	f04f 0400 	mov.w	r4, #0
 800b318:	e008      	b.n	800b32c <UART_SetConfig+0x1374>
 800b31a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b31e:	f04f 0400 	mov.w	r4, #0
 800b322:	e003      	b.n	800b32c <UART_SetConfig+0x1374>
 800b324:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b328:	f04f 0400 	mov.w	r4, #0
 800b32c:	687a      	ldr	r2, [r7, #4]
 800b32e:	6852      	ldr	r2, [r2, #4]
 800b330:	0852      	lsrs	r2, r2, #1
 800b332:	4611      	mov	r1, r2
 800b334:	f04f 0200 	mov.w	r2, #0
 800b338:	eb13 0b01 	adds.w	fp, r3, r1
 800b33c:	eb44 0c02 	adc.w	ip, r4, r2
 800b340:	4658      	mov	r0, fp
 800b342:	4661      	mov	r1, ip
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	685b      	ldr	r3, [r3, #4]
 800b348:	f04f 0400 	mov.w	r4, #0
 800b34c:	461a      	mov	r2, r3
 800b34e:	4623      	mov	r3, r4
 800b350:	f7f4 ffc2 	bl	80002d8 <__aeabi_uldivmod>
 800b354:	4603      	mov	r3, r0
 800b356:	460c      	mov	r4, r1
 800b358:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b35a:	e003      	b.n	800b364 <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800b35c:	2301      	movs	r3, #1
 800b35e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800b362:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b366:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b36a:	d309      	bcc.n	800b380 <UART_SetConfig+0x13c8>
 800b36c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b36e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b372:	d205      	bcs.n	800b380 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b37a:	60da      	str	r2, [r3, #12]
 800b37c:	f000 bf85 	b.w	800c28a <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 800b380:	2301      	movs	r3, #1
 800b382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b386:	f000 bf80 	b.w	800c28a <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	69db      	ldr	r3, [r3, #28]
 800b38e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b392:	f040 83da 	bne.w	800bb4a <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800b396:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b39a:	2b40      	cmp	r3, #64	; 0x40
 800b39c:	f200 83b3 	bhi.w	800bb06 <UART_SetConfig+0x1b4e>
 800b3a0:	a201      	add	r2, pc, #4	; (adr r2, 800b3a8 <UART_SetConfig+0x13f0>)
 800b3a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3a6:	bf00      	nop
 800b3a8:	0800b4f5 	.word	0x0800b4f5
 800b3ac:	0800b5ad 	.word	0x0800b5ad
 800b3b0:	0800bb07 	.word	0x0800bb07
 800b3b4:	0800bb07 	.word	0x0800bb07
 800b3b8:	0800b665 	.word	0x0800b665
 800b3bc:	0800bb07 	.word	0x0800bb07
 800b3c0:	0800bb07 	.word	0x0800bb07
 800b3c4:	0800bb07 	.word	0x0800bb07
 800b3c8:	0800b721 	.word	0x0800b721
 800b3cc:	0800bb07 	.word	0x0800bb07
 800b3d0:	0800bb07 	.word	0x0800bb07
 800b3d4:	0800bb07 	.word	0x0800bb07
 800b3d8:	0800bb07 	.word	0x0800bb07
 800b3dc:	0800bb07 	.word	0x0800bb07
 800b3e0:	0800bb07 	.word	0x0800bb07
 800b3e4:	0800bb07 	.word	0x0800bb07
 800b3e8:	0800b7dd 	.word	0x0800b7dd
 800b3ec:	0800bb07 	.word	0x0800bb07
 800b3f0:	0800bb07 	.word	0x0800bb07
 800b3f4:	0800bb07 	.word	0x0800bb07
 800b3f8:	0800bb07 	.word	0x0800bb07
 800b3fc:	0800bb07 	.word	0x0800bb07
 800b400:	0800bb07 	.word	0x0800bb07
 800b404:	0800bb07 	.word	0x0800bb07
 800b408:	0800bb07 	.word	0x0800bb07
 800b40c:	0800bb07 	.word	0x0800bb07
 800b410:	0800bb07 	.word	0x0800bb07
 800b414:	0800bb07 	.word	0x0800bb07
 800b418:	0800bb07 	.word	0x0800bb07
 800b41c:	0800bb07 	.word	0x0800bb07
 800b420:	0800bb07 	.word	0x0800bb07
 800b424:	0800bb07 	.word	0x0800bb07
 800b428:	0800b94f 	.word	0x0800b94f
 800b42c:	0800bb07 	.word	0x0800bb07
 800b430:	0800bb07 	.word	0x0800bb07
 800b434:	0800bb07 	.word	0x0800bb07
 800b438:	0800bb07 	.word	0x0800bb07
 800b43c:	0800bb07 	.word	0x0800bb07
 800b440:	0800bb07 	.word	0x0800bb07
 800b444:	0800bb07 	.word	0x0800bb07
 800b448:	0800bb07 	.word	0x0800bb07
 800b44c:	0800bb07 	.word	0x0800bb07
 800b450:	0800bb07 	.word	0x0800bb07
 800b454:	0800bb07 	.word	0x0800bb07
 800b458:	0800bb07 	.word	0x0800bb07
 800b45c:	0800bb07 	.word	0x0800bb07
 800b460:	0800bb07 	.word	0x0800bb07
 800b464:	0800bb07 	.word	0x0800bb07
 800b468:	0800bb07 	.word	0x0800bb07
 800b46c:	0800bb07 	.word	0x0800bb07
 800b470:	0800bb07 	.word	0x0800bb07
 800b474:	0800bb07 	.word	0x0800bb07
 800b478:	0800bb07 	.word	0x0800bb07
 800b47c:	0800bb07 	.word	0x0800bb07
 800b480:	0800bb07 	.word	0x0800bb07
 800b484:	0800bb07 	.word	0x0800bb07
 800b488:	0800bb07 	.word	0x0800bb07
 800b48c:	0800bb07 	.word	0x0800bb07
 800b490:	0800bb07 	.word	0x0800bb07
 800b494:	0800bb07 	.word	0x0800bb07
 800b498:	0800bb07 	.word	0x0800bb07
 800b49c:	0800bb07 	.word	0x0800bb07
 800b4a0:	0800bb07 	.word	0x0800bb07
 800b4a4:	0800bb07 	.word	0x0800bb07
 800b4a8:	0800ba45 	.word	0x0800ba45
 800b4ac:	f3af 8000 	nop.w
 800b4b0:	05161500 	.word	0x05161500
 800b4b4:	00000000 	.word	0x00000000
 800b4b8:	0a2c2a00 	.word	0x0a2c2a00
 800b4bc:	00000000 	.word	0x00000000
 800b4c0:	003d0900 	.word	0x003d0900
 800b4c4:	3d090000 	.word	0x3d090000
 800b4c8:	007a1200 	.word	0x007a1200
 800b4cc:	00f42400 	.word	0x00f42400
 800b4d0:	01e84800 	.word	0x01e84800
 800b4d4:	03d09000 	.word	0x03d09000
 800b4d8:	061a8000 	.word	0x061a8000
 800b4dc:	07a12000 	.word	0x07a12000
 800b4e0:	0f424000 	.word	0x0f424000
 800b4e4:	1e848000 	.word	0x1e848000
 800b4e8:	000aaa00 	.word	0x000aaa00
 800b4ec:	000ccc00 	.word	0x000ccc00
 800b4f0:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b4f4:	f7fb fe46 	bl	8007184 <HAL_RCC_GetPCLK1Freq>
 800b4f8:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d044      	beq.n	800b58c <UART_SetConfig+0x15d4>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b506:	2b01      	cmp	r3, #1
 800b508:	d03e      	beq.n	800b588 <UART_SetConfig+0x15d0>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b50e:	2b02      	cmp	r3, #2
 800b510:	d038      	beq.n	800b584 <UART_SetConfig+0x15cc>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b516:	2b03      	cmp	r3, #3
 800b518:	d032      	beq.n	800b580 <UART_SetConfig+0x15c8>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b51e:	2b04      	cmp	r3, #4
 800b520:	d02c      	beq.n	800b57c <UART_SetConfig+0x15c4>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b526:	2b05      	cmp	r3, #5
 800b528:	d026      	beq.n	800b578 <UART_SetConfig+0x15c0>
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b52e:	2b06      	cmp	r3, #6
 800b530:	d020      	beq.n	800b574 <UART_SetConfig+0x15bc>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b536:	2b07      	cmp	r3, #7
 800b538:	d01a      	beq.n	800b570 <UART_SetConfig+0x15b8>
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b53e:	2b08      	cmp	r3, #8
 800b540:	d014      	beq.n	800b56c <UART_SetConfig+0x15b4>
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b546:	2b09      	cmp	r3, #9
 800b548:	d00e      	beq.n	800b568 <UART_SetConfig+0x15b0>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b54e:	2b0a      	cmp	r3, #10
 800b550:	d008      	beq.n	800b564 <UART_SetConfig+0x15ac>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b556:	2b0b      	cmp	r3, #11
 800b558:	d102      	bne.n	800b560 <UART_SetConfig+0x15a8>
 800b55a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b55e:	e016      	b.n	800b58e <UART_SetConfig+0x15d6>
 800b560:	2301      	movs	r3, #1
 800b562:	e014      	b.n	800b58e <UART_SetConfig+0x15d6>
 800b564:	2380      	movs	r3, #128	; 0x80
 800b566:	e012      	b.n	800b58e <UART_SetConfig+0x15d6>
 800b568:	2340      	movs	r3, #64	; 0x40
 800b56a:	e010      	b.n	800b58e <UART_SetConfig+0x15d6>
 800b56c:	2320      	movs	r3, #32
 800b56e:	e00e      	b.n	800b58e <UART_SetConfig+0x15d6>
 800b570:	2310      	movs	r3, #16
 800b572:	e00c      	b.n	800b58e <UART_SetConfig+0x15d6>
 800b574:	230c      	movs	r3, #12
 800b576:	e00a      	b.n	800b58e <UART_SetConfig+0x15d6>
 800b578:	230a      	movs	r3, #10
 800b57a:	e008      	b.n	800b58e <UART_SetConfig+0x15d6>
 800b57c:	2308      	movs	r3, #8
 800b57e:	e006      	b.n	800b58e <UART_SetConfig+0x15d6>
 800b580:	2306      	movs	r3, #6
 800b582:	e004      	b.n	800b58e <UART_SetConfig+0x15d6>
 800b584:	2304      	movs	r3, #4
 800b586:	e002      	b.n	800b58e <UART_SetConfig+0x15d6>
 800b588:	2302      	movs	r3, #2
 800b58a:	e000      	b.n	800b58e <UART_SetConfig+0x15d6>
 800b58c:	2301      	movs	r3, #1
 800b58e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b590:	fbb2 f3f3 	udiv	r3, r2, r3
 800b594:	005a      	lsls	r2, r3, #1
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	685b      	ldr	r3, [r3, #4]
 800b59a:	085b      	lsrs	r3, r3, #1
 800b59c:	441a      	add	r2, r3
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5a6:	b29b      	uxth	r3, r3
 800b5a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b5aa:	e2b0      	b.n	800bb0e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b5ac:	f7fb fe00 	bl	80071b0 <HAL_RCC_GetPCLK2Freq>
 800b5b0:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d044      	beq.n	800b644 <UART_SetConfig+0x168c>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5be:	2b01      	cmp	r3, #1
 800b5c0:	d03e      	beq.n	800b640 <UART_SetConfig+0x1688>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c6:	2b02      	cmp	r3, #2
 800b5c8:	d038      	beq.n	800b63c <UART_SetConfig+0x1684>
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ce:	2b03      	cmp	r3, #3
 800b5d0:	d032      	beq.n	800b638 <UART_SetConfig+0x1680>
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d6:	2b04      	cmp	r3, #4
 800b5d8:	d02c      	beq.n	800b634 <UART_SetConfig+0x167c>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5de:	2b05      	cmp	r3, #5
 800b5e0:	d026      	beq.n	800b630 <UART_SetConfig+0x1678>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e6:	2b06      	cmp	r3, #6
 800b5e8:	d020      	beq.n	800b62c <UART_SetConfig+0x1674>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ee:	2b07      	cmp	r3, #7
 800b5f0:	d01a      	beq.n	800b628 <UART_SetConfig+0x1670>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5f6:	2b08      	cmp	r3, #8
 800b5f8:	d014      	beq.n	800b624 <UART_SetConfig+0x166c>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5fe:	2b09      	cmp	r3, #9
 800b600:	d00e      	beq.n	800b620 <UART_SetConfig+0x1668>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b606:	2b0a      	cmp	r3, #10
 800b608:	d008      	beq.n	800b61c <UART_SetConfig+0x1664>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b60e:	2b0b      	cmp	r3, #11
 800b610:	d102      	bne.n	800b618 <UART_SetConfig+0x1660>
 800b612:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b616:	e016      	b.n	800b646 <UART_SetConfig+0x168e>
 800b618:	2301      	movs	r3, #1
 800b61a:	e014      	b.n	800b646 <UART_SetConfig+0x168e>
 800b61c:	2380      	movs	r3, #128	; 0x80
 800b61e:	e012      	b.n	800b646 <UART_SetConfig+0x168e>
 800b620:	2340      	movs	r3, #64	; 0x40
 800b622:	e010      	b.n	800b646 <UART_SetConfig+0x168e>
 800b624:	2320      	movs	r3, #32
 800b626:	e00e      	b.n	800b646 <UART_SetConfig+0x168e>
 800b628:	2310      	movs	r3, #16
 800b62a:	e00c      	b.n	800b646 <UART_SetConfig+0x168e>
 800b62c:	230c      	movs	r3, #12
 800b62e:	e00a      	b.n	800b646 <UART_SetConfig+0x168e>
 800b630:	230a      	movs	r3, #10
 800b632:	e008      	b.n	800b646 <UART_SetConfig+0x168e>
 800b634:	2308      	movs	r3, #8
 800b636:	e006      	b.n	800b646 <UART_SetConfig+0x168e>
 800b638:	2306      	movs	r3, #6
 800b63a:	e004      	b.n	800b646 <UART_SetConfig+0x168e>
 800b63c:	2304      	movs	r3, #4
 800b63e:	e002      	b.n	800b646 <UART_SetConfig+0x168e>
 800b640:	2302      	movs	r3, #2
 800b642:	e000      	b.n	800b646 <UART_SetConfig+0x168e>
 800b644:	2301      	movs	r3, #1
 800b646:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b648:	fbb2 f3f3 	udiv	r3, r2, r3
 800b64c:	005a      	lsls	r2, r3, #1
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	085b      	lsrs	r3, r3, #1
 800b654:	441a      	add	r2, r3
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b65e:	b29b      	uxth	r3, r3
 800b660:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b662:	e254      	b.n	800bb0e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b664:	f107 0318 	add.w	r3, r7, #24
 800b668:	4618      	mov	r0, r3
 800b66a:	f7fc ff3f 	bl	80084ec <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b66e:	69fa      	ldr	r2, [r7, #28]
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b674:	2b00      	cmp	r3, #0
 800b676:	d044      	beq.n	800b702 <UART_SetConfig+0x174a>
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	d03e      	beq.n	800b6fe <UART_SetConfig+0x1746>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b684:	2b02      	cmp	r3, #2
 800b686:	d038      	beq.n	800b6fa <UART_SetConfig+0x1742>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b68c:	2b03      	cmp	r3, #3
 800b68e:	d032      	beq.n	800b6f6 <UART_SetConfig+0x173e>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b694:	2b04      	cmp	r3, #4
 800b696:	d02c      	beq.n	800b6f2 <UART_SetConfig+0x173a>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b69c:	2b05      	cmp	r3, #5
 800b69e:	d026      	beq.n	800b6ee <UART_SetConfig+0x1736>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a4:	2b06      	cmp	r3, #6
 800b6a6:	d020      	beq.n	800b6ea <UART_SetConfig+0x1732>
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ac:	2b07      	cmp	r3, #7
 800b6ae:	d01a      	beq.n	800b6e6 <UART_SetConfig+0x172e>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b4:	2b08      	cmp	r3, #8
 800b6b6:	d014      	beq.n	800b6e2 <UART_SetConfig+0x172a>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6bc:	2b09      	cmp	r3, #9
 800b6be:	d00e      	beq.n	800b6de <UART_SetConfig+0x1726>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c4:	2b0a      	cmp	r3, #10
 800b6c6:	d008      	beq.n	800b6da <UART_SetConfig+0x1722>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6cc:	2b0b      	cmp	r3, #11
 800b6ce:	d102      	bne.n	800b6d6 <UART_SetConfig+0x171e>
 800b6d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6d4:	e016      	b.n	800b704 <UART_SetConfig+0x174c>
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	e014      	b.n	800b704 <UART_SetConfig+0x174c>
 800b6da:	2380      	movs	r3, #128	; 0x80
 800b6dc:	e012      	b.n	800b704 <UART_SetConfig+0x174c>
 800b6de:	2340      	movs	r3, #64	; 0x40
 800b6e0:	e010      	b.n	800b704 <UART_SetConfig+0x174c>
 800b6e2:	2320      	movs	r3, #32
 800b6e4:	e00e      	b.n	800b704 <UART_SetConfig+0x174c>
 800b6e6:	2310      	movs	r3, #16
 800b6e8:	e00c      	b.n	800b704 <UART_SetConfig+0x174c>
 800b6ea:	230c      	movs	r3, #12
 800b6ec:	e00a      	b.n	800b704 <UART_SetConfig+0x174c>
 800b6ee:	230a      	movs	r3, #10
 800b6f0:	e008      	b.n	800b704 <UART_SetConfig+0x174c>
 800b6f2:	2308      	movs	r3, #8
 800b6f4:	e006      	b.n	800b704 <UART_SetConfig+0x174c>
 800b6f6:	2306      	movs	r3, #6
 800b6f8:	e004      	b.n	800b704 <UART_SetConfig+0x174c>
 800b6fa:	2304      	movs	r3, #4
 800b6fc:	e002      	b.n	800b704 <UART_SetConfig+0x174c>
 800b6fe:	2302      	movs	r3, #2
 800b700:	e000      	b.n	800b704 <UART_SetConfig+0x174c>
 800b702:	2301      	movs	r3, #1
 800b704:	fbb2 f3f3 	udiv	r3, r2, r3
 800b708:	005a      	lsls	r2, r3, #1
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	085b      	lsrs	r3, r3, #1
 800b710:	441a      	add	r2, r3
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	fbb2 f3f3 	udiv	r3, r2, r3
 800b71a:	b29b      	uxth	r3, r3
 800b71c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b71e:	e1f6      	b.n	800bb0e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b720:	f107 030c 	add.w	r3, r7, #12
 800b724:	4618      	mov	r0, r3
 800b726:	f7fd f82d 	bl	8008784 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b72a:	693a      	ldr	r2, [r7, #16]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b730:	2b00      	cmp	r3, #0
 800b732:	d044      	beq.n	800b7be <UART_SetConfig+0x1806>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b738:	2b01      	cmp	r3, #1
 800b73a:	d03e      	beq.n	800b7ba <UART_SetConfig+0x1802>
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b740:	2b02      	cmp	r3, #2
 800b742:	d038      	beq.n	800b7b6 <UART_SetConfig+0x17fe>
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b748:	2b03      	cmp	r3, #3
 800b74a:	d032      	beq.n	800b7b2 <UART_SetConfig+0x17fa>
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b750:	2b04      	cmp	r3, #4
 800b752:	d02c      	beq.n	800b7ae <UART_SetConfig+0x17f6>
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b758:	2b05      	cmp	r3, #5
 800b75a:	d026      	beq.n	800b7aa <UART_SetConfig+0x17f2>
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b760:	2b06      	cmp	r3, #6
 800b762:	d020      	beq.n	800b7a6 <UART_SetConfig+0x17ee>
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b768:	2b07      	cmp	r3, #7
 800b76a:	d01a      	beq.n	800b7a2 <UART_SetConfig+0x17ea>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b770:	2b08      	cmp	r3, #8
 800b772:	d014      	beq.n	800b79e <UART_SetConfig+0x17e6>
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b778:	2b09      	cmp	r3, #9
 800b77a:	d00e      	beq.n	800b79a <UART_SetConfig+0x17e2>
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b780:	2b0a      	cmp	r3, #10
 800b782:	d008      	beq.n	800b796 <UART_SetConfig+0x17de>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b788:	2b0b      	cmp	r3, #11
 800b78a:	d102      	bne.n	800b792 <UART_SetConfig+0x17da>
 800b78c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b790:	e016      	b.n	800b7c0 <UART_SetConfig+0x1808>
 800b792:	2301      	movs	r3, #1
 800b794:	e014      	b.n	800b7c0 <UART_SetConfig+0x1808>
 800b796:	2380      	movs	r3, #128	; 0x80
 800b798:	e012      	b.n	800b7c0 <UART_SetConfig+0x1808>
 800b79a:	2340      	movs	r3, #64	; 0x40
 800b79c:	e010      	b.n	800b7c0 <UART_SetConfig+0x1808>
 800b79e:	2320      	movs	r3, #32
 800b7a0:	e00e      	b.n	800b7c0 <UART_SetConfig+0x1808>
 800b7a2:	2310      	movs	r3, #16
 800b7a4:	e00c      	b.n	800b7c0 <UART_SetConfig+0x1808>
 800b7a6:	230c      	movs	r3, #12
 800b7a8:	e00a      	b.n	800b7c0 <UART_SetConfig+0x1808>
 800b7aa:	230a      	movs	r3, #10
 800b7ac:	e008      	b.n	800b7c0 <UART_SetConfig+0x1808>
 800b7ae:	2308      	movs	r3, #8
 800b7b0:	e006      	b.n	800b7c0 <UART_SetConfig+0x1808>
 800b7b2:	2306      	movs	r3, #6
 800b7b4:	e004      	b.n	800b7c0 <UART_SetConfig+0x1808>
 800b7b6:	2304      	movs	r3, #4
 800b7b8:	e002      	b.n	800b7c0 <UART_SetConfig+0x1808>
 800b7ba:	2302      	movs	r3, #2
 800b7bc:	e000      	b.n	800b7c0 <UART_SetConfig+0x1808>
 800b7be:	2301      	movs	r3, #1
 800b7c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7c4:	005a      	lsls	r2, r3, #1
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	685b      	ldr	r3, [r3, #4]
 800b7ca:	085b      	lsrs	r3, r3, #1
 800b7cc:	441a      	add	r2, r3
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	685b      	ldr	r3, [r3, #4]
 800b7d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7d6:	b29b      	uxth	r3, r3
 800b7d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b7da:	e198      	b.n	800bb0e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7dc:	4b87      	ldr	r3, [pc, #540]	; (800b9fc <UART_SetConfig+0x1a44>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f003 0320 	and.w	r3, r3, #32
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d05e      	beq.n	800b8a6 <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7e8:	4b84      	ldr	r3, [pc, #528]	; (800b9fc <UART_SetConfig+0x1a44>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	08db      	lsrs	r3, r3, #3
 800b7ee:	f003 0303 	and.w	r3, r3, #3
 800b7f2:	4a83      	ldr	r2, [pc, #524]	; (800ba00 <UART_SetConfig+0x1a48>)
 800b7f4:	40da      	lsrs	r2, r3
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d044      	beq.n	800b888 <UART_SetConfig+0x18d0>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b802:	2b01      	cmp	r3, #1
 800b804:	d03e      	beq.n	800b884 <UART_SetConfig+0x18cc>
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b80a:	2b02      	cmp	r3, #2
 800b80c:	d038      	beq.n	800b880 <UART_SetConfig+0x18c8>
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b812:	2b03      	cmp	r3, #3
 800b814:	d032      	beq.n	800b87c <UART_SetConfig+0x18c4>
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b81a:	2b04      	cmp	r3, #4
 800b81c:	d02c      	beq.n	800b878 <UART_SetConfig+0x18c0>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b822:	2b05      	cmp	r3, #5
 800b824:	d026      	beq.n	800b874 <UART_SetConfig+0x18bc>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b82a:	2b06      	cmp	r3, #6
 800b82c:	d020      	beq.n	800b870 <UART_SetConfig+0x18b8>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b832:	2b07      	cmp	r3, #7
 800b834:	d01a      	beq.n	800b86c <UART_SetConfig+0x18b4>
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b83a:	2b08      	cmp	r3, #8
 800b83c:	d014      	beq.n	800b868 <UART_SetConfig+0x18b0>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b842:	2b09      	cmp	r3, #9
 800b844:	d00e      	beq.n	800b864 <UART_SetConfig+0x18ac>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b84a:	2b0a      	cmp	r3, #10
 800b84c:	d008      	beq.n	800b860 <UART_SetConfig+0x18a8>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b852:	2b0b      	cmp	r3, #11
 800b854:	d102      	bne.n	800b85c <UART_SetConfig+0x18a4>
 800b856:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b85a:	e016      	b.n	800b88a <UART_SetConfig+0x18d2>
 800b85c:	2301      	movs	r3, #1
 800b85e:	e014      	b.n	800b88a <UART_SetConfig+0x18d2>
 800b860:	2380      	movs	r3, #128	; 0x80
 800b862:	e012      	b.n	800b88a <UART_SetConfig+0x18d2>
 800b864:	2340      	movs	r3, #64	; 0x40
 800b866:	e010      	b.n	800b88a <UART_SetConfig+0x18d2>
 800b868:	2320      	movs	r3, #32
 800b86a:	e00e      	b.n	800b88a <UART_SetConfig+0x18d2>
 800b86c:	2310      	movs	r3, #16
 800b86e:	e00c      	b.n	800b88a <UART_SetConfig+0x18d2>
 800b870:	230c      	movs	r3, #12
 800b872:	e00a      	b.n	800b88a <UART_SetConfig+0x18d2>
 800b874:	230a      	movs	r3, #10
 800b876:	e008      	b.n	800b88a <UART_SetConfig+0x18d2>
 800b878:	2308      	movs	r3, #8
 800b87a:	e006      	b.n	800b88a <UART_SetConfig+0x18d2>
 800b87c:	2306      	movs	r3, #6
 800b87e:	e004      	b.n	800b88a <UART_SetConfig+0x18d2>
 800b880:	2304      	movs	r3, #4
 800b882:	e002      	b.n	800b88a <UART_SetConfig+0x18d2>
 800b884:	2302      	movs	r3, #2
 800b886:	e000      	b.n	800b88a <UART_SetConfig+0x18d2>
 800b888:	2301      	movs	r3, #1
 800b88a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b88e:	005a      	lsls	r2, r3, #1
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	685b      	ldr	r3, [r3, #4]
 800b894:	085b      	lsrs	r3, r3, #1
 800b896:	441a      	add	r2, r3
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	685b      	ldr	r3, [r3, #4]
 800b89c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8a0:	b29b      	uxth	r3, r3
 800b8a2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800b8a4:	e133      	b.n	800bb0e <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d043      	beq.n	800b936 <UART_SetConfig+0x197e>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b2:	2b01      	cmp	r3, #1
 800b8b4:	d03d      	beq.n	800b932 <UART_SetConfig+0x197a>
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ba:	2b02      	cmp	r3, #2
 800b8bc:	d037      	beq.n	800b92e <UART_SetConfig+0x1976>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c2:	2b03      	cmp	r3, #3
 800b8c4:	d031      	beq.n	800b92a <UART_SetConfig+0x1972>
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ca:	2b04      	cmp	r3, #4
 800b8cc:	d02b      	beq.n	800b926 <UART_SetConfig+0x196e>
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d2:	2b05      	cmp	r3, #5
 800b8d4:	d025      	beq.n	800b922 <UART_SetConfig+0x196a>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8da:	2b06      	cmp	r3, #6
 800b8dc:	d01f      	beq.n	800b91e <UART_SetConfig+0x1966>
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8e2:	2b07      	cmp	r3, #7
 800b8e4:	d019      	beq.n	800b91a <UART_SetConfig+0x1962>
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ea:	2b08      	cmp	r3, #8
 800b8ec:	d013      	beq.n	800b916 <UART_SetConfig+0x195e>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f2:	2b09      	cmp	r3, #9
 800b8f4:	d00d      	beq.n	800b912 <UART_SetConfig+0x195a>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8fa:	2b0a      	cmp	r3, #10
 800b8fc:	d007      	beq.n	800b90e <UART_SetConfig+0x1956>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b902:	2b0b      	cmp	r3, #11
 800b904:	d101      	bne.n	800b90a <UART_SetConfig+0x1952>
 800b906:	4b3f      	ldr	r3, [pc, #252]	; (800ba04 <UART_SetConfig+0x1a4c>)
 800b908:	e016      	b.n	800b938 <UART_SetConfig+0x1980>
 800b90a:	4b3f      	ldr	r3, [pc, #252]	; (800ba08 <UART_SetConfig+0x1a50>)
 800b90c:	e014      	b.n	800b938 <UART_SetConfig+0x1980>
 800b90e:	4b3f      	ldr	r3, [pc, #252]	; (800ba0c <UART_SetConfig+0x1a54>)
 800b910:	e012      	b.n	800b938 <UART_SetConfig+0x1980>
 800b912:	4b3f      	ldr	r3, [pc, #252]	; (800ba10 <UART_SetConfig+0x1a58>)
 800b914:	e010      	b.n	800b938 <UART_SetConfig+0x1980>
 800b916:	4b3f      	ldr	r3, [pc, #252]	; (800ba14 <UART_SetConfig+0x1a5c>)
 800b918:	e00e      	b.n	800b938 <UART_SetConfig+0x1980>
 800b91a:	4b3f      	ldr	r3, [pc, #252]	; (800ba18 <UART_SetConfig+0x1a60>)
 800b91c:	e00c      	b.n	800b938 <UART_SetConfig+0x1980>
 800b91e:	4b3f      	ldr	r3, [pc, #252]	; (800ba1c <UART_SetConfig+0x1a64>)
 800b920:	e00a      	b.n	800b938 <UART_SetConfig+0x1980>
 800b922:	4b3f      	ldr	r3, [pc, #252]	; (800ba20 <UART_SetConfig+0x1a68>)
 800b924:	e008      	b.n	800b938 <UART_SetConfig+0x1980>
 800b926:	4b3f      	ldr	r3, [pc, #252]	; (800ba24 <UART_SetConfig+0x1a6c>)
 800b928:	e006      	b.n	800b938 <UART_SetConfig+0x1980>
 800b92a:	4b3f      	ldr	r3, [pc, #252]	; (800ba28 <UART_SetConfig+0x1a70>)
 800b92c:	e004      	b.n	800b938 <UART_SetConfig+0x1980>
 800b92e:	4b3f      	ldr	r3, [pc, #252]	; (800ba2c <UART_SetConfig+0x1a74>)
 800b930:	e002      	b.n	800b938 <UART_SetConfig+0x1980>
 800b932:	4b33      	ldr	r3, [pc, #204]	; (800ba00 <UART_SetConfig+0x1a48>)
 800b934:	e000      	b.n	800b938 <UART_SetConfig+0x1980>
 800b936:	4b34      	ldr	r3, [pc, #208]	; (800ba08 <UART_SetConfig+0x1a50>)
 800b938:	687a      	ldr	r2, [r7, #4]
 800b93a:	6852      	ldr	r2, [r2, #4]
 800b93c:	0852      	lsrs	r2, r2, #1
 800b93e:	441a      	add	r2, r3
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	685b      	ldr	r3, [r3, #4]
 800b944:	fbb2 f3f3 	udiv	r3, r2, r3
 800b948:	b29b      	uxth	r3, r3
 800b94a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b94c:	e0df      	b.n	800bb0e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b952:	2b00      	cmp	r3, #0
 800b954:	d045      	beq.n	800b9e2 <UART_SetConfig+0x1a2a>
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b95a:	2b01      	cmp	r3, #1
 800b95c:	d03f      	beq.n	800b9de <UART_SetConfig+0x1a26>
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b962:	2b02      	cmp	r3, #2
 800b964:	d039      	beq.n	800b9da <UART_SetConfig+0x1a22>
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b96a:	2b03      	cmp	r3, #3
 800b96c:	d033      	beq.n	800b9d6 <UART_SetConfig+0x1a1e>
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b972:	2b04      	cmp	r3, #4
 800b974:	d02d      	beq.n	800b9d2 <UART_SetConfig+0x1a1a>
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b97a:	2b05      	cmp	r3, #5
 800b97c:	d027      	beq.n	800b9ce <UART_SetConfig+0x1a16>
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b982:	2b06      	cmp	r3, #6
 800b984:	d021      	beq.n	800b9ca <UART_SetConfig+0x1a12>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b98a:	2b07      	cmp	r3, #7
 800b98c:	d01b      	beq.n	800b9c6 <UART_SetConfig+0x1a0e>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b992:	2b08      	cmp	r3, #8
 800b994:	d015      	beq.n	800b9c2 <UART_SetConfig+0x1a0a>
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b99a:	2b09      	cmp	r3, #9
 800b99c:	d00f      	beq.n	800b9be <UART_SetConfig+0x1a06>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a2:	2b0a      	cmp	r3, #10
 800b9a4:	d008      	beq.n	800b9b8 <UART_SetConfig+0x1a00>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9aa:	2b0b      	cmp	r3, #11
 800b9ac:	d102      	bne.n	800b9b4 <UART_SetConfig+0x19fc>
 800b9ae:	f647 2312 	movw	r3, #31250	; 0x7a12
 800b9b2:	e017      	b.n	800b9e4 <UART_SetConfig+0x1a2c>
 800b9b4:	4b18      	ldr	r3, [pc, #96]	; (800ba18 <UART_SetConfig+0x1a60>)
 800b9b6:	e015      	b.n	800b9e4 <UART_SetConfig+0x1a2c>
 800b9b8:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b9bc:	e012      	b.n	800b9e4 <UART_SetConfig+0x1a2c>
 800b9be:	4b1c      	ldr	r3, [pc, #112]	; (800ba30 <UART_SetConfig+0x1a78>)
 800b9c0:	e010      	b.n	800b9e4 <UART_SetConfig+0x1a2c>
 800b9c2:	4b1c      	ldr	r3, [pc, #112]	; (800ba34 <UART_SetConfig+0x1a7c>)
 800b9c4:	e00e      	b.n	800b9e4 <UART_SetConfig+0x1a2c>
 800b9c6:	4b0f      	ldr	r3, [pc, #60]	; (800ba04 <UART_SetConfig+0x1a4c>)
 800b9c8:	e00c      	b.n	800b9e4 <UART_SetConfig+0x1a2c>
 800b9ca:	4b1b      	ldr	r3, [pc, #108]	; (800ba38 <UART_SetConfig+0x1a80>)
 800b9cc:	e00a      	b.n	800b9e4 <UART_SetConfig+0x1a2c>
 800b9ce:	4b1b      	ldr	r3, [pc, #108]	; (800ba3c <UART_SetConfig+0x1a84>)
 800b9d0:	e008      	b.n	800b9e4 <UART_SetConfig+0x1a2c>
 800b9d2:	4b0e      	ldr	r3, [pc, #56]	; (800ba0c <UART_SetConfig+0x1a54>)
 800b9d4:	e006      	b.n	800b9e4 <UART_SetConfig+0x1a2c>
 800b9d6:	4b1a      	ldr	r3, [pc, #104]	; (800ba40 <UART_SetConfig+0x1a88>)
 800b9d8:	e004      	b.n	800b9e4 <UART_SetConfig+0x1a2c>
 800b9da:	4b0d      	ldr	r3, [pc, #52]	; (800ba10 <UART_SetConfig+0x1a58>)
 800b9dc:	e002      	b.n	800b9e4 <UART_SetConfig+0x1a2c>
 800b9de:	4b0d      	ldr	r3, [pc, #52]	; (800ba14 <UART_SetConfig+0x1a5c>)
 800b9e0:	e000      	b.n	800b9e4 <UART_SetConfig+0x1a2c>
 800b9e2:	4b0d      	ldr	r3, [pc, #52]	; (800ba18 <UART_SetConfig+0x1a60>)
 800b9e4:	687a      	ldr	r2, [r7, #4]
 800b9e6:	6852      	ldr	r2, [r2, #4]
 800b9e8:	0852      	lsrs	r2, r2, #1
 800b9ea:	441a      	add	r2, r3
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	685b      	ldr	r3, [r3, #4]
 800b9f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9f4:	b29b      	uxth	r3, r3
 800b9f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b9f8:	e089      	b.n	800bb0e <UART_SetConfig+0x1b56>
 800b9fa:	bf00      	nop
 800b9fc:	58024400 	.word	0x58024400
 800ba00:	03d09000 	.word	0x03d09000
 800ba04:	0007a120 	.word	0x0007a120
 800ba08:	07a12000 	.word	0x07a12000
 800ba0c:	000f4240 	.word	0x000f4240
 800ba10:	001e8480 	.word	0x001e8480
 800ba14:	003d0900 	.word	0x003d0900
 800ba18:	007a1200 	.word	0x007a1200
 800ba1c:	00a2c2aa 	.word	0x00a2c2aa
 800ba20:	00c35000 	.word	0x00c35000
 800ba24:	00f42400 	.word	0x00f42400
 800ba28:	01458554 	.word	0x01458554
 800ba2c:	01e84800 	.word	0x01e84800
 800ba30:	0001e848 	.word	0x0001e848
 800ba34:	0003d090 	.word	0x0003d090
 800ba38:	000a2c2a 	.word	0x000a2c2a
 800ba3c:	000c3500 	.word	0x000c3500
 800ba40:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d04f      	beq.n	800baec <UART_SetConfig+0x1b34>
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba50:	2b01      	cmp	r3, #1
 800ba52:	d048      	beq.n	800bae6 <UART_SetConfig+0x1b2e>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba58:	2b02      	cmp	r3, #2
 800ba5a:	d041      	beq.n	800bae0 <UART_SetConfig+0x1b28>
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba60:	2b03      	cmp	r3, #3
 800ba62:	d03a      	beq.n	800bada <UART_SetConfig+0x1b22>
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba68:	2b04      	cmp	r3, #4
 800ba6a:	d033      	beq.n	800bad4 <UART_SetConfig+0x1b1c>
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba70:	2b05      	cmp	r3, #5
 800ba72:	d02c      	beq.n	800bace <UART_SetConfig+0x1b16>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba78:	2b06      	cmp	r3, #6
 800ba7a:	d025      	beq.n	800bac8 <UART_SetConfig+0x1b10>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba80:	2b07      	cmp	r3, #7
 800ba82:	d01e      	beq.n	800bac2 <UART_SetConfig+0x1b0a>
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba88:	2b08      	cmp	r3, #8
 800ba8a:	d017      	beq.n	800babc <UART_SetConfig+0x1b04>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba90:	2b09      	cmp	r3, #9
 800ba92:	d010      	beq.n	800bab6 <UART_SetConfig+0x1afe>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba98:	2b0a      	cmp	r3, #10
 800ba9a:	d009      	beq.n	800bab0 <UART_SetConfig+0x1af8>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa0:	2b0b      	cmp	r3, #11
 800baa2:	d102      	bne.n	800baaa <UART_SetConfig+0x1af2>
 800baa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800baa8:	e022      	b.n	800baf0 <UART_SetConfig+0x1b38>
 800baaa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800baae:	e01f      	b.n	800baf0 <UART_SetConfig+0x1b38>
 800bab0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bab4:	e01c      	b.n	800baf0 <UART_SetConfig+0x1b38>
 800bab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800baba:	e019      	b.n	800baf0 <UART_SetConfig+0x1b38>
 800babc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bac0:	e016      	b.n	800baf0 <UART_SetConfig+0x1b38>
 800bac2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bac6:	e013      	b.n	800baf0 <UART_SetConfig+0x1b38>
 800bac8:	f241 5354 	movw	r3, #5460	; 0x1554
 800bacc:	e010      	b.n	800baf0 <UART_SetConfig+0x1b38>
 800bace:	f641 1398 	movw	r3, #6552	; 0x1998
 800bad2:	e00d      	b.n	800baf0 <UART_SetConfig+0x1b38>
 800bad4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bad8:	e00a      	b.n	800baf0 <UART_SetConfig+0x1b38>
 800bada:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800bade:	e007      	b.n	800baf0 <UART_SetConfig+0x1b38>
 800bae0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bae4:	e004      	b.n	800baf0 <UART_SetConfig+0x1b38>
 800bae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800baea:	e001      	b.n	800baf0 <UART_SetConfig+0x1b38>
 800baec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800baf0:	687a      	ldr	r2, [r7, #4]
 800baf2:	6852      	ldr	r2, [r2, #4]
 800baf4:	0852      	lsrs	r2, r2, #1
 800baf6:	441a      	add	r2, r3
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	685b      	ldr	r3, [r3, #4]
 800bafc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb00:	b29b      	uxth	r3, r3
 800bb02:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bb04:	e003      	b.n	800bb0e <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800bb06:	2301      	movs	r3, #1
 800bb08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800bb0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb10:	2b0f      	cmp	r3, #15
 800bb12:	d916      	bls.n	800bb42 <UART_SetConfig+0x1b8a>
 800bb14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb1a:	d212      	bcs.n	800bb42 <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bb1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb1e:	b29b      	uxth	r3, r3
 800bb20:	f023 030f 	bic.w	r3, r3, #15
 800bb24:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bb26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb28:	085b      	lsrs	r3, r3, #1
 800bb2a:	b29b      	uxth	r3, r3
 800bb2c:	f003 0307 	and.w	r3, r3, #7
 800bb30:	b29a      	uxth	r2, r3
 800bb32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bb34:	4313      	orrs	r3, r2
 800bb36:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800bb3e:	60da      	str	r2, [r3, #12]
 800bb40:	e3a3      	b.n	800c28a <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800bb42:	2301      	movs	r3, #1
 800bb44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb48:	e39f      	b.n	800c28a <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800bb4a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bb4e:	2b40      	cmp	r3, #64	; 0x40
 800bb50:	f200 8388 	bhi.w	800c264 <UART_SetConfig+0x22ac>
 800bb54:	a201      	add	r2, pc, #4	; (adr r2, 800bb5c <UART_SetConfig+0x1ba4>)
 800bb56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb5a:	bf00      	nop
 800bb5c:	0800bc61 	.word	0x0800bc61
 800bb60:	0800bd17 	.word	0x0800bd17
 800bb64:	0800c265 	.word	0x0800c265
 800bb68:	0800c265 	.word	0x0800c265
 800bb6c:	0800bdcd 	.word	0x0800bdcd
 800bb70:	0800c265 	.word	0x0800c265
 800bb74:	0800c265 	.word	0x0800c265
 800bb78:	0800c265 	.word	0x0800c265
 800bb7c:	0800be87 	.word	0x0800be87
 800bb80:	0800c265 	.word	0x0800c265
 800bb84:	0800c265 	.word	0x0800c265
 800bb88:	0800c265 	.word	0x0800c265
 800bb8c:	0800c265 	.word	0x0800c265
 800bb90:	0800c265 	.word	0x0800c265
 800bb94:	0800c265 	.word	0x0800c265
 800bb98:	0800c265 	.word	0x0800c265
 800bb9c:	0800bf41 	.word	0x0800bf41
 800bba0:	0800c265 	.word	0x0800c265
 800bba4:	0800c265 	.word	0x0800c265
 800bba8:	0800c265 	.word	0x0800c265
 800bbac:	0800c265 	.word	0x0800c265
 800bbb0:	0800c265 	.word	0x0800c265
 800bbb4:	0800c265 	.word	0x0800c265
 800bbb8:	0800c265 	.word	0x0800c265
 800bbbc:	0800c265 	.word	0x0800c265
 800bbc0:	0800c265 	.word	0x0800c265
 800bbc4:	0800c265 	.word	0x0800c265
 800bbc8:	0800c265 	.word	0x0800c265
 800bbcc:	0800c265 	.word	0x0800c265
 800bbd0:	0800c265 	.word	0x0800c265
 800bbd4:	0800c265 	.word	0x0800c265
 800bbd8:	0800c265 	.word	0x0800c265
 800bbdc:	0800c0b1 	.word	0x0800c0b1
 800bbe0:	0800c265 	.word	0x0800c265
 800bbe4:	0800c265 	.word	0x0800c265
 800bbe8:	0800c265 	.word	0x0800c265
 800bbec:	0800c265 	.word	0x0800c265
 800bbf0:	0800c265 	.word	0x0800c265
 800bbf4:	0800c265 	.word	0x0800c265
 800bbf8:	0800c265 	.word	0x0800c265
 800bbfc:	0800c265 	.word	0x0800c265
 800bc00:	0800c265 	.word	0x0800c265
 800bc04:	0800c265 	.word	0x0800c265
 800bc08:	0800c265 	.word	0x0800c265
 800bc0c:	0800c265 	.word	0x0800c265
 800bc10:	0800c265 	.word	0x0800c265
 800bc14:	0800c265 	.word	0x0800c265
 800bc18:	0800c265 	.word	0x0800c265
 800bc1c:	0800c265 	.word	0x0800c265
 800bc20:	0800c265 	.word	0x0800c265
 800bc24:	0800c265 	.word	0x0800c265
 800bc28:	0800c265 	.word	0x0800c265
 800bc2c:	0800c265 	.word	0x0800c265
 800bc30:	0800c265 	.word	0x0800c265
 800bc34:	0800c265 	.word	0x0800c265
 800bc38:	0800c265 	.word	0x0800c265
 800bc3c:	0800c265 	.word	0x0800c265
 800bc40:	0800c265 	.word	0x0800c265
 800bc44:	0800c265 	.word	0x0800c265
 800bc48:	0800c265 	.word	0x0800c265
 800bc4c:	0800c265 	.word	0x0800c265
 800bc50:	0800c265 	.word	0x0800c265
 800bc54:	0800c265 	.word	0x0800c265
 800bc58:	0800c265 	.word	0x0800c265
 800bc5c:	0800c1a5 	.word	0x0800c1a5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc60:	f7fb fa90 	bl	8007184 <HAL_RCC_GetPCLK1Freq>
 800bc64:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d044      	beq.n	800bcf8 <UART_SetConfig+0x1d40>
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc72:	2b01      	cmp	r3, #1
 800bc74:	d03e      	beq.n	800bcf4 <UART_SetConfig+0x1d3c>
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc7a:	2b02      	cmp	r3, #2
 800bc7c:	d038      	beq.n	800bcf0 <UART_SetConfig+0x1d38>
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc82:	2b03      	cmp	r3, #3
 800bc84:	d032      	beq.n	800bcec <UART_SetConfig+0x1d34>
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc8a:	2b04      	cmp	r3, #4
 800bc8c:	d02c      	beq.n	800bce8 <UART_SetConfig+0x1d30>
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc92:	2b05      	cmp	r3, #5
 800bc94:	d026      	beq.n	800bce4 <UART_SetConfig+0x1d2c>
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc9a:	2b06      	cmp	r3, #6
 800bc9c:	d020      	beq.n	800bce0 <UART_SetConfig+0x1d28>
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bca2:	2b07      	cmp	r3, #7
 800bca4:	d01a      	beq.n	800bcdc <UART_SetConfig+0x1d24>
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcaa:	2b08      	cmp	r3, #8
 800bcac:	d014      	beq.n	800bcd8 <UART_SetConfig+0x1d20>
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb2:	2b09      	cmp	r3, #9
 800bcb4:	d00e      	beq.n	800bcd4 <UART_SetConfig+0x1d1c>
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcba:	2b0a      	cmp	r3, #10
 800bcbc:	d008      	beq.n	800bcd0 <UART_SetConfig+0x1d18>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc2:	2b0b      	cmp	r3, #11
 800bcc4:	d102      	bne.n	800bccc <UART_SetConfig+0x1d14>
 800bcc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bcca:	e016      	b.n	800bcfa <UART_SetConfig+0x1d42>
 800bccc:	2301      	movs	r3, #1
 800bcce:	e014      	b.n	800bcfa <UART_SetConfig+0x1d42>
 800bcd0:	2380      	movs	r3, #128	; 0x80
 800bcd2:	e012      	b.n	800bcfa <UART_SetConfig+0x1d42>
 800bcd4:	2340      	movs	r3, #64	; 0x40
 800bcd6:	e010      	b.n	800bcfa <UART_SetConfig+0x1d42>
 800bcd8:	2320      	movs	r3, #32
 800bcda:	e00e      	b.n	800bcfa <UART_SetConfig+0x1d42>
 800bcdc:	2310      	movs	r3, #16
 800bcde:	e00c      	b.n	800bcfa <UART_SetConfig+0x1d42>
 800bce0:	230c      	movs	r3, #12
 800bce2:	e00a      	b.n	800bcfa <UART_SetConfig+0x1d42>
 800bce4:	230a      	movs	r3, #10
 800bce6:	e008      	b.n	800bcfa <UART_SetConfig+0x1d42>
 800bce8:	2308      	movs	r3, #8
 800bcea:	e006      	b.n	800bcfa <UART_SetConfig+0x1d42>
 800bcec:	2306      	movs	r3, #6
 800bcee:	e004      	b.n	800bcfa <UART_SetConfig+0x1d42>
 800bcf0:	2304      	movs	r3, #4
 800bcf2:	e002      	b.n	800bcfa <UART_SetConfig+0x1d42>
 800bcf4:	2302      	movs	r3, #2
 800bcf6:	e000      	b.n	800bcfa <UART_SetConfig+0x1d42>
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcfc:	fbb2 f2f3 	udiv	r2, r2, r3
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	685b      	ldr	r3, [r3, #4]
 800bd04:	085b      	lsrs	r3, r3, #1
 800bd06:	441a      	add	r2, r3
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	685b      	ldr	r3, [r3, #4]
 800bd0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd10:	b29b      	uxth	r3, r3
 800bd12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bd14:	e2aa      	b.n	800c26c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd16:	f7fb fa4b 	bl	80071b0 <HAL_RCC_GetPCLK2Freq>
 800bd1a:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d044      	beq.n	800bdae <UART_SetConfig+0x1df6>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd28:	2b01      	cmp	r3, #1
 800bd2a:	d03e      	beq.n	800bdaa <UART_SetConfig+0x1df2>
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd30:	2b02      	cmp	r3, #2
 800bd32:	d038      	beq.n	800bda6 <UART_SetConfig+0x1dee>
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd38:	2b03      	cmp	r3, #3
 800bd3a:	d032      	beq.n	800bda2 <UART_SetConfig+0x1dea>
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd40:	2b04      	cmp	r3, #4
 800bd42:	d02c      	beq.n	800bd9e <UART_SetConfig+0x1de6>
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd48:	2b05      	cmp	r3, #5
 800bd4a:	d026      	beq.n	800bd9a <UART_SetConfig+0x1de2>
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd50:	2b06      	cmp	r3, #6
 800bd52:	d020      	beq.n	800bd96 <UART_SetConfig+0x1dde>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd58:	2b07      	cmp	r3, #7
 800bd5a:	d01a      	beq.n	800bd92 <UART_SetConfig+0x1dda>
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd60:	2b08      	cmp	r3, #8
 800bd62:	d014      	beq.n	800bd8e <UART_SetConfig+0x1dd6>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd68:	2b09      	cmp	r3, #9
 800bd6a:	d00e      	beq.n	800bd8a <UART_SetConfig+0x1dd2>
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd70:	2b0a      	cmp	r3, #10
 800bd72:	d008      	beq.n	800bd86 <UART_SetConfig+0x1dce>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd78:	2b0b      	cmp	r3, #11
 800bd7a:	d102      	bne.n	800bd82 <UART_SetConfig+0x1dca>
 800bd7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd80:	e016      	b.n	800bdb0 <UART_SetConfig+0x1df8>
 800bd82:	2301      	movs	r3, #1
 800bd84:	e014      	b.n	800bdb0 <UART_SetConfig+0x1df8>
 800bd86:	2380      	movs	r3, #128	; 0x80
 800bd88:	e012      	b.n	800bdb0 <UART_SetConfig+0x1df8>
 800bd8a:	2340      	movs	r3, #64	; 0x40
 800bd8c:	e010      	b.n	800bdb0 <UART_SetConfig+0x1df8>
 800bd8e:	2320      	movs	r3, #32
 800bd90:	e00e      	b.n	800bdb0 <UART_SetConfig+0x1df8>
 800bd92:	2310      	movs	r3, #16
 800bd94:	e00c      	b.n	800bdb0 <UART_SetConfig+0x1df8>
 800bd96:	230c      	movs	r3, #12
 800bd98:	e00a      	b.n	800bdb0 <UART_SetConfig+0x1df8>
 800bd9a:	230a      	movs	r3, #10
 800bd9c:	e008      	b.n	800bdb0 <UART_SetConfig+0x1df8>
 800bd9e:	2308      	movs	r3, #8
 800bda0:	e006      	b.n	800bdb0 <UART_SetConfig+0x1df8>
 800bda2:	2306      	movs	r3, #6
 800bda4:	e004      	b.n	800bdb0 <UART_SetConfig+0x1df8>
 800bda6:	2304      	movs	r3, #4
 800bda8:	e002      	b.n	800bdb0 <UART_SetConfig+0x1df8>
 800bdaa:	2302      	movs	r3, #2
 800bdac:	e000      	b.n	800bdb0 <UART_SetConfig+0x1df8>
 800bdae:	2301      	movs	r3, #1
 800bdb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdb2:	fbb2 f2f3 	udiv	r2, r2, r3
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	685b      	ldr	r3, [r3, #4]
 800bdba:	085b      	lsrs	r3, r3, #1
 800bdbc:	441a      	add	r2, r3
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	685b      	ldr	r3, [r3, #4]
 800bdc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdc6:	b29b      	uxth	r3, r3
 800bdc8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bdca:	e24f      	b.n	800c26c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bdcc:	f107 0318 	add.w	r3, r7, #24
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f7fc fb8b 	bl	80084ec <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bdd6:	69fa      	ldr	r2, [r7, #28]
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d044      	beq.n	800be6a <UART_SetConfig+0x1eb2>
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bde4:	2b01      	cmp	r3, #1
 800bde6:	d03e      	beq.n	800be66 <UART_SetConfig+0x1eae>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdec:	2b02      	cmp	r3, #2
 800bdee:	d038      	beq.n	800be62 <UART_SetConfig+0x1eaa>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf4:	2b03      	cmp	r3, #3
 800bdf6:	d032      	beq.n	800be5e <UART_SetConfig+0x1ea6>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdfc:	2b04      	cmp	r3, #4
 800bdfe:	d02c      	beq.n	800be5a <UART_SetConfig+0x1ea2>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be04:	2b05      	cmp	r3, #5
 800be06:	d026      	beq.n	800be56 <UART_SetConfig+0x1e9e>
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be0c:	2b06      	cmp	r3, #6
 800be0e:	d020      	beq.n	800be52 <UART_SetConfig+0x1e9a>
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be14:	2b07      	cmp	r3, #7
 800be16:	d01a      	beq.n	800be4e <UART_SetConfig+0x1e96>
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be1c:	2b08      	cmp	r3, #8
 800be1e:	d014      	beq.n	800be4a <UART_SetConfig+0x1e92>
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be24:	2b09      	cmp	r3, #9
 800be26:	d00e      	beq.n	800be46 <UART_SetConfig+0x1e8e>
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be2c:	2b0a      	cmp	r3, #10
 800be2e:	d008      	beq.n	800be42 <UART_SetConfig+0x1e8a>
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be34:	2b0b      	cmp	r3, #11
 800be36:	d102      	bne.n	800be3e <UART_SetConfig+0x1e86>
 800be38:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be3c:	e016      	b.n	800be6c <UART_SetConfig+0x1eb4>
 800be3e:	2301      	movs	r3, #1
 800be40:	e014      	b.n	800be6c <UART_SetConfig+0x1eb4>
 800be42:	2380      	movs	r3, #128	; 0x80
 800be44:	e012      	b.n	800be6c <UART_SetConfig+0x1eb4>
 800be46:	2340      	movs	r3, #64	; 0x40
 800be48:	e010      	b.n	800be6c <UART_SetConfig+0x1eb4>
 800be4a:	2320      	movs	r3, #32
 800be4c:	e00e      	b.n	800be6c <UART_SetConfig+0x1eb4>
 800be4e:	2310      	movs	r3, #16
 800be50:	e00c      	b.n	800be6c <UART_SetConfig+0x1eb4>
 800be52:	230c      	movs	r3, #12
 800be54:	e00a      	b.n	800be6c <UART_SetConfig+0x1eb4>
 800be56:	230a      	movs	r3, #10
 800be58:	e008      	b.n	800be6c <UART_SetConfig+0x1eb4>
 800be5a:	2308      	movs	r3, #8
 800be5c:	e006      	b.n	800be6c <UART_SetConfig+0x1eb4>
 800be5e:	2306      	movs	r3, #6
 800be60:	e004      	b.n	800be6c <UART_SetConfig+0x1eb4>
 800be62:	2304      	movs	r3, #4
 800be64:	e002      	b.n	800be6c <UART_SetConfig+0x1eb4>
 800be66:	2302      	movs	r3, #2
 800be68:	e000      	b.n	800be6c <UART_SetConfig+0x1eb4>
 800be6a:	2301      	movs	r3, #1
 800be6c:	fbb2 f2f3 	udiv	r2, r2, r3
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	685b      	ldr	r3, [r3, #4]
 800be74:	085b      	lsrs	r3, r3, #1
 800be76:	441a      	add	r2, r3
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	685b      	ldr	r3, [r3, #4]
 800be7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800be80:	b29b      	uxth	r3, r3
 800be82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800be84:	e1f2      	b.n	800c26c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be86:	f107 030c 	add.w	r3, r7, #12
 800be8a:	4618      	mov	r0, r3
 800be8c:	f7fc fc7a 	bl	8008784 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be90:	693a      	ldr	r2, [r7, #16]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be96:	2b00      	cmp	r3, #0
 800be98:	d044      	beq.n	800bf24 <UART_SetConfig+0x1f6c>
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be9e:	2b01      	cmp	r3, #1
 800bea0:	d03e      	beq.n	800bf20 <UART_SetConfig+0x1f68>
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bea6:	2b02      	cmp	r3, #2
 800bea8:	d038      	beq.n	800bf1c <UART_SetConfig+0x1f64>
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beae:	2b03      	cmp	r3, #3
 800beb0:	d032      	beq.n	800bf18 <UART_SetConfig+0x1f60>
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beb6:	2b04      	cmp	r3, #4
 800beb8:	d02c      	beq.n	800bf14 <UART_SetConfig+0x1f5c>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bebe:	2b05      	cmp	r3, #5
 800bec0:	d026      	beq.n	800bf10 <UART_SetConfig+0x1f58>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bec6:	2b06      	cmp	r3, #6
 800bec8:	d020      	beq.n	800bf0c <UART_SetConfig+0x1f54>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bece:	2b07      	cmp	r3, #7
 800bed0:	d01a      	beq.n	800bf08 <UART_SetConfig+0x1f50>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bed6:	2b08      	cmp	r3, #8
 800bed8:	d014      	beq.n	800bf04 <UART_SetConfig+0x1f4c>
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bede:	2b09      	cmp	r3, #9
 800bee0:	d00e      	beq.n	800bf00 <UART_SetConfig+0x1f48>
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee6:	2b0a      	cmp	r3, #10
 800bee8:	d008      	beq.n	800befc <UART_SetConfig+0x1f44>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beee:	2b0b      	cmp	r3, #11
 800bef0:	d102      	bne.n	800bef8 <UART_SetConfig+0x1f40>
 800bef2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bef6:	e016      	b.n	800bf26 <UART_SetConfig+0x1f6e>
 800bef8:	2301      	movs	r3, #1
 800befa:	e014      	b.n	800bf26 <UART_SetConfig+0x1f6e>
 800befc:	2380      	movs	r3, #128	; 0x80
 800befe:	e012      	b.n	800bf26 <UART_SetConfig+0x1f6e>
 800bf00:	2340      	movs	r3, #64	; 0x40
 800bf02:	e010      	b.n	800bf26 <UART_SetConfig+0x1f6e>
 800bf04:	2320      	movs	r3, #32
 800bf06:	e00e      	b.n	800bf26 <UART_SetConfig+0x1f6e>
 800bf08:	2310      	movs	r3, #16
 800bf0a:	e00c      	b.n	800bf26 <UART_SetConfig+0x1f6e>
 800bf0c:	230c      	movs	r3, #12
 800bf0e:	e00a      	b.n	800bf26 <UART_SetConfig+0x1f6e>
 800bf10:	230a      	movs	r3, #10
 800bf12:	e008      	b.n	800bf26 <UART_SetConfig+0x1f6e>
 800bf14:	2308      	movs	r3, #8
 800bf16:	e006      	b.n	800bf26 <UART_SetConfig+0x1f6e>
 800bf18:	2306      	movs	r3, #6
 800bf1a:	e004      	b.n	800bf26 <UART_SetConfig+0x1f6e>
 800bf1c:	2304      	movs	r3, #4
 800bf1e:	e002      	b.n	800bf26 <UART_SetConfig+0x1f6e>
 800bf20:	2302      	movs	r3, #2
 800bf22:	e000      	b.n	800bf26 <UART_SetConfig+0x1f6e>
 800bf24:	2301      	movs	r3, #1
 800bf26:	fbb2 f2f3 	udiv	r2, r2, r3
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	685b      	ldr	r3, [r3, #4]
 800bf2e:	085b      	lsrs	r3, r3, #1
 800bf30:	441a      	add	r2, r3
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	685b      	ldr	r3, [r3, #4]
 800bf36:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf3a:	b29b      	uxth	r3, r3
 800bf3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bf3e:	e195      	b.n	800c26c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf40:	4b87      	ldr	r3, [pc, #540]	; (800c160 <UART_SetConfig+0x21a8>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f003 0320 	and.w	r3, r3, #32
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d05d      	beq.n	800c008 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf4c:	4b84      	ldr	r3, [pc, #528]	; (800c160 <UART_SetConfig+0x21a8>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	08db      	lsrs	r3, r3, #3
 800bf52:	f003 0303 	and.w	r3, r3, #3
 800bf56:	4a83      	ldr	r2, [pc, #524]	; (800c164 <UART_SetConfig+0x21ac>)
 800bf58:	40da      	lsrs	r2, r3
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d044      	beq.n	800bfec <UART_SetConfig+0x2034>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf66:	2b01      	cmp	r3, #1
 800bf68:	d03e      	beq.n	800bfe8 <UART_SetConfig+0x2030>
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf6e:	2b02      	cmp	r3, #2
 800bf70:	d038      	beq.n	800bfe4 <UART_SetConfig+0x202c>
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf76:	2b03      	cmp	r3, #3
 800bf78:	d032      	beq.n	800bfe0 <UART_SetConfig+0x2028>
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf7e:	2b04      	cmp	r3, #4
 800bf80:	d02c      	beq.n	800bfdc <UART_SetConfig+0x2024>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf86:	2b05      	cmp	r3, #5
 800bf88:	d026      	beq.n	800bfd8 <UART_SetConfig+0x2020>
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf8e:	2b06      	cmp	r3, #6
 800bf90:	d020      	beq.n	800bfd4 <UART_SetConfig+0x201c>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf96:	2b07      	cmp	r3, #7
 800bf98:	d01a      	beq.n	800bfd0 <UART_SetConfig+0x2018>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf9e:	2b08      	cmp	r3, #8
 800bfa0:	d014      	beq.n	800bfcc <UART_SetConfig+0x2014>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfa6:	2b09      	cmp	r3, #9
 800bfa8:	d00e      	beq.n	800bfc8 <UART_SetConfig+0x2010>
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfae:	2b0a      	cmp	r3, #10
 800bfb0:	d008      	beq.n	800bfc4 <UART_SetConfig+0x200c>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfb6:	2b0b      	cmp	r3, #11
 800bfb8:	d102      	bne.n	800bfc0 <UART_SetConfig+0x2008>
 800bfba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bfbe:	e016      	b.n	800bfee <UART_SetConfig+0x2036>
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	e014      	b.n	800bfee <UART_SetConfig+0x2036>
 800bfc4:	2380      	movs	r3, #128	; 0x80
 800bfc6:	e012      	b.n	800bfee <UART_SetConfig+0x2036>
 800bfc8:	2340      	movs	r3, #64	; 0x40
 800bfca:	e010      	b.n	800bfee <UART_SetConfig+0x2036>
 800bfcc:	2320      	movs	r3, #32
 800bfce:	e00e      	b.n	800bfee <UART_SetConfig+0x2036>
 800bfd0:	2310      	movs	r3, #16
 800bfd2:	e00c      	b.n	800bfee <UART_SetConfig+0x2036>
 800bfd4:	230c      	movs	r3, #12
 800bfd6:	e00a      	b.n	800bfee <UART_SetConfig+0x2036>
 800bfd8:	230a      	movs	r3, #10
 800bfda:	e008      	b.n	800bfee <UART_SetConfig+0x2036>
 800bfdc:	2308      	movs	r3, #8
 800bfde:	e006      	b.n	800bfee <UART_SetConfig+0x2036>
 800bfe0:	2306      	movs	r3, #6
 800bfe2:	e004      	b.n	800bfee <UART_SetConfig+0x2036>
 800bfe4:	2304      	movs	r3, #4
 800bfe6:	e002      	b.n	800bfee <UART_SetConfig+0x2036>
 800bfe8:	2302      	movs	r3, #2
 800bfea:	e000      	b.n	800bfee <UART_SetConfig+0x2036>
 800bfec:	2301      	movs	r3, #1
 800bfee:	fbb2 f2f3 	udiv	r2, r2, r3
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	685b      	ldr	r3, [r3, #4]
 800bff6:	085b      	lsrs	r3, r3, #1
 800bff8:	441a      	add	r2, r3
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	685b      	ldr	r3, [r3, #4]
 800bffe:	fbb2 f3f3 	udiv	r3, r2, r3
 800c002:	b29b      	uxth	r3, r3
 800c004:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800c006:	e131      	b.n	800c26c <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d043      	beq.n	800c098 <UART_SetConfig+0x20e0>
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c014:	2b01      	cmp	r3, #1
 800c016:	d03d      	beq.n	800c094 <UART_SetConfig+0x20dc>
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c01c:	2b02      	cmp	r3, #2
 800c01e:	d037      	beq.n	800c090 <UART_SetConfig+0x20d8>
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c024:	2b03      	cmp	r3, #3
 800c026:	d031      	beq.n	800c08c <UART_SetConfig+0x20d4>
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c02c:	2b04      	cmp	r3, #4
 800c02e:	d02b      	beq.n	800c088 <UART_SetConfig+0x20d0>
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c034:	2b05      	cmp	r3, #5
 800c036:	d025      	beq.n	800c084 <UART_SetConfig+0x20cc>
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c03c:	2b06      	cmp	r3, #6
 800c03e:	d01f      	beq.n	800c080 <UART_SetConfig+0x20c8>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c044:	2b07      	cmp	r3, #7
 800c046:	d019      	beq.n	800c07c <UART_SetConfig+0x20c4>
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c04c:	2b08      	cmp	r3, #8
 800c04e:	d013      	beq.n	800c078 <UART_SetConfig+0x20c0>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c054:	2b09      	cmp	r3, #9
 800c056:	d00d      	beq.n	800c074 <UART_SetConfig+0x20bc>
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c05c:	2b0a      	cmp	r3, #10
 800c05e:	d007      	beq.n	800c070 <UART_SetConfig+0x20b8>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c064:	2b0b      	cmp	r3, #11
 800c066:	d101      	bne.n	800c06c <UART_SetConfig+0x20b4>
 800c068:	4b3f      	ldr	r3, [pc, #252]	; (800c168 <UART_SetConfig+0x21b0>)
 800c06a:	e016      	b.n	800c09a <UART_SetConfig+0x20e2>
 800c06c:	4b3d      	ldr	r3, [pc, #244]	; (800c164 <UART_SetConfig+0x21ac>)
 800c06e:	e014      	b.n	800c09a <UART_SetConfig+0x20e2>
 800c070:	4b3e      	ldr	r3, [pc, #248]	; (800c16c <UART_SetConfig+0x21b4>)
 800c072:	e012      	b.n	800c09a <UART_SetConfig+0x20e2>
 800c074:	4b3e      	ldr	r3, [pc, #248]	; (800c170 <UART_SetConfig+0x21b8>)
 800c076:	e010      	b.n	800c09a <UART_SetConfig+0x20e2>
 800c078:	4b3e      	ldr	r3, [pc, #248]	; (800c174 <UART_SetConfig+0x21bc>)
 800c07a:	e00e      	b.n	800c09a <UART_SetConfig+0x20e2>
 800c07c:	4b3e      	ldr	r3, [pc, #248]	; (800c178 <UART_SetConfig+0x21c0>)
 800c07e:	e00c      	b.n	800c09a <UART_SetConfig+0x20e2>
 800c080:	4b3e      	ldr	r3, [pc, #248]	; (800c17c <UART_SetConfig+0x21c4>)
 800c082:	e00a      	b.n	800c09a <UART_SetConfig+0x20e2>
 800c084:	4b3e      	ldr	r3, [pc, #248]	; (800c180 <UART_SetConfig+0x21c8>)
 800c086:	e008      	b.n	800c09a <UART_SetConfig+0x20e2>
 800c088:	4b3e      	ldr	r3, [pc, #248]	; (800c184 <UART_SetConfig+0x21cc>)
 800c08a:	e006      	b.n	800c09a <UART_SetConfig+0x20e2>
 800c08c:	4b3e      	ldr	r3, [pc, #248]	; (800c188 <UART_SetConfig+0x21d0>)
 800c08e:	e004      	b.n	800c09a <UART_SetConfig+0x20e2>
 800c090:	4b3e      	ldr	r3, [pc, #248]	; (800c18c <UART_SetConfig+0x21d4>)
 800c092:	e002      	b.n	800c09a <UART_SetConfig+0x20e2>
 800c094:	4b3e      	ldr	r3, [pc, #248]	; (800c190 <UART_SetConfig+0x21d8>)
 800c096:	e000      	b.n	800c09a <UART_SetConfig+0x20e2>
 800c098:	4b32      	ldr	r3, [pc, #200]	; (800c164 <UART_SetConfig+0x21ac>)
 800c09a:	687a      	ldr	r2, [r7, #4]
 800c09c:	6852      	ldr	r2, [r2, #4]
 800c09e:	0852      	lsrs	r2, r2, #1
 800c0a0:	441a      	add	r2, r3
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	685b      	ldr	r3, [r3, #4]
 800c0a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0aa:	b29b      	uxth	r3, r3
 800c0ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c0ae:	e0dd      	b.n	800c26c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d046      	beq.n	800c146 <UART_SetConfig+0x218e>
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0bc:	2b01      	cmp	r3, #1
 800c0be:	d040      	beq.n	800c142 <UART_SetConfig+0x218a>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0c4:	2b02      	cmp	r3, #2
 800c0c6:	d03a      	beq.n	800c13e <UART_SetConfig+0x2186>
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0cc:	2b03      	cmp	r3, #3
 800c0ce:	d034      	beq.n	800c13a <UART_SetConfig+0x2182>
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0d4:	2b04      	cmp	r3, #4
 800c0d6:	d02e      	beq.n	800c136 <UART_SetConfig+0x217e>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0dc:	2b05      	cmp	r3, #5
 800c0de:	d028      	beq.n	800c132 <UART_SetConfig+0x217a>
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0e4:	2b06      	cmp	r3, #6
 800c0e6:	d022      	beq.n	800c12e <UART_SetConfig+0x2176>
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0ec:	2b07      	cmp	r3, #7
 800c0ee:	d01c      	beq.n	800c12a <UART_SetConfig+0x2172>
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0f4:	2b08      	cmp	r3, #8
 800c0f6:	d016      	beq.n	800c126 <UART_SetConfig+0x216e>
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0fc:	2b09      	cmp	r3, #9
 800c0fe:	d00f      	beq.n	800c120 <UART_SetConfig+0x2168>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c104:	2b0a      	cmp	r3, #10
 800c106:	d008      	beq.n	800c11a <UART_SetConfig+0x2162>
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c10c:	2b0b      	cmp	r3, #11
 800c10e:	d102      	bne.n	800c116 <UART_SetConfig+0x215e>
 800c110:	f643 5309 	movw	r3, #15625	; 0x3d09
 800c114:	e018      	b.n	800c148 <UART_SetConfig+0x2190>
 800c116:	4b18      	ldr	r3, [pc, #96]	; (800c178 <UART_SetConfig+0x21c0>)
 800c118:	e016      	b.n	800c148 <UART_SetConfig+0x2190>
 800c11a:	f647 2312 	movw	r3, #31250	; 0x7a12
 800c11e:	e013      	b.n	800c148 <UART_SetConfig+0x2190>
 800c120:	f24f 4324 	movw	r3, #62500	; 0xf424
 800c124:	e010      	b.n	800c148 <UART_SetConfig+0x2190>
 800c126:	4b1b      	ldr	r3, [pc, #108]	; (800c194 <UART_SetConfig+0x21dc>)
 800c128:	e00e      	b.n	800c148 <UART_SetConfig+0x2190>
 800c12a:	4b0f      	ldr	r3, [pc, #60]	; (800c168 <UART_SetConfig+0x21b0>)
 800c12c:	e00c      	b.n	800c148 <UART_SetConfig+0x2190>
 800c12e:	4b1a      	ldr	r3, [pc, #104]	; (800c198 <UART_SetConfig+0x21e0>)
 800c130:	e00a      	b.n	800c148 <UART_SetConfig+0x2190>
 800c132:	4b1a      	ldr	r3, [pc, #104]	; (800c19c <UART_SetConfig+0x21e4>)
 800c134:	e008      	b.n	800c148 <UART_SetConfig+0x2190>
 800c136:	4b0d      	ldr	r3, [pc, #52]	; (800c16c <UART_SetConfig+0x21b4>)
 800c138:	e006      	b.n	800c148 <UART_SetConfig+0x2190>
 800c13a:	4b19      	ldr	r3, [pc, #100]	; (800c1a0 <UART_SetConfig+0x21e8>)
 800c13c:	e004      	b.n	800c148 <UART_SetConfig+0x2190>
 800c13e:	4b0c      	ldr	r3, [pc, #48]	; (800c170 <UART_SetConfig+0x21b8>)
 800c140:	e002      	b.n	800c148 <UART_SetConfig+0x2190>
 800c142:	4b0c      	ldr	r3, [pc, #48]	; (800c174 <UART_SetConfig+0x21bc>)
 800c144:	e000      	b.n	800c148 <UART_SetConfig+0x2190>
 800c146:	4b0c      	ldr	r3, [pc, #48]	; (800c178 <UART_SetConfig+0x21c0>)
 800c148:	687a      	ldr	r2, [r7, #4]
 800c14a:	6852      	ldr	r2, [r2, #4]
 800c14c:	0852      	lsrs	r2, r2, #1
 800c14e:	441a      	add	r2, r3
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	685b      	ldr	r3, [r3, #4]
 800c154:	fbb2 f3f3 	udiv	r3, r2, r3
 800c158:	b29b      	uxth	r3, r3
 800c15a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c15c:	e086      	b.n	800c26c <UART_SetConfig+0x22b4>
 800c15e:	bf00      	nop
 800c160:	58024400 	.word	0x58024400
 800c164:	03d09000 	.word	0x03d09000
 800c168:	0003d090 	.word	0x0003d090
 800c16c:	0007a120 	.word	0x0007a120
 800c170:	000f4240 	.word	0x000f4240
 800c174:	001e8480 	.word	0x001e8480
 800c178:	003d0900 	.word	0x003d0900
 800c17c:	00516155 	.word	0x00516155
 800c180:	0061a800 	.word	0x0061a800
 800c184:	007a1200 	.word	0x007a1200
 800c188:	00a2c2aa 	.word	0x00a2c2aa
 800c18c:	00f42400 	.word	0x00f42400
 800c190:	01e84800 	.word	0x01e84800
 800c194:	0001e848 	.word	0x0001e848
 800c198:	00051615 	.word	0x00051615
 800c19c:	00061a80 	.word	0x00061a80
 800c1a0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d04e      	beq.n	800c24a <UART_SetConfig+0x2292>
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1b0:	2b01      	cmp	r3, #1
 800c1b2:	d047      	beq.n	800c244 <UART_SetConfig+0x228c>
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1b8:	2b02      	cmp	r3, #2
 800c1ba:	d040      	beq.n	800c23e <UART_SetConfig+0x2286>
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1c0:	2b03      	cmp	r3, #3
 800c1c2:	d039      	beq.n	800c238 <UART_SetConfig+0x2280>
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1c8:	2b04      	cmp	r3, #4
 800c1ca:	d032      	beq.n	800c232 <UART_SetConfig+0x227a>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1d0:	2b05      	cmp	r3, #5
 800c1d2:	d02b      	beq.n	800c22c <UART_SetConfig+0x2274>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1d8:	2b06      	cmp	r3, #6
 800c1da:	d024      	beq.n	800c226 <UART_SetConfig+0x226e>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1e0:	2b07      	cmp	r3, #7
 800c1e2:	d01d      	beq.n	800c220 <UART_SetConfig+0x2268>
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1e8:	2b08      	cmp	r3, #8
 800c1ea:	d016      	beq.n	800c21a <UART_SetConfig+0x2262>
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1f0:	2b09      	cmp	r3, #9
 800c1f2:	d00f      	beq.n	800c214 <UART_SetConfig+0x225c>
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1f8:	2b0a      	cmp	r3, #10
 800c1fa:	d008      	beq.n	800c20e <UART_SetConfig+0x2256>
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c200:	2b0b      	cmp	r3, #11
 800c202:	d101      	bne.n	800c208 <UART_SetConfig+0x2250>
 800c204:	2380      	movs	r3, #128	; 0x80
 800c206:	e022      	b.n	800c24e <UART_SetConfig+0x2296>
 800c208:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c20c:	e01f      	b.n	800c24e <UART_SetConfig+0x2296>
 800c20e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c212:	e01c      	b.n	800c24e <UART_SetConfig+0x2296>
 800c214:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c218:	e019      	b.n	800c24e <UART_SetConfig+0x2296>
 800c21a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c21e:	e016      	b.n	800c24e <UART_SetConfig+0x2296>
 800c220:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c224:	e013      	b.n	800c24e <UART_SetConfig+0x2296>
 800c226:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800c22a:	e010      	b.n	800c24e <UART_SetConfig+0x2296>
 800c22c:	f640 43cc 	movw	r3, #3276	; 0xccc
 800c230:	e00d      	b.n	800c24e <UART_SetConfig+0x2296>
 800c232:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c236:	e00a      	b.n	800c24e <UART_SetConfig+0x2296>
 800c238:	f241 5355 	movw	r3, #5461	; 0x1555
 800c23c:	e007      	b.n	800c24e <UART_SetConfig+0x2296>
 800c23e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c242:	e004      	b.n	800c24e <UART_SetConfig+0x2296>
 800c244:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c248:	e001      	b.n	800c24e <UART_SetConfig+0x2296>
 800c24a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c24e:	687a      	ldr	r2, [r7, #4]
 800c250:	6852      	ldr	r2, [r2, #4]
 800c252:	0852      	lsrs	r2, r2, #1
 800c254:	441a      	add	r2, r3
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	685b      	ldr	r3, [r3, #4]
 800c25a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c25e:	b29b      	uxth	r3, r3
 800c260:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c262:	e003      	b.n	800c26c <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800c264:	2301      	movs	r3, #1
 800c266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800c26a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c26c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c26e:	2b0f      	cmp	r3, #15
 800c270:	d908      	bls.n	800c284 <UART_SetConfig+0x22cc>
 800c272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c278:	d204      	bcs.n	800c284 <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c280:	60da      	str	r2, [r3, #12]
 800c282:	e002      	b.n	800c28a <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800c284:	2301      	movs	r3, #1
 800c286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2201      	movs	r2, #1
 800c28e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2201      	movs	r2, #1
 800c296:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2200      	movs	r2, #0
 800c29e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800c2a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3740      	adds	r7, #64	; 0x40
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800c2b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b083      	sub	sp, #12
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2c0:	f003 0301 	and.w	r3, r3, #1
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d00a      	beq.n	800c2de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	685b      	ldr	r3, [r3, #4]
 800c2ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	430a      	orrs	r2, r1
 800c2dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2e2:	f003 0302 	and.w	r3, r3, #2
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d00a      	beq.n	800c300 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	685b      	ldr	r3, [r3, #4]
 800c2f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	430a      	orrs	r2, r1
 800c2fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c304:	f003 0304 	and.w	r3, r3, #4
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d00a      	beq.n	800c322 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	685b      	ldr	r3, [r3, #4]
 800c312:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	430a      	orrs	r2, r1
 800c320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c326:	f003 0308 	and.w	r3, r3, #8
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d00a      	beq.n	800c344 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	685b      	ldr	r3, [r3, #4]
 800c334:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	430a      	orrs	r2, r1
 800c342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c348:	f003 0310 	and.w	r3, r3, #16
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d00a      	beq.n	800c366 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	689b      	ldr	r3, [r3, #8]
 800c356:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	430a      	orrs	r2, r1
 800c364:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c36a:	f003 0320 	and.w	r3, r3, #32
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d00a      	beq.n	800c388 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	689b      	ldr	r3, [r3, #8]
 800c378:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	430a      	orrs	r2, r1
 800c386:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c38c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c390:	2b00      	cmp	r3, #0
 800c392:	d01a      	beq.n	800c3ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	685b      	ldr	r3, [r3, #4]
 800c39a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	430a      	orrs	r2, r1
 800c3a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c3b2:	d10a      	bne.n	800c3ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	685b      	ldr	r3, [r3, #4]
 800c3ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	430a      	orrs	r2, r1
 800c3c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d00a      	beq.n	800c3ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	685b      	ldr	r3, [r3, #4]
 800c3dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	430a      	orrs	r2, r1
 800c3ea:	605a      	str	r2, [r3, #4]
  }
}
 800c3ec:	bf00      	nop
 800c3ee:	370c      	adds	r7, #12
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f6:	4770      	bx	lr

0800c3f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b086      	sub	sp, #24
 800c3fc:	af02      	add	r7, sp, #8
 800c3fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2200      	movs	r2, #0
 800c404:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c408:	f7f5 fc4a 	bl	8001ca0 <HAL_GetTick>
 800c40c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	f003 0308 	and.w	r3, r3, #8
 800c418:	2b08      	cmp	r3, #8
 800c41a:	d10e      	bne.n	800c43a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c41c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c420:	9300      	str	r3, [sp, #0]
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	2200      	movs	r2, #0
 800c426:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f000 f82c 	bl	800c488 <UART_WaitOnFlagUntilTimeout>
 800c430:	4603      	mov	r3, r0
 800c432:	2b00      	cmp	r3, #0
 800c434:	d001      	beq.n	800c43a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c436:	2303      	movs	r3, #3
 800c438:	e022      	b.n	800c480 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	f003 0304 	and.w	r3, r3, #4
 800c444:	2b04      	cmp	r3, #4
 800c446:	d10e      	bne.n	800c466 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c448:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c44c:	9300      	str	r3, [sp, #0]
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	2200      	movs	r2, #0
 800c452:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f000 f816 	bl	800c488 <UART_WaitOnFlagUntilTimeout>
 800c45c:	4603      	mov	r3, r0
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d001      	beq.n	800c466 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c462:	2303      	movs	r3, #3
 800c464:	e00c      	b.n	800c480 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2220      	movs	r2, #32
 800c46a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2220      	movs	r2, #32
 800c472:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2200      	movs	r2, #0
 800c47a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c47e:	2300      	movs	r3, #0
}
 800c480:	4618      	mov	r0, r3
 800c482:	3710      	adds	r7, #16
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}

0800c488 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b084      	sub	sp, #16
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	60f8      	str	r0, [r7, #12]
 800c490:	60b9      	str	r1, [r7, #8]
 800c492:	603b      	str	r3, [r7, #0]
 800c494:	4613      	mov	r3, r2
 800c496:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c498:	e062      	b.n	800c560 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c49a:	69bb      	ldr	r3, [r7, #24]
 800c49c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4a0:	d05e      	beq.n	800c560 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c4a2:	f7f5 fbfd 	bl	8001ca0 <HAL_GetTick>
 800c4a6:	4602      	mov	r2, r0
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	1ad3      	subs	r3, r2, r3
 800c4ac:	69ba      	ldr	r2, [r7, #24]
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	d302      	bcc.n	800c4b8 <UART_WaitOnFlagUntilTimeout+0x30>
 800c4b2:	69bb      	ldr	r3, [r7, #24]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d11d      	bne.n	800c4f4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	681a      	ldr	r2, [r3, #0]
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c4c6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	689a      	ldr	r2, [r3, #8]
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f022 0201 	bic.w	r2, r2, #1
 800c4d6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	2220      	movs	r2, #32
 800c4dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	2220      	movs	r2, #32
 800c4e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800c4f0:	2303      	movs	r3, #3
 800c4f2:	e045      	b.n	800c580 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f003 0304 	and.w	r3, r3, #4
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d02e      	beq.n	800c560 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	69db      	ldr	r3, [r3, #28]
 800c508:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c50c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c510:	d126      	bne.n	800c560 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c51a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	681a      	ldr	r2, [r3, #0]
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c52a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	689a      	ldr	r2, [r3, #8]
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f022 0201 	bic.w	r2, r2, #1
 800c53a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	2220      	movs	r2, #32
 800c540:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	2220      	movs	r2, #32
 800c548:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	2220      	movs	r2, #32
 800c550:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	2200      	movs	r2, #0
 800c558:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800c55c:	2303      	movs	r3, #3
 800c55e:	e00f      	b.n	800c580 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	69da      	ldr	r2, [r3, #28]
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	4013      	ands	r3, r2
 800c56a:	68ba      	ldr	r2, [r7, #8]
 800c56c:	429a      	cmp	r2, r3
 800c56e:	bf0c      	ite	eq
 800c570:	2301      	moveq	r3, #1
 800c572:	2300      	movne	r3, #0
 800c574:	b2db      	uxtb	r3, r3
 800c576:	461a      	mov	r2, r3
 800c578:	79fb      	ldrb	r3, [r7, #7]
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d08d      	beq.n	800c49a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c57e:	2300      	movs	r3, #0
}
 800c580:	4618      	mov	r0, r3
 800c582:	3710      	adds	r7, #16
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}

0800c588 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c588:	b480      	push	{r7}
 800c58a:	b085      	sub	sp, #20
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c596:	2b01      	cmp	r3, #1
 800c598:	d101      	bne.n	800c59e <HAL_UARTEx_DisableFifoMode+0x16>
 800c59a:	2302      	movs	r3, #2
 800c59c:	e027      	b.n	800c5ee <HAL_UARTEx_DisableFifoMode+0x66>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2201      	movs	r2, #1
 800c5a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2224      	movs	r2, #36	; 0x24
 800c5aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	681a      	ldr	r2, [r3, #0]
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f022 0201 	bic.w	r2, r2, #1
 800c5c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c5cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	68fa      	ldr	r2, [r7, #12]
 800c5da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2220      	movs	r2, #32
 800c5e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c5ec:	2300      	movs	r3, #0
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3714      	adds	r7, #20
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f8:	4770      	bx	lr

0800c5fa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c5fa:	b580      	push	{r7, lr}
 800c5fc:	b084      	sub	sp, #16
 800c5fe:	af00      	add	r7, sp, #0
 800c600:	6078      	str	r0, [r7, #4]
 800c602:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c60a:	2b01      	cmp	r3, #1
 800c60c:	d101      	bne.n	800c612 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c60e:	2302      	movs	r3, #2
 800c610:	e02d      	b.n	800c66e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2201      	movs	r2, #1
 800c616:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2224      	movs	r2, #36	; 0x24
 800c61e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	681a      	ldr	r2, [r3, #0]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	f022 0201 	bic.w	r2, r2, #1
 800c638:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	689b      	ldr	r3, [r3, #8]
 800c640:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	683a      	ldr	r2, [r7, #0]
 800c64a:	430a      	orrs	r2, r1
 800c64c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f000 f850 	bl	800c6f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	68fa      	ldr	r2, [r7, #12]
 800c65a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2220      	movs	r2, #32
 800c660:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2200      	movs	r2, #0
 800c668:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c66c:	2300      	movs	r3, #0
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3710      	adds	r7, #16
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}

0800c676 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c676:	b580      	push	{r7, lr}
 800c678:	b084      	sub	sp, #16
 800c67a:	af00      	add	r7, sp, #0
 800c67c:	6078      	str	r0, [r7, #4]
 800c67e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c686:	2b01      	cmp	r3, #1
 800c688:	d101      	bne.n	800c68e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c68a:	2302      	movs	r3, #2
 800c68c:	e02d      	b.n	800c6ea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2201      	movs	r2, #1
 800c692:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2224      	movs	r2, #36	; 0x24
 800c69a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	681a      	ldr	r2, [r3, #0]
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	f022 0201 	bic.w	r2, r2, #1
 800c6b4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	689b      	ldr	r3, [r3, #8]
 800c6bc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	683a      	ldr	r2, [r7, #0]
 800c6c6:	430a      	orrs	r2, r1
 800c6c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f000 f812 	bl	800c6f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	68fa      	ldr	r2, [r7, #12]
 800c6d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2220      	movs	r2, #32
 800c6dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c6e8:	2300      	movs	r3, #0
}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	3710      	adds	r7, #16
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
	...

0800c6f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b089      	sub	sp, #36	; 0x24
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800c6fc:	4a2f      	ldr	r2, [pc, #188]	; (800c7bc <UARTEx_SetNbDataToProcess+0xc8>)
 800c6fe:	f107 0314 	add.w	r3, r7, #20
 800c702:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c706:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800c70a:	4a2d      	ldr	r2, [pc, #180]	; (800c7c0 <UARTEx_SetNbDataToProcess+0xcc>)
 800c70c:	f107 030c 	add.w	r3, r7, #12
 800c710:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c714:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d108      	bne.n	800c732 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2201      	movs	r2, #1
 800c724:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2201      	movs	r2, #1
 800c72c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c730:	e03d      	b.n	800c7ae <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c732:	2308      	movs	r3, #8
 800c734:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c736:	2308      	movs	r3, #8
 800c738:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	689b      	ldr	r3, [r3, #8]
 800c740:	0e5b      	lsrs	r3, r3, #25
 800c742:	b2db      	uxtb	r3, r3
 800c744:	f003 0307 	and.w	r3, r3, #7
 800c748:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	689b      	ldr	r3, [r3, #8]
 800c750:	0f5b      	lsrs	r3, r3, #29
 800c752:	b2db      	uxtb	r3, r3
 800c754:	f003 0307 	and.w	r3, r3, #7
 800c758:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800c75a:	7fbb      	ldrb	r3, [r7, #30]
 800c75c:	7f3a      	ldrb	r2, [r7, #28]
 800c75e:	f107 0120 	add.w	r1, r7, #32
 800c762:	440a      	add	r2, r1
 800c764:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c768:	fb02 f303 	mul.w	r3, r2, r3
 800c76c:	7f3a      	ldrb	r2, [r7, #28]
 800c76e:	f107 0120 	add.w	r1, r7, #32
 800c772:	440a      	add	r2, r1
 800c774:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c778:	fb93 f3f2 	sdiv	r3, r3, r2
 800c77c:	b29a      	uxth	r2, r3
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800c784:	7ffb      	ldrb	r3, [r7, #31]
 800c786:	7f7a      	ldrb	r2, [r7, #29]
 800c788:	f107 0120 	add.w	r1, r7, #32
 800c78c:	440a      	add	r2, r1
 800c78e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c792:	fb02 f303 	mul.w	r3, r2, r3
 800c796:	7f7a      	ldrb	r2, [r7, #29]
 800c798:	f107 0120 	add.w	r1, r7, #32
 800c79c:	440a      	add	r2, r1
 800c79e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c7a2:	fb93 f3f2 	sdiv	r3, r3, r2
 800c7a6:	b29a      	uxth	r2, r3
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c7ae:	bf00      	nop
 800c7b0:	3724      	adds	r7, #36	; 0x24
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b8:	4770      	bx	lr
 800c7ba:	bf00      	nop
 800c7bc:	08010080 	.word	0x08010080
 800c7c0:	08010088 	.word	0x08010088

0800c7c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c7c4:	b084      	sub	sp, #16
 800c7c6:	b580      	push	{r7, lr}
 800c7c8:	b084      	sub	sp, #16
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	6078      	str	r0, [r7, #4]
 800c7ce:	f107 001c 	add.w	r0, r7, #28
 800c7d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d8:	2b01      	cmp	r3, #1
 800c7da:	d120      	bne.n	800c81e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	68da      	ldr	r2, [r3, #12]
 800c7ec:	4b25      	ldr	r3, [pc, #148]	; (800c884 <USB_CoreInit+0xc0>)
 800c7ee:	4013      	ands	r3, r2
 800c7f0:	687a      	ldr	r2, [r7, #4]
 800c7f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	68db      	ldr	r3, [r3, #12]
 800c7f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c802:	2b01      	cmp	r3, #1
 800c804:	d105      	bne.n	800c812 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	68db      	ldr	r3, [r3, #12]
 800c80a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f001 fa66 	bl	800dce4 <USB_CoreReset>
 800c818:	4603      	mov	r3, r0
 800c81a:	73fb      	strb	r3, [r7, #15]
 800c81c:	e01a      	b.n	800c854 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	68db      	ldr	r3, [r3, #12]
 800c822:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f001 fa5a 	bl	800dce4 <USB_CoreReset>
 800c830:	4603      	mov	r3, r0
 800c832:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c836:	2b00      	cmp	r3, #0
 800c838:	d106      	bne.n	800c848 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c83e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	639a      	str	r2, [r3, #56]	; 0x38
 800c846:	e005      	b.n	800c854 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c84c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c856:	2b01      	cmp	r3, #1
 800c858:	d10b      	bne.n	800c872 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	689b      	ldr	r3, [r3, #8]
 800c85e:	f043 0206 	orr.w	r2, r3, #6
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	689b      	ldr	r3, [r3, #8]
 800c86a:	f043 0220 	orr.w	r2, r3, #32
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c872:	7bfb      	ldrb	r3, [r7, #15]
}
 800c874:	4618      	mov	r0, r3
 800c876:	3710      	adds	r7, #16
 800c878:	46bd      	mov	sp, r7
 800c87a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c87e:	b004      	add	sp, #16
 800c880:	4770      	bx	lr
 800c882:	bf00      	nop
 800c884:	ffbdffbf 	.word	0xffbdffbf

0800c888 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c888:	b480      	push	{r7}
 800c88a:	b087      	sub	sp, #28
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	60f8      	str	r0, [r7, #12]
 800c890:	60b9      	str	r1, [r7, #8]
 800c892:	4613      	mov	r3, r2
 800c894:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c896:	79fb      	ldrb	r3, [r7, #7]
 800c898:	2b02      	cmp	r3, #2
 800c89a:	d165      	bne.n	800c968 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	4a41      	ldr	r2, [pc, #260]	; (800c9a4 <USB_SetTurnaroundTime+0x11c>)
 800c8a0:	4293      	cmp	r3, r2
 800c8a2:	d906      	bls.n	800c8b2 <USB_SetTurnaroundTime+0x2a>
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	4a40      	ldr	r2, [pc, #256]	; (800c9a8 <USB_SetTurnaroundTime+0x120>)
 800c8a8:	4293      	cmp	r3, r2
 800c8aa:	d802      	bhi.n	800c8b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c8ac:	230f      	movs	r3, #15
 800c8ae:	617b      	str	r3, [r7, #20]
 800c8b0:	e062      	b.n	800c978 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	4a3c      	ldr	r2, [pc, #240]	; (800c9a8 <USB_SetTurnaroundTime+0x120>)
 800c8b6:	4293      	cmp	r3, r2
 800c8b8:	d906      	bls.n	800c8c8 <USB_SetTurnaroundTime+0x40>
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	4a3b      	ldr	r2, [pc, #236]	; (800c9ac <USB_SetTurnaroundTime+0x124>)
 800c8be:	4293      	cmp	r3, r2
 800c8c0:	d802      	bhi.n	800c8c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c8c2:	230e      	movs	r3, #14
 800c8c4:	617b      	str	r3, [r7, #20]
 800c8c6:	e057      	b.n	800c978 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	4a38      	ldr	r2, [pc, #224]	; (800c9ac <USB_SetTurnaroundTime+0x124>)
 800c8cc:	4293      	cmp	r3, r2
 800c8ce:	d906      	bls.n	800c8de <USB_SetTurnaroundTime+0x56>
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	4a37      	ldr	r2, [pc, #220]	; (800c9b0 <USB_SetTurnaroundTime+0x128>)
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d802      	bhi.n	800c8de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c8d8:	230d      	movs	r3, #13
 800c8da:	617b      	str	r3, [r7, #20]
 800c8dc:	e04c      	b.n	800c978 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	4a33      	ldr	r2, [pc, #204]	; (800c9b0 <USB_SetTurnaroundTime+0x128>)
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	d906      	bls.n	800c8f4 <USB_SetTurnaroundTime+0x6c>
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	4a32      	ldr	r2, [pc, #200]	; (800c9b4 <USB_SetTurnaroundTime+0x12c>)
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d802      	bhi.n	800c8f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c8ee:	230c      	movs	r3, #12
 800c8f0:	617b      	str	r3, [r7, #20]
 800c8f2:	e041      	b.n	800c978 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	4a2f      	ldr	r2, [pc, #188]	; (800c9b4 <USB_SetTurnaroundTime+0x12c>)
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	d906      	bls.n	800c90a <USB_SetTurnaroundTime+0x82>
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	4a2e      	ldr	r2, [pc, #184]	; (800c9b8 <USB_SetTurnaroundTime+0x130>)
 800c900:	4293      	cmp	r3, r2
 800c902:	d802      	bhi.n	800c90a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c904:	230b      	movs	r3, #11
 800c906:	617b      	str	r3, [r7, #20]
 800c908:	e036      	b.n	800c978 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	4a2a      	ldr	r2, [pc, #168]	; (800c9b8 <USB_SetTurnaroundTime+0x130>)
 800c90e:	4293      	cmp	r3, r2
 800c910:	d906      	bls.n	800c920 <USB_SetTurnaroundTime+0x98>
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	4a29      	ldr	r2, [pc, #164]	; (800c9bc <USB_SetTurnaroundTime+0x134>)
 800c916:	4293      	cmp	r3, r2
 800c918:	d802      	bhi.n	800c920 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c91a:	230a      	movs	r3, #10
 800c91c:	617b      	str	r3, [r7, #20]
 800c91e:	e02b      	b.n	800c978 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	4a26      	ldr	r2, [pc, #152]	; (800c9bc <USB_SetTurnaroundTime+0x134>)
 800c924:	4293      	cmp	r3, r2
 800c926:	d906      	bls.n	800c936 <USB_SetTurnaroundTime+0xae>
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	4a25      	ldr	r2, [pc, #148]	; (800c9c0 <USB_SetTurnaroundTime+0x138>)
 800c92c:	4293      	cmp	r3, r2
 800c92e:	d802      	bhi.n	800c936 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c930:	2309      	movs	r3, #9
 800c932:	617b      	str	r3, [r7, #20]
 800c934:	e020      	b.n	800c978 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	4a21      	ldr	r2, [pc, #132]	; (800c9c0 <USB_SetTurnaroundTime+0x138>)
 800c93a:	4293      	cmp	r3, r2
 800c93c:	d906      	bls.n	800c94c <USB_SetTurnaroundTime+0xc4>
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	4a20      	ldr	r2, [pc, #128]	; (800c9c4 <USB_SetTurnaroundTime+0x13c>)
 800c942:	4293      	cmp	r3, r2
 800c944:	d802      	bhi.n	800c94c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c946:	2308      	movs	r3, #8
 800c948:	617b      	str	r3, [r7, #20]
 800c94a:	e015      	b.n	800c978 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	4a1d      	ldr	r2, [pc, #116]	; (800c9c4 <USB_SetTurnaroundTime+0x13c>)
 800c950:	4293      	cmp	r3, r2
 800c952:	d906      	bls.n	800c962 <USB_SetTurnaroundTime+0xda>
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	4a1c      	ldr	r2, [pc, #112]	; (800c9c8 <USB_SetTurnaroundTime+0x140>)
 800c958:	4293      	cmp	r3, r2
 800c95a:	d802      	bhi.n	800c962 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c95c:	2307      	movs	r3, #7
 800c95e:	617b      	str	r3, [r7, #20]
 800c960:	e00a      	b.n	800c978 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c962:	2306      	movs	r3, #6
 800c964:	617b      	str	r3, [r7, #20]
 800c966:	e007      	b.n	800c978 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c968:	79fb      	ldrb	r3, [r7, #7]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d102      	bne.n	800c974 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c96e:	2309      	movs	r3, #9
 800c970:	617b      	str	r3, [r7, #20]
 800c972:	e001      	b.n	800c978 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c974:	2309      	movs	r3, #9
 800c976:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	68db      	ldr	r3, [r3, #12]
 800c97c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	68da      	ldr	r2, [r3, #12]
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	029b      	lsls	r3, r3, #10
 800c98c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c990:	431a      	orrs	r2, r3
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c996:	2300      	movs	r3, #0
}
 800c998:	4618      	mov	r0, r3
 800c99a:	371c      	adds	r7, #28
 800c99c:	46bd      	mov	sp, r7
 800c99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a2:	4770      	bx	lr
 800c9a4:	00d8acbf 	.word	0x00d8acbf
 800c9a8:	00e4e1bf 	.word	0x00e4e1bf
 800c9ac:	00f423ff 	.word	0x00f423ff
 800c9b0:	0106737f 	.word	0x0106737f
 800c9b4:	011a499f 	.word	0x011a499f
 800c9b8:	01312cff 	.word	0x01312cff
 800c9bc:	014ca43f 	.word	0x014ca43f
 800c9c0:	016e35ff 	.word	0x016e35ff
 800c9c4:	01a6ab1f 	.word	0x01a6ab1f
 800c9c8:	01e847ff 	.word	0x01e847ff

0800c9cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b083      	sub	sp, #12
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	689b      	ldr	r3, [r3, #8]
 800c9d8:	f043 0201 	orr.w	r2, r3, #1
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c9e0:	2300      	movs	r3, #0
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	370c      	adds	r7, #12
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ec:	4770      	bx	lr

0800c9ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c9ee:	b480      	push	{r7}
 800c9f0:	b083      	sub	sp, #12
 800c9f2:	af00      	add	r7, sp, #0
 800c9f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	689b      	ldr	r3, [r3, #8]
 800c9fa:	f023 0201 	bic.w	r2, r3, #1
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ca02:	2300      	movs	r3, #0
}
 800ca04:	4618      	mov	r0, r3
 800ca06:	370c      	adds	r7, #12
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0e:	4770      	bx	lr

0800ca10 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b082      	sub	sp, #8
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
 800ca18:	460b      	mov	r3, r1
 800ca1a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	68db      	ldr	r3, [r3, #12]
 800ca20:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ca28:	78fb      	ldrb	r3, [r7, #3]
 800ca2a:	2b01      	cmp	r3, #1
 800ca2c:	d106      	bne.n	800ca3c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	68db      	ldr	r3, [r3, #12]
 800ca32:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	60da      	str	r2, [r3, #12]
 800ca3a:	e00b      	b.n	800ca54 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800ca3c:	78fb      	ldrb	r3, [r7, #3]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d106      	bne.n	800ca50 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	68db      	ldr	r3, [r3, #12]
 800ca46:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	60da      	str	r2, [r3, #12]
 800ca4e:	e001      	b.n	800ca54 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800ca50:	2301      	movs	r3, #1
 800ca52:	e003      	b.n	800ca5c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800ca54:	2032      	movs	r0, #50	; 0x32
 800ca56:	f7f5 f92f 	bl	8001cb8 <HAL_Delay>

  return HAL_OK;
 800ca5a:	2300      	movs	r3, #0
}
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	3708      	adds	r7, #8
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}

0800ca64 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ca64:	b084      	sub	sp, #16
 800ca66:	b580      	push	{r7, lr}
 800ca68:	b086      	sub	sp, #24
 800ca6a:	af00      	add	r7, sp, #0
 800ca6c:	6078      	str	r0, [r7, #4]
 800ca6e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ca72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ca76:	2300      	movs	r3, #0
 800ca78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ca7e:	2300      	movs	r3, #0
 800ca80:	613b      	str	r3, [r7, #16]
 800ca82:	e009      	b.n	800ca98 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ca84:	687a      	ldr	r2, [r7, #4]
 800ca86:	693b      	ldr	r3, [r7, #16]
 800ca88:	3340      	adds	r3, #64	; 0x40
 800ca8a:	009b      	lsls	r3, r3, #2
 800ca8c:	4413      	add	r3, r2
 800ca8e:	2200      	movs	r2, #0
 800ca90:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ca92:	693b      	ldr	r3, [r7, #16]
 800ca94:	3301      	adds	r3, #1
 800ca96:	613b      	str	r3, [r7, #16]
 800ca98:	693b      	ldr	r3, [r7, #16]
 800ca9a:	2b0e      	cmp	r3, #14
 800ca9c:	d9f2      	bls.n	800ca84 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ca9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d11c      	bne.n	800cade <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800caaa:	685b      	ldr	r3, [r3, #4]
 800caac:	68fa      	ldr	r2, [r7, #12]
 800caae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cab2:	f043 0302 	orr.w	r3, r3, #2
 800cab6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cabc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	601a      	str	r2, [r3, #0]
 800cadc:	e005      	b.n	800caea <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cae2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800caf0:	461a      	mov	r2, r3
 800caf2:	2300      	movs	r3, #0
 800caf4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cafc:	4619      	mov	r1, r3
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb04:	461a      	mov	r2, r3
 800cb06:	680b      	ldr	r3, [r1, #0]
 800cb08:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cb0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb0c:	2b01      	cmp	r3, #1
 800cb0e:	d10c      	bne.n	800cb2a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800cb10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d104      	bne.n	800cb20 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800cb16:	2100      	movs	r1, #0
 800cb18:	6878      	ldr	r0, [r7, #4]
 800cb1a:	f000 f949 	bl	800cdb0 <USB_SetDevSpeed>
 800cb1e:	e008      	b.n	800cb32 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cb20:	2101      	movs	r1, #1
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f000 f944 	bl	800cdb0 <USB_SetDevSpeed>
 800cb28:	e003      	b.n	800cb32 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cb2a:	2103      	movs	r1, #3
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f000 f93f 	bl	800cdb0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cb32:	2110      	movs	r1, #16
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f000 f8f3 	bl	800cd20 <USB_FlushTxFifo>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d001      	beq.n	800cb44 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800cb40:	2301      	movs	r3, #1
 800cb42:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f000 f911 	bl	800cd6c <USB_FlushRxFifo>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d001      	beq.n	800cb54 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800cb50:	2301      	movs	r3, #1
 800cb52:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb5a:	461a      	mov	r2, r3
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb66:	461a      	mov	r2, r3
 800cb68:	2300      	movs	r3, #0
 800cb6a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb72:	461a      	mov	r2, r3
 800cb74:	2300      	movs	r3, #0
 800cb76:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cb78:	2300      	movs	r3, #0
 800cb7a:	613b      	str	r3, [r7, #16]
 800cb7c:	e043      	b.n	800cc06 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cb7e:	693b      	ldr	r3, [r7, #16]
 800cb80:	015a      	lsls	r2, r3, #5
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	4413      	add	r3, r2
 800cb86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb94:	d118      	bne.n	800cbc8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d10a      	bne.n	800cbb2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cb9c:	693b      	ldr	r3, [r7, #16]
 800cb9e:	015a      	lsls	r2, r3, #5
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	4413      	add	r3, r2
 800cba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cba8:	461a      	mov	r2, r3
 800cbaa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cbae:	6013      	str	r3, [r2, #0]
 800cbb0:	e013      	b.n	800cbda <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cbb2:	693b      	ldr	r3, [r7, #16]
 800cbb4:	015a      	lsls	r2, r3, #5
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	4413      	add	r3, r2
 800cbba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbbe:	461a      	mov	r2, r3
 800cbc0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cbc4:	6013      	str	r3, [r2, #0]
 800cbc6:	e008      	b.n	800cbda <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800cbc8:	693b      	ldr	r3, [r7, #16]
 800cbca:	015a      	lsls	r2, r3, #5
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	4413      	add	r3, r2
 800cbd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbd4:	461a      	mov	r2, r3
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cbda:	693b      	ldr	r3, [r7, #16]
 800cbdc:	015a      	lsls	r2, r3, #5
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	4413      	add	r3, r2
 800cbe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbe6:	461a      	mov	r2, r3
 800cbe8:	2300      	movs	r3, #0
 800cbea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	015a      	lsls	r2, r3, #5
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	4413      	add	r3, r2
 800cbf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbf8:	461a      	mov	r2, r3
 800cbfa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cbfe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cc00:	693b      	ldr	r3, [r7, #16]
 800cc02:	3301      	adds	r3, #1
 800cc04:	613b      	str	r3, [r7, #16]
 800cc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc08:	693a      	ldr	r2, [r7, #16]
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	d3b7      	bcc.n	800cb7e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cc0e:	2300      	movs	r3, #0
 800cc10:	613b      	str	r3, [r7, #16]
 800cc12:	e043      	b.n	800cc9c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cc14:	693b      	ldr	r3, [r7, #16]
 800cc16:	015a      	lsls	r2, r3, #5
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	4413      	add	r3, r2
 800cc1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc2a:	d118      	bne.n	800cc5e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800cc2c:	693b      	ldr	r3, [r7, #16]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d10a      	bne.n	800cc48 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cc32:	693b      	ldr	r3, [r7, #16]
 800cc34:	015a      	lsls	r2, r3, #5
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	4413      	add	r3, r2
 800cc3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc3e:	461a      	mov	r2, r3
 800cc40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cc44:	6013      	str	r3, [r2, #0]
 800cc46:	e013      	b.n	800cc70 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	015a      	lsls	r2, r3, #5
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	4413      	add	r3, r2
 800cc50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc54:	461a      	mov	r2, r3
 800cc56:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cc5a:	6013      	str	r3, [r2, #0]
 800cc5c:	e008      	b.n	800cc70 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	015a      	lsls	r2, r3, #5
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	4413      	add	r3, r2
 800cc66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc6a:	461a      	mov	r2, r3
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cc70:	693b      	ldr	r3, [r7, #16]
 800cc72:	015a      	lsls	r2, r3, #5
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	4413      	add	r3, r2
 800cc78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc7c:	461a      	mov	r2, r3
 800cc7e:	2300      	movs	r3, #0
 800cc80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cc82:	693b      	ldr	r3, [r7, #16]
 800cc84:	015a      	lsls	r2, r3, #5
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	4413      	add	r3, r2
 800cc8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc8e:	461a      	mov	r2, r3
 800cc90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cc94:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cc96:	693b      	ldr	r3, [r7, #16]
 800cc98:	3301      	adds	r3, #1
 800cc9a:	613b      	str	r3, [r7, #16]
 800cc9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc9e:	693a      	ldr	r2, [r7, #16]
 800cca0:	429a      	cmp	r2, r3
 800cca2:	d3b7      	bcc.n	800cc14 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccaa:	691b      	ldr	r3, [r3, #16]
 800ccac:	68fa      	ldr	r2, [r7, #12]
 800ccae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ccb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ccb6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ccc4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ccc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d105      	bne.n	800ccd8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	699b      	ldr	r3, [r3, #24]
 800ccd0:	f043 0210 	orr.w	r2, r3, #16
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	699a      	ldr	r2, [r3, #24]
 800ccdc:	4b0e      	ldr	r3, [pc, #56]	; (800cd18 <USB_DevInit+0x2b4>)
 800ccde:	4313      	orrs	r3, r2
 800cce0:	687a      	ldr	r2, [r7, #4]
 800cce2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d005      	beq.n	800ccf6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	699b      	ldr	r3, [r3, #24]
 800ccee:	f043 0208 	orr.w	r2, r3, #8
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ccf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccf8:	2b01      	cmp	r3, #1
 800ccfa:	d105      	bne.n	800cd08 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	699a      	ldr	r2, [r3, #24]
 800cd00:	4b06      	ldr	r3, [pc, #24]	; (800cd1c <USB_DevInit+0x2b8>)
 800cd02:	4313      	orrs	r3, r2
 800cd04:	687a      	ldr	r2, [r7, #4]
 800cd06:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cd08:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3718      	adds	r7, #24
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cd14:	b004      	add	sp, #16
 800cd16:	4770      	bx	lr
 800cd18:	803c3800 	.word	0x803c3800
 800cd1c:	40000004 	.word	0x40000004

0800cd20 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cd20:	b480      	push	{r7}
 800cd22:	b085      	sub	sp, #20
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	019b      	lsls	r3, r3, #6
 800cd32:	f043 0220 	orr.w	r2, r3, #32
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	3301      	adds	r3, #1
 800cd3e:	60fb      	str	r3, [r7, #12]
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	4a09      	ldr	r2, [pc, #36]	; (800cd68 <USB_FlushTxFifo+0x48>)
 800cd44:	4293      	cmp	r3, r2
 800cd46:	d901      	bls.n	800cd4c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800cd48:	2303      	movs	r3, #3
 800cd4a:	e006      	b.n	800cd5a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	691b      	ldr	r3, [r3, #16]
 800cd50:	f003 0320 	and.w	r3, r3, #32
 800cd54:	2b20      	cmp	r3, #32
 800cd56:	d0f0      	beq.n	800cd3a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800cd58:	2300      	movs	r3, #0
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3714      	adds	r7, #20
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd64:	4770      	bx	lr
 800cd66:	bf00      	nop
 800cd68:	00030d40 	.word	0x00030d40

0800cd6c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cd6c:	b480      	push	{r7}
 800cd6e:	b085      	sub	sp, #20
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800cd74:	2300      	movs	r3, #0
 800cd76:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2210      	movs	r2, #16
 800cd7c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	3301      	adds	r3, #1
 800cd82:	60fb      	str	r3, [r7, #12]
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	4a09      	ldr	r2, [pc, #36]	; (800cdac <USB_FlushRxFifo+0x40>)
 800cd88:	4293      	cmp	r3, r2
 800cd8a:	d901      	bls.n	800cd90 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800cd8c:	2303      	movs	r3, #3
 800cd8e:	e006      	b.n	800cd9e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	691b      	ldr	r3, [r3, #16]
 800cd94:	f003 0310 	and.w	r3, r3, #16
 800cd98:	2b10      	cmp	r3, #16
 800cd9a:	d0f0      	beq.n	800cd7e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800cd9c:	2300      	movs	r3, #0
}
 800cd9e:	4618      	mov	r0, r3
 800cda0:	3714      	adds	r7, #20
 800cda2:	46bd      	mov	sp, r7
 800cda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda8:	4770      	bx	lr
 800cdaa:	bf00      	nop
 800cdac:	00030d40 	.word	0x00030d40

0800cdb0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cdb0:	b480      	push	{r7}
 800cdb2:	b085      	sub	sp, #20
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	460b      	mov	r3, r1
 800cdba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdc6:	681a      	ldr	r2, [r3, #0]
 800cdc8:	78fb      	ldrb	r3, [r7, #3]
 800cdca:	68f9      	ldr	r1, [r7, #12]
 800cdcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cdd0:	4313      	orrs	r3, r2
 800cdd2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cdd4:	2300      	movs	r3, #0
}
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	3714      	adds	r7, #20
 800cdda:	46bd      	mov	sp, r7
 800cddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde0:	4770      	bx	lr

0800cde2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800cde2:	b480      	push	{r7}
 800cde4:	b087      	sub	sp, #28
 800cde6:	af00      	add	r7, sp, #0
 800cde8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800cdee:	693b      	ldr	r3, [r7, #16]
 800cdf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdf4:	689b      	ldr	r3, [r3, #8]
 800cdf6:	f003 0306 	and.w	r3, r3, #6
 800cdfa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d102      	bne.n	800ce08 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ce02:	2300      	movs	r3, #0
 800ce04:	75fb      	strb	r3, [r7, #23]
 800ce06:	e00a      	b.n	800ce1e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	2b02      	cmp	r3, #2
 800ce0c:	d002      	beq.n	800ce14 <USB_GetDevSpeed+0x32>
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	2b06      	cmp	r3, #6
 800ce12:	d102      	bne.n	800ce1a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ce14:	2302      	movs	r3, #2
 800ce16:	75fb      	strb	r3, [r7, #23]
 800ce18:	e001      	b.n	800ce1e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ce1a:	230f      	movs	r3, #15
 800ce1c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ce1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	371c      	adds	r7, #28
 800ce24:	46bd      	mov	sp, r7
 800ce26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2a:	4770      	bx	lr

0800ce2c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ce2c:	b480      	push	{r7}
 800ce2e:	b085      	sub	sp, #20
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
 800ce34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	781b      	ldrb	r3, [r3, #0]
 800ce3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	785b      	ldrb	r3, [r3, #1]
 800ce44:	2b01      	cmp	r3, #1
 800ce46:	d139      	bne.n	800cebc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce4e:	69da      	ldr	r2, [r3, #28]
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	781b      	ldrb	r3, [r3, #0]
 800ce54:	f003 030f 	and.w	r3, r3, #15
 800ce58:	2101      	movs	r1, #1
 800ce5a:	fa01 f303 	lsl.w	r3, r1, r3
 800ce5e:	b29b      	uxth	r3, r3
 800ce60:	68f9      	ldr	r1, [r7, #12]
 800ce62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ce66:	4313      	orrs	r3, r2
 800ce68:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	015a      	lsls	r2, r3, #5
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	4413      	add	r3, r2
 800ce72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d153      	bne.n	800cf28 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ce80:	68bb      	ldr	r3, [r7, #8]
 800ce82:	015a      	lsls	r2, r3, #5
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	4413      	add	r3, r2
 800ce88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce8c:	681a      	ldr	r2, [r3, #0]
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	689b      	ldr	r3, [r3, #8]
 800ce92:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	78db      	ldrb	r3, [r3, #3]
 800ce9a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ce9c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	059b      	lsls	r3, r3, #22
 800cea2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cea4:	431a      	orrs	r2, r3
 800cea6:	68bb      	ldr	r3, [r7, #8]
 800cea8:	0159      	lsls	r1, r3, #5
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	440b      	add	r3, r1
 800ceae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ceb2:	4619      	mov	r1, r3
 800ceb4:	4b20      	ldr	r3, [pc, #128]	; (800cf38 <USB_ActivateEndpoint+0x10c>)
 800ceb6:	4313      	orrs	r3, r2
 800ceb8:	600b      	str	r3, [r1, #0]
 800ceba:	e035      	b.n	800cf28 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cec2:	69da      	ldr	r2, [r3, #28]
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	781b      	ldrb	r3, [r3, #0]
 800cec8:	f003 030f 	and.w	r3, r3, #15
 800cecc:	2101      	movs	r1, #1
 800cece:	fa01 f303 	lsl.w	r3, r1, r3
 800ced2:	041b      	lsls	r3, r3, #16
 800ced4:	68f9      	ldr	r1, [r7, #12]
 800ced6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ceda:	4313      	orrs	r3, r2
 800cedc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cede:	68bb      	ldr	r3, [r7, #8]
 800cee0:	015a      	lsls	r2, r3, #5
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	4413      	add	r3, r2
 800cee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d119      	bne.n	800cf28 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	015a      	lsls	r2, r3, #5
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	4413      	add	r3, r2
 800cefc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf00:	681a      	ldr	r2, [r3, #0]
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	689b      	ldr	r3, [r3, #8]
 800cf06:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	78db      	ldrb	r3, [r3, #3]
 800cf0e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cf10:	430b      	orrs	r3, r1
 800cf12:	431a      	orrs	r2, r3
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	0159      	lsls	r1, r3, #5
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	440b      	add	r3, r1
 800cf1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf20:	4619      	mov	r1, r3
 800cf22:	4b05      	ldr	r3, [pc, #20]	; (800cf38 <USB_ActivateEndpoint+0x10c>)
 800cf24:	4313      	orrs	r3, r2
 800cf26:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800cf28:	2300      	movs	r3, #0
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3714      	adds	r7, #20
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf34:	4770      	bx	lr
 800cf36:	bf00      	nop
 800cf38:	10008000 	.word	0x10008000

0800cf3c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b085      	sub	sp, #20
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
 800cf44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	781b      	ldrb	r3, [r3, #0]
 800cf4e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	785b      	ldrb	r3, [r3, #1]
 800cf54:	2b01      	cmp	r3, #1
 800cf56:	d135      	bne.n	800cfc4 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	781b      	ldrb	r3, [r3, #0]
 800cf64:	f003 030f 	and.w	r3, r3, #15
 800cf68:	2101      	movs	r1, #1
 800cf6a:	fa01 f303 	lsl.w	r3, r1, r3
 800cf6e:	b29b      	uxth	r3, r3
 800cf70:	43db      	mvns	r3, r3
 800cf72:	68f9      	ldr	r1, [r7, #12]
 800cf74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf78:	4013      	ands	r3, r2
 800cf7a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf82:	69da      	ldr	r2, [r3, #28]
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	781b      	ldrb	r3, [r3, #0]
 800cf88:	f003 030f 	and.w	r3, r3, #15
 800cf8c:	2101      	movs	r1, #1
 800cf8e:	fa01 f303 	lsl.w	r3, r1, r3
 800cf92:	b29b      	uxth	r3, r3
 800cf94:	43db      	mvns	r3, r3
 800cf96:	68f9      	ldr	r1, [r7, #12]
 800cf98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf9c:	4013      	ands	r3, r2
 800cf9e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	015a      	lsls	r2, r3, #5
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	4413      	add	r3, r2
 800cfa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfac:	681a      	ldr	r2, [r3, #0]
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	0159      	lsls	r1, r3, #5
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	440b      	add	r3, r1
 800cfb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfba:	4619      	mov	r1, r3
 800cfbc:	4b1f      	ldr	r3, [pc, #124]	; (800d03c <USB_DeactivateEndpoint+0x100>)
 800cfbe:	4013      	ands	r3, r2
 800cfc0:	600b      	str	r3, [r1, #0]
 800cfc2:	e034      	b.n	800d02e <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	781b      	ldrb	r3, [r3, #0]
 800cfd0:	f003 030f 	and.w	r3, r3, #15
 800cfd4:	2101      	movs	r1, #1
 800cfd6:	fa01 f303 	lsl.w	r3, r1, r3
 800cfda:	041b      	lsls	r3, r3, #16
 800cfdc:	43db      	mvns	r3, r3
 800cfde:	68f9      	ldr	r1, [r7, #12]
 800cfe0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cfe4:	4013      	ands	r3, r2
 800cfe6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfee:	69da      	ldr	r2, [r3, #28]
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	781b      	ldrb	r3, [r3, #0]
 800cff4:	f003 030f 	and.w	r3, r3, #15
 800cff8:	2101      	movs	r1, #1
 800cffa:	fa01 f303 	lsl.w	r3, r1, r3
 800cffe:	041b      	lsls	r3, r3, #16
 800d000:	43db      	mvns	r3, r3
 800d002:	68f9      	ldr	r1, [r7, #12]
 800d004:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d008:	4013      	ands	r3, r2
 800d00a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	015a      	lsls	r2, r3, #5
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	4413      	add	r3, r2
 800d014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d018:	681a      	ldr	r2, [r3, #0]
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	0159      	lsls	r1, r3, #5
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	440b      	add	r3, r1
 800d022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d026:	4619      	mov	r1, r3
 800d028:	4b05      	ldr	r3, [pc, #20]	; (800d040 <USB_DeactivateEndpoint+0x104>)
 800d02a:	4013      	ands	r3, r2
 800d02c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d02e:	2300      	movs	r3, #0
}
 800d030:	4618      	mov	r0, r3
 800d032:	3714      	adds	r7, #20
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr
 800d03c:	ec337800 	.word	0xec337800
 800d040:	eff37800 	.word	0xeff37800

0800d044 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b08a      	sub	sp, #40	; 0x28
 800d048:	af02      	add	r7, sp, #8
 800d04a:	60f8      	str	r0, [r7, #12]
 800d04c:	60b9      	str	r1, [r7, #8]
 800d04e:	4613      	mov	r3, r2
 800d050:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	781b      	ldrb	r3, [r3, #0]
 800d05a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	785b      	ldrb	r3, [r3, #1]
 800d060:	2b01      	cmp	r3, #1
 800d062:	f040 8163 	bne.w	800d32c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	695b      	ldr	r3, [r3, #20]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d132      	bne.n	800d0d4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d06e:	69bb      	ldr	r3, [r7, #24]
 800d070:	015a      	lsls	r2, r3, #5
 800d072:	69fb      	ldr	r3, [r7, #28]
 800d074:	4413      	add	r3, r2
 800d076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d07a:	691a      	ldr	r2, [r3, #16]
 800d07c:	69bb      	ldr	r3, [r7, #24]
 800d07e:	0159      	lsls	r1, r3, #5
 800d080:	69fb      	ldr	r3, [r7, #28]
 800d082:	440b      	add	r3, r1
 800d084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d088:	4619      	mov	r1, r3
 800d08a:	4ba5      	ldr	r3, [pc, #660]	; (800d320 <USB_EPStartXfer+0x2dc>)
 800d08c:	4013      	ands	r3, r2
 800d08e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d090:	69bb      	ldr	r3, [r7, #24]
 800d092:	015a      	lsls	r2, r3, #5
 800d094:	69fb      	ldr	r3, [r7, #28]
 800d096:	4413      	add	r3, r2
 800d098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d09c:	691b      	ldr	r3, [r3, #16]
 800d09e:	69ba      	ldr	r2, [r7, #24]
 800d0a0:	0151      	lsls	r1, r2, #5
 800d0a2:	69fa      	ldr	r2, [r7, #28]
 800d0a4:	440a      	add	r2, r1
 800d0a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d0ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d0b0:	69bb      	ldr	r3, [r7, #24]
 800d0b2:	015a      	lsls	r2, r3, #5
 800d0b4:	69fb      	ldr	r3, [r7, #28]
 800d0b6:	4413      	add	r3, r2
 800d0b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0bc:	691a      	ldr	r2, [r3, #16]
 800d0be:	69bb      	ldr	r3, [r7, #24]
 800d0c0:	0159      	lsls	r1, r3, #5
 800d0c2:	69fb      	ldr	r3, [r7, #28]
 800d0c4:	440b      	add	r3, r1
 800d0c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0ca:	4619      	mov	r1, r3
 800d0cc:	4b95      	ldr	r3, [pc, #596]	; (800d324 <USB_EPStartXfer+0x2e0>)
 800d0ce:	4013      	ands	r3, r2
 800d0d0:	610b      	str	r3, [r1, #16]
 800d0d2:	e074      	b.n	800d1be <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d0d4:	69bb      	ldr	r3, [r7, #24]
 800d0d6:	015a      	lsls	r2, r3, #5
 800d0d8:	69fb      	ldr	r3, [r7, #28]
 800d0da:	4413      	add	r3, r2
 800d0dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0e0:	691a      	ldr	r2, [r3, #16]
 800d0e2:	69bb      	ldr	r3, [r7, #24]
 800d0e4:	0159      	lsls	r1, r3, #5
 800d0e6:	69fb      	ldr	r3, [r7, #28]
 800d0e8:	440b      	add	r3, r1
 800d0ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0ee:	4619      	mov	r1, r3
 800d0f0:	4b8c      	ldr	r3, [pc, #560]	; (800d324 <USB_EPStartXfer+0x2e0>)
 800d0f2:	4013      	ands	r3, r2
 800d0f4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d0f6:	69bb      	ldr	r3, [r7, #24]
 800d0f8:	015a      	lsls	r2, r3, #5
 800d0fa:	69fb      	ldr	r3, [r7, #28]
 800d0fc:	4413      	add	r3, r2
 800d0fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d102:	691a      	ldr	r2, [r3, #16]
 800d104:	69bb      	ldr	r3, [r7, #24]
 800d106:	0159      	lsls	r1, r3, #5
 800d108:	69fb      	ldr	r3, [r7, #28]
 800d10a:	440b      	add	r3, r1
 800d10c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d110:	4619      	mov	r1, r3
 800d112:	4b83      	ldr	r3, [pc, #524]	; (800d320 <USB_EPStartXfer+0x2dc>)
 800d114:	4013      	ands	r3, r2
 800d116:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d118:	69bb      	ldr	r3, [r7, #24]
 800d11a:	015a      	lsls	r2, r3, #5
 800d11c:	69fb      	ldr	r3, [r7, #28]
 800d11e:	4413      	add	r3, r2
 800d120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d124:	691a      	ldr	r2, [r3, #16]
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	6959      	ldr	r1, [r3, #20]
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	689b      	ldr	r3, [r3, #8]
 800d12e:	440b      	add	r3, r1
 800d130:	1e59      	subs	r1, r3, #1
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	689b      	ldr	r3, [r3, #8]
 800d136:	fbb1 f3f3 	udiv	r3, r1, r3
 800d13a:	04d9      	lsls	r1, r3, #19
 800d13c:	4b7a      	ldr	r3, [pc, #488]	; (800d328 <USB_EPStartXfer+0x2e4>)
 800d13e:	400b      	ands	r3, r1
 800d140:	69b9      	ldr	r1, [r7, #24]
 800d142:	0148      	lsls	r0, r1, #5
 800d144:	69f9      	ldr	r1, [r7, #28]
 800d146:	4401      	add	r1, r0
 800d148:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d14c:	4313      	orrs	r3, r2
 800d14e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d150:	69bb      	ldr	r3, [r7, #24]
 800d152:	015a      	lsls	r2, r3, #5
 800d154:	69fb      	ldr	r3, [r7, #28]
 800d156:	4413      	add	r3, r2
 800d158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d15c:	691a      	ldr	r2, [r3, #16]
 800d15e:	68bb      	ldr	r3, [r7, #8]
 800d160:	695b      	ldr	r3, [r3, #20]
 800d162:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d166:	69b9      	ldr	r1, [r7, #24]
 800d168:	0148      	lsls	r0, r1, #5
 800d16a:	69f9      	ldr	r1, [r7, #28]
 800d16c:	4401      	add	r1, r0
 800d16e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d172:	4313      	orrs	r3, r2
 800d174:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	78db      	ldrb	r3, [r3, #3]
 800d17a:	2b01      	cmp	r3, #1
 800d17c:	d11f      	bne.n	800d1be <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d17e:	69bb      	ldr	r3, [r7, #24]
 800d180:	015a      	lsls	r2, r3, #5
 800d182:	69fb      	ldr	r3, [r7, #28]
 800d184:	4413      	add	r3, r2
 800d186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d18a:	691b      	ldr	r3, [r3, #16]
 800d18c:	69ba      	ldr	r2, [r7, #24]
 800d18e:	0151      	lsls	r1, r2, #5
 800d190:	69fa      	ldr	r2, [r7, #28]
 800d192:	440a      	add	r2, r1
 800d194:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d198:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d19c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d19e:	69bb      	ldr	r3, [r7, #24]
 800d1a0:	015a      	lsls	r2, r3, #5
 800d1a2:	69fb      	ldr	r3, [r7, #28]
 800d1a4:	4413      	add	r3, r2
 800d1a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1aa:	691b      	ldr	r3, [r3, #16]
 800d1ac:	69ba      	ldr	r2, [r7, #24]
 800d1ae:	0151      	lsls	r1, r2, #5
 800d1b0:	69fa      	ldr	r2, [r7, #28]
 800d1b2:	440a      	add	r2, r1
 800d1b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d1bc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800d1be:	79fb      	ldrb	r3, [r7, #7]
 800d1c0:	2b01      	cmp	r3, #1
 800d1c2:	d14b      	bne.n	800d25c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	691b      	ldr	r3, [r3, #16]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d009      	beq.n	800d1e0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d1cc:	69bb      	ldr	r3, [r7, #24]
 800d1ce:	015a      	lsls	r2, r3, #5
 800d1d0:	69fb      	ldr	r3, [r7, #28]
 800d1d2:	4413      	add	r3, r2
 800d1d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1d8:	461a      	mov	r2, r3
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	691b      	ldr	r3, [r3, #16]
 800d1de:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d1e0:	68bb      	ldr	r3, [r7, #8]
 800d1e2:	78db      	ldrb	r3, [r3, #3]
 800d1e4:	2b01      	cmp	r3, #1
 800d1e6:	d128      	bne.n	800d23a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d1e8:	69fb      	ldr	r3, [r7, #28]
 800d1ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1ee:	689b      	ldr	r3, [r3, #8]
 800d1f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d110      	bne.n	800d21a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d1f8:	69bb      	ldr	r3, [r7, #24]
 800d1fa:	015a      	lsls	r2, r3, #5
 800d1fc:	69fb      	ldr	r3, [r7, #28]
 800d1fe:	4413      	add	r3, r2
 800d200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	69ba      	ldr	r2, [r7, #24]
 800d208:	0151      	lsls	r1, r2, #5
 800d20a:	69fa      	ldr	r2, [r7, #28]
 800d20c:	440a      	add	r2, r1
 800d20e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d212:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d216:	6013      	str	r3, [r2, #0]
 800d218:	e00f      	b.n	800d23a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d21a:	69bb      	ldr	r3, [r7, #24]
 800d21c:	015a      	lsls	r2, r3, #5
 800d21e:	69fb      	ldr	r3, [r7, #28]
 800d220:	4413      	add	r3, r2
 800d222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	69ba      	ldr	r2, [r7, #24]
 800d22a:	0151      	lsls	r1, r2, #5
 800d22c:	69fa      	ldr	r2, [r7, #28]
 800d22e:	440a      	add	r2, r1
 800d230:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d238:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d23a:	69bb      	ldr	r3, [r7, #24]
 800d23c:	015a      	lsls	r2, r3, #5
 800d23e:	69fb      	ldr	r3, [r7, #28]
 800d240:	4413      	add	r3, r2
 800d242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	69ba      	ldr	r2, [r7, #24]
 800d24a:	0151      	lsls	r1, r2, #5
 800d24c:	69fa      	ldr	r2, [r7, #28]
 800d24e:	440a      	add	r2, r1
 800d250:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d254:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d258:	6013      	str	r3, [r2, #0]
 800d25a:	e133      	b.n	800d4c4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d25c:	69bb      	ldr	r3, [r7, #24]
 800d25e:	015a      	lsls	r2, r3, #5
 800d260:	69fb      	ldr	r3, [r7, #28]
 800d262:	4413      	add	r3, r2
 800d264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	69ba      	ldr	r2, [r7, #24]
 800d26c:	0151      	lsls	r1, r2, #5
 800d26e:	69fa      	ldr	r2, [r7, #28]
 800d270:	440a      	add	r2, r1
 800d272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d276:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d27a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	78db      	ldrb	r3, [r3, #3]
 800d280:	2b01      	cmp	r3, #1
 800d282:	d015      	beq.n	800d2b0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	695b      	ldr	r3, [r3, #20]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	f000 811b 	beq.w	800d4c4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d28e:	69fb      	ldr	r3, [r7, #28]
 800d290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d294:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	781b      	ldrb	r3, [r3, #0]
 800d29a:	f003 030f 	and.w	r3, r3, #15
 800d29e:	2101      	movs	r1, #1
 800d2a0:	fa01 f303 	lsl.w	r3, r1, r3
 800d2a4:	69f9      	ldr	r1, [r7, #28]
 800d2a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d2aa:	4313      	orrs	r3, r2
 800d2ac:	634b      	str	r3, [r1, #52]	; 0x34
 800d2ae:	e109      	b.n	800d4c4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d2b0:	69fb      	ldr	r3, [r7, #28]
 800d2b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2b6:	689b      	ldr	r3, [r3, #8]
 800d2b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d110      	bne.n	800d2e2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d2c0:	69bb      	ldr	r3, [r7, #24]
 800d2c2:	015a      	lsls	r2, r3, #5
 800d2c4:	69fb      	ldr	r3, [r7, #28]
 800d2c6:	4413      	add	r3, r2
 800d2c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	69ba      	ldr	r2, [r7, #24]
 800d2d0:	0151      	lsls	r1, r2, #5
 800d2d2:	69fa      	ldr	r2, [r7, #28]
 800d2d4:	440a      	add	r2, r1
 800d2d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d2de:	6013      	str	r3, [r2, #0]
 800d2e0:	e00f      	b.n	800d302 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d2e2:	69bb      	ldr	r3, [r7, #24]
 800d2e4:	015a      	lsls	r2, r3, #5
 800d2e6:	69fb      	ldr	r3, [r7, #28]
 800d2e8:	4413      	add	r3, r2
 800d2ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	69ba      	ldr	r2, [r7, #24]
 800d2f2:	0151      	lsls	r1, r2, #5
 800d2f4:	69fa      	ldr	r2, [r7, #28]
 800d2f6:	440a      	add	r2, r1
 800d2f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d300:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	68d9      	ldr	r1, [r3, #12]
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	781a      	ldrb	r2, [r3, #0]
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	695b      	ldr	r3, [r3, #20]
 800d30e:	b298      	uxth	r0, r3
 800d310:	79fb      	ldrb	r3, [r7, #7]
 800d312:	9300      	str	r3, [sp, #0]
 800d314:	4603      	mov	r3, r0
 800d316:	68f8      	ldr	r0, [r7, #12]
 800d318:	f000 fa38 	bl	800d78c <USB_WritePacket>
 800d31c:	e0d2      	b.n	800d4c4 <USB_EPStartXfer+0x480>
 800d31e:	bf00      	nop
 800d320:	e007ffff 	.word	0xe007ffff
 800d324:	fff80000 	.word	0xfff80000
 800d328:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d32c:	69bb      	ldr	r3, [r7, #24]
 800d32e:	015a      	lsls	r2, r3, #5
 800d330:	69fb      	ldr	r3, [r7, #28]
 800d332:	4413      	add	r3, r2
 800d334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d338:	691a      	ldr	r2, [r3, #16]
 800d33a:	69bb      	ldr	r3, [r7, #24]
 800d33c:	0159      	lsls	r1, r3, #5
 800d33e:	69fb      	ldr	r3, [r7, #28]
 800d340:	440b      	add	r3, r1
 800d342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d346:	4619      	mov	r1, r3
 800d348:	4b61      	ldr	r3, [pc, #388]	; (800d4d0 <USB_EPStartXfer+0x48c>)
 800d34a:	4013      	ands	r3, r2
 800d34c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d34e:	69bb      	ldr	r3, [r7, #24]
 800d350:	015a      	lsls	r2, r3, #5
 800d352:	69fb      	ldr	r3, [r7, #28]
 800d354:	4413      	add	r3, r2
 800d356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d35a:	691a      	ldr	r2, [r3, #16]
 800d35c:	69bb      	ldr	r3, [r7, #24]
 800d35e:	0159      	lsls	r1, r3, #5
 800d360:	69fb      	ldr	r3, [r7, #28]
 800d362:	440b      	add	r3, r1
 800d364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d368:	4619      	mov	r1, r3
 800d36a:	4b5a      	ldr	r3, [pc, #360]	; (800d4d4 <USB_EPStartXfer+0x490>)
 800d36c:	4013      	ands	r3, r2
 800d36e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800d370:	68bb      	ldr	r3, [r7, #8]
 800d372:	695b      	ldr	r3, [r3, #20]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d123      	bne.n	800d3c0 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d378:	69bb      	ldr	r3, [r7, #24]
 800d37a:	015a      	lsls	r2, r3, #5
 800d37c:	69fb      	ldr	r3, [r7, #28]
 800d37e:	4413      	add	r3, r2
 800d380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d384:	691a      	ldr	r2, [r3, #16]
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	689b      	ldr	r3, [r3, #8]
 800d38a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d38e:	69b9      	ldr	r1, [r7, #24]
 800d390:	0148      	lsls	r0, r1, #5
 800d392:	69f9      	ldr	r1, [r7, #28]
 800d394:	4401      	add	r1, r0
 800d396:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d39a:	4313      	orrs	r3, r2
 800d39c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d39e:	69bb      	ldr	r3, [r7, #24]
 800d3a0:	015a      	lsls	r2, r3, #5
 800d3a2:	69fb      	ldr	r3, [r7, #28]
 800d3a4:	4413      	add	r3, r2
 800d3a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3aa:	691b      	ldr	r3, [r3, #16]
 800d3ac:	69ba      	ldr	r2, [r7, #24]
 800d3ae:	0151      	lsls	r1, r2, #5
 800d3b0:	69fa      	ldr	r2, [r7, #28]
 800d3b2:	440a      	add	r2, r1
 800d3b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d3b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d3bc:	6113      	str	r3, [r2, #16]
 800d3be:	e033      	b.n	800d428 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d3c0:	68bb      	ldr	r3, [r7, #8]
 800d3c2:	695a      	ldr	r2, [r3, #20]
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	689b      	ldr	r3, [r3, #8]
 800d3c8:	4413      	add	r3, r2
 800d3ca:	1e5a      	subs	r2, r3, #1
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	689b      	ldr	r3, [r3, #8]
 800d3d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3d4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d3d6:	69bb      	ldr	r3, [r7, #24]
 800d3d8:	015a      	lsls	r2, r3, #5
 800d3da:	69fb      	ldr	r3, [r7, #28]
 800d3dc:	4413      	add	r3, r2
 800d3de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3e2:	691a      	ldr	r2, [r3, #16]
 800d3e4:	8afb      	ldrh	r3, [r7, #22]
 800d3e6:	04d9      	lsls	r1, r3, #19
 800d3e8:	4b3b      	ldr	r3, [pc, #236]	; (800d4d8 <USB_EPStartXfer+0x494>)
 800d3ea:	400b      	ands	r3, r1
 800d3ec:	69b9      	ldr	r1, [r7, #24]
 800d3ee:	0148      	lsls	r0, r1, #5
 800d3f0:	69f9      	ldr	r1, [r7, #28]
 800d3f2:	4401      	add	r1, r0
 800d3f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d3f8:	4313      	orrs	r3, r2
 800d3fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d3fc:	69bb      	ldr	r3, [r7, #24]
 800d3fe:	015a      	lsls	r2, r3, #5
 800d400:	69fb      	ldr	r3, [r7, #28]
 800d402:	4413      	add	r3, r2
 800d404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d408:	691a      	ldr	r2, [r3, #16]
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	689b      	ldr	r3, [r3, #8]
 800d40e:	8af9      	ldrh	r1, [r7, #22]
 800d410:	fb01 f303 	mul.w	r3, r1, r3
 800d414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d418:	69b9      	ldr	r1, [r7, #24]
 800d41a:	0148      	lsls	r0, r1, #5
 800d41c:	69f9      	ldr	r1, [r7, #28]
 800d41e:	4401      	add	r1, r0
 800d420:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d424:	4313      	orrs	r3, r2
 800d426:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d428:	79fb      	ldrb	r3, [r7, #7]
 800d42a:	2b01      	cmp	r3, #1
 800d42c:	d10d      	bne.n	800d44a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	68db      	ldr	r3, [r3, #12]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d009      	beq.n	800d44a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	68d9      	ldr	r1, [r3, #12]
 800d43a:	69bb      	ldr	r3, [r7, #24]
 800d43c:	015a      	lsls	r2, r3, #5
 800d43e:	69fb      	ldr	r3, [r7, #28]
 800d440:	4413      	add	r3, r2
 800d442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d446:	460a      	mov	r2, r1
 800d448:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	78db      	ldrb	r3, [r3, #3]
 800d44e:	2b01      	cmp	r3, #1
 800d450:	d128      	bne.n	800d4a4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d452:	69fb      	ldr	r3, [r7, #28]
 800d454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d458:	689b      	ldr	r3, [r3, #8]
 800d45a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d110      	bne.n	800d484 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d462:	69bb      	ldr	r3, [r7, #24]
 800d464:	015a      	lsls	r2, r3, #5
 800d466:	69fb      	ldr	r3, [r7, #28]
 800d468:	4413      	add	r3, r2
 800d46a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	69ba      	ldr	r2, [r7, #24]
 800d472:	0151      	lsls	r1, r2, #5
 800d474:	69fa      	ldr	r2, [r7, #28]
 800d476:	440a      	add	r2, r1
 800d478:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d47c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d480:	6013      	str	r3, [r2, #0]
 800d482:	e00f      	b.n	800d4a4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d484:	69bb      	ldr	r3, [r7, #24]
 800d486:	015a      	lsls	r2, r3, #5
 800d488:	69fb      	ldr	r3, [r7, #28]
 800d48a:	4413      	add	r3, r2
 800d48c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	69ba      	ldr	r2, [r7, #24]
 800d494:	0151      	lsls	r1, r2, #5
 800d496:	69fa      	ldr	r2, [r7, #28]
 800d498:	440a      	add	r2, r1
 800d49a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d49e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d4a2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d4a4:	69bb      	ldr	r3, [r7, #24]
 800d4a6:	015a      	lsls	r2, r3, #5
 800d4a8:	69fb      	ldr	r3, [r7, #28]
 800d4aa:	4413      	add	r3, r2
 800d4ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	69ba      	ldr	r2, [r7, #24]
 800d4b4:	0151      	lsls	r1, r2, #5
 800d4b6:	69fa      	ldr	r2, [r7, #28]
 800d4b8:	440a      	add	r2, r1
 800d4ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d4be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d4c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d4c4:	2300      	movs	r3, #0
}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	3720      	adds	r7, #32
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}
 800d4ce:	bf00      	nop
 800d4d0:	fff80000 	.word	0xfff80000
 800d4d4:	e007ffff 	.word	0xe007ffff
 800d4d8:	1ff80000 	.word	0x1ff80000

0800d4dc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d4dc:	b480      	push	{r7}
 800d4de:	b087      	sub	sp, #28
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	60f8      	str	r0, [r7, #12]
 800d4e4:	60b9      	str	r1, [r7, #8]
 800d4e6:	4613      	mov	r3, r2
 800d4e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	781b      	ldrb	r3, [r3, #0]
 800d4f2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	785b      	ldrb	r3, [r3, #1]
 800d4f8:	2b01      	cmp	r3, #1
 800d4fa:	f040 80cd 	bne.w	800d698 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	695b      	ldr	r3, [r3, #20]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d132      	bne.n	800d56c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d506:	693b      	ldr	r3, [r7, #16]
 800d508:	015a      	lsls	r2, r3, #5
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	4413      	add	r3, r2
 800d50e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d512:	691a      	ldr	r2, [r3, #16]
 800d514:	693b      	ldr	r3, [r7, #16]
 800d516:	0159      	lsls	r1, r3, #5
 800d518:	697b      	ldr	r3, [r7, #20]
 800d51a:	440b      	add	r3, r1
 800d51c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d520:	4619      	mov	r1, r3
 800d522:	4b98      	ldr	r3, [pc, #608]	; (800d784 <USB_EP0StartXfer+0x2a8>)
 800d524:	4013      	ands	r3, r2
 800d526:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d528:	693b      	ldr	r3, [r7, #16]
 800d52a:	015a      	lsls	r2, r3, #5
 800d52c:	697b      	ldr	r3, [r7, #20]
 800d52e:	4413      	add	r3, r2
 800d530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d534:	691b      	ldr	r3, [r3, #16]
 800d536:	693a      	ldr	r2, [r7, #16]
 800d538:	0151      	lsls	r1, r2, #5
 800d53a:	697a      	ldr	r2, [r7, #20]
 800d53c:	440a      	add	r2, r1
 800d53e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d542:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d546:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d548:	693b      	ldr	r3, [r7, #16]
 800d54a:	015a      	lsls	r2, r3, #5
 800d54c:	697b      	ldr	r3, [r7, #20]
 800d54e:	4413      	add	r3, r2
 800d550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d554:	691a      	ldr	r2, [r3, #16]
 800d556:	693b      	ldr	r3, [r7, #16]
 800d558:	0159      	lsls	r1, r3, #5
 800d55a:	697b      	ldr	r3, [r7, #20]
 800d55c:	440b      	add	r3, r1
 800d55e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d562:	4619      	mov	r1, r3
 800d564:	4b88      	ldr	r3, [pc, #544]	; (800d788 <USB_EP0StartXfer+0x2ac>)
 800d566:	4013      	ands	r3, r2
 800d568:	610b      	str	r3, [r1, #16]
 800d56a:	e04e      	b.n	800d60a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d56c:	693b      	ldr	r3, [r7, #16]
 800d56e:	015a      	lsls	r2, r3, #5
 800d570:	697b      	ldr	r3, [r7, #20]
 800d572:	4413      	add	r3, r2
 800d574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d578:	691a      	ldr	r2, [r3, #16]
 800d57a:	693b      	ldr	r3, [r7, #16]
 800d57c:	0159      	lsls	r1, r3, #5
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	440b      	add	r3, r1
 800d582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d586:	4619      	mov	r1, r3
 800d588:	4b7f      	ldr	r3, [pc, #508]	; (800d788 <USB_EP0StartXfer+0x2ac>)
 800d58a:	4013      	ands	r3, r2
 800d58c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d58e:	693b      	ldr	r3, [r7, #16]
 800d590:	015a      	lsls	r2, r3, #5
 800d592:	697b      	ldr	r3, [r7, #20]
 800d594:	4413      	add	r3, r2
 800d596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d59a:	691a      	ldr	r2, [r3, #16]
 800d59c:	693b      	ldr	r3, [r7, #16]
 800d59e:	0159      	lsls	r1, r3, #5
 800d5a0:	697b      	ldr	r3, [r7, #20]
 800d5a2:	440b      	add	r3, r1
 800d5a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5a8:	4619      	mov	r1, r3
 800d5aa:	4b76      	ldr	r3, [pc, #472]	; (800d784 <USB_EP0StartXfer+0x2a8>)
 800d5ac:	4013      	ands	r3, r2
 800d5ae:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	695a      	ldr	r2, [r3, #20]
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	689b      	ldr	r3, [r3, #8]
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	d903      	bls.n	800d5c4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	689a      	ldr	r2, [r3, #8]
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d5c4:	693b      	ldr	r3, [r7, #16]
 800d5c6:	015a      	lsls	r2, r3, #5
 800d5c8:	697b      	ldr	r3, [r7, #20]
 800d5ca:	4413      	add	r3, r2
 800d5cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5d0:	691b      	ldr	r3, [r3, #16]
 800d5d2:	693a      	ldr	r2, [r7, #16]
 800d5d4:	0151      	lsls	r1, r2, #5
 800d5d6:	697a      	ldr	r2, [r7, #20]
 800d5d8:	440a      	add	r2, r1
 800d5da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d5e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d5e4:	693b      	ldr	r3, [r7, #16]
 800d5e6:	015a      	lsls	r2, r3, #5
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	4413      	add	r3, r2
 800d5ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5f0:	691a      	ldr	r2, [r3, #16]
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	695b      	ldr	r3, [r3, #20]
 800d5f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d5fa:	6939      	ldr	r1, [r7, #16]
 800d5fc:	0148      	lsls	r0, r1, #5
 800d5fe:	6979      	ldr	r1, [r7, #20]
 800d600:	4401      	add	r1, r0
 800d602:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d606:	4313      	orrs	r3, r2
 800d608:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d60a:	79fb      	ldrb	r3, [r7, #7]
 800d60c:	2b01      	cmp	r3, #1
 800d60e:	d11e      	bne.n	800d64e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	691b      	ldr	r3, [r3, #16]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d009      	beq.n	800d62c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d618:	693b      	ldr	r3, [r7, #16]
 800d61a:	015a      	lsls	r2, r3, #5
 800d61c:	697b      	ldr	r3, [r7, #20]
 800d61e:	4413      	add	r3, r2
 800d620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d624:	461a      	mov	r2, r3
 800d626:	68bb      	ldr	r3, [r7, #8]
 800d628:	691b      	ldr	r3, [r3, #16]
 800d62a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d62c:	693b      	ldr	r3, [r7, #16]
 800d62e:	015a      	lsls	r2, r3, #5
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	4413      	add	r3, r2
 800d634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	693a      	ldr	r2, [r7, #16]
 800d63c:	0151      	lsls	r1, r2, #5
 800d63e:	697a      	ldr	r2, [r7, #20]
 800d640:	440a      	add	r2, r1
 800d642:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d646:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d64a:	6013      	str	r3, [r2, #0]
 800d64c:	e092      	b.n	800d774 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d64e:	693b      	ldr	r3, [r7, #16]
 800d650:	015a      	lsls	r2, r3, #5
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	4413      	add	r3, r2
 800d656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	693a      	ldr	r2, [r7, #16]
 800d65e:	0151      	lsls	r1, r2, #5
 800d660:	697a      	ldr	r2, [r7, #20]
 800d662:	440a      	add	r2, r1
 800d664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d668:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d66c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	695b      	ldr	r3, [r3, #20]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d07e      	beq.n	800d774 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d67c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	781b      	ldrb	r3, [r3, #0]
 800d682:	f003 030f 	and.w	r3, r3, #15
 800d686:	2101      	movs	r1, #1
 800d688:	fa01 f303 	lsl.w	r3, r1, r3
 800d68c:	6979      	ldr	r1, [r7, #20]
 800d68e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d692:	4313      	orrs	r3, r2
 800d694:	634b      	str	r3, [r1, #52]	; 0x34
 800d696:	e06d      	b.n	800d774 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d698:	693b      	ldr	r3, [r7, #16]
 800d69a:	015a      	lsls	r2, r3, #5
 800d69c:	697b      	ldr	r3, [r7, #20]
 800d69e:	4413      	add	r3, r2
 800d6a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6a4:	691a      	ldr	r2, [r3, #16]
 800d6a6:	693b      	ldr	r3, [r7, #16]
 800d6a8:	0159      	lsls	r1, r3, #5
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	440b      	add	r3, r1
 800d6ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6b2:	4619      	mov	r1, r3
 800d6b4:	4b34      	ldr	r3, [pc, #208]	; (800d788 <USB_EP0StartXfer+0x2ac>)
 800d6b6:	4013      	ands	r3, r2
 800d6b8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d6ba:	693b      	ldr	r3, [r7, #16]
 800d6bc:	015a      	lsls	r2, r3, #5
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	4413      	add	r3, r2
 800d6c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6c6:	691a      	ldr	r2, [r3, #16]
 800d6c8:	693b      	ldr	r3, [r7, #16]
 800d6ca:	0159      	lsls	r1, r3, #5
 800d6cc:	697b      	ldr	r3, [r7, #20]
 800d6ce:	440b      	add	r3, r1
 800d6d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6d4:	4619      	mov	r1, r3
 800d6d6:	4b2b      	ldr	r3, [pc, #172]	; (800d784 <USB_EP0StartXfer+0x2a8>)
 800d6d8:	4013      	ands	r3, r2
 800d6da:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	695b      	ldr	r3, [r3, #20]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d003      	beq.n	800d6ec <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800d6e4:	68bb      	ldr	r3, [r7, #8]
 800d6e6:	689a      	ldr	r2, [r3, #8]
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d6ec:	693b      	ldr	r3, [r7, #16]
 800d6ee:	015a      	lsls	r2, r3, #5
 800d6f0:	697b      	ldr	r3, [r7, #20]
 800d6f2:	4413      	add	r3, r2
 800d6f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6f8:	691b      	ldr	r3, [r3, #16]
 800d6fa:	693a      	ldr	r2, [r7, #16]
 800d6fc:	0151      	lsls	r1, r2, #5
 800d6fe:	697a      	ldr	r2, [r7, #20]
 800d700:	440a      	add	r2, r1
 800d702:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d706:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d70a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d70c:	693b      	ldr	r3, [r7, #16]
 800d70e:	015a      	lsls	r2, r3, #5
 800d710:	697b      	ldr	r3, [r7, #20]
 800d712:	4413      	add	r3, r2
 800d714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d718:	691a      	ldr	r2, [r3, #16]
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	689b      	ldr	r3, [r3, #8]
 800d71e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d722:	6939      	ldr	r1, [r7, #16]
 800d724:	0148      	lsls	r0, r1, #5
 800d726:	6979      	ldr	r1, [r7, #20]
 800d728:	4401      	add	r1, r0
 800d72a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d72e:	4313      	orrs	r3, r2
 800d730:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800d732:	79fb      	ldrb	r3, [r7, #7]
 800d734:	2b01      	cmp	r3, #1
 800d736:	d10d      	bne.n	800d754 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	68db      	ldr	r3, [r3, #12]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d009      	beq.n	800d754 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d740:	68bb      	ldr	r3, [r7, #8]
 800d742:	68d9      	ldr	r1, [r3, #12]
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	015a      	lsls	r2, r3, #5
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	4413      	add	r3, r2
 800d74c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d750:	460a      	mov	r2, r1
 800d752:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d754:	693b      	ldr	r3, [r7, #16]
 800d756:	015a      	lsls	r2, r3, #5
 800d758:	697b      	ldr	r3, [r7, #20]
 800d75a:	4413      	add	r3, r2
 800d75c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	693a      	ldr	r2, [r7, #16]
 800d764:	0151      	lsls	r1, r2, #5
 800d766:	697a      	ldr	r2, [r7, #20]
 800d768:	440a      	add	r2, r1
 800d76a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d76e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d772:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d774:	2300      	movs	r3, #0
}
 800d776:	4618      	mov	r0, r3
 800d778:	371c      	adds	r7, #28
 800d77a:	46bd      	mov	sp, r7
 800d77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d780:	4770      	bx	lr
 800d782:	bf00      	nop
 800d784:	e007ffff 	.word	0xe007ffff
 800d788:	fff80000 	.word	0xfff80000

0800d78c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d78c:	b480      	push	{r7}
 800d78e:	b089      	sub	sp, #36	; 0x24
 800d790:	af00      	add	r7, sp, #0
 800d792:	60f8      	str	r0, [r7, #12]
 800d794:	60b9      	str	r1, [r7, #8]
 800d796:	4611      	mov	r1, r2
 800d798:	461a      	mov	r2, r3
 800d79a:	460b      	mov	r3, r1
 800d79c:	71fb      	strb	r3, [r7, #7]
 800d79e:	4613      	mov	r3, r2
 800d7a0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800d7aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d11a      	bne.n	800d7e8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d7b2:	88bb      	ldrh	r3, [r7, #4]
 800d7b4:	3303      	adds	r3, #3
 800d7b6:	089b      	lsrs	r3, r3, #2
 800d7b8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	61bb      	str	r3, [r7, #24]
 800d7be:	e00f      	b.n	800d7e0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d7c0:	79fb      	ldrb	r3, [r7, #7]
 800d7c2:	031a      	lsls	r2, r3, #12
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	4413      	add	r3, r2
 800d7c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7cc:	461a      	mov	r2, r3
 800d7ce:	69fb      	ldr	r3, [r7, #28]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d7d4:	69fb      	ldr	r3, [r7, #28]
 800d7d6:	3304      	adds	r3, #4
 800d7d8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d7da:	69bb      	ldr	r3, [r7, #24]
 800d7dc:	3301      	adds	r3, #1
 800d7de:	61bb      	str	r3, [r7, #24]
 800d7e0:	69ba      	ldr	r2, [r7, #24]
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	d3eb      	bcc.n	800d7c0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d7e8:	2300      	movs	r3, #0
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	3724      	adds	r7, #36	; 0x24
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f4:	4770      	bx	lr

0800d7f6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d7f6:	b480      	push	{r7}
 800d7f8:	b089      	sub	sp, #36	; 0x24
 800d7fa:	af00      	add	r7, sp, #0
 800d7fc:	60f8      	str	r0, [r7, #12]
 800d7fe:	60b9      	str	r1, [r7, #8]
 800d800:	4613      	mov	r3, r2
 800d802:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d80c:	88fb      	ldrh	r3, [r7, #6]
 800d80e:	3303      	adds	r3, #3
 800d810:	089b      	lsrs	r3, r3, #2
 800d812:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800d814:	2300      	movs	r3, #0
 800d816:	61bb      	str	r3, [r7, #24]
 800d818:	e00b      	b.n	800d832 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d820:	681a      	ldr	r2, [r3, #0]
 800d822:	69fb      	ldr	r3, [r7, #28]
 800d824:	601a      	str	r2, [r3, #0]
    pDest++;
 800d826:	69fb      	ldr	r3, [r7, #28]
 800d828:	3304      	adds	r3, #4
 800d82a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d82c:	69bb      	ldr	r3, [r7, #24]
 800d82e:	3301      	adds	r3, #1
 800d830:	61bb      	str	r3, [r7, #24]
 800d832:	69ba      	ldr	r2, [r7, #24]
 800d834:	693b      	ldr	r3, [r7, #16]
 800d836:	429a      	cmp	r2, r3
 800d838:	d3ef      	bcc.n	800d81a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800d83a:	69fb      	ldr	r3, [r7, #28]
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	3724      	adds	r7, #36	; 0x24
 800d840:	46bd      	mov	sp, r7
 800d842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d846:	4770      	bx	lr

0800d848 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d848:	b480      	push	{r7}
 800d84a:	b085      	sub	sp, #20
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	781b      	ldrb	r3, [r3, #0]
 800d85a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	785b      	ldrb	r3, [r3, #1]
 800d860:	2b01      	cmp	r3, #1
 800d862:	d12c      	bne.n	800d8be <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	015a      	lsls	r2, r3, #5
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	4413      	add	r3, r2
 800d86c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	2b00      	cmp	r3, #0
 800d874:	db12      	blt.n	800d89c <USB_EPSetStall+0x54>
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d00f      	beq.n	800d89c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d87c:	68bb      	ldr	r3, [r7, #8]
 800d87e:	015a      	lsls	r2, r3, #5
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	4413      	add	r3, r2
 800d884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	68ba      	ldr	r2, [r7, #8]
 800d88c:	0151      	lsls	r1, r2, #5
 800d88e:	68fa      	ldr	r2, [r7, #12]
 800d890:	440a      	add	r2, r1
 800d892:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d896:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d89a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	015a      	lsls	r2, r3, #5
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	4413      	add	r3, r2
 800d8a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	68ba      	ldr	r2, [r7, #8]
 800d8ac:	0151      	lsls	r1, r2, #5
 800d8ae:	68fa      	ldr	r2, [r7, #12]
 800d8b0:	440a      	add	r2, r1
 800d8b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d8b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d8ba:	6013      	str	r3, [r2, #0]
 800d8bc:	e02b      	b.n	800d916 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	015a      	lsls	r2, r3, #5
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	4413      	add	r3, r2
 800d8c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	db12      	blt.n	800d8f6 <USB_EPSetStall+0xae>
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d00f      	beq.n	800d8f6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	015a      	lsls	r2, r3, #5
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	4413      	add	r3, r2
 800d8de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	68ba      	ldr	r2, [r7, #8]
 800d8e6:	0151      	lsls	r1, r2, #5
 800d8e8:	68fa      	ldr	r2, [r7, #12]
 800d8ea:	440a      	add	r2, r1
 800d8ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d8f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d8f4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	015a      	lsls	r2, r3, #5
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	4413      	add	r3, r2
 800d8fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	68ba      	ldr	r2, [r7, #8]
 800d906:	0151      	lsls	r1, r2, #5
 800d908:	68fa      	ldr	r2, [r7, #12]
 800d90a:	440a      	add	r2, r1
 800d90c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d910:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d914:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d916:	2300      	movs	r3, #0
}
 800d918:	4618      	mov	r0, r3
 800d91a:	3714      	adds	r7, #20
 800d91c:	46bd      	mov	sp, r7
 800d91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d922:	4770      	bx	lr

0800d924 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d924:	b480      	push	{r7}
 800d926:	b085      	sub	sp, #20
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
 800d92c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	781b      	ldrb	r3, [r3, #0]
 800d936:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	785b      	ldrb	r3, [r3, #1]
 800d93c:	2b01      	cmp	r3, #1
 800d93e:	d128      	bne.n	800d992 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	015a      	lsls	r2, r3, #5
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	4413      	add	r3, r2
 800d948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	68ba      	ldr	r2, [r7, #8]
 800d950:	0151      	lsls	r1, r2, #5
 800d952:	68fa      	ldr	r2, [r7, #12]
 800d954:	440a      	add	r2, r1
 800d956:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d95a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d95e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	78db      	ldrb	r3, [r3, #3]
 800d964:	2b03      	cmp	r3, #3
 800d966:	d003      	beq.n	800d970 <USB_EPClearStall+0x4c>
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	78db      	ldrb	r3, [r3, #3]
 800d96c:	2b02      	cmp	r3, #2
 800d96e:	d138      	bne.n	800d9e2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	015a      	lsls	r2, r3, #5
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	4413      	add	r3, r2
 800d978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	68ba      	ldr	r2, [r7, #8]
 800d980:	0151      	lsls	r1, r2, #5
 800d982:	68fa      	ldr	r2, [r7, #12]
 800d984:	440a      	add	r2, r1
 800d986:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d98a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d98e:	6013      	str	r3, [r2, #0]
 800d990:	e027      	b.n	800d9e2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d992:	68bb      	ldr	r3, [r7, #8]
 800d994:	015a      	lsls	r2, r3, #5
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	4413      	add	r3, r2
 800d99a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	68ba      	ldr	r2, [r7, #8]
 800d9a2:	0151      	lsls	r1, r2, #5
 800d9a4:	68fa      	ldr	r2, [r7, #12]
 800d9a6:	440a      	add	r2, r1
 800d9a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d9ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d9b0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	78db      	ldrb	r3, [r3, #3]
 800d9b6:	2b03      	cmp	r3, #3
 800d9b8:	d003      	beq.n	800d9c2 <USB_EPClearStall+0x9e>
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	78db      	ldrb	r3, [r3, #3]
 800d9be:	2b02      	cmp	r3, #2
 800d9c0:	d10f      	bne.n	800d9e2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	015a      	lsls	r2, r3, #5
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	4413      	add	r3, r2
 800d9ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	68ba      	ldr	r2, [r7, #8]
 800d9d2:	0151      	lsls	r1, r2, #5
 800d9d4:	68fa      	ldr	r2, [r7, #12]
 800d9d6:	440a      	add	r2, r1
 800d9d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d9dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d9e0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d9e2:	2300      	movs	r3, #0
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	3714      	adds	r7, #20
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ee:	4770      	bx	lr

0800d9f0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d9f0:	b480      	push	{r7}
 800d9f2:	b085      	sub	sp, #20
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
 800d9f8:	460b      	mov	r3, r1
 800d9fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	68fa      	ldr	r2, [r7, #12]
 800da0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800da0e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800da12:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da1a:	681a      	ldr	r2, [r3, #0]
 800da1c:	78fb      	ldrb	r3, [r7, #3]
 800da1e:	011b      	lsls	r3, r3, #4
 800da20:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800da24:	68f9      	ldr	r1, [r7, #12]
 800da26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800da2a:	4313      	orrs	r3, r2
 800da2c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800da2e:	2300      	movs	r3, #0
}
 800da30:	4618      	mov	r0, r3
 800da32:	3714      	adds	r7, #20
 800da34:	46bd      	mov	sp, r7
 800da36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3a:	4770      	bx	lr

0800da3c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b084      	sub	sp, #16
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da4e:	685b      	ldr	r3, [r3, #4]
 800da50:	68fa      	ldr	r2, [r7, #12]
 800da52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800da56:	f023 0302 	bic.w	r3, r3, #2
 800da5a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800da5c:	2003      	movs	r0, #3
 800da5e:	f7f4 f92b 	bl	8001cb8 <HAL_Delay>

  return HAL_OK;
 800da62:	2300      	movs	r3, #0
}
 800da64:	4618      	mov	r0, r3
 800da66:	3710      	adds	r7, #16
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd80      	pop	{r7, pc}

0800da6c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b084      	sub	sp, #16
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da7e:	685b      	ldr	r3, [r3, #4]
 800da80:	68fa      	ldr	r2, [r7, #12]
 800da82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800da86:	f043 0302 	orr.w	r3, r3, #2
 800da8a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800da8c:	2003      	movs	r0, #3
 800da8e:	f7f4 f913 	bl	8001cb8 <HAL_Delay>

  return HAL_OK;
 800da92:	2300      	movs	r3, #0
}
 800da94:	4618      	mov	r0, r3
 800da96:	3710      	adds	r7, #16
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}

0800da9c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800da9c:	b480      	push	{r7}
 800da9e:	b085      	sub	sp, #20
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	695b      	ldr	r3, [r3, #20]
 800daa8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	699b      	ldr	r3, [r3, #24]
 800daae:	68fa      	ldr	r2, [r7, #12]
 800dab0:	4013      	ands	r3, r2
 800dab2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800dab4:	68fb      	ldr	r3, [r7, #12]
}
 800dab6:	4618      	mov	r0, r3
 800dab8:	3714      	adds	r7, #20
 800daba:	46bd      	mov	sp, r7
 800dabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac0:	4770      	bx	lr

0800dac2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800dac2:	b480      	push	{r7}
 800dac4:	b085      	sub	sp, #20
 800dac6:	af00      	add	r7, sp, #0
 800dac8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dad4:	699b      	ldr	r3, [r3, #24]
 800dad6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dade:	69db      	ldr	r3, [r3, #28]
 800dae0:	68ba      	ldr	r2, [r7, #8]
 800dae2:	4013      	ands	r3, r2
 800dae4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	0c1b      	lsrs	r3, r3, #16
}
 800daea:	4618      	mov	r0, r3
 800daec:	3714      	adds	r7, #20
 800daee:	46bd      	mov	sp, r7
 800daf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf4:	4770      	bx	lr

0800daf6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800daf6:	b480      	push	{r7}
 800daf8:	b085      	sub	sp, #20
 800dafa:	af00      	add	r7, sp, #0
 800dafc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db08:	699b      	ldr	r3, [r3, #24]
 800db0a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db12:	69db      	ldr	r3, [r3, #28]
 800db14:	68ba      	ldr	r2, [r7, #8]
 800db16:	4013      	ands	r3, r2
 800db18:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	b29b      	uxth	r3, r3
}
 800db1e:	4618      	mov	r0, r3
 800db20:	3714      	adds	r7, #20
 800db22:	46bd      	mov	sp, r7
 800db24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db28:	4770      	bx	lr

0800db2a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800db2a:	b480      	push	{r7}
 800db2c:	b085      	sub	sp, #20
 800db2e:	af00      	add	r7, sp, #0
 800db30:	6078      	str	r0, [r7, #4]
 800db32:	460b      	mov	r3, r1
 800db34:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800db3a:	78fb      	ldrb	r3, [r7, #3]
 800db3c:	015a      	lsls	r2, r3, #5
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	4413      	add	r3, r2
 800db42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db46:	689b      	ldr	r3, [r3, #8]
 800db48:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db50:	695b      	ldr	r3, [r3, #20]
 800db52:	68ba      	ldr	r2, [r7, #8]
 800db54:	4013      	ands	r3, r2
 800db56:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800db58:	68bb      	ldr	r3, [r7, #8]
}
 800db5a:	4618      	mov	r0, r3
 800db5c:	3714      	adds	r7, #20
 800db5e:	46bd      	mov	sp, r7
 800db60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db64:	4770      	bx	lr

0800db66 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800db66:	b480      	push	{r7}
 800db68:	b087      	sub	sp, #28
 800db6a:	af00      	add	r7, sp, #0
 800db6c:	6078      	str	r0, [r7, #4]
 800db6e:	460b      	mov	r3, r1
 800db70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800db76:	697b      	ldr	r3, [r7, #20]
 800db78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db7c:	691b      	ldr	r3, [r3, #16]
 800db7e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db88:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800db8a:	78fb      	ldrb	r3, [r7, #3]
 800db8c:	f003 030f 	and.w	r3, r3, #15
 800db90:	68fa      	ldr	r2, [r7, #12]
 800db92:	fa22 f303 	lsr.w	r3, r2, r3
 800db96:	01db      	lsls	r3, r3, #7
 800db98:	b2db      	uxtb	r3, r3
 800db9a:	693a      	ldr	r2, [r7, #16]
 800db9c:	4313      	orrs	r3, r2
 800db9e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800dba0:	78fb      	ldrb	r3, [r7, #3]
 800dba2:	015a      	lsls	r2, r3, #5
 800dba4:	697b      	ldr	r3, [r7, #20]
 800dba6:	4413      	add	r3, r2
 800dba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbac:	689b      	ldr	r3, [r3, #8]
 800dbae:	693a      	ldr	r2, [r7, #16]
 800dbb0:	4013      	ands	r3, r2
 800dbb2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800dbb4:	68bb      	ldr	r3, [r7, #8]
}
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	371c      	adds	r7, #28
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc0:	4770      	bx	lr

0800dbc2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800dbc2:	b480      	push	{r7}
 800dbc4:	b083      	sub	sp, #12
 800dbc6:	af00      	add	r7, sp, #0
 800dbc8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	695b      	ldr	r3, [r3, #20]
 800dbce:	f003 0301 	and.w	r3, r3, #1
}
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	370c      	adds	r7, #12
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbdc:	4770      	bx	lr
	...

0800dbe0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800dbe0:	b480      	push	{r7}
 800dbe2:	b085      	sub	sp, #20
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbf2:	681a      	ldr	r2, [r3, #0]
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbfa:	4619      	mov	r1, r3
 800dbfc:	4b09      	ldr	r3, [pc, #36]	; (800dc24 <USB_ActivateSetup+0x44>)
 800dbfe:	4013      	ands	r3, r2
 800dc00:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc08:	685b      	ldr	r3, [r3, #4]
 800dc0a:	68fa      	ldr	r2, [r7, #12]
 800dc0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dc10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dc14:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dc16:	2300      	movs	r3, #0
}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	3714      	adds	r7, #20
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc22:	4770      	bx	lr
 800dc24:	fffff800 	.word	0xfffff800

0800dc28 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800dc28:	b480      	push	{r7}
 800dc2a:	b087      	sub	sp, #28
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	60f8      	str	r0, [r7, #12]
 800dc30:	460b      	mov	r3, r1
 800dc32:	607a      	str	r2, [r7, #4]
 800dc34:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	333c      	adds	r3, #60	; 0x3c
 800dc3e:	3304      	adds	r3, #4
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800dc44:	693b      	ldr	r3, [r7, #16]
 800dc46:	4a26      	ldr	r2, [pc, #152]	; (800dce0 <USB_EP0_OutStart+0xb8>)
 800dc48:	4293      	cmp	r3, r2
 800dc4a:	d90a      	bls.n	800dc62 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dc4c:	697b      	ldr	r3, [r7, #20]
 800dc4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dc58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dc5c:	d101      	bne.n	800dc62 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	e037      	b.n	800dcd2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc68:	461a      	mov	r2, r3
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc74:	691b      	ldr	r3, [r3, #16]
 800dc76:	697a      	ldr	r2, [r7, #20]
 800dc78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dc80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800dc82:	697b      	ldr	r3, [r7, #20]
 800dc84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc88:	691b      	ldr	r3, [r3, #16]
 800dc8a:	697a      	ldr	r2, [r7, #20]
 800dc8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc90:	f043 0318 	orr.w	r3, r3, #24
 800dc94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800dc96:	697b      	ldr	r3, [r7, #20]
 800dc98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc9c:	691b      	ldr	r3, [r3, #16]
 800dc9e:	697a      	ldr	r2, [r7, #20]
 800dca0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dca4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800dca8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800dcaa:	7afb      	ldrb	r3, [r7, #11]
 800dcac:	2b01      	cmp	r3, #1
 800dcae:	d10f      	bne.n	800dcd0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800dcb0:	697b      	ldr	r3, [r7, #20]
 800dcb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcb6:	461a      	mov	r2, r3
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800dcbc:	697b      	ldr	r3, [r7, #20]
 800dcbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	697a      	ldr	r2, [r7, #20]
 800dcc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dcca:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800dcce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dcd0:	2300      	movs	r3, #0
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	371c      	adds	r7, #28
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcdc:	4770      	bx	lr
 800dcde:	bf00      	nop
 800dce0:	4f54300a 	.word	0x4f54300a

0800dce4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800dce4:	b480      	push	{r7}
 800dce6:	b085      	sub	sp, #20
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800dcec:	2300      	movs	r3, #0
 800dcee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	3301      	adds	r3, #1
 800dcf4:	60fb      	str	r3, [r7, #12]
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	4a13      	ldr	r2, [pc, #76]	; (800dd48 <USB_CoreReset+0x64>)
 800dcfa:	4293      	cmp	r3, r2
 800dcfc:	d901      	bls.n	800dd02 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800dcfe:	2303      	movs	r3, #3
 800dd00:	e01b      	b.n	800dd3a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	691b      	ldr	r3, [r3, #16]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	daf2      	bge.n	800dcf0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	691b      	ldr	r3, [r3, #16]
 800dd12:	f043 0201 	orr.w	r2, r3, #1
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	3301      	adds	r3, #1
 800dd1e:	60fb      	str	r3, [r7, #12]
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	4a09      	ldr	r2, [pc, #36]	; (800dd48 <USB_CoreReset+0x64>)
 800dd24:	4293      	cmp	r3, r2
 800dd26:	d901      	bls.n	800dd2c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800dd28:	2303      	movs	r3, #3
 800dd2a:	e006      	b.n	800dd3a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	691b      	ldr	r3, [r3, #16]
 800dd30:	f003 0301 	and.w	r3, r3, #1
 800dd34:	2b01      	cmp	r3, #1
 800dd36:	d0f0      	beq.n	800dd1a <USB_CoreReset+0x36>

  return HAL_OK;
 800dd38:	2300      	movs	r3, #0
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	3714      	adds	r7, #20
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd44:	4770      	bx	lr
 800dd46:	bf00      	nop
 800dd48:	00030d40 	.word	0x00030d40

0800dd4c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b084      	sub	sp, #16
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
 800dd54:	460b      	mov	r3, r1
 800dd56:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800dd58:	2300      	movs	r3, #0
 800dd5a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	7c1b      	ldrb	r3, [r3, #16]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d115      	bne.n	800dd90 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800dd64:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dd68:	2202      	movs	r2, #2
 800dd6a:	2181      	movs	r1, #129	; 0x81
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f001 ff2c 	bl	800fbca <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2201      	movs	r2, #1
 800dd76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800dd78:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dd7c:	2202      	movs	r2, #2
 800dd7e:	2101      	movs	r1, #1
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f001 ff22 	bl	800fbca <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	2201      	movs	r2, #1
 800dd8a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800dd8e:	e012      	b.n	800ddb6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800dd90:	2340      	movs	r3, #64	; 0x40
 800dd92:	2202      	movs	r2, #2
 800dd94:	2181      	movs	r1, #129	; 0x81
 800dd96:	6878      	ldr	r0, [r7, #4]
 800dd98:	f001 ff17 	bl	800fbca <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2201      	movs	r2, #1
 800dda0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800dda2:	2340      	movs	r3, #64	; 0x40
 800dda4:	2202      	movs	r2, #2
 800dda6:	2101      	movs	r1, #1
 800dda8:	6878      	ldr	r0, [r7, #4]
 800ddaa:	f001 ff0e 	bl	800fbca <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	2201      	movs	r2, #1
 800ddb2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ddb6:	2308      	movs	r3, #8
 800ddb8:	2203      	movs	r2, #3
 800ddba:	2182      	movs	r1, #130	; 0x82
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f001 ff04 	bl	800fbca <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	2201      	movs	r2, #1
 800ddc6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ddc8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ddcc:	f002 f87a 	bl	800fec4 <malloc>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	461a      	mov	r2, r3
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d102      	bne.n	800ddea <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800dde4:	2301      	movs	r3, #1
 800dde6:	73fb      	strb	r3, [r7, #15]
 800dde8:	e026      	b.n	800de38 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddf0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800ddfc:	68bb      	ldr	r3, [r7, #8]
 800ddfe:	2200      	movs	r2, #0
 800de00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800de04:	68bb      	ldr	r3, [r7, #8]
 800de06:	2200      	movs	r2, #0
 800de08:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	7c1b      	ldrb	r3, [r3, #16]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d109      	bne.n	800de28 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800de1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800de1e:	2101      	movs	r1, #1
 800de20:	6878      	ldr	r0, [r7, #4]
 800de22:	f001 ffc3 	bl	800fdac <USBD_LL_PrepareReceive>
 800de26:	e007      	b.n	800de38 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800de2e:	2340      	movs	r3, #64	; 0x40
 800de30:	2101      	movs	r1, #1
 800de32:	6878      	ldr	r0, [r7, #4]
 800de34:	f001 ffba 	bl	800fdac <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800de38:	7bfb      	ldrb	r3, [r7, #15]
}
 800de3a:	4618      	mov	r0, r3
 800de3c:	3710      	adds	r7, #16
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}

0800de42 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800de42:	b580      	push	{r7, lr}
 800de44:	b084      	sub	sp, #16
 800de46:	af00      	add	r7, sp, #0
 800de48:	6078      	str	r0, [r7, #4]
 800de4a:	460b      	mov	r3, r1
 800de4c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800de4e:	2300      	movs	r3, #0
 800de50:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800de52:	2181      	movs	r1, #129	; 0x81
 800de54:	6878      	ldr	r0, [r7, #4]
 800de56:	f001 fede 	bl	800fc16 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2200      	movs	r2, #0
 800de5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800de60:	2101      	movs	r1, #1
 800de62:	6878      	ldr	r0, [r7, #4]
 800de64:	f001 fed7 	bl	800fc16 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2200      	movs	r2, #0
 800de6c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800de70:	2182      	movs	r1, #130	; 0x82
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f001 fecf 	bl	800fc16 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2200      	movs	r2, #0
 800de7c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de84:	2b00      	cmp	r3, #0
 800de86:	d00e      	beq.n	800dea6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de8e:	685b      	ldr	r3, [r3, #4]
 800de90:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de98:	4618      	mov	r0, r3
 800de9a:	f002 f81b 	bl	800fed4 <free>
    pdev->pClassData = NULL;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2200      	movs	r2, #0
 800dea2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800dea6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dea8:	4618      	mov	r0, r3
 800deaa:	3710      	adds	r7, #16
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}

0800deb0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b086      	sub	sp, #24
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
 800deb8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dec0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800dec2:	2300      	movs	r3, #0
 800dec4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800dec6:	2300      	movs	r3, #0
 800dec8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800deca:	2300      	movs	r3, #0
 800decc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	781b      	ldrb	r3, [r3, #0]
 800ded2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d039      	beq.n	800df4e <USBD_CDC_Setup+0x9e>
 800deda:	2b20      	cmp	r3, #32
 800dedc:	d17c      	bne.n	800dfd8 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	88db      	ldrh	r3, [r3, #6]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d029      	beq.n	800df3a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	781b      	ldrb	r3, [r3, #0]
 800deea:	b25b      	sxtb	r3, r3
 800deec:	2b00      	cmp	r3, #0
 800deee:	da11      	bge.n	800df14 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800def6:	689b      	ldr	r3, [r3, #8]
 800def8:	683a      	ldr	r2, [r7, #0]
 800defa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800defc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800defe:	683a      	ldr	r2, [r7, #0]
 800df00:	88d2      	ldrh	r2, [r2, #6]
 800df02:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800df04:	6939      	ldr	r1, [r7, #16]
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	88db      	ldrh	r3, [r3, #6]
 800df0a:	461a      	mov	r2, r3
 800df0c:	6878      	ldr	r0, [r7, #4]
 800df0e:	f001 fa0f 	bl	800f330 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800df12:	e068      	b.n	800dfe6 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	785a      	ldrb	r2, [r3, #1]
 800df18:	693b      	ldr	r3, [r7, #16]
 800df1a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	88db      	ldrh	r3, [r3, #6]
 800df22:	b2da      	uxtb	r2, r3
 800df24:	693b      	ldr	r3, [r7, #16]
 800df26:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800df2a:	6939      	ldr	r1, [r7, #16]
 800df2c:	683b      	ldr	r3, [r7, #0]
 800df2e:	88db      	ldrh	r3, [r3, #6]
 800df30:	461a      	mov	r2, r3
 800df32:	6878      	ldr	r0, [r7, #4]
 800df34:	f001 fa2a 	bl	800f38c <USBD_CtlPrepareRx>
      break;
 800df38:	e055      	b.n	800dfe6 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800df40:	689b      	ldr	r3, [r3, #8]
 800df42:	683a      	ldr	r2, [r7, #0]
 800df44:	7850      	ldrb	r0, [r2, #1]
 800df46:	2200      	movs	r2, #0
 800df48:	6839      	ldr	r1, [r7, #0]
 800df4a:	4798      	blx	r3
      break;
 800df4c:	e04b      	b.n	800dfe6 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	785b      	ldrb	r3, [r3, #1]
 800df52:	2b0a      	cmp	r3, #10
 800df54:	d017      	beq.n	800df86 <USBD_CDC_Setup+0xd6>
 800df56:	2b0b      	cmp	r3, #11
 800df58:	d029      	beq.n	800dfae <USBD_CDC_Setup+0xfe>
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d133      	bne.n	800dfc6 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df64:	2b03      	cmp	r3, #3
 800df66:	d107      	bne.n	800df78 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800df68:	f107 030c 	add.w	r3, r7, #12
 800df6c:	2202      	movs	r2, #2
 800df6e:	4619      	mov	r1, r3
 800df70:	6878      	ldr	r0, [r7, #4]
 800df72:	f001 f9dd 	bl	800f330 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800df76:	e02e      	b.n	800dfd6 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800df78:	6839      	ldr	r1, [r7, #0]
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	f001 f96d 	bl	800f25a <USBD_CtlError>
            ret = USBD_FAIL;
 800df80:	2302      	movs	r3, #2
 800df82:	75fb      	strb	r3, [r7, #23]
          break;
 800df84:	e027      	b.n	800dfd6 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df8c:	2b03      	cmp	r3, #3
 800df8e:	d107      	bne.n	800dfa0 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800df90:	f107 030f 	add.w	r3, r7, #15
 800df94:	2201      	movs	r2, #1
 800df96:	4619      	mov	r1, r3
 800df98:	6878      	ldr	r0, [r7, #4]
 800df9a:	f001 f9c9 	bl	800f330 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800df9e:	e01a      	b.n	800dfd6 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800dfa0:	6839      	ldr	r1, [r7, #0]
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f001 f959 	bl	800f25a <USBD_CtlError>
            ret = USBD_FAIL;
 800dfa8:	2302      	movs	r3, #2
 800dfaa:	75fb      	strb	r3, [r7, #23]
          break;
 800dfac:	e013      	b.n	800dfd6 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfb4:	2b03      	cmp	r3, #3
 800dfb6:	d00d      	beq.n	800dfd4 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 800dfb8:	6839      	ldr	r1, [r7, #0]
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	f001 f94d 	bl	800f25a <USBD_CtlError>
            ret = USBD_FAIL;
 800dfc0:	2302      	movs	r3, #2
 800dfc2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800dfc4:	e006      	b.n	800dfd4 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800dfc6:	6839      	ldr	r1, [r7, #0]
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	f001 f946 	bl	800f25a <USBD_CtlError>
          ret = USBD_FAIL;
 800dfce:	2302      	movs	r3, #2
 800dfd0:	75fb      	strb	r3, [r7, #23]
          break;
 800dfd2:	e000      	b.n	800dfd6 <USBD_CDC_Setup+0x126>
          break;
 800dfd4:	bf00      	nop
      }
      break;
 800dfd6:	e006      	b.n	800dfe6 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800dfd8:	6839      	ldr	r1, [r7, #0]
 800dfda:	6878      	ldr	r0, [r7, #4]
 800dfdc:	f001 f93d 	bl	800f25a <USBD_CtlError>
      ret = USBD_FAIL;
 800dfe0:	2302      	movs	r3, #2
 800dfe2:	75fb      	strb	r3, [r7, #23]
      break;
 800dfe4:	bf00      	nop
  }

  return ret;
 800dfe6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfe8:	4618      	mov	r0, r3
 800dfea:	3718      	adds	r7, #24
 800dfec:	46bd      	mov	sp, r7
 800dfee:	bd80      	pop	{r7, pc}

0800dff0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b084      	sub	sp, #16
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
 800dff8:	460b      	mov	r3, r1
 800dffa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e002:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e00a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e012:	2b00      	cmp	r3, #0
 800e014:	d03a      	beq.n	800e08c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e016:	78fa      	ldrb	r2, [r7, #3]
 800e018:	6879      	ldr	r1, [r7, #4]
 800e01a:	4613      	mov	r3, r2
 800e01c:	009b      	lsls	r3, r3, #2
 800e01e:	4413      	add	r3, r2
 800e020:	009b      	lsls	r3, r3, #2
 800e022:	440b      	add	r3, r1
 800e024:	331c      	adds	r3, #28
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d029      	beq.n	800e080 <USBD_CDC_DataIn+0x90>
 800e02c:	78fa      	ldrb	r2, [r7, #3]
 800e02e:	6879      	ldr	r1, [r7, #4]
 800e030:	4613      	mov	r3, r2
 800e032:	009b      	lsls	r3, r3, #2
 800e034:	4413      	add	r3, r2
 800e036:	009b      	lsls	r3, r3, #2
 800e038:	440b      	add	r3, r1
 800e03a:	331c      	adds	r3, #28
 800e03c:	681a      	ldr	r2, [r3, #0]
 800e03e:	78f9      	ldrb	r1, [r7, #3]
 800e040:	68b8      	ldr	r0, [r7, #8]
 800e042:	460b      	mov	r3, r1
 800e044:	00db      	lsls	r3, r3, #3
 800e046:	1a5b      	subs	r3, r3, r1
 800e048:	009b      	lsls	r3, r3, #2
 800e04a:	4403      	add	r3, r0
 800e04c:	3344      	adds	r3, #68	; 0x44
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	fbb2 f1f3 	udiv	r1, r2, r3
 800e054:	fb03 f301 	mul.w	r3, r3, r1
 800e058:	1ad3      	subs	r3, r2, r3
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d110      	bne.n	800e080 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800e05e:	78fa      	ldrb	r2, [r7, #3]
 800e060:	6879      	ldr	r1, [r7, #4]
 800e062:	4613      	mov	r3, r2
 800e064:	009b      	lsls	r3, r3, #2
 800e066:	4413      	add	r3, r2
 800e068:	009b      	lsls	r3, r3, #2
 800e06a:	440b      	add	r3, r1
 800e06c:	331c      	adds	r3, #28
 800e06e:	2200      	movs	r2, #0
 800e070:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e072:	78f9      	ldrb	r1, [r7, #3]
 800e074:	2300      	movs	r3, #0
 800e076:	2200      	movs	r2, #0
 800e078:	6878      	ldr	r0, [r7, #4]
 800e07a:	f001 fe74 	bl	800fd66 <USBD_LL_Transmit>
 800e07e:	e003      	b.n	800e088 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	2200      	movs	r2, #0
 800e084:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800e088:	2300      	movs	r3, #0
 800e08a:	e000      	b.n	800e08e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800e08c:	2302      	movs	r3, #2
  }
}
 800e08e:	4618      	mov	r0, r3
 800e090:	3710      	adds	r7, #16
 800e092:	46bd      	mov	sp, r7
 800e094:	bd80      	pop	{r7, pc}

0800e096 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e096:	b580      	push	{r7, lr}
 800e098:	b084      	sub	sp, #16
 800e09a:	af00      	add	r7, sp, #0
 800e09c:	6078      	str	r0, [r7, #4]
 800e09e:	460b      	mov	r3, r1
 800e0a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0a8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e0aa:	78fb      	ldrb	r3, [r7, #3]
 800e0ac:	4619      	mov	r1, r3
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f001 fe9f 	bl	800fdf2 <USBD_LL_GetRxDataSize>
 800e0b4:	4602      	mov	r2, r0
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d00d      	beq.n	800e0e2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e0cc:	68db      	ldr	r3, [r3, #12]
 800e0ce:	68fa      	ldr	r2, [r7, #12]
 800e0d0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e0d4:	68fa      	ldr	r2, [r7, #12]
 800e0d6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e0da:	4611      	mov	r1, r2
 800e0dc:	4798      	blx	r3

    return USBD_OK;
 800e0de:	2300      	movs	r3, #0
 800e0e0:	e000      	b.n	800e0e4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800e0e2:	2302      	movs	r3, #2
  }
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3710      	adds	r7, #16
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}

0800e0ec <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b084      	sub	sp, #16
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0fa:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e102:	2b00      	cmp	r3, #0
 800e104:	d015      	beq.n	800e132 <USBD_CDC_EP0_RxReady+0x46>
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e10c:	2bff      	cmp	r3, #255	; 0xff
 800e10e:	d010      	beq.n	800e132 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e116:	689b      	ldr	r3, [r3, #8]
 800e118:	68fa      	ldr	r2, [r7, #12]
 800e11a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800e11e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e120:	68fa      	ldr	r2, [r7, #12]
 800e122:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e126:	b292      	uxth	r2, r2
 800e128:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	22ff      	movs	r2, #255	; 0xff
 800e12e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800e132:	2300      	movs	r3, #0
}
 800e134:	4618      	mov	r0, r3
 800e136:	3710      	adds	r7, #16
 800e138:	46bd      	mov	sp, r7
 800e13a:	bd80      	pop	{r7, pc}

0800e13c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e13c:	b480      	push	{r7}
 800e13e:	b083      	sub	sp, #12
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2243      	movs	r2, #67	; 0x43
 800e148:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800e14a:	4b03      	ldr	r3, [pc, #12]	; (800e158 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	370c      	adds	r7, #12
 800e150:	46bd      	mov	sp, r7
 800e152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e156:	4770      	bx	lr
 800e158:	24000098 	.word	0x24000098

0800e15c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e15c:	b480      	push	{r7}
 800e15e:	b083      	sub	sp, #12
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2243      	movs	r2, #67	; 0x43
 800e168:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800e16a:	4b03      	ldr	r3, [pc, #12]	; (800e178 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e16c:	4618      	mov	r0, r3
 800e16e:	370c      	adds	r7, #12
 800e170:	46bd      	mov	sp, r7
 800e172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e176:	4770      	bx	lr
 800e178:	24000054 	.word	0x24000054

0800e17c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e17c:	b480      	push	{r7}
 800e17e:	b083      	sub	sp, #12
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2243      	movs	r2, #67	; 0x43
 800e188:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800e18a:	4b03      	ldr	r3, [pc, #12]	; (800e198 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e18c:	4618      	mov	r0, r3
 800e18e:	370c      	adds	r7, #12
 800e190:	46bd      	mov	sp, r7
 800e192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e196:	4770      	bx	lr
 800e198:	240000dc 	.word	0x240000dc

0800e19c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e19c:	b480      	push	{r7}
 800e19e:	b083      	sub	sp, #12
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	220a      	movs	r2, #10
 800e1a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800e1aa:	4b03      	ldr	r3, [pc, #12]	; (800e1b8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	370c      	adds	r7, #12
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b6:	4770      	bx	lr
 800e1b8:	24000010 	.word	0x24000010

0800e1bc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800e1bc:	b480      	push	{r7}
 800e1be:	b085      	sub	sp, #20
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
 800e1c4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800e1c6:	2302      	movs	r3, #2
 800e1c8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d005      	beq.n	800e1dc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	683a      	ldr	r2, [r7, #0]
 800e1d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800e1d8:	2300      	movs	r3, #0
 800e1da:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e1dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	3714      	adds	r7, #20
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e8:	4770      	bx	lr

0800e1ea <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800e1ea:	b480      	push	{r7}
 800e1ec:	b087      	sub	sp, #28
 800e1ee:	af00      	add	r7, sp, #0
 800e1f0:	60f8      	str	r0, [r7, #12]
 800e1f2:	60b9      	str	r1, [r7, #8]
 800e1f4:	4613      	mov	r3, r2
 800e1f6:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1fe:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	68ba      	ldr	r2, [r7, #8]
 800e204:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e208:	88fa      	ldrh	r2, [r7, #6]
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800e210:	2300      	movs	r3, #0
}
 800e212:	4618      	mov	r0, r3
 800e214:	371c      	adds	r7, #28
 800e216:	46bd      	mov	sp, r7
 800e218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21c:	4770      	bx	lr

0800e21e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800e21e:	b480      	push	{r7}
 800e220:	b085      	sub	sp, #20
 800e222:	af00      	add	r7, sp, #0
 800e224:	6078      	str	r0, [r7, #4]
 800e226:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e22e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	683a      	ldr	r2, [r7, #0]
 800e234:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800e238:	2300      	movs	r3, #0
}
 800e23a:	4618      	mov	r0, r3
 800e23c:	3714      	adds	r7, #20
 800e23e:	46bd      	mov	sp, r7
 800e240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e244:	4770      	bx	lr

0800e246 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e246:	b580      	push	{r7, lr}
 800e248:	b084      	sub	sp, #16
 800e24a:	af00      	add	r7, sp, #0
 800e24c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e254:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d017      	beq.n	800e290 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	7c1b      	ldrb	r3, [r3, #16]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d109      	bne.n	800e27c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e26e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e272:	2101      	movs	r1, #1
 800e274:	6878      	ldr	r0, [r7, #4]
 800e276:	f001 fd99 	bl	800fdac <USBD_LL_PrepareReceive>
 800e27a:	e007      	b.n	800e28c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e282:	2340      	movs	r3, #64	; 0x40
 800e284:	2101      	movs	r1, #1
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	f001 fd90 	bl	800fdac <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800e28c:	2300      	movs	r3, #0
 800e28e:	e000      	b.n	800e292 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800e290:	2302      	movs	r3, #2
  }
}
 800e292:	4618      	mov	r0, r3
 800e294:	3710      	adds	r7, #16
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}

0800e29a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e29a:	b580      	push	{r7, lr}
 800e29c:	b084      	sub	sp, #16
 800e29e:	af00      	add	r7, sp, #0
 800e2a0:	60f8      	str	r0, [r7, #12]
 800e2a2:	60b9      	str	r1, [r7, #8]
 800e2a4:	4613      	mov	r3, r2
 800e2a6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d101      	bne.n	800e2b2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e2ae:	2302      	movs	r3, #2
 800e2b0:	e01a      	b.n	800e2e8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d003      	beq.n	800e2c4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	2200      	movs	r2, #0
 800e2c0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e2c4:	68bb      	ldr	r3, [r7, #8]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d003      	beq.n	800e2d2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	68ba      	ldr	r2, [r7, #8]
 800e2ce:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	2201      	movs	r2, #1
 800e2d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	79fa      	ldrb	r2, [r7, #7]
 800e2de:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800e2e0:	68f8      	ldr	r0, [r7, #12]
 800e2e2:	f001 fc07 	bl	800faf4 <USBD_LL_Init>

  return USBD_OK;
 800e2e6:	2300      	movs	r3, #0
}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	3710      	adds	r7, #16
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd80      	pop	{r7, pc}

0800e2f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e2f0:	b480      	push	{r7}
 800e2f2:	b085      	sub	sp, #20
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
 800e2f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d006      	beq.n	800e312 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	683a      	ldr	r2, [r7, #0]
 800e308:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800e30c:	2300      	movs	r3, #0
 800e30e:	73fb      	strb	r3, [r7, #15]
 800e310:	e001      	b.n	800e316 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800e312:	2302      	movs	r3, #2
 800e314:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e316:	7bfb      	ldrb	r3, [r7, #15]
}
 800e318:	4618      	mov	r0, r3
 800e31a:	3714      	adds	r7, #20
 800e31c:	46bd      	mov	sp, r7
 800e31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e322:	4770      	bx	lr

0800e324 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b082      	sub	sp, #8
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800e32c:	6878      	ldr	r0, [r7, #4]
 800e32e:	f001 fc31 	bl	800fb94 <USBD_LL_Start>

  return USBD_OK;
 800e332:	2300      	movs	r3, #0
}
 800e334:	4618      	mov	r0, r3
 800e336:	3708      	adds	r7, #8
 800e338:	46bd      	mov	sp, r7
 800e33a:	bd80      	pop	{r7, pc}

0800e33c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e33c:	b480      	push	{r7}
 800e33e:	b083      	sub	sp, #12
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e344:	2300      	movs	r3, #0
}
 800e346:	4618      	mov	r0, r3
 800e348:	370c      	adds	r7, #12
 800e34a:	46bd      	mov	sp, r7
 800e34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e350:	4770      	bx	lr

0800e352 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800e352:	b580      	push	{r7, lr}
 800e354:	b084      	sub	sp, #16
 800e356:	af00      	add	r7, sp, #0
 800e358:	6078      	str	r0, [r7, #4]
 800e35a:	460b      	mov	r3, r1
 800e35c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e35e:	2302      	movs	r3, #2
 800e360:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d00c      	beq.n	800e386 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	78fa      	ldrb	r2, [r7, #3]
 800e376:	4611      	mov	r1, r2
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	4798      	blx	r3
 800e37c:	4603      	mov	r3, r0
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d101      	bne.n	800e386 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800e382:	2300      	movs	r3, #0
 800e384:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800e386:	7bfb      	ldrb	r3, [r7, #15]
}
 800e388:	4618      	mov	r0, r3
 800e38a:	3710      	adds	r7, #16
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}

0800e390 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b082      	sub	sp, #8
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
 800e398:	460b      	mov	r3, r1
 800e39a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e3a2:	685b      	ldr	r3, [r3, #4]
 800e3a4:	78fa      	ldrb	r2, [r7, #3]
 800e3a6:	4611      	mov	r1, r2
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	4798      	blx	r3

  return USBD_OK;
 800e3ac:	2300      	movs	r3, #0
}
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	3708      	adds	r7, #8
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}

0800e3b6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e3b6:	b580      	push	{r7, lr}
 800e3b8:	b082      	sub	sp, #8
 800e3ba:	af00      	add	r7, sp, #0
 800e3bc:	6078      	str	r0, [r7, #4]
 800e3be:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800e3c6:	6839      	ldr	r1, [r7, #0]
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	f000 ff09 	bl	800f1e0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	2201      	movs	r2, #1
 800e3d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800e3dc:	461a      	mov	r2, r3
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800e3ea:	f003 031f 	and.w	r3, r3, #31
 800e3ee:	2b01      	cmp	r3, #1
 800e3f0:	d00c      	beq.n	800e40c <USBD_LL_SetupStage+0x56>
 800e3f2:	2b01      	cmp	r3, #1
 800e3f4:	d302      	bcc.n	800e3fc <USBD_LL_SetupStage+0x46>
 800e3f6:	2b02      	cmp	r3, #2
 800e3f8:	d010      	beq.n	800e41c <USBD_LL_SetupStage+0x66>
 800e3fa:	e017      	b.n	800e42c <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800e402:	4619      	mov	r1, r3
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	f000 fa09 	bl	800e81c <USBD_StdDevReq>
      break;
 800e40a:	e01a      	b.n	800e442 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800e412:	4619      	mov	r1, r3
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f000 fa6b 	bl	800e8f0 <USBD_StdItfReq>
      break;
 800e41a:	e012      	b.n	800e442 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800e422:	4619      	mov	r1, r3
 800e424:	6878      	ldr	r0, [r7, #4]
 800e426:	f000 faa9 	bl	800e97c <USBD_StdEPReq>
      break;
 800e42a:	e00a      	b.n	800e442 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800e432:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e436:	b2db      	uxtb	r3, r3
 800e438:	4619      	mov	r1, r3
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	f001 fc0a 	bl	800fc54 <USBD_LL_StallEP>
      break;
 800e440:	bf00      	nop
  }

  return USBD_OK;
 800e442:	2300      	movs	r3, #0
}
 800e444:	4618      	mov	r0, r3
 800e446:	3708      	adds	r7, #8
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}

0800e44c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b086      	sub	sp, #24
 800e450:	af00      	add	r7, sp, #0
 800e452:	60f8      	str	r0, [r7, #12]
 800e454:	460b      	mov	r3, r1
 800e456:	607a      	str	r2, [r7, #4]
 800e458:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800e45a:	7afb      	ldrb	r3, [r7, #11]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d14b      	bne.n	800e4f8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e466:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e46e:	2b03      	cmp	r3, #3
 800e470:	d134      	bne.n	800e4dc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800e472:	697b      	ldr	r3, [r7, #20]
 800e474:	68da      	ldr	r2, [r3, #12]
 800e476:	697b      	ldr	r3, [r7, #20]
 800e478:	691b      	ldr	r3, [r3, #16]
 800e47a:	429a      	cmp	r2, r3
 800e47c:	d919      	bls.n	800e4b2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800e47e:	697b      	ldr	r3, [r7, #20]
 800e480:	68da      	ldr	r2, [r3, #12]
 800e482:	697b      	ldr	r3, [r7, #20]
 800e484:	691b      	ldr	r3, [r3, #16]
 800e486:	1ad2      	subs	r2, r2, r3
 800e488:	697b      	ldr	r3, [r7, #20]
 800e48a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800e48c:	697b      	ldr	r3, [r7, #20]
 800e48e:	68da      	ldr	r2, [r3, #12]
 800e490:	697b      	ldr	r3, [r7, #20]
 800e492:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800e494:	429a      	cmp	r2, r3
 800e496:	d203      	bcs.n	800e4a0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800e498:	697b      	ldr	r3, [r7, #20]
 800e49a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800e49c:	b29b      	uxth	r3, r3
 800e49e:	e002      	b.n	800e4a6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800e4a0:	697b      	ldr	r3, [r7, #20]
 800e4a2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800e4a4:	b29b      	uxth	r3, r3
 800e4a6:	461a      	mov	r2, r3
 800e4a8:	6879      	ldr	r1, [r7, #4]
 800e4aa:	68f8      	ldr	r0, [r7, #12]
 800e4ac:	f000 ff8c 	bl	800f3c8 <USBD_CtlContinueRx>
 800e4b0:	e038      	b.n	800e524 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e4b8:	691b      	ldr	r3, [r3, #16]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d00a      	beq.n	800e4d4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e4c4:	2b03      	cmp	r3, #3
 800e4c6:	d105      	bne.n	800e4d4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e4ce:	691b      	ldr	r3, [r3, #16]
 800e4d0:	68f8      	ldr	r0, [r7, #12]
 800e4d2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800e4d4:	68f8      	ldr	r0, [r7, #12]
 800e4d6:	f000 ff89 	bl	800f3ec <USBD_CtlSendStatus>
 800e4da:	e023      	b.n	800e524 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e4e2:	2b05      	cmp	r3, #5
 800e4e4:	d11e      	bne.n	800e524 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800e4ee:	2100      	movs	r1, #0
 800e4f0:	68f8      	ldr	r0, [r7, #12]
 800e4f2:	f001 fbaf 	bl	800fc54 <USBD_LL_StallEP>
 800e4f6:	e015      	b.n	800e524 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e4fe:	699b      	ldr	r3, [r3, #24]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d00d      	beq.n	800e520 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800e50a:	2b03      	cmp	r3, #3
 800e50c:	d108      	bne.n	800e520 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e514:	699b      	ldr	r3, [r3, #24]
 800e516:	7afa      	ldrb	r2, [r7, #11]
 800e518:	4611      	mov	r1, r2
 800e51a:	68f8      	ldr	r0, [r7, #12]
 800e51c:	4798      	blx	r3
 800e51e:	e001      	b.n	800e524 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e520:	2302      	movs	r3, #2
 800e522:	e000      	b.n	800e526 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800e524:	2300      	movs	r3, #0
}
 800e526:	4618      	mov	r0, r3
 800e528:	3718      	adds	r7, #24
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}

0800e52e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e52e:	b580      	push	{r7, lr}
 800e530:	b086      	sub	sp, #24
 800e532:	af00      	add	r7, sp, #0
 800e534:	60f8      	str	r0, [r7, #12]
 800e536:	460b      	mov	r3, r1
 800e538:	607a      	str	r2, [r7, #4]
 800e53a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800e53c:	7afb      	ldrb	r3, [r7, #11]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d17f      	bne.n	800e642 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	3314      	adds	r3, #20
 800e546:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e54e:	2b02      	cmp	r3, #2
 800e550:	d15c      	bne.n	800e60c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800e552:	697b      	ldr	r3, [r7, #20]
 800e554:	68da      	ldr	r2, [r3, #12]
 800e556:	697b      	ldr	r3, [r7, #20]
 800e558:	691b      	ldr	r3, [r3, #16]
 800e55a:	429a      	cmp	r2, r3
 800e55c:	d915      	bls.n	800e58a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800e55e:	697b      	ldr	r3, [r7, #20]
 800e560:	68da      	ldr	r2, [r3, #12]
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	691b      	ldr	r3, [r3, #16]
 800e566:	1ad2      	subs	r2, r2, r3
 800e568:	697b      	ldr	r3, [r7, #20]
 800e56a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800e56c:	697b      	ldr	r3, [r7, #20]
 800e56e:	68db      	ldr	r3, [r3, #12]
 800e570:	b29b      	uxth	r3, r3
 800e572:	461a      	mov	r2, r3
 800e574:	6879      	ldr	r1, [r7, #4]
 800e576:	68f8      	ldr	r0, [r7, #12]
 800e578:	f000 fef6 	bl	800f368 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e57c:	2300      	movs	r3, #0
 800e57e:	2200      	movs	r2, #0
 800e580:	2100      	movs	r1, #0
 800e582:	68f8      	ldr	r0, [r7, #12]
 800e584:	f001 fc12 	bl	800fdac <USBD_LL_PrepareReceive>
 800e588:	e04e      	b.n	800e628 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800e58a:	697b      	ldr	r3, [r7, #20]
 800e58c:	689b      	ldr	r3, [r3, #8]
 800e58e:	697a      	ldr	r2, [r7, #20]
 800e590:	6912      	ldr	r2, [r2, #16]
 800e592:	fbb3 f1f2 	udiv	r1, r3, r2
 800e596:	fb02 f201 	mul.w	r2, r2, r1
 800e59a:	1a9b      	subs	r3, r3, r2
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d11c      	bne.n	800e5da <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800e5a0:	697b      	ldr	r3, [r7, #20]
 800e5a2:	689a      	ldr	r2, [r3, #8]
 800e5a4:	697b      	ldr	r3, [r7, #20]
 800e5a6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	d316      	bcc.n	800e5da <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800e5ac:	697b      	ldr	r3, [r7, #20]
 800e5ae:	689a      	ldr	r2, [r3, #8]
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e5b6:	429a      	cmp	r2, r3
 800e5b8:	d20f      	bcs.n	800e5da <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	2100      	movs	r1, #0
 800e5be:	68f8      	ldr	r0, [r7, #12]
 800e5c0:	f000 fed2 	bl	800f368 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	2100      	movs	r1, #0
 800e5d2:	68f8      	ldr	r0, [r7, #12]
 800e5d4:	f001 fbea 	bl	800fdac <USBD_LL_PrepareReceive>
 800e5d8:	e026      	b.n	800e628 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5e0:	68db      	ldr	r3, [r3, #12]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d00a      	beq.n	800e5fc <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e5ec:	2b03      	cmp	r3, #3
 800e5ee:	d105      	bne.n	800e5fc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5f6:	68db      	ldr	r3, [r3, #12]
 800e5f8:	68f8      	ldr	r0, [r7, #12]
 800e5fa:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800e5fc:	2180      	movs	r1, #128	; 0x80
 800e5fe:	68f8      	ldr	r0, [r7, #12]
 800e600:	f001 fb28 	bl	800fc54 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800e604:	68f8      	ldr	r0, [r7, #12]
 800e606:	f000 ff04 	bl	800f412 <USBD_CtlReceiveStatus>
 800e60a:	e00d      	b.n	800e628 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e612:	2b04      	cmp	r3, #4
 800e614:	d004      	beq.n	800e620 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d103      	bne.n	800e628 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800e620:	2180      	movs	r1, #128	; 0x80
 800e622:	68f8      	ldr	r0, [r7, #12]
 800e624:	f001 fb16 	bl	800fc54 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e62e:	2b01      	cmp	r3, #1
 800e630:	d11d      	bne.n	800e66e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800e632:	68f8      	ldr	r0, [r7, #12]
 800e634:	f7ff fe82 	bl	800e33c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	2200      	movs	r2, #0
 800e63c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e640:	e015      	b.n	800e66e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e648:	695b      	ldr	r3, [r3, #20]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d00d      	beq.n	800e66a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800e654:	2b03      	cmp	r3, #3
 800e656:	d108      	bne.n	800e66a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e65e:	695b      	ldr	r3, [r3, #20]
 800e660:	7afa      	ldrb	r2, [r7, #11]
 800e662:	4611      	mov	r1, r2
 800e664:	68f8      	ldr	r0, [r7, #12]
 800e666:	4798      	blx	r3
 800e668:	e001      	b.n	800e66e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e66a:	2302      	movs	r3, #2
 800e66c:	e000      	b.n	800e670 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800e66e:	2300      	movs	r3, #0
}
 800e670:	4618      	mov	r0, r3
 800e672:	3718      	adds	r7, #24
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}

0800e678 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b082      	sub	sp, #8
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e680:	2340      	movs	r3, #64	; 0x40
 800e682:	2200      	movs	r2, #0
 800e684:	2100      	movs	r1, #0
 800e686:	6878      	ldr	r0, [r7, #4]
 800e688:	f001 fa9f 	bl	800fbca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	2201      	movs	r2, #1
 800e690:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2240      	movs	r2, #64	; 0x40
 800e698:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e69c:	2340      	movs	r3, #64	; 0x40
 800e69e:	2200      	movs	r2, #0
 800e6a0:	2180      	movs	r1, #128	; 0x80
 800e6a2:	6878      	ldr	r0, [r7, #4]
 800e6a4:	f001 fa91 	bl	800fbca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	2201      	movs	r2, #1
 800e6ac:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	2240      	movs	r2, #64	; 0x40
 800e6b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2201      	movs	r2, #1
 800e6b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2200      	movs	r2, #0
 800e6c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d009      	beq.n	800e6f0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e6e2:	685b      	ldr	r3, [r3, #4]
 800e6e4:	687a      	ldr	r2, [r7, #4]
 800e6e6:	6852      	ldr	r2, [r2, #4]
 800e6e8:	b2d2      	uxtb	r2, r2
 800e6ea:	4611      	mov	r1, r2
 800e6ec:	6878      	ldr	r0, [r7, #4]
 800e6ee:	4798      	blx	r3
  }

  return USBD_OK;
 800e6f0:	2300      	movs	r3, #0
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	3708      	adds	r7, #8
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}

0800e6fa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e6fa:	b480      	push	{r7}
 800e6fc:	b083      	sub	sp, #12
 800e6fe:	af00      	add	r7, sp, #0
 800e700:	6078      	str	r0, [r7, #4]
 800e702:	460b      	mov	r3, r1
 800e704:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	78fa      	ldrb	r2, [r7, #3]
 800e70a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e70c:	2300      	movs	r3, #0
}
 800e70e:	4618      	mov	r0, r3
 800e710:	370c      	adds	r7, #12
 800e712:	46bd      	mov	sp, r7
 800e714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e718:	4770      	bx	lr

0800e71a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e71a:	b480      	push	{r7}
 800e71c:	b083      	sub	sp, #12
 800e71e:	af00      	add	r7, sp, #0
 800e720:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	2204      	movs	r2, #4
 800e732:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e736:	2300      	movs	r3, #0
}
 800e738:	4618      	mov	r0, r3
 800e73a:	370c      	adds	r7, #12
 800e73c:	46bd      	mov	sp, r7
 800e73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e742:	4770      	bx	lr

0800e744 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e744:	b480      	push	{r7}
 800e746:	b083      	sub	sp, #12
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e752:	2b04      	cmp	r3, #4
 800e754:	d105      	bne.n	800e762 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e762:	2300      	movs	r3, #0
}
 800e764:	4618      	mov	r0, r3
 800e766:	370c      	adds	r7, #12
 800e768:	46bd      	mov	sp, r7
 800e76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76e:	4770      	bx	lr

0800e770 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b082      	sub	sp, #8
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e77e:	2b03      	cmp	r3, #3
 800e780:	d10b      	bne.n	800e79a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e788:	69db      	ldr	r3, [r3, #28]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d005      	beq.n	800e79a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e794:	69db      	ldr	r3, [r3, #28]
 800e796:	6878      	ldr	r0, [r7, #4]
 800e798:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e79a:	2300      	movs	r3, #0
}
 800e79c:	4618      	mov	r0, r3
 800e79e:	3708      	adds	r7, #8
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}

0800e7a4 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e7a4:	b480      	push	{r7}
 800e7a6:	b083      	sub	sp, #12
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
 800e7ac:	460b      	mov	r3, r1
 800e7ae:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800e7b0:	2300      	movs	r3, #0
}
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	370c      	adds	r7, #12
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7bc:	4770      	bx	lr

0800e7be <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e7be:	b480      	push	{r7}
 800e7c0:	b083      	sub	sp, #12
 800e7c2:	af00      	add	r7, sp, #0
 800e7c4:	6078      	str	r0, [r7, #4]
 800e7c6:	460b      	mov	r3, r1
 800e7c8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800e7ca:	2300      	movs	r3, #0
}
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	370c      	adds	r7, #12
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d6:	4770      	bx	lr

0800e7d8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e7d8:	b480      	push	{r7}
 800e7da:	b083      	sub	sp, #12
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e7e0:	2300      	movs	r3, #0
}
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	370c      	adds	r7, #12
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ec:	4770      	bx	lr

0800e7ee <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e7ee:	b580      	push	{r7, lr}
 800e7f0:	b082      	sub	sp, #8
 800e7f2:	af00      	add	r7, sp, #0
 800e7f4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	2201      	movs	r2, #1
 800e7fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e804:	685b      	ldr	r3, [r3, #4]
 800e806:	687a      	ldr	r2, [r7, #4]
 800e808:	6852      	ldr	r2, [r2, #4]
 800e80a:	b2d2      	uxtb	r2, r2
 800e80c:	4611      	mov	r1, r2
 800e80e:	6878      	ldr	r0, [r7, #4]
 800e810:	4798      	blx	r3

  return USBD_OK;
 800e812:	2300      	movs	r3, #0
}
 800e814:	4618      	mov	r0, r3
 800e816:	3708      	adds	r7, #8
 800e818:	46bd      	mov	sp, r7
 800e81a:	bd80      	pop	{r7, pc}

0800e81c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b084      	sub	sp, #16
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
 800e824:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e826:	2300      	movs	r3, #0
 800e828:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	781b      	ldrb	r3, [r3, #0]
 800e82e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e832:	2b20      	cmp	r3, #32
 800e834:	d004      	beq.n	800e840 <USBD_StdDevReq+0x24>
 800e836:	2b40      	cmp	r3, #64	; 0x40
 800e838:	d002      	beq.n	800e840 <USBD_StdDevReq+0x24>
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d008      	beq.n	800e850 <USBD_StdDevReq+0x34>
 800e83e:	e04c      	b.n	800e8da <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e846:	689b      	ldr	r3, [r3, #8]
 800e848:	6839      	ldr	r1, [r7, #0]
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	4798      	blx	r3
      break;
 800e84e:	e049      	b.n	800e8e4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	785b      	ldrb	r3, [r3, #1]
 800e854:	2b09      	cmp	r3, #9
 800e856:	d83a      	bhi.n	800e8ce <USBD_StdDevReq+0xb2>
 800e858:	a201      	add	r2, pc, #4	; (adr r2, 800e860 <USBD_StdDevReq+0x44>)
 800e85a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e85e:	bf00      	nop
 800e860:	0800e8b1 	.word	0x0800e8b1
 800e864:	0800e8c5 	.word	0x0800e8c5
 800e868:	0800e8cf 	.word	0x0800e8cf
 800e86c:	0800e8bb 	.word	0x0800e8bb
 800e870:	0800e8cf 	.word	0x0800e8cf
 800e874:	0800e893 	.word	0x0800e893
 800e878:	0800e889 	.word	0x0800e889
 800e87c:	0800e8cf 	.word	0x0800e8cf
 800e880:	0800e8a7 	.word	0x0800e8a7
 800e884:	0800e89d 	.word	0x0800e89d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e888:	6839      	ldr	r1, [r7, #0]
 800e88a:	6878      	ldr	r0, [r7, #4]
 800e88c:	f000 f9d4 	bl	800ec38 <USBD_GetDescriptor>
          break;
 800e890:	e022      	b.n	800e8d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e892:	6839      	ldr	r1, [r7, #0]
 800e894:	6878      	ldr	r0, [r7, #4]
 800e896:	f000 fb37 	bl	800ef08 <USBD_SetAddress>
          break;
 800e89a:	e01d      	b.n	800e8d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800e89c:	6839      	ldr	r1, [r7, #0]
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f000 fb74 	bl	800ef8c <USBD_SetConfig>
          break;
 800e8a4:	e018      	b.n	800e8d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e8a6:	6839      	ldr	r1, [r7, #0]
 800e8a8:	6878      	ldr	r0, [r7, #4]
 800e8aa:	f000 fbfd 	bl	800f0a8 <USBD_GetConfig>
          break;
 800e8ae:	e013      	b.n	800e8d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e8b0:	6839      	ldr	r1, [r7, #0]
 800e8b2:	6878      	ldr	r0, [r7, #4]
 800e8b4:	f000 fc2c 	bl	800f110 <USBD_GetStatus>
          break;
 800e8b8:	e00e      	b.n	800e8d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e8ba:	6839      	ldr	r1, [r7, #0]
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f000 fc5a 	bl	800f176 <USBD_SetFeature>
          break;
 800e8c2:	e009      	b.n	800e8d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e8c4:	6839      	ldr	r1, [r7, #0]
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f000 fc69 	bl	800f19e <USBD_ClrFeature>
          break;
 800e8cc:	e004      	b.n	800e8d8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800e8ce:	6839      	ldr	r1, [r7, #0]
 800e8d0:	6878      	ldr	r0, [r7, #4]
 800e8d2:	f000 fcc2 	bl	800f25a <USBD_CtlError>
          break;
 800e8d6:	bf00      	nop
      }
      break;
 800e8d8:	e004      	b.n	800e8e4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800e8da:	6839      	ldr	r1, [r7, #0]
 800e8dc:	6878      	ldr	r0, [r7, #4]
 800e8de:	f000 fcbc 	bl	800f25a <USBD_CtlError>
      break;
 800e8e2:	bf00      	nop
  }

  return ret;
 800e8e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	3710      	adds	r7, #16
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	bd80      	pop	{r7, pc}
 800e8ee:	bf00      	nop

0800e8f0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b084      	sub	sp, #16
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
 800e8f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	781b      	ldrb	r3, [r3, #0]
 800e902:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e906:	2b20      	cmp	r3, #32
 800e908:	d003      	beq.n	800e912 <USBD_StdItfReq+0x22>
 800e90a:	2b40      	cmp	r3, #64	; 0x40
 800e90c:	d001      	beq.n	800e912 <USBD_StdItfReq+0x22>
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d12a      	bne.n	800e968 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e918:	3b01      	subs	r3, #1
 800e91a:	2b02      	cmp	r3, #2
 800e91c:	d81d      	bhi.n	800e95a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	889b      	ldrh	r3, [r3, #4]
 800e922:	b2db      	uxtb	r3, r3
 800e924:	2b01      	cmp	r3, #1
 800e926:	d813      	bhi.n	800e950 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e92e:	689b      	ldr	r3, [r3, #8]
 800e930:	6839      	ldr	r1, [r7, #0]
 800e932:	6878      	ldr	r0, [r7, #4]
 800e934:	4798      	blx	r3
 800e936:	4603      	mov	r3, r0
 800e938:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	88db      	ldrh	r3, [r3, #6]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d110      	bne.n	800e964 <USBD_StdItfReq+0x74>
 800e942:	7bfb      	ldrb	r3, [r7, #15]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d10d      	bne.n	800e964 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800e948:	6878      	ldr	r0, [r7, #4]
 800e94a:	f000 fd4f 	bl	800f3ec <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e94e:	e009      	b.n	800e964 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800e950:	6839      	ldr	r1, [r7, #0]
 800e952:	6878      	ldr	r0, [r7, #4]
 800e954:	f000 fc81 	bl	800f25a <USBD_CtlError>
          break;
 800e958:	e004      	b.n	800e964 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800e95a:	6839      	ldr	r1, [r7, #0]
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f000 fc7c 	bl	800f25a <USBD_CtlError>
          break;
 800e962:	e000      	b.n	800e966 <USBD_StdItfReq+0x76>
          break;
 800e964:	bf00      	nop
      }
      break;
 800e966:	e004      	b.n	800e972 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800e968:	6839      	ldr	r1, [r7, #0]
 800e96a:	6878      	ldr	r0, [r7, #4]
 800e96c:	f000 fc75 	bl	800f25a <USBD_CtlError>
      break;
 800e970:	bf00      	nop
  }

  return USBD_OK;
 800e972:	2300      	movs	r3, #0
}
 800e974:	4618      	mov	r0, r3
 800e976:	3710      	adds	r7, #16
 800e978:	46bd      	mov	sp, r7
 800e97a:	bd80      	pop	{r7, pc}

0800e97c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b084      	sub	sp, #16
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
 800e984:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800e986:	2300      	movs	r3, #0
 800e988:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800e98a:	683b      	ldr	r3, [r7, #0]
 800e98c:	889b      	ldrh	r3, [r3, #4]
 800e98e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	781b      	ldrb	r3, [r3, #0]
 800e994:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e998:	2b20      	cmp	r3, #32
 800e99a:	d004      	beq.n	800e9a6 <USBD_StdEPReq+0x2a>
 800e99c:	2b40      	cmp	r3, #64	; 0x40
 800e99e:	d002      	beq.n	800e9a6 <USBD_StdEPReq+0x2a>
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d008      	beq.n	800e9b6 <USBD_StdEPReq+0x3a>
 800e9a4:	e13d      	b.n	800ec22 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e9ac:	689b      	ldr	r3, [r3, #8]
 800e9ae:	6839      	ldr	r1, [r7, #0]
 800e9b0:	6878      	ldr	r0, [r7, #4]
 800e9b2:	4798      	blx	r3
      break;
 800e9b4:	e13a      	b.n	800ec2c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	781b      	ldrb	r3, [r3, #0]
 800e9ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e9be:	2b20      	cmp	r3, #32
 800e9c0:	d10a      	bne.n	800e9d8 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e9c8:	689b      	ldr	r3, [r3, #8]
 800e9ca:	6839      	ldr	r1, [r7, #0]
 800e9cc:	6878      	ldr	r0, [r7, #4]
 800e9ce:	4798      	blx	r3
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	73fb      	strb	r3, [r7, #15]

        return ret;
 800e9d4:	7bfb      	ldrb	r3, [r7, #15]
 800e9d6:	e12a      	b.n	800ec2e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	785b      	ldrb	r3, [r3, #1]
 800e9dc:	2b01      	cmp	r3, #1
 800e9de:	d03e      	beq.n	800ea5e <USBD_StdEPReq+0xe2>
 800e9e0:	2b03      	cmp	r3, #3
 800e9e2:	d002      	beq.n	800e9ea <USBD_StdEPReq+0x6e>
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d070      	beq.n	800eaca <USBD_StdEPReq+0x14e>
 800e9e8:	e115      	b.n	800ec16 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e9f0:	2b02      	cmp	r3, #2
 800e9f2:	d002      	beq.n	800e9fa <USBD_StdEPReq+0x7e>
 800e9f4:	2b03      	cmp	r3, #3
 800e9f6:	d015      	beq.n	800ea24 <USBD_StdEPReq+0xa8>
 800e9f8:	e02b      	b.n	800ea52 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e9fa:	7bbb      	ldrb	r3, [r7, #14]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d00c      	beq.n	800ea1a <USBD_StdEPReq+0x9e>
 800ea00:	7bbb      	ldrb	r3, [r7, #14]
 800ea02:	2b80      	cmp	r3, #128	; 0x80
 800ea04:	d009      	beq.n	800ea1a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ea06:	7bbb      	ldrb	r3, [r7, #14]
 800ea08:	4619      	mov	r1, r3
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	f001 f922 	bl	800fc54 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ea10:	2180      	movs	r1, #128	; 0x80
 800ea12:	6878      	ldr	r0, [r7, #4]
 800ea14:	f001 f91e 	bl	800fc54 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ea18:	e020      	b.n	800ea5c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800ea1a:	6839      	ldr	r1, [r7, #0]
 800ea1c:	6878      	ldr	r0, [r7, #4]
 800ea1e:	f000 fc1c 	bl	800f25a <USBD_CtlError>
              break;
 800ea22:	e01b      	b.n	800ea5c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ea24:	683b      	ldr	r3, [r7, #0]
 800ea26:	885b      	ldrh	r3, [r3, #2]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d10e      	bne.n	800ea4a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800ea2c:	7bbb      	ldrb	r3, [r7, #14]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d00b      	beq.n	800ea4a <USBD_StdEPReq+0xce>
 800ea32:	7bbb      	ldrb	r3, [r7, #14]
 800ea34:	2b80      	cmp	r3, #128	; 0x80
 800ea36:	d008      	beq.n	800ea4a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	88db      	ldrh	r3, [r3, #6]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d104      	bne.n	800ea4a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800ea40:	7bbb      	ldrb	r3, [r7, #14]
 800ea42:	4619      	mov	r1, r3
 800ea44:	6878      	ldr	r0, [r7, #4]
 800ea46:	f001 f905 	bl	800fc54 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	f000 fcce 	bl	800f3ec <USBD_CtlSendStatus>

              break;
 800ea50:	e004      	b.n	800ea5c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800ea52:	6839      	ldr	r1, [r7, #0]
 800ea54:	6878      	ldr	r0, [r7, #4]
 800ea56:	f000 fc00 	bl	800f25a <USBD_CtlError>
              break;
 800ea5a:	bf00      	nop
          }
          break;
 800ea5c:	e0e0      	b.n	800ec20 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea64:	2b02      	cmp	r3, #2
 800ea66:	d002      	beq.n	800ea6e <USBD_StdEPReq+0xf2>
 800ea68:	2b03      	cmp	r3, #3
 800ea6a:	d015      	beq.n	800ea98 <USBD_StdEPReq+0x11c>
 800ea6c:	e026      	b.n	800eabc <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ea6e:	7bbb      	ldrb	r3, [r7, #14]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d00c      	beq.n	800ea8e <USBD_StdEPReq+0x112>
 800ea74:	7bbb      	ldrb	r3, [r7, #14]
 800ea76:	2b80      	cmp	r3, #128	; 0x80
 800ea78:	d009      	beq.n	800ea8e <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ea7a:	7bbb      	ldrb	r3, [r7, #14]
 800ea7c:	4619      	mov	r1, r3
 800ea7e:	6878      	ldr	r0, [r7, #4]
 800ea80:	f001 f8e8 	bl	800fc54 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ea84:	2180      	movs	r1, #128	; 0x80
 800ea86:	6878      	ldr	r0, [r7, #4]
 800ea88:	f001 f8e4 	bl	800fc54 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ea8c:	e01c      	b.n	800eac8 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800ea8e:	6839      	ldr	r1, [r7, #0]
 800ea90:	6878      	ldr	r0, [r7, #4]
 800ea92:	f000 fbe2 	bl	800f25a <USBD_CtlError>
              break;
 800ea96:	e017      	b.n	800eac8 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	885b      	ldrh	r3, [r3, #2]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d112      	bne.n	800eac6 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800eaa0:	7bbb      	ldrb	r3, [r7, #14]
 800eaa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d004      	beq.n	800eab4 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800eaaa:	7bbb      	ldrb	r3, [r7, #14]
 800eaac:	4619      	mov	r1, r3
 800eaae:	6878      	ldr	r0, [r7, #4]
 800eab0:	f001 f8ef 	bl	800fc92 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800eab4:	6878      	ldr	r0, [r7, #4]
 800eab6:	f000 fc99 	bl	800f3ec <USBD_CtlSendStatus>
              }
              break;
 800eaba:	e004      	b.n	800eac6 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800eabc:	6839      	ldr	r1, [r7, #0]
 800eabe:	6878      	ldr	r0, [r7, #4]
 800eac0:	f000 fbcb 	bl	800f25a <USBD_CtlError>
              break;
 800eac4:	e000      	b.n	800eac8 <USBD_StdEPReq+0x14c>
              break;
 800eac6:	bf00      	nop
          }
          break;
 800eac8:	e0aa      	b.n	800ec20 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ead0:	2b02      	cmp	r3, #2
 800ead2:	d002      	beq.n	800eada <USBD_StdEPReq+0x15e>
 800ead4:	2b03      	cmp	r3, #3
 800ead6:	d032      	beq.n	800eb3e <USBD_StdEPReq+0x1c2>
 800ead8:	e097      	b.n	800ec0a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eada:	7bbb      	ldrb	r3, [r7, #14]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d007      	beq.n	800eaf0 <USBD_StdEPReq+0x174>
 800eae0:	7bbb      	ldrb	r3, [r7, #14]
 800eae2:	2b80      	cmp	r3, #128	; 0x80
 800eae4:	d004      	beq.n	800eaf0 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800eae6:	6839      	ldr	r1, [r7, #0]
 800eae8:	6878      	ldr	r0, [r7, #4]
 800eaea:	f000 fbb6 	bl	800f25a <USBD_CtlError>
                break;
 800eaee:	e091      	b.n	800ec14 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eaf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	da0b      	bge.n	800eb10 <USBD_StdEPReq+0x194>
 800eaf8:	7bbb      	ldrb	r3, [r7, #14]
 800eafa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eafe:	4613      	mov	r3, r2
 800eb00:	009b      	lsls	r3, r3, #2
 800eb02:	4413      	add	r3, r2
 800eb04:	009b      	lsls	r3, r3, #2
 800eb06:	3310      	adds	r3, #16
 800eb08:	687a      	ldr	r2, [r7, #4]
 800eb0a:	4413      	add	r3, r2
 800eb0c:	3304      	adds	r3, #4
 800eb0e:	e00b      	b.n	800eb28 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800eb10:	7bbb      	ldrb	r3, [r7, #14]
 800eb12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eb16:	4613      	mov	r3, r2
 800eb18:	009b      	lsls	r3, r3, #2
 800eb1a:	4413      	add	r3, r2
 800eb1c:	009b      	lsls	r3, r3, #2
 800eb1e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800eb22:	687a      	ldr	r2, [r7, #4]
 800eb24:	4413      	add	r3, r2
 800eb26:	3304      	adds	r3, #4
 800eb28:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800eb2a:	68bb      	ldr	r3, [r7, #8]
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	2202      	movs	r2, #2
 800eb34:	4619      	mov	r1, r3
 800eb36:	6878      	ldr	r0, [r7, #4]
 800eb38:	f000 fbfa 	bl	800f330 <USBD_CtlSendData>
              break;
 800eb3c:	e06a      	b.n	800ec14 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800eb3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	da11      	bge.n	800eb6a <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800eb46:	7bbb      	ldrb	r3, [r7, #14]
 800eb48:	f003 020f 	and.w	r2, r3, #15
 800eb4c:	6879      	ldr	r1, [r7, #4]
 800eb4e:	4613      	mov	r3, r2
 800eb50:	009b      	lsls	r3, r3, #2
 800eb52:	4413      	add	r3, r2
 800eb54:	009b      	lsls	r3, r3, #2
 800eb56:	440b      	add	r3, r1
 800eb58:	3318      	adds	r3, #24
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d117      	bne.n	800eb90 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800eb60:	6839      	ldr	r1, [r7, #0]
 800eb62:	6878      	ldr	r0, [r7, #4]
 800eb64:	f000 fb79 	bl	800f25a <USBD_CtlError>
                  break;
 800eb68:	e054      	b.n	800ec14 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800eb6a:	7bbb      	ldrb	r3, [r7, #14]
 800eb6c:	f003 020f 	and.w	r2, r3, #15
 800eb70:	6879      	ldr	r1, [r7, #4]
 800eb72:	4613      	mov	r3, r2
 800eb74:	009b      	lsls	r3, r3, #2
 800eb76:	4413      	add	r3, r2
 800eb78:	009b      	lsls	r3, r3, #2
 800eb7a:	440b      	add	r3, r1
 800eb7c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d104      	bne.n	800eb90 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800eb86:	6839      	ldr	r1, [r7, #0]
 800eb88:	6878      	ldr	r0, [r7, #4]
 800eb8a:	f000 fb66 	bl	800f25a <USBD_CtlError>
                  break;
 800eb8e:	e041      	b.n	800ec14 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eb90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	da0b      	bge.n	800ebb0 <USBD_StdEPReq+0x234>
 800eb98:	7bbb      	ldrb	r3, [r7, #14]
 800eb9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eb9e:	4613      	mov	r3, r2
 800eba0:	009b      	lsls	r3, r3, #2
 800eba2:	4413      	add	r3, r2
 800eba4:	009b      	lsls	r3, r3, #2
 800eba6:	3310      	adds	r3, #16
 800eba8:	687a      	ldr	r2, [r7, #4]
 800ebaa:	4413      	add	r3, r2
 800ebac:	3304      	adds	r3, #4
 800ebae:	e00b      	b.n	800ebc8 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ebb0:	7bbb      	ldrb	r3, [r7, #14]
 800ebb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ebb6:	4613      	mov	r3, r2
 800ebb8:	009b      	lsls	r3, r3, #2
 800ebba:	4413      	add	r3, r2
 800ebbc:	009b      	lsls	r3, r3, #2
 800ebbe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ebc2:	687a      	ldr	r2, [r7, #4]
 800ebc4:	4413      	add	r3, r2
 800ebc6:	3304      	adds	r3, #4
 800ebc8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ebca:	7bbb      	ldrb	r3, [r7, #14]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d002      	beq.n	800ebd6 <USBD_StdEPReq+0x25a>
 800ebd0:	7bbb      	ldrb	r3, [r7, #14]
 800ebd2:	2b80      	cmp	r3, #128	; 0x80
 800ebd4:	d103      	bne.n	800ebde <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800ebd6:	68bb      	ldr	r3, [r7, #8]
 800ebd8:	2200      	movs	r2, #0
 800ebda:	601a      	str	r2, [r3, #0]
 800ebdc:	e00e      	b.n	800ebfc <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800ebde:	7bbb      	ldrb	r3, [r7, #14]
 800ebe0:	4619      	mov	r1, r3
 800ebe2:	6878      	ldr	r0, [r7, #4]
 800ebe4:	f001 f874 	bl	800fcd0 <USBD_LL_IsStallEP>
 800ebe8:	4603      	mov	r3, r0
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d003      	beq.n	800ebf6 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800ebee:	68bb      	ldr	r3, [r7, #8]
 800ebf0:	2201      	movs	r2, #1
 800ebf2:	601a      	str	r2, [r3, #0]
 800ebf4:	e002      	b.n	800ebfc <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800ebf6:	68bb      	ldr	r3, [r7, #8]
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ebfc:	68bb      	ldr	r3, [r7, #8]
 800ebfe:	2202      	movs	r2, #2
 800ec00:	4619      	mov	r1, r3
 800ec02:	6878      	ldr	r0, [r7, #4]
 800ec04:	f000 fb94 	bl	800f330 <USBD_CtlSendData>
              break;
 800ec08:	e004      	b.n	800ec14 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800ec0a:	6839      	ldr	r1, [r7, #0]
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	f000 fb24 	bl	800f25a <USBD_CtlError>
              break;
 800ec12:	bf00      	nop
          }
          break;
 800ec14:	e004      	b.n	800ec20 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800ec16:	6839      	ldr	r1, [r7, #0]
 800ec18:	6878      	ldr	r0, [r7, #4]
 800ec1a:	f000 fb1e 	bl	800f25a <USBD_CtlError>
          break;
 800ec1e:	bf00      	nop
      }
      break;
 800ec20:	e004      	b.n	800ec2c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800ec22:	6839      	ldr	r1, [r7, #0]
 800ec24:	6878      	ldr	r0, [r7, #4]
 800ec26:	f000 fb18 	bl	800f25a <USBD_CtlError>
      break;
 800ec2a:	bf00      	nop
  }

  return ret;
 800ec2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec2e:	4618      	mov	r0, r3
 800ec30:	3710      	adds	r7, #16
 800ec32:	46bd      	mov	sp, r7
 800ec34:	bd80      	pop	{r7, pc}
	...

0800ec38 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b084      	sub	sp, #16
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
 800ec40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ec42:	2300      	movs	r3, #0
 800ec44:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ec46:	2300      	movs	r3, #0
 800ec48:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ec4e:	683b      	ldr	r3, [r7, #0]
 800ec50:	885b      	ldrh	r3, [r3, #2]
 800ec52:	0a1b      	lsrs	r3, r3, #8
 800ec54:	b29b      	uxth	r3, r3
 800ec56:	3b01      	subs	r3, #1
 800ec58:	2b06      	cmp	r3, #6
 800ec5a:	f200 8128 	bhi.w	800eeae <USBD_GetDescriptor+0x276>
 800ec5e:	a201      	add	r2, pc, #4	; (adr r2, 800ec64 <USBD_GetDescriptor+0x2c>)
 800ec60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec64:	0800ec81 	.word	0x0800ec81
 800ec68:	0800ec99 	.word	0x0800ec99
 800ec6c:	0800ecd9 	.word	0x0800ecd9
 800ec70:	0800eeaf 	.word	0x0800eeaf
 800ec74:	0800eeaf 	.word	0x0800eeaf
 800ec78:	0800ee4f 	.word	0x0800ee4f
 800ec7c:	0800ee7b 	.word	0x0800ee7b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	687a      	ldr	r2, [r7, #4]
 800ec8a:	7c12      	ldrb	r2, [r2, #16]
 800ec8c:	f107 0108 	add.w	r1, r7, #8
 800ec90:	4610      	mov	r0, r2
 800ec92:	4798      	blx	r3
 800ec94:	60f8      	str	r0, [r7, #12]
      break;
 800ec96:	e112      	b.n	800eebe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	7c1b      	ldrb	r3, [r3, #16]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d10d      	bne.n	800ecbc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eca8:	f107 0208 	add.w	r2, r7, #8
 800ecac:	4610      	mov	r0, r2
 800ecae:	4798      	blx	r3
 800ecb0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	3301      	adds	r3, #1
 800ecb6:	2202      	movs	r2, #2
 800ecb8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ecba:	e100      	b.n	800eebe <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ecc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecc4:	f107 0208 	add.w	r2, r7, #8
 800ecc8:	4610      	mov	r0, r2
 800ecca:	4798      	blx	r3
 800eccc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	3301      	adds	r3, #1
 800ecd2:	2202      	movs	r2, #2
 800ecd4:	701a      	strb	r2, [r3, #0]
      break;
 800ecd6:	e0f2      	b.n	800eebe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ecd8:	683b      	ldr	r3, [r7, #0]
 800ecda:	885b      	ldrh	r3, [r3, #2]
 800ecdc:	b2db      	uxtb	r3, r3
 800ecde:	2b05      	cmp	r3, #5
 800ece0:	f200 80ac 	bhi.w	800ee3c <USBD_GetDescriptor+0x204>
 800ece4:	a201      	add	r2, pc, #4	; (adr r2, 800ecec <USBD_GetDescriptor+0xb4>)
 800ece6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecea:	bf00      	nop
 800ecec:	0800ed05 	.word	0x0800ed05
 800ecf0:	0800ed39 	.word	0x0800ed39
 800ecf4:	0800ed6d 	.word	0x0800ed6d
 800ecf8:	0800eda1 	.word	0x0800eda1
 800ecfc:	0800edd5 	.word	0x0800edd5
 800ed00:	0800ee09 	.word	0x0800ee09
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ed0a:	685b      	ldr	r3, [r3, #4]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d00b      	beq.n	800ed28 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ed16:	685b      	ldr	r3, [r3, #4]
 800ed18:	687a      	ldr	r2, [r7, #4]
 800ed1a:	7c12      	ldrb	r2, [r2, #16]
 800ed1c:	f107 0108 	add.w	r1, r7, #8
 800ed20:	4610      	mov	r0, r2
 800ed22:	4798      	blx	r3
 800ed24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ed26:	e091      	b.n	800ee4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ed28:	6839      	ldr	r1, [r7, #0]
 800ed2a:	6878      	ldr	r0, [r7, #4]
 800ed2c:	f000 fa95 	bl	800f25a <USBD_CtlError>
            err++;
 800ed30:	7afb      	ldrb	r3, [r7, #11]
 800ed32:	3301      	adds	r3, #1
 800ed34:	72fb      	strb	r3, [r7, #11]
          break;
 800ed36:	e089      	b.n	800ee4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ed3e:	689b      	ldr	r3, [r3, #8]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d00b      	beq.n	800ed5c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ed4a:	689b      	ldr	r3, [r3, #8]
 800ed4c:	687a      	ldr	r2, [r7, #4]
 800ed4e:	7c12      	ldrb	r2, [r2, #16]
 800ed50:	f107 0108 	add.w	r1, r7, #8
 800ed54:	4610      	mov	r0, r2
 800ed56:	4798      	blx	r3
 800ed58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ed5a:	e077      	b.n	800ee4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ed5c:	6839      	ldr	r1, [r7, #0]
 800ed5e:	6878      	ldr	r0, [r7, #4]
 800ed60:	f000 fa7b 	bl	800f25a <USBD_CtlError>
            err++;
 800ed64:	7afb      	ldrb	r3, [r7, #11]
 800ed66:	3301      	adds	r3, #1
 800ed68:	72fb      	strb	r3, [r7, #11]
          break;
 800ed6a:	e06f      	b.n	800ee4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ed72:	68db      	ldr	r3, [r3, #12]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d00b      	beq.n	800ed90 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ed7e:	68db      	ldr	r3, [r3, #12]
 800ed80:	687a      	ldr	r2, [r7, #4]
 800ed82:	7c12      	ldrb	r2, [r2, #16]
 800ed84:	f107 0108 	add.w	r1, r7, #8
 800ed88:	4610      	mov	r0, r2
 800ed8a:	4798      	blx	r3
 800ed8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ed8e:	e05d      	b.n	800ee4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ed90:	6839      	ldr	r1, [r7, #0]
 800ed92:	6878      	ldr	r0, [r7, #4]
 800ed94:	f000 fa61 	bl	800f25a <USBD_CtlError>
            err++;
 800ed98:	7afb      	ldrb	r3, [r7, #11]
 800ed9a:	3301      	adds	r3, #1
 800ed9c:	72fb      	strb	r3, [r7, #11]
          break;
 800ed9e:	e055      	b.n	800ee4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800eda6:	691b      	ldr	r3, [r3, #16]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d00b      	beq.n	800edc4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800edb2:	691b      	ldr	r3, [r3, #16]
 800edb4:	687a      	ldr	r2, [r7, #4]
 800edb6:	7c12      	ldrb	r2, [r2, #16]
 800edb8:	f107 0108 	add.w	r1, r7, #8
 800edbc:	4610      	mov	r0, r2
 800edbe:	4798      	blx	r3
 800edc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800edc2:	e043      	b.n	800ee4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800edc4:	6839      	ldr	r1, [r7, #0]
 800edc6:	6878      	ldr	r0, [r7, #4]
 800edc8:	f000 fa47 	bl	800f25a <USBD_CtlError>
            err++;
 800edcc:	7afb      	ldrb	r3, [r7, #11]
 800edce:	3301      	adds	r3, #1
 800edd0:	72fb      	strb	r3, [r7, #11]
          break;
 800edd2:	e03b      	b.n	800ee4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800edda:	695b      	ldr	r3, [r3, #20]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d00b      	beq.n	800edf8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ede6:	695b      	ldr	r3, [r3, #20]
 800ede8:	687a      	ldr	r2, [r7, #4]
 800edea:	7c12      	ldrb	r2, [r2, #16]
 800edec:	f107 0108 	add.w	r1, r7, #8
 800edf0:	4610      	mov	r0, r2
 800edf2:	4798      	blx	r3
 800edf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800edf6:	e029      	b.n	800ee4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800edf8:	6839      	ldr	r1, [r7, #0]
 800edfa:	6878      	ldr	r0, [r7, #4]
 800edfc:	f000 fa2d 	bl	800f25a <USBD_CtlError>
            err++;
 800ee00:	7afb      	ldrb	r3, [r7, #11]
 800ee02:	3301      	adds	r3, #1
 800ee04:	72fb      	strb	r3, [r7, #11]
          break;
 800ee06:	e021      	b.n	800ee4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ee0e:	699b      	ldr	r3, [r3, #24]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d00b      	beq.n	800ee2c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ee1a:	699b      	ldr	r3, [r3, #24]
 800ee1c:	687a      	ldr	r2, [r7, #4]
 800ee1e:	7c12      	ldrb	r2, [r2, #16]
 800ee20:	f107 0108 	add.w	r1, r7, #8
 800ee24:	4610      	mov	r0, r2
 800ee26:	4798      	blx	r3
 800ee28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ee2a:	e00f      	b.n	800ee4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ee2c:	6839      	ldr	r1, [r7, #0]
 800ee2e:	6878      	ldr	r0, [r7, #4]
 800ee30:	f000 fa13 	bl	800f25a <USBD_CtlError>
            err++;
 800ee34:	7afb      	ldrb	r3, [r7, #11]
 800ee36:	3301      	adds	r3, #1
 800ee38:	72fb      	strb	r3, [r7, #11]
          break;
 800ee3a:	e007      	b.n	800ee4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800ee3c:	6839      	ldr	r1, [r7, #0]
 800ee3e:	6878      	ldr	r0, [r7, #4]
 800ee40:	f000 fa0b 	bl	800f25a <USBD_CtlError>
          err++;
 800ee44:	7afb      	ldrb	r3, [r7, #11]
 800ee46:	3301      	adds	r3, #1
 800ee48:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800ee4a:	e038      	b.n	800eebe <USBD_GetDescriptor+0x286>
 800ee4c:	e037      	b.n	800eebe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	7c1b      	ldrb	r3, [r3, #16]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d109      	bne.n	800ee6a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee5e:	f107 0208 	add.w	r2, r7, #8
 800ee62:	4610      	mov	r0, r2
 800ee64:	4798      	blx	r3
 800ee66:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ee68:	e029      	b.n	800eebe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ee6a:	6839      	ldr	r1, [r7, #0]
 800ee6c:	6878      	ldr	r0, [r7, #4]
 800ee6e:	f000 f9f4 	bl	800f25a <USBD_CtlError>
        err++;
 800ee72:	7afb      	ldrb	r3, [r7, #11]
 800ee74:	3301      	adds	r3, #1
 800ee76:	72fb      	strb	r3, [r7, #11]
      break;
 800ee78:	e021      	b.n	800eebe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	7c1b      	ldrb	r3, [r3, #16]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d10d      	bne.n	800ee9e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee8a:	f107 0208 	add.w	r2, r7, #8
 800ee8e:	4610      	mov	r0, r2
 800ee90:	4798      	blx	r3
 800ee92:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	3301      	adds	r3, #1
 800ee98:	2207      	movs	r2, #7
 800ee9a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ee9c:	e00f      	b.n	800eebe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ee9e:	6839      	ldr	r1, [r7, #0]
 800eea0:	6878      	ldr	r0, [r7, #4]
 800eea2:	f000 f9da 	bl	800f25a <USBD_CtlError>
        err++;
 800eea6:	7afb      	ldrb	r3, [r7, #11]
 800eea8:	3301      	adds	r3, #1
 800eeaa:	72fb      	strb	r3, [r7, #11]
      break;
 800eeac:	e007      	b.n	800eebe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800eeae:	6839      	ldr	r1, [r7, #0]
 800eeb0:	6878      	ldr	r0, [r7, #4]
 800eeb2:	f000 f9d2 	bl	800f25a <USBD_CtlError>
      err++;
 800eeb6:	7afb      	ldrb	r3, [r7, #11]
 800eeb8:	3301      	adds	r3, #1
 800eeba:	72fb      	strb	r3, [r7, #11]
      break;
 800eebc:	bf00      	nop
  }

  if (err != 0U)
 800eebe:	7afb      	ldrb	r3, [r7, #11]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d11c      	bne.n	800eefe <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800eec4:	893b      	ldrh	r3, [r7, #8]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d011      	beq.n	800eeee <USBD_GetDescriptor+0x2b6>
 800eeca:	683b      	ldr	r3, [r7, #0]
 800eecc:	88db      	ldrh	r3, [r3, #6]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d00d      	beq.n	800eeee <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800eed2:	683b      	ldr	r3, [r7, #0]
 800eed4:	88da      	ldrh	r2, [r3, #6]
 800eed6:	893b      	ldrh	r3, [r7, #8]
 800eed8:	4293      	cmp	r3, r2
 800eeda:	bf28      	it	cs
 800eedc:	4613      	movcs	r3, r2
 800eede:	b29b      	uxth	r3, r3
 800eee0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800eee2:	893b      	ldrh	r3, [r7, #8]
 800eee4:	461a      	mov	r2, r3
 800eee6:	68f9      	ldr	r1, [r7, #12]
 800eee8:	6878      	ldr	r0, [r7, #4]
 800eeea:	f000 fa21 	bl	800f330 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800eeee:	683b      	ldr	r3, [r7, #0]
 800eef0:	88db      	ldrh	r3, [r3, #6]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d104      	bne.n	800ef00 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800eef6:	6878      	ldr	r0, [r7, #4]
 800eef8:	f000 fa78 	bl	800f3ec <USBD_CtlSendStatus>
 800eefc:	e000      	b.n	800ef00 <USBD_GetDescriptor+0x2c8>
    return;
 800eefe:	bf00      	nop
    }
  }
}
 800ef00:	3710      	adds	r7, #16
 800ef02:	46bd      	mov	sp, r7
 800ef04:	bd80      	pop	{r7, pc}
 800ef06:	bf00      	nop

0800ef08 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b084      	sub	sp, #16
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
 800ef10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ef12:	683b      	ldr	r3, [r7, #0]
 800ef14:	889b      	ldrh	r3, [r3, #4]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d130      	bne.n	800ef7c <USBD_SetAddress+0x74>
 800ef1a:	683b      	ldr	r3, [r7, #0]
 800ef1c:	88db      	ldrh	r3, [r3, #6]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d12c      	bne.n	800ef7c <USBD_SetAddress+0x74>
 800ef22:	683b      	ldr	r3, [r7, #0]
 800ef24:	885b      	ldrh	r3, [r3, #2]
 800ef26:	2b7f      	cmp	r3, #127	; 0x7f
 800ef28:	d828      	bhi.n	800ef7c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ef2a:	683b      	ldr	r3, [r7, #0]
 800ef2c:	885b      	ldrh	r3, [r3, #2]
 800ef2e:	b2db      	uxtb	r3, r3
 800ef30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef3c:	2b03      	cmp	r3, #3
 800ef3e:	d104      	bne.n	800ef4a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800ef40:	6839      	ldr	r1, [r7, #0]
 800ef42:	6878      	ldr	r0, [r7, #4]
 800ef44:	f000 f989 	bl	800f25a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef48:	e01c      	b.n	800ef84 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	7bfa      	ldrb	r2, [r7, #15]
 800ef4e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ef52:	7bfb      	ldrb	r3, [r7, #15]
 800ef54:	4619      	mov	r1, r3
 800ef56:	6878      	ldr	r0, [r7, #4]
 800ef58:	f000 fee6 	bl	800fd28 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800ef5c:	6878      	ldr	r0, [r7, #4]
 800ef5e:	f000 fa45 	bl	800f3ec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ef62:	7bfb      	ldrb	r3, [r7, #15]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d004      	beq.n	800ef72 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	2202      	movs	r2, #2
 800ef6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef70:	e008      	b.n	800ef84 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	2201      	movs	r2, #1
 800ef76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef7a:	e003      	b.n	800ef84 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ef7c:	6839      	ldr	r1, [r7, #0]
 800ef7e:	6878      	ldr	r0, [r7, #4]
 800ef80:	f000 f96b 	bl	800f25a <USBD_CtlError>
  }
}
 800ef84:	bf00      	nop
 800ef86:	3710      	adds	r7, #16
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bd80      	pop	{r7, pc}

0800ef8c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b082      	sub	sp, #8
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
 800ef94:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	885b      	ldrh	r3, [r3, #2]
 800ef9a:	b2da      	uxtb	r2, r3
 800ef9c:	4b41      	ldr	r3, [pc, #260]	; (800f0a4 <USBD_SetConfig+0x118>)
 800ef9e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800efa0:	4b40      	ldr	r3, [pc, #256]	; (800f0a4 <USBD_SetConfig+0x118>)
 800efa2:	781b      	ldrb	r3, [r3, #0]
 800efa4:	2b01      	cmp	r3, #1
 800efa6:	d904      	bls.n	800efb2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800efa8:	6839      	ldr	r1, [r7, #0]
 800efaa:	6878      	ldr	r0, [r7, #4]
 800efac:	f000 f955 	bl	800f25a <USBD_CtlError>
 800efb0:	e075      	b.n	800f09e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800efb8:	2b02      	cmp	r3, #2
 800efba:	d002      	beq.n	800efc2 <USBD_SetConfig+0x36>
 800efbc:	2b03      	cmp	r3, #3
 800efbe:	d023      	beq.n	800f008 <USBD_SetConfig+0x7c>
 800efc0:	e062      	b.n	800f088 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800efc2:	4b38      	ldr	r3, [pc, #224]	; (800f0a4 <USBD_SetConfig+0x118>)
 800efc4:	781b      	ldrb	r3, [r3, #0]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d01a      	beq.n	800f000 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800efca:	4b36      	ldr	r3, [pc, #216]	; (800f0a4 <USBD_SetConfig+0x118>)
 800efcc:	781b      	ldrb	r3, [r3, #0]
 800efce:	461a      	mov	r2, r3
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	2203      	movs	r2, #3
 800efd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800efdc:	4b31      	ldr	r3, [pc, #196]	; (800f0a4 <USBD_SetConfig+0x118>)
 800efde:	781b      	ldrb	r3, [r3, #0]
 800efe0:	4619      	mov	r1, r3
 800efe2:	6878      	ldr	r0, [r7, #4]
 800efe4:	f7ff f9b5 	bl	800e352 <USBD_SetClassConfig>
 800efe8:	4603      	mov	r3, r0
 800efea:	2b02      	cmp	r3, #2
 800efec:	d104      	bne.n	800eff8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800efee:	6839      	ldr	r1, [r7, #0]
 800eff0:	6878      	ldr	r0, [r7, #4]
 800eff2:	f000 f932 	bl	800f25a <USBD_CtlError>
            return;
 800eff6:	e052      	b.n	800f09e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800eff8:	6878      	ldr	r0, [r7, #4]
 800effa:	f000 f9f7 	bl	800f3ec <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800effe:	e04e      	b.n	800f09e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	f000 f9f3 	bl	800f3ec <USBD_CtlSendStatus>
        break;
 800f006:	e04a      	b.n	800f09e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800f008:	4b26      	ldr	r3, [pc, #152]	; (800f0a4 <USBD_SetConfig+0x118>)
 800f00a:	781b      	ldrb	r3, [r3, #0]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d112      	bne.n	800f036 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	2202      	movs	r2, #2
 800f014:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800f018:	4b22      	ldr	r3, [pc, #136]	; (800f0a4 <USBD_SetConfig+0x118>)
 800f01a:	781b      	ldrb	r3, [r3, #0]
 800f01c:	461a      	mov	r2, r3
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800f022:	4b20      	ldr	r3, [pc, #128]	; (800f0a4 <USBD_SetConfig+0x118>)
 800f024:	781b      	ldrb	r3, [r3, #0]
 800f026:	4619      	mov	r1, r3
 800f028:	6878      	ldr	r0, [r7, #4]
 800f02a:	f7ff f9b1 	bl	800e390 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800f02e:	6878      	ldr	r0, [r7, #4]
 800f030:	f000 f9dc 	bl	800f3ec <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800f034:	e033      	b.n	800f09e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800f036:	4b1b      	ldr	r3, [pc, #108]	; (800f0a4 <USBD_SetConfig+0x118>)
 800f038:	781b      	ldrb	r3, [r3, #0]
 800f03a:	461a      	mov	r2, r3
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	685b      	ldr	r3, [r3, #4]
 800f040:	429a      	cmp	r2, r3
 800f042:	d01d      	beq.n	800f080 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	685b      	ldr	r3, [r3, #4]
 800f048:	b2db      	uxtb	r3, r3
 800f04a:	4619      	mov	r1, r3
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	f7ff f99f 	bl	800e390 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800f052:	4b14      	ldr	r3, [pc, #80]	; (800f0a4 <USBD_SetConfig+0x118>)
 800f054:	781b      	ldrb	r3, [r3, #0]
 800f056:	461a      	mov	r2, r3
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800f05c:	4b11      	ldr	r3, [pc, #68]	; (800f0a4 <USBD_SetConfig+0x118>)
 800f05e:	781b      	ldrb	r3, [r3, #0]
 800f060:	4619      	mov	r1, r3
 800f062:	6878      	ldr	r0, [r7, #4]
 800f064:	f7ff f975 	bl	800e352 <USBD_SetClassConfig>
 800f068:	4603      	mov	r3, r0
 800f06a:	2b02      	cmp	r3, #2
 800f06c:	d104      	bne.n	800f078 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800f06e:	6839      	ldr	r1, [r7, #0]
 800f070:	6878      	ldr	r0, [r7, #4]
 800f072:	f000 f8f2 	bl	800f25a <USBD_CtlError>
            return;
 800f076:	e012      	b.n	800f09e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800f078:	6878      	ldr	r0, [r7, #4]
 800f07a:	f000 f9b7 	bl	800f3ec <USBD_CtlSendStatus>
        break;
 800f07e:	e00e      	b.n	800f09e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800f080:	6878      	ldr	r0, [r7, #4]
 800f082:	f000 f9b3 	bl	800f3ec <USBD_CtlSendStatus>
        break;
 800f086:	e00a      	b.n	800f09e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800f088:	6839      	ldr	r1, [r7, #0]
 800f08a:	6878      	ldr	r0, [r7, #4]
 800f08c:	f000 f8e5 	bl	800f25a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800f090:	4b04      	ldr	r3, [pc, #16]	; (800f0a4 <USBD_SetConfig+0x118>)
 800f092:	781b      	ldrb	r3, [r3, #0]
 800f094:	4619      	mov	r1, r3
 800f096:	6878      	ldr	r0, [r7, #4]
 800f098:	f7ff f97a 	bl	800e390 <USBD_ClrClassConfig>
        break;
 800f09c:	bf00      	nop
    }
  }
}
 800f09e:	3708      	adds	r7, #8
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	bd80      	pop	{r7, pc}
 800f0a4:	24000208 	.word	0x24000208

0800f0a8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b082      	sub	sp, #8
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
 800f0b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f0b2:	683b      	ldr	r3, [r7, #0]
 800f0b4:	88db      	ldrh	r3, [r3, #6]
 800f0b6:	2b01      	cmp	r3, #1
 800f0b8:	d004      	beq.n	800f0c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f0ba:	6839      	ldr	r1, [r7, #0]
 800f0bc:	6878      	ldr	r0, [r7, #4]
 800f0be:	f000 f8cc 	bl	800f25a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f0c2:	e021      	b.n	800f108 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f0ca:	2b01      	cmp	r3, #1
 800f0cc:	db17      	blt.n	800f0fe <USBD_GetConfig+0x56>
 800f0ce:	2b02      	cmp	r3, #2
 800f0d0:	dd02      	ble.n	800f0d8 <USBD_GetConfig+0x30>
 800f0d2:	2b03      	cmp	r3, #3
 800f0d4:	d00b      	beq.n	800f0ee <USBD_GetConfig+0x46>
 800f0d6:	e012      	b.n	800f0fe <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	2200      	movs	r2, #0
 800f0dc:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	3308      	adds	r3, #8
 800f0e2:	2201      	movs	r2, #1
 800f0e4:	4619      	mov	r1, r3
 800f0e6:	6878      	ldr	r0, [r7, #4]
 800f0e8:	f000 f922 	bl	800f330 <USBD_CtlSendData>
        break;
 800f0ec:	e00c      	b.n	800f108 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	3304      	adds	r3, #4
 800f0f2:	2201      	movs	r2, #1
 800f0f4:	4619      	mov	r1, r3
 800f0f6:	6878      	ldr	r0, [r7, #4]
 800f0f8:	f000 f91a 	bl	800f330 <USBD_CtlSendData>
        break;
 800f0fc:	e004      	b.n	800f108 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800f0fe:	6839      	ldr	r1, [r7, #0]
 800f100:	6878      	ldr	r0, [r7, #4]
 800f102:	f000 f8aa 	bl	800f25a <USBD_CtlError>
        break;
 800f106:	bf00      	nop
}
 800f108:	bf00      	nop
 800f10a:	3708      	adds	r7, #8
 800f10c:	46bd      	mov	sp, r7
 800f10e:	bd80      	pop	{r7, pc}

0800f110 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b082      	sub	sp, #8
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
 800f118:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f120:	3b01      	subs	r3, #1
 800f122:	2b02      	cmp	r3, #2
 800f124:	d81e      	bhi.n	800f164 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f126:	683b      	ldr	r3, [r7, #0]
 800f128:	88db      	ldrh	r3, [r3, #6]
 800f12a:	2b02      	cmp	r3, #2
 800f12c:	d004      	beq.n	800f138 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800f12e:	6839      	ldr	r1, [r7, #0]
 800f130:	6878      	ldr	r0, [r7, #4]
 800f132:	f000 f892 	bl	800f25a <USBD_CtlError>
        break;
 800f136:	e01a      	b.n	800f16e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	2201      	movs	r2, #1
 800f13c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f144:	2b00      	cmp	r3, #0
 800f146:	d005      	beq.n	800f154 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	68db      	ldr	r3, [r3, #12]
 800f14c:	f043 0202 	orr.w	r2, r3, #2
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	330c      	adds	r3, #12
 800f158:	2202      	movs	r2, #2
 800f15a:	4619      	mov	r1, r3
 800f15c:	6878      	ldr	r0, [r7, #4]
 800f15e:	f000 f8e7 	bl	800f330 <USBD_CtlSendData>
      break;
 800f162:	e004      	b.n	800f16e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800f164:	6839      	ldr	r1, [r7, #0]
 800f166:	6878      	ldr	r0, [r7, #4]
 800f168:	f000 f877 	bl	800f25a <USBD_CtlError>
      break;
 800f16c:	bf00      	nop
  }
}
 800f16e:	bf00      	nop
 800f170:	3708      	adds	r7, #8
 800f172:	46bd      	mov	sp, r7
 800f174:	bd80      	pop	{r7, pc}

0800f176 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800f176:	b580      	push	{r7, lr}
 800f178:	b082      	sub	sp, #8
 800f17a:	af00      	add	r7, sp, #0
 800f17c:	6078      	str	r0, [r7, #4]
 800f17e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	885b      	ldrh	r3, [r3, #2]
 800f184:	2b01      	cmp	r3, #1
 800f186:	d106      	bne.n	800f196 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	2201      	movs	r2, #1
 800f18c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800f190:	6878      	ldr	r0, [r7, #4]
 800f192:	f000 f92b 	bl	800f3ec <USBD_CtlSendStatus>
  }
}
 800f196:	bf00      	nop
 800f198:	3708      	adds	r7, #8
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd80      	pop	{r7, pc}

0800f19e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800f19e:	b580      	push	{r7, lr}
 800f1a0:	b082      	sub	sp, #8
 800f1a2:	af00      	add	r7, sp, #0
 800f1a4:	6078      	str	r0, [r7, #4]
 800f1a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f1ae:	3b01      	subs	r3, #1
 800f1b0:	2b02      	cmp	r3, #2
 800f1b2:	d80b      	bhi.n	800f1cc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	885b      	ldrh	r3, [r3, #2]
 800f1b8:	2b01      	cmp	r3, #1
 800f1ba:	d10c      	bne.n	800f1d6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	2200      	movs	r2, #0
 800f1c0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800f1c4:	6878      	ldr	r0, [r7, #4]
 800f1c6:	f000 f911 	bl	800f3ec <USBD_CtlSendStatus>
      }
      break;
 800f1ca:	e004      	b.n	800f1d6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800f1cc:	6839      	ldr	r1, [r7, #0]
 800f1ce:	6878      	ldr	r0, [r7, #4]
 800f1d0:	f000 f843 	bl	800f25a <USBD_CtlError>
      break;
 800f1d4:	e000      	b.n	800f1d8 <USBD_ClrFeature+0x3a>
      break;
 800f1d6:	bf00      	nop
  }
}
 800f1d8:	bf00      	nop
 800f1da:	3708      	adds	r7, #8
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	bd80      	pop	{r7, pc}

0800f1e0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f1e0:	b480      	push	{r7}
 800f1e2:	b083      	sub	sp, #12
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
 800f1e8:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	781a      	ldrb	r2, [r3, #0]
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800f1f2:	683b      	ldr	r3, [r7, #0]
 800f1f4:	785a      	ldrb	r2, [r3, #1]
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	3302      	adds	r3, #2
 800f1fe:	781b      	ldrb	r3, [r3, #0]
 800f200:	b29a      	uxth	r2, r3
 800f202:	683b      	ldr	r3, [r7, #0]
 800f204:	3303      	adds	r3, #3
 800f206:	781b      	ldrb	r3, [r3, #0]
 800f208:	b29b      	uxth	r3, r3
 800f20a:	021b      	lsls	r3, r3, #8
 800f20c:	b29b      	uxth	r3, r3
 800f20e:	4413      	add	r3, r2
 800f210:	b29a      	uxth	r2, r3
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800f216:	683b      	ldr	r3, [r7, #0]
 800f218:	3304      	adds	r3, #4
 800f21a:	781b      	ldrb	r3, [r3, #0]
 800f21c:	b29a      	uxth	r2, r3
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	3305      	adds	r3, #5
 800f222:	781b      	ldrb	r3, [r3, #0]
 800f224:	b29b      	uxth	r3, r3
 800f226:	021b      	lsls	r3, r3, #8
 800f228:	b29b      	uxth	r3, r3
 800f22a:	4413      	add	r3, r2
 800f22c:	b29a      	uxth	r2, r3
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800f232:	683b      	ldr	r3, [r7, #0]
 800f234:	3306      	adds	r3, #6
 800f236:	781b      	ldrb	r3, [r3, #0]
 800f238:	b29a      	uxth	r2, r3
 800f23a:	683b      	ldr	r3, [r7, #0]
 800f23c:	3307      	adds	r3, #7
 800f23e:	781b      	ldrb	r3, [r3, #0]
 800f240:	b29b      	uxth	r3, r3
 800f242:	021b      	lsls	r3, r3, #8
 800f244:	b29b      	uxth	r3, r3
 800f246:	4413      	add	r3, r2
 800f248:	b29a      	uxth	r2, r3
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	80da      	strh	r2, [r3, #6]

}
 800f24e:	bf00      	nop
 800f250:	370c      	adds	r7, #12
 800f252:	46bd      	mov	sp, r7
 800f254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f258:	4770      	bx	lr

0800f25a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800f25a:	b580      	push	{r7, lr}
 800f25c:	b082      	sub	sp, #8
 800f25e:	af00      	add	r7, sp, #0
 800f260:	6078      	str	r0, [r7, #4]
 800f262:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800f264:	2180      	movs	r1, #128	; 0x80
 800f266:	6878      	ldr	r0, [r7, #4]
 800f268:	f000 fcf4 	bl	800fc54 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800f26c:	2100      	movs	r1, #0
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	f000 fcf0 	bl	800fc54 <USBD_LL_StallEP>
}
 800f274:	bf00      	nop
 800f276:	3708      	adds	r7, #8
 800f278:	46bd      	mov	sp, r7
 800f27a:	bd80      	pop	{r7, pc}

0800f27c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b086      	sub	sp, #24
 800f280:	af00      	add	r7, sp, #0
 800f282:	60f8      	str	r0, [r7, #12]
 800f284:	60b9      	str	r1, [r7, #8]
 800f286:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f288:	2300      	movs	r3, #0
 800f28a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d032      	beq.n	800f2f8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800f292:	68f8      	ldr	r0, [r7, #12]
 800f294:	f000 f834 	bl	800f300 <USBD_GetLen>
 800f298:	4603      	mov	r3, r0
 800f29a:	3301      	adds	r3, #1
 800f29c:	b29b      	uxth	r3, r3
 800f29e:	005b      	lsls	r3, r3, #1
 800f2a0:	b29a      	uxth	r2, r3
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800f2a6:	7dfb      	ldrb	r3, [r7, #23]
 800f2a8:	1c5a      	adds	r2, r3, #1
 800f2aa:	75fa      	strb	r2, [r7, #23]
 800f2ac:	461a      	mov	r2, r3
 800f2ae:	68bb      	ldr	r3, [r7, #8]
 800f2b0:	4413      	add	r3, r2
 800f2b2:	687a      	ldr	r2, [r7, #4]
 800f2b4:	7812      	ldrb	r2, [r2, #0]
 800f2b6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800f2b8:	7dfb      	ldrb	r3, [r7, #23]
 800f2ba:	1c5a      	adds	r2, r3, #1
 800f2bc:	75fa      	strb	r2, [r7, #23]
 800f2be:	461a      	mov	r2, r3
 800f2c0:	68bb      	ldr	r3, [r7, #8]
 800f2c2:	4413      	add	r3, r2
 800f2c4:	2203      	movs	r2, #3
 800f2c6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800f2c8:	e012      	b.n	800f2f0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	1c5a      	adds	r2, r3, #1
 800f2ce:	60fa      	str	r2, [r7, #12]
 800f2d0:	7dfa      	ldrb	r2, [r7, #23]
 800f2d2:	1c51      	adds	r1, r2, #1
 800f2d4:	75f9      	strb	r1, [r7, #23]
 800f2d6:	4611      	mov	r1, r2
 800f2d8:	68ba      	ldr	r2, [r7, #8]
 800f2da:	440a      	add	r2, r1
 800f2dc:	781b      	ldrb	r3, [r3, #0]
 800f2de:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800f2e0:	7dfb      	ldrb	r3, [r7, #23]
 800f2e2:	1c5a      	adds	r2, r3, #1
 800f2e4:	75fa      	strb	r2, [r7, #23]
 800f2e6:	461a      	mov	r2, r3
 800f2e8:	68bb      	ldr	r3, [r7, #8]
 800f2ea:	4413      	add	r3, r2
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	781b      	ldrb	r3, [r3, #0]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d1e8      	bne.n	800f2ca <USBD_GetString+0x4e>
    }
  }
}
 800f2f8:	bf00      	nop
 800f2fa:	3718      	adds	r7, #24
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bd80      	pop	{r7, pc}

0800f300 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f300:	b480      	push	{r7}
 800f302:	b085      	sub	sp, #20
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f308:	2300      	movs	r3, #0
 800f30a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800f30c:	e005      	b.n	800f31a <USBD_GetLen+0x1a>
  {
    len++;
 800f30e:	7bfb      	ldrb	r3, [r7, #15]
 800f310:	3301      	adds	r3, #1
 800f312:	73fb      	strb	r3, [r7, #15]
    buf++;
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	3301      	adds	r3, #1
 800f318:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	781b      	ldrb	r3, [r3, #0]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d1f5      	bne.n	800f30e <USBD_GetLen+0xe>
  }

  return len;
 800f322:	7bfb      	ldrb	r3, [r7, #15]
}
 800f324:	4618      	mov	r0, r3
 800f326:	3714      	adds	r7, #20
 800f328:	46bd      	mov	sp, r7
 800f32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32e:	4770      	bx	lr

0800f330 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b084      	sub	sp, #16
 800f334:	af00      	add	r7, sp, #0
 800f336:	60f8      	str	r0, [r7, #12]
 800f338:	60b9      	str	r1, [r7, #8]
 800f33a:	4613      	mov	r3, r2
 800f33c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	2202      	movs	r2, #2
 800f342:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f346:	88fa      	ldrh	r2, [r7, #6]
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800f34c:	88fa      	ldrh	r2, [r7, #6]
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f352:	88fb      	ldrh	r3, [r7, #6]
 800f354:	68ba      	ldr	r2, [r7, #8]
 800f356:	2100      	movs	r1, #0
 800f358:	68f8      	ldr	r0, [r7, #12]
 800f35a:	f000 fd04 	bl	800fd66 <USBD_LL_Transmit>

  return USBD_OK;
 800f35e:	2300      	movs	r3, #0
}
 800f360:	4618      	mov	r0, r3
 800f362:	3710      	adds	r7, #16
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}

0800f368 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b084      	sub	sp, #16
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	60f8      	str	r0, [r7, #12]
 800f370:	60b9      	str	r1, [r7, #8]
 800f372:	4613      	mov	r3, r2
 800f374:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f376:	88fb      	ldrh	r3, [r7, #6]
 800f378:	68ba      	ldr	r2, [r7, #8]
 800f37a:	2100      	movs	r1, #0
 800f37c:	68f8      	ldr	r0, [r7, #12]
 800f37e:	f000 fcf2 	bl	800fd66 <USBD_LL_Transmit>

  return USBD_OK;
 800f382:	2300      	movs	r3, #0
}
 800f384:	4618      	mov	r0, r3
 800f386:	3710      	adds	r7, #16
 800f388:	46bd      	mov	sp, r7
 800f38a:	bd80      	pop	{r7, pc}

0800f38c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b084      	sub	sp, #16
 800f390:	af00      	add	r7, sp, #0
 800f392:	60f8      	str	r0, [r7, #12]
 800f394:	60b9      	str	r1, [r7, #8]
 800f396:	4613      	mov	r3, r2
 800f398:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	2203      	movs	r2, #3
 800f39e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f3a2:	88fa      	ldrh	r2, [r7, #6]
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800f3aa:	88fa      	ldrh	r2, [r7, #6]
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f3b2:	88fb      	ldrh	r3, [r7, #6]
 800f3b4:	68ba      	ldr	r2, [r7, #8]
 800f3b6:	2100      	movs	r1, #0
 800f3b8:	68f8      	ldr	r0, [r7, #12]
 800f3ba:	f000 fcf7 	bl	800fdac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f3be:	2300      	movs	r3, #0
}
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	3710      	adds	r7, #16
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	bd80      	pop	{r7, pc}

0800f3c8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b084      	sub	sp, #16
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	60f8      	str	r0, [r7, #12]
 800f3d0:	60b9      	str	r1, [r7, #8]
 800f3d2:	4613      	mov	r3, r2
 800f3d4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f3d6:	88fb      	ldrh	r3, [r7, #6]
 800f3d8:	68ba      	ldr	r2, [r7, #8]
 800f3da:	2100      	movs	r1, #0
 800f3dc:	68f8      	ldr	r0, [r7, #12]
 800f3de:	f000 fce5 	bl	800fdac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f3e2:	2300      	movs	r3, #0
}
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	3710      	adds	r7, #16
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	bd80      	pop	{r7, pc}

0800f3ec <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b082      	sub	sp, #8
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2204      	movs	r2, #4
 800f3f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	2200      	movs	r2, #0
 800f400:	2100      	movs	r1, #0
 800f402:	6878      	ldr	r0, [r7, #4]
 800f404:	f000 fcaf 	bl	800fd66 <USBD_LL_Transmit>

  return USBD_OK;
 800f408:	2300      	movs	r3, #0
}
 800f40a:	4618      	mov	r0, r3
 800f40c:	3708      	adds	r7, #8
 800f40e:	46bd      	mov	sp, r7
 800f410:	bd80      	pop	{r7, pc}

0800f412 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f412:	b580      	push	{r7, lr}
 800f414:	b082      	sub	sp, #8
 800f416:	af00      	add	r7, sp, #0
 800f418:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	2205      	movs	r2, #5
 800f41e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f422:	2300      	movs	r3, #0
 800f424:	2200      	movs	r2, #0
 800f426:	2100      	movs	r1, #0
 800f428:	6878      	ldr	r0, [r7, #4]
 800f42a:	f000 fcbf 	bl	800fdac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f42e:	2300      	movs	r3, #0
}
 800f430:	4618      	mov	r0, r3
 800f432:	3708      	adds	r7, #8
 800f434:	46bd      	mov	sp, r7
 800f436:	bd80      	pop	{r7, pc}

0800f438 <_ZN4DataC1Ev>:

Data::Data(void)
{
    /* zero all data values */

 800f438:	4770      	bx	lr

0800f43a <_ZN9SchedulerC1Ev>:
extern BNO055Ctrl_t bno_1;
extern BNO055Ctrl_t bno_2;
extern MS5607Ctrl_t ms5607_1;
extern MS5607Ctrl_t ms5607_2;
*/
Scheduler::Scheduler(void)
 800f43a:	b513      	push	{r0, r1, r4, lr}
 800f43c:	4604      	mov	r4, r0
 800f43e:	f7ff fffb 	bl	800f438 <_ZN4DataC1Ev>
{

    /* initialize data structure */
    this->data = Data();
 800f442:	a801      	add	r0, sp, #4
 800f444:	f7ff fff8 	bl	800f438 <_ZN4DataC1Ev>

}
 800f448:	4620      	mov	r0, r4
 800f44a:	b002      	add	sp, #8
 800f44c:	bd10      	pop	{r4, pc}

0800f44e <_ZN9Scheduler3runEv>:

void Scheduler::run(void)
{
 800f44e:	b530      	push	{r4, r5, lr}
 800f450:	b085      	sub	sp, #20
 800f452:	4604      	mov	r4, r0
    ms5607_2.spiconfig.pin = GPIO_PIN_15;
    MS5607_init(&ms5607_2);
     */

    /* setup for scheduler */
    State state1 = State(&(this->data));
 800f454:	4601      	mov	r1, r0
 800f456:	4668      	mov	r0, sp
 800f458:	f000 f81b 	bl	800f492 <_ZN5StateC1EP4Data>
    State state2 = State(&(this->data));
 800f45c:	4621      	mov	r1, r4
 800f45e:	a801      	add	r0, sp, #4
    State::state_t state = STATE1;
 800f460:	2400      	movs	r4, #0
    State state2 = State(&(this->data));
 800f462:	f000 f816 	bl	800f492 <_ZN5StateC1EP4Data>

    State states[] = {state1, state2};
 800f466:	9b00      	ldr	r3, [sp, #0]
 800f468:	9302      	str	r3, [sp, #8]
 800f46a:	9b01      	ldr	r3, [sp, #4]
 800f46c:	9303      	str	r3, [sp, #12]

    uint32_t lastTime = HAL_GetTick();
 800f46e:	f7f2 fc17 	bl	8001ca0 <HAL_GetTick>
 800f472:	4605      	mov	r5, r0

    while(1)
    {
        /* rate limiting code for 10 Hz */
        while((HAL_GetTick() - lastTime) < SCHEDULER_10HZ_RATE);
 800f474:	f7f2 fc14 	bl	8001ca0 <HAL_GetTick>
 800f478:	1b40      	subs	r0, r0, r5
 800f47a:	2863      	cmp	r0, #99	; 0x63
 800f47c:	d9fa      	bls.n	800f474 <_ZN9Scheduler3runEv+0x26>
        lastTime = HAL_GetTick();
 800f47e:	f7f2 fc0f 	bl	8001ca0 <HAL_GetTick>

        /* scheduler main loop */
        state = states[state].run();
 800f482:	ab02      	add	r3, sp, #8
        lastTime = HAL_GetTick();
 800f484:	4605      	mov	r5, r0
        state = states[state].run();
 800f486:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f48a:	f000 f80d 	bl	800f4a8 <_ZN5State3runEv>
 800f48e:	4604      	mov	r4, r0
    while(1)
 800f490:	e7f0      	b.n	800f474 <_ZN9Scheduler3runEv+0x26>

0800f492 <_ZN5StateC1EP4Data>:
extern MS5607Ctrl_t ms5607_1;
extern MS5607Ctrl_t ms5607_2;
*/
State::State(Data *data)
{
    this->data = data;
 800f492:	6001      	str	r1, [r0, #0]
}
 800f494:	4770      	bx	lr
	...

0800f498 <_ZN5State7generalEv>:
 */
void State::general(void)
{

    /* read data from sensors */
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);
 800f498:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f49c:	4801      	ldr	r0, [pc, #4]	; (800f4a4 <_ZN5State7generalEv+0xc>)
 800f49e:	f7f5 bbe0 	b.w	8004c62 <HAL_GPIO_TogglePin>
 800f4a2:	bf00      	nop
 800f4a4:	58021000 	.word	0x58021000

0800f4a8 <_ZN5State3runEv>:
{
 800f4a8:	b508      	push	{r3, lr}
    this->general();
 800f4aa:	f7ff fff5 	bl	800f498 <_ZN5State7generalEv>
}
 800f4ae:	2000      	movs	r0, #0
 800f4b0:	bd08      	pop	{r3, pc}
	...

0800f4b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	4913      	ldr	r1, [pc, #76]	; (800f508 <MX_USB_DEVICE_Init+0x54>)
 800f4bc:	4813      	ldr	r0, [pc, #76]	; (800f50c <MX_USB_DEVICE_Init+0x58>)
 800f4be:	f7fe feec 	bl	800e29a <USBD_Init>
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d001      	beq.n	800f4cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f4c8:	f7f1 fd1a 	bl	8000f00 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f4cc:	4910      	ldr	r1, [pc, #64]	; (800f510 <MX_USB_DEVICE_Init+0x5c>)
 800f4ce:	480f      	ldr	r0, [pc, #60]	; (800f50c <MX_USB_DEVICE_Init+0x58>)
 800f4d0:	f7fe ff0e 	bl	800e2f0 <USBD_RegisterClass>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d001      	beq.n	800f4de <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f4da:	f7f1 fd11 	bl	8000f00 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f4de:	490d      	ldr	r1, [pc, #52]	; (800f514 <MX_USB_DEVICE_Init+0x60>)
 800f4e0:	480a      	ldr	r0, [pc, #40]	; (800f50c <MX_USB_DEVICE_Init+0x58>)
 800f4e2:	f7fe fe6b 	bl	800e1bc <USBD_CDC_RegisterInterface>
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d001      	beq.n	800f4f0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f4ec:	f7f1 fd08 	bl	8000f00 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f4f0:	4806      	ldr	r0, [pc, #24]	; (800f50c <MX_USB_DEVICE_Init+0x58>)
 800f4f2:	f7fe ff17 	bl	800e324 <USBD_Start>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d001      	beq.n	800f500 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f4fc:	f7f1 fd00 	bl	8000f00 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800f500:	f7f6 ff16 	bl	8006330 <HAL_PWREx_EnableUSBVoltageDetector>
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f504:	bf00      	nop
 800f506:	bd80      	pop	{r7, pc}
 800f508:	24000130 	.word	0x24000130
 800f50c:	24000758 	.word	0x24000758
 800f510:	2400001c 	.word	0x2400001c
 800f514:	24000120 	.word	0x24000120

0800f518 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f51c:	2200      	movs	r2, #0
 800f51e:	4905      	ldr	r1, [pc, #20]	; (800f534 <CDC_Init_FS+0x1c>)
 800f520:	4805      	ldr	r0, [pc, #20]	; (800f538 <CDC_Init_FS+0x20>)
 800f522:	f7fe fe62 	bl	800e1ea <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f526:	4905      	ldr	r1, [pc, #20]	; (800f53c <CDC_Init_FS+0x24>)
 800f528:	4803      	ldr	r0, [pc, #12]	; (800f538 <CDC_Init_FS+0x20>)
 800f52a:	f7fe fe78 	bl	800e21e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f52e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f530:	4618      	mov	r0, r3
 800f532:	bd80      	pop	{r7, pc}
 800f534:	2400121c 	.word	0x2400121c
 800f538:	24000758 	.word	0x24000758
 800f53c:	24000a1c 	.word	0x24000a1c

0800f540 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f540:	b480      	push	{r7}
 800f542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f544:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f546:	4618      	mov	r0, r3
 800f548:	46bd      	mov	sp, r7
 800f54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54e:	4770      	bx	lr

0800f550 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f550:	b480      	push	{r7}
 800f552:	b083      	sub	sp, #12
 800f554:	af00      	add	r7, sp, #0
 800f556:	4603      	mov	r3, r0
 800f558:	6039      	str	r1, [r7, #0]
 800f55a:	71fb      	strb	r3, [r7, #7]
 800f55c:	4613      	mov	r3, r2
 800f55e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f560:	79fb      	ldrb	r3, [r7, #7]
 800f562:	2b23      	cmp	r3, #35	; 0x23
 800f564:	d84a      	bhi.n	800f5fc <CDC_Control_FS+0xac>
 800f566:	a201      	add	r2, pc, #4	; (adr r2, 800f56c <CDC_Control_FS+0x1c>)
 800f568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f56c:	0800f5fd 	.word	0x0800f5fd
 800f570:	0800f5fd 	.word	0x0800f5fd
 800f574:	0800f5fd 	.word	0x0800f5fd
 800f578:	0800f5fd 	.word	0x0800f5fd
 800f57c:	0800f5fd 	.word	0x0800f5fd
 800f580:	0800f5fd 	.word	0x0800f5fd
 800f584:	0800f5fd 	.word	0x0800f5fd
 800f588:	0800f5fd 	.word	0x0800f5fd
 800f58c:	0800f5fd 	.word	0x0800f5fd
 800f590:	0800f5fd 	.word	0x0800f5fd
 800f594:	0800f5fd 	.word	0x0800f5fd
 800f598:	0800f5fd 	.word	0x0800f5fd
 800f59c:	0800f5fd 	.word	0x0800f5fd
 800f5a0:	0800f5fd 	.word	0x0800f5fd
 800f5a4:	0800f5fd 	.word	0x0800f5fd
 800f5a8:	0800f5fd 	.word	0x0800f5fd
 800f5ac:	0800f5fd 	.word	0x0800f5fd
 800f5b0:	0800f5fd 	.word	0x0800f5fd
 800f5b4:	0800f5fd 	.word	0x0800f5fd
 800f5b8:	0800f5fd 	.word	0x0800f5fd
 800f5bc:	0800f5fd 	.word	0x0800f5fd
 800f5c0:	0800f5fd 	.word	0x0800f5fd
 800f5c4:	0800f5fd 	.word	0x0800f5fd
 800f5c8:	0800f5fd 	.word	0x0800f5fd
 800f5cc:	0800f5fd 	.word	0x0800f5fd
 800f5d0:	0800f5fd 	.word	0x0800f5fd
 800f5d4:	0800f5fd 	.word	0x0800f5fd
 800f5d8:	0800f5fd 	.word	0x0800f5fd
 800f5dc:	0800f5fd 	.word	0x0800f5fd
 800f5e0:	0800f5fd 	.word	0x0800f5fd
 800f5e4:	0800f5fd 	.word	0x0800f5fd
 800f5e8:	0800f5fd 	.word	0x0800f5fd
 800f5ec:	0800f5fd 	.word	0x0800f5fd
 800f5f0:	0800f5fd 	.word	0x0800f5fd
 800f5f4:	0800f5fd 	.word	0x0800f5fd
 800f5f8:	0800f5fd 	.word	0x0800f5fd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f5fc:	bf00      	nop
  }

  return (USBD_OK);
 800f5fe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f600:	4618      	mov	r0, r3
 800f602:	370c      	adds	r7, #12
 800f604:	46bd      	mov	sp, r7
 800f606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60a:	4770      	bx	lr

0800f60c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b082      	sub	sp, #8
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
 800f614:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f616:	6879      	ldr	r1, [r7, #4]
 800f618:	4805      	ldr	r0, [pc, #20]	; (800f630 <CDC_Receive_FS+0x24>)
 800f61a:	f7fe fe00 	bl	800e21e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f61e:	4804      	ldr	r0, [pc, #16]	; (800f630 <CDC_Receive_FS+0x24>)
 800f620:	f7fe fe11 	bl	800e246 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f624:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f626:	4618      	mov	r0, r3
 800f628:	3708      	adds	r7, #8
 800f62a:	46bd      	mov	sp, r7
 800f62c:	bd80      	pop	{r7, pc}
 800f62e:	bf00      	nop
 800f630:	24000758 	.word	0x24000758

0800f634 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f634:	b480      	push	{r7}
 800f636:	b083      	sub	sp, #12
 800f638:	af00      	add	r7, sp, #0
 800f63a:	4603      	mov	r3, r0
 800f63c:	6039      	str	r1, [r7, #0]
 800f63e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	2212      	movs	r2, #18
 800f644:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f646:	4b03      	ldr	r3, [pc, #12]	; (800f654 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f648:	4618      	mov	r0, r3
 800f64a:	370c      	adds	r7, #12
 800f64c:	46bd      	mov	sp, r7
 800f64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f652:	4770      	bx	lr
 800f654:	2400014c 	.word	0x2400014c

0800f658 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f658:	b480      	push	{r7}
 800f65a:	b083      	sub	sp, #12
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	4603      	mov	r3, r0
 800f660:	6039      	str	r1, [r7, #0]
 800f662:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f664:	683b      	ldr	r3, [r7, #0]
 800f666:	2204      	movs	r2, #4
 800f668:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f66a:	4b03      	ldr	r3, [pc, #12]	; (800f678 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f66c:	4618      	mov	r0, r3
 800f66e:	370c      	adds	r7, #12
 800f670:	46bd      	mov	sp, r7
 800f672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f676:	4770      	bx	lr
 800f678:	24000160 	.word	0x24000160

0800f67c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b082      	sub	sp, #8
 800f680:	af00      	add	r7, sp, #0
 800f682:	4603      	mov	r3, r0
 800f684:	6039      	str	r1, [r7, #0]
 800f686:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f688:	79fb      	ldrb	r3, [r7, #7]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d105      	bne.n	800f69a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f68e:	683a      	ldr	r2, [r7, #0]
 800f690:	4907      	ldr	r1, [pc, #28]	; (800f6b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800f692:	4808      	ldr	r0, [pc, #32]	; (800f6b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800f694:	f7ff fdf2 	bl	800f27c <USBD_GetString>
 800f698:	e004      	b.n	800f6a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f69a:	683a      	ldr	r2, [r7, #0]
 800f69c:	4904      	ldr	r1, [pc, #16]	; (800f6b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800f69e:	4805      	ldr	r0, [pc, #20]	; (800f6b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800f6a0:	f7ff fdec 	bl	800f27c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f6a4:	4b02      	ldr	r3, [pc, #8]	; (800f6b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	3708      	adds	r7, #8
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	bd80      	pop	{r7, pc}
 800f6ae:	bf00      	nop
 800f6b0:	24001a1c 	.word	0x24001a1c
 800f6b4:	08010090 	.word	0x08010090

0800f6b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b082      	sub	sp, #8
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	4603      	mov	r3, r0
 800f6c0:	6039      	str	r1, [r7, #0]
 800f6c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f6c4:	683a      	ldr	r2, [r7, #0]
 800f6c6:	4904      	ldr	r1, [pc, #16]	; (800f6d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f6c8:	4804      	ldr	r0, [pc, #16]	; (800f6dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f6ca:	f7ff fdd7 	bl	800f27c <USBD_GetString>
  return USBD_StrDesc;
 800f6ce:	4b02      	ldr	r3, [pc, #8]	; (800f6d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	3708      	adds	r7, #8
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	bd80      	pop	{r7, pc}
 800f6d8:	24001a1c 	.word	0x24001a1c
 800f6dc:	080100a8 	.word	0x080100a8

0800f6e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b082      	sub	sp, #8
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	6039      	str	r1, [r7, #0]
 800f6ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f6ec:	683b      	ldr	r3, [r7, #0]
 800f6ee:	221a      	movs	r2, #26
 800f6f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f6f2:	f000 f843 	bl	800f77c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f6f6:	4b02      	ldr	r3, [pc, #8]	; (800f700 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	3708      	adds	r7, #8
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	bd80      	pop	{r7, pc}
 800f700:	24000164 	.word	0x24000164

0800f704 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b082      	sub	sp, #8
 800f708:	af00      	add	r7, sp, #0
 800f70a:	4603      	mov	r3, r0
 800f70c:	6039      	str	r1, [r7, #0]
 800f70e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f710:	79fb      	ldrb	r3, [r7, #7]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d105      	bne.n	800f722 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f716:	683a      	ldr	r2, [r7, #0]
 800f718:	4907      	ldr	r1, [pc, #28]	; (800f738 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f71a:	4808      	ldr	r0, [pc, #32]	; (800f73c <USBD_FS_ConfigStrDescriptor+0x38>)
 800f71c:	f7ff fdae 	bl	800f27c <USBD_GetString>
 800f720:	e004      	b.n	800f72c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f722:	683a      	ldr	r2, [r7, #0]
 800f724:	4904      	ldr	r1, [pc, #16]	; (800f738 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f726:	4805      	ldr	r0, [pc, #20]	; (800f73c <USBD_FS_ConfigStrDescriptor+0x38>)
 800f728:	f7ff fda8 	bl	800f27c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f72c:	4b02      	ldr	r3, [pc, #8]	; (800f738 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f72e:	4618      	mov	r0, r3
 800f730:	3708      	adds	r7, #8
 800f732:	46bd      	mov	sp, r7
 800f734:	bd80      	pop	{r7, pc}
 800f736:	bf00      	nop
 800f738:	24001a1c 	.word	0x24001a1c
 800f73c:	080100bc 	.word	0x080100bc

0800f740 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b082      	sub	sp, #8
 800f744:	af00      	add	r7, sp, #0
 800f746:	4603      	mov	r3, r0
 800f748:	6039      	str	r1, [r7, #0]
 800f74a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f74c:	79fb      	ldrb	r3, [r7, #7]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d105      	bne.n	800f75e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f752:	683a      	ldr	r2, [r7, #0]
 800f754:	4907      	ldr	r1, [pc, #28]	; (800f774 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f756:	4808      	ldr	r0, [pc, #32]	; (800f778 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f758:	f7ff fd90 	bl	800f27c <USBD_GetString>
 800f75c:	e004      	b.n	800f768 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f75e:	683a      	ldr	r2, [r7, #0]
 800f760:	4904      	ldr	r1, [pc, #16]	; (800f774 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f762:	4805      	ldr	r0, [pc, #20]	; (800f778 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f764:	f7ff fd8a 	bl	800f27c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f768:	4b02      	ldr	r3, [pc, #8]	; (800f774 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f76a:	4618      	mov	r0, r3
 800f76c:	3708      	adds	r7, #8
 800f76e:	46bd      	mov	sp, r7
 800f770:	bd80      	pop	{r7, pc}
 800f772:	bf00      	nop
 800f774:	24001a1c 	.word	0x24001a1c
 800f778:	080100c8 	.word	0x080100c8

0800f77c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b084      	sub	sp, #16
 800f780:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f782:	4b0f      	ldr	r3, [pc, #60]	; (800f7c0 <Get_SerialNum+0x44>)
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f788:	4b0e      	ldr	r3, [pc, #56]	; (800f7c4 <Get_SerialNum+0x48>)
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f78e:	4b0e      	ldr	r3, [pc, #56]	; (800f7c8 <Get_SerialNum+0x4c>)
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f794:	68fa      	ldr	r2, [r7, #12]
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	4413      	add	r3, r2
 800f79a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d009      	beq.n	800f7b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f7a2:	2208      	movs	r2, #8
 800f7a4:	4909      	ldr	r1, [pc, #36]	; (800f7cc <Get_SerialNum+0x50>)
 800f7a6:	68f8      	ldr	r0, [r7, #12]
 800f7a8:	f000 f814 	bl	800f7d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f7ac:	2204      	movs	r2, #4
 800f7ae:	4908      	ldr	r1, [pc, #32]	; (800f7d0 <Get_SerialNum+0x54>)
 800f7b0:	68b8      	ldr	r0, [r7, #8]
 800f7b2:	f000 f80f 	bl	800f7d4 <IntToUnicode>
  }
}
 800f7b6:	bf00      	nop
 800f7b8:	3710      	adds	r7, #16
 800f7ba:	46bd      	mov	sp, r7
 800f7bc:	bd80      	pop	{r7, pc}
 800f7be:	bf00      	nop
 800f7c0:	1ff1e800 	.word	0x1ff1e800
 800f7c4:	1ff1e804 	.word	0x1ff1e804
 800f7c8:	1ff1e808 	.word	0x1ff1e808
 800f7cc:	24000166 	.word	0x24000166
 800f7d0:	24000176 	.word	0x24000176

0800f7d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f7d4:	b480      	push	{r7}
 800f7d6:	b087      	sub	sp, #28
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	60f8      	str	r0, [r7, #12]
 800f7dc:	60b9      	str	r1, [r7, #8]
 800f7de:	4613      	mov	r3, r2
 800f7e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	75fb      	strb	r3, [r7, #23]
 800f7ea:	e027      	b.n	800f83c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	0f1b      	lsrs	r3, r3, #28
 800f7f0:	2b09      	cmp	r3, #9
 800f7f2:	d80b      	bhi.n	800f80c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	0f1b      	lsrs	r3, r3, #28
 800f7f8:	b2da      	uxtb	r2, r3
 800f7fa:	7dfb      	ldrb	r3, [r7, #23]
 800f7fc:	005b      	lsls	r3, r3, #1
 800f7fe:	4619      	mov	r1, r3
 800f800:	68bb      	ldr	r3, [r7, #8]
 800f802:	440b      	add	r3, r1
 800f804:	3230      	adds	r2, #48	; 0x30
 800f806:	b2d2      	uxtb	r2, r2
 800f808:	701a      	strb	r2, [r3, #0]
 800f80a:	e00a      	b.n	800f822 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	0f1b      	lsrs	r3, r3, #28
 800f810:	b2da      	uxtb	r2, r3
 800f812:	7dfb      	ldrb	r3, [r7, #23]
 800f814:	005b      	lsls	r3, r3, #1
 800f816:	4619      	mov	r1, r3
 800f818:	68bb      	ldr	r3, [r7, #8]
 800f81a:	440b      	add	r3, r1
 800f81c:	3237      	adds	r2, #55	; 0x37
 800f81e:	b2d2      	uxtb	r2, r2
 800f820:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	011b      	lsls	r3, r3, #4
 800f826:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f828:	7dfb      	ldrb	r3, [r7, #23]
 800f82a:	005b      	lsls	r3, r3, #1
 800f82c:	3301      	adds	r3, #1
 800f82e:	68ba      	ldr	r2, [r7, #8]
 800f830:	4413      	add	r3, r2
 800f832:	2200      	movs	r2, #0
 800f834:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f836:	7dfb      	ldrb	r3, [r7, #23]
 800f838:	3301      	adds	r3, #1
 800f83a:	75fb      	strb	r3, [r7, #23]
 800f83c:	7dfa      	ldrb	r2, [r7, #23]
 800f83e:	79fb      	ldrb	r3, [r7, #7]
 800f840:	429a      	cmp	r2, r3
 800f842:	d3d3      	bcc.n	800f7ec <IntToUnicode+0x18>
  }
}
 800f844:	bf00      	nop
 800f846:	371c      	adds	r7, #28
 800f848:	46bd      	mov	sp, r7
 800f84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84e:	4770      	bx	lr

0800f850 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b08a      	sub	sp, #40	; 0x28
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f858:	f107 0314 	add.w	r3, r7, #20
 800f85c:	2200      	movs	r2, #0
 800f85e:	601a      	str	r2, [r3, #0]
 800f860:	605a      	str	r2, [r3, #4]
 800f862:	609a      	str	r2, [r3, #8]
 800f864:	60da      	str	r2, [r3, #12]
 800f866:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	4a25      	ldr	r2, [pc, #148]	; (800f904 <HAL_PCD_MspInit+0xb4>)
 800f86e:	4293      	cmp	r3, r2
 800f870:	d143      	bne.n	800f8fa <HAL_PCD_MspInit+0xaa>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f872:	4b25      	ldr	r3, [pc, #148]	; (800f908 <HAL_PCD_MspInit+0xb8>)
 800f874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f878:	4a23      	ldr	r2, [pc, #140]	; (800f908 <HAL_PCD_MspInit+0xb8>)
 800f87a:	f043 0301 	orr.w	r3, r3, #1
 800f87e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f882:	4b21      	ldr	r3, [pc, #132]	; (800f908 <HAL_PCD_MspInit+0xb8>)
 800f884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f888:	f003 0301 	and.w	r3, r3, #1
 800f88c:	613b      	str	r3, [r7, #16]
 800f88e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800f890:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f896:	2300      	movs	r3, #0
 800f898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f89a:	2300      	movs	r3, #0
 800f89c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f89e:	f107 0314 	add.w	r3, r7, #20
 800f8a2:	4619      	mov	r1, r3
 800f8a4:	4819      	ldr	r0, [pc, #100]	; (800f90c <HAL_PCD_MspInit+0xbc>)
 800f8a6:	f7f5 f813 	bl	80048d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f8aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f8ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f8b0:	2302      	movs	r3, #2
 800f8b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800f8bc:	230a      	movs	r3, #10
 800f8be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f8c0:	f107 0314 	add.w	r3, r7, #20
 800f8c4:	4619      	mov	r1, r3
 800f8c6:	4811      	ldr	r0, [pc, #68]	; (800f90c <HAL_PCD_MspInit+0xbc>)
 800f8c8:	f7f5 f802 	bl	80048d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f8cc:	4b0e      	ldr	r3, [pc, #56]	; (800f908 <HAL_PCD_MspInit+0xb8>)
 800f8ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f8d2:	4a0d      	ldr	r2, [pc, #52]	; (800f908 <HAL_PCD_MspInit+0xb8>)
 800f8d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f8d8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f8dc:	4b0a      	ldr	r3, [pc, #40]	; (800f908 <HAL_PCD_MspInit+0xb8>)
 800f8de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f8e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f8e6:	60fb      	str	r3, [r7, #12]
 800f8e8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	2100      	movs	r1, #0
 800f8ee:	2065      	movs	r0, #101	; 0x65
 800f8f0:	f7f3 fb2d 	bl	8002f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f8f4:	2065      	movs	r0, #101	; 0x65
 800f8f6:	f7f3 fb44 	bl	8002f82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f8fa:	bf00      	nop
 800f8fc:	3728      	adds	r7, #40	; 0x28
 800f8fe:	46bd      	mov	sp, r7
 800f900:	bd80      	pop	{r7, pc}
 800f902:	bf00      	nop
 800f904:	40080000 	.word	0x40080000
 800f908:	58024400 	.word	0x58024400
 800f90c:	58020000 	.word	0x58020000

0800f910 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b082      	sub	sp, #8
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800f924:	4619      	mov	r1, r3
 800f926:	4610      	mov	r0, r2
 800f928:	f7fe fd45 	bl	800e3b6 <USBD_LL_SetupStage>
}
 800f92c:	bf00      	nop
 800f92e:	3708      	adds	r7, #8
 800f930:	46bd      	mov	sp, r7
 800f932:	bd80      	pop	{r7, pc}

0800f934 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f934:	b580      	push	{r7, lr}
 800f936:	b082      	sub	sp, #8
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
 800f93c:	460b      	mov	r3, r1
 800f93e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800f946:	78fa      	ldrb	r2, [r7, #3]
 800f948:	6879      	ldr	r1, [r7, #4]
 800f94a:	4613      	mov	r3, r2
 800f94c:	00db      	lsls	r3, r3, #3
 800f94e:	1a9b      	subs	r3, r3, r2
 800f950:	009b      	lsls	r3, r3, #2
 800f952:	440b      	add	r3, r1
 800f954:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f958:	681a      	ldr	r2, [r3, #0]
 800f95a:	78fb      	ldrb	r3, [r7, #3]
 800f95c:	4619      	mov	r1, r3
 800f95e:	f7fe fd75 	bl	800e44c <USBD_LL_DataOutStage>
}
 800f962:	bf00      	nop
 800f964:	3708      	adds	r7, #8
 800f966:	46bd      	mov	sp, r7
 800f968:	bd80      	pop	{r7, pc}

0800f96a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f96a:	b580      	push	{r7, lr}
 800f96c:	b082      	sub	sp, #8
 800f96e:	af00      	add	r7, sp, #0
 800f970:	6078      	str	r0, [r7, #4]
 800f972:	460b      	mov	r3, r1
 800f974:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800f97c:	78fa      	ldrb	r2, [r7, #3]
 800f97e:	6879      	ldr	r1, [r7, #4]
 800f980:	4613      	mov	r3, r2
 800f982:	00db      	lsls	r3, r3, #3
 800f984:	1a9b      	subs	r3, r3, r2
 800f986:	009b      	lsls	r3, r3, #2
 800f988:	440b      	add	r3, r1
 800f98a:	3348      	adds	r3, #72	; 0x48
 800f98c:	681a      	ldr	r2, [r3, #0]
 800f98e:	78fb      	ldrb	r3, [r7, #3]
 800f990:	4619      	mov	r1, r3
 800f992:	f7fe fdcc 	bl	800e52e <USBD_LL_DataInStage>
}
 800f996:	bf00      	nop
 800f998:	3708      	adds	r7, #8
 800f99a:	46bd      	mov	sp, r7
 800f99c:	bd80      	pop	{r7, pc}

0800f99e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f99e:	b580      	push	{r7, lr}
 800f9a0:	b082      	sub	sp, #8
 800f9a2:	af00      	add	r7, sp, #0
 800f9a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	f7fe fedf 	bl	800e770 <USBD_LL_SOF>
}
 800f9b2:	bf00      	nop
 800f9b4:	3708      	adds	r7, #8
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd80      	pop	{r7, pc}

0800f9ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800f9ba:	b580      	push	{r7, lr}
 800f9bc:	b084      	sub	sp, #16
 800f9be:	af00      	add	r7, sp, #0
 800f9c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f9c2:	2301      	movs	r3, #1
 800f9c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	68db      	ldr	r3, [r3, #12]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d102      	bne.n	800f9d4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	73fb      	strb	r3, [r7, #15]
 800f9d2:	e008      	b.n	800f9e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	68db      	ldr	r3, [r3, #12]
 800f9d8:	2b02      	cmp	r3, #2
 800f9da:	d102      	bne.n	800f9e2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f9dc:	2301      	movs	r3, #1
 800f9de:	73fb      	strb	r3, [r7, #15]
 800f9e0:	e001      	b.n	800f9e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f9e2:	f7f1 fa8d 	bl	8000f00 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f9ec:	7bfa      	ldrb	r2, [r7, #15]
 800f9ee:	4611      	mov	r1, r2
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	f7fe fe82 	bl	800e6fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	f7fe fe3b 	bl	800e678 <USBD_LL_Reset>
}
 800fa02:	bf00      	nop
 800fa04:	3710      	adds	r7, #16
 800fa06:	46bd      	mov	sp, r7
 800fa08:	bd80      	pop	{r7, pc}
	...

0800fa0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b082      	sub	sp, #8
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	f7fe fe7d 	bl	800e71a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	687a      	ldr	r2, [r7, #4]
 800fa2c:	6812      	ldr	r2, [r2, #0]
 800fa2e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fa32:	f043 0301 	orr.w	r3, r3, #1
 800fa36:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	6a1b      	ldr	r3, [r3, #32]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d005      	beq.n	800fa4c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fa40:	4b04      	ldr	r3, [pc, #16]	; (800fa54 <HAL_PCD_SuspendCallback+0x48>)
 800fa42:	691b      	ldr	r3, [r3, #16]
 800fa44:	4a03      	ldr	r2, [pc, #12]	; (800fa54 <HAL_PCD_SuspendCallback+0x48>)
 800fa46:	f043 0306 	orr.w	r3, r3, #6
 800fa4a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fa4c:	bf00      	nop
 800fa4e:	3708      	adds	r7, #8
 800fa50:	46bd      	mov	sp, r7
 800fa52:	bd80      	pop	{r7, pc}
 800fa54:	e000ed00 	.word	0xe000ed00

0800fa58 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b082      	sub	sp, #8
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fa66:	4618      	mov	r0, r3
 800fa68:	f7fe fe6c 	bl	800e744 <USBD_LL_Resume>
}
 800fa6c:	bf00      	nop
 800fa6e:	3708      	adds	r7, #8
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}

0800fa74 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b082      	sub	sp, #8
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	460b      	mov	r3, r1
 800fa7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fa86:	78fa      	ldrb	r2, [r7, #3]
 800fa88:	4611      	mov	r1, r2
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	f7fe fe97 	bl	800e7be <USBD_LL_IsoOUTIncomplete>
}
 800fa90:	bf00      	nop
 800fa92:	3708      	adds	r7, #8
 800fa94:	46bd      	mov	sp, r7
 800fa96:	bd80      	pop	{r7, pc}

0800fa98 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b082      	sub	sp, #8
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
 800faa0:	460b      	mov	r3, r1
 800faa2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800faaa:	78fa      	ldrb	r2, [r7, #3]
 800faac:	4611      	mov	r1, r2
 800faae:	4618      	mov	r0, r3
 800fab0:	f7fe fe78 	bl	800e7a4 <USBD_LL_IsoINIncomplete>
}
 800fab4:	bf00      	nop
 800fab6:	3708      	adds	r7, #8
 800fab8:	46bd      	mov	sp, r7
 800faba:	bd80      	pop	{r7, pc}

0800fabc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b082      	sub	sp, #8
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800faca:	4618      	mov	r0, r3
 800facc:	f7fe fe84 	bl	800e7d8 <USBD_LL_DevConnected>
}
 800fad0:	bf00      	nop
 800fad2:	3708      	adds	r7, #8
 800fad4:	46bd      	mov	sp, r7
 800fad6:	bd80      	pop	{r7, pc}

0800fad8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b082      	sub	sp, #8
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fae6:	4618      	mov	r0, r3
 800fae8:	f7fe fe81 	bl	800e7ee <USBD_LL_DevDisconnected>
}
 800faec:	bf00      	nop
 800faee:	3708      	adds	r7, #8
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bd80      	pop	{r7, pc}

0800faf4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b082      	sub	sp, #8
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	781b      	ldrb	r3, [r3, #0]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d13e      	bne.n	800fb82 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800fb04:	4a21      	ldr	r2, [pc, #132]	; (800fb8c <USBD_LL_Init+0x98>)
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	4a1f      	ldr	r2, [pc, #124]	; (800fb8c <USBD_LL_Init+0x98>)
 800fb10:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fb14:	4b1d      	ldr	r3, [pc, #116]	; (800fb8c <USBD_LL_Init+0x98>)
 800fb16:	4a1e      	ldr	r2, [pc, #120]	; (800fb90 <USBD_LL_Init+0x9c>)
 800fb18:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800fb1a:	4b1c      	ldr	r3, [pc, #112]	; (800fb8c <USBD_LL_Init+0x98>)
 800fb1c:	2209      	movs	r2, #9
 800fb1e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800fb20:	4b1a      	ldr	r3, [pc, #104]	; (800fb8c <USBD_LL_Init+0x98>)
 800fb22:	2202      	movs	r2, #2
 800fb24:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fb26:	4b19      	ldr	r3, [pc, #100]	; (800fb8c <USBD_LL_Init+0x98>)
 800fb28:	2200      	movs	r2, #0
 800fb2a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fb2c:	4b17      	ldr	r3, [pc, #92]	; (800fb8c <USBD_LL_Init+0x98>)
 800fb2e:	2202      	movs	r2, #2
 800fb30:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fb32:	4b16      	ldr	r3, [pc, #88]	; (800fb8c <USBD_LL_Init+0x98>)
 800fb34:	2200      	movs	r2, #0
 800fb36:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800fb38:	4b14      	ldr	r3, [pc, #80]	; (800fb8c <USBD_LL_Init+0x98>)
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fb3e:	4b13      	ldr	r3, [pc, #76]	; (800fb8c <USBD_LL_Init+0x98>)
 800fb40:	2200      	movs	r2, #0
 800fb42:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800fb44:	4b11      	ldr	r3, [pc, #68]	; (800fb8c <USBD_LL_Init+0x98>)
 800fb46:	2200      	movs	r2, #0
 800fb48:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800fb4a:	4b10      	ldr	r3, [pc, #64]	; (800fb8c <USBD_LL_Init+0x98>)
 800fb4c:	2201      	movs	r2, #1
 800fb4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800fb50:	4b0e      	ldr	r3, [pc, #56]	; (800fb8c <USBD_LL_Init+0x98>)
 800fb52:	2200      	movs	r2, #0
 800fb54:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800fb56:	480d      	ldr	r0, [pc, #52]	; (800fb8c <USBD_LL_Init+0x98>)
 800fb58:	f7f5 f9c5 	bl	8004ee6 <HAL_PCD_Init>
 800fb5c:	4603      	mov	r3, r0
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d001      	beq.n	800fb66 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800fb62:	f7f1 f9cd 	bl	8000f00 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fb66:	2180      	movs	r1, #128	; 0x80
 800fb68:	4808      	ldr	r0, [pc, #32]	; (800fb8c <USBD_LL_Init+0x98>)
 800fb6a:	f7f6 fb56 	bl	800621a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fb6e:	2240      	movs	r2, #64	; 0x40
 800fb70:	2100      	movs	r1, #0
 800fb72:	4806      	ldr	r0, [pc, #24]	; (800fb8c <USBD_LL_Init+0x98>)
 800fb74:	f7f6 fb0a 	bl	800618c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800fb78:	2280      	movs	r2, #128	; 0x80
 800fb7a:	2101      	movs	r1, #1
 800fb7c:	4803      	ldr	r0, [pc, #12]	; (800fb8c <USBD_LL_Init+0x98>)
 800fb7e:	f7f6 fb05 	bl	800618c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800fb82:	2300      	movs	r3, #0
}
 800fb84:	4618      	mov	r0, r3
 800fb86:	3708      	adds	r7, #8
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd80      	pop	{r7, pc}
 800fb8c:	24001a5c 	.word	0x24001a5c
 800fb90:	40080000 	.word	0x40080000

0800fb94 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b084      	sub	sp, #16
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fba0:	2300      	movs	r3, #0
 800fba2:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fbaa:	4618      	mov	r0, r3
 800fbac:	f7f5 fabf 	bl	800512e <HAL_PCD_Start>
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800fbb4:	7bfb      	ldrb	r3, [r7, #15]
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	f000 f92e 	bl	800fe18 <USBD_Get_USB_Status>
 800fbbc:	4603      	mov	r3, r0
 800fbbe:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800fbc0:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	3710      	adds	r7, #16
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	bd80      	pop	{r7, pc}

0800fbca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fbca:	b580      	push	{r7, lr}
 800fbcc:	b084      	sub	sp, #16
 800fbce:	af00      	add	r7, sp, #0
 800fbd0:	6078      	str	r0, [r7, #4]
 800fbd2:	4608      	mov	r0, r1
 800fbd4:	4611      	mov	r1, r2
 800fbd6:	461a      	mov	r2, r3
 800fbd8:	4603      	mov	r3, r0
 800fbda:	70fb      	strb	r3, [r7, #3]
 800fbdc:	460b      	mov	r3, r1
 800fbde:	70bb      	strb	r3, [r7, #2]
 800fbe0:	4613      	mov	r3, r2
 800fbe2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fbe8:	2300      	movs	r3, #0
 800fbea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800fbf2:	78bb      	ldrb	r3, [r7, #2]
 800fbf4:	883a      	ldrh	r2, [r7, #0]
 800fbf6:	78f9      	ldrb	r1, [r7, #3]
 800fbf8:	f7f5 fed0 	bl	800599c <HAL_PCD_EP_Open>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc00:	7bfb      	ldrb	r3, [r7, #15]
 800fc02:	4618      	mov	r0, r3
 800fc04:	f000 f908 	bl	800fe18 <USBD_Get_USB_Status>
 800fc08:	4603      	mov	r3, r0
 800fc0a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800fc0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc0e:	4618      	mov	r0, r3
 800fc10:	3710      	adds	r7, #16
 800fc12:	46bd      	mov	sp, r7
 800fc14:	bd80      	pop	{r7, pc}

0800fc16 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc16:	b580      	push	{r7, lr}
 800fc18:	b084      	sub	sp, #16
 800fc1a:	af00      	add	r7, sp, #0
 800fc1c:	6078      	str	r0, [r7, #4]
 800fc1e:	460b      	mov	r3, r1
 800fc20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc22:	2300      	movs	r3, #0
 800fc24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc26:	2300      	movs	r3, #0
 800fc28:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fc30:	78fa      	ldrb	r2, [r7, #3]
 800fc32:	4611      	mov	r1, r2
 800fc34:	4618      	mov	r0, r3
 800fc36:	f7f5 ff19 	bl	8005a6c <HAL_PCD_EP_Close>
 800fc3a:	4603      	mov	r3, r0
 800fc3c:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800fc3e:	7bfb      	ldrb	r3, [r7, #15]
 800fc40:	4618      	mov	r0, r3
 800fc42:	f000 f8e9 	bl	800fe18 <USBD_Get_USB_Status>
 800fc46:	4603      	mov	r3, r0
 800fc48:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800fc4a:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	3710      	adds	r7, #16
 800fc50:	46bd      	mov	sp, r7
 800fc52:	bd80      	pop	{r7, pc}

0800fc54 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b084      	sub	sp, #16
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
 800fc5c:	460b      	mov	r3, r1
 800fc5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc60:	2300      	movs	r3, #0
 800fc62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc64:	2300      	movs	r3, #0
 800fc66:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fc6e:	78fa      	ldrb	r2, [r7, #3]
 800fc70:	4611      	mov	r1, r2
 800fc72:	4618      	mov	r0, r3
 800fc74:	f7f5 fff1 	bl	8005c5a <HAL_PCD_EP_SetStall>
 800fc78:	4603      	mov	r3, r0
 800fc7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc7c:	7bfb      	ldrb	r3, [r7, #15]
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f000 f8ca 	bl	800fe18 <USBD_Get_USB_Status>
 800fc84:	4603      	mov	r3, r0
 800fc86:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800fc88:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	3710      	adds	r7, #16
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	bd80      	pop	{r7, pc}

0800fc92 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc92:	b580      	push	{r7, lr}
 800fc94:	b084      	sub	sp, #16
 800fc96:	af00      	add	r7, sp, #0
 800fc98:	6078      	str	r0, [r7, #4]
 800fc9a:	460b      	mov	r3, r1
 800fc9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc9e:	2300      	movs	r3, #0
 800fca0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fca2:	2300      	movs	r3, #0
 800fca4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fcac:	78fa      	ldrb	r2, [r7, #3]
 800fcae:	4611      	mov	r1, r2
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f7f6 f836 	bl	8005d22 <HAL_PCD_EP_ClrStall>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800fcba:	7bfb      	ldrb	r3, [r7, #15]
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	f000 f8ab 	bl	800fe18 <USBD_Get_USB_Status>
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800fcc6:	7bbb      	ldrb	r3, [r7, #14]
}
 800fcc8:	4618      	mov	r0, r3
 800fcca:	3710      	adds	r7, #16
 800fccc:	46bd      	mov	sp, r7
 800fcce:	bd80      	pop	{r7, pc}

0800fcd0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fcd0:	b480      	push	{r7}
 800fcd2:	b085      	sub	sp, #20
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
 800fcd8:	460b      	mov	r3, r1
 800fcda:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fce2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800fce4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	da0b      	bge.n	800fd04 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800fcec:	78fb      	ldrb	r3, [r7, #3]
 800fcee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fcf2:	68f9      	ldr	r1, [r7, #12]
 800fcf4:	4613      	mov	r3, r2
 800fcf6:	00db      	lsls	r3, r3, #3
 800fcf8:	1a9b      	subs	r3, r3, r2
 800fcfa:	009b      	lsls	r3, r3, #2
 800fcfc:	440b      	add	r3, r1
 800fcfe:	333e      	adds	r3, #62	; 0x3e
 800fd00:	781b      	ldrb	r3, [r3, #0]
 800fd02:	e00b      	b.n	800fd1c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800fd04:	78fb      	ldrb	r3, [r7, #3]
 800fd06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fd0a:	68f9      	ldr	r1, [r7, #12]
 800fd0c:	4613      	mov	r3, r2
 800fd0e:	00db      	lsls	r3, r3, #3
 800fd10:	1a9b      	subs	r3, r3, r2
 800fd12:	009b      	lsls	r3, r3, #2
 800fd14:	440b      	add	r3, r1
 800fd16:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fd1a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	3714      	adds	r7, #20
 800fd20:	46bd      	mov	sp, r7
 800fd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd26:	4770      	bx	lr

0800fd28 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b084      	sub	sp, #16
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
 800fd30:	460b      	mov	r3, r1
 800fd32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd34:	2300      	movs	r3, #0
 800fd36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd38:	2300      	movs	r3, #0
 800fd3a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fd42:	78fa      	ldrb	r2, [r7, #3]
 800fd44:	4611      	mov	r1, r2
 800fd46:	4618      	mov	r0, r3
 800fd48:	f7f5 fe03 	bl	8005952 <HAL_PCD_SetAddress>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd50:	7bfb      	ldrb	r3, [r7, #15]
 800fd52:	4618      	mov	r0, r3
 800fd54:	f000 f860 	bl	800fe18 <USBD_Get_USB_Status>
 800fd58:	4603      	mov	r3, r0
 800fd5a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800fd5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd5e:	4618      	mov	r0, r3
 800fd60:	3710      	adds	r7, #16
 800fd62:	46bd      	mov	sp, r7
 800fd64:	bd80      	pop	{r7, pc}

0800fd66 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800fd66:	b580      	push	{r7, lr}
 800fd68:	b086      	sub	sp, #24
 800fd6a:	af00      	add	r7, sp, #0
 800fd6c:	60f8      	str	r0, [r7, #12]
 800fd6e:	607a      	str	r2, [r7, #4]
 800fd70:	461a      	mov	r2, r3
 800fd72:	460b      	mov	r3, r1
 800fd74:	72fb      	strb	r3, [r7, #11]
 800fd76:	4613      	mov	r3, r2
 800fd78:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd7e:	2300      	movs	r3, #0
 800fd80:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800fd88:	893b      	ldrh	r3, [r7, #8]
 800fd8a:	7af9      	ldrb	r1, [r7, #11]
 800fd8c:	687a      	ldr	r2, [r7, #4]
 800fd8e:	f7f5 ff1a 	bl	8005bc6 <HAL_PCD_EP_Transmit>
 800fd92:	4603      	mov	r3, r0
 800fd94:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800fd96:	7dfb      	ldrb	r3, [r7, #23]
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f000 f83d 	bl	800fe18 <USBD_Get_USB_Status>
 800fd9e:	4603      	mov	r3, r0
 800fda0:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800fda2:	7dbb      	ldrb	r3, [r7, #22]
}
 800fda4:	4618      	mov	r0, r3
 800fda6:	3718      	adds	r7, #24
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	bd80      	pop	{r7, pc}

0800fdac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b086      	sub	sp, #24
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	60f8      	str	r0, [r7, #12]
 800fdb4:	607a      	str	r2, [r7, #4]
 800fdb6:	461a      	mov	r2, r3
 800fdb8:	460b      	mov	r3, r1
 800fdba:	72fb      	strb	r3, [r7, #11]
 800fdbc:	4613      	mov	r3, r2
 800fdbe:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800fdce:	893b      	ldrh	r3, [r7, #8]
 800fdd0:	7af9      	ldrb	r1, [r7, #11]
 800fdd2:	687a      	ldr	r2, [r7, #4]
 800fdd4:	f7f5 fe94 	bl	8005b00 <HAL_PCD_EP_Receive>
 800fdd8:	4603      	mov	r3, r0
 800fdda:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800fddc:	7dfb      	ldrb	r3, [r7, #23]
 800fdde:	4618      	mov	r0, r3
 800fde0:	f000 f81a 	bl	800fe18 <USBD_Get_USB_Status>
 800fde4:	4603      	mov	r3, r0
 800fde6:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800fde8:	7dbb      	ldrb	r3, [r7, #22]
}
 800fdea:	4618      	mov	r0, r3
 800fdec:	3718      	adds	r7, #24
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	bd80      	pop	{r7, pc}

0800fdf2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fdf2:	b580      	push	{r7, lr}
 800fdf4:	b082      	sub	sp, #8
 800fdf6:	af00      	add	r7, sp, #0
 800fdf8:	6078      	str	r0, [r7, #4]
 800fdfa:	460b      	mov	r3, r1
 800fdfc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fe04:	78fa      	ldrb	r2, [r7, #3]
 800fe06:	4611      	mov	r1, r2
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f7f5 fec4 	bl	8005b96 <HAL_PCD_EP_GetRxCount>
 800fe0e:	4603      	mov	r3, r0
}
 800fe10:	4618      	mov	r0, r3
 800fe12:	3708      	adds	r7, #8
 800fe14:	46bd      	mov	sp, r7
 800fe16:	bd80      	pop	{r7, pc}

0800fe18 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fe18:	b480      	push	{r7}
 800fe1a:	b085      	sub	sp, #20
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	4603      	mov	r3, r0
 800fe20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe22:	2300      	movs	r3, #0
 800fe24:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fe26:	79fb      	ldrb	r3, [r7, #7]
 800fe28:	2b03      	cmp	r3, #3
 800fe2a:	d817      	bhi.n	800fe5c <USBD_Get_USB_Status+0x44>
 800fe2c:	a201      	add	r2, pc, #4	; (adr r2, 800fe34 <USBD_Get_USB_Status+0x1c>)
 800fe2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe32:	bf00      	nop
 800fe34:	0800fe45 	.word	0x0800fe45
 800fe38:	0800fe4b 	.word	0x0800fe4b
 800fe3c:	0800fe51 	.word	0x0800fe51
 800fe40:	0800fe57 	.word	0x0800fe57
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fe44:	2300      	movs	r3, #0
 800fe46:	73fb      	strb	r3, [r7, #15]
    break;
 800fe48:	e00b      	b.n	800fe62 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fe4a:	2302      	movs	r3, #2
 800fe4c:	73fb      	strb	r3, [r7, #15]
    break;
 800fe4e:	e008      	b.n	800fe62 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fe50:	2301      	movs	r3, #1
 800fe52:	73fb      	strb	r3, [r7, #15]
    break;
 800fe54:	e005      	b.n	800fe62 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fe56:	2302      	movs	r3, #2
 800fe58:	73fb      	strb	r3, [r7, #15]
    break;
 800fe5a:	e002      	b.n	800fe62 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fe5c:	2302      	movs	r3, #2
 800fe5e:	73fb      	strb	r3, [r7, #15]
    break;
 800fe60:	bf00      	nop
  }
  return usb_status;
 800fe62:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe64:	4618      	mov	r0, r3
 800fe66:	3714      	adds	r7, #20
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6e:	4770      	bx	lr

0800fe70 <__errno>:
 800fe70:	4b01      	ldr	r3, [pc, #4]	; (800fe78 <__errno+0x8>)
 800fe72:	6818      	ldr	r0, [r3, #0]
 800fe74:	4770      	bx	lr
 800fe76:	bf00      	nop
 800fe78:	24000180 	.word	0x24000180

0800fe7c <__libc_init_array>:
 800fe7c:	b570      	push	{r4, r5, r6, lr}
 800fe7e:	4e0d      	ldr	r6, [pc, #52]	; (800feb4 <__libc_init_array+0x38>)
 800fe80:	4c0d      	ldr	r4, [pc, #52]	; (800feb8 <__libc_init_array+0x3c>)
 800fe82:	1ba4      	subs	r4, r4, r6
 800fe84:	10a4      	asrs	r4, r4, #2
 800fe86:	2500      	movs	r5, #0
 800fe88:	42a5      	cmp	r5, r4
 800fe8a:	d109      	bne.n	800fea0 <__libc_init_array+0x24>
 800fe8c:	4e0b      	ldr	r6, [pc, #44]	; (800febc <__libc_init_array+0x40>)
 800fe8e:	4c0c      	ldr	r4, [pc, #48]	; (800fec0 <__libc_init_array+0x44>)
 800fe90:	f000 f8ea 	bl	8010068 <_init>
 800fe94:	1ba4      	subs	r4, r4, r6
 800fe96:	10a4      	asrs	r4, r4, #2
 800fe98:	2500      	movs	r5, #0
 800fe9a:	42a5      	cmp	r5, r4
 800fe9c:	d105      	bne.n	800feaa <__libc_init_array+0x2e>
 800fe9e:	bd70      	pop	{r4, r5, r6, pc}
 800fea0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fea4:	4798      	blx	r3
 800fea6:	3501      	adds	r5, #1
 800fea8:	e7ee      	b.n	800fe88 <__libc_init_array+0xc>
 800feaa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800feae:	4798      	blx	r3
 800feb0:	3501      	adds	r5, #1
 800feb2:	e7f2      	b.n	800fe9a <__libc_init_array+0x1e>
 800feb4:	080100f8 	.word	0x080100f8
 800feb8:	080100f8 	.word	0x080100f8
 800febc:	080100f8 	.word	0x080100f8
 800fec0:	080100fc 	.word	0x080100fc

0800fec4 <malloc>:
 800fec4:	4b02      	ldr	r3, [pc, #8]	; (800fed0 <malloc+0xc>)
 800fec6:	4601      	mov	r1, r0
 800fec8:	6818      	ldr	r0, [r3, #0]
 800feca:	f000 b861 	b.w	800ff90 <_malloc_r>
 800fece:	bf00      	nop
 800fed0:	24000180 	.word	0x24000180

0800fed4 <free>:
 800fed4:	4b02      	ldr	r3, [pc, #8]	; (800fee0 <free+0xc>)
 800fed6:	4601      	mov	r1, r0
 800fed8:	6818      	ldr	r0, [r3, #0]
 800feda:	f000 b80b 	b.w	800fef4 <_free_r>
 800fede:	bf00      	nop
 800fee0:	24000180 	.word	0x24000180

0800fee4 <memset>:
 800fee4:	4402      	add	r2, r0
 800fee6:	4603      	mov	r3, r0
 800fee8:	4293      	cmp	r3, r2
 800feea:	d100      	bne.n	800feee <memset+0xa>
 800feec:	4770      	bx	lr
 800feee:	f803 1b01 	strb.w	r1, [r3], #1
 800fef2:	e7f9      	b.n	800fee8 <memset+0x4>

0800fef4 <_free_r>:
 800fef4:	b538      	push	{r3, r4, r5, lr}
 800fef6:	4605      	mov	r5, r0
 800fef8:	2900      	cmp	r1, #0
 800fefa:	d045      	beq.n	800ff88 <_free_r+0x94>
 800fefc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff00:	1f0c      	subs	r4, r1, #4
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	bfb8      	it	lt
 800ff06:	18e4      	addlt	r4, r4, r3
 800ff08:	f000 f8ac 	bl	8010064 <__malloc_lock>
 800ff0c:	4a1f      	ldr	r2, [pc, #124]	; (800ff8c <_free_r+0x98>)
 800ff0e:	6813      	ldr	r3, [r2, #0]
 800ff10:	4610      	mov	r0, r2
 800ff12:	b933      	cbnz	r3, 800ff22 <_free_r+0x2e>
 800ff14:	6063      	str	r3, [r4, #4]
 800ff16:	6014      	str	r4, [r2, #0]
 800ff18:	4628      	mov	r0, r5
 800ff1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff1e:	f000 b8a2 	b.w	8010066 <__malloc_unlock>
 800ff22:	42a3      	cmp	r3, r4
 800ff24:	d90c      	bls.n	800ff40 <_free_r+0x4c>
 800ff26:	6821      	ldr	r1, [r4, #0]
 800ff28:	1862      	adds	r2, r4, r1
 800ff2a:	4293      	cmp	r3, r2
 800ff2c:	bf04      	itt	eq
 800ff2e:	681a      	ldreq	r2, [r3, #0]
 800ff30:	685b      	ldreq	r3, [r3, #4]
 800ff32:	6063      	str	r3, [r4, #4]
 800ff34:	bf04      	itt	eq
 800ff36:	1852      	addeq	r2, r2, r1
 800ff38:	6022      	streq	r2, [r4, #0]
 800ff3a:	6004      	str	r4, [r0, #0]
 800ff3c:	e7ec      	b.n	800ff18 <_free_r+0x24>
 800ff3e:	4613      	mov	r3, r2
 800ff40:	685a      	ldr	r2, [r3, #4]
 800ff42:	b10a      	cbz	r2, 800ff48 <_free_r+0x54>
 800ff44:	42a2      	cmp	r2, r4
 800ff46:	d9fa      	bls.n	800ff3e <_free_r+0x4a>
 800ff48:	6819      	ldr	r1, [r3, #0]
 800ff4a:	1858      	adds	r0, r3, r1
 800ff4c:	42a0      	cmp	r0, r4
 800ff4e:	d10b      	bne.n	800ff68 <_free_r+0x74>
 800ff50:	6820      	ldr	r0, [r4, #0]
 800ff52:	4401      	add	r1, r0
 800ff54:	1858      	adds	r0, r3, r1
 800ff56:	4282      	cmp	r2, r0
 800ff58:	6019      	str	r1, [r3, #0]
 800ff5a:	d1dd      	bne.n	800ff18 <_free_r+0x24>
 800ff5c:	6810      	ldr	r0, [r2, #0]
 800ff5e:	6852      	ldr	r2, [r2, #4]
 800ff60:	605a      	str	r2, [r3, #4]
 800ff62:	4401      	add	r1, r0
 800ff64:	6019      	str	r1, [r3, #0]
 800ff66:	e7d7      	b.n	800ff18 <_free_r+0x24>
 800ff68:	d902      	bls.n	800ff70 <_free_r+0x7c>
 800ff6a:	230c      	movs	r3, #12
 800ff6c:	602b      	str	r3, [r5, #0]
 800ff6e:	e7d3      	b.n	800ff18 <_free_r+0x24>
 800ff70:	6820      	ldr	r0, [r4, #0]
 800ff72:	1821      	adds	r1, r4, r0
 800ff74:	428a      	cmp	r2, r1
 800ff76:	bf04      	itt	eq
 800ff78:	6811      	ldreq	r1, [r2, #0]
 800ff7a:	6852      	ldreq	r2, [r2, #4]
 800ff7c:	6062      	str	r2, [r4, #4]
 800ff7e:	bf04      	itt	eq
 800ff80:	1809      	addeq	r1, r1, r0
 800ff82:	6021      	streq	r1, [r4, #0]
 800ff84:	605c      	str	r4, [r3, #4]
 800ff86:	e7c7      	b.n	800ff18 <_free_r+0x24>
 800ff88:	bd38      	pop	{r3, r4, r5, pc}
 800ff8a:	bf00      	nop
 800ff8c:	2400020c 	.word	0x2400020c

0800ff90 <_malloc_r>:
 800ff90:	b570      	push	{r4, r5, r6, lr}
 800ff92:	1ccd      	adds	r5, r1, #3
 800ff94:	f025 0503 	bic.w	r5, r5, #3
 800ff98:	3508      	adds	r5, #8
 800ff9a:	2d0c      	cmp	r5, #12
 800ff9c:	bf38      	it	cc
 800ff9e:	250c      	movcc	r5, #12
 800ffa0:	2d00      	cmp	r5, #0
 800ffa2:	4606      	mov	r6, r0
 800ffa4:	db01      	blt.n	800ffaa <_malloc_r+0x1a>
 800ffa6:	42a9      	cmp	r1, r5
 800ffa8:	d903      	bls.n	800ffb2 <_malloc_r+0x22>
 800ffaa:	230c      	movs	r3, #12
 800ffac:	6033      	str	r3, [r6, #0]
 800ffae:	2000      	movs	r0, #0
 800ffb0:	bd70      	pop	{r4, r5, r6, pc}
 800ffb2:	f000 f857 	bl	8010064 <__malloc_lock>
 800ffb6:	4a21      	ldr	r2, [pc, #132]	; (801003c <_malloc_r+0xac>)
 800ffb8:	6814      	ldr	r4, [r2, #0]
 800ffba:	4621      	mov	r1, r4
 800ffbc:	b991      	cbnz	r1, 800ffe4 <_malloc_r+0x54>
 800ffbe:	4c20      	ldr	r4, [pc, #128]	; (8010040 <_malloc_r+0xb0>)
 800ffc0:	6823      	ldr	r3, [r4, #0]
 800ffc2:	b91b      	cbnz	r3, 800ffcc <_malloc_r+0x3c>
 800ffc4:	4630      	mov	r0, r6
 800ffc6:	f000 f83d 	bl	8010044 <_sbrk_r>
 800ffca:	6020      	str	r0, [r4, #0]
 800ffcc:	4629      	mov	r1, r5
 800ffce:	4630      	mov	r0, r6
 800ffd0:	f000 f838 	bl	8010044 <_sbrk_r>
 800ffd4:	1c43      	adds	r3, r0, #1
 800ffd6:	d124      	bne.n	8010022 <_malloc_r+0x92>
 800ffd8:	230c      	movs	r3, #12
 800ffda:	6033      	str	r3, [r6, #0]
 800ffdc:	4630      	mov	r0, r6
 800ffde:	f000 f842 	bl	8010066 <__malloc_unlock>
 800ffe2:	e7e4      	b.n	800ffae <_malloc_r+0x1e>
 800ffe4:	680b      	ldr	r3, [r1, #0]
 800ffe6:	1b5b      	subs	r3, r3, r5
 800ffe8:	d418      	bmi.n	801001c <_malloc_r+0x8c>
 800ffea:	2b0b      	cmp	r3, #11
 800ffec:	d90f      	bls.n	801000e <_malloc_r+0x7e>
 800ffee:	600b      	str	r3, [r1, #0]
 800fff0:	50cd      	str	r5, [r1, r3]
 800fff2:	18cc      	adds	r4, r1, r3
 800fff4:	4630      	mov	r0, r6
 800fff6:	f000 f836 	bl	8010066 <__malloc_unlock>
 800fffa:	f104 000b 	add.w	r0, r4, #11
 800fffe:	1d23      	adds	r3, r4, #4
 8010000:	f020 0007 	bic.w	r0, r0, #7
 8010004:	1ac3      	subs	r3, r0, r3
 8010006:	d0d3      	beq.n	800ffb0 <_malloc_r+0x20>
 8010008:	425a      	negs	r2, r3
 801000a:	50e2      	str	r2, [r4, r3]
 801000c:	e7d0      	b.n	800ffb0 <_malloc_r+0x20>
 801000e:	428c      	cmp	r4, r1
 8010010:	684b      	ldr	r3, [r1, #4]
 8010012:	bf16      	itet	ne
 8010014:	6063      	strne	r3, [r4, #4]
 8010016:	6013      	streq	r3, [r2, #0]
 8010018:	460c      	movne	r4, r1
 801001a:	e7eb      	b.n	800fff4 <_malloc_r+0x64>
 801001c:	460c      	mov	r4, r1
 801001e:	6849      	ldr	r1, [r1, #4]
 8010020:	e7cc      	b.n	800ffbc <_malloc_r+0x2c>
 8010022:	1cc4      	adds	r4, r0, #3
 8010024:	f024 0403 	bic.w	r4, r4, #3
 8010028:	42a0      	cmp	r0, r4
 801002a:	d005      	beq.n	8010038 <_malloc_r+0xa8>
 801002c:	1a21      	subs	r1, r4, r0
 801002e:	4630      	mov	r0, r6
 8010030:	f000 f808 	bl	8010044 <_sbrk_r>
 8010034:	3001      	adds	r0, #1
 8010036:	d0cf      	beq.n	800ffd8 <_malloc_r+0x48>
 8010038:	6025      	str	r5, [r4, #0]
 801003a:	e7db      	b.n	800fff4 <_malloc_r+0x64>
 801003c:	2400020c 	.word	0x2400020c
 8010040:	24000210 	.word	0x24000210

08010044 <_sbrk_r>:
 8010044:	b538      	push	{r3, r4, r5, lr}
 8010046:	4c06      	ldr	r4, [pc, #24]	; (8010060 <_sbrk_r+0x1c>)
 8010048:	2300      	movs	r3, #0
 801004a:	4605      	mov	r5, r0
 801004c:	4608      	mov	r0, r1
 801004e:	6023      	str	r3, [r4, #0]
 8010050:	f7f1 fa42 	bl	80014d8 <_sbrk>
 8010054:	1c43      	adds	r3, r0, #1
 8010056:	d102      	bne.n	801005e <_sbrk_r+0x1a>
 8010058:	6823      	ldr	r3, [r4, #0]
 801005a:	b103      	cbz	r3, 801005e <_sbrk_r+0x1a>
 801005c:	602b      	str	r3, [r5, #0]
 801005e:	bd38      	pop	{r3, r4, r5, pc}
 8010060:	24001e64 	.word	0x24001e64

08010064 <__malloc_lock>:
 8010064:	4770      	bx	lr

08010066 <__malloc_unlock>:
 8010066:	4770      	bx	lr

08010068 <_init>:
 8010068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801006a:	bf00      	nop
 801006c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801006e:	bc08      	pop	{r3}
 8010070:	469e      	mov	lr, r3
 8010072:	4770      	bx	lr

08010074 <_fini>:
 8010074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010076:	bf00      	nop
 8010078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801007a:	bc08      	pop	{r3}
 801007c:	469e      	mov	lr, r3
 801007e:	4770      	bx	lr
