
H750VBT6-flight-board-v0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000119d4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08011c74  08011c74  00021c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011d50  08011d50  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  08011d50  08011d50  00021d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011d58  08011d58  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011d58  08011d58  00021d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011d5c  08011d5c  00021d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  24000000  08011d60  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d2c  240001e8  08011f44  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24001f14  08011f44  00031f14  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004bab6  00000000  00000000  00030212  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007ab7  00000000  00000000  0007bcc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022e8  00000000  00000000  00083780  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ff0  00000000  00000000  00085a68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00045378  00000000  00000000  00087a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002a058  00000000  00000000  000ccdd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00188256  00000000  00000000  000f6e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0027f07e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009540  00000000  00000000  0027f0fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00000100  00000000  00000000  0028863c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e8 	.word	0x240001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011c5c 	.word	0x08011c5c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001ec 	.word	0x240001ec
 80002dc:	08011c5c 	.word	0x08011c5c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	; 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80004be:	f1a4 0401 	sub.w	r4, r4, #1
 80004c2:	d1e9      	bne.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_uldivmod>:
 80006f8:	b953      	cbnz	r3, 8000710 <__aeabi_uldivmod+0x18>
 80006fa:	b94a      	cbnz	r2, 8000710 <__aeabi_uldivmod+0x18>
 80006fc:	2900      	cmp	r1, #0
 80006fe:	bf08      	it	eq
 8000700:	2800      	cmpeq	r0, #0
 8000702:	bf1c      	itt	ne
 8000704:	f04f 31ff 	movne.w	r1, #4294967295
 8000708:	f04f 30ff 	movne.w	r0, #4294967295
 800070c:	f000 b972 	b.w	80009f4 <__aeabi_idiv0>
 8000710:	f1ad 0c08 	sub.w	ip, sp, #8
 8000714:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000718:	f000 f806 	bl	8000728 <__udivmoddi4>
 800071c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000720:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000724:	b004      	add	sp, #16
 8000726:	4770      	bx	lr

08000728 <__udivmoddi4>:
 8000728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800072c:	9e08      	ldr	r6, [sp, #32]
 800072e:	4604      	mov	r4, r0
 8000730:	4688      	mov	r8, r1
 8000732:	2b00      	cmp	r3, #0
 8000734:	d14b      	bne.n	80007ce <__udivmoddi4+0xa6>
 8000736:	428a      	cmp	r2, r1
 8000738:	4615      	mov	r5, r2
 800073a:	d967      	bls.n	800080c <__udivmoddi4+0xe4>
 800073c:	fab2 f282 	clz	r2, r2
 8000740:	b14a      	cbz	r2, 8000756 <__udivmoddi4+0x2e>
 8000742:	f1c2 0720 	rsb	r7, r2, #32
 8000746:	fa01 f302 	lsl.w	r3, r1, r2
 800074a:	fa20 f707 	lsr.w	r7, r0, r7
 800074e:	4095      	lsls	r5, r2
 8000750:	ea47 0803 	orr.w	r8, r7, r3
 8000754:	4094      	lsls	r4, r2
 8000756:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800075a:	0c23      	lsrs	r3, r4, #16
 800075c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000760:	fa1f fc85 	uxth.w	ip, r5
 8000764:	fb0e 8817 	mls	r8, lr, r7, r8
 8000768:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800076c:	fb07 f10c 	mul.w	r1, r7, ip
 8000770:	4299      	cmp	r1, r3
 8000772:	d909      	bls.n	8000788 <__udivmoddi4+0x60>
 8000774:	18eb      	adds	r3, r5, r3
 8000776:	f107 30ff 	add.w	r0, r7, #4294967295
 800077a:	f080 811b 	bcs.w	80009b4 <__udivmoddi4+0x28c>
 800077e:	4299      	cmp	r1, r3
 8000780:	f240 8118 	bls.w	80009b4 <__udivmoddi4+0x28c>
 8000784:	3f02      	subs	r7, #2
 8000786:	442b      	add	r3, r5
 8000788:	1a5b      	subs	r3, r3, r1
 800078a:	b2a4      	uxth	r4, r4
 800078c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000790:	fb0e 3310 	mls	r3, lr, r0, r3
 8000794:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000798:	fb00 fc0c 	mul.w	ip, r0, ip
 800079c:	45a4      	cmp	ip, r4
 800079e:	d909      	bls.n	80007b4 <__udivmoddi4+0x8c>
 80007a0:	192c      	adds	r4, r5, r4
 80007a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80007a6:	f080 8107 	bcs.w	80009b8 <__udivmoddi4+0x290>
 80007aa:	45a4      	cmp	ip, r4
 80007ac:	f240 8104 	bls.w	80009b8 <__udivmoddi4+0x290>
 80007b0:	3802      	subs	r0, #2
 80007b2:	442c      	add	r4, r5
 80007b4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80007b8:	eba4 040c 	sub.w	r4, r4, ip
 80007bc:	2700      	movs	r7, #0
 80007be:	b11e      	cbz	r6, 80007c8 <__udivmoddi4+0xa0>
 80007c0:	40d4      	lsrs	r4, r2
 80007c2:	2300      	movs	r3, #0
 80007c4:	e9c6 4300 	strd	r4, r3, [r6]
 80007c8:	4639      	mov	r1, r7
 80007ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ce:	428b      	cmp	r3, r1
 80007d0:	d909      	bls.n	80007e6 <__udivmoddi4+0xbe>
 80007d2:	2e00      	cmp	r6, #0
 80007d4:	f000 80eb 	beq.w	80009ae <__udivmoddi4+0x286>
 80007d8:	2700      	movs	r7, #0
 80007da:	e9c6 0100 	strd	r0, r1, [r6]
 80007de:	4638      	mov	r0, r7
 80007e0:	4639      	mov	r1, r7
 80007e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007e6:	fab3 f783 	clz	r7, r3
 80007ea:	2f00      	cmp	r7, #0
 80007ec:	d147      	bne.n	800087e <__udivmoddi4+0x156>
 80007ee:	428b      	cmp	r3, r1
 80007f0:	d302      	bcc.n	80007f8 <__udivmoddi4+0xd0>
 80007f2:	4282      	cmp	r2, r0
 80007f4:	f200 80fa 	bhi.w	80009ec <__udivmoddi4+0x2c4>
 80007f8:	1a84      	subs	r4, r0, r2
 80007fa:	eb61 0303 	sbc.w	r3, r1, r3
 80007fe:	2001      	movs	r0, #1
 8000800:	4698      	mov	r8, r3
 8000802:	2e00      	cmp	r6, #0
 8000804:	d0e0      	beq.n	80007c8 <__udivmoddi4+0xa0>
 8000806:	e9c6 4800 	strd	r4, r8, [r6]
 800080a:	e7dd      	b.n	80007c8 <__udivmoddi4+0xa0>
 800080c:	b902      	cbnz	r2, 8000810 <__udivmoddi4+0xe8>
 800080e:	deff      	udf	#255	; 0xff
 8000810:	fab2 f282 	clz	r2, r2
 8000814:	2a00      	cmp	r2, #0
 8000816:	f040 808f 	bne.w	8000938 <__udivmoddi4+0x210>
 800081a:	1b49      	subs	r1, r1, r5
 800081c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000820:	fa1f f885 	uxth.w	r8, r5
 8000824:	2701      	movs	r7, #1
 8000826:	fbb1 fcfe 	udiv	ip, r1, lr
 800082a:	0c23      	lsrs	r3, r4, #16
 800082c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000830:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000834:	fb08 f10c 	mul.w	r1, r8, ip
 8000838:	4299      	cmp	r1, r3
 800083a:	d907      	bls.n	800084c <__udivmoddi4+0x124>
 800083c:	18eb      	adds	r3, r5, r3
 800083e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000842:	d202      	bcs.n	800084a <__udivmoddi4+0x122>
 8000844:	4299      	cmp	r1, r3
 8000846:	f200 80cd 	bhi.w	80009e4 <__udivmoddi4+0x2bc>
 800084a:	4684      	mov	ip, r0
 800084c:	1a59      	subs	r1, r3, r1
 800084e:	b2a3      	uxth	r3, r4
 8000850:	fbb1 f0fe 	udiv	r0, r1, lr
 8000854:	fb0e 1410 	mls	r4, lr, r0, r1
 8000858:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800085c:	fb08 f800 	mul.w	r8, r8, r0
 8000860:	45a0      	cmp	r8, r4
 8000862:	d907      	bls.n	8000874 <__udivmoddi4+0x14c>
 8000864:	192c      	adds	r4, r5, r4
 8000866:	f100 33ff 	add.w	r3, r0, #4294967295
 800086a:	d202      	bcs.n	8000872 <__udivmoddi4+0x14a>
 800086c:	45a0      	cmp	r8, r4
 800086e:	f200 80b6 	bhi.w	80009de <__udivmoddi4+0x2b6>
 8000872:	4618      	mov	r0, r3
 8000874:	eba4 0408 	sub.w	r4, r4, r8
 8000878:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800087c:	e79f      	b.n	80007be <__udivmoddi4+0x96>
 800087e:	f1c7 0c20 	rsb	ip, r7, #32
 8000882:	40bb      	lsls	r3, r7
 8000884:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000888:	ea4e 0e03 	orr.w	lr, lr, r3
 800088c:	fa01 f407 	lsl.w	r4, r1, r7
 8000890:	fa20 f50c 	lsr.w	r5, r0, ip
 8000894:	fa21 f30c 	lsr.w	r3, r1, ip
 8000898:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800089c:	4325      	orrs	r5, r4
 800089e:	fbb3 f9f8 	udiv	r9, r3, r8
 80008a2:	0c2c      	lsrs	r4, r5, #16
 80008a4:	fb08 3319 	mls	r3, r8, r9, r3
 80008a8:	fa1f fa8e 	uxth.w	sl, lr
 80008ac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80008b0:	fb09 f40a 	mul.w	r4, r9, sl
 80008b4:	429c      	cmp	r4, r3
 80008b6:	fa02 f207 	lsl.w	r2, r2, r7
 80008ba:	fa00 f107 	lsl.w	r1, r0, r7
 80008be:	d90b      	bls.n	80008d8 <__udivmoddi4+0x1b0>
 80008c0:	eb1e 0303 	adds.w	r3, lr, r3
 80008c4:	f109 30ff 	add.w	r0, r9, #4294967295
 80008c8:	f080 8087 	bcs.w	80009da <__udivmoddi4+0x2b2>
 80008cc:	429c      	cmp	r4, r3
 80008ce:	f240 8084 	bls.w	80009da <__udivmoddi4+0x2b2>
 80008d2:	f1a9 0902 	sub.w	r9, r9, #2
 80008d6:	4473      	add	r3, lr
 80008d8:	1b1b      	subs	r3, r3, r4
 80008da:	b2ad      	uxth	r5, r5
 80008dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80008e0:	fb08 3310 	mls	r3, r8, r0, r3
 80008e4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80008e8:	fb00 fa0a 	mul.w	sl, r0, sl
 80008ec:	45a2      	cmp	sl, r4
 80008ee:	d908      	bls.n	8000902 <__udivmoddi4+0x1da>
 80008f0:	eb1e 0404 	adds.w	r4, lr, r4
 80008f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80008f8:	d26b      	bcs.n	80009d2 <__udivmoddi4+0x2aa>
 80008fa:	45a2      	cmp	sl, r4
 80008fc:	d969      	bls.n	80009d2 <__udivmoddi4+0x2aa>
 80008fe:	3802      	subs	r0, #2
 8000900:	4474      	add	r4, lr
 8000902:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000906:	fba0 8902 	umull	r8, r9, r0, r2
 800090a:	eba4 040a 	sub.w	r4, r4, sl
 800090e:	454c      	cmp	r4, r9
 8000910:	46c2      	mov	sl, r8
 8000912:	464b      	mov	r3, r9
 8000914:	d354      	bcc.n	80009c0 <__udivmoddi4+0x298>
 8000916:	d051      	beq.n	80009bc <__udivmoddi4+0x294>
 8000918:	2e00      	cmp	r6, #0
 800091a:	d069      	beq.n	80009f0 <__udivmoddi4+0x2c8>
 800091c:	ebb1 050a 	subs.w	r5, r1, sl
 8000920:	eb64 0403 	sbc.w	r4, r4, r3
 8000924:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000928:	40fd      	lsrs	r5, r7
 800092a:	40fc      	lsrs	r4, r7
 800092c:	ea4c 0505 	orr.w	r5, ip, r5
 8000930:	e9c6 5400 	strd	r5, r4, [r6]
 8000934:	2700      	movs	r7, #0
 8000936:	e747      	b.n	80007c8 <__udivmoddi4+0xa0>
 8000938:	f1c2 0320 	rsb	r3, r2, #32
 800093c:	fa20 f703 	lsr.w	r7, r0, r3
 8000940:	4095      	lsls	r5, r2
 8000942:	fa01 f002 	lsl.w	r0, r1, r2
 8000946:	fa21 f303 	lsr.w	r3, r1, r3
 800094a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800094e:	4338      	orrs	r0, r7
 8000950:	0c01      	lsrs	r1, r0, #16
 8000952:	fbb3 f7fe 	udiv	r7, r3, lr
 8000956:	fa1f f885 	uxth.w	r8, r5
 800095a:	fb0e 3317 	mls	r3, lr, r7, r3
 800095e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000962:	fb07 f308 	mul.w	r3, r7, r8
 8000966:	428b      	cmp	r3, r1
 8000968:	fa04 f402 	lsl.w	r4, r4, r2
 800096c:	d907      	bls.n	800097e <__udivmoddi4+0x256>
 800096e:	1869      	adds	r1, r5, r1
 8000970:	f107 3cff 	add.w	ip, r7, #4294967295
 8000974:	d22f      	bcs.n	80009d6 <__udivmoddi4+0x2ae>
 8000976:	428b      	cmp	r3, r1
 8000978:	d92d      	bls.n	80009d6 <__udivmoddi4+0x2ae>
 800097a:	3f02      	subs	r7, #2
 800097c:	4429      	add	r1, r5
 800097e:	1acb      	subs	r3, r1, r3
 8000980:	b281      	uxth	r1, r0
 8000982:	fbb3 f0fe 	udiv	r0, r3, lr
 8000986:	fb0e 3310 	mls	r3, lr, r0, r3
 800098a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800098e:	fb00 f308 	mul.w	r3, r0, r8
 8000992:	428b      	cmp	r3, r1
 8000994:	d907      	bls.n	80009a6 <__udivmoddi4+0x27e>
 8000996:	1869      	adds	r1, r5, r1
 8000998:	f100 3cff 	add.w	ip, r0, #4294967295
 800099c:	d217      	bcs.n	80009ce <__udivmoddi4+0x2a6>
 800099e:	428b      	cmp	r3, r1
 80009a0:	d915      	bls.n	80009ce <__udivmoddi4+0x2a6>
 80009a2:	3802      	subs	r0, #2
 80009a4:	4429      	add	r1, r5
 80009a6:	1ac9      	subs	r1, r1, r3
 80009a8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80009ac:	e73b      	b.n	8000826 <__udivmoddi4+0xfe>
 80009ae:	4637      	mov	r7, r6
 80009b0:	4630      	mov	r0, r6
 80009b2:	e709      	b.n	80007c8 <__udivmoddi4+0xa0>
 80009b4:	4607      	mov	r7, r0
 80009b6:	e6e7      	b.n	8000788 <__udivmoddi4+0x60>
 80009b8:	4618      	mov	r0, r3
 80009ba:	e6fb      	b.n	80007b4 <__udivmoddi4+0x8c>
 80009bc:	4541      	cmp	r1, r8
 80009be:	d2ab      	bcs.n	8000918 <__udivmoddi4+0x1f0>
 80009c0:	ebb8 0a02 	subs.w	sl, r8, r2
 80009c4:	eb69 020e 	sbc.w	r2, r9, lr
 80009c8:	3801      	subs	r0, #1
 80009ca:	4613      	mov	r3, r2
 80009cc:	e7a4      	b.n	8000918 <__udivmoddi4+0x1f0>
 80009ce:	4660      	mov	r0, ip
 80009d0:	e7e9      	b.n	80009a6 <__udivmoddi4+0x27e>
 80009d2:	4618      	mov	r0, r3
 80009d4:	e795      	b.n	8000902 <__udivmoddi4+0x1da>
 80009d6:	4667      	mov	r7, ip
 80009d8:	e7d1      	b.n	800097e <__udivmoddi4+0x256>
 80009da:	4681      	mov	r9, r0
 80009dc:	e77c      	b.n	80008d8 <__udivmoddi4+0x1b0>
 80009de:	3802      	subs	r0, #2
 80009e0:	442c      	add	r4, r5
 80009e2:	e747      	b.n	8000874 <__udivmoddi4+0x14c>
 80009e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80009e8:	442b      	add	r3, r5
 80009ea:	e72f      	b.n	800084c <__udivmoddi4+0x124>
 80009ec:	4638      	mov	r0, r7
 80009ee:	e708      	b.n	8000802 <__udivmoddi4+0xda>
 80009f0:	4637      	mov	r7, r6
 80009f2:	e6e9      	b.n	80007c8 <__udivmoddi4+0xa0>

080009f4 <__aeabi_idiv0>:
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	; 0x28
 80009fc:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
 8000a18:	615a      	str	r2, [r3, #20]
 8000a1a:	619a      	str	r2, [r3, #24]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000a1c:	4b2e      	ldr	r3, [pc, #184]	; (8000ad8 <MX_ADC1_Init+0xe0>)
 8000a1e:	4a2f      	ldr	r2, [pc, #188]	; (8000adc <MX_ADC1_Init+0xe4>)
 8000a20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a22:	4b2d      	ldr	r3, [pc, #180]	; (8000ad8 <MX_ADC1_Init+0xe0>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a28:	4b2b      	ldr	r3, [pc, #172]	; (8000ad8 <MX_ADC1_Init+0xe0>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a2e:	4b2a      	ldr	r3, [pc, #168]	; (8000ad8 <MX_ADC1_Init+0xe0>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a34:	4b28      	ldr	r3, [pc, #160]	; (8000ad8 <MX_ADC1_Init+0xe0>)
 8000a36:	2204      	movs	r2, #4
 8000a38:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a3a:	4b27      	ldr	r3, [pc, #156]	; (8000ad8 <MX_ADC1_Init+0xe0>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a40:	4b25      	ldr	r3, [pc, #148]	; (8000ad8 <MX_ADC1_Init+0xe0>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000a46:	4b24      	ldr	r3, [pc, #144]	; (8000ad8 <MX_ADC1_Init+0xe0>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a4c:	4b22      	ldr	r3, [pc, #136]	; (8000ad8 <MX_ADC1_Init+0xe0>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a52:	4b21      	ldr	r3, [pc, #132]	; (8000ad8 <MX_ADC1_Init+0xe0>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a58:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <MX_ADC1_Init+0xe0>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <MX_ADC1_Init+0xe0>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a64:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <MX_ADC1_Init+0xe0>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <MX_ADC1_Init+0xe0>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a70:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <MX_ADC1_Init+0xe0>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a78:	4817      	ldr	r0, [pc, #92]	; (8000ad8 <MX_ADC1_Init+0xe0>)
 8000a7a:	f001 ff13 	bl	80028a4 <HAL_ADC_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a84:	f000 fc84 	bl	8001390 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4619      	mov	r1, r3
 8000a92:	4811      	ldr	r0, [pc, #68]	; (8000ad8 <MX_ADC1_Init+0xe0>)
 8000a94:	f002 fcd8 	bl	8003448 <HAL_ADCEx_MultiModeConfigChannel>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000a9e:	f000 fc77 	bl	8001390 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000aa2:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <MX_ADC1_Init+0xe8>)
 8000aa4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aa6:	2306      	movs	r3, #6
 8000aa8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000aae:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000ab2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ab4:	2304      	movs	r3, #4
 8000ab6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000abc:	463b      	mov	r3, r7
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <MX_ADC1_Init+0xe0>)
 8000ac2:	f002 f88f 	bl	8002be4 <HAL_ADC_ConfigChannel>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000acc:	f000 fc60 	bl	8001390 <Error_Handler>
  }

}
 8000ad0:	bf00      	nop
 8000ad2:	3728      	adds	r7, #40	; 0x28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	24000324 	.word	0x24000324
 8000adc:	40022000 	.word	0x40022000
 8000ae0:	10c00010 	.word	0x10c00010

08000ae4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
 8000af8:	615a      	str	r2, [r3, #20]
 8000afa:	619a      	str	r2, [r3, #24]

  /** Common config 
  */
  hadc2.Instance = ADC2;
 8000afc:	4b28      	ldr	r3, [pc, #160]	; (8000ba0 <MX_ADC2_Init+0xbc>)
 8000afe:	4a29      	ldr	r2, [pc, #164]	; (8000ba4 <MX_ADC2_Init+0xc0>)
 8000b00:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b02:	4b27      	ldr	r3, [pc, #156]	; (8000ba0 <MX_ADC2_Init+0xbc>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000b08:	4b25      	ldr	r3, [pc, #148]	; (8000ba0 <MX_ADC2_Init+0xbc>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b0e:	4b24      	ldr	r3, [pc, #144]	; (8000ba0 <MX_ADC2_Init+0xbc>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b14:	4b22      	ldr	r3, [pc, #136]	; (8000ba0 <MX_ADC2_Init+0xbc>)
 8000b16:	2204      	movs	r2, #4
 8000b18:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b1a:	4b21      	ldr	r3, [pc, #132]	; (8000ba0 <MX_ADC2_Init+0xbc>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b20:	4b1f      	ldr	r3, [pc, #124]	; (8000ba0 <MX_ADC2_Init+0xbc>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000b26:	4b1e      	ldr	r3, [pc, #120]	; (8000ba0 <MX_ADC2_Init+0xbc>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <MX_ADC2_Init+0xbc>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b32:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <MX_ADC2_Init+0xbc>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b38:	4b19      	ldr	r3, [pc, #100]	; (8000ba0 <MX_ADC2_Init+0xbc>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b3e:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <MX_ADC2_Init+0xbc>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b44:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <MX_ADC2_Init+0xbc>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b4a:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <MX_ADC2_Init+0xbc>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000b50:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <MX_ADC2_Init+0xbc>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b58:	4811      	ldr	r0, [pc, #68]	; (8000ba0 <MX_ADC2_Init+0xbc>)
 8000b5a:	f001 fea3 	bl	80028a4 <HAL_ADC_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000b64:	f000 fc14 	bl	8001390 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <MX_ADC2_Init+0xc4>)
 8000b6a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b6c:	2306      	movs	r3, #6
 8000b6e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b74:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b78:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b7a:	2304      	movs	r3, #4
 8000b7c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	4619      	mov	r1, r3
 8000b86:	4806      	ldr	r0, [pc, #24]	; (8000ba0 <MX_ADC2_Init+0xbc>)
 8000b88:	f002 f82c 	bl	8002be4 <HAL_ADC_ConfigChannel>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000b92:	f000 fbfd 	bl	8001390 <Error_Handler>
  }

}
 8000b96:	bf00      	nop
 8000b98:	3720      	adds	r7, #32
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	240002c0 	.word	0x240002c0
 8000ba4:	40022100 	.word	0x40022100
 8000ba8:	25b00200 	.word	0x25b00200

08000bac <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b088      	sub	sp, #32
 8000bb0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
 8000bc0:	615a      	str	r2, [r3, #20]
 8000bc2:	619a      	str	r2, [r3, #24]

  /** Common config 
  */
  hadc3.Instance = ADC3;
 8000bc4:	4b28      	ldr	r3, [pc, #160]	; (8000c68 <MX_ADC3_Init+0xbc>)
 8000bc6:	4a29      	ldr	r2, [pc, #164]	; (8000c6c <MX_ADC3_Init+0xc0>)
 8000bc8:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bca:	4b27      	ldr	r3, [pc, #156]	; (8000c68 <MX_ADC3_Init+0xbc>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000bd0:	4b25      	ldr	r3, [pc, #148]	; (8000c68 <MX_ADC3_Init+0xbc>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bd6:	4b24      	ldr	r3, [pc, #144]	; (8000c68 <MX_ADC3_Init+0xbc>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bdc:	4b22      	ldr	r3, [pc, #136]	; (8000c68 <MX_ADC3_Init+0xbc>)
 8000bde:	2204      	movs	r2, #4
 8000be0:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000be2:	4b21      	ldr	r3, [pc, #132]	; (8000c68 <MX_ADC3_Init+0xbc>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000be8:	4b1f      	ldr	r3, [pc, #124]	; (8000c68 <MX_ADC3_Init+0xbc>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000bee:	4b1e      	ldr	r3, [pc, #120]	; (8000c68 <MX_ADC3_Init+0xbc>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000bf4:	4b1c      	ldr	r3, [pc, #112]	; (8000c68 <MX_ADC3_Init+0xbc>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bfa:	4b1b      	ldr	r3, [pc, #108]	; (8000c68 <MX_ADC3_Init+0xbc>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c00:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <MX_ADC3_Init+0xbc>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c06:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <MX_ADC3_Init+0xbc>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c0c:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <MX_ADC3_Init+0xbc>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <MX_ADC3_Init+0xbc>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000c18:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <MX_ADC3_Init+0xbc>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c20:	4811      	ldr	r0, [pc, #68]	; (8000c68 <MX_ADC3_Init+0xbc>)
 8000c22:	f001 fe3f 	bl	80028a4 <HAL_ADC_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8000c2c:	f000 fbb0 	bl	8001390 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c30:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <MX_ADC3_Init+0xc4>)
 8000c32:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c34:	2306      	movs	r3, #6
 8000c36:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c3c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c40:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c42:	2304      	movs	r3, #4
 8000c44:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4806      	ldr	r0, [pc, #24]	; (8000c68 <MX_ADC3_Init+0xbc>)
 8000c50:	f001 ffc8 	bl	8002be4 <HAL_ADC_ConfigChannel>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8000c5a:	f000 fb99 	bl	8001390 <Error_Handler>
  }

}
 8000c5e:	bf00      	nop
 8000c60:	3720      	adds	r7, #32
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	24000388 	.word	0x24000388
 8000c6c:	58026000 	.word	0x58026000
 8000c70:	04300002 	.word	0x04300002

08000c74 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b090      	sub	sp, #64	; 0x40
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a69      	ldr	r2, [pc, #420]	; (8000e38 <HAL_ADC_MspInit+0x1c4>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d14e      	bne.n	8000d34 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000c96:	4b69      	ldr	r3, [pc, #420]	; (8000e3c <HAL_ADC_MspInit+0x1c8>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	4a67      	ldr	r2, [pc, #412]	; (8000e3c <HAL_ADC_MspInit+0x1c8>)
 8000c9e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ca0:	4b66      	ldr	r3, [pc, #408]	; (8000e3c <HAL_ADC_MspInit+0x1c8>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d10e      	bne.n	8000cc6 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ca8:	4b65      	ldr	r3, [pc, #404]	; (8000e40 <HAL_ADC_MspInit+0x1cc>)
 8000caa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cae:	4a64      	ldr	r2, [pc, #400]	; (8000e40 <HAL_ADC_MspInit+0x1cc>)
 8000cb0:	f043 0320 	orr.w	r3, r3, #32
 8000cb4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cb8:	4b61      	ldr	r3, [pc, #388]	; (8000e40 <HAL_ADC_MspInit+0x1cc>)
 8000cba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cbe:	f003 0320 	and.w	r3, r3, #32
 8000cc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc6:	4b5e      	ldr	r3, [pc, #376]	; (8000e40 <HAL_ADC_MspInit+0x1cc>)
 8000cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ccc:	4a5c      	ldr	r2, [pc, #368]	; (8000e40 <HAL_ADC_MspInit+0x1cc>)
 8000cce:	f043 0301 	orr.w	r3, r3, #1
 8000cd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd6:	4b5a      	ldr	r3, [pc, #360]	; (8000e40 <HAL_ADC_MspInit+0x1cc>)
 8000cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce4:	4b56      	ldr	r3, [pc, #344]	; (8000e40 <HAL_ADC_MspInit+0x1cc>)
 8000ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cea:	4a55      	ldr	r2, [pc, #340]	; (8000e40 <HAL_ADC_MspInit+0x1cc>)
 8000cec:	f043 0304 	orr.w	r3, r3, #4
 8000cf0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cf4:	4b52      	ldr	r3, [pc, #328]	; (8000e40 <HAL_ADC_MspInit+0x1cc>)
 8000cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cfa:	f003 0304 	and.w	r3, r3, #4
 8000cfe:	623b      	str	r3, [r7, #32]
 8000d00:	6a3b      	ldr	r3, [r7, #32]
    PA0     ------> ADC1_INP16
    PA1     ------> ADC1_INP17
    PA4     ------> ADC1_INP18
    PC4     ------> ADC1_INP4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8000d02:	2313      	movs	r3, #19
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d06:	2303      	movs	r3, #3
 8000d08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d12:	4619      	mov	r1, r3
 8000d14:	484b      	ldr	r0, [pc, #300]	; (8000e44 <HAL_ADC_MspInit+0x1d0>)
 8000d16:	f004 fa0d 	bl	8005134 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d1a:	2310      	movs	r3, #16
 8000d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4846      	ldr	r0, [pc, #280]	; (8000e48 <HAL_ADC_MspInit+0x1d4>)
 8000d2e:	f004 fa01 	bl	8005134 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000d32:	e07c      	b.n	8000e2e <HAL_ADC_MspInit+0x1ba>
  else if(adcHandle->Instance==ADC2)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a44      	ldr	r2, [pc, #272]	; (8000e4c <HAL_ADC_MspInit+0x1d8>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d14e      	bne.n	8000ddc <HAL_ADC_MspInit+0x168>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000d3e:	4b3f      	ldr	r3, [pc, #252]	; (8000e3c <HAL_ADC_MspInit+0x1c8>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	3301      	adds	r3, #1
 8000d44:	4a3d      	ldr	r2, [pc, #244]	; (8000e3c <HAL_ADC_MspInit+0x1c8>)
 8000d46:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000d48:	4b3c      	ldr	r3, [pc, #240]	; (8000e3c <HAL_ADC_MspInit+0x1c8>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d10e      	bne.n	8000d6e <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000d50:	4b3b      	ldr	r3, [pc, #236]	; (8000e40 <HAL_ADC_MspInit+0x1cc>)
 8000d52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d56:	4a3a      	ldr	r2, [pc, #232]	; (8000e40 <HAL_ADC_MspInit+0x1cc>)
 8000d58:	f043 0320 	orr.w	r3, r3, #32
 8000d5c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d60:	4b37      	ldr	r3, [pc, #220]	; (8000e40 <HAL_ADC_MspInit+0x1cc>)
 8000d62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d66:	f003 0320 	and.w	r3, r3, #32
 8000d6a:	61fb      	str	r3, [r7, #28]
 8000d6c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6e:	4b34      	ldr	r3, [pc, #208]	; (8000e40 <HAL_ADC_MspInit+0x1cc>)
 8000d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d74:	4a32      	ldr	r2, [pc, #200]	; (8000e40 <HAL_ADC_MspInit+0x1cc>)
 8000d76:	f043 0301 	orr.w	r3, r3, #1
 8000d7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d7e:	4b30      	ldr	r3, [pc, #192]	; (8000e40 <HAL_ADC_MspInit+0x1cc>)
 8000d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	61bb      	str	r3, [r7, #24]
 8000d8a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8c:	4b2c      	ldr	r3, [pc, #176]	; (8000e40 <HAL_ADC_MspInit+0x1cc>)
 8000d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d92:	4a2b      	ldr	r2, [pc, #172]	; (8000e40 <HAL_ADC_MspInit+0x1cc>)
 8000d94:	f043 0302 	orr.w	r3, r3, #2
 8000d98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d9c:	4b28      	ldr	r3, [pc, #160]	; (8000e40 <HAL_ADC_MspInit+0x1cc>)
 8000d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000daa:	231c      	movs	r3, #28
 8000dac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dae:	2303      	movs	r3, #3
 8000db0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4821      	ldr	r0, [pc, #132]	; (8000e44 <HAL_ADC_MspInit+0x1d0>)
 8000dbe:	f004 f9b9 	bl	8005134 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	481e      	ldr	r0, [pc, #120]	; (8000e50 <HAL_ADC_MspInit+0x1dc>)
 8000dd6:	f004 f9ad 	bl	8005134 <HAL_GPIO_Init>
}
 8000dda:	e028      	b.n	8000e2e <HAL_ADC_MspInit+0x1ba>
  else if(adcHandle->Instance==ADC3)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a1c      	ldr	r2, [pc, #112]	; (8000e54 <HAL_ADC_MspInit+0x1e0>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d123      	bne.n	8000e2e <HAL_ADC_MspInit+0x1ba>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000de6:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <HAL_ADC_MspInit+0x1cc>)
 8000de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dec:	4a14      	ldr	r2, [pc, #80]	; (8000e40 <HAL_ADC_MspInit+0x1cc>)
 8000dee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000df2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000df6:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <HAL_ADC_MspInit+0x1cc>)
 8000df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e04:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <HAL_ADC_MspInit+0x1cc>)
 8000e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0a:	4a0d      	ldr	r2, [pc, #52]	; (8000e40 <HAL_ADC_MspInit+0x1cc>)
 8000e0c:	f043 0304 	orr.w	r3, r3, #4
 8000e10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e14:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <HAL_ADC_MspInit+0x1cc>)
 8000e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1a:	f003 0304 	and.w	r3, r3, #4
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000e22:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000e26:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000e2a:	f001 fba5 	bl	8002578 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8000e2e:	bf00      	nop
 8000e30:	3740      	adds	r7, #64	; 0x40
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40022000 	.word	0x40022000
 8000e3c:	24000204 	.word	0x24000204
 8000e40:	58024400 	.word	0x58024400
 8000e44:	58020000 	.word	0x58020000
 8000e48:	58020800 	.word	0x58020800
 8000e4c:	40022100 	.word	0x40022100
 8000e50:	58020400 	.word	0x58020400
 8000e54:	58026000 	.word	0x58026000

08000e58 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e5e:	4b0d      	ldr	r3, [pc, #52]	; (8000e94 <MX_DMA_Init+0x3c>)
 8000e60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e64:	4a0b      	ldr	r2, [pc, #44]	; (8000e94 <MX_DMA_Init+0x3c>)
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <MX_DMA_Init+0x3c>)
 8000e70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2100      	movs	r1, #0
 8000e80:	200b      	movs	r0, #11
 8000e82:	f002 fc96 	bl	80037b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e86:	200b      	movs	r0, #11
 8000e88:	f002 fcad 	bl	80037e6 <HAL_NVIC_EnableIRQ>

}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	58024400 	.word	0x58024400

08000e98 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08c      	sub	sp, #48	; 0x30
 8000e9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
 8000eac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eae:	4b6f      	ldr	r3, [pc, #444]	; (800106c <MX_GPIO_Init+0x1d4>)
 8000eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb4:	4a6d      	ldr	r2, [pc, #436]	; (800106c <MX_GPIO_Init+0x1d4>)
 8000eb6:	f043 0310 	orr.w	r3, r3, #16
 8000eba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ebe:	4b6b      	ldr	r3, [pc, #428]	; (800106c <MX_GPIO_Init+0x1d4>)
 8000ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec4:	f003 0310 	and.w	r3, r3, #16
 8000ec8:	61bb      	str	r3, [r7, #24]
 8000eca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ecc:	4b67      	ldr	r3, [pc, #412]	; (800106c <MX_GPIO_Init+0x1d4>)
 8000ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed2:	4a66      	ldr	r2, [pc, #408]	; (800106c <MX_GPIO_Init+0x1d4>)
 8000ed4:	f043 0304 	orr.w	r3, r3, #4
 8000ed8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000edc:	4b63      	ldr	r3, [pc, #396]	; (800106c <MX_GPIO_Init+0x1d4>)
 8000ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee2:	f003 0304 	and.w	r3, r3, #4
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eea:	4b60      	ldr	r3, [pc, #384]	; (800106c <MX_GPIO_Init+0x1d4>)
 8000eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef0:	4a5e      	ldr	r2, [pc, #376]	; (800106c <MX_GPIO_Init+0x1d4>)
 8000ef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ef6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000efa:	4b5c      	ldr	r3, [pc, #368]	; (800106c <MX_GPIO_Init+0x1d4>)
 8000efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f08:	4b58      	ldr	r3, [pc, #352]	; (800106c <MX_GPIO_Init+0x1d4>)
 8000f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0e:	4a57      	ldr	r2, [pc, #348]	; (800106c <MX_GPIO_Init+0x1d4>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f18:	4b54      	ldr	r3, [pc, #336]	; (800106c <MX_GPIO_Init+0x1d4>)
 8000f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f26:	4b51      	ldr	r3, [pc, #324]	; (800106c <MX_GPIO_Init+0x1d4>)
 8000f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2c:	4a4f      	ldr	r2, [pc, #316]	; (800106c <MX_GPIO_Init+0x1d4>)
 8000f2e:	f043 0302 	orr.w	r3, r3, #2
 8000f32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f36:	4b4d      	ldr	r3, [pc, #308]	; (800106c <MX_GPIO_Init+0x1d4>)
 8000f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3c:	f003 0302 	and.w	r3, r3, #2
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f44:	4b49      	ldr	r3, [pc, #292]	; (800106c <MX_GPIO_Init+0x1d4>)
 8000f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4a:	4a48      	ldr	r2, [pc, #288]	; (800106c <MX_GPIO_Init+0x1d4>)
 8000f4c:	f043 0308 	orr.w	r3, r3, #8
 8000f50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f54:	4b45      	ldr	r3, [pc, #276]	; (800106c <MX_GPIO_Init+0x1d4>)
 8000f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f5a:	f003 0308 	and.w	r3, r3, #8
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8000f62:	2200      	movs	r2, #0
 8000f64:	f640 7107 	movw	r1, #3847	; 0xf07
 8000f68:	4841      	ldr	r0, [pc, #260]	; (8001070 <MX_GPIO_Init+0x1d8>)
 8000f6a:	f004 fa93 	bl	8005494 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2120      	movs	r1, #32
 8000f72:	4840      	ldr	r0, [pc, #256]	; (8001074 <MX_GPIO_Init+0x1dc>)
 8000f74:	f004 fa8e 	bl	8005494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f7e:	483e      	ldr	r0, [pc, #248]	; (8001078 <MX_GPIO_Init+0x1e0>)
 8000f80:	f004 fa88 	bl	8005494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 8000f84:	2200      	movs	r2, #0
 8000f86:	f64f 4107 	movw	r1, #64519	; 0xfc07
 8000f8a:	483c      	ldr	r0, [pc, #240]	; (800107c <MX_GPIO_Init+0x1e4>)
 8000f8c:	f004 fa82 	bl	8005494 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1 
                          |GPIO_PIN_2, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f96:	483a      	ldr	r0, [pc, #232]	; (8001080 <MX_GPIO_Init+0x1e8>)
 8000f98:	f004 fa7c 	bl	8005494 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE8 PE9 PE10 
                           PE11 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8000f9c:	f640 7307 	movw	r3, #3847	; 0xf07
 8000fa0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fae:	f107 031c 	add.w	r3, r7, #28
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	482e      	ldr	r0, [pc, #184]	; (8001070 <MX_GPIO_Init+0x1d8>)
 8000fb6:	f004 f8bd 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fba:	2320      	movs	r3, #32
 8000fbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fca:	f107 031c 	add.w	r3, r7, #28
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4828      	ldr	r0, [pc, #160]	; (8001074 <MX_GPIO_Init+0x1dc>)
 8000fd2:	f004 f8af 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000fd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fe4:	f107 031c 	add.w	r3, r7, #28
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4821      	ldr	r0, [pc, #132]	; (8001070 <MX_GPIO_Init+0x1d8>)
 8000fec:	f004 f8a2 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14;
 8000ff0:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8000ff4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	4619      	mov	r1, r3
 8001004:	481c      	ldr	r0, [pc, #112]	; (8001078 <MX_GPIO_Init+0x1e0>)
 8001006:	f004 f895 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800100a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800100e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001010:	2301      	movs	r3, #1
 8001012:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	2300      	movs	r3, #0
 800101a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	4619      	mov	r1, r3
 8001022:	4815      	ldr	r0, [pc, #84]	; (8001078 <MX_GPIO_Init+0x1e0>)
 8001024:	f004 f886 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13 
                           PD14 PD15 PD0 PD1 
                           PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 8001028:	f64f 4307 	movw	r3, #64519	; 0xfc07
 800102c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1 
                          |GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102e:	2301      	movs	r3, #1
 8001030:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800103a:	f107 031c 	add.w	r3, r7, #28
 800103e:	4619      	mov	r1, r3
 8001040:	480e      	ldr	r0, [pc, #56]	; (800107c <MX_GPIO_Init+0x1e4>)
 8001042:	f004 f877 	bl	8005134 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800104a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104c:	2301      	movs	r3, #1
 800104e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001058:	f107 031c 	add.w	r3, r7, #28
 800105c:	4619      	mov	r1, r3
 800105e:	4808      	ldr	r0, [pc, #32]	; (8001080 <MX_GPIO_Init+0x1e8>)
 8001060:	f004 f868 	bl	8005134 <HAL_GPIO_Init>

}
 8001064:	bf00      	nop
 8001066:	3730      	adds	r7, #48	; 0x30
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	58024400 	.word	0x58024400
 8001070:	58021000 	.word	0x58021000
 8001074:	58020800 	.word	0x58020800
 8001078:	58020400 	.word	0x58020400
 800107c:	58020c00 	.word	0x58020c00
 8001080:	58020000 	.word	0x58020000

08001084 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001088:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <MX_I2C1_Init+0x74>)
 800108a:	4a1c      	ldr	r2, [pc, #112]	; (80010fc <MX_I2C1_Init+0x78>)
 800108c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 800108e:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <MX_I2C1_Init+0x74>)
 8001090:	4a1b      	ldr	r2, [pc, #108]	; (8001100 <MX_I2C1_Init+0x7c>)
 8001092:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001094:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <MX_I2C1_Init+0x74>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800109a:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <MX_I2C1_Init+0x74>)
 800109c:	2201      	movs	r2, #1
 800109e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010a0:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <MX_I2C1_Init+0x74>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010a6:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <MX_I2C1_Init+0x74>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <MX_I2C1_Init+0x74>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010b2:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <MX_I2C1_Init+0x74>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010b8:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <MX_I2C1_Init+0x74>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010be:	480e      	ldr	r0, [pc, #56]	; (80010f8 <MX_I2C1_Init+0x74>)
 80010c0:	f004 fa1c 	bl	80054fc <HAL_I2C_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010ca:	f000 f961 	bl	8001390 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010ce:	2100      	movs	r1, #0
 80010d0:	4809      	ldr	r0, [pc, #36]	; (80010f8 <MX_I2C1_Init+0x74>)
 80010d2:	f004 faa3 	bl	800561c <HAL_I2CEx_ConfigAnalogFilter>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010dc:	f000 f958 	bl	8001390 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010e0:	2100      	movs	r1, #0
 80010e2:	4805      	ldr	r0, [pc, #20]	; (80010f8 <MX_I2C1_Init+0x74>)
 80010e4:	f004 fae5 	bl	80056b2 <HAL_I2CEx_ConfigDigitalFilter>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010ee:	f000 f94f 	bl	8001390 <Error_Handler>
  }

}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	240003ec 	.word	0x240003ec
 80010fc:	40005400 	.word	0x40005400
 8001100:	307075b1 	.word	0x307075b1

08001104 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	; 0x28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a1a      	ldr	r2, [pc, #104]	; (800118c <HAL_I2C_MspInit+0x88>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d12d      	bne.n	8001182 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001126:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <HAL_I2C_MspInit+0x8c>)
 8001128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800112c:	4a18      	ldr	r2, [pc, #96]	; (8001190 <HAL_I2C_MspInit+0x8c>)
 800112e:	f043 0302 	orr.w	r3, r3, #2
 8001132:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001136:	4b16      	ldr	r3, [pc, #88]	; (8001190 <HAL_I2C_MspInit+0x8c>)
 8001138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800113c:	f003 0302 	and.w	r3, r3, #2
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001144:	23c0      	movs	r3, #192	; 0xc0
 8001146:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001148:	2312      	movs	r3, #18
 800114a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001154:	2304      	movs	r3, #4
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	4619      	mov	r1, r3
 800115e:	480d      	ldr	r0, [pc, #52]	; (8001194 <HAL_I2C_MspInit+0x90>)
 8001160:	f003 ffe8 	bl	8005134 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001164:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <HAL_I2C_MspInit+0x8c>)
 8001166:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800116a:	4a09      	ldr	r2, [pc, #36]	; (8001190 <HAL_I2C_MspInit+0x8c>)
 800116c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001170:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_I2C_MspInit+0x8c>)
 8001176:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800117a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001182:	bf00      	nop
 8001184:	3728      	adds	r7, #40	; 0x28
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40005400 	.word	0x40005400
 8001190:	58024400 	.word	0x58024400
 8001194:	58020400 	.word	0x58020400

08001198 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800119c:	b0cc      	sub	sp, #304	; 0x130
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119e:	224c      	movs	r2, #76	; 0x4c
 80011a0:	2100      	movs	r1, #0
 80011a2:	a80a      	add	r0, sp, #40	; 0x28
 80011a4:	f010 f93b 	bl	801141e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a8:	2220      	movs	r2, #32
 80011aa:	2100      	movs	r1, #0
 80011ac:	a802      	add	r0, sp, #8
 80011ae:	f010 f936 	bl	801141e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011b2:	22bc      	movs	r2, #188	; 0xbc
 80011b4:	2100      	movs	r1, #0
 80011b6:	a81d      	add	r0, sp, #116	; 0x74
 80011b8:	f010 f931 	bl	801141e <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80011bc:	2002      	movs	r0, #2
 80011be:	f005 fcaf 	bl	8006b20 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80011c2:	2300      	movs	r3, #0
 80011c4:	9301      	str	r3, [sp, #4]
 80011c6:	4b39      	ldr	r3, [pc, #228]	; (80012ac <_Z18SystemClock_Configv+0x114>)
 80011c8:	699a      	ldr	r2, [r3, #24]
 80011ca:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80011ce:	619a      	str	r2, [r3, #24]
 80011d0:	699a      	ldr	r2, [r3, #24]
 80011d2:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80011d6:	9201      	str	r2, [sp, #4]
 80011d8:	4a35      	ldr	r2, [pc, #212]	; (80012b0 <_Z18SystemClock_Configv+0x118>)
 80011da:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80011dc:	f041 0101 	orr.w	r1, r1, #1
 80011e0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80011e2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80011e4:	f002 0201 	and.w	r2, r2, #1
 80011e8:	9201      	str	r2, [sp, #4]
 80011ea:	9a01      	ldr	r2, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011ec:	699a      	ldr	r2, [r3, #24]
 80011ee:	0491      	lsls	r1, r2, #18
 80011f0:	d5fc      	bpl.n	80011ec <_Z18SystemClock_Configv+0x54>
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80011f2:	f005 fc85 	bl	8006b00 <HAL_PWR_EnableBkUpAccess>
  RCC_OscInitStruct.PLL.PLLN = 192;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 20;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011f6:	2400      	movs	r4, #0
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80011f8:	f001 f9b2 	bl	8002560 <HAL_GetREVID>
 80011fc:	4a2d      	ldr	r2, [pc, #180]	; (80012b4 <_Z18SystemClock_Configv+0x11c>)
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011fe:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001200:	f04f 0808 	mov.w	r8, #8
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001204:	6f13      	ldr	r3, [r2, #112]	; 0x70
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001206:	2701      	movs	r7, #1
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001208:	26c0      	movs	r6, #192	; 0xc0
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800120a:	a80a      	add	r0, sp, #40	; 0x28
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800120c:	f023 0318 	bic.w	r3, r3, #24
 8001210:	6713      	str	r3, [r2, #112]	; 0x70
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001212:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001214:	f023 0303 	bic.w	r3, r3, #3
 8001218:	f043 0302 	orr.w	r3, r3, #2
 800121c:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800121e:	2305      	movs	r3, #5
 8001220:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001224:	970c      	str	r7, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001226:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001228:	941c      	str	r4, [sp, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800122a:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 20;
 800122e:	2314      	movs	r3, #20
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001230:	e9cd 5513 	strd	r5, r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001234:	e9cd 3518 	strd	r3, r5, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001238:	e9cd 6516 	strd	r6, r5, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800123c:	e9cd 841a 	strd	r8, r4, [sp, #104]	; 0x68
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001240:	f005 fcb8 	bl	8006bb4 <HAL_RCC_OscConfig>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001244:	223f      	movs	r2, #63	; 0x3f
 8001246:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001248:	2104      	movs	r1, #4
 800124a:	eb0d 0008 	add.w	r0, sp, r8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800124e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001252:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001256:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001258:	e9cd 4804 	strd	r4, r8, [sp, #16]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800125c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001260:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001264:	f006 f87e 	bl	8007364 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_UART5
 8001268:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <_Z18SystemClock_Configv+0x120>)
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
  PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_D3PCLK1;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800126a:	a81d      	add	r0, sp, #116	; 0x74
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800126c:	9623      	str	r6, [sp, #140]	; 0x8c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800126e:	943a      	str	r4, [sp, #232]	; 0xe8
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001270:	943d      	str	r4, [sp, #244]	; 0xf4
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001272:	9445      	str	r4, [sp, #276]	; 0x114
  PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_D3PCLK1;
 8001274:	9448      	str	r4, [sp, #288]	; 0x120
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001276:	e9cd 351d 	strd	r3, r5, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 800127a:	230c      	movs	r3, #12
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 800127c:	e9cd 371f 	strd	r3, r7, [sp, #124]	; 0x7c
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001280:	2320      	movs	r3, #32
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001282:	e9cd 3424 	strd	r3, r4, [sp, #144]	; 0x90
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001286:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800128a:	933e      	str	r3, [sp, #248]	; 0xf8
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800128c:	f44f 7380 	mov.w	r3, #256	; 0x100
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001290:	e9cd 5521 	strd	r5, r5, [sp, #132]	; 0x84
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001294:	9349      	str	r3, [sp, #292]	; 0x124
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001296:	e9cd 4434 	strd	r4, r4, [sp, #208]	; 0xd0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800129a:	f006 fbed 	bl	8007a78 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 800129e:	f006 fa05 	bl	80076ac <HAL_RCC_EnableCSS>
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 80012a2:	f005 fc77 	bl	8006b94 <HAL_PWREx_EnableUSBVoltageDetector>
}
 80012a6:	b04c      	add	sp, #304	; 0x130
 80012a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012ac:	58024800 	.word	0x58024800
 80012b0:	58000400 	.word	0x58000400
 80012b4:	58024400 	.word	0x58024400
 80012b8:	004c700a 	.word	0x004c700a

080012bc <main>:
{
 80012bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   HAL_Init();
 80012be:	f001 f89f 	bl	8002400 <HAL_Init>
  txBuff[0] = (1<<7)|0x0f;
 80012c2:	258f      	movs	r5, #143	; 0x8f
  SystemClock_Config();
 80012c4:	f7ff ff68 	bl	8001198 <_Z18SystemClock_Configv>
  HAL_SPI_TransmitReceive(&hspi1, txBuff, rxBuff, 2, 100000);
 80012c8:	4c2d      	ldr	r4, [pc, #180]	; (8001380 <main+0xc4>)
  MX_GPIO_Init();
 80012ca:	f7ff fde5 	bl	8000e98 <MX_GPIO_Init>
  MX_DMA_Init();
 80012ce:	f7ff fdc3 	bl	8000e58 <MX_DMA_Init>
  MX_ADC1_Init();
 80012d2:	f7ff fb91 	bl	80009f8 <MX_ADC1_Init>
  MX_ADC2_Init();
 80012d6:	f7ff fc05 	bl	8000ae4 <MX_ADC2_Init>
  MX_ADC3_Init();
 80012da:	f7ff fc67 	bl	8000bac <MX_ADC3_Init>
  MX_I2C1_Init();
 80012de:	f7ff fed1 	bl	8001084 <MX_I2C1_Init>
  MX_RTC_Init();
 80012e2:	f000 f857 	bl	8001394 <MX_RTC_Init>
  MX_SPI1_Init();
 80012e6:	f000 f897 	bl	8001418 <MX_SPI1_Init>
  MX_SPI3_Init();
 80012ea:	f000 f8eb 	bl	80014c4 <MX_SPI3_Init>
  MX_SPI4_Init();
 80012ee:	f000 f93f 	bl	8001570 <MX_SPI4_Init>
  MX_SPI6_Init();
 80012f2:	f000 f993 	bl	800161c <MX_SPI6_Init>
  MX_TIM1_Init();
 80012f6:	f000 fbc5 	bl	8001a84 <MX_TIM1_Init>
  MX_TIM8_Init();
 80012fa:	f000 fc51 	bl	8001ba0 <MX_TIM8_Init>
  MX_UART5_Init();
 80012fe:	f000 fda1 	bl	8001e44 <MX_UART5_Init>
  MX_USB_DEVICE_Init();
 8001302:	f00f fb43 	bl	801098c <MX_USB_DEVICE_Init>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8001306:	2200      	movs	r2, #0
 8001308:	f44f 7180 	mov.w	r1, #256	; 0x100
 800130c:	481d      	ldr	r0, [pc, #116]	; (8001384 <main+0xc8>)
 800130e:	f004 f8c1 	bl	8005494 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_SET);
 8001312:	2201      	movs	r2, #1
 8001314:	2103      	movs	r1, #3
 8001316:	481c      	ldr	r0, [pc, #112]	; (8001388 <main+0xcc>)
 8001318:	f004 f8bc 	bl	8005494 <HAL_GPIO_WritePin>
  Scheduler scheduler = Scheduler();
 800131c:	a803      	add	r0, sp, #12
 800131e:	f00f faa2 	bl	8010866 <_ZN9SchedulerC1Ev>
  HAL_Delay(1000);
 8001322:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001326:	f001 f8f9 	bl	800251c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	2101      	movs	r1, #1
 800132e:	4816      	ldr	r0, [pc, #88]	; (8001388 <main+0xcc>)
  txBuff[0] = (1<<7)|0x0f;
 8001330:	f88d 5010 	strb.w	r5, [sp, #16]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8001334:	f004 f8ae 	bl	8005494 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, txBuff, rxBuff, 2, 100000);
 8001338:	2302      	movs	r3, #2
 800133a:	aa05      	add	r2, sp, #20
 800133c:	a904      	add	r1, sp, #16
 800133e:	9400      	str	r4, [sp, #0]
 8001340:	4812      	ldr	r0, [pc, #72]	; (800138c <main+0xd0>)
 8001342:	f008 fe3f 	bl	8009fc4 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8001346:	2201      	movs	r2, #1
 8001348:	480f      	ldr	r0, [pc, #60]	; (8001388 <main+0xcc>)
 800134a:	4611      	mov	r1, r2
 800134c:	f004 f8a2 	bl	8005494 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 8001350:	2200      	movs	r2, #0
 8001352:	2102      	movs	r1, #2
 8001354:	480c      	ldr	r0, [pc, #48]	; (8001388 <main+0xcc>)
  txBuff[0] = (1<<7)|0x0f;
 8001356:	f88d 5010 	strb.w	r5, [sp, #16]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 800135a:	f004 f89b 	bl	8005494 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, txBuff, rxBuff, 2, 100000);
 800135e:	2302      	movs	r3, #2
 8001360:	aa05      	add	r2, sp, #20
 8001362:	a904      	add	r1, sp, #16
 8001364:	9400      	str	r4, [sp, #0]
 8001366:	4809      	ldr	r0, [pc, #36]	; (800138c <main+0xd0>)
 8001368:	f008 fe2c 	bl	8009fc4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 800136c:	4806      	ldr	r0, [pc, #24]	; (8001388 <main+0xcc>)
 800136e:	2201      	movs	r2, #1
 8001370:	2102      	movs	r1, #2
 8001372:	f004 f88f 	bl	8005494 <HAL_GPIO_WritePin>
  scheduler.run();
 8001376:	a803      	add	r0, sp, #12
 8001378:	f00f fa80 	bl	801087c <_ZN9Scheduler3runEv>
 800137c:	e7fe      	b.n	800137c <main+0xc0>
 800137e:	bf00      	nop
 8001380:	000186a0 	.word	0x000186a0
 8001384:	58021000 	.word	0x58021000
 8001388:	58020c00 	.word	0x58020c00
 800138c:	240005f4 	.word	0x240005f4

08001390 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001390:	4770      	bx	lr
	...

08001394 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001398:	4b10      	ldr	r3, [pc, #64]	; (80013dc <MX_RTC_Init+0x48>)
 800139a:	4a11      	ldr	r2, [pc, #68]	; (80013e0 <MX_RTC_Init+0x4c>)
 800139c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800139e:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <MX_RTC_Init+0x48>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80013a4:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <MX_RTC_Init+0x48>)
 80013a6:	227f      	movs	r2, #127	; 0x7f
 80013a8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80013aa:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <MX_RTC_Init+0x48>)
 80013ac:	22ff      	movs	r2, #255	; 0xff
 80013ae:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80013b0:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <MX_RTC_Init+0x48>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <MX_RTC_Init+0x48>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80013bc:	4b07      	ldr	r3, [pc, #28]	; (80013dc <MX_RTC_Init+0x48>)
 80013be:	2200      	movs	r2, #0
 80013c0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <MX_RTC_Init+0x48>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80013c8:	4804      	ldr	r0, [pc, #16]	; (80013dc <MX_RTC_Init+0x48>)
 80013ca:	f008 fa25 	bl	8009818 <HAL_RTC_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80013d4:	f7ff ffdc 	bl	8001390 <Error_Handler>
  }

}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	24000438 	.word	0x24000438
 80013e0:	58004000 	.word	0x58004000

080013e4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a07      	ldr	r2, [pc, #28]	; (8001410 <HAL_RTC_MspInit+0x2c>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d105      	bne.n	8001402 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80013f6:	4b07      	ldr	r3, [pc, #28]	; (8001414 <HAL_RTC_MspInit+0x30>)
 80013f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013fa:	4a06      	ldr	r2, [pc, #24]	; (8001414 <HAL_RTC_MspInit+0x30>)
 80013fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001400:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	58004000 	.word	0x58004000
 8001414:	58024400 	.word	0x58024400

08001418 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi4;
SPI_HandleTypeDef hspi6;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* this is only temporarily AV 1's SPI bus on the final it will be the Flash's SPI bus */
  hspi1.Instance = SPI1;
 800141c:	4b27      	ldr	r3, [pc, #156]	; (80014bc <MX_SPI1_Init+0xa4>)
 800141e:	4a28      	ldr	r2, [pc, #160]	; (80014c0 <MX_SPI1_Init+0xa8>)
 8001420:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001422:	4b26      	ldr	r3, [pc, #152]	; (80014bc <MX_SPI1_Init+0xa4>)
 8001424:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001428:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800142a:	4b24      	ldr	r3, [pc, #144]	; (80014bc <MX_SPI1_Init+0xa4>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001430:	4b22      	ldr	r3, [pc, #136]	; (80014bc <MX_SPI1_Init+0xa4>)
 8001432:	2207      	movs	r2, #7
 8001434:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001436:	4b21      	ldr	r3, [pc, #132]	; (80014bc <MX_SPI1_Init+0xa4>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800143c:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <MX_SPI1_Init+0xa4>)
 800143e:	2200      	movs	r2, #0
 8001440:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001442:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <MX_SPI1_Init+0xa4>)
 8001444:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001448:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32; // 6/4 MHz clock
 800144a:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <MX_SPI1_Init+0xa4>)
 800144c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001450:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001452:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <MX_SPI1_Init+0xa4>)
 8001454:	2200      	movs	r2, #0
 8001456:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001458:	4b18      	ldr	r3, [pc, #96]	; (80014bc <MX_SPI1_Init+0xa4>)
 800145a:	2200      	movs	r2, #0
 800145c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800145e:	4b17      	ldr	r3, [pc, #92]	; (80014bc <MX_SPI1_Init+0xa4>)
 8001460:	2200      	movs	r2, #0
 8001462:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001464:	4b15      	ldr	r3, [pc, #84]	; (80014bc <MX_SPI1_Init+0xa4>)
 8001466:	2200      	movs	r2, #0
 8001468:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800146a:	4b14      	ldr	r3, [pc, #80]	; (80014bc <MX_SPI1_Init+0xa4>)
 800146c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001470:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001472:	4b12      	ldr	r3, [pc, #72]	; (80014bc <MX_SPI1_Init+0xa4>)
 8001474:	2200      	movs	r2, #0
 8001476:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001478:	4b10      	ldr	r3, [pc, #64]	; (80014bc <MX_SPI1_Init+0xa4>)
 800147a:	2200      	movs	r2, #0
 800147c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800147e:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <MX_SPI1_Init+0xa4>)
 8001480:	2200      	movs	r2, #0
 8001482:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001484:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <MX_SPI1_Init+0xa4>)
 8001486:	2200      	movs	r2, #0
 8001488:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <MX_SPI1_Init+0xa4>)
 800148c:	2200      	movs	r2, #0
 800148e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001490:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <MX_SPI1_Init+0xa4>)
 8001492:	2200      	movs	r2, #0
 8001494:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001496:	4b09      	ldr	r3, [pc, #36]	; (80014bc <MX_SPI1_Init+0xa4>)
 8001498:	2200      	movs	r2, #0
 800149a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800149c:	4b07      	ldr	r3, [pc, #28]	; (80014bc <MX_SPI1_Init+0xa4>)
 800149e:	2200      	movs	r2, #0
 80014a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <MX_SPI1_Init+0xa4>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014a8:	4804      	ldr	r0, [pc, #16]	; (80014bc <MX_SPI1_Init+0xa4>)
 80014aa:	f008 faa1 	bl	80099f0 <HAL_SPI_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80014b4:	f7ff ff6c 	bl	8001390 <Error_Handler>
  }

}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	240005f4 	.word	0x240005f4
 80014c0:	40013000 	.word	0x40013000

080014c4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 80014c8:	4b27      	ldr	r3, [pc, #156]	; (8001568 <MX_SPI3_Init+0xa4>)
 80014ca:	4a28      	ldr	r2, [pc, #160]	; (800156c <MX_SPI3_Init+0xa8>)
 80014cc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80014ce:	4b26      	ldr	r3, [pc, #152]	; (8001568 <MX_SPI3_Init+0xa4>)
 80014d0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80014d4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80014d6:	4b24      	ldr	r3, [pc, #144]	; (8001568 <MX_SPI3_Init+0xa4>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80014dc:	4b22      	ldr	r3, [pc, #136]	; (8001568 <MX_SPI3_Init+0xa4>)
 80014de:	2203      	movs	r2, #3
 80014e0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014e2:	4b21      	ldr	r3, [pc, #132]	; (8001568 <MX_SPI3_Init+0xa4>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014e8:	4b1f      	ldr	r3, [pc, #124]	; (8001568 <MX_SPI3_Init+0xa4>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80014ee:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <MX_SPI3_Init+0xa4>)
 80014f0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80014f4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80014f6:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <MX_SPI3_Init+0xa4>)
 80014f8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80014fc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014fe:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <MX_SPI3_Init+0xa4>)
 8001500:	2200      	movs	r2, #0
 8001502:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001504:	4b18      	ldr	r3, [pc, #96]	; (8001568 <MX_SPI3_Init+0xa4>)
 8001506:	2200      	movs	r2, #0
 8001508:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800150a:	4b17      	ldr	r3, [pc, #92]	; (8001568 <MX_SPI3_Init+0xa4>)
 800150c:	2200      	movs	r2, #0
 800150e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001510:	4b15      	ldr	r3, [pc, #84]	; (8001568 <MX_SPI3_Init+0xa4>)
 8001512:	2200      	movs	r2, #0
 8001514:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001516:	4b14      	ldr	r3, [pc, #80]	; (8001568 <MX_SPI3_Init+0xa4>)
 8001518:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800151c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800151e:	4b12      	ldr	r3, [pc, #72]	; (8001568 <MX_SPI3_Init+0xa4>)
 8001520:	2200      	movs	r2, #0
 8001522:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001524:	4b10      	ldr	r3, [pc, #64]	; (8001568 <MX_SPI3_Init+0xa4>)
 8001526:	2200      	movs	r2, #0
 8001528:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800152a:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <MX_SPI3_Init+0xa4>)
 800152c:	2200      	movs	r2, #0
 800152e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001530:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <MX_SPI3_Init+0xa4>)
 8001532:	2200      	movs	r2, #0
 8001534:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001536:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <MX_SPI3_Init+0xa4>)
 8001538:	2200      	movs	r2, #0
 800153a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800153c:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <MX_SPI3_Init+0xa4>)
 800153e:	2200      	movs	r2, #0
 8001540:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <MX_SPI3_Init+0xa4>)
 8001544:	2200      	movs	r2, #0
 8001546:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001548:	4b07      	ldr	r3, [pc, #28]	; (8001568 <MX_SPI3_Init+0xa4>)
 800154a:	2200      	movs	r2, #0
 800154c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <MX_SPI3_Init+0xa4>)
 8001550:	2200      	movs	r2, #0
 8001552:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001554:	4804      	ldr	r0, [pc, #16]	; (8001568 <MX_SPI3_Init+0xa4>)
 8001556:	f008 fa4b 	bl	80099f0 <HAL_SPI_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8001560:	f7ff ff16 	bl	8001390 <Error_Handler>
  }

}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	240004e4 	.word	0x240004e4
 800156c:	40003c00 	.word	0x40003c00

08001570 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 8001574:	4b27      	ldr	r3, [pc, #156]	; (8001614 <MX_SPI4_Init+0xa4>)
 8001576:	4a28      	ldr	r2, [pc, #160]	; (8001618 <MX_SPI4_Init+0xa8>)
 8001578:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800157a:	4b26      	ldr	r3, [pc, #152]	; (8001614 <MX_SPI4_Init+0xa4>)
 800157c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001580:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001582:	4b24      	ldr	r3, [pc, #144]	; (8001614 <MX_SPI4_Init+0xa4>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8001588:	4b22      	ldr	r3, [pc, #136]	; (8001614 <MX_SPI4_Init+0xa4>)
 800158a:	2203      	movs	r2, #3
 800158c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800158e:	4b21      	ldr	r3, [pc, #132]	; (8001614 <MX_SPI4_Init+0xa4>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001594:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <MX_SPI4_Init+0xa4>)
 8001596:	2200      	movs	r2, #0
 8001598:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800159a:	4b1e      	ldr	r3, [pc, #120]	; (8001614 <MX_SPI4_Init+0xa4>)
 800159c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80015a0:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80015a2:	4b1c      	ldr	r3, [pc, #112]	; (8001614 <MX_SPI4_Init+0xa4>)
 80015a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80015a8:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015aa:	4b1a      	ldr	r3, [pc, #104]	; (8001614 <MX_SPI4_Init+0xa4>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80015b0:	4b18      	ldr	r3, [pc, #96]	; (8001614 <MX_SPI4_Init+0xa4>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015b6:	4b17      	ldr	r3, [pc, #92]	; (8001614 <MX_SPI4_Init+0xa4>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80015bc:	4b15      	ldr	r3, [pc, #84]	; (8001614 <MX_SPI4_Init+0xa4>)
 80015be:	2200      	movs	r2, #0
 80015c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015c2:	4b14      	ldr	r3, [pc, #80]	; (8001614 <MX_SPI4_Init+0xa4>)
 80015c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015c8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80015ca:	4b12      	ldr	r3, [pc, #72]	; (8001614 <MX_SPI4_Init+0xa4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80015d0:	4b10      	ldr	r3, [pc, #64]	; (8001614 <MX_SPI4_Init+0xa4>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015d6:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <MX_SPI4_Init+0xa4>)
 80015d8:	2200      	movs	r2, #0
 80015da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015dc:	4b0d      	ldr	r3, [pc, #52]	; (8001614 <MX_SPI4_Init+0xa4>)
 80015de:	2200      	movs	r2, #0
 80015e0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80015e2:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <MX_SPI4_Init+0xa4>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80015e8:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <MX_SPI4_Init+0xa4>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80015ee:	4b09      	ldr	r3, [pc, #36]	; (8001614 <MX_SPI4_Init+0xa4>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80015f4:	4b07      	ldr	r3, [pc, #28]	; (8001614 <MX_SPI4_Init+0xa4>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <MX_SPI4_Init+0xa4>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001600:	4804      	ldr	r0, [pc, #16]	; (8001614 <MX_SPI4_Init+0xa4>)
 8001602:	f008 f9f5 	bl	80099f0 <HAL_SPI_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 800160c:	f7ff fec0 	bl	8001390 <Error_Handler>
  }

}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	2400056c 	.word	0x2400056c
 8001618:	40013400 	.word	0x40013400

0800161c <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0

  hspi6.Instance = SPI6;
 8001620:	4b27      	ldr	r3, [pc, #156]	; (80016c0 <MX_SPI6_Init+0xa4>)
 8001622:	4a28      	ldr	r2, [pc, #160]	; (80016c4 <MX_SPI6_Init+0xa8>)
 8001624:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8001626:	4b26      	ldr	r3, [pc, #152]	; (80016c0 <MX_SPI6_Init+0xa4>)
 8001628:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800162c:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 800162e:	4b24      	ldr	r3, [pc, #144]	; (80016c0 <MX_SPI6_Init+0xa4>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_4BIT;
 8001634:	4b22      	ldr	r3, [pc, #136]	; (80016c0 <MX_SPI6_Init+0xa4>)
 8001636:	2203      	movs	r2, #3
 8001638:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 800163a:	4b21      	ldr	r3, [pc, #132]	; (80016c0 <MX_SPI6_Init+0xa4>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001640:	4b1f      	ldr	r3, [pc, #124]	; (80016c0 <MX_SPI6_Init+0xa4>)
 8001642:	2200      	movs	r2, #0
 8001644:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8001646:	4b1e      	ldr	r3, [pc, #120]	; (80016c0 <MX_SPI6_Init+0xa4>)
 8001648:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800164c:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800164e:	4b1c      	ldr	r3, [pc, #112]	; (80016c0 <MX_SPI6_Init+0xa4>)
 8001650:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001654:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001656:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <MX_SPI6_Init+0xa4>)
 8001658:	2200      	movs	r2, #0
 800165a:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 800165c:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <MX_SPI6_Init+0xa4>)
 800165e:	2200      	movs	r2, #0
 8001660:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001662:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <MX_SPI6_Init+0xa4>)
 8001664:	2200      	movs	r2, #0
 8001666:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 8001668:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <MX_SPI6_Init+0xa4>)
 800166a:	2200      	movs	r2, #0
 800166c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800166e:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <MX_SPI6_Init+0xa4>)
 8001670:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001674:	635a      	str	r2, [r3, #52]	; 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001676:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <MX_SPI6_Init+0xa4>)
 8001678:	2200      	movs	r2, #0
 800167a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800167c:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <MX_SPI6_Init+0xa4>)
 800167e:	2200      	movs	r2, #0
 8001680:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001682:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <MX_SPI6_Init+0xa4>)
 8001684:	2200      	movs	r2, #0
 8001686:	641a      	str	r2, [r3, #64]	; 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001688:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <MX_SPI6_Init+0xa4>)
 800168a:	2200      	movs	r2, #0
 800168c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800168e:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <MX_SPI6_Init+0xa4>)
 8001690:	2200      	movs	r2, #0
 8001692:	649a      	str	r2, [r3, #72]	; 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001694:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <MX_SPI6_Init+0xa4>)
 8001696:	2200      	movs	r2, #0
 8001698:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <MX_SPI6_Init+0xa4>)
 800169c:	2200      	movs	r2, #0
 800169e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80016a0:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <MX_SPI6_Init+0xa4>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <MX_SPI6_Init+0xa4>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 80016ac:	4804      	ldr	r0, [pc, #16]	; (80016c0 <MX_SPI6_Init+0xa4>)
 80016ae:	f008 f99f 	bl	80099f0 <HAL_SPI_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_SPI6_Init+0xa0>
  {
    Error_Handler();
 80016b8:	f7ff fe6a 	bl	8001390 <Error_Handler>
  }

}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	2400045c 	.word	0x2400045c
 80016c4:	58001400 	.word	0x58001400

080016c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b090      	sub	sp, #64	; 0x40
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a69      	ldr	r2, [pc, #420]	; (800188c <HAL_SPI_MspInit+0x1c4>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d12e      	bne.n	8001748 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016ea:	4b69      	ldr	r3, [pc, #420]	; (8001890 <HAL_SPI_MspInit+0x1c8>)
 80016ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016f0:	4a67      	ldr	r2, [pc, #412]	; (8001890 <HAL_SPI_MspInit+0x1c8>)
 80016f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80016fa:	4b65      	ldr	r3, [pc, #404]	; (8001890 <HAL_SPI_MspInit+0x1c8>)
 80016fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001700:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001704:	62bb      	str	r3, [r7, #40]	; 0x28
 8001706:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001708:	4b61      	ldr	r3, [pc, #388]	; (8001890 <HAL_SPI_MspInit+0x1c8>)
 800170a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800170e:	4a60      	ldr	r2, [pc, #384]	; (8001890 <HAL_SPI_MspInit+0x1c8>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001718:	4b5d      	ldr	r3, [pc, #372]	; (8001890 <HAL_SPI_MspInit+0x1c8>)
 800171a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
 8001724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001726:	23e0      	movs	r3, #224	; 0xe0
 8001728:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	2302      	movs	r3, #2
 800172c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	2300      	movs	r3, #0
 8001734:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001736:	2305      	movs	r3, #5
 8001738:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800173e:	4619      	mov	r1, r3
 8001740:	4854      	ldr	r0, [pc, #336]	; (8001894 <HAL_SPI_MspInit+0x1cc>)
 8001742:	f003 fcf7 	bl	8005134 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8001746:	e09c      	b.n	8001882 <HAL_SPI_MspInit+0x1ba>
  else if(spiHandle->Instance==SPI3)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a52      	ldr	r2, [pc, #328]	; (8001898 <HAL_SPI_MspInit+0x1d0>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d12f      	bne.n	80017b2 <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001752:	4b4f      	ldr	r3, [pc, #316]	; (8001890 <HAL_SPI_MspInit+0x1c8>)
 8001754:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001758:	4a4d      	ldr	r2, [pc, #308]	; (8001890 <HAL_SPI_MspInit+0x1c8>)
 800175a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800175e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001762:	4b4b      	ldr	r3, [pc, #300]	; (8001890 <HAL_SPI_MspInit+0x1c8>)
 8001764:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001768:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800176c:	623b      	str	r3, [r7, #32]
 800176e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001770:	4b47      	ldr	r3, [pc, #284]	; (8001890 <HAL_SPI_MspInit+0x1c8>)
 8001772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001776:	4a46      	ldr	r2, [pc, #280]	; (8001890 <HAL_SPI_MspInit+0x1c8>)
 8001778:	f043 0304 	orr.w	r3, r3, #4
 800177c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001780:	4b43      	ldr	r3, [pc, #268]	; (8001890 <HAL_SPI_MspInit+0x1c8>)
 8001782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001786:	f003 0304 	and.w	r3, r3, #4
 800178a:	61fb      	str	r3, [r7, #28]
 800178c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800178e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001792:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001794:	2302      	movs	r3, #2
 8001796:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179c:	2300      	movs	r3, #0
 800179e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017a0:	2306      	movs	r3, #6
 80017a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017a8:	4619      	mov	r1, r3
 80017aa:	483c      	ldr	r0, [pc, #240]	; (800189c <HAL_SPI_MspInit+0x1d4>)
 80017ac:	f003 fcc2 	bl	8005134 <HAL_GPIO_Init>
}
 80017b0:	e067      	b.n	8001882 <HAL_SPI_MspInit+0x1ba>
  else if(spiHandle->Instance==SPI4)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a3a      	ldr	r2, [pc, #232]	; (80018a0 <HAL_SPI_MspInit+0x1d8>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d12f      	bne.n	800181c <HAL_SPI_MspInit+0x154>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80017bc:	4b34      	ldr	r3, [pc, #208]	; (8001890 <HAL_SPI_MspInit+0x1c8>)
 80017be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017c2:	4a33      	ldr	r2, [pc, #204]	; (8001890 <HAL_SPI_MspInit+0x1c8>)
 80017c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017c8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80017cc:	4b30      	ldr	r3, [pc, #192]	; (8001890 <HAL_SPI_MspInit+0x1c8>)
 80017ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017d6:	61bb      	str	r3, [r7, #24]
 80017d8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017da:	4b2d      	ldr	r3, [pc, #180]	; (8001890 <HAL_SPI_MspInit+0x1c8>)
 80017dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e0:	4a2b      	ldr	r2, [pc, #172]	; (8001890 <HAL_SPI_MspInit+0x1c8>)
 80017e2:	f043 0310 	orr.w	r3, r3, #16
 80017e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017ea:	4b29      	ldr	r3, [pc, #164]	; (8001890 <HAL_SPI_MspInit+0x1c8>)
 80017ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017f0:	f003 0310 	and.w	r3, r3, #16
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80017f8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80017fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fe:	2302      	movs	r3, #2
 8001800:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001806:	2300      	movs	r3, #0
 8001808:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800180a:	2305      	movs	r3, #5
 800180c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800180e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001812:	4619      	mov	r1, r3
 8001814:	4823      	ldr	r0, [pc, #140]	; (80018a4 <HAL_SPI_MspInit+0x1dc>)
 8001816:	f003 fc8d 	bl	8005134 <HAL_GPIO_Init>
}
 800181a:	e032      	b.n	8001882 <HAL_SPI_MspInit+0x1ba>
  else if(spiHandle->Instance==SPI6)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a21      	ldr	r2, [pc, #132]	; (80018a8 <HAL_SPI_MspInit+0x1e0>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d12d      	bne.n	8001882 <HAL_SPI_MspInit+0x1ba>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8001826:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <HAL_SPI_MspInit+0x1c8>)
 8001828:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800182c:	4a18      	ldr	r2, [pc, #96]	; (8001890 <HAL_SPI_MspInit+0x1c8>)
 800182e:	f043 0320 	orr.w	r3, r3, #32
 8001832:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001836:	4b16      	ldr	r3, [pc, #88]	; (8001890 <HAL_SPI_MspInit+0x1c8>)
 8001838:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800183c:	f003 0320 	and.w	r3, r3, #32
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <HAL_SPI_MspInit+0x1c8>)
 8001846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800184a:	4a11      	ldr	r2, [pc, #68]	; (8001890 <HAL_SPI_MspInit+0x1c8>)
 800184c:	f043 0302 	orr.w	r3, r3, #2
 8001850:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001854:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <HAL_SPI_MspInit+0x1c8>)
 8001856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001862:	2338      	movs	r3, #56	; 0x38
 8001864:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001866:	2302      	movs	r3, #2
 8001868:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186e:	2300      	movs	r3, #0
 8001870:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8001872:	2308      	movs	r3, #8
 8001874:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001876:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800187a:	4619      	mov	r1, r3
 800187c:	480b      	ldr	r0, [pc, #44]	; (80018ac <HAL_SPI_MspInit+0x1e4>)
 800187e:	f003 fc59 	bl	8005134 <HAL_GPIO_Init>
}
 8001882:	bf00      	nop
 8001884:	3740      	adds	r7, #64	; 0x40
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40013000 	.word	0x40013000
 8001890:	58024400 	.word	0x58024400
 8001894:	58020000 	.word	0x58020000
 8001898:	40003c00 	.word	0x40003c00
 800189c:	58020800 	.word	0x58020800
 80018a0:	40013400 	.word	0x40013400
 80018a4:	58021000 	.word	0x58021000
 80018a8:	58001400 	.word	0x58001400
 80018ac:	58020400 	.word	0x58020400

080018b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b6:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <HAL_MspInit+0x30>)
 80018b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018bc:	4a08      	ldr	r2, [pc, #32]	; (80018e0 <HAL_MspInit+0x30>)
 80018be:	f043 0302 	orr.w	r3, r3, #2
 80018c2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_MspInit+0x30>)
 80018c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	607b      	str	r3, [r7, #4]
 80018d2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	58024400 	.word	0x58024400

080018e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80018e8:	f006 f8aa 	bl	8007a40 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f4:	e7fe      	b.n	80018f4 <HardFault_Handler+0x4>

080018f6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018fa:	e7fe      	b.n	80018fa <MemManage_Handler+0x4>

080018fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001900:	e7fe      	b.n	8001900 <BusFault_Handler+0x4>

08001902 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001906:	e7fe      	b.n	8001906 <UsageFault_Handler+0x4>

08001908 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001936:	f000 fdd1 	bl	80024dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001944:	4802      	ldr	r0, [pc, #8]	; (8001950 <DMA1_Stream0_IRQHandler+0x10>)
 8001946:	f002 fa8f 	bl	8003e68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	24000788 	.word	0x24000788

08001954 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001958:	4802      	ldr	r0, [pc, #8]	; (8001964 <OTG_FS_IRQHandler+0x10>)
 800195a:	f004 f84d 	bl	80059f8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	24001b08 	.word	0x24001b08

08001968 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001970:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <_sbrk+0x50>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d102      	bne.n	800197e <_sbrk+0x16>
		heap_end = &end;
 8001978:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <_sbrk+0x50>)
 800197a:	4a10      	ldr	r2, [pc, #64]	; (80019bc <_sbrk+0x54>)
 800197c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <_sbrk+0x50>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <_sbrk+0x50>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4413      	add	r3, r2
 800198c:	466a      	mov	r2, sp
 800198e:	4293      	cmp	r3, r2
 8001990:	d907      	bls.n	80019a2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001992:	f00f fcff 	bl	8011394 <__errno>
 8001996:	4602      	mov	r2, r0
 8001998:	230c      	movs	r3, #12
 800199a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800199c:	f04f 33ff 	mov.w	r3, #4294967295
 80019a0:	e006      	b.n	80019b0 <_sbrk+0x48>
	}

	heap_end += incr;
 80019a2:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <_sbrk+0x50>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4413      	add	r3, r2
 80019aa:	4a03      	ldr	r2, [pc, #12]	; (80019b8 <_sbrk+0x50>)
 80019ac:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80019ae:	68fb      	ldr	r3, [r7, #12]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	240002b0 	.word	0x240002b0
 80019bc:	24001f18 	.word	0x24001f18

080019c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019c4:	4b29      	ldr	r3, [pc, #164]	; (8001a6c <SystemInit+0xac>)
 80019c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ca:	4a28      	ldr	r2, [pc, #160]	; (8001a6c <SystemInit+0xac>)
 80019cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80019d4:	4b26      	ldr	r3, [pc, #152]	; (8001a70 <SystemInit+0xb0>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a25      	ldr	r2, [pc, #148]	; (8001a70 <SystemInit+0xb0>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80019e0:	4b23      	ldr	r3, [pc, #140]	; (8001a70 <SystemInit+0xb0>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80019e6:	4b22      	ldr	r3, [pc, #136]	; (8001a70 <SystemInit+0xb0>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	4921      	ldr	r1, [pc, #132]	; (8001a70 <SystemInit+0xb0>)
 80019ec:	4b21      	ldr	r3, [pc, #132]	; (8001a74 <SystemInit+0xb4>)
 80019ee:	4013      	ands	r3, r2
 80019f0:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80019f2:	4b1f      	ldr	r3, [pc, #124]	; (8001a70 <SystemInit+0xb0>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80019f8:	4b1d      	ldr	r3, [pc, #116]	; (8001a70 <SystemInit+0xb0>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80019fe:	4b1c      	ldr	r3, [pc, #112]	; (8001a70 <SystemInit+0xb0>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001a04:	4b1a      	ldr	r3, [pc, #104]	; (8001a70 <SystemInit+0xb0>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8001a0a:	4b19      	ldr	r3, [pc, #100]	; (8001a70 <SystemInit+0xb0>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001a10:	4b17      	ldr	r3, [pc, #92]	; (8001a70 <SystemInit+0xb0>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a16:	4b16      	ldr	r3, [pc, #88]	; (8001a70 <SystemInit+0xb0>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8001a1c:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <SystemInit+0xb0>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a22:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <SystemInit+0xb0>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001a28:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <SystemInit+0xb0>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001a2e:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <SystemInit+0xb0>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a34:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <SystemInit+0xb0>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a0d      	ldr	r2, [pc, #52]	; (8001a70 <SystemInit+0xb0>)
 8001a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a3e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <SystemInit+0xb0>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001a46:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <SystemInit+0xb8>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <SystemInit+0xbc>)
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a52:	d202      	bcs.n	8001a5a <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001a54:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <SystemInit+0xc0>)
 8001a56:	2201      	movs	r2, #1
 8001a58:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a5a:	4b04      	ldr	r3, [pc, #16]	; (8001a6c <SystemInit+0xac>)
 8001a5c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a60:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001a62:	bf00      	nop
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000ed00 	.word	0xe000ed00
 8001a70:	58024400 	.word	0x58024400
 8001a74:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a78:	5c001000 	.word	0x5c001000
 8001a7c:	ffff0000 	.word	0xffff0000
 8001a80:	51008108 	.word	0x51008108

08001a84 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b096      	sub	sp, #88	; 0x58
 8001a88:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a8a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	60da      	str	r2, [r3, #12]
 8001aa4:	611a      	str	r2, [r3, #16]
 8001aa6:	615a      	str	r2, [r3, #20]
 8001aa8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001aaa:	1d3b      	adds	r3, r7, #4
 8001aac:	222c      	movs	r2, #44	; 0x2c
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f00f fcb4 	bl	801141e <memset>

  htim1.Instance = TIM1;
 8001ab6:	4b38      	ldr	r3, [pc, #224]	; (8001b98 <MX_TIM1_Init+0x114>)
 8001ab8:	4a38      	ldr	r2, [pc, #224]	; (8001b9c <MX_TIM1_Init+0x118>)
 8001aba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001abc:	4b36      	ldr	r3, [pc, #216]	; (8001b98 <MX_TIM1_Init+0x114>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac2:	4b35      	ldr	r3, [pc, #212]	; (8001b98 <MX_TIM1_Init+0x114>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001ac8:	4b33      	ldr	r3, [pc, #204]	; (8001b98 <MX_TIM1_Init+0x114>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ace:	4b32      	ldr	r3, [pc, #200]	; (8001b98 <MX_TIM1_Init+0x114>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ad4:	4b30      	ldr	r3, [pc, #192]	; (8001b98 <MX_TIM1_Init+0x114>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ada:	4b2f      	ldr	r3, [pc, #188]	; (8001b98 <MX_TIM1_Init+0x114>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ae0:	482d      	ldr	r0, [pc, #180]	; (8001b98 <MX_TIM1_Init+0x114>)
 8001ae2:	f008 fe44 	bl	800a76e <HAL_TIM_PWM_Init>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001aec:	f7ff fc50 	bl	8001390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af0:	2300      	movs	r3, #0
 8001af2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001af4:	2300      	movs	r3, #0
 8001af6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af8:	2300      	movs	r3, #0
 8001afa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001afc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b00:	4619      	mov	r1, r3
 8001b02:	4825      	ldr	r0, [pc, #148]	; (8001b98 <MX_TIM1_Init+0x114>)
 8001b04:	f009 fade 	bl	800b0c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8001b0e:	f7ff fc3f 	bl	8001390 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b12:	2360      	movs	r3, #96	; 0x60
 8001b14:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b22:	2300      	movs	r3, #0
 8001b24:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b26:	2300      	movs	r3, #0
 8001b28:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b32:	2200      	movs	r2, #0
 8001b34:	4619      	mov	r1, r3
 8001b36:	4818      	ldr	r0, [pc, #96]	; (8001b98 <MX_TIM1_Init+0x114>)
 8001b38:	f008 fe44 	bl	800a7c4 <HAL_TIM_PWM_ConfigChannel>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001b42:	f7ff fc25 	bl	8001390 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b46:	2300      	movs	r3, #0
 8001b48:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b5e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b64:	2300      	movs	r3, #0
 8001b66:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b76:	1d3b      	adds	r3, r7, #4
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4807      	ldr	r0, [pc, #28]	; (8001b98 <MX_TIM1_Init+0x114>)
 8001b7c:	f009 fb2a 	bl	800b1d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001b86:	f7ff fc03 	bl	8001390 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8001b8a:	4803      	ldr	r0, [pc, #12]	; (8001b98 <MX_TIM1_Init+0x114>)
 8001b8c:	f000 f8f4 	bl	8001d78 <HAL_TIM_MspPostInit>

}
 8001b90:	bf00      	nop
 8001b92:	3758      	adds	r7, #88	; 0x58
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	240006bc 	.word	0x240006bc
 8001b9c:	40010000 	.word	0x40010000

08001ba0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b096      	sub	sp, #88	; 0x58
 8001ba4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
 8001bbe:	60da      	str	r2, [r3, #12]
 8001bc0:	611a      	str	r2, [r3, #16]
 8001bc2:	615a      	str	r2, [r3, #20]
 8001bc4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bc6:	1d3b      	adds	r3, r7, #4
 8001bc8:	222c      	movs	r2, #44	; 0x2c
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f00f fc26 	bl	801141e <memset>

  htim8.Instance = TIM8;
 8001bd2:	4b4a      	ldr	r3, [pc, #296]	; (8001cfc <MX_TIM8_Init+0x15c>)
 8001bd4:	4a4a      	ldr	r2, [pc, #296]	; (8001d00 <MX_TIM8_Init+0x160>)
 8001bd6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001bd8:	4b48      	ldr	r3, [pc, #288]	; (8001cfc <MX_TIM8_Init+0x15c>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bde:	4b47      	ldr	r3, [pc, #284]	; (8001cfc <MX_TIM8_Init+0x15c>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 8001be4:	4b45      	ldr	r3, [pc, #276]	; (8001cfc <MX_TIM8_Init+0x15c>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bea:	4b44      	ldr	r3, [pc, #272]	; (8001cfc <MX_TIM8_Init+0x15c>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001bf0:	4b42      	ldr	r3, [pc, #264]	; (8001cfc <MX_TIM8_Init+0x15c>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf6:	4b41      	ldr	r3, [pc, #260]	; (8001cfc <MX_TIM8_Init+0x15c>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001bfc:	483f      	ldr	r0, [pc, #252]	; (8001cfc <MX_TIM8_Init+0x15c>)
 8001bfe:	f008 fdb6 	bl	800a76e <HAL_TIM_PWM_Init>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8001c08:	f7ff fbc2 	bl	8001390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c10:	2300      	movs	r3, #0
 8001c12:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001c18:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4837      	ldr	r0, [pc, #220]	; (8001cfc <MX_TIM8_Init+0x15c>)
 8001c20:	f009 fa50 	bl	800b0c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 8001c2a:	f7ff fbb1 	bl	8001390 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c2e:	2360      	movs	r3, #96	; 0x60
 8001c30:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c36:	2300      	movs	r3, #0
 8001c38:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c42:	2300      	movs	r3, #0
 8001c44:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c46:	2300      	movs	r3, #0
 8001c48:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c4e:	2200      	movs	r2, #0
 8001c50:	4619      	mov	r1, r3
 8001c52:	482a      	ldr	r0, [pc, #168]	; (8001cfc <MX_TIM8_Init+0x15c>)
 8001c54:	f008 fdb6 	bl	800a7c4 <HAL_TIM_PWM_ConfigChannel>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8001c5e:	f7ff fb97 	bl	8001390 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c66:	2204      	movs	r2, #4
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4824      	ldr	r0, [pc, #144]	; (8001cfc <MX_TIM8_Init+0x15c>)
 8001c6c:	f008 fdaa 	bl	800a7c4 <HAL_TIM_PWM_ConfigChannel>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_TIM8_Init+0xda>
  {
    Error_Handler();
 8001c76:	f7ff fb8b 	bl	8001390 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c7e:	2208      	movs	r2, #8
 8001c80:	4619      	mov	r1, r3
 8001c82:	481e      	ldr	r0, [pc, #120]	; (8001cfc <MX_TIM8_Init+0x15c>)
 8001c84:	f008 fd9e 	bl	800a7c4 <HAL_TIM_PWM_ConfigChannel>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 8001c8e:	f7ff fb7f 	bl	8001390 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c96:	220c      	movs	r2, #12
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4818      	ldr	r0, [pc, #96]	; (8001cfc <MX_TIM8_Init+0x15c>)
 8001c9c:	f008 fd92 	bl	800a7c4 <HAL_TIM_PWM_ConfigChannel>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_TIM8_Init+0x10a>
  {
    Error_Handler();
 8001ca6:	f7ff fb73 	bl	8001390 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001caa:	2300      	movs	r3, #0
 8001cac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cc2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ccc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001cda:	1d3b      	adds	r3, r7, #4
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4807      	ldr	r0, [pc, #28]	; (8001cfc <MX_TIM8_Init+0x15c>)
 8001ce0:	f009 fa78 	bl	800b1d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_TIM8_Init+0x14e>
  {
    Error_Handler();
 8001cea:	f7ff fb51 	bl	8001390 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8001cee:	4803      	ldr	r0, [pc, #12]	; (8001cfc <MX_TIM8_Init+0x15c>)
 8001cf0:	f000 f842 	bl	8001d78 <HAL_TIM_MspPostInit>

}
 8001cf4:	bf00      	nop
 8001cf6:	3758      	adds	r7, #88	; 0x58
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	2400067c 	.word	0x2400067c
 8001d00:	40010400 	.word	0x40010400

08001d04 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a16      	ldr	r2, [pc, #88]	; (8001d6c <HAL_TIM_PWM_MspInit+0x68>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d10f      	bne.n	8001d36 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d16:	4b16      	ldr	r3, [pc, #88]	; (8001d70 <HAL_TIM_PWM_MspInit+0x6c>)
 8001d18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d1c:	4a14      	ldr	r2, [pc, #80]	; (8001d70 <HAL_TIM_PWM_MspInit+0x6c>)
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001d26:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <HAL_TIM_PWM_MspInit+0x6c>)
 8001d28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001d34:	e013      	b.n	8001d5e <HAL_TIM_PWM_MspInit+0x5a>
  else if(tim_pwmHandle->Instance==TIM8)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a0e      	ldr	r2, [pc, #56]	; (8001d74 <HAL_TIM_PWM_MspInit+0x70>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d10e      	bne.n	8001d5e <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <HAL_TIM_PWM_MspInit+0x6c>)
 8001d42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d46:	4a0a      	ldr	r2, [pc, #40]	; (8001d70 <HAL_TIM_PWM_MspInit+0x6c>)
 8001d48:	f043 0302 	orr.w	r3, r3, #2
 8001d4c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001d50:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <HAL_TIM_PWM_MspInit+0x6c>)
 8001d52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
}
 8001d5e:	bf00      	nop
 8001d60:	3714      	adds	r7, #20
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	40010000 	.word	0x40010000
 8001d70:	58024400 	.word	0x58024400
 8001d74:	40010400 	.word	0x40010400

08001d78 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08a      	sub	sp, #40	; 0x28
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d80:	f107 0314 	add.w	r3, r7, #20
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a26      	ldr	r2, [pc, #152]	; (8001e30 <HAL_TIM_MspPostInit+0xb8>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d120      	bne.n	8001ddc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9a:	4b26      	ldr	r3, [pc, #152]	; (8001e34 <HAL_TIM_MspPostInit+0xbc>)
 8001d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da0:	4a24      	ldr	r2, [pc, #144]	; (8001e34 <HAL_TIM_MspPostInit+0xbc>)
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001daa:	4b22      	ldr	r3, [pc, #136]	; (8001e34 <HAL_TIM_MspPostInit+0xbc>)
 8001dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001db8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dce:	f107 0314 	add.w	r3, r7, #20
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4818      	ldr	r0, [pc, #96]	; (8001e38 <HAL_TIM_MspPostInit+0xc0>)
 8001dd6:	f003 f9ad 	bl	8005134 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001dda:	e024      	b.n	8001e26 <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM8)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a16      	ldr	r2, [pc, #88]	; (8001e3c <HAL_TIM_MspPostInit+0xc4>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d11f      	bne.n	8001e26 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de6:	4b13      	ldr	r3, [pc, #76]	; (8001e34 <HAL_TIM_MspPostInit+0xbc>)
 8001de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dec:	4a11      	ldr	r2, [pc, #68]	; (8001e34 <HAL_TIM_MspPostInit+0xbc>)
 8001dee:	f043 0304 	orr.w	r3, r3, #4
 8001df2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001df6:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <HAL_TIM_MspPostInit+0xbc>)
 8001df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001e04:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e12:	2300      	movs	r3, #0
 8001e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001e16:	2303      	movs	r3, #3
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e1a:	f107 0314 	add.w	r3, r7, #20
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4807      	ldr	r0, [pc, #28]	; (8001e40 <HAL_TIM_MspPostInit+0xc8>)
 8001e22:	f003 f987 	bl	8005134 <HAL_GPIO_Init>
}
 8001e26:	bf00      	nop
 8001e28:	3728      	adds	r7, #40	; 0x28
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40010000 	.word	0x40010000
 8001e34:	58024400 	.word	0x58024400
 8001e38:	58020000 	.word	0x58020000
 8001e3c:	40010400 	.word	0x40010400
 8001e40:	58020800 	.word	0x58020800

08001e44 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
DMA_HandleTypeDef hdma_uart5_rx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8001e48:	4b22      	ldr	r3, [pc, #136]	; (8001ed4 <MX_UART5_Init+0x90>)
 8001e4a:	4a23      	ldr	r2, [pc, #140]	; (8001ed8 <MX_UART5_Init+0x94>)
 8001e4c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001e4e:	4b21      	ldr	r3, [pc, #132]	; (8001ed4 <MX_UART5_Init+0x90>)
 8001e50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e54:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001e56:	4b1f      	ldr	r3, [pc, #124]	; (8001ed4 <MX_UART5_Init+0x90>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001e5c:	4b1d      	ldr	r3, [pc, #116]	; (8001ed4 <MX_UART5_Init+0x90>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001e62:	4b1c      	ldr	r3, [pc, #112]	; (8001ed4 <MX_UART5_Init+0x90>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001e68:	4b1a      	ldr	r3, [pc, #104]	; (8001ed4 <MX_UART5_Init+0x90>)
 8001e6a:	220c      	movs	r2, #12
 8001e6c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e6e:	4b19      	ldr	r3, [pc, #100]	; (8001ed4 <MX_UART5_Init+0x90>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e74:	4b17      	ldr	r3, [pc, #92]	; (8001ed4 <MX_UART5_Init+0x90>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e7a:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <MX_UART5_Init+0x90>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e80:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <MX_UART5_Init+0x90>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e86:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <MX_UART5_Init+0x90>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001e8c:	4811      	ldr	r0, [pc, #68]	; (8001ed4 <MX_UART5_Init+0x90>)
 8001e8e:	f009 fa1f 	bl	800b2d0 <HAL_UART_Init>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001e98:	f7ff fa7a 	bl	8001390 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	480d      	ldr	r0, [pc, #52]	; (8001ed4 <MX_UART5_Init+0x90>)
 8001ea0:	f00b fd87 	bl	800d9b2 <HAL_UARTEx_SetTxFifoThreshold>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001eaa:	f7ff fa71 	bl	8001390 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eae:	2100      	movs	r1, #0
 8001eb0:	4808      	ldr	r0, [pc, #32]	; (8001ed4 <MX_UART5_Init+0x90>)
 8001eb2:	f00b fdbc 	bl	800da2e <HAL_UARTEx_SetRxFifoThreshold>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001ebc:	f7ff fa68 	bl	8001390 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001ec0:	4804      	ldr	r0, [pc, #16]	; (8001ed4 <MX_UART5_Init+0x90>)
 8001ec2:	f00b fd3d 	bl	800d940 <HAL_UARTEx_DisableFifoMode>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001ecc:	f7ff fa60 	bl	8001390 <Error_Handler>
  }

}
 8001ed0:	bf00      	nop
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	240006fc 	.word	0x240006fc
 8001ed8:	40005000 	.word	0x40005000

08001edc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08a      	sub	sp, #40	; 0x28
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee4:	f107 0314 	add.w	r3, r7, #20
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a32      	ldr	r2, [pc, #200]	; (8001fc4 <HAL_UART_MspInit+0xe8>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d15d      	bne.n	8001fba <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001efe:	4b32      	ldr	r3, [pc, #200]	; (8001fc8 <HAL_UART_MspInit+0xec>)
 8001f00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f04:	4a30      	ldr	r2, [pc, #192]	; (8001fc8 <HAL_UART_MspInit+0xec>)
 8001f06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f0a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f0e:	4b2e      	ldr	r3, [pc, #184]	; (8001fc8 <HAL_UART_MspInit+0xec>)
 8001f10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f1c:	4b2a      	ldr	r3, [pc, #168]	; (8001fc8 <HAL_UART_MspInit+0xec>)
 8001f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f22:	4a29      	ldr	r2, [pc, #164]	; (8001fc8 <HAL_UART_MspInit+0xec>)
 8001f24:	f043 0302 	orr.w	r3, r3, #2
 8001f28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f2c:	4b26      	ldr	r3, [pc, #152]	; (8001fc8 <HAL_UART_MspInit+0xec>)
 8001f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration    
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001f3a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f40:	2302      	movs	r3, #2
 8001f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001f4c:	230e      	movs	r3, #14
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f50:	f107 0314 	add.w	r3, r7, #20
 8001f54:	4619      	mov	r1, r3
 8001f56:	481d      	ldr	r0, [pc, #116]	; (8001fcc <HAL_UART_MspInit+0xf0>)
 8001f58:	f003 f8ec 	bl	8005134 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001f5c:	4b1c      	ldr	r3, [pc, #112]	; (8001fd0 <HAL_UART_MspInit+0xf4>)
 8001f5e:	4a1d      	ldr	r2, [pc, #116]	; (8001fd4 <HAL_UART_MspInit+0xf8>)
 8001f60:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8001f62:	4b1b      	ldr	r3, [pc, #108]	; (8001fd0 <HAL_UART_MspInit+0xf4>)
 8001f64:	2241      	movs	r2, #65	; 0x41
 8001f66:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f68:	4b19      	ldr	r3, [pc, #100]	; (8001fd0 <HAL_UART_MspInit+0xf4>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f6e:	4b18      	ldr	r3, [pc, #96]	; (8001fd0 <HAL_UART_MspInit+0xf4>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f74:	4b16      	ldr	r3, [pc, #88]	; (8001fd0 <HAL_UART_MspInit+0xf4>)
 8001f76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f7a:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f7c:	4b14      	ldr	r3, [pc, #80]	; (8001fd0 <HAL_UART_MspInit+0xf4>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f82:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <HAL_UART_MspInit+0xf4>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8001f88:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <HAL_UART_MspInit+0xf4>)
 8001f8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f8e:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001f90:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <HAL_UART_MspInit+0xf4>)
 8001f92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f96:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f98:	4b0d      	ldr	r3, [pc, #52]	; (8001fd0 <HAL_UART_MspInit+0xf4>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001f9e:	480c      	ldr	r0, [pc, #48]	; (8001fd0 <HAL_UART_MspInit+0xf4>)
 8001fa0:	f001 fc3c 	bl	800381c <HAL_DMA_Init>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8001faa:	f7ff f9f1 	bl	8001390 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a07      	ldr	r2, [pc, #28]	; (8001fd0 <HAL_UART_MspInit+0xf4>)
 8001fb2:	679a      	str	r2, [r3, #120]	; 0x78
 8001fb4:	4a06      	ldr	r2, [pc, #24]	; (8001fd0 <HAL_UART_MspInit+0xf4>)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8001fba:	bf00      	nop
 8001fbc:	3728      	adds	r7, #40	; 0x28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40005000 	.word	0x40005000
 8001fc8:	58024400 	.word	0x58024400
 8001fcc:	58020400 	.word	0x58020400
 8001fd0:	24000788 	.word	0x24000788
 8001fd4:	40020010 	.word	0x40020010

08001fd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002010 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001fdc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001fde:	e003      	b.n	8001fe8 <LoopCopyDataInit>

08001fe0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001fe2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001fe4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001fe6:	3104      	adds	r1, #4

08001fe8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001fe8:	480b      	ldr	r0, [pc, #44]	; (8002018 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001fea:	4b0c      	ldr	r3, [pc, #48]	; (800201c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001fec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001fee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ff0:	d3f6      	bcc.n	8001fe0 <CopyDataInit>
  ldr  r2, =_sbss
 8001ff2:	4a0b      	ldr	r2, [pc, #44]	; (8002020 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ff4:	e002      	b.n	8001ffc <LoopFillZerobss>

08001ff6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ff6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ff8:	f842 3b04 	str.w	r3, [r2], #4

08001ffc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ffc:	4b09      	ldr	r3, [pc, #36]	; (8002024 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ffe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002000:	d3f9      	bcc.n	8001ff6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002002:	f7ff fcdd 	bl	80019c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002006:	f00f f9cb 	bl	80113a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800200a:	f7ff f957 	bl	80012bc <main>
  bx  lr    
 800200e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002010:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8002014:	08011d60 	.word	0x08011d60
  ldr  r0, =_sdata
 8002018:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800201c:	240001e4 	.word	0x240001e4
  ldr  r2, =_sbss
 8002020:	240001e8 	.word	0x240001e8
  ldr  r3, = _ebss
 8002024:	24001f14 	.word	0x24001f14

08002028 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002028:	e7fe      	b.n	8002028 <ADC3_IRQHandler>
	...

0800202c <MS5607_init>:

/*
 * Initializes MS5607 temperature and pressure sensor
 * with specific MS5607Ctrl_t configuration
 */
void MS5607_init(MS5607Ctrl_t *altCtrl) {
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]

	uint8_t init = 0x1E; // Initialization hex command for MS5607
 8002034:	231e      	movs	r3, #30
 8002036:	73fb      	strb	r3, [r7, #15]

	// Pull CS Low
	HAL_GPIO_WritePin(altCtrl->spiconfig.port, altCtrl->spiconfig.pin, GPIO_PIN_RESET);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8002044:	2200      	movs	r2, #0
 8002046:	4619      	mov	r1, r3
 8002048:	f003 fa24 	bl	8005494 <HAL_GPIO_WritePin>

	// Send the initialization command and delay for 3ms
	HAL_SPI_Transmit(&altCtrl->spiconfig.hspi, &init, 1, 1000000);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f107 010f 	add.w	r1, r7, #15
 8002052:	4b0a      	ldr	r3, [pc, #40]	; (800207c <MS5607_init+0x50>)
 8002054:	2201      	movs	r2, #1
 8002056:	f007 fdc3 	bl	8009be0 <HAL_SPI_Transmit>
	HAL_Delay(3);
 800205a:	2003      	movs	r0, #3
 800205c:	f000 fa5e 	bl	800251c <HAL_Delay>

	// Pull CS High
	HAL_GPIO_WritePin(altCtrl->spiconfig.port, altCtrl->spiconfig.pin, GPIO_PIN_SET);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800206c:	2201      	movs	r2, #1
 800206e:	4619      	mov	r1, r3
 8002070:	f003 fa10 	bl	8005494 <HAL_GPIO_WritePin>
}
 8002074:	bf00      	nop
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	000f4240 	.word	0x000f4240

08002080 <MS5607_get_data>:
/**
 * Gets data from MS5607 with specific MS5607Ctrl_t configuration
 * Temperature in C stored in altCtrl->altData.temp
 * Pressure in Atm stored in altCtrl->altData.baro
 */
void MS5607_get_data(MS5607Ctrl_t *altCtrl) {
 8002080:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8002084:	b09e      	sub	sp, #120	; 0x78
 8002086:	af02      	add	r7, sp, #8
 8002088:	6078      	str	r0, [r7, #4]
	// Stores raw pressure and temperature values
	uint8_t presStore[4];
	uint8_t tempStore[4];

	// The commands to 
	uint8_t convertD1_512 = 0x42;
 800208a:	2342      	movs	r3, #66	; 0x42
 800208c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t convertD2_512 = 0x52;
 8002090:	2352      	movs	r3, #82	; 0x52
 8002092:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

	uint8_t promRead[6] = {0xA2, 0xA4, 0xA6, 0xA8, 0xAA, 0xAC};
 8002096:	4a07      	ldr	r2, [pc, #28]	; (80020b4 <MS5607_get_data+0x34>)
 8002098:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800209c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020a0:	6018      	str	r0, [r3, #0]
 80020a2:	3304      	adds	r3, #4
 80020a4:	8019      	strh	r1, [r3, #0]

	uint8_t read = 0x00;
 80020a6:	2300      	movs	r3, #0
 80020a8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    uint16_t memLoc[6];

    uint8_t rxBuffer[3];
    uint8_t txBuffer[3];

    for (int i = 0; i < 6; i++)
 80020ac:	2300      	movs	r3, #0
 80020ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80020b0:	e03b      	b.n	800212a <MS5607_get_data+0xaa>
 80020b2:	bf00      	nop
 80020b4:	08011c74 	.word	0x08011c74
    {
	    txBuffer[0] = promRead[i];
 80020b8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80020bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020be:	4413      	add	r3, r2
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        HAL_GPIO_WritePin(altCtrl->spiconfig.port, altCtrl->spiconfig.pin, GPIO_PIN_RESET);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 80020d2:	2200      	movs	r2, #0
 80020d4:	4619      	mov	r1, r3
 80020d6:	f003 f9dd 	bl	8005494 <HAL_GPIO_WritePin>
    	HAL_SPI_TransmitReceive(&altCtrl->spiconfig.hspi, txBuffer, rxBuffer, 3, 100000);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80020e0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80020e4:	4bc4      	ldr	r3, [pc, #784]	; (80023f8 <MS5607_get_data+0x378>)
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	2303      	movs	r3, #3
 80020ea:	f007 ff6b 	bl	8009fc4 <HAL_SPI_TransmitReceive>
	    HAL_GPIO_WritePin(altCtrl->spiconfig.port, altCtrl->spiconfig.pin, GPIO_PIN_SET);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 80020fa:	2201      	movs	r2, #1
 80020fc:	4619      	mov	r1, r3
 80020fe:	f003 f9c9 	bl	8005494 <HAL_GPIO_WritePin>
	    memLoc[i] = rxBuffer[1] << 8 | rxBuffer[2];
 8002102:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002106:	021b      	lsls	r3, r3, #8
 8002108:	b21a      	sxth	r2, r3
 800210a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800210e:	b21b      	sxth	r3, r3
 8002110:	4313      	orrs	r3, r2
 8002112:	b21b      	sxth	r3, r3
 8002114:	b29a      	uxth	r2, r3
 8002116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800211e:	440b      	add	r3, r1
 8002120:	f823 2c30 	strh.w	r2, [r3, #-48]
    for (int i = 0; i < 6; i++)
 8002124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002126:	3301      	adds	r3, #1
 8002128:	66fb      	str	r3, [r7, #108]	; 0x6c
 800212a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800212c:	2b05      	cmp	r3, #5
 800212e:	ddc3      	ble.n	80020b8 <MS5607_get_data+0x38>
    }

	HAL_GPIO_WritePin(altCtrl->spiconfig.port, altCtrl->spiconfig.pin, GPIO_PIN_RESET);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800213c:	2200      	movs	r2, #0
 800213e:	4619      	mov	r1, r3
 8002140:	f003 f9a8 	bl	8005494 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&altCtrl->spiconfig.hspi, &convertD1_512, 1, 1000000);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f107 0157 	add.w	r1, r7, #87	; 0x57
 800214a:	4bac      	ldr	r3, [pc, #688]	; (80023fc <MS5607_get_data+0x37c>)
 800214c:	2201      	movs	r2, #1
 800214e:	f007 fd47 	bl	8009be0 <HAL_SPI_Transmit>
	HAL_Delay(9);
 8002152:	2009      	movs	r0, #9
 8002154:	f000 f9e2 	bl	800251c <HAL_Delay>
	HAL_GPIO_WritePin(altCtrl->spiconfig.port, altCtrl->spiconfig.pin, GPIO_PIN_SET);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8002164:	2201      	movs	r2, #1
 8002166:	4619      	mov	r1, r3
 8002168:	f003 f994 	bl	8005494 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(altCtrl->spiconfig.port, altCtrl->spiconfig.pin, GPIO_PIN_RESET);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8002178:	2200      	movs	r2, #0
 800217a:	4619      	mov	r1, r3
 800217c:	f003 f98a 	bl	8005494 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&altCtrl->spiconfig.hspi, &read, presStore, 4, 1000000);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002186:	f107 014f 	add.w	r1, r7, #79	; 0x4f
 800218a:	4b9c      	ldr	r3, [pc, #624]	; (80023fc <MS5607_get_data+0x37c>)
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	2304      	movs	r3, #4
 8002190:	f007 ff18 	bl	8009fc4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(altCtrl->spiconfig.port, altCtrl->spiconfig.pin, GPIO_PIN_SET);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 80021a0:	2201      	movs	r2, #1
 80021a2:	4619      	mov	r1, r3
 80021a4:	f003 f976 	bl	8005494 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(altCtrl->spiconfig.port, altCtrl->spiconfig.pin, GPIO_PIN_RESET);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 80021b4:	2200      	movs	r2, #0
 80021b6:	4619      	mov	r1, r3
 80021b8:	f003 f96c 	bl	8005494 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&altCtrl->spiconfig.hspi, &convertD2_512, 1, 1000000);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f107 0156 	add.w	r1, r7, #86	; 0x56
 80021c2:	4b8e      	ldr	r3, [pc, #568]	; (80023fc <MS5607_get_data+0x37c>)
 80021c4:	2201      	movs	r2, #1
 80021c6:	f007 fd0b 	bl	8009be0 <HAL_SPI_Transmit>
	HAL_Delay(9);
 80021ca:	2009      	movs	r0, #9
 80021cc:	f000 f9a6 	bl	800251c <HAL_Delay>
	HAL_GPIO_WritePin(altCtrl->spiconfig.port, altCtrl->spiconfig.pin, GPIO_PIN_SET);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 80021dc:	2201      	movs	r2, #1
 80021de:	4619      	mov	r1, r3
 80021e0:	f003 f958 	bl	8005494 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(altCtrl->spiconfig.port, altCtrl->spiconfig.pin, GPIO_PIN_RESET);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 80021f0:	2200      	movs	r2, #0
 80021f2:	4619      	mov	r1, r3
 80021f4:	f003 f94e 	bl	8005494 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&altCtrl->spiconfig.hspi, &read, tempStore, 4, 1000000);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80021fe:	f107 014f 	add.w	r1, r7, #79	; 0x4f
 8002202:	4b7e      	ldr	r3, [pc, #504]	; (80023fc <MS5607_get_data+0x37c>)
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	2304      	movs	r3, #4
 8002208:	f007 fedc 	bl	8009fc4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(altCtrl->spiconfig.port, altCtrl->spiconfig.pin, GPIO_PIN_SET);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8002218:	2201      	movs	r2, #1
 800221a:	4619      	mov	r1, r3
 800221c:	f003 f93a 	bl	8005494 <HAL_GPIO_WritePin>

	uint32_t D1 = (presStore[1] << 16 | presStore[2] << 8 | presStore[3]);
 8002220:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8002224:	041a      	lsls	r2, r3, #16
 8002226:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800222a:	021b      	lsls	r3, r3, #8
 800222c:	4313      	orrs	r3, r2
 800222e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8002232:	4313      	orrs	r3, r2
 8002234:	66bb      	str	r3, [r7, #104]	; 0x68
	uint32_t D2 = (tempStore[1] << 16 | tempStore[2] << 8 | tempStore[3]);
 8002236:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800223a:	041a      	lsls	r2, r3, #16
 800223c:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8002240:	021b      	lsls	r3, r3, #8
 8002242:	4313      	orrs	r3, r2
 8002244:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8002248:	4313      	orrs	r3, r2
 800224a:	667b      	str	r3, [r7, #100]	; 0x64


	int32_t dT = D2 - ((int32_t)(memLoc[4]) << 8);
 800224c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002250:	021b      	lsls	r3, r3, #8
 8002252:	461a      	mov	r2, r3
 8002254:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002256:	1a9b      	subs	r3, r3, r2
 8002258:	663b      	str	r3, [r7, #96]	; 0x60
	volatile int64_t Temp = 2000 + (((int64_t) (memLoc[5]) * dT) >> 23);
 800225a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800225e:	b299      	uxth	r1, r3
 8002260:	f04f 0200 	mov.w	r2, #0
 8002264:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002266:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800226a:	fb03 fc02 	mul.w	ip, r3, r2
 800226e:	fb01 f004 	mul.w	r0, r1, r4
 8002272:	4460      	add	r0, ip
 8002274:	fba1 1203 	umull	r1, r2, r1, r3
 8002278:	1883      	adds	r3, r0, r2
 800227a:	461a      	mov	r2, r3
 800227c:	f04f 0b00 	mov.w	fp, #0
 8002280:	f04f 0c00 	mov.w	ip, #0
 8002284:	ea4f 5bd1 	mov.w	fp, r1, lsr #23
 8002288:	ea4b 2b42 	orr.w	fp, fp, r2, lsl #9
 800228c:	ea4f 5ce2 	mov.w	ip, r2, asr #23
 8002290:	f51b 63fa 	adds.w	r3, fp, #2000	; 0x7d0
 8002294:	f14c 0400 	adc.w	r4, ip, #0
 8002298:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	volatile int64_t OFF = ((int64_t) (memLoc[1]) << 17) + (((int64_t)(memLoc[3]) * dT) >> 6);
 800229c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	f04f 0400 	mov.w	r4, #0
 80022a6:	ea4f 39d3 	mov.w	r9, r3, lsr #15
 80022aa:	ea4f 4843 	mov.w	r8, r3, lsl #17
 80022ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80022b2:	b299      	uxth	r1, r3
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022ba:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80022be:	fb03 fc02 	mul.w	ip, r3, r2
 80022c2:	fb01 f004 	mul.w	r0, r1, r4
 80022c6:	4460      	add	r0, ip
 80022c8:	fba1 1203 	umull	r1, r2, r1, r3
 80022cc:	1883      	adds	r3, r0, r2
 80022ce:	461a      	mov	r2, r3
 80022d0:	f04f 0b00 	mov.w	fp, #0
 80022d4:	f04f 0c00 	mov.w	ip, #0
 80022d8:	ea4f 1b91 	mov.w	fp, r1, lsr #6
 80022dc:	ea4b 6b82 	orr.w	fp, fp, r2, lsl #26
 80022e0:	ea4f 1ca2 	mov.w	ip, r2, asr #6
 80022e4:	eb1b 0308 	adds.w	r3, fp, r8
 80022e8:	eb4c 0409 	adc.w	r4, ip, r9
 80022ec:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	volatile int64_t SENS = ((int64_t) (memLoc[0]) << 16) + (((int64_t) (memLoc[2]) * dT) >> 7);
 80022f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	f04f 0400 	mov.w	r4, #0
 80022fa:	0c1e      	lsrs	r6, r3, #16
 80022fc:	041d      	lsls	r5, r3, #16
 80022fe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002302:	b299      	uxth	r1, r3
 8002304:	f04f 0200 	mov.w	r2, #0
 8002308:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800230a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800230e:	fb03 fc02 	mul.w	ip, r3, r2
 8002312:	fb01 f004 	mul.w	r0, r1, r4
 8002316:	4460      	add	r0, ip
 8002318:	fba1 1203 	umull	r1, r2, r1, r3
 800231c:	1883      	adds	r3, r0, r2
 800231e:	461a      	mov	r2, r3
 8002320:	f04f 0800 	mov.w	r8, #0
 8002324:	f04f 0900 	mov.w	r9, #0
 8002328:	ea4f 18d1 	mov.w	r8, r1, lsr #7
 800232c:	ea48 6842 	orr.w	r8, r8, r2, lsl #25
 8002330:	ea4f 19e2 	mov.w	r9, r2, asr #7
 8002334:	eb18 0305 	adds.w	r3, r8, r5
 8002338:	eb49 0406 	adc.w	r4, r9, r6
 800233c:	e9c7 3408 	strd	r3, r4, [r7, #32]
	volatile int64_t P = ((D1*((SENS >> 21)) - OFF) >> 15);
 8002340:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002342:	4619      	mov	r1, r3
 8002344:	f04f 0200 	mov.w	r2, #0
 8002348:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 800234c:	f04f 0300 	mov.w	r3, #0
 8002350:	f04f 0400 	mov.w	r4, #0
 8002354:	0d6b      	lsrs	r3, r5, #21
 8002356:	ea43 23c6 	orr.w	r3, r3, r6, lsl #11
 800235a:	1574      	asrs	r4, r6, #21
 800235c:	fb03 f502 	mul.w	r5, r3, r2
 8002360:	fb01 f004 	mul.w	r0, r1, r4
 8002364:	4428      	add	r0, r5
 8002366:	fba1 3403 	umull	r3, r4, r1, r3
 800236a:	1902      	adds	r2, r0, r4
 800236c:	4614      	mov	r4, r2
 800236e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8002372:	1a5b      	subs	r3, r3, r1
 8002374:	eb64 0402 	sbc.w	r4, r4, r2
 8002378:	461d      	mov	r5, r3
 800237a:	4626      	mov	r6, r4
 800237c:	f04f 0300 	mov.w	r3, #0
 8002380:	f04f 0400 	mov.w	r4, #0
 8002384:	0beb      	lsrs	r3, r5, #15
 8002386:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 800238a:	13f4      	asrs	r4, r6, #15
 800238c:	e9c7 3406 	strd	r3, r4, [r7, #24]

	volatile double Tfinal = Temp / 100.0;
 8002390:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002394:	4618      	mov	r0, r3
 8002396:	4621      	mov	r1, r4
 8002398:	f7fe f980 	bl	800069c <__aeabi_l2d>
 800239c:	ec41 0b15 	vmov	d5, r0, r1
 80023a0:	ed9f 6b11 	vldr	d6, [pc, #68]	; 80023e8 <MS5607_get_data+0x368>
 80023a4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80023a8:	ed87 7b04 	vstr	d7, [r7, #16]
	altCtrl->altData.temp = Tfinal;
 80023ac:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
	volatile double Pfinal = P / 101325.0;
 80023b6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80023ba:	4618      	mov	r0, r3
 80023bc:	4621      	mov	r1, r4
 80023be:	f7fe f96d 	bl	800069c <__aeabi_l2d>
 80023c2:	ec41 0b15 	vmov	d5, r0, r1
 80023c6:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 80023f0 <MS5607_get_data+0x370>
 80023ca:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80023ce:	ed87 7b02 	vstr	d7, [r7, #8]
	altCtrl->altData.baro = Pfinal;
 80023d2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
}
 80023dc:	bf00      	nop
 80023de:	3770      	adds	r7, #112	; 0x70
 80023e0:	46bd      	mov	sp, r7
 80023e2:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 80023e6:	bf00      	nop
 80023e8:	00000000 	.word	0x00000000
 80023ec:	40590000 	.word	0x40590000
 80023f0:	00000000 	.word	0x00000000
 80023f4:	40f8bcd0 	.word	0x40f8bcd0
 80023f8:	000186a0 	.word	0x000186a0
 80023fc:	000f4240 	.word	0x000f4240

08002400 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002404:	2003      	movs	r0, #3
 8002406:	f001 f9c9 	bl	800379c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800240a:	f005 f95f 	bl	80076cc <HAL_RCC_GetSysClockFreq>
 800240e:	4601      	mov	r1, r0
 8002410:	4b13      	ldr	r3, [pc, #76]	; (8002460 <HAL_Init+0x60>)
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	0a1b      	lsrs	r3, r3, #8
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	4a12      	ldr	r2, [pc, #72]	; (8002464 <HAL_Init+0x64>)
 800241c:	5cd3      	ldrb	r3, [r2, r3]
 800241e:	f003 031f 	and.w	r3, r3, #31
 8002422:	fa21 f303 	lsr.w	r3, r1, r3
 8002426:	4a10      	ldr	r2, [pc, #64]	; (8002468 <HAL_Init+0x68>)
 8002428:	6013      	str	r3, [r2, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800242a:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <HAL_Init+0x68>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <HAL_Init+0x60>)
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	490b      	ldr	r1, [pc, #44]	; (8002464 <HAL_Init+0x64>)
 8002438:	5ccb      	ldrb	r3, [r1, r3]
 800243a:	f003 031f 	and.w	r3, r3, #31
 800243e:	fa22 f303 	lsr.w	r3, r2, r3
 8002442:	4a0a      	ldr	r2, [pc, #40]	; (800246c <HAL_Init+0x6c>)
 8002444:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002446:	2000      	movs	r0, #0
 8002448:	f000 f812 	bl	8002470 <HAL_InitTick>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_Init+0x56>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e002      	b.n	800245c <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002456:	f7ff fa2b 	bl	80018b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	bd80      	pop	{r7, pc}
 8002460:	58024400 	.word	0x58024400
 8002464:	08011cd4 	.word	0x08011cd4
 8002468:	24000000 	.word	0x24000000
 800246c:	24000004 	.word	0x24000004

08002470 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002478:	4b15      	ldr	r3, [pc, #84]	; (80024d0 <HAL_InitTick+0x60>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e021      	b.n	80024c8 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002484:	4b13      	ldr	r3, [pc, #76]	; (80024d4 <HAL_InitTick+0x64>)
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <HAL_InitTick+0x60>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	4619      	mov	r1, r3
 800248e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002492:	fbb3 f3f1 	udiv	r3, r3, r1
 8002496:	fbb2 f3f3 	udiv	r3, r2, r3
 800249a:	4618      	mov	r0, r3
 800249c:	f001 f9b1 	bl	8003802 <HAL_SYSTICK_Config>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e00e      	b.n	80024c8 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b0f      	cmp	r3, #15
 80024ae:	d80a      	bhi.n	80024c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024b0:	2200      	movs	r2, #0
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	f04f 30ff 	mov.w	r0, #4294967295
 80024b8:	f001 f97b 	bl	80037b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024bc:	4a06      	ldr	r2, [pc, #24]	; (80024d8 <HAL_InitTick+0x68>)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	e000      	b.n	80024c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	2400000c 	.word	0x2400000c
 80024d4:	24000000 	.word	0x24000000
 80024d8:	24000008 	.word	0x24000008

080024dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024e0:	4b06      	ldr	r3, [pc, #24]	; (80024fc <HAL_IncTick+0x20>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	461a      	mov	r2, r3
 80024e6:	4b06      	ldr	r3, [pc, #24]	; (8002500 <HAL_IncTick+0x24>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4413      	add	r3, r2
 80024ec:	4a04      	ldr	r2, [pc, #16]	; (8002500 <HAL_IncTick+0x24>)
 80024ee:	6013      	str	r3, [r2, #0]
}
 80024f0:	bf00      	nop
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	2400000c 	.word	0x2400000c
 8002500:	24000800 	.word	0x24000800

08002504 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return uwTick;
 8002508:	4b03      	ldr	r3, [pc, #12]	; (8002518 <HAL_GetTick+0x14>)
 800250a:	681b      	ldr	r3, [r3, #0]
}
 800250c:	4618      	mov	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	24000800 	.word	0x24000800

0800251c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002524:	f7ff ffee 	bl	8002504 <HAL_GetTick>
 8002528:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002534:	d005      	beq.n	8002542 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002536:	4b09      	ldr	r3, [pc, #36]	; (800255c <HAL_Delay+0x40>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4413      	add	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002542:	bf00      	nop
 8002544:	f7ff ffde 	bl	8002504 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	429a      	cmp	r2, r3
 8002552:	d8f7      	bhi.n	8002544 <HAL_Delay+0x28>
  {
  }
}
 8002554:	bf00      	nop
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	2400000c 	.word	0x2400000c

08002560 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002564:	4b03      	ldr	r3, [pc, #12]	; (8002574 <HAL_GetREVID+0x14>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	0c1b      	lsrs	r3, r3, #16
}
 800256a:	4618      	mov	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	5c001000 	.word	0x5c001000

08002578 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002582:	4b07      	ldr	r3, [pc, #28]	; (80025a0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	43db      	mvns	r3, r3
 800258a:	401a      	ands	r2, r3
 800258c:	4904      	ldr	r1, [pc, #16]	; (80025a0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	4313      	orrs	r3, r2
 8002592:	604b      	str	r3, [r1, #4]
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	58000400 	.word	0x58000400

080025a4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	431a      	orrs	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	609a      	str	r2, [r3, #8]
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
 80025d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	609a      	str	r2, [r3, #8]
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002600:	4618      	mov	r0, r3
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800260c:	b490      	push	{r4, r7}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
 8002618:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	3360      	adds	r3, #96	; 0x60
 800261e:	461a      	mov	r2, r3
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002628:	6823      	ldr	r3, [r4, #0]
 800262a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	430b      	orrs	r3, r1
 8002638:	4313      	orrs	r3, r2
 800263a:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800263c:	bf00      	nop
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bc90      	pop	{r4, r7}
 8002644:	4770      	bx	lr

08002646 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002646:	b480      	push	{r7}
 8002648:	b085      	sub	sp, #20
 800264a:	af00      	add	r7, sp, #0
 800264c:	60f8      	str	r0, [r7, #12]
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	f003 031f 	and.w	r3, r3, #31
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	fa01 f303 	lsl.w	r3, r1, r3
 8002666:	431a      	orrs	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	611a      	str	r2, [r3, #16]
}
 800266c:	bf00      	nop
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002678:	b490      	push	{r4, r7}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	3360      	adds	r3, #96	; 0x60
 8002688:	461a      	mov	r2, r3
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002692:	6823      	ldr	r3, [r4, #0]
 8002694:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4313      	orrs	r3, r2
 800269c:	6023      	str	r3, [r4, #0]
}
 800269e:	bf00      	nop
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc90      	pop	{r4, r7}
 80026a6:	4770      	bx	lr

080026a8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80026a8:	b490      	push	{r4, r7}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	3330      	adds	r3, #48	; 0x30
 80026b8:	461a      	mov	r2, r3
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	0a1b      	lsrs	r3, r3, #8
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	f003 030c 	and.w	r3, r3, #12
 80026c4:	4413      	add	r3, r2
 80026c6:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80026c8:	6822      	ldr	r2, [r4, #0]
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	f003 031f 	and.w	r3, r3, #31
 80026d0:	211f      	movs	r1, #31
 80026d2:	fa01 f303 	lsl.w	r3, r1, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	401a      	ands	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	0e9b      	lsrs	r3, r3, #26
 80026de:	f003 011f 	and.w	r1, r3, #31
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	f003 031f 	and.w	r3, r3, #31
 80026e8:	fa01 f303 	lsl.w	r3, r1, r3
 80026ec:	4313      	orrs	r3, r2
 80026ee:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80026f0:	bf00      	nop
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc90      	pop	{r4, r7}
 80026f8:	4770      	bx	lr

080026fa <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80026fa:	b490      	push	{r4, r7}
 80026fc:	b084      	sub	sp, #16
 80026fe:	af00      	add	r7, sp, #0
 8002700:	60f8      	str	r0, [r7, #12]
 8002702:	60b9      	str	r1, [r7, #8]
 8002704:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	3314      	adds	r3, #20
 800270a:	461a      	mov	r2, r3
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	0e5b      	lsrs	r3, r3, #25
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	4413      	add	r3, r2
 8002718:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800271a:	6822      	ldr	r2, [r4, #0]
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	0d1b      	lsrs	r3, r3, #20
 8002720:	f003 031f 	and.w	r3, r3, #31
 8002724:	2107      	movs	r1, #7
 8002726:	fa01 f303 	lsl.w	r3, r1, r3
 800272a:	43db      	mvns	r3, r3
 800272c:	401a      	ands	r2, r3
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	0d1b      	lsrs	r3, r3, #20
 8002732:	f003 031f 	and.w	r3, r3, #31
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	fa01 f303 	lsl.w	r3, r1, r3
 800273c:	4313      	orrs	r3, r2
 800273e:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002740:	bf00      	nop
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bc90      	pop	{r4, r7}
 8002748:	4770      	bx	lr
	...

0800274c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002764:	43db      	mvns	r3, r3
 8002766:	401a      	ands	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f003 0318 	and.w	r3, r3, #24
 800276e:	4908      	ldr	r1, [pc, #32]	; (8002790 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002770:	40d9      	lsrs	r1, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	400b      	ands	r3, r1
 8002776:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800277a:	431a      	orrs	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002782:	bf00      	nop
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	000fffff 	.word	0x000fffff

08002794 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	4b04      	ldr	r3, [pc, #16]	; (80027b4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80027a2:	4013      	ands	r3, r2
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6093      	str	r3, [r2, #8]
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	5fffffc0 	.word	0x5fffffc0

080027b8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027cc:	d101      	bne.n	80027d2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027ce:	2301      	movs	r3, #1
 80027d0:	e000      	b.n	80027d4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	4b05      	ldr	r3, [pc, #20]	; (8002804 <LL_ADC_EnableInternalRegulator+0x24>)
 80027ee:	4013      	ands	r3, r2
 80027f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	6fffffc0 	.word	0x6fffffc0

08002808 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002818:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800281c:	d101      	bne.n	8002822 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800281e:	2301      	movs	r3, #1
 8002820:	e000      	b.n	8002824 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b01      	cmp	r3, #1
 8002842:	d101      	bne.n	8002848 <LL_ADC_IsEnabled+0x18>
 8002844:	2301      	movs	r3, #1
 8002846:	e000      	b.n	800284a <LL_ADC_IsEnabled+0x1a>
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 0304 	and.w	r3, r3, #4
 8002866:	2b04      	cmp	r3, #4
 8002868:	d101      	bne.n	800286e <LL_ADC_REG_IsConversionOngoing+0x18>
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 0308 	and.w	r3, r3, #8
 800288c:	2b08      	cmp	r3, #8
 800288e:	d101      	bne.n	8002894 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002890:	2301      	movs	r3, #1
 8002892:	e000      	b.n	8002896 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
	...

080028a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028a4:	b590      	push	{r4, r7, lr}
 80028a6:	b089      	sub	sp, #36	; 0x24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028ac:	2300      	movs	r3, #0
 80028ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e18e      	b.n	8002bdc <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d109      	bne.n	80028e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7fe f9d1 	bl	8000c74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff ff67 	bl	80027b8 <LL_ADC_IsDeepPowerDownEnabled>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d004      	beq.n	80028fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff ff4d 	bl	8002794 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff ff82 	bl	8002808 <LL_ADC_IsInternalRegulatorEnabled>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d113      	bne.n	8002932 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff ff66 	bl	80027e0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002914:	4b9a      	ldr	r3, [pc, #616]	; (8002b80 <HAL_ADC_Init+0x2dc>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	099b      	lsrs	r3, r3, #6
 800291a:	4a9a      	ldr	r2, [pc, #616]	; (8002b84 <HAL_ADC_Init+0x2e0>)
 800291c:	fba2 2303 	umull	r2, r3, r2, r3
 8002920:	099b      	lsrs	r3, r3, #6
 8002922:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002924:	e002      	b.n	800292c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	3b01      	subs	r3, #1
 800292a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f9      	bne.n	8002926 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff ff66 	bl	8002808 <LL_ADC_IsInternalRegulatorEnabled>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10d      	bne.n	800295e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002946:	f043 0210 	orr.w	r2, r3, #16
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002952:	f043 0201 	orr.w	r2, r3, #1
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff ff77 	bl	8002856 <LL_ADC_REG_IsConversionOngoing>
 8002968:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296e:	f003 0310 	and.w	r3, r3, #16
 8002972:	2b00      	cmp	r3, #0
 8002974:	f040 8129 	bne.w	8002bca <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	2b00      	cmp	r3, #0
 800297c:	f040 8125 	bne.w	8002bca <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002984:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002988:	f043 0202 	orr.w	r2, r3, #2
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff ff4b 	bl	8002830 <LL_ADC_IsEnabled>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d136      	bne.n	8002a0e <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a78      	ldr	r2, [pc, #480]	; (8002b88 <HAL_ADC_Init+0x2e4>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d004      	beq.n	80029b4 <HAL_ADC_Init+0x110>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a77      	ldr	r2, [pc, #476]	; (8002b8c <HAL_ADC_Init+0x2e8>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d10e      	bne.n	80029d2 <HAL_ADC_Init+0x12e>
 80029b4:	4874      	ldr	r0, [pc, #464]	; (8002b88 <HAL_ADC_Init+0x2e4>)
 80029b6:	f7ff ff3b 	bl	8002830 <LL_ADC_IsEnabled>
 80029ba:	4604      	mov	r4, r0
 80029bc:	4873      	ldr	r0, [pc, #460]	; (8002b8c <HAL_ADC_Init+0x2e8>)
 80029be:	f7ff ff37 	bl	8002830 <LL_ADC_IsEnabled>
 80029c2:	4603      	mov	r3, r0
 80029c4:	4323      	orrs	r3, r4
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	bf0c      	ite	eq
 80029ca:	2301      	moveq	r3, #1
 80029cc:	2300      	movne	r3, #0
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	e008      	b.n	80029e4 <HAL_ADC_Init+0x140>
 80029d2:	486f      	ldr	r0, [pc, #444]	; (8002b90 <HAL_ADC_Init+0x2ec>)
 80029d4:	f7ff ff2c 	bl	8002830 <LL_ADC_IsEnabled>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	bf0c      	ite	eq
 80029de:	2301      	moveq	r3, #1
 80029e0:	2300      	movne	r3, #0
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d012      	beq.n	8002a0e <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a66      	ldr	r2, [pc, #408]	; (8002b88 <HAL_ADC_Init+0x2e4>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d004      	beq.n	80029fc <HAL_ADC_Init+0x158>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a65      	ldr	r2, [pc, #404]	; (8002b8c <HAL_ADC_Init+0x2e8>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d101      	bne.n	8002a00 <HAL_ADC_Init+0x15c>
 80029fc:	4a65      	ldr	r2, [pc, #404]	; (8002b94 <HAL_ADC_Init+0x2f0>)
 80029fe:	e000      	b.n	8002a02 <HAL_ADC_Init+0x15e>
 8002a00:	4a65      	ldr	r2, [pc, #404]	; (8002b98 <HAL_ADC_Init+0x2f4>)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	4619      	mov	r1, r3
 8002a08:	4610      	mov	r0, r2
 8002a0a:	f7ff fdcb 	bl	80025a4 <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002a0e:	f7ff fda7 	bl	8002560 <HAL_GetREVID>
 8002a12:	4602      	mov	r2, r0
 8002a14:	f241 0303 	movw	r3, #4099	; 0x1003
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d914      	bls.n	8002a46 <HAL_ADC_Init+0x1a2>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	2b10      	cmp	r3, #16
 8002a22:	d110      	bne.n	8002a46 <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	7d5b      	ldrb	r3, [r3, #21]
 8002a28:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a2e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002a34:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	7f1b      	ldrb	r3, [r3, #28]
 8002a3a:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002a3c:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a3e:	f043 030c 	orr.w	r3, r3, #12
 8002a42:	61bb      	str	r3, [r7, #24]
 8002a44:	e00d      	b.n	8002a62 <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	7d5b      	ldrb	r3, [r3, #21]
 8002a4a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a50:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002a56:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	7f1b      	ldrb	r3, [r3, #28]
 8002a5c:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	7f1b      	ldrb	r3, [r3, #28]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d106      	bne.n	8002a78 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	045b      	lsls	r3, r3, #17
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d009      	beq.n	8002a94 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	4b40      	ldr	r3, [pc, #256]	; (8002b9c <HAL_ADC_Init+0x2f8>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6812      	ldr	r2, [r2, #0]
 8002aa2:	69b9      	ldr	r1, [r7, #24]
 8002aa4:	430b      	orrs	r3, r1
 8002aa6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff fed2 	bl	8002856 <LL_ADC_REG_IsConversionOngoing>
 8002ab2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff fedf 	bl	800287c <LL_ADC_INJ_IsConversionOngoing>
 8002abe:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d14a      	bne.n	8002b5c <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d147      	bne.n	8002b5c <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	7d1b      	ldrb	r3, [r3, #20]
 8002ad0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	4b2f      	ldr	r3, [pc, #188]	; (8002ba0 <HAL_ADC_Init+0x2fc>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6812      	ldr	r2, [r2, #0]
 8002ae8:	69b9      	ldr	r1, [r7, #24]
 8002aea:	430b      	orrs	r3, r1
 8002aec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d11b      	bne.n	8002b30 <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afc:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	691a      	ldr	r2, [r3, #16]
 8002b04:	4b27      	ldr	r3, [pc, #156]	; (8002ba4 <HAL_ADC_Init+0x300>)
 8002b06:	4013      	ands	r3, r2
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b0c:	3a01      	subs	r2, #1
 8002b0e:	0411      	lsls	r1, r2, #16
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b14:	4311      	orrs	r1, r2
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002b1a:	4311      	orrs	r1, r2
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b20:	430a      	orrs	r2, r1
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f042 0201 	orr.w	r2, r2, #1
 8002b2c:	611a      	str	r2, [r3, #16]
 8002b2e:	e007      	b.n	8002b40 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	691a      	ldr	r2, [r3, #16]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0201 	bic.w	r2, r2, #1
 8002b3e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 fb58 	bl	800320c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d121      	bne.n	8002ba8 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	f023 010f 	bic.w	r1, r3, #15
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	1e5a      	subs	r2, r3, #1
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	631a      	str	r2, [r3, #48]	; 0x30
 8002b7c:	e01c      	b.n	8002bb8 <HAL_ADC_Init+0x314>
 8002b7e:	bf00      	nop
 8002b80:	24000000 	.word	0x24000000
 8002b84:	053e2d63 	.word	0x053e2d63
 8002b88:	40022000 	.word	0x40022000
 8002b8c:	40022100 	.word	0x40022100
 8002b90:	58026000 	.word	0x58026000
 8002b94:	40022300 	.word	0x40022300
 8002b98:	58026300 	.word	0x58026300
 8002b9c:	fff0c003 	.word	0xfff0c003
 8002ba0:	ffffbffc 	.word	0xffffbffc
 8002ba4:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 020f 	bic.w	r2, r2, #15
 8002bb6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bbc:	f023 0303 	bic.w	r3, r3, #3
 8002bc0:	f043 0201 	orr.w	r2, r3, #1
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	655a      	str	r2, [r3, #84]	; 0x54
 8002bc8:	e007      	b.n	8002bda <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bce:	f043 0210 	orr.w	r2, r3, #16
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002bda:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3724      	adds	r7, #36	; 0x24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd90      	pop	{r4, r7, pc}

08002be4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002be4:	b590      	push	{r4, r7, lr}
 8002be6:	b099      	sub	sp, #100	; 0x64
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	4a99      	ldr	r2, [pc, #612]	; (8002e64 <HAL_ADC_ConfigChannel+0x280>)
 8002bfe:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d101      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0x2a>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	e2e6      	b.n	80031dc <HAL_ADC_ConfigChannel+0x5f8>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff fe1b 	bl	8002856 <LL_ADC_REG_IsConversionOngoing>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f040 82cb 	bne.w	80031be <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d108      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x62>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	0e9b      	lsrs	r3, r3, #26
 8002c3a:	f003 031f 	and.w	r3, r3, #31
 8002c3e:	2201      	movs	r2, #1
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	e00f      	b.n	8002c66 <HAL_ADC_ConfigChannel+0x82>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c4e:	fa93 f3a3 	rbit	r3, r3
 8002c52:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c56:	fab3 f383 	clz	r3, r3
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	f003 031f 	and.w	r3, r3, #31
 8002c60:	2201      	movs	r2, #1
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6812      	ldr	r2, [r2, #0]
 8002c6a:	69d1      	ldr	r1, [r2, #28]
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6812      	ldr	r2, [r2, #0]
 8002c70:	430b      	orrs	r3, r1
 8002c72:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6818      	ldr	r0, [r3, #0]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	6859      	ldr	r1, [r3, #4]
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	461a      	mov	r2, r3
 8002c82:	f7ff fd11 	bl	80026a8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff fde3 	bl	8002856 <LL_ADC_REG_IsConversionOngoing>
 8002c90:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff fdf0 	bl	800287c <LL_ADC_INJ_IsConversionOngoing>
 8002c9c:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f040 80b3 	bne.w	8002e0c <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ca6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f040 80af 	bne.w	8002e0c <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6818      	ldr	r0, [r3, #0]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	6819      	ldr	r1, [r3, #0]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	f7ff fd1d 	bl	80026fa <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002cc0:	4b69      	ldr	r3, [pc, #420]	; (8002e68 <HAL_ADC_ConfigChannel+0x284>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002cc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ccc:	d10b      	bne.n	8002ce6 <HAL_ADC_ConfigChannel+0x102>
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	695a      	ldr	r2, [r3, #20]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	089b      	lsrs	r3, r3, #2
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	e01d      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x13e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f003 0310 	and.w	r3, r3, #16
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10b      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x128>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	695a      	ldr	r2, [r3, #20]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	089b      	lsrs	r3, r3, #2
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	e00a      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x13e>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	695a      	ldr	r2, [r3, #20]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	089b      	lsrs	r3, r3, #2
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d027      	beq.n	8002d7c <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6818      	ldr	r0, [r3, #0]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	6919      	ldr	r1, [r3, #16]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d3a:	f7ff fc67 	bl	800260c <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6818      	ldr	r0, [r3, #0]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	6919      	ldr	r1, [r3, #16]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	7e5b      	ldrb	r3, [r3, #25]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d102      	bne.n	8002d54 <HAL_ADC_ConfigChannel+0x170>
 8002d4e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002d52:	e000      	b.n	8002d56 <HAL_ADC_ConfigChannel+0x172>
 8002d54:	2300      	movs	r3, #0
 8002d56:	461a      	mov	r2, r3
 8002d58:	f7ff fc8e 	bl	8002678 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6818      	ldr	r0, [r3, #0]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	6919      	ldr	r1, [r3, #16]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	7e1b      	ldrb	r3, [r3, #24]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d102      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x18e>
 8002d6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d70:	e000      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x190>
 8002d72:	2300      	movs	r3, #0
 8002d74:	461a      	mov	r2, r3
 8002d76:	f7ff fc66 	bl	8002646 <LL_ADC_SetDataRightShift>
 8002d7a:	e047      	b.n	8002e0c <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	069b      	lsls	r3, r3, #26
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d107      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d9e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002da6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	069b      	lsls	r3, r3, #26
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d107      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002dc2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	069b      	lsls	r3, r3, #26
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d107      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002de6:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	069b      	lsls	r3, r3, #26
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d107      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e0a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff fd0d 	bl	8002830 <LL_ADC_IsEnabled>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f040 81d9 	bne.w	80031d0 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6818      	ldr	r0, [r3, #0]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	6819      	ldr	r1, [r3, #0]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	f7ff fc8e 	bl	800274c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	4a0b      	ldr	r2, [pc, #44]	; (8002e64 <HAL_ADC_ConfigChannel+0x280>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	f040 8101 	bne.w	800303e <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10f      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x288>
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	0e9b      	lsrs	r3, r3, #26
 8002e52:	3301      	adds	r3, #1
 8002e54:	f003 031f 	and.w	r3, r3, #31
 8002e58:	2b09      	cmp	r3, #9
 8002e5a:	bf94      	ite	ls
 8002e5c:	2301      	movls	r3, #1
 8002e5e:	2300      	movhi	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	e016      	b.n	8002e92 <HAL_ADC_ConfigChannel+0x2ae>
 8002e64:	47ff0000 	.word	0x47ff0000
 8002e68:	5c001000 	.word	0x5c001000
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e74:	fa93 f3a3 	rbit	r3, r3
 8002e78:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e7c:	fab3 f383 	clz	r3, r3
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	3301      	adds	r3, #1
 8002e84:	f003 031f 	and.w	r3, r3, #31
 8002e88:	2b09      	cmp	r3, #9
 8002e8a:	bf94      	ite	ls
 8002e8c:	2301      	movls	r3, #1
 8002e8e:	2300      	movhi	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d064      	beq.n	8002f60 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d107      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x2ce>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	0e9b      	lsrs	r3, r3, #26
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	069b      	lsls	r3, r3, #26
 8002eac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002eb0:	e00e      	b.n	8002ed0 <HAL_ADC_ConfigChannel+0x2ec>
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eba:	fa93 f3a3 	rbit	r3, r3
 8002ebe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec2:	fab3 f383 	clz	r3, r3
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	3301      	adds	r3, #1
 8002eca:	069b      	lsls	r3, r3, #26
 8002ecc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d109      	bne.n	8002ef0 <HAL_ADC_ConfigChannel+0x30c>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	0e9b      	lsrs	r3, r3, #26
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	f003 031f 	and.w	r3, r3, #31
 8002ee8:	2101      	movs	r1, #1
 8002eea:	fa01 f303 	lsl.w	r3, r1, r3
 8002eee:	e010      	b.n	8002f12 <HAL_ADC_ConfigChannel+0x32e>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef8:	fa93 f3a3 	rbit	r3, r3
 8002efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f00:	fab3 f383 	clz	r3, r3
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	3301      	adds	r3, #1
 8002f08:	f003 031f 	and.w	r3, r3, #31
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f12:	ea42 0103 	orr.w	r1, r2, r3
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10a      	bne.n	8002f38 <HAL_ADC_ConfigChannel+0x354>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	0e9b      	lsrs	r3, r3, #26
 8002f28:	3301      	adds	r3, #1
 8002f2a:	f003 021f 	and.w	r2, r3, #31
 8002f2e:	4613      	mov	r3, r2
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	4413      	add	r3, r2
 8002f34:	051b      	lsls	r3, r3, #20
 8002f36:	e011      	b.n	8002f5c <HAL_ADC_ConfigChannel+0x378>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f40:	fa93 f3a3 	rbit	r3, r3
 8002f44:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	fab3 f383 	clz	r3, r3
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	3301      	adds	r3, #1
 8002f50:	f003 021f 	and.w	r2, r3, #31
 8002f54:	4613      	mov	r3, r2
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	4413      	add	r3, r2
 8002f5a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f5c:	430b      	orrs	r3, r1
 8002f5e:	e069      	b.n	8003034 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d107      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x398>
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	0e9b      	lsrs	r3, r3, #26
 8002f72:	3301      	adds	r3, #1
 8002f74:	069b      	lsls	r3, r3, #26
 8002f76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f7a:	e00e      	b.n	8002f9a <HAL_ADC_ConfigChannel+0x3b6>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	fa93 f3a3 	rbit	r3, r3
 8002f88:	61fb      	str	r3, [r7, #28]
  return result;
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	fab3 f383 	clz	r3, r3
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	3301      	adds	r3, #1
 8002f94:	069b      	lsls	r3, r3, #26
 8002f96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d109      	bne.n	8002fba <HAL_ADC_ConfigChannel+0x3d6>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	0e9b      	lsrs	r3, r3, #26
 8002fac:	3301      	adds	r3, #1
 8002fae:	f003 031f 	and.w	r3, r3, #31
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb8:	e010      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x3f8>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	fa93 f3a3 	rbit	r3, r3
 8002fc6:	617b      	str	r3, [r7, #20]
  return result;
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	fab3 f383 	clz	r3, r3
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	f003 031f 	and.w	r3, r3, #31
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fdc:	ea42 0103 	orr.w	r1, r2, r3
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d10d      	bne.n	8003008 <HAL_ADC_ConfigChannel+0x424>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	0e9b      	lsrs	r3, r3, #26
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	f003 021f 	and.w	r2, r3, #31
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	4413      	add	r3, r2
 8002ffe:	3b1e      	subs	r3, #30
 8003000:	051b      	lsls	r3, r3, #20
 8003002:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003006:	e014      	b.n	8003032 <HAL_ADC_ConfigChannel+0x44e>
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	fa93 f3a3 	rbit	r3, r3
 8003014:	60fb      	str	r3, [r7, #12]
  return result;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	fab3 f383 	clz	r3, r3
 800301c:	b2db      	uxtb	r3, r3
 800301e:	3301      	adds	r3, #1
 8003020:	f003 021f 	and.w	r2, r3, #31
 8003024:	4613      	mov	r3, r2
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	4413      	add	r3, r2
 800302a:	3b1e      	subs	r3, #30
 800302c:	051b      	lsls	r3, r3, #20
 800302e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003032:	430b      	orrs	r3, r1
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	6892      	ldr	r2, [r2, #8]
 8003038:	4619      	mov	r1, r3
 800303a:	f7ff fb5e 	bl	80026fa <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	f280 80c4 	bge.w	80031d0 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a65      	ldr	r2, [pc, #404]	; (80031e4 <HAL_ADC_ConfigChannel+0x600>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d004      	beq.n	800305c <HAL_ADC_ConfigChannel+0x478>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a64      	ldr	r2, [pc, #400]	; (80031e8 <HAL_ADC_ConfigChannel+0x604>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d101      	bne.n	8003060 <HAL_ADC_ConfigChannel+0x47c>
 800305c:	4b63      	ldr	r3, [pc, #396]	; (80031ec <HAL_ADC_ConfigChannel+0x608>)
 800305e:	e000      	b.n	8003062 <HAL_ADC_ConfigChannel+0x47e>
 8003060:	4b63      	ldr	r3, [pc, #396]	; (80031f0 <HAL_ADC_ConfigChannel+0x60c>)
 8003062:	4618      	mov	r0, r3
 8003064:	f7ff fac4 	bl	80025f0 <LL_ADC_GetCommonPathInternalCh>
 8003068:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a5d      	ldr	r2, [pc, #372]	; (80031e4 <HAL_ADC_ConfigChannel+0x600>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d004      	beq.n	800307e <HAL_ADC_ConfigChannel+0x49a>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a5b      	ldr	r2, [pc, #364]	; (80031e8 <HAL_ADC_ConfigChannel+0x604>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d10e      	bne.n	800309c <HAL_ADC_ConfigChannel+0x4b8>
 800307e:	4859      	ldr	r0, [pc, #356]	; (80031e4 <HAL_ADC_ConfigChannel+0x600>)
 8003080:	f7ff fbd6 	bl	8002830 <LL_ADC_IsEnabled>
 8003084:	4604      	mov	r4, r0
 8003086:	4858      	ldr	r0, [pc, #352]	; (80031e8 <HAL_ADC_ConfigChannel+0x604>)
 8003088:	f7ff fbd2 	bl	8002830 <LL_ADC_IsEnabled>
 800308c:	4603      	mov	r3, r0
 800308e:	4323      	orrs	r3, r4
 8003090:	2b00      	cmp	r3, #0
 8003092:	bf0c      	ite	eq
 8003094:	2301      	moveq	r3, #1
 8003096:	2300      	movne	r3, #0
 8003098:	b2db      	uxtb	r3, r3
 800309a:	e008      	b.n	80030ae <HAL_ADC_ConfigChannel+0x4ca>
 800309c:	4855      	ldr	r0, [pc, #340]	; (80031f4 <HAL_ADC_ConfigChannel+0x610>)
 800309e:	f7ff fbc7 	bl	8002830 <LL_ADC_IsEnabled>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	bf0c      	ite	eq
 80030a8:	2301      	moveq	r3, #1
 80030aa:	2300      	movne	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d07b      	beq.n	80031aa <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a50      	ldr	r2, [pc, #320]	; (80031f8 <HAL_ADC_ConfigChannel+0x614>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d12e      	bne.n	800311a <HAL_ADC_ConfigChannel+0x536>
 80030bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d129      	bne.n	800311a <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a4a      	ldr	r2, [pc, #296]	; (80031f4 <HAL_ADC_ConfigChannel+0x610>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d17f      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a43      	ldr	r2, [pc, #268]	; (80031e4 <HAL_ADC_ConfigChannel+0x600>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d004      	beq.n	80030e4 <HAL_ADC_ConfigChannel+0x500>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a42      	ldr	r2, [pc, #264]	; (80031e8 <HAL_ADC_ConfigChannel+0x604>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d101      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x504>
 80030e4:	4a41      	ldr	r2, [pc, #260]	; (80031ec <HAL_ADC_ConfigChannel+0x608>)
 80030e6:	e000      	b.n	80030ea <HAL_ADC_ConfigChannel+0x506>
 80030e8:	4a41      	ldr	r2, [pc, #260]	; (80031f0 <HAL_ADC_ConfigChannel+0x60c>)
 80030ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030f0:	4619      	mov	r1, r3
 80030f2:	4610      	mov	r0, r2
 80030f4:	f7ff fa69 	bl	80025ca <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80030f8:	4b40      	ldr	r3, [pc, #256]	; (80031fc <HAL_ADC_ConfigChannel+0x618>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	099b      	lsrs	r3, r3, #6
 80030fe:	4a40      	ldr	r2, [pc, #256]	; (8003200 <HAL_ADC_ConfigChannel+0x61c>)
 8003100:	fba2 2303 	umull	r2, r3, r2, r3
 8003104:	099b      	lsrs	r3, r3, #6
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 800310a:	e002      	b.n	8003112 <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	3b01      	subs	r3, #1
 8003110:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1f9      	bne.n	800310c <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003118:	e05a      	b.n	80031d0 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a39      	ldr	r2, [pc, #228]	; (8003204 <HAL_ADC_ConfigChannel+0x620>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d11e      	bne.n	8003162 <HAL_ADC_ConfigChannel+0x57e>
 8003124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003126:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d119      	bne.n	8003162 <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a30      	ldr	r2, [pc, #192]	; (80031f4 <HAL_ADC_ConfigChannel+0x610>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d14b      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a29      	ldr	r2, [pc, #164]	; (80031e4 <HAL_ADC_ConfigChannel+0x600>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d004      	beq.n	800314c <HAL_ADC_ConfigChannel+0x568>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a28      	ldr	r2, [pc, #160]	; (80031e8 <HAL_ADC_ConfigChannel+0x604>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d101      	bne.n	8003150 <HAL_ADC_ConfigChannel+0x56c>
 800314c:	4a27      	ldr	r2, [pc, #156]	; (80031ec <HAL_ADC_ConfigChannel+0x608>)
 800314e:	e000      	b.n	8003152 <HAL_ADC_ConfigChannel+0x56e>
 8003150:	4a27      	ldr	r2, [pc, #156]	; (80031f0 <HAL_ADC_ConfigChannel+0x60c>)
 8003152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003154:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003158:	4619      	mov	r1, r3
 800315a:	4610      	mov	r0, r2
 800315c:	f7ff fa35 	bl	80025ca <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003160:	e036      	b.n	80031d0 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a28      	ldr	r2, [pc, #160]	; (8003208 <HAL_ADC_ConfigChannel+0x624>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d131      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x5ec>
 800316c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800316e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d12c      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a1e      	ldr	r2, [pc, #120]	; (80031f4 <HAL_ADC_ConfigChannel+0x610>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d127      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a17      	ldr	r2, [pc, #92]	; (80031e4 <HAL_ADC_ConfigChannel+0x600>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d004      	beq.n	8003194 <HAL_ADC_ConfigChannel+0x5b0>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a16      	ldr	r2, [pc, #88]	; (80031e8 <HAL_ADC_ConfigChannel+0x604>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d101      	bne.n	8003198 <HAL_ADC_ConfigChannel+0x5b4>
 8003194:	4a15      	ldr	r2, [pc, #84]	; (80031ec <HAL_ADC_ConfigChannel+0x608>)
 8003196:	e000      	b.n	800319a <HAL_ADC_ConfigChannel+0x5b6>
 8003198:	4a15      	ldr	r2, [pc, #84]	; (80031f0 <HAL_ADC_ConfigChannel+0x60c>)
 800319a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800319c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031a0:	4619      	mov	r1, r3
 80031a2:	4610      	mov	r0, r2
 80031a4:	f7ff fa11 	bl	80025ca <LL_ADC_SetCommonPathInternalCh>
 80031a8:	e012      	b.n	80031d0 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ae:	f043 0220 	orr.w	r2, r3, #32
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80031bc:	e008      	b.n	80031d0 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c2:	f043 0220 	orr.w	r2, r3, #32
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80031d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3764      	adds	r7, #100	; 0x64
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd90      	pop	{r4, r7, pc}
 80031e4:	40022000 	.word	0x40022000
 80031e8:	40022100 	.word	0x40022100
 80031ec:	40022300 	.word	0x40022300
 80031f0:	58026300 	.word	0x58026300
 80031f4:	58026000 	.word	0x58026000
 80031f8:	cb840000 	.word	0xcb840000
 80031fc:	24000000 	.word	0x24000000
 8003200:	053e2d63 	.word	0x053e2d63
 8003204:	c7520000 	.word	0xc7520000
 8003208:	cfb80000 	.word	0xcfb80000

0800320c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a70      	ldr	r2, [pc, #448]	; (80033dc <ADC_ConfigureBoostMode+0x1d0>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d004      	beq.n	8003228 <ADC_ConfigureBoostMode+0x1c>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a6f      	ldr	r2, [pc, #444]	; (80033e0 <ADC_ConfigureBoostMode+0x1d4>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d109      	bne.n	800323c <ADC_ConfigureBoostMode+0x30>
 8003228:	4b6e      	ldr	r3, [pc, #440]	; (80033e4 <ADC_ConfigureBoostMode+0x1d8>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003230:	2b00      	cmp	r3, #0
 8003232:	bf14      	ite	ne
 8003234:	2301      	movne	r3, #1
 8003236:	2300      	moveq	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	e008      	b.n	800324e <ADC_ConfigureBoostMode+0x42>
 800323c:	4b6a      	ldr	r3, [pc, #424]	; (80033e8 <ADC_ConfigureBoostMode+0x1dc>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003244:	2b00      	cmp	r3, #0
 8003246:	bf14      	ite	ne
 8003248:	2301      	movne	r3, #1
 800324a:	2300      	moveq	r3, #0
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d01a      	beq.n	8003288 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003252:	f004 fbad 	bl	80079b0 <HAL_RCC_GetHCLKFreq>
 8003256:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003260:	d006      	beq.n	8003270 <ADC_ConfigureBoostMode+0x64>
 8003262:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003266:	d00b      	beq.n	8003280 <ADC_ConfigureBoostMode+0x74>
 8003268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800326c:	d000      	beq.n	8003270 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 800326e:	e05d      	b.n	800332c <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	0c1b      	lsrs	r3, r3, #16
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	fbb2 f3f3 	udiv	r3, r2, r3
 800327c:	60fb      	str	r3, [r7, #12]
        break;
 800327e:	e055      	b.n	800332c <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	089b      	lsrs	r3, r3, #2
 8003284:	60fb      	str	r3, [r7, #12]
        break;
 8003286:	e051      	b.n	800332c <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003288:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800328c:	f005 fad2 	bl	8008834 <HAL_RCCEx_GetPeriphCLKFreq>
 8003290:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800329a:	d02a      	beq.n	80032f2 <ADC_ConfigureBoostMode+0xe6>
 800329c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80032a0:	d813      	bhi.n	80032ca <ADC_ConfigureBoostMode+0xbe>
 80032a2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80032a6:	d024      	beq.n	80032f2 <ADC_ConfigureBoostMode+0xe6>
 80032a8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80032ac:	d806      	bhi.n	80032bc <ADC_ConfigureBoostMode+0xb0>
 80032ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032b2:	d01e      	beq.n	80032f2 <ADC_ConfigureBoostMode+0xe6>
 80032b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80032b8:	d01b      	beq.n	80032f2 <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 80032ba:	e037      	b.n	800332c <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80032bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032c0:	d017      	beq.n	80032f2 <ADC_ConfigureBoostMode+0xe6>
 80032c2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80032c6:	d014      	beq.n	80032f2 <ADC_ConfigureBoostMode+0xe6>
        break;
 80032c8:	e030      	b.n	800332c <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80032ca:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80032ce:	d021      	beq.n	8003314 <ADC_ConfigureBoostMode+0x108>
 80032d0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80032d4:	d806      	bhi.n	80032e4 <ADC_ConfigureBoostMode+0xd8>
 80032d6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80032da:	d013      	beq.n	8003304 <ADC_ConfigureBoostMode+0xf8>
 80032dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032e0:	d014      	beq.n	800330c <ADC_ConfigureBoostMode+0x100>
        break;
 80032e2:	e023      	b.n	800332c <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80032e4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80032e8:	d018      	beq.n	800331c <ADC_ConfigureBoostMode+0x110>
 80032ea:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80032ee:	d019      	beq.n	8003324 <ADC_ConfigureBoostMode+0x118>
        break;
 80032f0:	e01c      	b.n	800332c <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	0c9b      	lsrs	r3, r3, #18
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003300:	60fb      	str	r3, [r7, #12]
        break;
 8003302:	e013      	b.n	800332c <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	091b      	lsrs	r3, r3, #4
 8003308:	60fb      	str	r3, [r7, #12]
      break;
 800330a:	e00f      	b.n	800332c <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	095b      	lsrs	r3, r3, #5
 8003310:	60fb      	str	r3, [r7, #12]
        break;
 8003312:	e00b      	b.n	800332c <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	099b      	lsrs	r3, r3, #6
 8003318:	60fb      	str	r3, [r7, #12]
        break;
 800331a:	e007      	b.n	800332c <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	09db      	lsrs	r3, r3, #7
 8003320:	60fb      	str	r3, [r7, #12]
        break;
 8003322:	e003      	b.n	800332c <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	0a1b      	lsrs	r3, r3, #8
 8003328:	60fb      	str	r3, [r7, #12]
        break;
 800332a:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800332c:	f7ff f918 	bl	8002560 <HAL_GetREVID>
 8003330:	4602      	mov	r2, r0
 8003332:	f241 0303 	movw	r3, #4099	; 0x1003
 8003336:	429a      	cmp	r2, r3
 8003338:	d815      	bhi.n	8003366 <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	4a2b      	ldr	r2, [pc, #172]	; (80033ec <ADC_ConfigureBoostMode+0x1e0>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d908      	bls.n	8003354 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003350:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003352:	e03e      	b.n	80033d2 <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689a      	ldr	r2, [r3, #8]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003362:	609a      	str	r2, [r3, #8]
}
 8003364:	e035      	b.n	80033d2 <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	085b      	lsrs	r3, r3, #1
 800336a:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4a20      	ldr	r2, [pc, #128]	; (80033f0 <ADC_ConfigureBoostMode+0x1e4>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d808      	bhi.n	8003386 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003382:	609a      	str	r2, [r3, #8]
}
 8003384:	e025      	b.n	80033d2 <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	4a1a      	ldr	r2, [pc, #104]	; (80033f4 <ADC_ConfigureBoostMode+0x1e8>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d80a      	bhi.n	80033a4 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033a0:	609a      	str	r2, [r3, #8]
}
 80033a2:	e016      	b.n	80033d2 <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4a14      	ldr	r2, [pc, #80]	; (80033f8 <ADC_ConfigureBoostMode+0x1ec>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d80a      	bhi.n	80033c2 <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033be:	609a      	str	r2, [r3, #8]
}
 80033c0:	e007      	b.n	80033d2 <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80033d0:	609a      	str	r2, [r3, #8]
}
 80033d2:	bf00      	nop
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40022000 	.word	0x40022000
 80033e0:	40022100 	.word	0x40022100
 80033e4:	40022300 	.word	0x40022300
 80033e8:	58026300 	.word	0x58026300
 80033ec:	01312d00 	.word	0x01312d00
 80033f0:	005f5e10 	.word	0x005f5e10
 80033f4:	00bebc20 	.word	0x00bebc20
 80033f8:	017d7840 	.word	0x017d7840

080033fc <LL_ADC_IsEnabled>:
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b01      	cmp	r3, #1
 800340e:	d101      	bne.n	8003414 <LL_ADC_IsEnabled+0x18>
 8003410:	2301      	movs	r3, #1
 8003412:	e000      	b.n	8003416 <LL_ADC_IsEnabled+0x1a>
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <LL_ADC_REG_IsConversionOngoing>:
{
 8003422:	b480      	push	{r7}
 8003424:	b083      	sub	sp, #12
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 0304 	and.w	r3, r3, #4
 8003432:	2b04      	cmp	r3, #4
 8003434:	d101      	bne.n	800343a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003436:	2301      	movs	r3, #1
 8003438:	e000      	b.n	800343c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003448:	b590      	push	{r4, r7, lr}
 800344a:	b09f      	sub	sp, #124	; 0x7c
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003452:	2300      	movs	r3, #0
 8003454:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800345e:	2b01      	cmp	r3, #1
 8003460:	d101      	bne.n	8003466 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003462:	2302      	movs	r3, #2
 8003464:	e0ba      	b.n	80035dc <HAL_ADCEx_MultiModeConfigChannel+0x194>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a5c      	ldr	r2, [pc, #368]	; (80035e4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d102      	bne.n	800347e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003478:	4b5b      	ldr	r3, [pc, #364]	; (80035e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800347a:	60bb      	str	r3, [r7, #8]
 800347c:	e001      	b.n	8003482 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800347e:	2300      	movs	r3, #0
 8003480:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10b      	bne.n	80034a0 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348c:	f043 0220 	orr.w	r2, r3, #32
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e09d      	b.n	80035dc <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff ffbd 	bl	8003422 <LL_ADC_REG_IsConversionOngoing>
 80034a8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff ffb7 	bl	8003422 <LL_ADC_REG_IsConversionOngoing>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d17f      	bne.n	80035ba <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80034ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d17c      	bne.n	80035ba <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a47      	ldr	r2, [pc, #284]	; (80035e4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d004      	beq.n	80034d4 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a46      	ldr	r2, [pc, #280]	; (80035e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d101      	bne.n	80034d8 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 80034d4:	4b45      	ldr	r3, [pc, #276]	; (80035ec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80034d6:	e000      	b.n	80034da <HAL_ADCEx_MultiModeConfigChannel+0x92>
 80034d8:	4b45      	ldr	r3, [pc, #276]	; (80035f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80034da:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d039      	beq.n	8003558 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80034e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	431a      	orrs	r2, r3
 80034f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a3a      	ldr	r2, [pc, #232]	; (80035e4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d004      	beq.n	800350a <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a38      	ldr	r2, [pc, #224]	; (80035e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d10e      	bne.n	8003528 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800350a:	4836      	ldr	r0, [pc, #216]	; (80035e4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800350c:	f7ff ff76 	bl	80033fc <LL_ADC_IsEnabled>
 8003510:	4604      	mov	r4, r0
 8003512:	4835      	ldr	r0, [pc, #212]	; (80035e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003514:	f7ff ff72 	bl	80033fc <LL_ADC_IsEnabled>
 8003518:	4603      	mov	r3, r0
 800351a:	4323      	orrs	r3, r4
 800351c:	2b00      	cmp	r3, #0
 800351e:	bf0c      	ite	eq
 8003520:	2301      	moveq	r3, #1
 8003522:	2300      	movne	r3, #0
 8003524:	b2db      	uxtb	r3, r3
 8003526:	e008      	b.n	800353a <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8003528:	4832      	ldr	r0, [pc, #200]	; (80035f4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800352a:	f7ff ff67 	bl	80033fc <LL_ADC_IsEnabled>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	bf0c      	ite	eq
 8003534:	2301      	moveq	r3, #1
 8003536:	2300      	movne	r3, #0
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d047      	beq.n	80035ce <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800353e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	4b2d      	ldr	r3, [pc, #180]	; (80035f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003544:	4013      	ands	r3, r2
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	6811      	ldr	r1, [r2, #0]
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	6892      	ldr	r2, [r2, #8]
 800354e:	430a      	orrs	r2, r1
 8003550:	431a      	orrs	r2, r3
 8003552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003554:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003556:	e03a      	b.n	80035ce <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003562:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a1e      	ldr	r2, [pc, #120]	; (80035e4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d004      	beq.n	8003578 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a1d      	ldr	r2, [pc, #116]	; (80035e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d10e      	bne.n	8003596 <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8003578:	481a      	ldr	r0, [pc, #104]	; (80035e4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800357a:	f7ff ff3f 	bl	80033fc <LL_ADC_IsEnabled>
 800357e:	4604      	mov	r4, r0
 8003580:	4819      	ldr	r0, [pc, #100]	; (80035e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003582:	f7ff ff3b 	bl	80033fc <LL_ADC_IsEnabled>
 8003586:	4603      	mov	r3, r0
 8003588:	4323      	orrs	r3, r4
 800358a:	2b00      	cmp	r3, #0
 800358c:	bf0c      	ite	eq
 800358e:	2301      	moveq	r3, #1
 8003590:	2300      	movne	r3, #0
 8003592:	b2db      	uxtb	r3, r3
 8003594:	e008      	b.n	80035a8 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 8003596:	4817      	ldr	r0, [pc, #92]	; (80035f4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003598:	f7ff ff30 	bl	80033fc <LL_ADC_IsEnabled>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	bf0c      	ite	eq
 80035a2:	2301      	moveq	r3, #1
 80035a4:	2300      	movne	r3, #0
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d010      	beq.n	80035ce <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80035ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	4b11      	ldr	r3, [pc, #68]	; (80035f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80035b2:	4013      	ands	r3, r2
 80035b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80035b6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035b8:	e009      	b.n	80035ce <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035be:	f043 0220 	orr.w	r2, r3, #32
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80035cc:	e000      	b.n	80035d0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035ce:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80035d8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80035dc:	4618      	mov	r0, r3
 80035de:	377c      	adds	r7, #124	; 0x7c
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd90      	pop	{r4, r7, pc}
 80035e4:	40022000 	.word	0x40022000
 80035e8:	40022100 	.word	0x40022100
 80035ec:	40022300 	.word	0x40022300
 80035f0:	58026300 	.word	0x58026300
 80035f4:	58026000 	.word	0x58026000
 80035f8:	fffff0e0 	.word	0xfffff0e0

080035fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800360c:	4b0b      	ldr	r3, [pc, #44]	; (800363c <__NVIC_SetPriorityGrouping+0x40>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003612:	68ba      	ldr	r2, [r7, #8]
 8003614:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003618:	4013      	ands	r3, r2
 800361a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003624:	4b06      	ldr	r3, [pc, #24]	; (8003640 <__NVIC_SetPriorityGrouping+0x44>)
 8003626:	4313      	orrs	r3, r2
 8003628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800362a:	4a04      	ldr	r2, [pc, #16]	; (800363c <__NVIC_SetPriorityGrouping+0x40>)
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	60d3      	str	r3, [r2, #12]
}
 8003630:	bf00      	nop
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	e000ed00 	.word	0xe000ed00
 8003640:	05fa0000 	.word	0x05fa0000

08003644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003648:	4b04      	ldr	r3, [pc, #16]	; (800365c <__NVIC_GetPriorityGrouping+0x18>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	0a1b      	lsrs	r3, r3, #8
 800364e:	f003 0307 	and.w	r3, r3, #7
}
 8003652:	4618      	mov	r0, r3
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	e000ed00 	.word	0xe000ed00

08003660 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	4603      	mov	r3, r0
 8003668:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800366a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800366e:	2b00      	cmp	r3, #0
 8003670:	db0b      	blt.n	800368a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003672:	88fb      	ldrh	r3, [r7, #6]
 8003674:	f003 021f 	and.w	r2, r3, #31
 8003678:	4907      	ldr	r1, [pc, #28]	; (8003698 <__NVIC_EnableIRQ+0x38>)
 800367a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800367e:	095b      	lsrs	r3, r3, #5
 8003680:	2001      	movs	r0, #1
 8003682:	fa00 f202 	lsl.w	r2, r0, r2
 8003686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	e000e100 	.word	0xe000e100

0800369c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	4603      	mov	r3, r0
 80036a4:	6039      	str	r1, [r7, #0]
 80036a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80036a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	db0a      	blt.n	80036c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	490c      	ldr	r1, [pc, #48]	; (80036e8 <__NVIC_SetPriority+0x4c>)
 80036b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036ba:	0112      	lsls	r2, r2, #4
 80036bc:	b2d2      	uxtb	r2, r2
 80036be:	440b      	add	r3, r1
 80036c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036c4:	e00a      	b.n	80036dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	b2da      	uxtb	r2, r3
 80036ca:	4908      	ldr	r1, [pc, #32]	; (80036ec <__NVIC_SetPriority+0x50>)
 80036cc:	88fb      	ldrh	r3, [r7, #6]
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	3b04      	subs	r3, #4
 80036d4:	0112      	lsls	r2, r2, #4
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	440b      	add	r3, r1
 80036da:	761a      	strb	r2, [r3, #24]
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	e000e100 	.word	0xe000e100
 80036ec:	e000ed00 	.word	0xe000ed00

080036f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b089      	sub	sp, #36	; 0x24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	f1c3 0307 	rsb	r3, r3, #7
 800370a:	2b04      	cmp	r3, #4
 800370c:	bf28      	it	cs
 800370e:	2304      	movcs	r3, #4
 8003710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	3304      	adds	r3, #4
 8003716:	2b06      	cmp	r3, #6
 8003718:	d902      	bls.n	8003720 <NVIC_EncodePriority+0x30>
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	3b03      	subs	r3, #3
 800371e:	e000      	b.n	8003722 <NVIC_EncodePriority+0x32>
 8003720:	2300      	movs	r3, #0
 8003722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003724:	f04f 32ff 	mov.w	r2, #4294967295
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	43da      	mvns	r2, r3
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	401a      	ands	r2, r3
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003738:	f04f 31ff 	mov.w	r1, #4294967295
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	fa01 f303 	lsl.w	r3, r1, r3
 8003742:	43d9      	mvns	r1, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003748:	4313      	orrs	r3, r2
         );
}
 800374a:	4618      	mov	r0, r3
 800374c:	3724      	adds	r7, #36	; 0x24
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
	...

08003758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3b01      	subs	r3, #1
 8003764:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003768:	d301      	bcc.n	800376e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800376a:	2301      	movs	r3, #1
 800376c:	e00f      	b.n	800378e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800376e:	4a0a      	ldr	r2, [pc, #40]	; (8003798 <SysTick_Config+0x40>)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3b01      	subs	r3, #1
 8003774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003776:	210f      	movs	r1, #15
 8003778:	f04f 30ff 	mov.w	r0, #4294967295
 800377c:	f7ff ff8e 	bl	800369c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003780:	4b05      	ldr	r3, [pc, #20]	; (8003798 <SysTick_Config+0x40>)
 8003782:	2200      	movs	r2, #0
 8003784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003786:	4b04      	ldr	r3, [pc, #16]	; (8003798 <SysTick_Config+0x40>)
 8003788:	2207      	movs	r2, #7
 800378a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	e000e010 	.word	0xe000e010

0800379c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7ff ff29 	bl	80035fc <__NVIC_SetPriorityGrouping>
}
 80037aa:	bf00      	nop
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b086      	sub	sp, #24
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	4603      	mov	r3, r0
 80037ba:	60b9      	str	r1, [r7, #8]
 80037bc:	607a      	str	r2, [r7, #4]
 80037be:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037c0:	f7ff ff40 	bl	8003644 <__NVIC_GetPriorityGrouping>
 80037c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	68b9      	ldr	r1, [r7, #8]
 80037ca:	6978      	ldr	r0, [r7, #20]
 80037cc:	f7ff ff90 	bl	80036f0 <NVIC_EncodePriority>
 80037d0:	4602      	mov	r2, r0
 80037d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037d6:	4611      	mov	r1, r2
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff ff5f 	bl	800369c <__NVIC_SetPriority>
}
 80037de:	bf00      	nop
 80037e0:	3718      	adds	r7, #24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b082      	sub	sp, #8
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	4603      	mov	r3, r0
 80037ee:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff ff33 	bl	8003660 <__NVIC_EnableIRQ>
}
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b082      	sub	sp, #8
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7ff ffa4 	bl	8003758 <SysTick_Config>
 8003810:	4603      	mov	r3, r0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
	...

0800381c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003824:	f7fe fe6e 	bl	8002504 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e2e5      	b.n	8003e00 <HAL_DMA_Init+0x5e4>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a66      	ldr	r2, [pc, #408]	; (80039d4 <HAL_DMA_Init+0x1b8>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d04a      	beq.n	80038d4 <HAL_DMA_Init+0xb8>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a65      	ldr	r2, [pc, #404]	; (80039d8 <HAL_DMA_Init+0x1bc>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d045      	beq.n	80038d4 <HAL_DMA_Init+0xb8>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a63      	ldr	r2, [pc, #396]	; (80039dc <HAL_DMA_Init+0x1c0>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d040      	beq.n	80038d4 <HAL_DMA_Init+0xb8>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a62      	ldr	r2, [pc, #392]	; (80039e0 <HAL_DMA_Init+0x1c4>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d03b      	beq.n	80038d4 <HAL_DMA_Init+0xb8>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a60      	ldr	r2, [pc, #384]	; (80039e4 <HAL_DMA_Init+0x1c8>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d036      	beq.n	80038d4 <HAL_DMA_Init+0xb8>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a5f      	ldr	r2, [pc, #380]	; (80039e8 <HAL_DMA_Init+0x1cc>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d031      	beq.n	80038d4 <HAL_DMA_Init+0xb8>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a5d      	ldr	r2, [pc, #372]	; (80039ec <HAL_DMA_Init+0x1d0>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d02c      	beq.n	80038d4 <HAL_DMA_Init+0xb8>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a5c      	ldr	r2, [pc, #368]	; (80039f0 <HAL_DMA_Init+0x1d4>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d027      	beq.n	80038d4 <HAL_DMA_Init+0xb8>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a5a      	ldr	r2, [pc, #360]	; (80039f4 <HAL_DMA_Init+0x1d8>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d022      	beq.n	80038d4 <HAL_DMA_Init+0xb8>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a59      	ldr	r2, [pc, #356]	; (80039f8 <HAL_DMA_Init+0x1dc>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d01d      	beq.n	80038d4 <HAL_DMA_Init+0xb8>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a57      	ldr	r2, [pc, #348]	; (80039fc <HAL_DMA_Init+0x1e0>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d018      	beq.n	80038d4 <HAL_DMA_Init+0xb8>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a56      	ldr	r2, [pc, #344]	; (8003a00 <HAL_DMA_Init+0x1e4>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d013      	beq.n	80038d4 <HAL_DMA_Init+0xb8>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a54      	ldr	r2, [pc, #336]	; (8003a04 <HAL_DMA_Init+0x1e8>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d00e      	beq.n	80038d4 <HAL_DMA_Init+0xb8>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a53      	ldr	r2, [pc, #332]	; (8003a08 <HAL_DMA_Init+0x1ec>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d009      	beq.n	80038d4 <HAL_DMA_Init+0xb8>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a51      	ldr	r2, [pc, #324]	; (8003a0c <HAL_DMA_Init+0x1f0>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d004      	beq.n	80038d4 <HAL_DMA_Init+0xb8>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a50      	ldr	r2, [pc, #320]	; (8003a10 <HAL_DMA_Init+0x1f4>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d101      	bne.n	80038d8 <HAL_DMA_Init+0xbc>
 80038d4:	2301      	movs	r3, #1
 80038d6:	e000      	b.n	80038da <HAL_DMA_Init+0xbe>
 80038d8:	2300      	movs	r3, #0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 810b 	beq.w	8003af6 <HAL_DMA_Init+0x2da>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2202      	movs	r2, #2
 80038ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a37      	ldr	r2, [pc, #220]	; (80039d4 <HAL_DMA_Init+0x1b8>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d04a      	beq.n	8003990 <HAL_DMA_Init+0x174>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a36      	ldr	r2, [pc, #216]	; (80039d8 <HAL_DMA_Init+0x1bc>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d045      	beq.n	8003990 <HAL_DMA_Init+0x174>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a34      	ldr	r2, [pc, #208]	; (80039dc <HAL_DMA_Init+0x1c0>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d040      	beq.n	8003990 <HAL_DMA_Init+0x174>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a33      	ldr	r2, [pc, #204]	; (80039e0 <HAL_DMA_Init+0x1c4>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d03b      	beq.n	8003990 <HAL_DMA_Init+0x174>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a31      	ldr	r2, [pc, #196]	; (80039e4 <HAL_DMA_Init+0x1c8>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d036      	beq.n	8003990 <HAL_DMA_Init+0x174>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a30      	ldr	r2, [pc, #192]	; (80039e8 <HAL_DMA_Init+0x1cc>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d031      	beq.n	8003990 <HAL_DMA_Init+0x174>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a2e      	ldr	r2, [pc, #184]	; (80039ec <HAL_DMA_Init+0x1d0>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d02c      	beq.n	8003990 <HAL_DMA_Init+0x174>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a2d      	ldr	r2, [pc, #180]	; (80039f0 <HAL_DMA_Init+0x1d4>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d027      	beq.n	8003990 <HAL_DMA_Init+0x174>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a2b      	ldr	r2, [pc, #172]	; (80039f4 <HAL_DMA_Init+0x1d8>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d022      	beq.n	8003990 <HAL_DMA_Init+0x174>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a2a      	ldr	r2, [pc, #168]	; (80039f8 <HAL_DMA_Init+0x1dc>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d01d      	beq.n	8003990 <HAL_DMA_Init+0x174>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a28      	ldr	r2, [pc, #160]	; (80039fc <HAL_DMA_Init+0x1e0>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d018      	beq.n	8003990 <HAL_DMA_Init+0x174>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a27      	ldr	r2, [pc, #156]	; (8003a00 <HAL_DMA_Init+0x1e4>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d013      	beq.n	8003990 <HAL_DMA_Init+0x174>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a25      	ldr	r2, [pc, #148]	; (8003a04 <HAL_DMA_Init+0x1e8>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d00e      	beq.n	8003990 <HAL_DMA_Init+0x174>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a24      	ldr	r2, [pc, #144]	; (8003a08 <HAL_DMA_Init+0x1ec>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d009      	beq.n	8003990 <HAL_DMA_Init+0x174>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a22      	ldr	r2, [pc, #136]	; (8003a0c <HAL_DMA_Init+0x1f0>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d004      	beq.n	8003990 <HAL_DMA_Init+0x174>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a21      	ldr	r2, [pc, #132]	; (8003a10 <HAL_DMA_Init+0x1f4>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d108      	bne.n	80039a2 <HAL_DMA_Init+0x186>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0201 	bic.w	r2, r2, #1
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	e007      	b.n	80039b2 <HAL_DMA_Init+0x196>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0201 	bic.w	r2, r2, #1
 80039b0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80039b2:	e02f      	b.n	8003a14 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039b4:	f7fe fda6 	bl	8002504 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b05      	cmp	r3, #5
 80039c0:	d928      	bls.n	8003a14 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2220      	movs	r2, #32
 80039c6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2203      	movs	r2, #3
 80039cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e215      	b.n	8003e00 <HAL_DMA_Init+0x5e4>
 80039d4:	40020010 	.word	0x40020010
 80039d8:	40020028 	.word	0x40020028
 80039dc:	40020040 	.word	0x40020040
 80039e0:	40020058 	.word	0x40020058
 80039e4:	40020070 	.word	0x40020070
 80039e8:	40020088 	.word	0x40020088
 80039ec:	400200a0 	.word	0x400200a0
 80039f0:	400200b8 	.word	0x400200b8
 80039f4:	40020410 	.word	0x40020410
 80039f8:	40020428 	.word	0x40020428
 80039fc:	40020440 	.word	0x40020440
 8003a00:	40020458 	.word	0x40020458
 8003a04:	40020470 	.word	0x40020470
 8003a08:	40020488 	.word	0x40020488
 8003a0c:	400204a0 	.word	0x400204a0
 8003a10:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1c8      	bne.n	80039b4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	4b8c      	ldr	r3, [pc, #560]	; (8003c60 <HAL_DMA_Init+0x444>)
 8003a2e:	4013      	ands	r3, r2
 8003a30:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003a3a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a46:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a52:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	2b04      	cmp	r3, #4
 8003a66:	d107      	bne.n	8003a78 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a70:	4313      	orrs	r3, r2
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]
    }

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	f023 0307 	bic.w	r3, r3, #7
 8003a8e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d117      	bne.n	8003ad2 <HAL_DMA_Init+0x2b6>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00e      	beq.n	8003ad2 <HAL_DMA_Init+0x2b6>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f001 f9b3 	bl	8004e20 <DMA_CheckFifoParam>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d008      	beq.n	8003ad2 <HAL_DMA_Init+0x2b6>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2240      	movs	r2, #64	; 0x40
 8003ac4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e196      	b.n	8003e00 <HAL_DMA_Init+0x5e4>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f001 f8ee 	bl	8004cbc <DMA_CalcBaseAndBitshift>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae8:	f003 031f 	and.w	r3, r3, #31
 8003aec:	223f      	movs	r2, #63	; 0x3f
 8003aee:	409a      	lsls	r2, r3
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	609a      	str	r2, [r3, #8]
 8003af4:	e0cc      	b.n	8003c90 <HAL_DMA_Init+0x474>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a5a      	ldr	r2, [pc, #360]	; (8003c64 <HAL_DMA_Init+0x448>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d022      	beq.n	8003b46 <HAL_DMA_Init+0x32a>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a58      	ldr	r2, [pc, #352]	; (8003c68 <HAL_DMA_Init+0x44c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d01d      	beq.n	8003b46 <HAL_DMA_Init+0x32a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a57      	ldr	r2, [pc, #348]	; (8003c6c <HAL_DMA_Init+0x450>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d018      	beq.n	8003b46 <HAL_DMA_Init+0x32a>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a55      	ldr	r2, [pc, #340]	; (8003c70 <HAL_DMA_Init+0x454>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d013      	beq.n	8003b46 <HAL_DMA_Init+0x32a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a54      	ldr	r2, [pc, #336]	; (8003c74 <HAL_DMA_Init+0x458>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d00e      	beq.n	8003b46 <HAL_DMA_Init+0x32a>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a52      	ldr	r2, [pc, #328]	; (8003c78 <HAL_DMA_Init+0x45c>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d009      	beq.n	8003b46 <HAL_DMA_Init+0x32a>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a51      	ldr	r2, [pc, #324]	; (8003c7c <HAL_DMA_Init+0x460>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d004      	beq.n	8003b46 <HAL_DMA_Init+0x32a>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a4f      	ldr	r2, [pc, #316]	; (8003c80 <HAL_DMA_Init+0x464>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d101      	bne.n	8003b4a <HAL_DMA_Init+0x32e>
 8003b46:	2301      	movs	r3, #1
 8003b48:	e000      	b.n	8003b4c <HAL_DMA_Init+0x330>
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d07e      	beq.n	8003c4e <HAL_DMA_Init+0x432>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a43      	ldr	r2, [pc, #268]	; (8003c64 <HAL_DMA_Init+0x448>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d021      	beq.n	8003b9e <HAL_DMA_Init+0x382>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a42      	ldr	r2, [pc, #264]	; (8003c68 <HAL_DMA_Init+0x44c>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d01c      	beq.n	8003b9e <HAL_DMA_Init+0x382>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a40      	ldr	r2, [pc, #256]	; (8003c6c <HAL_DMA_Init+0x450>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d017      	beq.n	8003b9e <HAL_DMA_Init+0x382>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a3f      	ldr	r2, [pc, #252]	; (8003c70 <HAL_DMA_Init+0x454>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d012      	beq.n	8003b9e <HAL_DMA_Init+0x382>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a3d      	ldr	r2, [pc, #244]	; (8003c74 <HAL_DMA_Init+0x458>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d00d      	beq.n	8003b9e <HAL_DMA_Init+0x382>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a3c      	ldr	r2, [pc, #240]	; (8003c78 <HAL_DMA_Init+0x45c>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d008      	beq.n	8003b9e <HAL_DMA_Init+0x382>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a3a      	ldr	r2, [pc, #232]	; (8003c7c <HAL_DMA_Init+0x460>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d003      	beq.n	8003b9e <HAL_DMA_Init+0x382>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a39      	ldr	r2, [pc, #228]	; (8003c80 <HAL_DMA_Init+0x464>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2202      	movs	r2, #2
 8003bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	4b32      	ldr	r3, [pc, #200]	; (8003c84 <HAL_DMA_Init+0x468>)
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	2b40      	cmp	r3, #64	; 0x40
 8003bc6:	d008      	beq.n	8003bda <HAL_DMA_Init+0x3be>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	2b80      	cmp	r3, #128	; 0x80
 8003bce:	d102      	bne.n	8003bd6 <HAL_DMA_Init+0x3ba>
 8003bd0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003bd4:	e002      	b.n	8003bdc <HAL_DMA_Init+0x3c0>
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	e000      	b.n	8003bdc <HAL_DMA_Init+0x3c0>
 8003bda:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	68d2      	ldr	r2, [r2, #12]
 8003be0:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003be2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003bea:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003bf2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003bfa:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003c02:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003c0a:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	461a      	mov	r2, r3
 8003c20:	4b19      	ldr	r3, [pc, #100]	; (8003c88 <HAL_DMA_Init+0x46c>)
 8003c22:	4413      	add	r3, r2
 8003c24:	4a19      	ldr	r2, [pc, #100]	; (8003c8c <HAL_DMA_Init+0x470>)
 8003c26:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2a:	091b      	lsrs	r3, r3, #4
 8003c2c:	009a      	lsls	r2, r3, #2
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f001 f842 	bl	8004cbc <DMA_CalcBaseAndBitshift>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c40:	f003 031f 	and.w	r3, r3, #31
 8003c44:	2201      	movs	r2, #1
 8003c46:	409a      	lsls	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	605a      	str	r2, [r3, #4]
 8003c4c:	e020      	b.n	8003c90 <HAL_DMA_Init+0x474>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2240      	movs	r2, #64	; 0x40
 8003c52:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2203      	movs	r2, #3
 8003c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e0cf      	b.n	8003e00 <HAL_DMA_Init+0x5e4>
 8003c60:	fe10803f 	.word	0xfe10803f
 8003c64:	58025408 	.word	0x58025408
 8003c68:	5802541c 	.word	0x5802541c
 8003c6c:	58025430 	.word	0x58025430
 8003c70:	58025444 	.word	0x58025444
 8003c74:	58025458 	.word	0x58025458
 8003c78:	5802546c 	.word	0x5802546c
 8003c7c:	58025480 	.word	0x58025480
 8003c80:	58025494 	.word	0x58025494
 8003c84:	fffe000f 	.word	0xfffe000f
 8003c88:	a7fdabf8 	.word	0xa7fdabf8
 8003c8c:	cccccccd 	.word	0xcccccccd
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a5c      	ldr	r2, [pc, #368]	; (8003e08 <HAL_DMA_Init+0x5ec>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d072      	beq.n	8003d80 <HAL_DMA_Init+0x564>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a5b      	ldr	r2, [pc, #364]	; (8003e0c <HAL_DMA_Init+0x5f0>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d06d      	beq.n	8003d80 <HAL_DMA_Init+0x564>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a59      	ldr	r2, [pc, #356]	; (8003e10 <HAL_DMA_Init+0x5f4>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d068      	beq.n	8003d80 <HAL_DMA_Init+0x564>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a58      	ldr	r2, [pc, #352]	; (8003e14 <HAL_DMA_Init+0x5f8>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d063      	beq.n	8003d80 <HAL_DMA_Init+0x564>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a56      	ldr	r2, [pc, #344]	; (8003e18 <HAL_DMA_Init+0x5fc>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d05e      	beq.n	8003d80 <HAL_DMA_Init+0x564>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a55      	ldr	r2, [pc, #340]	; (8003e1c <HAL_DMA_Init+0x600>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d059      	beq.n	8003d80 <HAL_DMA_Init+0x564>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a53      	ldr	r2, [pc, #332]	; (8003e20 <HAL_DMA_Init+0x604>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d054      	beq.n	8003d80 <HAL_DMA_Init+0x564>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a52      	ldr	r2, [pc, #328]	; (8003e24 <HAL_DMA_Init+0x608>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d04f      	beq.n	8003d80 <HAL_DMA_Init+0x564>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a50      	ldr	r2, [pc, #320]	; (8003e28 <HAL_DMA_Init+0x60c>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d04a      	beq.n	8003d80 <HAL_DMA_Init+0x564>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a4f      	ldr	r2, [pc, #316]	; (8003e2c <HAL_DMA_Init+0x610>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d045      	beq.n	8003d80 <HAL_DMA_Init+0x564>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a4d      	ldr	r2, [pc, #308]	; (8003e30 <HAL_DMA_Init+0x614>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d040      	beq.n	8003d80 <HAL_DMA_Init+0x564>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a4c      	ldr	r2, [pc, #304]	; (8003e34 <HAL_DMA_Init+0x618>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d03b      	beq.n	8003d80 <HAL_DMA_Init+0x564>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a4a      	ldr	r2, [pc, #296]	; (8003e38 <HAL_DMA_Init+0x61c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d036      	beq.n	8003d80 <HAL_DMA_Init+0x564>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a49      	ldr	r2, [pc, #292]	; (8003e3c <HAL_DMA_Init+0x620>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d031      	beq.n	8003d80 <HAL_DMA_Init+0x564>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a47      	ldr	r2, [pc, #284]	; (8003e40 <HAL_DMA_Init+0x624>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d02c      	beq.n	8003d80 <HAL_DMA_Init+0x564>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a46      	ldr	r2, [pc, #280]	; (8003e44 <HAL_DMA_Init+0x628>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d027      	beq.n	8003d80 <HAL_DMA_Init+0x564>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a44      	ldr	r2, [pc, #272]	; (8003e48 <HAL_DMA_Init+0x62c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d022      	beq.n	8003d80 <HAL_DMA_Init+0x564>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a43      	ldr	r2, [pc, #268]	; (8003e4c <HAL_DMA_Init+0x630>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d01d      	beq.n	8003d80 <HAL_DMA_Init+0x564>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a41      	ldr	r2, [pc, #260]	; (8003e50 <HAL_DMA_Init+0x634>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d018      	beq.n	8003d80 <HAL_DMA_Init+0x564>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a40      	ldr	r2, [pc, #256]	; (8003e54 <HAL_DMA_Init+0x638>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d013      	beq.n	8003d80 <HAL_DMA_Init+0x564>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a3e      	ldr	r2, [pc, #248]	; (8003e58 <HAL_DMA_Init+0x63c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d00e      	beq.n	8003d80 <HAL_DMA_Init+0x564>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a3d      	ldr	r2, [pc, #244]	; (8003e5c <HAL_DMA_Init+0x640>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d009      	beq.n	8003d80 <HAL_DMA_Init+0x564>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a3b      	ldr	r2, [pc, #236]	; (8003e60 <HAL_DMA_Init+0x644>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d004      	beq.n	8003d80 <HAL_DMA_Init+0x564>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a3a      	ldr	r2, [pc, #232]	; (8003e64 <HAL_DMA_Init+0x648>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d101      	bne.n	8003d84 <HAL_DMA_Init+0x568>
 8003d80:	2301      	movs	r3, #1
 8003d82:	e000      	b.n	8003d86 <HAL_DMA_Init+0x56a>
 8003d84:	2300      	movs	r3, #0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d032      	beq.n	8003df0 <HAL_DMA_Init+0x5d4>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f001 f8c4 	bl	8004f18 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	2b80      	cmp	r3, #128	; 0x80
 8003d96:	d102      	bne.n	8003d9e <HAL_DMA_Init+0x582>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003db2:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d010      	beq.n	8003dde <HAL_DMA_Init+0x5c2>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	2b08      	cmp	r3, #8
 8003dc2:	d80c      	bhi.n	8003dde <HAL_DMA_Init+0x5c2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f001 f941 	bl	800504c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dce:	2200      	movs	r2, #0
 8003dd0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003dda:	605a      	str	r2, [r3, #4]
 8003ddc:	e008      	b.n	8003df0 <HAL_DMA_Init+0x5d4>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3718      	adds	r7, #24
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40020010 	.word	0x40020010
 8003e0c:	40020028 	.word	0x40020028
 8003e10:	40020040 	.word	0x40020040
 8003e14:	40020058 	.word	0x40020058
 8003e18:	40020070 	.word	0x40020070
 8003e1c:	40020088 	.word	0x40020088
 8003e20:	400200a0 	.word	0x400200a0
 8003e24:	400200b8 	.word	0x400200b8
 8003e28:	40020410 	.word	0x40020410
 8003e2c:	40020428 	.word	0x40020428
 8003e30:	40020440 	.word	0x40020440
 8003e34:	40020458 	.word	0x40020458
 8003e38:	40020470 	.word	0x40020470
 8003e3c:	40020488 	.word	0x40020488
 8003e40:	400204a0 	.word	0x400204a0
 8003e44:	400204b8 	.word	0x400204b8
 8003e48:	58025408 	.word	0x58025408
 8003e4c:	5802541c 	.word	0x5802541c
 8003e50:	58025430 	.word	0x58025430
 8003e54:	58025444 	.word	0x58025444
 8003e58:	58025458 	.word	0x58025458
 8003e5c:	5802546c 	.word	0x5802546c
 8003e60:	58025480 	.word	0x58025480
 8003e64:	58025494 	.word	0x58025494

08003e68 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b08a      	sub	sp, #40	; 0x28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e74:	4b67      	ldr	r3, [pc, #412]	; (8004014 <HAL_DMA_IRQHandler+0x1ac>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a67      	ldr	r2, [pc, #412]	; (8004018 <HAL_DMA_IRQHandler+0x1b0>)
 8003e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7e:	0a9b      	lsrs	r3, r3, #10
 8003e80:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e86:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003e8e:	6a3b      	ldr	r3, [r7, #32]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a5f      	ldr	r2, [pc, #380]	; (800401c <HAL_DMA_IRQHandler+0x1b4>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d04a      	beq.n	8003f3a <HAL_DMA_IRQHandler+0xd2>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a5d      	ldr	r2, [pc, #372]	; (8004020 <HAL_DMA_IRQHandler+0x1b8>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d045      	beq.n	8003f3a <HAL_DMA_IRQHandler+0xd2>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a5c      	ldr	r2, [pc, #368]	; (8004024 <HAL_DMA_IRQHandler+0x1bc>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d040      	beq.n	8003f3a <HAL_DMA_IRQHandler+0xd2>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a5a      	ldr	r2, [pc, #360]	; (8004028 <HAL_DMA_IRQHandler+0x1c0>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d03b      	beq.n	8003f3a <HAL_DMA_IRQHandler+0xd2>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a59      	ldr	r2, [pc, #356]	; (800402c <HAL_DMA_IRQHandler+0x1c4>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d036      	beq.n	8003f3a <HAL_DMA_IRQHandler+0xd2>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a57      	ldr	r2, [pc, #348]	; (8004030 <HAL_DMA_IRQHandler+0x1c8>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d031      	beq.n	8003f3a <HAL_DMA_IRQHandler+0xd2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a56      	ldr	r2, [pc, #344]	; (8004034 <HAL_DMA_IRQHandler+0x1cc>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d02c      	beq.n	8003f3a <HAL_DMA_IRQHandler+0xd2>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a54      	ldr	r2, [pc, #336]	; (8004038 <HAL_DMA_IRQHandler+0x1d0>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d027      	beq.n	8003f3a <HAL_DMA_IRQHandler+0xd2>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a53      	ldr	r2, [pc, #332]	; (800403c <HAL_DMA_IRQHandler+0x1d4>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d022      	beq.n	8003f3a <HAL_DMA_IRQHandler+0xd2>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a51      	ldr	r2, [pc, #324]	; (8004040 <HAL_DMA_IRQHandler+0x1d8>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d01d      	beq.n	8003f3a <HAL_DMA_IRQHandler+0xd2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a50      	ldr	r2, [pc, #320]	; (8004044 <HAL_DMA_IRQHandler+0x1dc>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d018      	beq.n	8003f3a <HAL_DMA_IRQHandler+0xd2>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a4e      	ldr	r2, [pc, #312]	; (8004048 <HAL_DMA_IRQHandler+0x1e0>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d013      	beq.n	8003f3a <HAL_DMA_IRQHandler+0xd2>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a4d      	ldr	r2, [pc, #308]	; (800404c <HAL_DMA_IRQHandler+0x1e4>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d00e      	beq.n	8003f3a <HAL_DMA_IRQHandler+0xd2>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a4b      	ldr	r2, [pc, #300]	; (8004050 <HAL_DMA_IRQHandler+0x1e8>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d009      	beq.n	8003f3a <HAL_DMA_IRQHandler+0xd2>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a4a      	ldr	r2, [pc, #296]	; (8004054 <HAL_DMA_IRQHandler+0x1ec>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d004      	beq.n	8003f3a <HAL_DMA_IRQHandler+0xd2>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a48      	ldr	r2, [pc, #288]	; (8004058 <HAL_DMA_IRQHandler+0x1f0>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d101      	bne.n	8003f3e <HAL_DMA_IRQHandler+0xd6>
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e000      	b.n	8003f40 <HAL_DMA_IRQHandler+0xd8>
 8003f3e:	2300      	movs	r3, #0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 842b 	beq.w	800479c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4a:	f003 031f 	and.w	r3, r3, #31
 8003f4e:	2208      	movs	r2, #8
 8003f50:	409a      	lsls	r2, r3
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	4013      	ands	r3, r2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 80a2 	beq.w	80040a0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a2e      	ldr	r2, [pc, #184]	; (800401c <HAL_DMA_IRQHandler+0x1b4>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d04a      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x194>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a2d      	ldr	r2, [pc, #180]	; (8004020 <HAL_DMA_IRQHandler+0x1b8>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d045      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x194>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a2b      	ldr	r2, [pc, #172]	; (8004024 <HAL_DMA_IRQHandler+0x1bc>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d040      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x194>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a2a      	ldr	r2, [pc, #168]	; (8004028 <HAL_DMA_IRQHandler+0x1c0>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d03b      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x194>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a28      	ldr	r2, [pc, #160]	; (800402c <HAL_DMA_IRQHandler+0x1c4>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d036      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x194>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a27      	ldr	r2, [pc, #156]	; (8004030 <HAL_DMA_IRQHandler+0x1c8>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d031      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x194>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a25      	ldr	r2, [pc, #148]	; (8004034 <HAL_DMA_IRQHandler+0x1cc>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d02c      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x194>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a24      	ldr	r2, [pc, #144]	; (8004038 <HAL_DMA_IRQHandler+0x1d0>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d027      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x194>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a22      	ldr	r2, [pc, #136]	; (800403c <HAL_DMA_IRQHandler+0x1d4>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d022      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x194>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a21      	ldr	r2, [pc, #132]	; (8004040 <HAL_DMA_IRQHandler+0x1d8>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d01d      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x194>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a1f      	ldr	r2, [pc, #124]	; (8004044 <HAL_DMA_IRQHandler+0x1dc>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d018      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x194>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a1e      	ldr	r2, [pc, #120]	; (8004048 <HAL_DMA_IRQHandler+0x1e0>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d013      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x194>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a1c      	ldr	r2, [pc, #112]	; (800404c <HAL_DMA_IRQHandler+0x1e4>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d00e      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x194>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a1b      	ldr	r2, [pc, #108]	; (8004050 <HAL_DMA_IRQHandler+0x1e8>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d009      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x194>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a19      	ldr	r2, [pc, #100]	; (8004054 <HAL_DMA_IRQHandler+0x1ec>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d004      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x194>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a18      	ldr	r2, [pc, #96]	; (8004058 <HAL_DMA_IRQHandler+0x1f0>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d12f      	bne.n	800405c <HAL_DMA_IRQHandler+0x1f4>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0304 	and.w	r3, r3, #4
 8004006:	2b00      	cmp	r3, #0
 8004008:	bf14      	ite	ne
 800400a:	2301      	movne	r3, #1
 800400c:	2300      	moveq	r3, #0
 800400e:	b2db      	uxtb	r3, r3
 8004010:	e02e      	b.n	8004070 <HAL_DMA_IRQHandler+0x208>
 8004012:	bf00      	nop
 8004014:	24000000 	.word	0x24000000
 8004018:	1b4e81b5 	.word	0x1b4e81b5
 800401c:	40020010 	.word	0x40020010
 8004020:	40020028 	.word	0x40020028
 8004024:	40020040 	.word	0x40020040
 8004028:	40020058 	.word	0x40020058
 800402c:	40020070 	.word	0x40020070
 8004030:	40020088 	.word	0x40020088
 8004034:	400200a0 	.word	0x400200a0
 8004038:	400200b8 	.word	0x400200b8
 800403c:	40020410 	.word	0x40020410
 8004040:	40020428 	.word	0x40020428
 8004044:	40020440 	.word	0x40020440
 8004048:	40020458 	.word	0x40020458
 800404c:	40020470 	.word	0x40020470
 8004050:	40020488 	.word	0x40020488
 8004054:	400204a0 	.word	0x400204a0
 8004058:	400204b8 	.word	0x400204b8
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0308 	and.w	r3, r3, #8
 8004066:	2b00      	cmp	r3, #0
 8004068:	bf14      	ite	ne
 800406a:	2301      	movne	r3, #1
 800406c:	2300      	moveq	r3, #0
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	d015      	beq.n	80040a0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 0204 	bic.w	r2, r2, #4
 8004082:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004088:	f003 031f 	and.w	r3, r3, #31
 800408c:	2208      	movs	r2, #8
 800408e:	409a      	lsls	r2, r3
 8004090:	6a3b      	ldr	r3, [r7, #32]
 8004092:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004098:	f043 0201 	orr.w	r2, r3, #1
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a4:	f003 031f 	and.w	r3, r3, #31
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	fa22 f303 	lsr.w	r3, r2, r3
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d06e      	beq.n	8004194 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a69      	ldr	r2, [pc, #420]	; (8004260 <HAL_DMA_IRQHandler+0x3f8>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d04a      	beq.n	8004156 <HAL_DMA_IRQHandler+0x2ee>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a67      	ldr	r2, [pc, #412]	; (8004264 <HAL_DMA_IRQHandler+0x3fc>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d045      	beq.n	8004156 <HAL_DMA_IRQHandler+0x2ee>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a66      	ldr	r2, [pc, #408]	; (8004268 <HAL_DMA_IRQHandler+0x400>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d040      	beq.n	8004156 <HAL_DMA_IRQHandler+0x2ee>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a64      	ldr	r2, [pc, #400]	; (800426c <HAL_DMA_IRQHandler+0x404>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d03b      	beq.n	8004156 <HAL_DMA_IRQHandler+0x2ee>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a63      	ldr	r2, [pc, #396]	; (8004270 <HAL_DMA_IRQHandler+0x408>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d036      	beq.n	8004156 <HAL_DMA_IRQHandler+0x2ee>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a61      	ldr	r2, [pc, #388]	; (8004274 <HAL_DMA_IRQHandler+0x40c>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d031      	beq.n	8004156 <HAL_DMA_IRQHandler+0x2ee>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a60      	ldr	r2, [pc, #384]	; (8004278 <HAL_DMA_IRQHandler+0x410>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d02c      	beq.n	8004156 <HAL_DMA_IRQHandler+0x2ee>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a5e      	ldr	r2, [pc, #376]	; (800427c <HAL_DMA_IRQHandler+0x414>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d027      	beq.n	8004156 <HAL_DMA_IRQHandler+0x2ee>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a5d      	ldr	r2, [pc, #372]	; (8004280 <HAL_DMA_IRQHandler+0x418>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d022      	beq.n	8004156 <HAL_DMA_IRQHandler+0x2ee>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a5b      	ldr	r2, [pc, #364]	; (8004284 <HAL_DMA_IRQHandler+0x41c>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d01d      	beq.n	8004156 <HAL_DMA_IRQHandler+0x2ee>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a5a      	ldr	r2, [pc, #360]	; (8004288 <HAL_DMA_IRQHandler+0x420>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d018      	beq.n	8004156 <HAL_DMA_IRQHandler+0x2ee>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a58      	ldr	r2, [pc, #352]	; (800428c <HAL_DMA_IRQHandler+0x424>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d013      	beq.n	8004156 <HAL_DMA_IRQHandler+0x2ee>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a57      	ldr	r2, [pc, #348]	; (8004290 <HAL_DMA_IRQHandler+0x428>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d00e      	beq.n	8004156 <HAL_DMA_IRQHandler+0x2ee>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a55      	ldr	r2, [pc, #340]	; (8004294 <HAL_DMA_IRQHandler+0x42c>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d009      	beq.n	8004156 <HAL_DMA_IRQHandler+0x2ee>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a54      	ldr	r2, [pc, #336]	; (8004298 <HAL_DMA_IRQHandler+0x430>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d004      	beq.n	8004156 <HAL_DMA_IRQHandler+0x2ee>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a52      	ldr	r2, [pc, #328]	; (800429c <HAL_DMA_IRQHandler+0x434>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d10a      	bne.n	800416c <HAL_DMA_IRQHandler+0x304>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004160:	2b00      	cmp	r3, #0
 8004162:	bf14      	ite	ne
 8004164:	2301      	movne	r3, #1
 8004166:	2300      	moveq	r3, #0
 8004168:	b2db      	uxtb	r3, r3
 800416a:	e003      	b.n	8004174 <HAL_DMA_IRQHandler+0x30c>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2300      	movs	r3, #0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00d      	beq.n	8004194 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800417c:	f003 031f 	and.w	r3, r3, #31
 8004180:	2201      	movs	r2, #1
 8004182:	409a      	lsls	r2, r3
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418c:	f043 0202 	orr.w	r2, r3, #2
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004198:	f003 031f 	and.w	r3, r3, #31
 800419c:	2204      	movs	r2, #4
 800419e:	409a      	lsls	r2, r3
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	4013      	ands	r3, r2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 808f 	beq.w	80042c8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a2c      	ldr	r2, [pc, #176]	; (8004260 <HAL_DMA_IRQHandler+0x3f8>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d04a      	beq.n	800424a <HAL_DMA_IRQHandler+0x3e2>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a2a      	ldr	r2, [pc, #168]	; (8004264 <HAL_DMA_IRQHandler+0x3fc>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d045      	beq.n	800424a <HAL_DMA_IRQHandler+0x3e2>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a29      	ldr	r2, [pc, #164]	; (8004268 <HAL_DMA_IRQHandler+0x400>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d040      	beq.n	800424a <HAL_DMA_IRQHandler+0x3e2>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a27      	ldr	r2, [pc, #156]	; (800426c <HAL_DMA_IRQHandler+0x404>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d03b      	beq.n	800424a <HAL_DMA_IRQHandler+0x3e2>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a26      	ldr	r2, [pc, #152]	; (8004270 <HAL_DMA_IRQHandler+0x408>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d036      	beq.n	800424a <HAL_DMA_IRQHandler+0x3e2>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a24      	ldr	r2, [pc, #144]	; (8004274 <HAL_DMA_IRQHandler+0x40c>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d031      	beq.n	800424a <HAL_DMA_IRQHandler+0x3e2>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a23      	ldr	r2, [pc, #140]	; (8004278 <HAL_DMA_IRQHandler+0x410>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d02c      	beq.n	800424a <HAL_DMA_IRQHandler+0x3e2>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a21      	ldr	r2, [pc, #132]	; (800427c <HAL_DMA_IRQHandler+0x414>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d027      	beq.n	800424a <HAL_DMA_IRQHandler+0x3e2>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a20      	ldr	r2, [pc, #128]	; (8004280 <HAL_DMA_IRQHandler+0x418>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d022      	beq.n	800424a <HAL_DMA_IRQHandler+0x3e2>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a1e      	ldr	r2, [pc, #120]	; (8004284 <HAL_DMA_IRQHandler+0x41c>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d01d      	beq.n	800424a <HAL_DMA_IRQHandler+0x3e2>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a1d      	ldr	r2, [pc, #116]	; (8004288 <HAL_DMA_IRQHandler+0x420>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d018      	beq.n	800424a <HAL_DMA_IRQHandler+0x3e2>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a1b      	ldr	r2, [pc, #108]	; (800428c <HAL_DMA_IRQHandler+0x424>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d013      	beq.n	800424a <HAL_DMA_IRQHandler+0x3e2>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a1a      	ldr	r2, [pc, #104]	; (8004290 <HAL_DMA_IRQHandler+0x428>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d00e      	beq.n	800424a <HAL_DMA_IRQHandler+0x3e2>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a18      	ldr	r2, [pc, #96]	; (8004294 <HAL_DMA_IRQHandler+0x42c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d009      	beq.n	800424a <HAL_DMA_IRQHandler+0x3e2>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a17      	ldr	r2, [pc, #92]	; (8004298 <HAL_DMA_IRQHandler+0x430>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d004      	beq.n	800424a <HAL_DMA_IRQHandler+0x3e2>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a15      	ldr	r2, [pc, #84]	; (800429c <HAL_DMA_IRQHandler+0x434>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d12a      	bne.n	80042a0 <HAL_DMA_IRQHandler+0x438>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	bf14      	ite	ne
 8004258:	2301      	movne	r3, #1
 800425a:	2300      	moveq	r3, #0
 800425c:	b2db      	uxtb	r3, r3
 800425e:	e023      	b.n	80042a8 <HAL_DMA_IRQHandler+0x440>
 8004260:	40020010 	.word	0x40020010
 8004264:	40020028 	.word	0x40020028
 8004268:	40020040 	.word	0x40020040
 800426c:	40020058 	.word	0x40020058
 8004270:	40020070 	.word	0x40020070
 8004274:	40020088 	.word	0x40020088
 8004278:	400200a0 	.word	0x400200a0
 800427c:	400200b8 	.word	0x400200b8
 8004280:	40020410 	.word	0x40020410
 8004284:	40020428 	.word	0x40020428
 8004288:	40020440 	.word	0x40020440
 800428c:	40020458 	.word	0x40020458
 8004290:	40020470 	.word	0x40020470
 8004294:	40020488 	.word	0x40020488
 8004298:	400204a0 	.word	0x400204a0
 800429c:	400204b8 	.word	0x400204b8
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2300      	movs	r3, #0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00d      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b0:	f003 031f 	and.w	r3, r3, #31
 80042b4:	2204      	movs	r2, #4
 80042b6:	409a      	lsls	r2, r3
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c0:	f043 0204 	orr.w	r2, r3, #4
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042cc:	f003 031f 	and.w	r3, r3, #31
 80042d0:	2210      	movs	r2, #16
 80042d2:	409a      	lsls	r2, r3
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	4013      	ands	r3, r2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 80a6 	beq.w	800442a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a85      	ldr	r2, [pc, #532]	; (80044f8 <HAL_DMA_IRQHandler+0x690>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d04a      	beq.n	800437e <HAL_DMA_IRQHandler+0x516>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a83      	ldr	r2, [pc, #524]	; (80044fc <HAL_DMA_IRQHandler+0x694>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d045      	beq.n	800437e <HAL_DMA_IRQHandler+0x516>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a82      	ldr	r2, [pc, #520]	; (8004500 <HAL_DMA_IRQHandler+0x698>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d040      	beq.n	800437e <HAL_DMA_IRQHandler+0x516>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a80      	ldr	r2, [pc, #512]	; (8004504 <HAL_DMA_IRQHandler+0x69c>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d03b      	beq.n	800437e <HAL_DMA_IRQHandler+0x516>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a7f      	ldr	r2, [pc, #508]	; (8004508 <HAL_DMA_IRQHandler+0x6a0>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d036      	beq.n	800437e <HAL_DMA_IRQHandler+0x516>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a7d      	ldr	r2, [pc, #500]	; (800450c <HAL_DMA_IRQHandler+0x6a4>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d031      	beq.n	800437e <HAL_DMA_IRQHandler+0x516>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a7c      	ldr	r2, [pc, #496]	; (8004510 <HAL_DMA_IRQHandler+0x6a8>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d02c      	beq.n	800437e <HAL_DMA_IRQHandler+0x516>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a7a      	ldr	r2, [pc, #488]	; (8004514 <HAL_DMA_IRQHandler+0x6ac>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d027      	beq.n	800437e <HAL_DMA_IRQHandler+0x516>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a79      	ldr	r2, [pc, #484]	; (8004518 <HAL_DMA_IRQHandler+0x6b0>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d022      	beq.n	800437e <HAL_DMA_IRQHandler+0x516>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a77      	ldr	r2, [pc, #476]	; (800451c <HAL_DMA_IRQHandler+0x6b4>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d01d      	beq.n	800437e <HAL_DMA_IRQHandler+0x516>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a76      	ldr	r2, [pc, #472]	; (8004520 <HAL_DMA_IRQHandler+0x6b8>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d018      	beq.n	800437e <HAL_DMA_IRQHandler+0x516>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a74      	ldr	r2, [pc, #464]	; (8004524 <HAL_DMA_IRQHandler+0x6bc>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d013      	beq.n	800437e <HAL_DMA_IRQHandler+0x516>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a73      	ldr	r2, [pc, #460]	; (8004528 <HAL_DMA_IRQHandler+0x6c0>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d00e      	beq.n	800437e <HAL_DMA_IRQHandler+0x516>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a71      	ldr	r2, [pc, #452]	; (800452c <HAL_DMA_IRQHandler+0x6c4>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d009      	beq.n	800437e <HAL_DMA_IRQHandler+0x516>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a70      	ldr	r2, [pc, #448]	; (8004530 <HAL_DMA_IRQHandler+0x6c8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d004      	beq.n	800437e <HAL_DMA_IRQHandler+0x516>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a6e      	ldr	r2, [pc, #440]	; (8004534 <HAL_DMA_IRQHandler+0x6cc>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d10a      	bne.n	8004394 <HAL_DMA_IRQHandler+0x52c>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0308 	and.w	r3, r3, #8
 8004388:	2b00      	cmp	r3, #0
 800438a:	bf14      	ite	ne
 800438c:	2301      	movne	r3, #1
 800438e:	2300      	moveq	r3, #0
 8004390:	b2db      	uxtb	r3, r3
 8004392:	e009      	b.n	80043a8 <HAL_DMA_IRQHandler+0x540>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0304 	and.w	r3, r3, #4
 800439e:	2b00      	cmp	r3, #0
 80043a0:	bf14      	ite	ne
 80043a2:	2301      	movne	r3, #1
 80043a4:	2300      	moveq	r3, #0
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d03e      	beq.n	800442a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b0:	f003 031f 	and.w	r3, r3, #31
 80043b4:	2210      	movs	r2, #16
 80043b6:	409a      	lsls	r2, r3
 80043b8:	6a3b      	ldr	r3, [r7, #32]
 80043ba:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d018      	beq.n	80043fc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d108      	bne.n	80043ea <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d024      	beq.n	800442a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	4798      	blx	r3
 80043e8:	e01f      	b.n	800442a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d01b      	beq.n	800442a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	4798      	blx	r3
 80043fa:	e016      	b.n	800442a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004406:	2b00      	cmp	r3, #0
 8004408:	d107      	bne.n	800441a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 0208 	bic.w	r2, r2, #8
 8004418:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800442e:	f003 031f 	and.w	r3, r3, #31
 8004432:	2220      	movs	r2, #32
 8004434:	409a      	lsls	r2, r3
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	4013      	ands	r3, r2
 800443a:	2b00      	cmp	r3, #0
 800443c:	f000 8110 	beq.w	8004660 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a2c      	ldr	r2, [pc, #176]	; (80044f8 <HAL_DMA_IRQHandler+0x690>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d04a      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x678>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a2b      	ldr	r2, [pc, #172]	; (80044fc <HAL_DMA_IRQHandler+0x694>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d045      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x678>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a29      	ldr	r2, [pc, #164]	; (8004500 <HAL_DMA_IRQHandler+0x698>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d040      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x678>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a28      	ldr	r2, [pc, #160]	; (8004504 <HAL_DMA_IRQHandler+0x69c>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d03b      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x678>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a26      	ldr	r2, [pc, #152]	; (8004508 <HAL_DMA_IRQHandler+0x6a0>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d036      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x678>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a25      	ldr	r2, [pc, #148]	; (800450c <HAL_DMA_IRQHandler+0x6a4>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d031      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x678>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a23      	ldr	r2, [pc, #140]	; (8004510 <HAL_DMA_IRQHandler+0x6a8>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d02c      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x678>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a22      	ldr	r2, [pc, #136]	; (8004514 <HAL_DMA_IRQHandler+0x6ac>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d027      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x678>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a20      	ldr	r2, [pc, #128]	; (8004518 <HAL_DMA_IRQHandler+0x6b0>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d022      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x678>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a1f      	ldr	r2, [pc, #124]	; (800451c <HAL_DMA_IRQHandler+0x6b4>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d01d      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x678>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a1d      	ldr	r2, [pc, #116]	; (8004520 <HAL_DMA_IRQHandler+0x6b8>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d018      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x678>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a1c      	ldr	r2, [pc, #112]	; (8004524 <HAL_DMA_IRQHandler+0x6bc>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d013      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x678>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a1a      	ldr	r2, [pc, #104]	; (8004528 <HAL_DMA_IRQHandler+0x6c0>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d00e      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x678>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a19      	ldr	r2, [pc, #100]	; (800452c <HAL_DMA_IRQHandler+0x6c4>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d009      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x678>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a17      	ldr	r2, [pc, #92]	; (8004530 <HAL_DMA_IRQHandler+0x6c8>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d004      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x678>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a16      	ldr	r2, [pc, #88]	; (8004534 <HAL_DMA_IRQHandler+0x6cc>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d12b      	bne.n	8004538 <HAL_DMA_IRQHandler+0x6d0>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0310 	and.w	r3, r3, #16
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	bf14      	ite	ne
 80044ee:	2301      	movne	r3, #1
 80044f0:	2300      	moveq	r3, #0
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	e02a      	b.n	800454c <HAL_DMA_IRQHandler+0x6e4>
 80044f6:	bf00      	nop
 80044f8:	40020010 	.word	0x40020010
 80044fc:	40020028 	.word	0x40020028
 8004500:	40020040 	.word	0x40020040
 8004504:	40020058 	.word	0x40020058
 8004508:	40020070 	.word	0x40020070
 800450c:	40020088 	.word	0x40020088
 8004510:	400200a0 	.word	0x400200a0
 8004514:	400200b8 	.word	0x400200b8
 8004518:	40020410 	.word	0x40020410
 800451c:	40020428 	.word	0x40020428
 8004520:	40020440 	.word	0x40020440
 8004524:	40020458 	.word	0x40020458
 8004528:	40020470 	.word	0x40020470
 800452c:	40020488 	.word	0x40020488
 8004530:	400204a0 	.word	0x400204a0
 8004534:	400204b8 	.word	0x400204b8
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	bf14      	ite	ne
 8004546:	2301      	movne	r3, #1
 8004548:	2300      	moveq	r3, #0
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b00      	cmp	r3, #0
 800454e:	f000 8087 	beq.w	8004660 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004556:	f003 031f 	and.w	r3, r3, #31
 800455a:	2220      	movs	r2, #32
 800455c:	409a      	lsls	r2, r3
 800455e:	6a3b      	ldr	r3, [r7, #32]
 8004560:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b04      	cmp	r3, #4
 800456c:	d139      	bne.n	80045e2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 0216 	bic.w	r2, r2, #22
 800457c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	695a      	ldr	r2, [r3, #20]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800458c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	2b00      	cmp	r3, #0
 8004594:	d103      	bne.n	800459e <HAL_DMA_IRQHandler+0x736>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800459a:	2b00      	cmp	r3, #0
 800459c:	d007      	beq.n	80045ae <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f022 0208 	bic.w	r2, r2, #8
 80045ac:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b2:	f003 031f 	and.w	r3, r3, #31
 80045b6:	223f      	movs	r2, #63	; 0x3f
 80045b8:	409a      	lsls	r2, r3
 80045ba:	6a3b      	ldr	r3, [r7, #32]
 80045bc:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 834a 	beq.w	8004c6c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	4798      	blx	r3
          }
          return;
 80045e0:	e344      	b.n	8004c6c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d018      	beq.n	8004622 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d108      	bne.n	8004610 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004602:	2b00      	cmp	r3, #0
 8004604:	d02c      	beq.n	8004660 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	4798      	blx	r3
 800460e:	e027      	b.n	8004660 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004614:	2b00      	cmp	r3, #0
 8004616:	d023      	beq.n	8004660 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	4798      	blx	r3
 8004620:	e01e      	b.n	8004660 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10f      	bne.n	8004650 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 0210 	bic.w	r2, r2, #16
 800463e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 8306 	beq.w	8004c76 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	f000 8088 	beq.w	8004788 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2204      	movs	r2, #4
 800467c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a7a      	ldr	r2, [pc, #488]	; (8004870 <HAL_DMA_IRQHandler+0xa08>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d04a      	beq.n	8004720 <HAL_DMA_IRQHandler+0x8b8>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a79      	ldr	r2, [pc, #484]	; (8004874 <HAL_DMA_IRQHandler+0xa0c>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d045      	beq.n	8004720 <HAL_DMA_IRQHandler+0x8b8>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a77      	ldr	r2, [pc, #476]	; (8004878 <HAL_DMA_IRQHandler+0xa10>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d040      	beq.n	8004720 <HAL_DMA_IRQHandler+0x8b8>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a76      	ldr	r2, [pc, #472]	; (800487c <HAL_DMA_IRQHandler+0xa14>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d03b      	beq.n	8004720 <HAL_DMA_IRQHandler+0x8b8>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a74      	ldr	r2, [pc, #464]	; (8004880 <HAL_DMA_IRQHandler+0xa18>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d036      	beq.n	8004720 <HAL_DMA_IRQHandler+0x8b8>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a73      	ldr	r2, [pc, #460]	; (8004884 <HAL_DMA_IRQHandler+0xa1c>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d031      	beq.n	8004720 <HAL_DMA_IRQHandler+0x8b8>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a71      	ldr	r2, [pc, #452]	; (8004888 <HAL_DMA_IRQHandler+0xa20>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d02c      	beq.n	8004720 <HAL_DMA_IRQHandler+0x8b8>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a70      	ldr	r2, [pc, #448]	; (800488c <HAL_DMA_IRQHandler+0xa24>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d027      	beq.n	8004720 <HAL_DMA_IRQHandler+0x8b8>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a6e      	ldr	r2, [pc, #440]	; (8004890 <HAL_DMA_IRQHandler+0xa28>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d022      	beq.n	8004720 <HAL_DMA_IRQHandler+0x8b8>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a6d      	ldr	r2, [pc, #436]	; (8004894 <HAL_DMA_IRQHandler+0xa2c>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d01d      	beq.n	8004720 <HAL_DMA_IRQHandler+0x8b8>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a6b      	ldr	r2, [pc, #428]	; (8004898 <HAL_DMA_IRQHandler+0xa30>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d018      	beq.n	8004720 <HAL_DMA_IRQHandler+0x8b8>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a6a      	ldr	r2, [pc, #424]	; (800489c <HAL_DMA_IRQHandler+0xa34>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d013      	beq.n	8004720 <HAL_DMA_IRQHandler+0x8b8>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a68      	ldr	r2, [pc, #416]	; (80048a0 <HAL_DMA_IRQHandler+0xa38>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d00e      	beq.n	8004720 <HAL_DMA_IRQHandler+0x8b8>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a67      	ldr	r2, [pc, #412]	; (80048a4 <HAL_DMA_IRQHandler+0xa3c>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d009      	beq.n	8004720 <HAL_DMA_IRQHandler+0x8b8>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a65      	ldr	r2, [pc, #404]	; (80048a8 <HAL_DMA_IRQHandler+0xa40>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d004      	beq.n	8004720 <HAL_DMA_IRQHandler+0x8b8>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a64      	ldr	r2, [pc, #400]	; (80048ac <HAL_DMA_IRQHandler+0xa44>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d108      	bne.n	8004732 <HAL_DMA_IRQHandler+0x8ca>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 0201 	bic.w	r2, r2, #1
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	e007      	b.n	8004742 <HAL_DMA_IRQHandler+0x8da>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 0201 	bic.w	r2, r2, #1
 8004740:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	3301      	adds	r3, #1
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800474a:	429a      	cmp	r2, r3
 800474c:	d307      	bcc.n	800475e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1f2      	bne.n	8004742 <HAL_DMA_IRQHandler+0x8da>
 800475c:	e000      	b.n	8004760 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800475e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	d004      	beq.n	8004780 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2203      	movs	r2, #3
 800477a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800477e:	e003      	b.n	8004788 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 8272 	beq.w	8004c76 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	4798      	blx	r3
 800479a:	e26c      	b.n	8004c76 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a43      	ldr	r2, [pc, #268]	; (80048b0 <HAL_DMA_IRQHandler+0xa48>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d022      	beq.n	80047ec <HAL_DMA_IRQHandler+0x984>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a42      	ldr	r2, [pc, #264]	; (80048b4 <HAL_DMA_IRQHandler+0xa4c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d01d      	beq.n	80047ec <HAL_DMA_IRQHandler+0x984>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a40      	ldr	r2, [pc, #256]	; (80048b8 <HAL_DMA_IRQHandler+0xa50>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d018      	beq.n	80047ec <HAL_DMA_IRQHandler+0x984>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a3f      	ldr	r2, [pc, #252]	; (80048bc <HAL_DMA_IRQHandler+0xa54>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d013      	beq.n	80047ec <HAL_DMA_IRQHandler+0x984>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a3d      	ldr	r2, [pc, #244]	; (80048c0 <HAL_DMA_IRQHandler+0xa58>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d00e      	beq.n	80047ec <HAL_DMA_IRQHandler+0x984>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a3c      	ldr	r2, [pc, #240]	; (80048c4 <HAL_DMA_IRQHandler+0xa5c>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d009      	beq.n	80047ec <HAL_DMA_IRQHandler+0x984>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a3a      	ldr	r2, [pc, #232]	; (80048c8 <HAL_DMA_IRQHandler+0xa60>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d004      	beq.n	80047ec <HAL_DMA_IRQHandler+0x984>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a39      	ldr	r2, [pc, #228]	; (80048cc <HAL_DMA_IRQHandler+0xa64>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d101      	bne.n	80047f0 <HAL_DMA_IRQHandler+0x988>
 80047ec:	2301      	movs	r3, #1
 80047ee:	e000      	b.n	80047f2 <HAL_DMA_IRQHandler+0x98a>
 80047f0:	2300      	movs	r3, #0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f000 823f 	beq.w	8004c76 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004804:	f003 031f 	and.w	r3, r3, #31
 8004808:	2204      	movs	r2, #4
 800480a:	409a      	lsls	r2, r3
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	4013      	ands	r3, r2
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 80cd 	beq.w	80049b0 <HAL_DMA_IRQHandler+0xb48>
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	f003 0304 	and.w	r3, r3, #4
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 80c7 	beq.w	80049b0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004826:	f003 031f 	and.w	r3, r3, #31
 800482a:	2204      	movs	r2, #4
 800482c:	409a      	lsls	r2, r3
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d049      	beq.n	80048d0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d109      	bne.n	800485a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 8210 	beq.w	8004c70 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004858:	e20a      	b.n	8004c70 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	2b00      	cmp	r3, #0
 8004860:	f000 8206 	beq.w	8004c70 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800486c:	e200      	b.n	8004c70 <HAL_DMA_IRQHandler+0xe08>
 800486e:	bf00      	nop
 8004870:	40020010 	.word	0x40020010
 8004874:	40020028 	.word	0x40020028
 8004878:	40020040 	.word	0x40020040
 800487c:	40020058 	.word	0x40020058
 8004880:	40020070 	.word	0x40020070
 8004884:	40020088 	.word	0x40020088
 8004888:	400200a0 	.word	0x400200a0
 800488c:	400200b8 	.word	0x400200b8
 8004890:	40020410 	.word	0x40020410
 8004894:	40020428 	.word	0x40020428
 8004898:	40020440 	.word	0x40020440
 800489c:	40020458 	.word	0x40020458
 80048a0:	40020470 	.word	0x40020470
 80048a4:	40020488 	.word	0x40020488
 80048a8:	400204a0 	.word	0x400204a0
 80048ac:	400204b8 	.word	0x400204b8
 80048b0:	58025408 	.word	0x58025408
 80048b4:	5802541c 	.word	0x5802541c
 80048b8:	58025430 	.word	0x58025430
 80048bc:	58025444 	.word	0x58025444
 80048c0:	58025458 	.word	0x58025458
 80048c4:	5802546c 	.word	0x5802546c
 80048c8:	58025480 	.word	0x58025480
 80048cc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	f003 0320 	and.w	r3, r3, #32
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d160      	bne.n	800499c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a8c      	ldr	r2, [pc, #560]	; (8004b10 <HAL_DMA_IRQHandler+0xca8>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d04a      	beq.n	800497a <HAL_DMA_IRQHandler+0xb12>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a8a      	ldr	r2, [pc, #552]	; (8004b14 <HAL_DMA_IRQHandler+0xcac>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d045      	beq.n	800497a <HAL_DMA_IRQHandler+0xb12>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a89      	ldr	r2, [pc, #548]	; (8004b18 <HAL_DMA_IRQHandler+0xcb0>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d040      	beq.n	800497a <HAL_DMA_IRQHandler+0xb12>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a87      	ldr	r2, [pc, #540]	; (8004b1c <HAL_DMA_IRQHandler+0xcb4>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d03b      	beq.n	800497a <HAL_DMA_IRQHandler+0xb12>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a86      	ldr	r2, [pc, #536]	; (8004b20 <HAL_DMA_IRQHandler+0xcb8>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d036      	beq.n	800497a <HAL_DMA_IRQHandler+0xb12>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a84      	ldr	r2, [pc, #528]	; (8004b24 <HAL_DMA_IRQHandler+0xcbc>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d031      	beq.n	800497a <HAL_DMA_IRQHandler+0xb12>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a83      	ldr	r2, [pc, #524]	; (8004b28 <HAL_DMA_IRQHandler+0xcc0>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d02c      	beq.n	800497a <HAL_DMA_IRQHandler+0xb12>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a81      	ldr	r2, [pc, #516]	; (8004b2c <HAL_DMA_IRQHandler+0xcc4>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d027      	beq.n	800497a <HAL_DMA_IRQHandler+0xb12>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a80      	ldr	r2, [pc, #512]	; (8004b30 <HAL_DMA_IRQHandler+0xcc8>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d022      	beq.n	800497a <HAL_DMA_IRQHandler+0xb12>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a7e      	ldr	r2, [pc, #504]	; (8004b34 <HAL_DMA_IRQHandler+0xccc>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d01d      	beq.n	800497a <HAL_DMA_IRQHandler+0xb12>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a7d      	ldr	r2, [pc, #500]	; (8004b38 <HAL_DMA_IRQHandler+0xcd0>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d018      	beq.n	800497a <HAL_DMA_IRQHandler+0xb12>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a7b      	ldr	r2, [pc, #492]	; (8004b3c <HAL_DMA_IRQHandler+0xcd4>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d013      	beq.n	800497a <HAL_DMA_IRQHandler+0xb12>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a7a      	ldr	r2, [pc, #488]	; (8004b40 <HAL_DMA_IRQHandler+0xcd8>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d00e      	beq.n	800497a <HAL_DMA_IRQHandler+0xb12>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a78      	ldr	r2, [pc, #480]	; (8004b44 <HAL_DMA_IRQHandler+0xcdc>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d009      	beq.n	800497a <HAL_DMA_IRQHandler+0xb12>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a77      	ldr	r2, [pc, #476]	; (8004b48 <HAL_DMA_IRQHandler+0xce0>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d004      	beq.n	800497a <HAL_DMA_IRQHandler+0xb12>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a75      	ldr	r2, [pc, #468]	; (8004b4c <HAL_DMA_IRQHandler+0xce4>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d108      	bne.n	800498c <HAL_DMA_IRQHandler+0xb24>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 0208 	bic.w	r2, r2, #8
 8004988:	601a      	str	r2, [r3, #0]
 800498a:	e007      	b.n	800499c <HAL_DMA_IRQHandler+0xb34>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 0204 	bic.w	r2, r2, #4
 800499a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 8165 	beq.w	8004c70 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049ae:	e15f      	b.n	8004c70 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b4:	f003 031f 	and.w	r3, r3, #31
 80049b8:	2202      	movs	r2, #2
 80049ba:	409a      	lsls	r2, r3
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	4013      	ands	r3, r2
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 80c5 	beq.w	8004b50 <HAL_DMA_IRQHandler+0xce8>
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	f003 0302 	and.w	r3, r3, #2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 80bf 	beq.w	8004b50 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d6:	f003 031f 	and.w	r3, r3, #31
 80049da:	2202      	movs	r2, #2
 80049dc:	409a      	lsls	r2, r3
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d018      	beq.n	8004a1e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d109      	bne.n	8004a0a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 813a 	beq.w	8004c74 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a08:	e134      	b.n	8004c74 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f000 8130 	beq.w	8004c74 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a1c:	e12a      	b.n	8004c74 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	f003 0320 	and.w	r3, r3, #32
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d168      	bne.n	8004afa <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a38      	ldr	r2, [pc, #224]	; (8004b10 <HAL_DMA_IRQHandler+0xca8>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d04a      	beq.n	8004ac8 <HAL_DMA_IRQHandler+0xc60>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a37      	ldr	r2, [pc, #220]	; (8004b14 <HAL_DMA_IRQHandler+0xcac>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d045      	beq.n	8004ac8 <HAL_DMA_IRQHandler+0xc60>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a35      	ldr	r2, [pc, #212]	; (8004b18 <HAL_DMA_IRQHandler+0xcb0>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d040      	beq.n	8004ac8 <HAL_DMA_IRQHandler+0xc60>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a34      	ldr	r2, [pc, #208]	; (8004b1c <HAL_DMA_IRQHandler+0xcb4>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d03b      	beq.n	8004ac8 <HAL_DMA_IRQHandler+0xc60>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a32      	ldr	r2, [pc, #200]	; (8004b20 <HAL_DMA_IRQHandler+0xcb8>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d036      	beq.n	8004ac8 <HAL_DMA_IRQHandler+0xc60>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a31      	ldr	r2, [pc, #196]	; (8004b24 <HAL_DMA_IRQHandler+0xcbc>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d031      	beq.n	8004ac8 <HAL_DMA_IRQHandler+0xc60>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a2f      	ldr	r2, [pc, #188]	; (8004b28 <HAL_DMA_IRQHandler+0xcc0>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d02c      	beq.n	8004ac8 <HAL_DMA_IRQHandler+0xc60>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a2e      	ldr	r2, [pc, #184]	; (8004b2c <HAL_DMA_IRQHandler+0xcc4>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d027      	beq.n	8004ac8 <HAL_DMA_IRQHandler+0xc60>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a2c      	ldr	r2, [pc, #176]	; (8004b30 <HAL_DMA_IRQHandler+0xcc8>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d022      	beq.n	8004ac8 <HAL_DMA_IRQHandler+0xc60>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a2b      	ldr	r2, [pc, #172]	; (8004b34 <HAL_DMA_IRQHandler+0xccc>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d01d      	beq.n	8004ac8 <HAL_DMA_IRQHandler+0xc60>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a29      	ldr	r2, [pc, #164]	; (8004b38 <HAL_DMA_IRQHandler+0xcd0>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d018      	beq.n	8004ac8 <HAL_DMA_IRQHandler+0xc60>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a28      	ldr	r2, [pc, #160]	; (8004b3c <HAL_DMA_IRQHandler+0xcd4>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d013      	beq.n	8004ac8 <HAL_DMA_IRQHandler+0xc60>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a26      	ldr	r2, [pc, #152]	; (8004b40 <HAL_DMA_IRQHandler+0xcd8>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d00e      	beq.n	8004ac8 <HAL_DMA_IRQHandler+0xc60>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a25      	ldr	r2, [pc, #148]	; (8004b44 <HAL_DMA_IRQHandler+0xcdc>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d009      	beq.n	8004ac8 <HAL_DMA_IRQHandler+0xc60>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a23      	ldr	r2, [pc, #140]	; (8004b48 <HAL_DMA_IRQHandler+0xce0>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d004      	beq.n	8004ac8 <HAL_DMA_IRQHandler+0xc60>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a22      	ldr	r2, [pc, #136]	; (8004b4c <HAL_DMA_IRQHandler+0xce4>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d108      	bne.n	8004ada <HAL_DMA_IRQHandler+0xc72>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 0214 	bic.w	r2, r2, #20
 8004ad6:	601a      	str	r2, [r3, #0]
 8004ad8:	e007      	b.n	8004aea <HAL_DMA_IRQHandler+0xc82>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 020a 	bic.w	r2, r2, #10
 8004ae8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f000 80b8 	beq.w	8004c74 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b0c:	e0b2      	b.n	8004c74 <HAL_DMA_IRQHandler+0xe0c>
 8004b0e:	bf00      	nop
 8004b10:	40020010 	.word	0x40020010
 8004b14:	40020028 	.word	0x40020028
 8004b18:	40020040 	.word	0x40020040
 8004b1c:	40020058 	.word	0x40020058
 8004b20:	40020070 	.word	0x40020070
 8004b24:	40020088 	.word	0x40020088
 8004b28:	400200a0 	.word	0x400200a0
 8004b2c:	400200b8 	.word	0x400200b8
 8004b30:	40020410 	.word	0x40020410
 8004b34:	40020428 	.word	0x40020428
 8004b38:	40020440 	.word	0x40020440
 8004b3c:	40020458 	.word	0x40020458
 8004b40:	40020470 	.word	0x40020470
 8004b44:	40020488 	.word	0x40020488
 8004b48:	400204a0 	.word	0x400204a0
 8004b4c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b54:	f003 031f 	and.w	r3, r3, #31
 8004b58:	2208      	movs	r2, #8
 8004b5a:	409a      	lsls	r2, r3
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f000 8088 	beq.w	8004c76 <HAL_DMA_IRQHandler+0xe0e>
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	f003 0308 	and.w	r3, r3, #8
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 8082 	beq.w	8004c76 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a41      	ldr	r2, [pc, #260]	; (8004c7c <HAL_DMA_IRQHandler+0xe14>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d04a      	beq.n	8004c12 <HAL_DMA_IRQHandler+0xdaa>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a3f      	ldr	r2, [pc, #252]	; (8004c80 <HAL_DMA_IRQHandler+0xe18>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d045      	beq.n	8004c12 <HAL_DMA_IRQHandler+0xdaa>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a3e      	ldr	r2, [pc, #248]	; (8004c84 <HAL_DMA_IRQHandler+0xe1c>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d040      	beq.n	8004c12 <HAL_DMA_IRQHandler+0xdaa>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a3c      	ldr	r2, [pc, #240]	; (8004c88 <HAL_DMA_IRQHandler+0xe20>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d03b      	beq.n	8004c12 <HAL_DMA_IRQHandler+0xdaa>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a3b      	ldr	r2, [pc, #236]	; (8004c8c <HAL_DMA_IRQHandler+0xe24>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d036      	beq.n	8004c12 <HAL_DMA_IRQHandler+0xdaa>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a39      	ldr	r2, [pc, #228]	; (8004c90 <HAL_DMA_IRQHandler+0xe28>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d031      	beq.n	8004c12 <HAL_DMA_IRQHandler+0xdaa>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a38      	ldr	r2, [pc, #224]	; (8004c94 <HAL_DMA_IRQHandler+0xe2c>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d02c      	beq.n	8004c12 <HAL_DMA_IRQHandler+0xdaa>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a36      	ldr	r2, [pc, #216]	; (8004c98 <HAL_DMA_IRQHandler+0xe30>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d027      	beq.n	8004c12 <HAL_DMA_IRQHandler+0xdaa>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a35      	ldr	r2, [pc, #212]	; (8004c9c <HAL_DMA_IRQHandler+0xe34>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d022      	beq.n	8004c12 <HAL_DMA_IRQHandler+0xdaa>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a33      	ldr	r2, [pc, #204]	; (8004ca0 <HAL_DMA_IRQHandler+0xe38>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d01d      	beq.n	8004c12 <HAL_DMA_IRQHandler+0xdaa>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a32      	ldr	r2, [pc, #200]	; (8004ca4 <HAL_DMA_IRQHandler+0xe3c>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d018      	beq.n	8004c12 <HAL_DMA_IRQHandler+0xdaa>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a30      	ldr	r2, [pc, #192]	; (8004ca8 <HAL_DMA_IRQHandler+0xe40>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d013      	beq.n	8004c12 <HAL_DMA_IRQHandler+0xdaa>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a2f      	ldr	r2, [pc, #188]	; (8004cac <HAL_DMA_IRQHandler+0xe44>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d00e      	beq.n	8004c12 <HAL_DMA_IRQHandler+0xdaa>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a2d      	ldr	r2, [pc, #180]	; (8004cb0 <HAL_DMA_IRQHandler+0xe48>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d009      	beq.n	8004c12 <HAL_DMA_IRQHandler+0xdaa>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a2c      	ldr	r2, [pc, #176]	; (8004cb4 <HAL_DMA_IRQHandler+0xe4c>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d004      	beq.n	8004c12 <HAL_DMA_IRQHandler+0xdaa>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a2a      	ldr	r2, [pc, #168]	; (8004cb8 <HAL_DMA_IRQHandler+0xe50>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d108      	bne.n	8004c24 <HAL_DMA_IRQHandler+0xdbc>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f022 021c 	bic.w	r2, r2, #28
 8004c20:	601a      	str	r2, [r3, #0]
 8004c22:	e007      	b.n	8004c34 <HAL_DMA_IRQHandler+0xdcc>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f022 020e 	bic.w	r2, r2, #14
 8004c32:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c38:	f003 031f 	and.w	r3, r3, #31
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	409a      	lsls	r2, r3
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d009      	beq.n	8004c76 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	4798      	blx	r3
 8004c6a:	e004      	b.n	8004c76 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004c6c:	bf00      	nop
 8004c6e:	e002      	b.n	8004c76 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c70:	bf00      	nop
 8004c72:	e000      	b.n	8004c76 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c74:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004c76:	3728      	adds	r7, #40	; 0x28
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	40020010 	.word	0x40020010
 8004c80:	40020028 	.word	0x40020028
 8004c84:	40020040 	.word	0x40020040
 8004c88:	40020058 	.word	0x40020058
 8004c8c:	40020070 	.word	0x40020070
 8004c90:	40020088 	.word	0x40020088
 8004c94:	400200a0 	.word	0x400200a0
 8004c98:	400200b8 	.word	0x400200b8
 8004c9c:	40020410 	.word	0x40020410
 8004ca0:	40020428 	.word	0x40020428
 8004ca4:	40020440 	.word	0x40020440
 8004ca8:	40020458 	.word	0x40020458
 8004cac:	40020470 	.word	0x40020470
 8004cb0:	40020488 	.word	0x40020488
 8004cb4:	400204a0 	.word	0x400204a0
 8004cb8:	400204b8 	.word	0x400204b8

08004cbc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a42      	ldr	r2, [pc, #264]	; (8004dd4 <DMA_CalcBaseAndBitshift+0x118>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d04a      	beq.n	8004d64 <DMA_CalcBaseAndBitshift+0xa8>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a41      	ldr	r2, [pc, #260]	; (8004dd8 <DMA_CalcBaseAndBitshift+0x11c>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d045      	beq.n	8004d64 <DMA_CalcBaseAndBitshift+0xa8>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a3f      	ldr	r2, [pc, #252]	; (8004ddc <DMA_CalcBaseAndBitshift+0x120>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d040      	beq.n	8004d64 <DMA_CalcBaseAndBitshift+0xa8>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a3e      	ldr	r2, [pc, #248]	; (8004de0 <DMA_CalcBaseAndBitshift+0x124>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d03b      	beq.n	8004d64 <DMA_CalcBaseAndBitshift+0xa8>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a3c      	ldr	r2, [pc, #240]	; (8004de4 <DMA_CalcBaseAndBitshift+0x128>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d036      	beq.n	8004d64 <DMA_CalcBaseAndBitshift+0xa8>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a3b      	ldr	r2, [pc, #236]	; (8004de8 <DMA_CalcBaseAndBitshift+0x12c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d031      	beq.n	8004d64 <DMA_CalcBaseAndBitshift+0xa8>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a39      	ldr	r2, [pc, #228]	; (8004dec <DMA_CalcBaseAndBitshift+0x130>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d02c      	beq.n	8004d64 <DMA_CalcBaseAndBitshift+0xa8>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a38      	ldr	r2, [pc, #224]	; (8004df0 <DMA_CalcBaseAndBitshift+0x134>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d027      	beq.n	8004d64 <DMA_CalcBaseAndBitshift+0xa8>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a36      	ldr	r2, [pc, #216]	; (8004df4 <DMA_CalcBaseAndBitshift+0x138>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d022      	beq.n	8004d64 <DMA_CalcBaseAndBitshift+0xa8>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a35      	ldr	r2, [pc, #212]	; (8004df8 <DMA_CalcBaseAndBitshift+0x13c>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d01d      	beq.n	8004d64 <DMA_CalcBaseAndBitshift+0xa8>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a33      	ldr	r2, [pc, #204]	; (8004dfc <DMA_CalcBaseAndBitshift+0x140>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d018      	beq.n	8004d64 <DMA_CalcBaseAndBitshift+0xa8>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a32      	ldr	r2, [pc, #200]	; (8004e00 <DMA_CalcBaseAndBitshift+0x144>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d013      	beq.n	8004d64 <DMA_CalcBaseAndBitshift+0xa8>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a30      	ldr	r2, [pc, #192]	; (8004e04 <DMA_CalcBaseAndBitshift+0x148>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d00e      	beq.n	8004d64 <DMA_CalcBaseAndBitshift+0xa8>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a2f      	ldr	r2, [pc, #188]	; (8004e08 <DMA_CalcBaseAndBitshift+0x14c>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d009      	beq.n	8004d64 <DMA_CalcBaseAndBitshift+0xa8>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a2d      	ldr	r2, [pc, #180]	; (8004e0c <DMA_CalcBaseAndBitshift+0x150>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d004      	beq.n	8004d64 <DMA_CalcBaseAndBitshift+0xa8>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a2c      	ldr	r2, [pc, #176]	; (8004e10 <DMA_CalcBaseAndBitshift+0x154>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d101      	bne.n	8004d68 <DMA_CalcBaseAndBitshift+0xac>
 8004d64:	2301      	movs	r3, #1
 8004d66:	e000      	b.n	8004d6a <DMA_CalcBaseAndBitshift+0xae>
 8004d68:	2300      	movs	r3, #0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d024      	beq.n	8004db8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	3b10      	subs	r3, #16
 8004d76:	4a27      	ldr	r2, [pc, #156]	; (8004e14 <DMA_CalcBaseAndBitshift+0x158>)
 8004d78:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7c:	091b      	lsrs	r3, r3, #4
 8004d7e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f003 0307 	and.w	r3, r3, #7
 8004d86:	4a24      	ldr	r2, [pc, #144]	; (8004e18 <DMA_CalcBaseAndBitshift+0x15c>)
 8004d88:	5cd3      	ldrb	r3, [r2, r3]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2b03      	cmp	r3, #3
 8004d94:	d908      	bls.n	8004da8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	4b1f      	ldr	r3, [pc, #124]	; (8004e1c <DMA_CalcBaseAndBitshift+0x160>)
 8004d9e:	4013      	ands	r3, r2
 8004da0:	1d1a      	adds	r2, r3, #4
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	659a      	str	r2, [r3, #88]	; 0x58
 8004da6:	e00d      	b.n	8004dc4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	461a      	mov	r2, r3
 8004dae:	4b1b      	ldr	r3, [pc, #108]	; (8004e1c <DMA_CalcBaseAndBitshift+0x160>)
 8004db0:	4013      	ands	r3, r2
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	6593      	str	r3, [r2, #88]	; 0x58
 8004db6:	e005      	b.n	8004dc4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3714      	adds	r7, #20
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr
 8004dd4:	40020010 	.word	0x40020010
 8004dd8:	40020028 	.word	0x40020028
 8004ddc:	40020040 	.word	0x40020040
 8004de0:	40020058 	.word	0x40020058
 8004de4:	40020070 	.word	0x40020070
 8004de8:	40020088 	.word	0x40020088
 8004dec:	400200a0 	.word	0x400200a0
 8004df0:	400200b8 	.word	0x400200b8
 8004df4:	40020410 	.word	0x40020410
 8004df8:	40020428 	.word	0x40020428
 8004dfc:	40020440 	.word	0x40020440
 8004e00:	40020458 	.word	0x40020458
 8004e04:	40020470 	.word	0x40020470
 8004e08:	40020488 	.word	0x40020488
 8004e0c:	400204a0 	.word	0x400204a0
 8004e10:	400204b8 	.word	0x400204b8
 8004e14:	aaaaaaab 	.word	0xaaaaaaab
 8004e18:	08011ce4 	.word	0x08011ce4
 8004e1c:	fffffc00 	.word	0xfffffc00

08004e20 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d120      	bne.n	8004e76 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e38:	2b03      	cmp	r3, #3
 8004e3a:	d858      	bhi.n	8004eee <DMA_CheckFifoParam+0xce>
 8004e3c:	a201      	add	r2, pc, #4	; (adr r2, 8004e44 <DMA_CheckFifoParam+0x24>)
 8004e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e42:	bf00      	nop
 8004e44:	08004e55 	.word	0x08004e55
 8004e48:	08004e67 	.word	0x08004e67
 8004e4c:	08004e55 	.word	0x08004e55
 8004e50:	08004eef 	.word	0x08004eef
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d048      	beq.n	8004ef2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e64:	e045      	b.n	8004ef2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e6e:	d142      	bne.n	8004ef6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e74:	e03f      	b.n	8004ef6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e7e:	d123      	bne.n	8004ec8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e84:	2b03      	cmp	r3, #3
 8004e86:	d838      	bhi.n	8004efa <DMA_CheckFifoParam+0xda>
 8004e88:	a201      	add	r2, pc, #4	; (adr r2, 8004e90 <DMA_CheckFifoParam+0x70>)
 8004e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8e:	bf00      	nop
 8004e90:	08004ea1 	.word	0x08004ea1
 8004e94:	08004ea7 	.word	0x08004ea7
 8004e98:	08004ea1 	.word	0x08004ea1
 8004e9c:	08004eb9 	.word	0x08004eb9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	73fb      	strb	r3, [r7, #15]
        break;
 8004ea4:	e030      	b.n	8004f08 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d025      	beq.n	8004efe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004eb6:	e022      	b.n	8004efe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ec0:	d11f      	bne.n	8004f02 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ec6:	e01c      	b.n	8004f02 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d902      	bls.n	8004ed6 <DMA_CheckFifoParam+0xb6>
 8004ed0:	2b03      	cmp	r3, #3
 8004ed2:	d003      	beq.n	8004edc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004ed4:	e018      	b.n	8004f08 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	73fb      	strb	r3, [r7, #15]
        break;
 8004eda:	e015      	b.n	8004f08 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00e      	beq.n	8004f06 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	73fb      	strb	r3, [r7, #15]
    break;
 8004eec:	e00b      	b.n	8004f06 <DMA_CheckFifoParam+0xe6>
        break;
 8004eee:	bf00      	nop
 8004ef0:	e00a      	b.n	8004f08 <DMA_CheckFifoParam+0xe8>
        break;
 8004ef2:	bf00      	nop
 8004ef4:	e008      	b.n	8004f08 <DMA_CheckFifoParam+0xe8>
        break;
 8004ef6:	bf00      	nop
 8004ef8:	e006      	b.n	8004f08 <DMA_CheckFifoParam+0xe8>
        break;
 8004efa:	bf00      	nop
 8004efc:	e004      	b.n	8004f08 <DMA_CheckFifoParam+0xe8>
        break;
 8004efe:	bf00      	nop
 8004f00:	e002      	b.n	8004f08 <DMA_CheckFifoParam+0xe8>
        break;
 8004f02:	bf00      	nop
 8004f04:	e000      	b.n	8004f08 <DMA_CheckFifoParam+0xe8>
    break;
 8004f06:	bf00      	nop
    }
  }

  return status;
 8004f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop

08004f18 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a38      	ldr	r2, [pc, #224]	; (800500c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d022      	beq.n	8004f76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a36      	ldr	r2, [pc, #216]	; (8005010 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d01d      	beq.n	8004f76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a35      	ldr	r2, [pc, #212]	; (8005014 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d018      	beq.n	8004f76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a33      	ldr	r2, [pc, #204]	; (8005018 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d013      	beq.n	8004f76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a32      	ldr	r2, [pc, #200]	; (800501c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d00e      	beq.n	8004f76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a30      	ldr	r2, [pc, #192]	; (8005020 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d009      	beq.n	8004f76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a2f      	ldr	r2, [pc, #188]	; (8005024 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d004      	beq.n	8004f76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a2d      	ldr	r2, [pc, #180]	; (8005028 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d101      	bne.n	8004f7a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004f76:	2301      	movs	r3, #1
 8004f78:	e000      	b.n	8004f7c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d01a      	beq.n	8004fb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	3b08      	subs	r3, #8
 8004f88:	4a28      	ldr	r2, [pc, #160]	; (800502c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8e:	091b      	lsrs	r3, r3, #4
 8004f90:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	4b26      	ldr	r3, [pc, #152]	; (8005030 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004f96:	4413      	add	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a24      	ldr	r2, [pc, #144]	; (8005034 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004fa4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f003 031f 	and.w	r3, r3, #31
 8004fac:	2201      	movs	r2, #1
 8004fae:	409a      	lsls	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004fb4:	e024      	b.n	8005000 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	3b10      	subs	r3, #16
 8004fbe:	4a1e      	ldr	r2, [pc, #120]	; (8005038 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc4:	091b      	lsrs	r3, r3, #4
 8004fc6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	4a1c      	ldr	r2, [pc, #112]	; (800503c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d806      	bhi.n	8004fde <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	4a1b      	ldr	r2, [pc, #108]	; (8005040 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d902      	bls.n	8004fde <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	3308      	adds	r3, #8
 8004fdc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	4b18      	ldr	r3, [pc, #96]	; (8005044 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004fe2:	4413      	add	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a16      	ldr	r2, [pc, #88]	; (8005048 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004ff0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f003 031f 	and.w	r3, r3, #31
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	409a      	lsls	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005000:	bf00      	nop
 8005002:	3714      	adds	r7, #20
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr
 800500c:	58025408 	.word	0x58025408
 8005010:	5802541c 	.word	0x5802541c
 8005014:	58025430 	.word	0x58025430
 8005018:	58025444 	.word	0x58025444
 800501c:	58025458 	.word	0x58025458
 8005020:	5802546c 	.word	0x5802546c
 8005024:	58025480 	.word	0x58025480
 8005028:	58025494 	.word	0x58025494
 800502c:	cccccccd 	.word	0xcccccccd
 8005030:	16009600 	.word	0x16009600
 8005034:	58025880 	.word	0x58025880
 8005038:	aaaaaaab 	.word	0xaaaaaaab
 800503c:	400204b8 	.word	0x400204b8
 8005040:	4002040f 	.word	0x4002040f
 8005044:	10008200 	.word	0x10008200
 8005048:	40020880 	.word	0x40020880

0800504c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	b2db      	uxtb	r3, r3
 800505a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d04a      	beq.n	80050f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2b08      	cmp	r3, #8
 8005066:	d847      	bhi.n	80050f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a25      	ldr	r2, [pc, #148]	; (8005104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d022      	beq.n	80050b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a24      	ldr	r2, [pc, #144]	; (8005108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d01d      	beq.n	80050b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a22      	ldr	r2, [pc, #136]	; (800510c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d018      	beq.n	80050b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a21      	ldr	r2, [pc, #132]	; (8005110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d013      	beq.n	80050b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a1f      	ldr	r2, [pc, #124]	; (8005114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d00e      	beq.n	80050b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a1e      	ldr	r2, [pc, #120]	; (8005118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d009      	beq.n	80050b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a1c      	ldr	r2, [pc, #112]	; (800511c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d004      	beq.n	80050b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a1b      	ldr	r2, [pc, #108]	; (8005120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d101      	bne.n	80050bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80050b8:	2301      	movs	r3, #1
 80050ba:	e000      	b.n	80050be <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80050bc:	2300      	movs	r3, #0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00a      	beq.n	80050d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	4b17      	ldr	r3, [pc, #92]	; (8005124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80050c6:	4413      	add	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	461a      	mov	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a15      	ldr	r2, [pc, #84]	; (8005128 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80050d4:	671a      	str	r2, [r3, #112]	; 0x70
 80050d6:	e009      	b.n	80050ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	4b14      	ldr	r3, [pc, #80]	; (800512c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80050dc:	4413      	add	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	461a      	mov	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a11      	ldr	r2, [pc, #68]	; (8005130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80050ea:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	3b01      	subs	r3, #1
 80050f0:	2201      	movs	r2, #1
 80050f2:	409a      	lsls	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80050f8:	bf00      	nop
 80050fa:	3714      	adds	r7, #20
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	58025408 	.word	0x58025408
 8005108:	5802541c 	.word	0x5802541c
 800510c:	58025430 	.word	0x58025430
 8005110:	58025444 	.word	0x58025444
 8005114:	58025458 	.word	0x58025458
 8005118:	5802546c 	.word	0x5802546c
 800511c:	58025480 	.word	0x58025480
 8005120:	58025494 	.word	0x58025494
 8005124:	1600963f 	.word	0x1600963f
 8005128:	58025940 	.word	0x58025940
 800512c:	1000823f 	.word	0x1000823f
 8005130:	40020940 	.word	0x40020940

08005134 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005134:	b480      	push	{r7}
 8005136:	b089      	sub	sp, #36	; 0x24
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800513e:	2300      	movs	r3, #0
 8005140:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005142:	4b89      	ldr	r3, [pc, #548]	; (8005368 <HAL_GPIO_Init+0x234>)
 8005144:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005146:	e194      	b.n	8005472 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	2101      	movs	r1, #1
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	fa01 f303 	lsl.w	r3, r1, r3
 8005154:	4013      	ands	r3, r2
 8005156:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	2b00      	cmp	r3, #0
 800515c:	f000 8186 	beq.w	800546c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	2b02      	cmp	r3, #2
 8005166:	d003      	beq.n	8005170 <HAL_GPIO_Init+0x3c>
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	2b12      	cmp	r3, #18
 800516e:	d123      	bne.n	80051b8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	08da      	lsrs	r2, r3, #3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	3208      	adds	r2, #8
 8005178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800517c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	f003 0307 	and.w	r3, r3, #7
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	220f      	movs	r2, #15
 8005188:	fa02 f303 	lsl.w	r3, r2, r3
 800518c:	43db      	mvns	r3, r3
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	4013      	ands	r3, r2
 8005192:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	691a      	ldr	r2, [r3, #16]
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	f003 0307 	and.w	r3, r3, #7
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	fa02 f303 	lsl.w	r3, r2, r3
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	08da      	lsrs	r2, r3, #3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	3208      	adds	r2, #8
 80051b2:	69b9      	ldr	r1, [r7, #24]
 80051b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	005b      	lsls	r3, r3, #1
 80051c2:	2203      	movs	r2, #3
 80051c4:	fa02 f303 	lsl.w	r3, r2, r3
 80051c8:	43db      	mvns	r3, r3
 80051ca:	69ba      	ldr	r2, [r7, #24]
 80051cc:	4013      	ands	r3, r2
 80051ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f003 0203 	and.w	r2, r3, #3
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	005b      	lsls	r3, r3, #1
 80051dc:	fa02 f303 	lsl.w	r3, r2, r3
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d00b      	beq.n	800520c <HAL_GPIO_Init+0xd8>
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d007      	beq.n	800520c <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005200:	2b11      	cmp	r3, #17
 8005202:	d003      	beq.n	800520c <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	2b12      	cmp	r3, #18
 800520a:	d130      	bne.n	800526e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	2203      	movs	r2, #3
 8005218:	fa02 f303 	lsl.w	r3, r2, r3
 800521c:	43db      	mvns	r3, r3
 800521e:	69ba      	ldr	r2, [r7, #24]
 8005220:	4013      	ands	r3, r2
 8005222:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	68da      	ldr	r2, [r3, #12]
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	005b      	lsls	r3, r3, #1
 800522c:	fa02 f303 	lsl.w	r3, r2, r3
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	4313      	orrs	r3, r2
 8005234:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005242:	2201      	movs	r2, #1
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	fa02 f303 	lsl.w	r3, r2, r3
 800524a:	43db      	mvns	r3, r3
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	4013      	ands	r3, r2
 8005250:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	091b      	lsrs	r3, r3, #4
 8005258:	f003 0201 	and.w	r2, r3, #1
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	fa02 f303 	lsl.w	r3, r2, r3
 8005262:	69ba      	ldr	r2, [r7, #24]
 8005264:	4313      	orrs	r3, r2
 8005266:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	005b      	lsls	r3, r3, #1
 8005278:	2203      	movs	r2, #3
 800527a:	fa02 f303 	lsl.w	r3, r2, r3
 800527e:	43db      	mvns	r3, r3
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	4013      	ands	r3, r2
 8005284:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	689a      	ldr	r2, [r3, #8]
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	005b      	lsls	r3, r3, #1
 800528e:	fa02 f303 	lsl.w	r3, r2, r3
 8005292:	69ba      	ldr	r2, [r7, #24]
 8005294:	4313      	orrs	r3, r2
 8005296:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	69ba      	ldr	r2, [r7, #24]
 800529c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f000 80e0 	beq.w	800546c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052ac:	4b2f      	ldr	r3, [pc, #188]	; (800536c <HAL_GPIO_Init+0x238>)
 80052ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80052b2:	4a2e      	ldr	r2, [pc, #184]	; (800536c <HAL_GPIO_Init+0x238>)
 80052b4:	f043 0302 	orr.w	r3, r3, #2
 80052b8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80052bc:	4b2b      	ldr	r3, [pc, #172]	; (800536c <HAL_GPIO_Init+0x238>)
 80052be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	60fb      	str	r3, [r7, #12]
 80052c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052ca:	4a29      	ldr	r2, [pc, #164]	; (8005370 <HAL_GPIO_Init+0x23c>)
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	089b      	lsrs	r3, r3, #2
 80052d0:	3302      	adds	r3, #2
 80052d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	220f      	movs	r2, #15
 80052e2:	fa02 f303 	lsl.w	r3, r2, r3
 80052e6:	43db      	mvns	r3, r3
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	4013      	ands	r3, r2
 80052ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a20      	ldr	r2, [pc, #128]	; (8005374 <HAL_GPIO_Init+0x240>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d052      	beq.n	800539c <HAL_GPIO_Init+0x268>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a1f      	ldr	r2, [pc, #124]	; (8005378 <HAL_GPIO_Init+0x244>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d031      	beq.n	8005362 <HAL_GPIO_Init+0x22e>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a1e      	ldr	r2, [pc, #120]	; (800537c <HAL_GPIO_Init+0x248>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d02b      	beq.n	800535e <HAL_GPIO_Init+0x22a>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a1d      	ldr	r2, [pc, #116]	; (8005380 <HAL_GPIO_Init+0x24c>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d025      	beq.n	800535a <HAL_GPIO_Init+0x226>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a1c      	ldr	r2, [pc, #112]	; (8005384 <HAL_GPIO_Init+0x250>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d01f      	beq.n	8005356 <HAL_GPIO_Init+0x222>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a1b      	ldr	r2, [pc, #108]	; (8005388 <HAL_GPIO_Init+0x254>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d019      	beq.n	8005352 <HAL_GPIO_Init+0x21e>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a1a      	ldr	r2, [pc, #104]	; (800538c <HAL_GPIO_Init+0x258>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d013      	beq.n	800534e <HAL_GPIO_Init+0x21a>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a19      	ldr	r2, [pc, #100]	; (8005390 <HAL_GPIO_Init+0x25c>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d00d      	beq.n	800534a <HAL_GPIO_Init+0x216>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a18      	ldr	r2, [pc, #96]	; (8005394 <HAL_GPIO_Init+0x260>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d007      	beq.n	8005346 <HAL_GPIO_Init+0x212>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a17      	ldr	r2, [pc, #92]	; (8005398 <HAL_GPIO_Init+0x264>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d101      	bne.n	8005342 <HAL_GPIO_Init+0x20e>
 800533e:	2309      	movs	r3, #9
 8005340:	e02d      	b.n	800539e <HAL_GPIO_Init+0x26a>
 8005342:	230a      	movs	r3, #10
 8005344:	e02b      	b.n	800539e <HAL_GPIO_Init+0x26a>
 8005346:	2308      	movs	r3, #8
 8005348:	e029      	b.n	800539e <HAL_GPIO_Init+0x26a>
 800534a:	2307      	movs	r3, #7
 800534c:	e027      	b.n	800539e <HAL_GPIO_Init+0x26a>
 800534e:	2306      	movs	r3, #6
 8005350:	e025      	b.n	800539e <HAL_GPIO_Init+0x26a>
 8005352:	2305      	movs	r3, #5
 8005354:	e023      	b.n	800539e <HAL_GPIO_Init+0x26a>
 8005356:	2304      	movs	r3, #4
 8005358:	e021      	b.n	800539e <HAL_GPIO_Init+0x26a>
 800535a:	2303      	movs	r3, #3
 800535c:	e01f      	b.n	800539e <HAL_GPIO_Init+0x26a>
 800535e:	2302      	movs	r3, #2
 8005360:	e01d      	b.n	800539e <HAL_GPIO_Init+0x26a>
 8005362:	2301      	movs	r3, #1
 8005364:	e01b      	b.n	800539e <HAL_GPIO_Init+0x26a>
 8005366:	bf00      	nop
 8005368:	58000080 	.word	0x58000080
 800536c:	58024400 	.word	0x58024400
 8005370:	58000400 	.word	0x58000400
 8005374:	58020000 	.word	0x58020000
 8005378:	58020400 	.word	0x58020400
 800537c:	58020800 	.word	0x58020800
 8005380:	58020c00 	.word	0x58020c00
 8005384:	58021000 	.word	0x58021000
 8005388:	58021400 	.word	0x58021400
 800538c:	58021800 	.word	0x58021800
 8005390:	58021c00 	.word	0x58021c00
 8005394:	58022000 	.word	0x58022000
 8005398:	58022400 	.word	0x58022400
 800539c:	2300      	movs	r3, #0
 800539e:	69fa      	ldr	r2, [r7, #28]
 80053a0:	f002 0203 	and.w	r2, r2, #3
 80053a4:	0092      	lsls	r2, r2, #2
 80053a6:	4093      	lsls	r3, r2
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80053ae:	4938      	ldr	r1, [pc, #224]	; (8005490 <HAL_GPIO_Init+0x35c>)
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	089b      	lsrs	r3, r3, #2
 80053b4:	3302      	adds	r3, #2
 80053b6:	69ba      	ldr	r2, [r7, #24]
 80053b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	43db      	mvns	r3, r3
 80053c6:	69ba      	ldr	r2, [r7, #24]
 80053c8:	4013      	ands	r3, r2
 80053ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d003      	beq.n	80053e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	4313      	orrs	r3, r2
 80053de:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	69ba      	ldr	r2, [r7, #24]
 80053e4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	43db      	mvns	r3, r3
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	4013      	ands	r3, r2
 80053f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d003      	beq.n	800540a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005402:	69ba      	ldr	r2, [r7, #24]
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	4313      	orrs	r3, r2
 8005408:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	69ba      	ldr	r2, [r7, #24]
 800540e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	43db      	mvns	r3, r3
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	4013      	ands	r3, r2
 8005420:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800542e:	69ba      	ldr	r2, [r7, #24]
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	4313      	orrs	r3, r2
 8005434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005436:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800543e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	43db      	mvns	r3, r3
 800544a:	69ba      	ldr	r2, [r7, #24]
 800544c:	4013      	ands	r3, r2
 800544e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d003      	beq.n	8005464 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800545c:	69ba      	ldr	r2, [r7, #24]
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	4313      	orrs	r3, r2
 8005462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005464:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	3301      	adds	r3, #1
 8005470:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	fa22 f303 	lsr.w	r3, r2, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	f47f ae63 	bne.w	8005148 <HAL_GPIO_Init+0x14>
  }
}
 8005482:	bf00      	nop
 8005484:	3724      	adds	r7, #36	; 0x24
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	58000400 	.word	0x58000400

08005494 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	460b      	mov	r3, r1
 800549e:	807b      	strh	r3, [r7, #2]
 80054a0:	4613      	mov	r3, r2
 80054a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80054a4:	787b      	ldrb	r3, [r7, #1]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054aa:	887a      	ldrh	r2, [r7, #2]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80054b0:	e003      	b.n	80054ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80054b2:	887b      	ldrh	r3, [r7, #2]
 80054b4:	041a      	lsls	r2, r3, #16
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	619a      	str	r2, [r3, #24]
}
 80054ba:	bf00      	nop
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b083      	sub	sp, #12
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
 80054ce:	460b      	mov	r3, r1
 80054d0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	695a      	ldr	r2, [r3, #20]
 80054d6:	887b      	ldrh	r3, [r7, #2]
 80054d8:	401a      	ands	r2, r3
 80054da:	887b      	ldrh	r3, [r7, #2]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d104      	bne.n	80054ea <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80054e0:	887b      	ldrh	r3, [r7, #2]
 80054e2:	041a      	lsls	r2, r3, #16
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80054e8:	e002      	b.n	80054f0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80054ea:	887a      	ldrh	r2, [r7, #2]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	619a      	str	r2, [r3, #24]
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e07f      	b.n	800560e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d106      	bne.n	8005528 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f7fb fdee 	bl	8001104 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2224      	movs	r2, #36	; 0x24
 800552c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f022 0201 	bic.w	r2, r2, #1
 800553e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800554c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	689a      	ldr	r2, [r3, #8]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800555c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d107      	bne.n	8005576 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	689a      	ldr	r2, [r3, #8]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005572:	609a      	str	r2, [r3, #8]
 8005574:	e006      	b.n	8005584 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	689a      	ldr	r2, [r3, #8]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005582:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	2b02      	cmp	r3, #2
 800558a:	d104      	bne.n	8005596 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005594:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6859      	ldr	r1, [r3, #4]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	4b1d      	ldr	r3, [pc, #116]	; (8005618 <HAL_I2C_Init+0x11c>)
 80055a2:	430b      	orrs	r3, r1
 80055a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68da      	ldr	r2, [r3, #12]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	691a      	ldr	r2, [r3, #16]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	ea42 0103 	orr.w	r1, r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	021a      	lsls	r2, r3, #8
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	430a      	orrs	r2, r1
 80055ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	69d9      	ldr	r1, [r3, #28]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a1a      	ldr	r2, [r3, #32]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	430a      	orrs	r2, r1
 80055de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f042 0201 	orr.w	r2, r2, #1
 80055ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2220      	movs	r2, #32
 80055fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	02008000 	.word	0x02008000

0800561c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b20      	cmp	r3, #32
 8005630:	d138      	bne.n	80056a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005638:	2b01      	cmp	r3, #1
 800563a:	d101      	bne.n	8005640 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800563c:	2302      	movs	r3, #2
 800563e:	e032      	b.n	80056a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2224      	movs	r2, #36	; 0x24
 800564c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f022 0201 	bic.w	r2, r2, #1
 800565e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800566e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6819      	ldr	r1, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	683a      	ldr	r2, [r7, #0]
 800567c:	430a      	orrs	r2, r1
 800567e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f042 0201 	orr.w	r2, r2, #1
 800568e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2220      	movs	r2, #32
 8005694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056a0:	2300      	movs	r3, #0
 80056a2:	e000      	b.n	80056a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80056a4:	2302      	movs	r3, #2
  }
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr

080056b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b085      	sub	sp, #20
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
 80056ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	2b20      	cmp	r3, #32
 80056c6:	d139      	bne.n	800573c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d101      	bne.n	80056d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80056d2:	2302      	movs	r3, #2
 80056d4:	e033      	b.n	800573e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2224      	movs	r2, #36	; 0x24
 80056e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f022 0201 	bic.w	r2, r2, #1
 80056f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005704:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	021b      	lsls	r3, r3, #8
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	4313      	orrs	r3, r2
 800570e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f042 0201 	orr.w	r2, r2, #1
 8005726:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2220      	movs	r2, #32
 800572c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005738:	2300      	movs	r3, #0
 800573a:	e000      	b.n	800573e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800573c:	2302      	movs	r3, #2
  }
}
 800573e:	4618      	mov	r0, r3
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800574a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800574c:	b08f      	sub	sp, #60	; 0x3c
 800574e:	af0a      	add	r7, sp, #40	; 0x28
 8005750:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d101      	bne.n	800575c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e116      	b.n	800598a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d106      	bne.n	800577c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f00b fafc 	bl	8010d74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2203      	movs	r2, #3
 8005780:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800578c:	2b00      	cmp	r3, #0
 800578e:	d102      	bne.n	8005796 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4618      	mov	r0, r3
 800579c:	f008 fb03 	bl	800dda6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	603b      	str	r3, [r7, #0]
 80057a6:	687e      	ldr	r6, [r7, #4]
 80057a8:	466d      	mov	r5, sp
 80057aa:	f106 0410 	add.w	r4, r6, #16
 80057ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80057ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80057be:	1d33      	adds	r3, r6, #4
 80057c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80057c2:	6838      	ldr	r0, [r7, #0]
 80057c4:	f008 f9da 	bl	800db7c <USB_CoreInit>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d005      	beq.n	80057da <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2202      	movs	r2, #2
 80057d2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e0d7      	b.n	800598a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2100      	movs	r1, #0
 80057e0:	4618      	mov	r0, r3
 80057e2:	f008 faf1 	bl	800ddc8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057e6:	2300      	movs	r3, #0
 80057e8:	73fb      	strb	r3, [r7, #15]
 80057ea:	e04a      	b.n	8005882 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80057ec:	7bfa      	ldrb	r2, [r7, #15]
 80057ee:	6879      	ldr	r1, [r7, #4]
 80057f0:	4613      	mov	r3, r2
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	1a9b      	subs	r3, r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	440b      	add	r3, r1
 80057fa:	333d      	adds	r3, #61	; 0x3d
 80057fc:	2201      	movs	r2, #1
 80057fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005800:	7bfa      	ldrb	r2, [r7, #15]
 8005802:	6879      	ldr	r1, [r7, #4]
 8005804:	4613      	mov	r3, r2
 8005806:	00db      	lsls	r3, r3, #3
 8005808:	1a9b      	subs	r3, r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	440b      	add	r3, r1
 800580e:	333c      	adds	r3, #60	; 0x3c
 8005810:	7bfa      	ldrb	r2, [r7, #15]
 8005812:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005814:	7bfa      	ldrb	r2, [r7, #15]
 8005816:	7bfb      	ldrb	r3, [r7, #15]
 8005818:	b298      	uxth	r0, r3
 800581a:	6879      	ldr	r1, [r7, #4]
 800581c:	4613      	mov	r3, r2
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	1a9b      	subs	r3, r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	440b      	add	r3, r1
 8005826:	3342      	adds	r3, #66	; 0x42
 8005828:	4602      	mov	r2, r0
 800582a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800582c:	7bfa      	ldrb	r2, [r7, #15]
 800582e:	6879      	ldr	r1, [r7, #4]
 8005830:	4613      	mov	r3, r2
 8005832:	00db      	lsls	r3, r3, #3
 8005834:	1a9b      	subs	r3, r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	440b      	add	r3, r1
 800583a:	333f      	adds	r3, #63	; 0x3f
 800583c:	2200      	movs	r2, #0
 800583e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005840:	7bfa      	ldrb	r2, [r7, #15]
 8005842:	6879      	ldr	r1, [r7, #4]
 8005844:	4613      	mov	r3, r2
 8005846:	00db      	lsls	r3, r3, #3
 8005848:	1a9b      	subs	r3, r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	440b      	add	r3, r1
 800584e:	3344      	adds	r3, #68	; 0x44
 8005850:	2200      	movs	r2, #0
 8005852:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005854:	7bfa      	ldrb	r2, [r7, #15]
 8005856:	6879      	ldr	r1, [r7, #4]
 8005858:	4613      	mov	r3, r2
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	1a9b      	subs	r3, r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	440b      	add	r3, r1
 8005862:	3348      	adds	r3, #72	; 0x48
 8005864:	2200      	movs	r2, #0
 8005866:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005868:	7bfa      	ldrb	r2, [r7, #15]
 800586a:	6879      	ldr	r1, [r7, #4]
 800586c:	4613      	mov	r3, r2
 800586e:	00db      	lsls	r3, r3, #3
 8005870:	1a9b      	subs	r3, r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	440b      	add	r3, r1
 8005876:	3350      	adds	r3, #80	; 0x50
 8005878:	2200      	movs	r2, #0
 800587a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800587c:	7bfb      	ldrb	r3, [r7, #15]
 800587e:	3301      	adds	r3, #1
 8005880:	73fb      	strb	r3, [r7, #15]
 8005882:	7bfa      	ldrb	r2, [r7, #15]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	429a      	cmp	r2, r3
 800588a:	d3af      	bcc.n	80057ec <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800588c:	2300      	movs	r3, #0
 800588e:	73fb      	strb	r3, [r7, #15]
 8005890:	e044      	b.n	800591c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005892:	7bfa      	ldrb	r2, [r7, #15]
 8005894:	6879      	ldr	r1, [r7, #4]
 8005896:	4613      	mov	r3, r2
 8005898:	00db      	lsls	r3, r3, #3
 800589a:	1a9b      	subs	r3, r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	440b      	add	r3, r1
 80058a0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80058a4:	2200      	movs	r2, #0
 80058a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80058a8:	7bfa      	ldrb	r2, [r7, #15]
 80058aa:	6879      	ldr	r1, [r7, #4]
 80058ac:	4613      	mov	r3, r2
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	1a9b      	subs	r3, r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	440b      	add	r3, r1
 80058b6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80058ba:	7bfa      	ldrb	r2, [r7, #15]
 80058bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80058be:	7bfa      	ldrb	r2, [r7, #15]
 80058c0:	6879      	ldr	r1, [r7, #4]
 80058c2:	4613      	mov	r3, r2
 80058c4:	00db      	lsls	r3, r3, #3
 80058c6:	1a9b      	subs	r3, r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	440b      	add	r3, r1
 80058cc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80058d0:	2200      	movs	r2, #0
 80058d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80058d4:	7bfa      	ldrb	r2, [r7, #15]
 80058d6:	6879      	ldr	r1, [r7, #4]
 80058d8:	4613      	mov	r3, r2
 80058da:	00db      	lsls	r3, r3, #3
 80058dc:	1a9b      	subs	r3, r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	440b      	add	r3, r1
 80058e2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80058e6:	2200      	movs	r2, #0
 80058e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80058ea:	7bfa      	ldrb	r2, [r7, #15]
 80058ec:	6879      	ldr	r1, [r7, #4]
 80058ee:	4613      	mov	r3, r2
 80058f0:	00db      	lsls	r3, r3, #3
 80058f2:	1a9b      	subs	r3, r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	440b      	add	r3, r1
 80058f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80058fc:	2200      	movs	r2, #0
 80058fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005900:	7bfa      	ldrb	r2, [r7, #15]
 8005902:	6879      	ldr	r1, [r7, #4]
 8005904:	4613      	mov	r3, r2
 8005906:	00db      	lsls	r3, r3, #3
 8005908:	1a9b      	subs	r3, r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	440b      	add	r3, r1
 800590e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005912:	2200      	movs	r2, #0
 8005914:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005916:	7bfb      	ldrb	r3, [r7, #15]
 8005918:	3301      	adds	r3, #1
 800591a:	73fb      	strb	r3, [r7, #15]
 800591c:	7bfa      	ldrb	r2, [r7, #15]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	429a      	cmp	r2, r3
 8005924:	d3b5      	bcc.n	8005892 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	603b      	str	r3, [r7, #0]
 800592c:	687e      	ldr	r6, [r7, #4]
 800592e:	466d      	mov	r5, sp
 8005930:	f106 0410 	add.w	r4, r6, #16
 8005934:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005936:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005938:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800593a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800593c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005940:	e885 0003 	stmia.w	r5, {r0, r1}
 8005944:	1d33      	adds	r3, r6, #4
 8005946:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005948:	6838      	ldr	r0, [r7, #0]
 800594a:	f008 fa67 	bl	800de1c <USB_DevInit>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d005      	beq.n	8005960 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2202      	movs	r2, #2
 8005958:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e014      	b.n	800598a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005974:	2b01      	cmp	r3, #1
 8005976:	d102      	bne.n	800597e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f001 f891 	bl	8006aa0 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4618      	mov	r0, r3
 8005984:	f009 fa4e 	bl	800ee24 <USB_DevDisconnect>

  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005992 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b084      	sub	sp, #16
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d101      	bne.n	80059ae <HAL_PCD_Start+0x1c>
 80059aa:	2302      	movs	r3, #2
 80059ac:	e020      	b.n	80059f0 <HAL_PCD_Start+0x5e>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d109      	bne.n	80059d2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d005      	beq.n	80059d2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4618      	mov	r0, r3
 80059d8:	f009 fa0c 	bl	800edf4 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4618      	mov	r0, r3
 80059e2:	f008 f9cf 	bl	800dd84 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3710      	adds	r7, #16
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80059f8:	b590      	push	{r4, r7, lr}
 80059fa:	b08d      	sub	sp, #52	; 0x34
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a06:	6a3b      	ldr	r3, [r7, #32]
 8005a08:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f009 fab3 	bl	800ef7a <USB_GetMode>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f040 83ca 	bne.w	80061b0 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4618      	mov	r0, r3
 8005a22:	f009 fa17 	bl	800ee54 <USB_ReadInterrupts>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f000 83c0 	beq.w	80061ae <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f009 fa0e 	bl	800ee54 <USB_ReadInterrupts>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d107      	bne.n	8005a52 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	695a      	ldr	r2, [r3, #20]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f002 0202 	and.w	r2, r2, #2
 8005a50:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f009 f9fc 	bl	800ee54 <USB_ReadInterrupts>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	f003 0310 	and.w	r3, r3, #16
 8005a62:	2b10      	cmp	r3, #16
 8005a64:	d161      	bne.n	8005b2a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	699a      	ldr	r2, [r3, #24]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f022 0210 	bic.w	r2, r2, #16
 8005a74:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	f003 020f 	and.w	r2, r3, #15
 8005a82:	4613      	mov	r3, r2
 8005a84:	00db      	lsls	r3, r3, #3
 8005a86:	1a9b      	subs	r3, r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	4413      	add	r3, r2
 8005a92:	3304      	adds	r3, #4
 8005a94:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	0c5b      	lsrs	r3, r3, #17
 8005a9a:	f003 030f 	and.w	r3, r3, #15
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d124      	bne.n	8005aec <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005aa2:	69ba      	ldr	r2, [r7, #24]
 8005aa4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d035      	beq.n	8005b1a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	091b      	lsrs	r3, r3, #4
 8005ab6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005ab8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	461a      	mov	r2, r3
 8005ac0:	6a38      	ldr	r0, [r7, #32]
 8005ac2:	f009 f874 	bl	800ebae <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	68da      	ldr	r2, [r3, #12]
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	091b      	lsrs	r3, r3, #4
 8005ace:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ad2:	441a      	add	r2, r3
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	699a      	ldr	r2, [r3, #24]
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	091b      	lsrs	r3, r3, #4
 8005ae0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ae4:	441a      	add	r2, r3
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	619a      	str	r2, [r3, #24]
 8005aea:	e016      	b.n	8005b1a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	0c5b      	lsrs	r3, r3, #17
 8005af0:	f003 030f 	and.w	r3, r3, #15
 8005af4:	2b06      	cmp	r3, #6
 8005af6:	d110      	bne.n	8005b1a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005afe:	2208      	movs	r2, #8
 8005b00:	4619      	mov	r1, r3
 8005b02:	6a38      	ldr	r0, [r7, #32]
 8005b04:	f009 f853 	bl	800ebae <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	699a      	ldr	r2, [r3, #24]
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	091b      	lsrs	r3, r3, #4
 8005b10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b14:	441a      	add	r2, r3
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	699a      	ldr	r2, [r3, #24]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f042 0210 	orr.w	r2, r2, #16
 8005b28:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f009 f990 	bl	800ee54 <USB_ReadInterrupts>
 8005b34:	4603      	mov	r3, r0
 8005b36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b3a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b3e:	d16e      	bne.n	8005c1e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f009 f996 	bl	800ee7a <USB_ReadDevAllOutEpInterrupt>
 8005b4e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005b50:	e062      	b.n	8005c18 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d057      	beq.n	8005c0c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b62:	b2d2      	uxtb	r2, r2
 8005b64:	4611      	mov	r1, r2
 8005b66:	4618      	mov	r0, r3
 8005b68:	f009 f9bb 	bl	800eee2 <USB_ReadDevOutEPInterrupt>
 8005b6c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00c      	beq.n	8005b92 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7a:	015a      	lsls	r2, r3, #5
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b84:	461a      	mov	r2, r3
 8005b86:	2301      	movs	r3, #1
 8005b88:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005b8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 fddd 	bl	800674c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	f003 0308 	and.w	r3, r3, #8
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00c      	beq.n	8005bb6 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	015a      	lsls	r2, r3, #5
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba8:	461a      	mov	r2, r3
 8005baa:	2308      	movs	r3, #8
 8005bac:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005bae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 fed7 	bl	8006964 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	f003 0310 	and.w	r3, r3, #16
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d008      	beq.n	8005bd2 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bcc:	461a      	mov	r2, r3
 8005bce:	2310      	movs	r3, #16
 8005bd0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	f003 0320 	and.w	r3, r3, #32
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d008      	beq.n	8005bee <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	4413      	add	r3, r2
 8005be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be8:	461a      	mov	r2, r3
 8005bea:	2320      	movs	r3, #32
 8005bec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d009      	beq.n	8005c0c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c04:	461a      	mov	r2, r3
 8005c06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c0a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0e:	3301      	adds	r3, #1
 8005c10:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c14:	085b      	lsrs	r3, r3, #1
 8005c16:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d199      	bne.n	8005b52 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4618      	mov	r0, r3
 8005c24:	f009 f916 	bl	800ee54 <USB_ReadInterrupts>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c32:	f040 80c0 	bne.w	8005db6 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f009 f937 	bl	800eeae <USB_ReadDevAllInEpInterrupt>
 8005c40:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005c42:	2300      	movs	r3, #0
 8005c44:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005c46:	e0b2      	b.n	8005dae <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4a:	f003 0301 	and.w	r3, r3, #1
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f000 80a7 	beq.w	8005da2 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c5a:	b2d2      	uxtb	r2, r2
 8005c5c:	4611      	mov	r1, r2
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f009 f95d 	bl	800ef1e <USB_ReadDevInEPInterrupt>
 8005c64:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	f003 0301 	and.w	r3, r3, #1
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d057      	beq.n	8005d20 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c72:	f003 030f 	and.w	r3, r3, #15
 8005c76:	2201      	movs	r2, #1
 8005c78:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	43db      	mvns	r3, r3
 8005c8a:	69f9      	ldr	r1, [r7, #28]
 8005c8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c90:	4013      	ands	r3, r2
 8005c92:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d132      	bne.n	8005d14 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005cae:	6879      	ldr	r1, [r7, #4]
 8005cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	00db      	lsls	r3, r3, #3
 8005cb6:	1a9b      	subs	r3, r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	440b      	add	r3, r1
 8005cbc:	3348      	adds	r3, #72	; 0x48
 8005cbe:	6819      	ldr	r1, [r3, #0]
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	00db      	lsls	r3, r3, #3
 8005cc8:	1a9b      	subs	r3, r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4403      	add	r3, r0
 8005cce:	3344      	adds	r3, #68	; 0x44
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4419      	add	r1, r3
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cd8:	4613      	mov	r3, r2
 8005cda:	00db      	lsls	r3, r3, #3
 8005cdc:	1a9b      	subs	r3, r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4403      	add	r3, r0
 8005ce2:	3348      	adds	r3, #72	; 0x48
 8005ce4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d113      	bne.n	8005d14 <HAL_PCD_IRQHandler+0x31c>
 8005cec:	6879      	ldr	r1, [r7, #4]
 8005cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	00db      	lsls	r3, r3, #3
 8005cf4:	1a9b      	subs	r3, r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	440b      	add	r3, r1
 8005cfa:	3350      	adds	r3, #80	; 0x50
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d108      	bne.n	8005d14 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6818      	ldr	r0, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	2101      	movs	r1, #1
 8005d10:	f009 f966 	bl	800efe0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	4619      	mov	r1, r3
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f00b f8b7 	bl	8010e8e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	f003 0308 	and.w	r3, r3, #8
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d008      	beq.n	8005d3c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2c:	015a      	lsls	r2, r3, #5
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	4413      	add	r3, r2
 8005d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d36:	461a      	mov	r2, r3
 8005d38:	2308      	movs	r3, #8
 8005d3a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	f003 0310 	and.w	r3, r3, #16
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d008      	beq.n	8005d58 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d48:	015a      	lsls	r2, r3, #5
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d52:	461a      	mov	r2, r3
 8005d54:	2310      	movs	r3, #16
 8005d56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d008      	beq.n	8005d74 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d6e:	461a      	mov	r2, r3
 8005d70:	2340      	movs	r3, #64	; 0x40
 8005d72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	f003 0302 	and.w	r3, r3, #2
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d008      	beq.n	8005d90 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	015a      	lsls	r2, r3, #5
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	4413      	add	r3, r2
 8005d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d003      	beq.n	8005da2 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005d9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 fc48 	bl	8006632 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	3301      	adds	r3, #1
 8005da6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005daa:	085b      	lsrs	r3, r3, #1
 8005dac:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f47f af49 	bne.w	8005c48 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f009 f84a 	bl	800ee54 <USB_ReadInterrupts>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dca:	d122      	bne.n	8005e12 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	69fa      	ldr	r2, [r7, #28]
 8005dd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dda:	f023 0301 	bic.w	r3, r3, #1
 8005dde:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d108      	bne.n	8005dfc <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005df2:	2100      	movs	r1, #0
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 fe77 	bl	8006ae8 <HAL_PCDEx_LPM_Callback>
 8005dfa:	e002      	b.n	8005e02 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f00b f8bd 	bl	8010f7c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	695a      	ldr	r2, [r3, #20]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005e10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f009 f81c 	bl	800ee54 <USB_ReadInterrupts>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e26:	d112      	bne.n	8005e4e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d102      	bne.n	8005e3e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f00b f879 	bl	8010f30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	695a      	ldr	r2, [r3, #20]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005e4c:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4618      	mov	r0, r3
 8005e54:	f008 fffe 	bl	800ee54 <USB_ReadInterrupts>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e62:	d121      	bne.n	8005ea8 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	695a      	ldr	r2, [r3, #20]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005e72:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d111      	bne.n	8005ea2 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e8c:	089b      	lsrs	r3, r3, #2
 8005e8e:	f003 020f 	and.w	r2, r3, #15
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005e98:	2101      	movs	r1, #1
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 fe24 	bl	8006ae8 <HAL_PCDEx_LPM_Callback>
 8005ea0:	e002      	b.n	8005ea8 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f00b f844 	bl	8010f30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4618      	mov	r0, r3
 8005eae:	f008 ffd1 	bl	800ee54 <USB_ReadInterrupts>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ebc:	f040 80c7 	bne.w	800604e <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	69fa      	ldr	r2, [r7, #28]
 8005eca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ece:	f023 0301 	bic.w	r3, r3, #1
 8005ed2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2110      	movs	r1, #16
 8005eda:	4618      	mov	r0, r3
 8005edc:	f008 f8fc 	bl	800e0d8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ee4:	e056      	b.n	8005f94 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee8:	015a      	lsls	r2, r3, #5
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	4413      	add	r3, r2
 8005eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ef8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efc:	015a      	lsls	r2, r3, #5
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f0a:	0151      	lsls	r1, r2, #5
 8005f0c:	69fa      	ldr	r2, [r7, #28]
 8005f0e:	440a      	add	r2, r1
 8005f10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f14:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f18:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f1c:	015a      	lsls	r2, r3, #5
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	4413      	add	r3, r2
 8005f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f2a:	0151      	lsls	r1, r2, #5
 8005f2c:	69fa      	ldr	r2, [r7, #28]
 8005f2e:	440a      	add	r2, r1
 8005f30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f34:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f38:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3c:	015a      	lsls	r2, r3, #5
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	4413      	add	r3, r2
 8005f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f46:	461a      	mov	r2, r3
 8005f48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f4c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f5e:	0151      	lsls	r1, r2, #5
 8005f60:	69fa      	ldr	r2, [r7, #28]
 8005f62:	440a      	add	r2, r1
 8005f64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f68:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f6c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f70:	015a      	lsls	r2, r3, #5
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	4413      	add	r3, r2
 8005f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f7e:	0151      	lsls	r1, r2, #5
 8005f80:	69fa      	ldr	r2, [r7, #28]
 8005f82:	440a      	add	r2, r1
 8005f84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f8c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f90:	3301      	adds	r3, #1
 8005f92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d3a3      	bcc.n	8005ee6 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fa4:	69db      	ldr	r3, [r3, #28]
 8005fa6:	69fa      	ldr	r2, [r7, #28]
 8005fa8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fac:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005fb0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d016      	beq.n	8005fe8 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fc4:	69fa      	ldr	r2, [r7, #28]
 8005fc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fca:	f043 030b 	orr.w	r3, r3, #11
 8005fce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fda:	69fa      	ldr	r2, [r7, #28]
 8005fdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fe0:	f043 030b 	orr.w	r3, r3, #11
 8005fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8005fe6:	e015      	b.n	8006014 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fee:	695a      	ldr	r2, [r3, #20]
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	f242 032b 	movw	r3, #8235	; 0x202b
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	69fa      	ldr	r2, [r7, #28]
 800600a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800600e:	f043 030b 	orr.w	r3, r3, #11
 8006012:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	69fa      	ldr	r2, [r7, #28]
 800601e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006022:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006026:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6818      	ldr	r0, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006038:	461a      	mov	r2, r3
 800603a:	f008 ffd1 	bl	800efe0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	695a      	ldr	r2, [r3, #20]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800604c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4618      	mov	r0, r3
 8006054:	f008 fefe 	bl	800ee54 <USB_ReadInterrupts>
 8006058:	4603      	mov	r3, r0
 800605a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800605e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006062:	d124      	bne.n	80060ae <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4618      	mov	r0, r3
 800606a:	f008 ff95 	bl	800ef98 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4618      	mov	r0, r3
 8006074:	f008 f891 	bl	800e19a <USB_GetDevSpeed>
 8006078:	4603      	mov	r3, r0
 800607a:	461a      	mov	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681c      	ldr	r4, [r3, #0]
 8006084:	f001 fc94 	bl	80079b0 <HAL_RCC_GetHCLKFreq>
 8006088:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800608e:	b2db      	uxtb	r3, r3
 8006090:	461a      	mov	r2, r3
 8006092:	4620      	mov	r0, r4
 8006094:	f007 fdd4 	bl	800dc40 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f00a ff20 	bl	8010ede <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	695a      	ldr	r2, [r3, #20]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80060ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4618      	mov	r0, r3
 80060b4:	f008 fece 	bl	800ee54 <USB_ReadInterrupts>
 80060b8:	4603      	mov	r3, r0
 80060ba:	f003 0308 	and.w	r3, r3, #8
 80060be:	2b08      	cmp	r3, #8
 80060c0:	d10a      	bne.n	80060d8 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f00a fefd 	bl	8010ec2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	695a      	ldr	r2, [r3, #20]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f002 0208 	and.w	r2, r2, #8
 80060d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4618      	mov	r0, r3
 80060de:	f008 feb9 	bl	800ee54 <USB_ReadInterrupts>
 80060e2:	4603      	mov	r3, r0
 80060e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060ec:	d10f      	bne.n	800610e <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80060ee:	2300      	movs	r3, #0
 80060f0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	4619      	mov	r1, r3
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f00a ff5f 	bl	8010fbc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	695a      	ldr	r2, [r3, #20]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800610c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4618      	mov	r0, r3
 8006114:	f008 fe9e 	bl	800ee54 <USB_ReadInterrupts>
 8006118:	4603      	mov	r3, r0
 800611a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800611e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006122:	d10f      	bne.n	8006144 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006124:	2300      	movs	r3, #0
 8006126:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612a:	b2db      	uxtb	r3, r3
 800612c:	4619      	mov	r1, r3
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f00a ff32 	bl	8010f98 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	695a      	ldr	r2, [r3, #20]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006142:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4618      	mov	r0, r3
 800614a:	f008 fe83 	bl	800ee54 <USB_ReadInterrupts>
 800614e:	4603      	mov	r3, r0
 8006150:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006158:	d10a      	bne.n	8006170 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f00a ff40 	bl	8010fe0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	695a      	ldr	r2, [r3, #20]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800616e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4618      	mov	r0, r3
 8006176:	f008 fe6d 	bl	800ee54 <USB_ReadInterrupts>
 800617a:	4603      	mov	r3, r0
 800617c:	f003 0304 	and.w	r3, r3, #4
 8006180:	2b04      	cmp	r3, #4
 8006182:	d115      	bne.n	80061b0 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	f003 0304 	and.w	r3, r3, #4
 8006192:	2b00      	cmp	r3, #0
 8006194:	d002      	beq.n	800619c <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f00a ff30 	bl	8010ffc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6859      	ldr	r1, [r3, #4]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	69ba      	ldr	r2, [r7, #24]
 80061a8:	430a      	orrs	r2, r1
 80061aa:	605a      	str	r2, [r3, #4]
 80061ac:	e000      	b.n	80061b0 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80061ae:	bf00      	nop
    }
  }
}
 80061b0:	3734      	adds	r7, #52	; 0x34
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd90      	pop	{r4, r7, pc}

080061b6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b082      	sub	sp, #8
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
 80061be:	460b      	mov	r3, r1
 80061c0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d101      	bne.n	80061d0 <HAL_PCD_SetAddress+0x1a>
 80061cc:	2302      	movs	r3, #2
 80061ce:	e013      	b.n	80061f8 <HAL_PCD_SetAddress+0x42>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	78fa      	ldrb	r2, [r7, #3]
 80061dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	78fa      	ldrb	r2, [r7, #3]
 80061e6:	4611      	mov	r1, r2
 80061e8:	4618      	mov	r0, r3
 80061ea:	f008 fddd 	bl	800eda8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3708      	adds	r7, #8
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	4608      	mov	r0, r1
 800620a:	4611      	mov	r1, r2
 800620c:	461a      	mov	r2, r3
 800620e:	4603      	mov	r3, r0
 8006210:	70fb      	strb	r3, [r7, #3]
 8006212:	460b      	mov	r3, r1
 8006214:	803b      	strh	r3, [r7, #0]
 8006216:	4613      	mov	r3, r2
 8006218:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800621a:	2300      	movs	r3, #0
 800621c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800621e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006222:	2b00      	cmp	r3, #0
 8006224:	da0f      	bge.n	8006246 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006226:	78fb      	ldrb	r3, [r7, #3]
 8006228:	f003 020f 	and.w	r2, r3, #15
 800622c:	4613      	mov	r3, r2
 800622e:	00db      	lsls	r3, r3, #3
 8006230:	1a9b      	subs	r3, r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	3338      	adds	r3, #56	; 0x38
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	4413      	add	r3, r2
 800623a:	3304      	adds	r3, #4
 800623c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2201      	movs	r2, #1
 8006242:	705a      	strb	r2, [r3, #1]
 8006244:	e00f      	b.n	8006266 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006246:	78fb      	ldrb	r3, [r7, #3]
 8006248:	f003 020f 	and.w	r2, r3, #15
 800624c:	4613      	mov	r3, r2
 800624e:	00db      	lsls	r3, r3, #3
 8006250:	1a9b      	subs	r3, r3, r2
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	4413      	add	r3, r2
 800625c:	3304      	adds	r3, #4
 800625e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006266:	78fb      	ldrb	r3, [r7, #3]
 8006268:	f003 030f 	and.w	r3, r3, #15
 800626c:	b2da      	uxtb	r2, r3
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006272:	883a      	ldrh	r2, [r7, #0]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	78ba      	ldrb	r2, [r7, #2]
 800627c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	785b      	ldrb	r3, [r3, #1]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d004      	beq.n	8006290 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	b29a      	uxth	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006290:	78bb      	ldrb	r3, [r7, #2]
 8006292:	2b02      	cmp	r3, #2
 8006294:	d102      	bne.n	800629c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2200      	movs	r2, #0
 800629a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d101      	bne.n	80062aa <HAL_PCD_EP_Open+0xaa>
 80062a6:	2302      	movs	r3, #2
 80062a8:	e00e      	b.n	80062c8 <HAL_PCD_EP_Open+0xc8>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68f9      	ldr	r1, [r7, #12]
 80062b8:	4618      	mov	r0, r3
 80062ba:	f007 ff93 	bl	800e1e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80062c6:	7afb      	ldrb	r3, [r7, #11]
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3710      	adds	r7, #16
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	460b      	mov	r3, r1
 80062da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80062dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	da0f      	bge.n	8006304 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062e4:	78fb      	ldrb	r3, [r7, #3]
 80062e6:	f003 020f 	and.w	r2, r3, #15
 80062ea:	4613      	mov	r3, r2
 80062ec:	00db      	lsls	r3, r3, #3
 80062ee:	1a9b      	subs	r3, r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	3338      	adds	r3, #56	; 0x38
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	4413      	add	r3, r2
 80062f8:	3304      	adds	r3, #4
 80062fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2201      	movs	r2, #1
 8006300:	705a      	strb	r2, [r3, #1]
 8006302:	e00f      	b.n	8006324 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006304:	78fb      	ldrb	r3, [r7, #3]
 8006306:	f003 020f 	and.w	r2, r3, #15
 800630a:	4613      	mov	r3, r2
 800630c:	00db      	lsls	r3, r3, #3
 800630e:	1a9b      	subs	r3, r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	4413      	add	r3, r2
 800631a:	3304      	adds	r3, #4
 800631c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006324:	78fb      	ldrb	r3, [r7, #3]
 8006326:	f003 030f 	and.w	r3, r3, #15
 800632a:	b2da      	uxtb	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006336:	2b01      	cmp	r3, #1
 8006338:	d101      	bne.n	800633e <HAL_PCD_EP_Close+0x6e>
 800633a:	2302      	movs	r3, #2
 800633c:	e00e      	b.n	800635c <HAL_PCD_EP_Close+0x8c>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2201      	movs	r2, #1
 8006342:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68f9      	ldr	r1, [r7, #12]
 800634c:	4618      	mov	r0, r3
 800634e:	f007 ffd1 	bl	800e2f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b086      	sub	sp, #24
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	607a      	str	r2, [r7, #4]
 800636e:	603b      	str	r3, [r7, #0]
 8006370:	460b      	mov	r3, r1
 8006372:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006374:	7afb      	ldrb	r3, [r7, #11]
 8006376:	f003 020f 	and.w	r2, r3, #15
 800637a:	4613      	mov	r3, r2
 800637c:	00db      	lsls	r3, r3, #3
 800637e:	1a9b      	subs	r3, r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	4413      	add	r3, r2
 800638a:	3304      	adds	r3, #4
 800638c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	2200      	movs	r2, #0
 800639e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	2200      	movs	r2, #0
 80063a4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063a6:	7afb      	ldrb	r3, [r7, #11]
 80063a8:	f003 030f 	and.w	r3, r3, #15
 80063ac:	b2da      	uxtb	r2, r3
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d102      	bne.n	80063c0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80063c0:	7afb      	ldrb	r3, [r7, #11]
 80063c2:	f003 030f 	and.w	r3, r3, #15
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d109      	bne.n	80063de <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6818      	ldr	r0, [r3, #0]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	461a      	mov	r2, r3
 80063d6:	6979      	ldr	r1, [r7, #20]
 80063d8:	f008 fa5c 	bl	800e894 <USB_EP0StartXfer>
 80063dc:	e008      	b.n	80063f0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6818      	ldr	r0, [r3, #0]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	461a      	mov	r2, r3
 80063ea:	6979      	ldr	r1, [r7, #20]
 80063ec:	f008 f806 	bl	800e3fc <USB_EPStartXfer>
  }

  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3718      	adds	r7, #24
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80063fa:	b480      	push	{r7}
 80063fc:	b083      	sub	sp, #12
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
 8006402:	460b      	mov	r3, r1
 8006404:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006406:	78fb      	ldrb	r3, [r7, #3]
 8006408:	f003 020f 	and.w	r2, r3, #15
 800640c:	6879      	ldr	r1, [r7, #4]
 800640e:	4613      	mov	r3, r2
 8006410:	00db      	lsls	r3, r3, #3
 8006412:	1a9b      	subs	r3, r3, r2
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	440b      	add	r3, r1
 8006418:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800641c:	681b      	ldr	r3, [r3, #0]
}
 800641e:	4618      	mov	r0, r3
 8006420:	370c      	adds	r7, #12
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr

0800642a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b086      	sub	sp, #24
 800642e:	af00      	add	r7, sp, #0
 8006430:	60f8      	str	r0, [r7, #12]
 8006432:	607a      	str	r2, [r7, #4]
 8006434:	603b      	str	r3, [r7, #0]
 8006436:	460b      	mov	r3, r1
 8006438:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800643a:	7afb      	ldrb	r3, [r7, #11]
 800643c:	f003 020f 	and.w	r2, r3, #15
 8006440:	4613      	mov	r3, r2
 8006442:	00db      	lsls	r3, r3, #3
 8006444:	1a9b      	subs	r3, r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	3338      	adds	r3, #56	; 0x38
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	4413      	add	r3, r2
 800644e:	3304      	adds	r3, #4
 8006450:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	683a      	ldr	r2, [r7, #0]
 800645c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	2200      	movs	r2, #0
 8006462:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	2201      	movs	r2, #1
 8006468:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800646a:	7afb      	ldrb	r3, [r7, #11]
 800646c:	f003 030f 	and.w	r3, r3, #15
 8006470:	b2da      	uxtb	r2, r3
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d102      	bne.n	8006484 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006484:	7afb      	ldrb	r3, [r7, #11]
 8006486:	f003 030f 	and.w	r3, r3, #15
 800648a:	2b00      	cmp	r3, #0
 800648c:	d109      	bne.n	80064a2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6818      	ldr	r0, [r3, #0]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	b2db      	uxtb	r3, r3
 8006498:	461a      	mov	r2, r3
 800649a:	6979      	ldr	r1, [r7, #20]
 800649c:	f008 f9fa 	bl	800e894 <USB_EP0StartXfer>
 80064a0:	e008      	b.n	80064b4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6818      	ldr	r0, [r3, #0]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	461a      	mov	r2, r3
 80064ae:	6979      	ldr	r1, [r7, #20]
 80064b0:	f007 ffa4 	bl	800e3fc <USB_EPStartXfer>
  }

  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3718      	adds	r7, #24
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}

080064be <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b084      	sub	sp, #16
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
 80064c6:	460b      	mov	r3, r1
 80064c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80064ca:	78fb      	ldrb	r3, [r7, #3]
 80064cc:	f003 020f 	and.w	r2, r3, #15
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d901      	bls.n	80064dc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e050      	b.n	800657e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80064dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	da0f      	bge.n	8006504 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064e4:	78fb      	ldrb	r3, [r7, #3]
 80064e6:	f003 020f 	and.w	r2, r3, #15
 80064ea:	4613      	mov	r3, r2
 80064ec:	00db      	lsls	r3, r3, #3
 80064ee:	1a9b      	subs	r3, r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	3338      	adds	r3, #56	; 0x38
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	4413      	add	r3, r2
 80064f8:	3304      	adds	r3, #4
 80064fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2201      	movs	r2, #1
 8006500:	705a      	strb	r2, [r3, #1]
 8006502:	e00d      	b.n	8006520 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006504:	78fa      	ldrb	r2, [r7, #3]
 8006506:	4613      	mov	r3, r2
 8006508:	00db      	lsls	r3, r3, #3
 800650a:	1a9b      	subs	r3, r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	4413      	add	r3, r2
 8006516:	3304      	adds	r3, #4
 8006518:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2200      	movs	r2, #0
 800651e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2201      	movs	r2, #1
 8006524:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006526:	78fb      	ldrb	r3, [r7, #3]
 8006528:	f003 030f 	and.w	r3, r3, #15
 800652c:	b2da      	uxtb	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006538:	2b01      	cmp	r3, #1
 800653a:	d101      	bne.n	8006540 <HAL_PCD_EP_SetStall+0x82>
 800653c:	2302      	movs	r3, #2
 800653e:	e01e      	b.n	800657e <HAL_PCD_EP_SetStall+0xc0>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68f9      	ldr	r1, [r7, #12]
 800654e:	4618      	mov	r0, r3
 8006550:	f008 fb56 	bl	800ec00 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006554:	78fb      	ldrb	r3, [r7, #3]
 8006556:	f003 030f 	and.w	r3, r3, #15
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10a      	bne.n	8006574 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6818      	ldr	r0, [r3, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	b2d9      	uxtb	r1, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800656e:	461a      	mov	r2, r3
 8006570:	f008 fd36 	bl	800efe0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b084      	sub	sp, #16
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
 800658e:	460b      	mov	r3, r1
 8006590:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006592:	78fb      	ldrb	r3, [r7, #3]
 8006594:	f003 020f 	and.w	r2, r3, #15
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	429a      	cmp	r2, r3
 800659e:	d901      	bls.n	80065a4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e042      	b.n	800662a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80065a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	da0f      	bge.n	80065cc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065ac:	78fb      	ldrb	r3, [r7, #3]
 80065ae:	f003 020f 	and.w	r2, r3, #15
 80065b2:	4613      	mov	r3, r2
 80065b4:	00db      	lsls	r3, r3, #3
 80065b6:	1a9b      	subs	r3, r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	3338      	adds	r3, #56	; 0x38
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	4413      	add	r3, r2
 80065c0:	3304      	adds	r3, #4
 80065c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2201      	movs	r2, #1
 80065c8:	705a      	strb	r2, [r3, #1]
 80065ca:	e00f      	b.n	80065ec <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80065cc:	78fb      	ldrb	r3, [r7, #3]
 80065ce:	f003 020f 	and.w	r2, r3, #15
 80065d2:	4613      	mov	r3, r2
 80065d4:	00db      	lsls	r3, r3, #3
 80065d6:	1a9b      	subs	r3, r3, r2
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	4413      	add	r3, r2
 80065e2:	3304      	adds	r3, #4
 80065e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80065f2:	78fb      	ldrb	r3, [r7, #3]
 80065f4:	f003 030f 	and.w	r3, r3, #15
 80065f8:	b2da      	uxtb	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006604:	2b01      	cmp	r3, #1
 8006606:	d101      	bne.n	800660c <HAL_PCD_EP_ClrStall+0x86>
 8006608:	2302      	movs	r3, #2
 800660a:	e00e      	b.n	800662a <HAL_PCD_EP_ClrStall+0xa4>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68f9      	ldr	r1, [r7, #12]
 800661a:	4618      	mov	r0, r3
 800661c:	f008 fb5e 	bl	800ecdc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3710      	adds	r7, #16
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}

08006632 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006632:	b580      	push	{r7, lr}
 8006634:	b08a      	sub	sp, #40	; 0x28
 8006636:	af02      	add	r7, sp, #8
 8006638:	6078      	str	r0, [r7, #4]
 800663a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006646:	683a      	ldr	r2, [r7, #0]
 8006648:	4613      	mov	r3, r2
 800664a:	00db      	lsls	r3, r3, #3
 800664c:	1a9b      	subs	r3, r3, r2
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	3338      	adds	r3, #56	; 0x38
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	4413      	add	r3, r2
 8006656:	3304      	adds	r3, #4
 8006658:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	699a      	ldr	r2, [r3, #24]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	429a      	cmp	r2, r3
 8006664:	d901      	bls.n	800666a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e06c      	b.n	8006744 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	695a      	ldr	r2, [r3, #20]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	69fa      	ldr	r2, [r7, #28]
 800667c:	429a      	cmp	r2, r3
 800667e:	d902      	bls.n	8006686 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	3303      	adds	r3, #3
 800668a:	089b      	lsrs	r3, r3, #2
 800668c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800668e:	e02b      	b.n	80066e8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	695a      	ldr	r2, [r3, #20]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	69fa      	ldr	r2, [r7, #28]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d902      	bls.n	80066ac <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	3303      	adds	r3, #3
 80066b0:	089b      	lsrs	r3, r3, #2
 80066b2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	68d9      	ldr	r1, [r3, #12]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	b2da      	uxtb	r2, r3
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	9300      	str	r3, [sp, #0]
 80066c8:	4603      	mov	r3, r0
 80066ca:	6978      	ldr	r0, [r7, #20]
 80066cc:	f008 fa3a 	bl	800eb44 <USB_WritePacket>

    ep->xfer_buff  += len;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	68da      	ldr	r2, [r3, #12]
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	441a      	add	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	699a      	ldr	r2, [r3, #24]
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	441a      	add	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	015a      	lsls	r2, r3, #5
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	4413      	add	r3, r2
 80066f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	69ba      	ldr	r2, [r7, #24]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d809      	bhi.n	8006712 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	699a      	ldr	r2, [r3, #24]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006706:	429a      	cmp	r2, r3
 8006708:	d203      	bcs.n	8006712 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1be      	bne.n	8006690 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	695a      	ldr	r2, [r3, #20]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	429a      	cmp	r2, r3
 800671c:	d811      	bhi.n	8006742 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	f003 030f 	and.w	r3, r3, #15
 8006724:	2201      	movs	r2, #1
 8006726:	fa02 f303 	lsl.w	r3, r2, r3
 800672a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006732:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	43db      	mvns	r3, r3
 8006738:	6939      	ldr	r1, [r7, #16]
 800673a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800673e:	4013      	ands	r3, r2
 8006740:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3720      	adds	r7, #32
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b086      	sub	sp, #24
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	333c      	adds	r3, #60	; 0x3c
 8006764:	3304      	adds	r3, #4
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	015a      	lsls	r2, r3, #5
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	4413      	add	r3, r2
 8006772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	2b01      	cmp	r3, #1
 8006780:	f040 80a0 	bne.w	80068c4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	f003 0308 	and.w	r3, r3, #8
 800678a:	2b00      	cmp	r3, #0
 800678c:	d015      	beq.n	80067ba <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	4a72      	ldr	r2, [pc, #456]	; (800695c <PCD_EP_OutXfrComplete_int+0x210>)
 8006792:	4293      	cmp	r3, r2
 8006794:	f240 80dd 	bls.w	8006952 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f000 80d7 	beq.w	8006952 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	015a      	lsls	r2, r3, #5
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	4413      	add	r3, r2
 80067ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b0:	461a      	mov	r2, r3
 80067b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067b6:	6093      	str	r3, [r2, #8]
 80067b8:	e0cb      	b.n	8006952 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	f003 0320 	and.w	r3, r3, #32
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d009      	beq.n	80067d8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	015a      	lsls	r2, r3, #5
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	4413      	add	r3, r2
 80067cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d0:	461a      	mov	r2, r3
 80067d2:	2320      	movs	r3, #32
 80067d4:	6093      	str	r3, [r2, #8]
 80067d6:	e0bc      	b.n	8006952 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f040 80b7 	bne.w	8006952 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	4a5d      	ldr	r2, [pc, #372]	; (800695c <PCD_EP_OutXfrComplete_int+0x210>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d90f      	bls.n	800680c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00a      	beq.n	800680c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	015a      	lsls	r2, r3, #5
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006802:	461a      	mov	r2, r3
 8006804:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006808:	6093      	str	r3, [r2, #8]
 800680a:	e0a2      	b.n	8006952 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800680c:	6879      	ldr	r1, [r7, #4]
 800680e:	683a      	ldr	r2, [r7, #0]
 8006810:	4613      	mov	r3, r2
 8006812:	00db      	lsls	r3, r3, #3
 8006814:	1a9b      	subs	r3, r3, r2
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	440b      	add	r3, r1
 800681a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800681e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	0159      	lsls	r1, r3, #5
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	440b      	add	r3, r1
 8006828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006832:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	683a      	ldr	r2, [r7, #0]
 8006838:	4613      	mov	r3, r2
 800683a:	00db      	lsls	r3, r3, #3
 800683c:	1a9b      	subs	r3, r3, r2
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4403      	add	r3, r0
 8006842:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006846:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006848:	6879      	ldr	r1, [r7, #4]
 800684a:	683a      	ldr	r2, [r7, #0]
 800684c:	4613      	mov	r3, r2
 800684e:	00db      	lsls	r3, r3, #3
 8006850:	1a9b      	subs	r3, r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	440b      	add	r3, r1
 8006856:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800685a:	6819      	ldr	r1, [r3, #0]
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	683a      	ldr	r2, [r7, #0]
 8006860:	4613      	mov	r3, r2
 8006862:	00db      	lsls	r3, r3, #3
 8006864:	1a9b      	subs	r3, r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	4403      	add	r3, r0
 800686a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4419      	add	r1, r3
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	683a      	ldr	r2, [r7, #0]
 8006876:	4613      	mov	r3, r2
 8006878:	00db      	lsls	r3, r3, #3
 800687a:	1a9b      	subs	r3, r3, r2
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4403      	add	r3, r0
 8006880:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006884:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d114      	bne.n	80068b6 <PCD_EP_OutXfrComplete_int+0x16a>
 800688c:	6879      	ldr	r1, [r7, #4]
 800688e:	683a      	ldr	r2, [r7, #0]
 8006890:	4613      	mov	r3, r2
 8006892:	00db      	lsls	r3, r3, #3
 8006894:	1a9b      	subs	r3, r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	440b      	add	r3, r1
 800689a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d108      	bne.n	80068b6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6818      	ldr	r0, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80068ae:	461a      	mov	r2, r3
 80068b0:	2101      	movs	r1, #1
 80068b2:	f008 fb95 	bl	800efe0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	4619      	mov	r1, r3
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f00a facb 	bl	8010e58 <HAL_PCD_DataOutStageCallback>
 80068c2:	e046      	b.n	8006952 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	4a26      	ldr	r2, [pc, #152]	; (8006960 <PCD_EP_OutXfrComplete_int+0x214>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d124      	bne.n	8006916 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00a      	beq.n	80068ec <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	015a      	lsls	r2, r3, #5
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	4413      	add	r3, r2
 80068de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e2:	461a      	mov	r2, r3
 80068e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068e8:	6093      	str	r3, [r2, #8]
 80068ea:	e032      	b.n	8006952 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	f003 0320 	and.w	r3, r3, #32
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d008      	beq.n	8006908 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	015a      	lsls	r2, r3, #5
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	4413      	add	r3, r2
 80068fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006902:	461a      	mov	r2, r3
 8006904:	2320      	movs	r3, #32
 8006906:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	b2db      	uxtb	r3, r3
 800690c:	4619      	mov	r1, r3
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f00a faa2 	bl	8010e58 <HAL_PCD_DataOutStageCallback>
 8006914:	e01d      	b.n	8006952 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d114      	bne.n	8006946 <PCD_EP_OutXfrComplete_int+0x1fa>
 800691c:	6879      	ldr	r1, [r7, #4]
 800691e:	683a      	ldr	r2, [r7, #0]
 8006920:	4613      	mov	r3, r2
 8006922:	00db      	lsls	r3, r3, #3
 8006924:	1a9b      	subs	r3, r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	440b      	add	r3, r1
 800692a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d108      	bne.n	8006946 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6818      	ldr	r0, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800693e:	461a      	mov	r2, r3
 8006940:	2100      	movs	r1, #0
 8006942:	f008 fb4d 	bl	800efe0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	b2db      	uxtb	r3, r3
 800694a:	4619      	mov	r1, r3
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f00a fa83 	bl	8010e58 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3718      	adds	r7, #24
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	4f54300a 	.word	0x4f54300a
 8006960:	4f54310a 	.word	0x4f54310a

08006964 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b086      	sub	sp, #24
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	333c      	adds	r3, #60	; 0x3c
 800697c:	3304      	adds	r3, #4
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	015a      	lsls	r2, r3, #5
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	4413      	add	r3, r2
 800698a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	4a15      	ldr	r2, [pc, #84]	; (80069ec <PCD_EP_OutSetupPacket_int+0x88>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d90e      	bls.n	80069b8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d009      	beq.n	80069b8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	015a      	lsls	r2, r3, #5
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	4413      	add	r3, r2
 80069ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b0:	461a      	mov	r2, r3
 80069b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069b6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f00a fa3b 	bl	8010e34 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	4a0a      	ldr	r2, [pc, #40]	; (80069ec <PCD_EP_OutSetupPacket_int+0x88>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d90c      	bls.n	80069e0 <PCD_EP_OutSetupPacket_int+0x7c>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d108      	bne.n	80069e0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6818      	ldr	r0, [r3, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80069d8:	461a      	mov	r2, r3
 80069da:	2101      	movs	r1, #1
 80069dc:	f008 fb00 	bl	800efe0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3718      	adds	r7, #24
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	4f54300a 	.word	0x4f54300a

080069f0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	460b      	mov	r3, r1
 80069fa:	70fb      	strb	r3, [r7, #3]
 80069fc:	4613      	mov	r3, r2
 80069fe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a06:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006a08:	78fb      	ldrb	r3, [r7, #3]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d107      	bne.n	8006a1e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006a0e:	883b      	ldrh	r3, [r7, #0]
 8006a10:	0419      	lsls	r1, r3, #16
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	629a      	str	r2, [r3, #40]	; 0x28
 8006a1c:	e028      	b.n	8006a70 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a24:	0c1b      	lsrs	r3, r3, #16
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	4413      	add	r3, r2
 8006a2a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	73fb      	strb	r3, [r7, #15]
 8006a30:	e00d      	b.n	8006a4e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	7bfb      	ldrb	r3, [r7, #15]
 8006a38:	3340      	adds	r3, #64	; 0x40
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	4413      	add	r3, r2
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	0c1b      	lsrs	r3, r3, #16
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	4413      	add	r3, r2
 8006a46:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006a48:	7bfb      	ldrb	r3, [r7, #15]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	73fb      	strb	r3, [r7, #15]
 8006a4e:	7bfa      	ldrb	r2, [r7, #15]
 8006a50:	78fb      	ldrb	r3, [r7, #3]
 8006a52:	3b01      	subs	r3, #1
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d3ec      	bcc.n	8006a32 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006a58:	883b      	ldrh	r3, [r7, #0]
 8006a5a:	0418      	lsls	r0, r3, #16
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6819      	ldr	r1, [r3, #0]
 8006a60:	78fb      	ldrb	r3, [r7, #3]
 8006a62:	3b01      	subs	r3, #1
 8006a64:	68ba      	ldr	r2, [r7, #8]
 8006a66:	4302      	orrs	r2, r0
 8006a68:	3340      	adds	r3, #64	; 0x40
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	440b      	add	r3, r1
 8006a6e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3714      	adds	r7, #20
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr

08006a7e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b083      	sub	sp, #12
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
 8006a86:	460b      	mov	r3, r1
 8006a88:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	887a      	ldrh	r2, [r7, #2]
 8006a90:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ace:	4b05      	ldr	r3, [pc, #20]	; (8006ae4 <HAL_PCDEx_ActivateLPM+0x44>)
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006ad6:	2300      	movs	r3, #0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3714      	adds	r7, #20
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr
 8006ae4:	10000003 	.word	0x10000003

08006ae8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	460b      	mov	r3, r1
 8006af2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8006b00:	b480      	push	{r7}
 8006b02:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8006b04:	4b05      	ldr	r3, [pc, #20]	; (8006b1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a04      	ldr	r2, [pc, #16]	; (8006b1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b0e:	6013      	str	r3, [r2, #0]
}
 8006b10:	bf00      	nop
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	58024800 	.word	0x58024800

08006b20 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006b28:	4b19      	ldr	r3, [pc, #100]	; (8006b90 <HAL_PWREx_ConfigSupply+0x70>)
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	f003 0304 	and.w	r3, r3, #4
 8006b30:	2b04      	cmp	r3, #4
 8006b32:	d00a      	beq.n	8006b4a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006b34:	4b16      	ldr	r3, [pc, #88]	; (8006b90 <HAL_PWREx_ConfigSupply+0x70>)
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	f003 0307 	and.w	r3, r3, #7
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d001      	beq.n	8006b46 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e01f      	b.n	8006b86 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006b46:	2300      	movs	r3, #0
 8006b48:	e01d      	b.n	8006b86 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006b4a:	4b11      	ldr	r3, [pc, #68]	; (8006b90 <HAL_PWREx_ConfigSupply+0x70>)
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	f023 0207 	bic.w	r2, r3, #7
 8006b52:	490f      	ldr	r1, [pc, #60]	; (8006b90 <HAL_PWREx_ConfigSupply+0x70>)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006b5a:	f7fb fcd3 	bl	8002504 <HAL_GetTick>
 8006b5e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006b60:	e009      	b.n	8006b76 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006b62:	f7fb fccf 	bl	8002504 <HAL_GetTick>
 8006b66:	4602      	mov	r2, r0
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b70:	d901      	bls.n	8006b76 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e007      	b.n	8006b86 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006b76:	4b06      	ldr	r3, [pc, #24]	; (8006b90 <HAL_PWREx_ConfigSupply+0x70>)
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b82:	d1ee      	bne.n	8006b62 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3710      	adds	r7, #16
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	58024800 	.word	0x58024800

08006b94 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006b94:	b480      	push	{r7}
 8006b96:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006b98:	4b05      	ldr	r3, [pc, #20]	; (8006bb0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	4a04      	ldr	r2, [pc, #16]	; (8006bb0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006b9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ba2:	60d3      	str	r3, [r2, #12]
}
 8006ba4:	bf00      	nop
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
 8006bae:	bf00      	nop
 8006bb0:	58024800 	.word	0x58024800

08006bb4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b08c      	sub	sp, #48	; 0x30
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d101      	bne.n	8006bc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e3c4      	b.n	8007350 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0301 	and.w	r3, r3, #1
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f000 8087 	beq.w	8006ce2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bd4:	4ba2      	ldr	r3, [pc, #648]	; (8006e60 <HAL_RCC_OscConfig+0x2ac>)
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006bde:	4ba0      	ldr	r3, [pc, #640]	; (8006e60 <HAL_RCC_OscConfig+0x2ac>)
 8006be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be6:	2b10      	cmp	r3, #16
 8006be8:	d007      	beq.n	8006bfa <HAL_RCC_OscConfig+0x46>
 8006bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bec:	2b18      	cmp	r3, #24
 8006bee:	d110      	bne.n	8006c12 <HAL_RCC_OscConfig+0x5e>
 8006bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf2:	f003 0303 	and.w	r3, r3, #3
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d10b      	bne.n	8006c12 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bfa:	4b99      	ldr	r3, [pc, #612]	; (8006e60 <HAL_RCC_OscConfig+0x2ac>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d06c      	beq.n	8006ce0 <HAL_RCC_OscConfig+0x12c>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d168      	bne.n	8006ce0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e39e      	b.n	8007350 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c1a:	d106      	bne.n	8006c2a <HAL_RCC_OscConfig+0x76>
 8006c1c:	4b90      	ldr	r3, [pc, #576]	; (8006e60 <HAL_RCC_OscConfig+0x2ac>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a8f      	ldr	r2, [pc, #572]	; (8006e60 <HAL_RCC_OscConfig+0x2ac>)
 8006c22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c26:	6013      	str	r3, [r2, #0]
 8006c28:	e02e      	b.n	8006c88 <HAL_RCC_OscConfig+0xd4>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10c      	bne.n	8006c4c <HAL_RCC_OscConfig+0x98>
 8006c32:	4b8b      	ldr	r3, [pc, #556]	; (8006e60 <HAL_RCC_OscConfig+0x2ac>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a8a      	ldr	r2, [pc, #552]	; (8006e60 <HAL_RCC_OscConfig+0x2ac>)
 8006c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c3c:	6013      	str	r3, [r2, #0]
 8006c3e:	4b88      	ldr	r3, [pc, #544]	; (8006e60 <HAL_RCC_OscConfig+0x2ac>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a87      	ldr	r2, [pc, #540]	; (8006e60 <HAL_RCC_OscConfig+0x2ac>)
 8006c44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c48:	6013      	str	r3, [r2, #0]
 8006c4a:	e01d      	b.n	8006c88 <HAL_RCC_OscConfig+0xd4>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c54:	d10c      	bne.n	8006c70 <HAL_RCC_OscConfig+0xbc>
 8006c56:	4b82      	ldr	r3, [pc, #520]	; (8006e60 <HAL_RCC_OscConfig+0x2ac>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a81      	ldr	r2, [pc, #516]	; (8006e60 <HAL_RCC_OscConfig+0x2ac>)
 8006c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c60:	6013      	str	r3, [r2, #0]
 8006c62:	4b7f      	ldr	r3, [pc, #508]	; (8006e60 <HAL_RCC_OscConfig+0x2ac>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a7e      	ldr	r2, [pc, #504]	; (8006e60 <HAL_RCC_OscConfig+0x2ac>)
 8006c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c6c:	6013      	str	r3, [r2, #0]
 8006c6e:	e00b      	b.n	8006c88 <HAL_RCC_OscConfig+0xd4>
 8006c70:	4b7b      	ldr	r3, [pc, #492]	; (8006e60 <HAL_RCC_OscConfig+0x2ac>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a7a      	ldr	r2, [pc, #488]	; (8006e60 <HAL_RCC_OscConfig+0x2ac>)
 8006c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c7a:	6013      	str	r3, [r2, #0]
 8006c7c:	4b78      	ldr	r3, [pc, #480]	; (8006e60 <HAL_RCC_OscConfig+0x2ac>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a77      	ldr	r2, [pc, #476]	; (8006e60 <HAL_RCC_OscConfig+0x2ac>)
 8006c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d013      	beq.n	8006cb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c90:	f7fb fc38 	bl	8002504 <HAL_GetTick>
 8006c94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c96:	e008      	b.n	8006caa <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c98:	f7fb fc34 	bl	8002504 <HAL_GetTick>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	2b64      	cmp	r3, #100	; 0x64
 8006ca4:	d901      	bls.n	8006caa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e352      	b.n	8007350 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006caa:	4b6d      	ldr	r3, [pc, #436]	; (8006e60 <HAL_RCC_OscConfig+0x2ac>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d0f0      	beq.n	8006c98 <HAL_RCC_OscConfig+0xe4>
 8006cb6:	e014      	b.n	8006ce2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cb8:	f7fb fc24 	bl	8002504 <HAL_GetTick>
 8006cbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006cbe:	e008      	b.n	8006cd2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006cc0:	f7fb fc20 	bl	8002504 <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	2b64      	cmp	r3, #100	; 0x64
 8006ccc:	d901      	bls.n	8006cd2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e33e      	b.n	8007350 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006cd2:	4b63      	ldr	r3, [pc, #396]	; (8006e60 <HAL_RCC_OscConfig+0x2ac>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1f0      	bne.n	8006cc0 <HAL_RCC_OscConfig+0x10c>
 8006cde:	e000      	b.n	8006ce2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0302 	and.w	r3, r3, #2
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f000 8092 	beq.w	8006e14 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cf0:	4b5b      	ldr	r3, [pc, #364]	; (8006e60 <HAL_RCC_OscConfig+0x2ac>)
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cf8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006cfa:	4b59      	ldr	r3, [pc, #356]	; (8006e60 <HAL_RCC_OscConfig+0x2ac>)
 8006cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cfe:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006d00:	6a3b      	ldr	r3, [r7, #32]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d007      	beq.n	8006d16 <HAL_RCC_OscConfig+0x162>
 8006d06:	6a3b      	ldr	r3, [r7, #32]
 8006d08:	2b18      	cmp	r3, #24
 8006d0a:	d12d      	bne.n	8006d68 <HAL_RCC_OscConfig+0x1b4>
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	f003 0303 	and.w	r3, r3, #3
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d128      	bne.n	8006d68 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d16:	4b52      	ldr	r3, [pc, #328]	; (8006e60 <HAL_RCC_OscConfig+0x2ac>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0304 	and.w	r3, r3, #4
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d005      	beq.n	8006d2e <HAL_RCC_OscConfig+0x17a>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d101      	bne.n	8006d2e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e310      	b.n	8007350 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d2e:	f7fb fc17 	bl	8002560 <HAL_GetREVID>
 8006d32:	4602      	mov	r2, r0
 8006d34:	f241 0303 	movw	r3, #4099	; 0x1003
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d80a      	bhi.n	8006d52 <HAL_RCC_OscConfig+0x19e>
 8006d3c:	4b48      	ldr	r3, [pc, #288]	; (8006e60 <HAL_RCC_OscConfig+0x2ac>)
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	031b      	lsls	r3, r3, #12
 8006d4a:	4945      	ldr	r1, [pc, #276]	; (8006e60 <HAL_RCC_OscConfig+0x2ac>)
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d50:	e060      	b.n	8006e14 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d52:	4b43      	ldr	r3, [pc, #268]	; (8006e60 <HAL_RCC_OscConfig+0x2ac>)
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	061b      	lsls	r3, r3, #24
 8006d60:	493f      	ldr	r1, [pc, #252]	; (8006e60 <HAL_RCC_OscConfig+0x2ac>)
 8006d62:	4313      	orrs	r3, r2
 8006d64:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d66:	e055      	b.n	8006e14 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d038      	beq.n	8006de2 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006d70:	4b3b      	ldr	r3, [pc, #236]	; (8006e60 <HAL_RCC_OscConfig+0x2ac>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f023 0219 	bic.w	r2, r3, #25
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	4938      	ldr	r1, [pc, #224]	; (8006e60 <HAL_RCC_OscConfig+0x2ac>)
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d82:	f7fb fbbf 	bl	8002504 <HAL_GetTick>
 8006d86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d88:	e008      	b.n	8006d9c <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d8a:	f7fb fbbb 	bl	8002504 <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d901      	bls.n	8006d9c <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e2d9      	b.n	8007350 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d9c:	4b30      	ldr	r3, [pc, #192]	; (8006e60 <HAL_RCC_OscConfig+0x2ac>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0304 	and.w	r3, r3, #4
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d0f0      	beq.n	8006d8a <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006da8:	f7fb fbda 	bl	8002560 <HAL_GetREVID>
 8006dac:	4602      	mov	r2, r0
 8006dae:	f241 0303 	movw	r3, #4099	; 0x1003
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d80a      	bhi.n	8006dcc <HAL_RCC_OscConfig+0x218>
 8006db6:	4b2a      	ldr	r3, [pc, #168]	; (8006e60 <HAL_RCC_OscConfig+0x2ac>)
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	031b      	lsls	r3, r3, #12
 8006dc4:	4926      	ldr	r1, [pc, #152]	; (8006e60 <HAL_RCC_OscConfig+0x2ac>)
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	604b      	str	r3, [r1, #4]
 8006dca:	e023      	b.n	8006e14 <HAL_RCC_OscConfig+0x260>
 8006dcc:	4b24      	ldr	r3, [pc, #144]	; (8006e60 <HAL_RCC_OscConfig+0x2ac>)
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	061b      	lsls	r3, r3, #24
 8006dda:	4921      	ldr	r1, [pc, #132]	; (8006e60 <HAL_RCC_OscConfig+0x2ac>)
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	604b      	str	r3, [r1, #4]
 8006de0:	e018      	b.n	8006e14 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006de2:	4b1f      	ldr	r3, [pc, #124]	; (8006e60 <HAL_RCC_OscConfig+0x2ac>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a1e      	ldr	r2, [pc, #120]	; (8006e60 <HAL_RCC_OscConfig+0x2ac>)
 8006de8:	f023 0301 	bic.w	r3, r3, #1
 8006dec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dee:	f7fb fb89 	bl	8002504 <HAL_GetTick>
 8006df2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006df4:	e008      	b.n	8006e08 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006df6:	f7fb fb85 	bl	8002504 <HAL_GetTick>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfe:	1ad3      	subs	r3, r2, r3
 8006e00:	2b02      	cmp	r3, #2
 8006e02:	d901      	bls.n	8006e08 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8006e04:	2303      	movs	r3, #3
 8006e06:	e2a3      	b.n	8007350 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006e08:	4b15      	ldr	r3, [pc, #84]	; (8006e60 <HAL_RCC_OscConfig+0x2ac>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 0304 	and.w	r3, r3, #4
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d1f0      	bne.n	8006df6 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 0310 	and.w	r3, r3, #16
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f000 8091 	beq.w	8006f44 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e22:	4b0f      	ldr	r3, [pc, #60]	; (8006e60 <HAL_RCC_OscConfig+0x2ac>)
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e2a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e2c:	4b0c      	ldr	r3, [pc, #48]	; (8006e60 <HAL_RCC_OscConfig+0x2ac>)
 8006e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e30:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	2b08      	cmp	r3, #8
 8006e36:	d007      	beq.n	8006e48 <HAL_RCC_OscConfig+0x294>
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	2b18      	cmp	r3, #24
 8006e3c:	d12f      	bne.n	8006e9e <HAL_RCC_OscConfig+0x2ea>
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	f003 0303 	and.w	r3, r3, #3
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d12a      	bne.n	8006e9e <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e48:	4b05      	ldr	r3, [pc, #20]	; (8006e60 <HAL_RCC_OscConfig+0x2ac>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d007      	beq.n	8006e64 <HAL_RCC_OscConfig+0x2b0>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	69db      	ldr	r3, [r3, #28]
 8006e58:	2b80      	cmp	r3, #128	; 0x80
 8006e5a:	d003      	beq.n	8006e64 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e277      	b.n	8007350 <HAL_RCC_OscConfig+0x79c>
 8006e60:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e64:	f7fb fb7c 	bl	8002560 <HAL_GetREVID>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	f241 0303 	movw	r3, #4099	; 0x1003
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d80a      	bhi.n	8006e88 <HAL_RCC_OscConfig+0x2d4>
 8006e72:	4ba2      	ldr	r3, [pc, #648]	; (80070fc <HAL_RCC_OscConfig+0x548>)
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
 8006e7e:	069b      	lsls	r3, r3, #26
 8006e80:	499e      	ldr	r1, [pc, #632]	; (80070fc <HAL_RCC_OscConfig+0x548>)
 8006e82:	4313      	orrs	r3, r2
 8006e84:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e86:	e05d      	b.n	8006f44 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e88:	4b9c      	ldr	r3, [pc, #624]	; (80070fc <HAL_RCC_OscConfig+0x548>)
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a1b      	ldr	r3, [r3, #32]
 8006e94:	061b      	lsls	r3, r3, #24
 8006e96:	4999      	ldr	r1, [pc, #612]	; (80070fc <HAL_RCC_OscConfig+0x548>)
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e9c:	e052      	b.n	8006f44 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	69db      	ldr	r3, [r3, #28]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d035      	beq.n	8006f12 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006ea6:	4b95      	ldr	r3, [pc, #596]	; (80070fc <HAL_RCC_OscConfig+0x548>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a94      	ldr	r2, [pc, #592]	; (80070fc <HAL_RCC_OscConfig+0x548>)
 8006eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eb2:	f7fb fb27 	bl	8002504 <HAL_GetTick>
 8006eb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006eb8:	e008      	b.n	8006ecc <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006eba:	f7fb fb23 	bl	8002504 <HAL_GetTick>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d901      	bls.n	8006ecc <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	e241      	b.n	8007350 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006ecc:	4b8b      	ldr	r3, [pc, #556]	; (80070fc <HAL_RCC_OscConfig+0x548>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d0f0      	beq.n	8006eba <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006ed8:	f7fb fb42 	bl	8002560 <HAL_GetREVID>
 8006edc:	4602      	mov	r2, r0
 8006ede:	f241 0303 	movw	r3, #4099	; 0x1003
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d80a      	bhi.n	8006efc <HAL_RCC_OscConfig+0x348>
 8006ee6:	4b85      	ldr	r3, [pc, #532]	; (80070fc <HAL_RCC_OscConfig+0x548>)
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	069b      	lsls	r3, r3, #26
 8006ef4:	4981      	ldr	r1, [pc, #516]	; (80070fc <HAL_RCC_OscConfig+0x548>)
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	604b      	str	r3, [r1, #4]
 8006efa:	e023      	b.n	8006f44 <HAL_RCC_OscConfig+0x390>
 8006efc:	4b7f      	ldr	r3, [pc, #508]	; (80070fc <HAL_RCC_OscConfig+0x548>)
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a1b      	ldr	r3, [r3, #32]
 8006f08:	061b      	lsls	r3, r3, #24
 8006f0a:	497c      	ldr	r1, [pc, #496]	; (80070fc <HAL_RCC_OscConfig+0x548>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	60cb      	str	r3, [r1, #12]
 8006f10:	e018      	b.n	8006f44 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006f12:	4b7a      	ldr	r3, [pc, #488]	; (80070fc <HAL_RCC_OscConfig+0x548>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a79      	ldr	r2, [pc, #484]	; (80070fc <HAL_RCC_OscConfig+0x548>)
 8006f18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f1e:	f7fb faf1 	bl	8002504 <HAL_GetTick>
 8006f22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006f24:	e008      	b.n	8006f38 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006f26:	f7fb faed 	bl	8002504 <HAL_GetTick>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d901      	bls.n	8006f38 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8006f34:	2303      	movs	r3, #3
 8006f36:	e20b      	b.n	8007350 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006f38:	4b70      	ldr	r3, [pc, #448]	; (80070fc <HAL_RCC_OscConfig+0x548>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1f0      	bne.n	8006f26 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 0308 	and.w	r3, r3, #8
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d036      	beq.n	8006fbe <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	695b      	ldr	r3, [r3, #20]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d019      	beq.n	8006f8c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f58:	4b68      	ldr	r3, [pc, #416]	; (80070fc <HAL_RCC_OscConfig+0x548>)
 8006f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f5c:	4a67      	ldr	r2, [pc, #412]	; (80070fc <HAL_RCC_OscConfig+0x548>)
 8006f5e:	f043 0301 	orr.w	r3, r3, #1
 8006f62:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f64:	f7fb face 	bl	8002504 <HAL_GetTick>
 8006f68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f6a:	e008      	b.n	8006f7e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f6c:	f7fb faca 	bl	8002504 <HAL_GetTick>
 8006f70:	4602      	mov	r2, r0
 8006f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d901      	bls.n	8006f7e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e1e8      	b.n	8007350 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f7e:	4b5f      	ldr	r3, [pc, #380]	; (80070fc <HAL_RCC_OscConfig+0x548>)
 8006f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f82:	f003 0302 	and.w	r3, r3, #2
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d0f0      	beq.n	8006f6c <HAL_RCC_OscConfig+0x3b8>
 8006f8a:	e018      	b.n	8006fbe <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f8c:	4b5b      	ldr	r3, [pc, #364]	; (80070fc <HAL_RCC_OscConfig+0x548>)
 8006f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f90:	4a5a      	ldr	r2, [pc, #360]	; (80070fc <HAL_RCC_OscConfig+0x548>)
 8006f92:	f023 0301 	bic.w	r3, r3, #1
 8006f96:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f98:	f7fb fab4 	bl	8002504 <HAL_GetTick>
 8006f9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f9e:	e008      	b.n	8006fb2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006fa0:	f7fb fab0 	bl	8002504 <HAL_GetTick>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d901      	bls.n	8006fb2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e1ce      	b.n	8007350 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006fb2:	4b52      	ldr	r3, [pc, #328]	; (80070fc <HAL_RCC_OscConfig+0x548>)
 8006fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fb6:	f003 0302 	and.w	r3, r3, #2
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1f0      	bne.n	8006fa0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 0320 	and.w	r3, r3, #32
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d036      	beq.n	8007038 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d019      	beq.n	8007006 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006fd2:	4b4a      	ldr	r3, [pc, #296]	; (80070fc <HAL_RCC_OscConfig+0x548>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a49      	ldr	r2, [pc, #292]	; (80070fc <HAL_RCC_OscConfig+0x548>)
 8006fd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006fdc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006fde:	f7fb fa91 	bl	8002504 <HAL_GetTick>
 8006fe2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006fe4:	e008      	b.n	8006ff8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006fe6:	f7fb fa8d 	bl	8002504 <HAL_GetTick>
 8006fea:	4602      	mov	r2, r0
 8006fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d901      	bls.n	8006ff8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e1ab      	b.n	8007350 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006ff8:	4b40      	ldr	r3, [pc, #256]	; (80070fc <HAL_RCC_OscConfig+0x548>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007000:	2b00      	cmp	r3, #0
 8007002:	d0f0      	beq.n	8006fe6 <HAL_RCC_OscConfig+0x432>
 8007004:	e018      	b.n	8007038 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007006:	4b3d      	ldr	r3, [pc, #244]	; (80070fc <HAL_RCC_OscConfig+0x548>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a3c      	ldr	r2, [pc, #240]	; (80070fc <HAL_RCC_OscConfig+0x548>)
 800700c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007010:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007012:	f7fb fa77 	bl	8002504 <HAL_GetTick>
 8007016:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007018:	e008      	b.n	800702c <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800701a:	f7fb fa73 	bl	8002504 <HAL_GetTick>
 800701e:	4602      	mov	r2, r0
 8007020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	2b02      	cmp	r3, #2
 8007026:	d901      	bls.n	800702c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8007028:	2303      	movs	r3, #3
 800702a:	e191      	b.n	8007350 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800702c:	4b33      	ldr	r3, [pc, #204]	; (80070fc <HAL_RCC_OscConfig+0x548>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1f0      	bne.n	800701a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0304 	and.w	r3, r3, #4
 8007040:	2b00      	cmp	r3, #0
 8007042:	f000 8086 	beq.w	8007152 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007046:	4b2e      	ldr	r3, [pc, #184]	; (8007100 <HAL_RCC_OscConfig+0x54c>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a2d      	ldr	r2, [pc, #180]	; (8007100 <HAL_RCC_OscConfig+0x54c>)
 800704c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007050:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007052:	f7fb fa57 	bl	8002504 <HAL_GetTick>
 8007056:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007058:	e008      	b.n	800706c <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800705a:	f7fb fa53 	bl	8002504 <HAL_GetTick>
 800705e:	4602      	mov	r2, r0
 8007060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	2b64      	cmp	r3, #100	; 0x64
 8007066:	d901      	bls.n	800706c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8007068:	2303      	movs	r3, #3
 800706a:	e171      	b.n	8007350 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800706c:	4b24      	ldr	r3, [pc, #144]	; (8007100 <HAL_RCC_OscConfig+0x54c>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007074:	2b00      	cmp	r3, #0
 8007076:	d0f0      	beq.n	800705a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	2b01      	cmp	r3, #1
 800707e:	d106      	bne.n	800708e <HAL_RCC_OscConfig+0x4da>
 8007080:	4b1e      	ldr	r3, [pc, #120]	; (80070fc <HAL_RCC_OscConfig+0x548>)
 8007082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007084:	4a1d      	ldr	r2, [pc, #116]	; (80070fc <HAL_RCC_OscConfig+0x548>)
 8007086:	f043 0301 	orr.w	r3, r3, #1
 800708a:	6713      	str	r3, [r2, #112]	; 0x70
 800708c:	e02d      	b.n	80070ea <HAL_RCC_OscConfig+0x536>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d10c      	bne.n	80070b0 <HAL_RCC_OscConfig+0x4fc>
 8007096:	4b19      	ldr	r3, [pc, #100]	; (80070fc <HAL_RCC_OscConfig+0x548>)
 8007098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800709a:	4a18      	ldr	r2, [pc, #96]	; (80070fc <HAL_RCC_OscConfig+0x548>)
 800709c:	f023 0301 	bic.w	r3, r3, #1
 80070a0:	6713      	str	r3, [r2, #112]	; 0x70
 80070a2:	4b16      	ldr	r3, [pc, #88]	; (80070fc <HAL_RCC_OscConfig+0x548>)
 80070a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070a6:	4a15      	ldr	r2, [pc, #84]	; (80070fc <HAL_RCC_OscConfig+0x548>)
 80070a8:	f023 0304 	bic.w	r3, r3, #4
 80070ac:	6713      	str	r3, [r2, #112]	; 0x70
 80070ae:	e01c      	b.n	80070ea <HAL_RCC_OscConfig+0x536>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	2b05      	cmp	r3, #5
 80070b6:	d10c      	bne.n	80070d2 <HAL_RCC_OscConfig+0x51e>
 80070b8:	4b10      	ldr	r3, [pc, #64]	; (80070fc <HAL_RCC_OscConfig+0x548>)
 80070ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070bc:	4a0f      	ldr	r2, [pc, #60]	; (80070fc <HAL_RCC_OscConfig+0x548>)
 80070be:	f043 0304 	orr.w	r3, r3, #4
 80070c2:	6713      	str	r3, [r2, #112]	; 0x70
 80070c4:	4b0d      	ldr	r3, [pc, #52]	; (80070fc <HAL_RCC_OscConfig+0x548>)
 80070c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070c8:	4a0c      	ldr	r2, [pc, #48]	; (80070fc <HAL_RCC_OscConfig+0x548>)
 80070ca:	f043 0301 	orr.w	r3, r3, #1
 80070ce:	6713      	str	r3, [r2, #112]	; 0x70
 80070d0:	e00b      	b.n	80070ea <HAL_RCC_OscConfig+0x536>
 80070d2:	4b0a      	ldr	r3, [pc, #40]	; (80070fc <HAL_RCC_OscConfig+0x548>)
 80070d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070d6:	4a09      	ldr	r2, [pc, #36]	; (80070fc <HAL_RCC_OscConfig+0x548>)
 80070d8:	f023 0301 	bic.w	r3, r3, #1
 80070dc:	6713      	str	r3, [r2, #112]	; 0x70
 80070de:	4b07      	ldr	r3, [pc, #28]	; (80070fc <HAL_RCC_OscConfig+0x548>)
 80070e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070e2:	4a06      	ldr	r2, [pc, #24]	; (80070fc <HAL_RCC_OscConfig+0x548>)
 80070e4:	f023 0304 	bic.w	r3, r3, #4
 80070e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d01a      	beq.n	8007128 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070f2:	f7fb fa07 	bl	8002504 <HAL_GetTick>
 80070f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070f8:	e00f      	b.n	800711a <HAL_RCC_OscConfig+0x566>
 80070fa:	bf00      	nop
 80070fc:	58024400 	.word	0x58024400
 8007100:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007104:	f7fb f9fe 	bl	8002504 <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007112:	4293      	cmp	r3, r2
 8007114:	d901      	bls.n	800711a <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e11a      	b.n	8007350 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800711a:	4b8f      	ldr	r3, [pc, #572]	; (8007358 <HAL_RCC_OscConfig+0x7a4>)
 800711c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800711e:	f003 0302 	and.w	r3, r3, #2
 8007122:	2b00      	cmp	r3, #0
 8007124:	d0ee      	beq.n	8007104 <HAL_RCC_OscConfig+0x550>
 8007126:	e014      	b.n	8007152 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007128:	f7fb f9ec 	bl	8002504 <HAL_GetTick>
 800712c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800712e:	e00a      	b.n	8007146 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007130:	f7fb f9e8 	bl	8002504 <HAL_GetTick>
 8007134:	4602      	mov	r2, r0
 8007136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	f241 3288 	movw	r2, #5000	; 0x1388
 800713e:	4293      	cmp	r3, r2
 8007140:	d901      	bls.n	8007146 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e104      	b.n	8007350 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007146:	4b84      	ldr	r3, [pc, #528]	; (8007358 <HAL_RCC_OscConfig+0x7a4>)
 8007148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800714a:	f003 0302 	and.w	r3, r3, #2
 800714e:	2b00      	cmp	r3, #0
 8007150:	d1ee      	bne.n	8007130 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007156:	2b00      	cmp	r3, #0
 8007158:	f000 80f9 	beq.w	800734e <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800715c:	4b7e      	ldr	r3, [pc, #504]	; (8007358 <HAL_RCC_OscConfig+0x7a4>)
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007164:	2b18      	cmp	r3, #24
 8007166:	f000 80b4 	beq.w	80072d2 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716e:	2b02      	cmp	r3, #2
 8007170:	f040 8095 	bne.w	800729e <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007174:	4b78      	ldr	r3, [pc, #480]	; (8007358 <HAL_RCC_OscConfig+0x7a4>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a77      	ldr	r2, [pc, #476]	; (8007358 <HAL_RCC_OscConfig+0x7a4>)
 800717a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800717e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007180:	f7fb f9c0 	bl	8002504 <HAL_GetTick>
 8007184:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007186:	e008      	b.n	800719a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007188:	f7fb f9bc 	bl	8002504 <HAL_GetTick>
 800718c:	4602      	mov	r2, r0
 800718e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	2b02      	cmp	r3, #2
 8007194:	d901      	bls.n	800719a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8007196:	2303      	movs	r3, #3
 8007198:	e0da      	b.n	8007350 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800719a:	4b6f      	ldr	r3, [pc, #444]	; (8007358 <HAL_RCC_OscConfig+0x7a4>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d1f0      	bne.n	8007188 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80071a6:	4b6c      	ldr	r3, [pc, #432]	; (8007358 <HAL_RCC_OscConfig+0x7a4>)
 80071a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071aa:	4b6c      	ldr	r3, [pc, #432]	; (800735c <HAL_RCC_OscConfig+0x7a8>)
 80071ac:	4013      	ands	r3, r2
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80071b6:	0112      	lsls	r2, r2, #4
 80071b8:	430a      	orrs	r2, r1
 80071ba:	4967      	ldr	r1, [pc, #412]	; (8007358 <HAL_RCC_OscConfig+0x7a4>)
 80071bc:	4313      	orrs	r3, r2
 80071be:	628b      	str	r3, [r1, #40]	; 0x28
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c4:	3b01      	subs	r3, #1
 80071c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ce:	3b01      	subs	r3, #1
 80071d0:	025b      	lsls	r3, r3, #9
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	431a      	orrs	r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071da:	3b01      	subs	r3, #1
 80071dc:	041b      	lsls	r3, r3, #16
 80071de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80071e2:	431a      	orrs	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e8:	3b01      	subs	r3, #1
 80071ea:	061b      	lsls	r3, r3, #24
 80071ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80071f0:	4959      	ldr	r1, [pc, #356]	; (8007358 <HAL_RCC_OscConfig+0x7a4>)
 80071f2:	4313      	orrs	r3, r2
 80071f4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80071f6:	4b58      	ldr	r3, [pc, #352]	; (8007358 <HAL_RCC_OscConfig+0x7a4>)
 80071f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fa:	4a57      	ldr	r2, [pc, #348]	; (8007358 <HAL_RCC_OscConfig+0x7a4>)
 80071fc:	f023 0301 	bic.w	r3, r3, #1
 8007200:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007202:	4b55      	ldr	r3, [pc, #340]	; (8007358 <HAL_RCC_OscConfig+0x7a4>)
 8007204:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007206:	4b56      	ldr	r3, [pc, #344]	; (8007360 <HAL_RCC_OscConfig+0x7ac>)
 8007208:	4013      	ands	r3, r2
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800720e:	00d2      	lsls	r2, r2, #3
 8007210:	4951      	ldr	r1, [pc, #324]	; (8007358 <HAL_RCC_OscConfig+0x7a4>)
 8007212:	4313      	orrs	r3, r2
 8007214:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007216:	4b50      	ldr	r3, [pc, #320]	; (8007358 <HAL_RCC_OscConfig+0x7a4>)
 8007218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800721a:	f023 020c 	bic.w	r2, r3, #12
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007222:	494d      	ldr	r1, [pc, #308]	; (8007358 <HAL_RCC_OscConfig+0x7a4>)
 8007224:	4313      	orrs	r3, r2
 8007226:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007228:	4b4b      	ldr	r3, [pc, #300]	; (8007358 <HAL_RCC_OscConfig+0x7a4>)
 800722a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722c:	f023 0202 	bic.w	r2, r3, #2
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007234:	4948      	ldr	r1, [pc, #288]	; (8007358 <HAL_RCC_OscConfig+0x7a4>)
 8007236:	4313      	orrs	r3, r2
 8007238:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800723a:	4b47      	ldr	r3, [pc, #284]	; (8007358 <HAL_RCC_OscConfig+0x7a4>)
 800723c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800723e:	4a46      	ldr	r2, [pc, #280]	; (8007358 <HAL_RCC_OscConfig+0x7a4>)
 8007240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007244:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007246:	4b44      	ldr	r3, [pc, #272]	; (8007358 <HAL_RCC_OscConfig+0x7a4>)
 8007248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724a:	4a43      	ldr	r2, [pc, #268]	; (8007358 <HAL_RCC_OscConfig+0x7a4>)
 800724c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007250:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007252:	4b41      	ldr	r3, [pc, #260]	; (8007358 <HAL_RCC_OscConfig+0x7a4>)
 8007254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007256:	4a40      	ldr	r2, [pc, #256]	; (8007358 <HAL_RCC_OscConfig+0x7a4>)
 8007258:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800725c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800725e:	4b3e      	ldr	r3, [pc, #248]	; (8007358 <HAL_RCC_OscConfig+0x7a4>)
 8007260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007262:	4a3d      	ldr	r2, [pc, #244]	; (8007358 <HAL_RCC_OscConfig+0x7a4>)
 8007264:	f043 0301 	orr.w	r3, r3, #1
 8007268:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800726a:	4b3b      	ldr	r3, [pc, #236]	; (8007358 <HAL_RCC_OscConfig+0x7a4>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a3a      	ldr	r2, [pc, #232]	; (8007358 <HAL_RCC_OscConfig+0x7a4>)
 8007270:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007274:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007276:	f7fb f945 	bl	8002504 <HAL_GetTick>
 800727a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800727c:	e008      	b.n	8007290 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800727e:	f7fb f941 	bl	8002504 <HAL_GetTick>
 8007282:	4602      	mov	r2, r0
 8007284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	2b02      	cmp	r3, #2
 800728a:	d901      	bls.n	8007290 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 800728c:	2303      	movs	r3, #3
 800728e:	e05f      	b.n	8007350 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007290:	4b31      	ldr	r3, [pc, #196]	; (8007358 <HAL_RCC_OscConfig+0x7a4>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007298:	2b00      	cmp	r3, #0
 800729a:	d0f0      	beq.n	800727e <HAL_RCC_OscConfig+0x6ca>
 800729c:	e057      	b.n	800734e <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800729e:	4b2e      	ldr	r3, [pc, #184]	; (8007358 <HAL_RCC_OscConfig+0x7a4>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a2d      	ldr	r2, [pc, #180]	; (8007358 <HAL_RCC_OscConfig+0x7a4>)
 80072a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072aa:	f7fb f92b 	bl	8002504 <HAL_GetTick>
 80072ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80072b0:	e008      	b.n	80072c4 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072b2:	f7fb f927 	bl	8002504 <HAL_GetTick>
 80072b6:	4602      	mov	r2, r0
 80072b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d901      	bls.n	80072c4 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e045      	b.n	8007350 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80072c4:	4b24      	ldr	r3, [pc, #144]	; (8007358 <HAL_RCC_OscConfig+0x7a4>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d1f0      	bne.n	80072b2 <HAL_RCC_OscConfig+0x6fe>
 80072d0:	e03d      	b.n	800734e <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80072d2:	4b21      	ldr	r3, [pc, #132]	; (8007358 <HAL_RCC_OscConfig+0x7a4>)
 80072d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80072d8:	4b1f      	ldr	r3, [pc, #124]	; (8007358 <HAL_RCC_OscConfig+0x7a4>)
 80072da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072dc:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d031      	beq.n	800734a <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	f003 0203 	and.w	r2, r3, #3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d12a      	bne.n	800734a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	091b      	lsrs	r3, r3, #4
 80072f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007300:	429a      	cmp	r2, r3
 8007302:	d122      	bne.n	800734a <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800730e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007310:	429a      	cmp	r2, r3
 8007312:	d11a      	bne.n	800734a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	0a5b      	lsrs	r3, r3, #9
 8007318:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007320:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007322:	429a      	cmp	r2, r3
 8007324:	d111      	bne.n	800734a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	0c1b      	lsrs	r3, r3, #16
 800732a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007332:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007334:	429a      	cmp	r2, r3
 8007336:	d108      	bne.n	800734a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	0e1b      	lsrs	r3, r3, #24
 800733c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007344:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007346:	429a      	cmp	r2, r3
 8007348:	d001      	beq.n	800734e <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e000      	b.n	8007350 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	4618      	mov	r0, r3
 8007352:	3730      	adds	r7, #48	; 0x30
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	58024400 	.word	0x58024400
 800735c:	fffffc0c 	.word	0xfffffc0c
 8007360:	ffff0007 	.word	0xffff0007

08007364 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d101      	bne.n	8007378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e18d      	b.n	8007694 <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007378:	4b8a      	ldr	r3, [pc, #552]	; (80075a4 <HAL_RCC_ClockConfig+0x240>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 030f 	and.w	r3, r3, #15
 8007380:	683a      	ldr	r2, [r7, #0]
 8007382:	429a      	cmp	r2, r3
 8007384:	d910      	bls.n	80073a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007386:	4b87      	ldr	r3, [pc, #540]	; (80075a4 <HAL_RCC_ClockConfig+0x240>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f023 020f 	bic.w	r2, r3, #15
 800738e:	4985      	ldr	r1, [pc, #532]	; (80075a4 <HAL_RCC_ClockConfig+0x240>)
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	4313      	orrs	r3, r2
 8007394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007396:	4b83      	ldr	r3, [pc, #524]	; (80075a4 <HAL_RCC_ClockConfig+0x240>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 030f 	and.w	r3, r3, #15
 800739e:	683a      	ldr	r2, [r7, #0]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d001      	beq.n	80073a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	e175      	b.n	8007694 <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 0304 	and.w	r3, r3, #4
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d010      	beq.n	80073d6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	691a      	ldr	r2, [r3, #16]
 80073b8:	4b7b      	ldr	r3, [pc, #492]	; (80075a8 <HAL_RCC_ClockConfig+0x244>)
 80073ba:	699b      	ldr	r3, [r3, #24]
 80073bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d908      	bls.n	80073d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80073c4:	4b78      	ldr	r3, [pc, #480]	; (80075a8 <HAL_RCC_ClockConfig+0x244>)
 80073c6:	699b      	ldr	r3, [r3, #24]
 80073c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	4975      	ldr	r1, [pc, #468]	; (80075a8 <HAL_RCC_ClockConfig+0x244>)
 80073d2:	4313      	orrs	r3, r2
 80073d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 0308 	and.w	r3, r3, #8
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d010      	beq.n	8007404 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	695a      	ldr	r2, [r3, #20]
 80073e6:	4b70      	ldr	r3, [pc, #448]	; (80075a8 <HAL_RCC_ClockConfig+0x244>)
 80073e8:	69db      	ldr	r3, [r3, #28]
 80073ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d908      	bls.n	8007404 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80073f2:	4b6d      	ldr	r3, [pc, #436]	; (80075a8 <HAL_RCC_ClockConfig+0x244>)
 80073f4:	69db      	ldr	r3, [r3, #28]
 80073f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	695b      	ldr	r3, [r3, #20]
 80073fe:	496a      	ldr	r1, [pc, #424]	; (80075a8 <HAL_RCC_ClockConfig+0x244>)
 8007400:	4313      	orrs	r3, r2
 8007402:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 0310 	and.w	r3, r3, #16
 800740c:	2b00      	cmp	r3, #0
 800740e:	d010      	beq.n	8007432 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	699a      	ldr	r2, [r3, #24]
 8007414:	4b64      	ldr	r3, [pc, #400]	; (80075a8 <HAL_RCC_ClockConfig+0x244>)
 8007416:	69db      	ldr	r3, [r3, #28]
 8007418:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800741c:	429a      	cmp	r2, r3
 800741e:	d908      	bls.n	8007432 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007420:	4b61      	ldr	r3, [pc, #388]	; (80075a8 <HAL_RCC_ClockConfig+0x244>)
 8007422:	69db      	ldr	r3, [r3, #28]
 8007424:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	699b      	ldr	r3, [r3, #24]
 800742c:	495e      	ldr	r1, [pc, #376]	; (80075a8 <HAL_RCC_ClockConfig+0x244>)
 800742e:	4313      	orrs	r3, r2
 8007430:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 0320 	and.w	r3, r3, #32
 800743a:	2b00      	cmp	r3, #0
 800743c:	d010      	beq.n	8007460 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	69da      	ldr	r2, [r3, #28]
 8007442:	4b59      	ldr	r3, [pc, #356]	; (80075a8 <HAL_RCC_ClockConfig+0x244>)
 8007444:	6a1b      	ldr	r3, [r3, #32]
 8007446:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800744a:	429a      	cmp	r2, r3
 800744c:	d908      	bls.n	8007460 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800744e:	4b56      	ldr	r3, [pc, #344]	; (80075a8 <HAL_RCC_ClockConfig+0x244>)
 8007450:	6a1b      	ldr	r3, [r3, #32]
 8007452:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	69db      	ldr	r3, [r3, #28]
 800745a:	4953      	ldr	r1, [pc, #332]	; (80075a8 <HAL_RCC_ClockConfig+0x244>)
 800745c:	4313      	orrs	r3, r2
 800745e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 0302 	and.w	r3, r3, #2
 8007468:	2b00      	cmp	r3, #0
 800746a:	d010      	beq.n	800748e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	68da      	ldr	r2, [r3, #12]
 8007470:	4b4d      	ldr	r3, [pc, #308]	; (80075a8 <HAL_RCC_ClockConfig+0x244>)
 8007472:	699b      	ldr	r3, [r3, #24]
 8007474:	f003 030f 	and.w	r3, r3, #15
 8007478:	429a      	cmp	r2, r3
 800747a:	d908      	bls.n	800748e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800747c:	4b4a      	ldr	r3, [pc, #296]	; (80075a8 <HAL_RCC_ClockConfig+0x244>)
 800747e:	699b      	ldr	r3, [r3, #24]
 8007480:	f023 020f 	bic.w	r2, r3, #15
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	4947      	ldr	r1, [pc, #284]	; (80075a8 <HAL_RCC_ClockConfig+0x244>)
 800748a:	4313      	orrs	r3, r2
 800748c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0301 	and.w	r3, r3, #1
 8007496:	2b00      	cmp	r3, #0
 8007498:	d055      	beq.n	8007546 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800749a:	4b43      	ldr	r3, [pc, #268]	; (80075a8 <HAL_RCC_ClockConfig+0x244>)
 800749c:	699b      	ldr	r3, [r3, #24]
 800749e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	4940      	ldr	r1, [pc, #256]	; (80075a8 <HAL_RCC_ClockConfig+0x244>)
 80074a8:	4313      	orrs	r3, r2
 80074aa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	2b02      	cmp	r3, #2
 80074b2:	d107      	bne.n	80074c4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80074b4:	4b3c      	ldr	r3, [pc, #240]	; (80075a8 <HAL_RCC_ClockConfig+0x244>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d121      	bne.n	8007504 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e0e7      	b.n	8007694 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	2b03      	cmp	r3, #3
 80074ca:	d107      	bne.n	80074dc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80074cc:	4b36      	ldr	r3, [pc, #216]	; (80075a8 <HAL_RCC_ClockConfig+0x244>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d115      	bne.n	8007504 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e0db      	b.n	8007694 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d107      	bne.n	80074f4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80074e4:	4b30      	ldr	r3, [pc, #192]	; (80075a8 <HAL_RCC_ClockConfig+0x244>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d109      	bne.n	8007504 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	e0cf      	b.n	8007694 <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80074f4:	4b2c      	ldr	r3, [pc, #176]	; (80075a8 <HAL_RCC_ClockConfig+0x244>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 0304 	and.w	r3, r3, #4
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d101      	bne.n	8007504 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	e0c7      	b.n	8007694 <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007504:	4b28      	ldr	r3, [pc, #160]	; (80075a8 <HAL_RCC_ClockConfig+0x244>)
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	f023 0207 	bic.w	r2, r3, #7
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	4925      	ldr	r1, [pc, #148]	; (80075a8 <HAL_RCC_ClockConfig+0x244>)
 8007512:	4313      	orrs	r3, r2
 8007514:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007516:	f7fa fff5 	bl	8002504 <HAL_GetTick>
 800751a:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800751c:	e00a      	b.n	8007534 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800751e:	f7fa fff1 	bl	8002504 <HAL_GetTick>
 8007522:	4602      	mov	r2, r0
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	f241 3288 	movw	r2, #5000	; 0x1388
 800752c:	4293      	cmp	r3, r2
 800752e:	d901      	bls.n	8007534 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007530:	2303      	movs	r3, #3
 8007532:	e0af      	b.n	8007694 <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007534:	4b1c      	ldr	r3, [pc, #112]	; (80075a8 <HAL_RCC_ClockConfig+0x244>)
 8007536:	691b      	ldr	r3, [r3, #16]
 8007538:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	00db      	lsls	r3, r3, #3
 8007542:	429a      	cmp	r2, r3
 8007544:	d1eb      	bne.n	800751e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 0302 	and.w	r3, r3, #2
 800754e:	2b00      	cmp	r3, #0
 8007550:	d010      	beq.n	8007574 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	68da      	ldr	r2, [r3, #12]
 8007556:	4b14      	ldr	r3, [pc, #80]	; (80075a8 <HAL_RCC_ClockConfig+0x244>)
 8007558:	699b      	ldr	r3, [r3, #24]
 800755a:	f003 030f 	and.w	r3, r3, #15
 800755e:	429a      	cmp	r2, r3
 8007560:	d208      	bcs.n	8007574 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007562:	4b11      	ldr	r3, [pc, #68]	; (80075a8 <HAL_RCC_ClockConfig+0x244>)
 8007564:	699b      	ldr	r3, [r3, #24]
 8007566:	f023 020f 	bic.w	r2, r3, #15
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	490e      	ldr	r1, [pc, #56]	; (80075a8 <HAL_RCC_ClockConfig+0x244>)
 8007570:	4313      	orrs	r3, r2
 8007572:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007574:	4b0b      	ldr	r3, [pc, #44]	; (80075a4 <HAL_RCC_ClockConfig+0x240>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 030f 	and.w	r3, r3, #15
 800757c:	683a      	ldr	r2, [r7, #0]
 800757e:	429a      	cmp	r2, r3
 8007580:	d214      	bcs.n	80075ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007582:	4b08      	ldr	r3, [pc, #32]	; (80075a4 <HAL_RCC_ClockConfig+0x240>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f023 020f 	bic.w	r2, r3, #15
 800758a:	4906      	ldr	r1, [pc, #24]	; (80075a4 <HAL_RCC_ClockConfig+0x240>)
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	4313      	orrs	r3, r2
 8007590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007592:	4b04      	ldr	r3, [pc, #16]	; (80075a4 <HAL_RCC_ClockConfig+0x240>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 030f 	and.w	r3, r3, #15
 800759a:	683a      	ldr	r2, [r7, #0]
 800759c:	429a      	cmp	r2, r3
 800759e:	d005      	beq.n	80075ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	e077      	b.n	8007694 <HAL_RCC_ClockConfig+0x330>
 80075a4:	52002000 	.word	0x52002000
 80075a8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 0304 	and.w	r3, r3, #4
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d010      	beq.n	80075da <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	691a      	ldr	r2, [r3, #16]
 80075bc:	4b37      	ldr	r3, [pc, #220]	; (800769c <HAL_RCC_ClockConfig+0x338>)
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d208      	bcs.n	80075da <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80075c8:	4b34      	ldr	r3, [pc, #208]	; (800769c <HAL_RCC_ClockConfig+0x338>)
 80075ca:	699b      	ldr	r3, [r3, #24]
 80075cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	4931      	ldr	r1, [pc, #196]	; (800769c <HAL_RCC_ClockConfig+0x338>)
 80075d6:	4313      	orrs	r3, r2
 80075d8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 0308 	and.w	r3, r3, #8
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d010      	beq.n	8007608 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	695a      	ldr	r2, [r3, #20]
 80075ea:	4b2c      	ldr	r3, [pc, #176]	; (800769c <HAL_RCC_ClockConfig+0x338>)
 80075ec:	69db      	ldr	r3, [r3, #28]
 80075ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d208      	bcs.n	8007608 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80075f6:	4b29      	ldr	r3, [pc, #164]	; (800769c <HAL_RCC_ClockConfig+0x338>)
 80075f8:	69db      	ldr	r3, [r3, #28]
 80075fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	695b      	ldr	r3, [r3, #20]
 8007602:	4926      	ldr	r1, [pc, #152]	; (800769c <HAL_RCC_ClockConfig+0x338>)
 8007604:	4313      	orrs	r3, r2
 8007606:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 0310 	and.w	r3, r3, #16
 8007610:	2b00      	cmp	r3, #0
 8007612:	d010      	beq.n	8007636 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	699a      	ldr	r2, [r3, #24]
 8007618:	4b20      	ldr	r3, [pc, #128]	; (800769c <HAL_RCC_ClockConfig+0x338>)
 800761a:	69db      	ldr	r3, [r3, #28]
 800761c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007620:	429a      	cmp	r2, r3
 8007622:	d208      	bcs.n	8007636 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007624:	4b1d      	ldr	r3, [pc, #116]	; (800769c <HAL_RCC_ClockConfig+0x338>)
 8007626:	69db      	ldr	r3, [r3, #28]
 8007628:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	699b      	ldr	r3, [r3, #24]
 8007630:	491a      	ldr	r1, [pc, #104]	; (800769c <HAL_RCC_ClockConfig+0x338>)
 8007632:	4313      	orrs	r3, r2
 8007634:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 0320 	and.w	r3, r3, #32
 800763e:	2b00      	cmp	r3, #0
 8007640:	d010      	beq.n	8007664 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	69da      	ldr	r2, [r3, #28]
 8007646:	4b15      	ldr	r3, [pc, #84]	; (800769c <HAL_RCC_ClockConfig+0x338>)
 8007648:	6a1b      	ldr	r3, [r3, #32]
 800764a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800764e:	429a      	cmp	r2, r3
 8007650:	d208      	bcs.n	8007664 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007652:	4b12      	ldr	r3, [pc, #72]	; (800769c <HAL_RCC_ClockConfig+0x338>)
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	69db      	ldr	r3, [r3, #28]
 800765e:	490f      	ldr	r1, [pc, #60]	; (800769c <HAL_RCC_ClockConfig+0x338>)
 8007660:	4313      	orrs	r3, r2
 8007662:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007664:	f000 f832 	bl	80076cc <HAL_RCC_GetSysClockFreq>
 8007668:	4601      	mov	r1, r0
 800766a:	4b0c      	ldr	r3, [pc, #48]	; (800769c <HAL_RCC_ClockConfig+0x338>)
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	0a1b      	lsrs	r3, r3, #8
 8007670:	f003 030f 	and.w	r3, r3, #15
 8007674:	4a0a      	ldr	r2, [pc, #40]	; (80076a0 <HAL_RCC_ClockConfig+0x33c>)
 8007676:	5cd3      	ldrb	r3, [r2, r3]
 8007678:	f003 031f 	and.w	r3, r3, #31
 800767c:	fa21 f303 	lsr.w	r3, r1, r3
 8007680:	4a08      	ldr	r2, [pc, #32]	; (80076a4 <HAL_RCC_ClockConfig+0x340>)
 8007682:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif
  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007684:	4b08      	ldr	r3, [pc, #32]	; (80076a8 <HAL_RCC_ClockConfig+0x344>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4618      	mov	r0, r3
 800768a:	f7fa fef1 	bl	8002470 <HAL_InitTick>
 800768e:	4603      	mov	r3, r0
 8007690:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8007692:	7afb      	ldrb	r3, [r7, #11]
}
 8007694:	4618      	mov	r0, r3
 8007696:	3710      	adds	r7, #16
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	58024400 	.word	0x58024400
 80076a0:	08011cd4 	.word	0x08011cd4
 80076a4:	24000000 	.word	0x24000000
 80076a8:	24000008 	.word	0x24000008

080076ac <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80076ac:	b480      	push	{r7}
 80076ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 80076b0:	4b05      	ldr	r3, [pc, #20]	; (80076c8 <HAL_RCC_EnableCSS+0x1c>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a04      	ldr	r2, [pc, #16]	; (80076c8 <HAL_RCC_EnableCSS+0x1c>)
 80076b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076ba:	6013      	str	r3, [r2, #0]
}
 80076bc:	bf00      	nop
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	58024400 	.word	0x58024400

080076cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b089      	sub	sp, #36	; 0x24
 80076d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80076d2:	4baf      	ldr	r3, [pc, #700]	; (8007990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076da:	2b18      	cmp	r3, #24
 80076dc:	f200 814e 	bhi.w	800797c <HAL_RCC_GetSysClockFreq+0x2b0>
 80076e0:	a201      	add	r2, pc, #4	; (adr r2, 80076e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80076e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e6:	bf00      	nop
 80076e8:	0800774d 	.word	0x0800774d
 80076ec:	0800797d 	.word	0x0800797d
 80076f0:	0800797d 	.word	0x0800797d
 80076f4:	0800797d 	.word	0x0800797d
 80076f8:	0800797d 	.word	0x0800797d
 80076fc:	0800797d 	.word	0x0800797d
 8007700:	0800797d 	.word	0x0800797d
 8007704:	0800797d 	.word	0x0800797d
 8007708:	08007773 	.word	0x08007773
 800770c:	0800797d 	.word	0x0800797d
 8007710:	0800797d 	.word	0x0800797d
 8007714:	0800797d 	.word	0x0800797d
 8007718:	0800797d 	.word	0x0800797d
 800771c:	0800797d 	.word	0x0800797d
 8007720:	0800797d 	.word	0x0800797d
 8007724:	0800797d 	.word	0x0800797d
 8007728:	08007779 	.word	0x08007779
 800772c:	0800797d 	.word	0x0800797d
 8007730:	0800797d 	.word	0x0800797d
 8007734:	0800797d 	.word	0x0800797d
 8007738:	0800797d 	.word	0x0800797d
 800773c:	0800797d 	.word	0x0800797d
 8007740:	0800797d 	.word	0x0800797d
 8007744:	0800797d 	.word	0x0800797d
 8007748:	0800777f 	.word	0x0800777f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800774c:	4b90      	ldr	r3, [pc, #576]	; (8007990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0320 	and.w	r3, r3, #32
 8007754:	2b00      	cmp	r3, #0
 8007756:	d009      	beq.n	800776c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007758:	4b8d      	ldr	r3, [pc, #564]	; (8007990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	08db      	lsrs	r3, r3, #3
 800775e:	f003 0303 	and.w	r3, r3, #3
 8007762:	4a8c      	ldr	r2, [pc, #560]	; (8007994 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007764:	fa22 f303 	lsr.w	r3, r2, r3
 8007768:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800776a:	e10a      	b.n	8007982 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800776c:	4b89      	ldr	r3, [pc, #548]	; (8007994 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800776e:	61bb      	str	r3, [r7, #24]
    break;
 8007770:	e107      	b.n	8007982 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007772:	4b89      	ldr	r3, [pc, #548]	; (8007998 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8007774:	61bb      	str	r3, [r7, #24]
    break;
 8007776:	e104      	b.n	8007982 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007778:	4b88      	ldr	r3, [pc, #544]	; (800799c <HAL_RCC_GetSysClockFreq+0x2d0>)
 800777a:	61bb      	str	r3, [r7, #24]
    break;
 800777c:	e101      	b.n	8007982 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800777e:	4b84      	ldr	r3, [pc, #528]	; (8007990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007782:	f003 0303 	and.w	r3, r3, #3
 8007786:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007788:	4b81      	ldr	r3, [pc, #516]	; (8007990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800778a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800778c:	091b      	lsrs	r3, r3, #4
 800778e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007792:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007794:	4b7e      	ldr	r3, [pc, #504]	; (8007990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007798:	f003 0301 	and.w	r3, r3, #1
 800779c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800779e:	4b7c      	ldr	r3, [pc, #496]	; (8007990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80077a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077a2:	08db      	lsrs	r3, r3, #3
 80077a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	fb02 f303 	mul.w	r3, r2, r3
 80077ae:	ee07 3a90 	vmov	s15, r3
 80077b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077b6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f000 80da 	beq.w	8007976 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d05a      	beq.n	800787e <HAL_RCC_GetSysClockFreq+0x1b2>
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d302      	bcc.n	80077d2 <HAL_RCC_GetSysClockFreq+0x106>
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d078      	beq.n	80078c2 <HAL_RCC_GetSysClockFreq+0x1f6>
 80077d0:	e099      	b.n	8007906 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077d2:	4b6f      	ldr	r3, [pc, #444]	; (8007990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f003 0320 	and.w	r3, r3, #32
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d02d      	beq.n	800783a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80077de:	4b6c      	ldr	r3, [pc, #432]	; (8007990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	08db      	lsrs	r3, r3, #3
 80077e4:	f003 0303 	and.w	r3, r3, #3
 80077e8:	4a6a      	ldr	r2, [pc, #424]	; (8007994 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80077ea:	fa22 f303 	lsr.w	r3, r2, r3
 80077ee:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	ee07 3a90 	vmov	s15, r3
 80077f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	ee07 3a90 	vmov	s15, r3
 8007800:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007804:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007808:	4b61      	ldr	r3, [pc, #388]	; (8007990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800780a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007810:	ee07 3a90 	vmov	s15, r3
 8007814:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007818:	ed97 6a02 	vldr	s12, [r7, #8]
 800781c:	eddf 5a60 	vldr	s11, [pc, #384]	; 80079a0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007820:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007824:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007828:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800782c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007830:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007834:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007838:	e087      	b.n	800794a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	ee07 3a90 	vmov	s15, r3
 8007840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007844:	eddf 6a57 	vldr	s13, [pc, #348]	; 80079a4 <HAL_RCC_GetSysClockFreq+0x2d8>
 8007848:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800784c:	4b50      	ldr	r3, [pc, #320]	; (8007990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800784e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007854:	ee07 3a90 	vmov	s15, r3
 8007858:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800785c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007860:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80079a0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007864:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007868:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800786c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007870:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007874:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007878:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800787c:	e065      	b.n	800794a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	ee07 3a90 	vmov	s15, r3
 8007884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007888:	eddf 6a47 	vldr	s13, [pc, #284]	; 80079a8 <HAL_RCC_GetSysClockFreq+0x2dc>
 800788c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007890:	4b3f      	ldr	r3, [pc, #252]	; (8007990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007898:	ee07 3a90 	vmov	s15, r3
 800789c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80078a4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80079a0 <HAL_RCC_GetSysClockFreq+0x2d4>
 80078a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078c0:	e043      	b.n	800794a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	ee07 3a90 	vmov	s15, r3
 80078c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078cc:	eddf 6a37 	vldr	s13, [pc, #220]	; 80079ac <HAL_RCC_GetSysClockFreq+0x2e0>
 80078d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078d4:	4b2e      	ldr	r3, [pc, #184]	; (8007990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80078d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078dc:	ee07 3a90 	vmov	s15, r3
 80078e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80078e8:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80079a0 <HAL_RCC_GetSysClockFreq+0x2d4>
 80078ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007900:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007904:	e021      	b.n	800794a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	ee07 3a90 	vmov	s15, r3
 800790c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007910:	eddf 6a25 	vldr	s13, [pc, #148]	; 80079a8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8007914:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007918:	4b1d      	ldr	r3, [pc, #116]	; (8007990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800791a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800791c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007920:	ee07 3a90 	vmov	s15, r3
 8007924:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007928:	ed97 6a02 	vldr	s12, [r7, #8]
 800792c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80079a0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007930:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007934:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007938:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800793c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007940:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007944:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007948:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800794a:	4b11      	ldr	r3, [pc, #68]	; (8007990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800794c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800794e:	0a5b      	lsrs	r3, r3, #9
 8007950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007954:	3301      	adds	r3, #1
 8007956:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	ee07 3a90 	vmov	s15, r3
 800795e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007962:	edd7 6a07 	vldr	s13, [r7, #28]
 8007966:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800796a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800796e:	ee17 3a90 	vmov	r3, s15
 8007972:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007974:	e005      	b.n	8007982 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8007976:	2300      	movs	r3, #0
 8007978:	61bb      	str	r3, [r7, #24]
    break;
 800797a:	e002      	b.n	8007982 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800797c:	4b06      	ldr	r3, [pc, #24]	; (8007998 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800797e:	61bb      	str	r3, [r7, #24]
    break;
 8007980:	bf00      	nop
  }

  return sysclockfreq;
 8007982:	69bb      	ldr	r3, [r7, #24]
}
 8007984:	4618      	mov	r0, r3
 8007986:	3724      	adds	r7, #36	; 0x24
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr
 8007990:	58024400 	.word	0x58024400
 8007994:	03d09000 	.word	0x03d09000
 8007998:	003d0900 	.word	0x003d0900
 800799c:	017d7840 	.word	0x017d7840
 80079a0:	46000000 	.word	0x46000000
 80079a4:	4c742400 	.word	0x4c742400
 80079a8:	4a742400 	.word	0x4a742400
 80079ac:	4bbebc20 	.word	0x4bbebc20

080079b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80079b4:	f001 fdb0 	bl	8009518 <HAL_RCCEx_GetD1SysClockFreq>
 80079b8:	4601      	mov	r1, r0
 80079ba:	4b08      	ldr	r3, [pc, #32]	; (80079dc <HAL_RCC_GetHCLKFreq+0x2c>)
 80079bc:	699b      	ldr	r3, [r3, #24]
 80079be:	f003 030f 	and.w	r3, r3, #15
 80079c2:	4a07      	ldr	r2, [pc, #28]	; (80079e0 <HAL_RCC_GetHCLKFreq+0x30>)
 80079c4:	5cd3      	ldrb	r3, [r2, r3]
 80079c6:	f003 031f 	and.w	r3, r3, #31
 80079ca:	fa21 f303 	lsr.w	r3, r1, r3
 80079ce:	4a05      	ldr	r2, [pc, #20]	; (80079e4 <HAL_RCC_GetHCLKFreq+0x34>)
 80079d0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif
  return SystemD2Clock;
 80079d2:	4b04      	ldr	r3, [pc, #16]	; (80079e4 <HAL_RCC_GetHCLKFreq+0x34>)
 80079d4:	681b      	ldr	r3, [r3, #0]
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	58024400 	.word	0x58024400
 80079e0:	08011cd4 	.word	0x08011cd4
 80079e4:	24000004 	.word	0x24000004

080079e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80079ec:	f7ff ffe0 	bl	80079b0 <HAL_RCC_GetHCLKFreq>
 80079f0:	4601      	mov	r1, r0
 80079f2:	4b06      	ldr	r3, [pc, #24]	; (8007a0c <HAL_RCC_GetPCLK1Freq+0x24>)
 80079f4:	69db      	ldr	r3, [r3, #28]
 80079f6:	091b      	lsrs	r3, r3, #4
 80079f8:	f003 0307 	and.w	r3, r3, #7
 80079fc:	4a04      	ldr	r2, [pc, #16]	; (8007a10 <HAL_RCC_GetPCLK1Freq+0x28>)
 80079fe:	5cd3      	ldrb	r3, [r2, r3]
 8007a00:	f003 031f 	and.w	r3, r3, #31
 8007a04:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> POSITION_VAL(RCC_CDCFGR2_CDPPRE1_0)]);
#endif
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	58024400 	.word	0x58024400
 8007a10:	08011cd4 	.word	0x08011cd4

08007a14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007a18:	f7ff ffca 	bl	80079b0 <HAL_RCC_GetHCLKFreq>
 8007a1c:	4601      	mov	r1, r0
 8007a1e:	4b06      	ldr	r3, [pc, #24]	; (8007a38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a20:	69db      	ldr	r3, [r3, #28]
 8007a22:	0a1b      	lsrs	r3, r3, #8
 8007a24:	f003 0307 	and.w	r3, r3, #7
 8007a28:	4a04      	ldr	r2, [pc, #16]	; (8007a3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8007a2a:	5cd3      	ldrb	r3, [r2, r3]
 8007a2c:	f003 031f 	and.w	r3, r3, #31
 8007a30:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	58024400 	.word	0x58024400
 8007a3c:	08011cd4 	.word	0x08011cd4

08007a40 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8007a44:	4b07      	ldr	r3, [pc, #28]	; (8007a64 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007a46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a50:	d105      	bne.n	8007a5e <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 8007a52:	f000 f809 	bl	8007a68 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8007a56:	4b03      	ldr	r3, [pc, #12]	; (8007a64 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007a58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007a5c:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 8007a5e:	bf00      	nop
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	58024400 	.word	0x58024400

08007a68 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 8007a6c:	bf00      	nop
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr
	...

08007a78 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b086      	sub	sp, #24
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007a80:	2300      	movs	r3, #0
 8007a82:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a84:	2300      	movs	r3, #0
 8007a86:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d03d      	beq.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a9c:	d013      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8007a9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007aa2:	d802      	bhi.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d007      	beq.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8007aa8:	e01f      	b.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007aaa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007aae:	d013      	beq.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8007ab0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007ab4:	d01c      	beq.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8007ab6:	e018      	b.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ab8:	4baf      	ldr	r3, [pc, #700]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007abc:	4aae      	ldr	r2, [pc, #696]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007abe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ac2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007ac4:	e015      	b.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	3304      	adds	r3, #4
 8007aca:	2102      	movs	r1, #2
 8007acc:	4618      	mov	r0, r3
 8007ace:	f001 fd3f 	bl	8009550 <RCCEx_PLL2_Config>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007ad6:	e00c      	b.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	3324      	adds	r3, #36	; 0x24
 8007adc:	2102      	movs	r1, #2
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f001 fde8 	bl	80096b4 <RCCEx_PLL3_Config>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007ae8:	e003      	b.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	75fb      	strb	r3, [r7, #23]
      break;
 8007aee:	e000      	b.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8007af0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007af2:	7dfb      	ldrb	r3, [r7, #23]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d109      	bne.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007af8:	4b9f      	ldr	r3, [pc, #636]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007afc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b04:	499c      	ldr	r1, [pc, #624]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007b06:	4313      	orrs	r3, r2
 8007b08:	650b      	str	r3, [r1, #80]	; 0x50
 8007b0a:	e001      	b.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b0c:	7dfb      	ldrb	r3, [r7, #23]
 8007b0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d03d      	beq.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b20:	2b04      	cmp	r3, #4
 8007b22:	d826      	bhi.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8007b24:	a201      	add	r2, pc, #4	; (adr r2, 8007b2c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8007b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b2a:	bf00      	nop
 8007b2c:	08007b41 	.word	0x08007b41
 8007b30:	08007b4f 	.word	0x08007b4f
 8007b34:	08007b61 	.word	0x08007b61
 8007b38:	08007b79 	.word	0x08007b79
 8007b3c:	08007b79 	.word	0x08007b79
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b40:	4b8d      	ldr	r3, [pc, #564]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b44:	4a8c      	ldr	r2, [pc, #560]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007b46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007b4c:	e015      	b.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	3304      	adds	r3, #4
 8007b52:	2100      	movs	r1, #0
 8007b54:	4618      	mov	r0, r3
 8007b56:	f001 fcfb 	bl	8009550 <RCCEx_PLL2_Config>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007b5e:	e00c      	b.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	3324      	adds	r3, #36	; 0x24
 8007b64:	2100      	movs	r1, #0
 8007b66:	4618      	mov	r0, r3
 8007b68:	f001 fda4 	bl	80096b4 <RCCEx_PLL3_Config>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007b70:	e003      	b.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	75fb      	strb	r3, [r7, #23]
      break;
 8007b76:	e000      	b.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8007b78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b7a:	7dfb      	ldrb	r3, [r7, #23]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d109      	bne.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b80:	4b7d      	ldr	r3, [pc, #500]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b84:	f023 0207 	bic.w	r2, r3, #7
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b8c:	497a      	ldr	r1, [pc, #488]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	650b      	str	r3, [r1, #80]	; 0x50
 8007b92:	e001      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b94:	7dfb      	ldrb	r3, [r7, #23]
 8007b96:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d03e      	beq.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ba8:	2b80      	cmp	r3, #128	; 0x80
 8007baa:	d01c      	beq.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8007bac:	2b80      	cmp	r3, #128	; 0x80
 8007bae:	d804      	bhi.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x142>
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d008      	beq.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007bb4:	2b40      	cmp	r3, #64	; 0x40
 8007bb6:	d00d      	beq.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007bb8:	e01e      	b.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007bba:	2bc0      	cmp	r3, #192	; 0xc0
 8007bbc:	d01f      	beq.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x186>
 8007bbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bc2:	d01e      	beq.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007bc4:	e018      	b.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bc6:	4b6c      	ldr	r3, [pc, #432]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bca:	4a6b      	ldr	r2, [pc, #428]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bd0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007bd2:	e017      	b.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	3304      	adds	r3, #4
 8007bd8:	2100      	movs	r1, #0
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f001 fcb8 	bl	8009550 <RCCEx_PLL2_Config>
 8007be0:	4603      	mov	r3, r0
 8007be2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007be4:	e00e      	b.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	3324      	adds	r3, #36	; 0x24
 8007bea:	2100      	movs	r1, #0
 8007bec:	4618      	mov	r0, r3
 8007bee:	f001 fd61 	bl	80096b4 <RCCEx_PLL3_Config>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007bf6:	e005      	b.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	75fb      	strb	r3, [r7, #23]
      break;
 8007bfc:	e002      	b.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8007bfe:	bf00      	nop
 8007c00:	e000      	b.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8007c02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c04:	7dfb      	ldrb	r3, [r7, #23]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d109      	bne.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007c0a:	4b5b      	ldr	r3, [pc, #364]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c0e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c16:	4958      	ldr	r1, [pc, #352]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	650b      	str	r3, [r1, #80]	; 0x50
 8007c1c:	e001      	b.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c1e:	7dfb      	ldrb	r3, [r7, #23]
 8007c20:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d044      	beq.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007c34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c38:	d01f      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007c3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c3e:	d805      	bhi.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00a      	beq.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007c44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c48:	d00e      	beq.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8007c4a:	e01f      	b.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x214>
 8007c4c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007c50:	d01f      	beq.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8007c52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007c56:	d01e      	beq.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007c58:	e018      	b.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c5a:	4b47      	ldr	r3, [pc, #284]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5e:	4a46      	ldr	r2, [pc, #280]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007c66:	e017      	b.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	3304      	adds	r3, #4
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f001 fc6e 	bl	8009550 <RCCEx_PLL2_Config>
 8007c74:	4603      	mov	r3, r0
 8007c76:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007c78:	e00e      	b.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	3324      	adds	r3, #36	; 0x24
 8007c7e:	2100      	movs	r1, #0
 8007c80:	4618      	mov	r0, r3
 8007c82:	f001 fd17 	bl	80096b4 <RCCEx_PLL3_Config>
 8007c86:	4603      	mov	r3, r0
 8007c88:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007c8a:	e005      	b.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	75fb      	strb	r3, [r7, #23]
      break;
 8007c90:	e002      	b.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8007c92:	bf00      	nop
 8007c94:	e000      	b.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8007c96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c98:	7dfb      	ldrb	r3, [r7, #23]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d10a      	bne.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007c9e:	4b36      	ldr	r3, [pc, #216]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ca2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007cac:	4932      	ldr	r1, [pc, #200]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	658b      	str	r3, [r1, #88]	; 0x58
 8007cb2:	e001      	b.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cb4:	7dfb      	ldrb	r3, [r7, #23]
 8007cb6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d044      	beq.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007cca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007cce:	d01f      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007cd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007cd4:	d805      	bhi.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00a      	beq.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8007cda:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007cde:	d00e      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x286>
 8007ce0:	e01f      	b.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8007ce2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007ce6:	d01f      	beq.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007ce8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007cec:	d01e      	beq.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007cee:	e018      	b.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cf0:	4b21      	ldr	r3, [pc, #132]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf4:	4a20      	ldr	r2, [pc, #128]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007cf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cfa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007cfc:	e017      	b.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	3304      	adds	r3, #4
 8007d02:	2100      	movs	r1, #0
 8007d04:	4618      	mov	r0, r3
 8007d06:	f001 fc23 	bl	8009550 <RCCEx_PLL2_Config>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007d0e:	e00e      	b.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	3324      	adds	r3, #36	; 0x24
 8007d14:	2100      	movs	r1, #0
 8007d16:	4618      	mov	r0, r3
 8007d18:	f001 fccc 	bl	80096b4 <RCCEx_PLL3_Config>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d20:	e005      	b.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	75fb      	strb	r3, [r7, #23]
      break;
 8007d26:	e002      	b.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8007d28:	bf00      	nop
 8007d2a:	e000      	b.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8007d2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d2e:	7dfb      	ldrb	r3, [r7, #23]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d10a      	bne.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007d34:	4b10      	ldr	r3, [pc, #64]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d38:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007d42:	490d      	ldr	r1, [pc, #52]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007d44:	4313      	orrs	r3, r2
 8007d46:	658b      	str	r3, [r1, #88]	; 0x58
 8007d48:	e001      	b.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d4a:	7dfb      	ldrb	r3, [r7, #23]
 8007d4c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d035      	beq.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d5e:	2b10      	cmp	r3, #16
 8007d60:	d00c      	beq.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8007d62:	2b10      	cmp	r3, #16
 8007d64:	d802      	bhi.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d01b      	beq.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8007d6a:	e017      	b.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007d6c:	2b20      	cmp	r3, #32
 8007d6e:	d00c      	beq.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x312>
 8007d70:	2b30      	cmp	r3, #48	; 0x30
 8007d72:	d018      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8007d74:	e012      	b.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007d76:	bf00      	nop
 8007d78:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d7c:	4baf      	ldr	r3, [pc, #700]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d80:	4aae      	ldr	r2, [pc, #696]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007d82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007d88:	e00e      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	3304      	adds	r3, #4
 8007d8e:	2102      	movs	r1, #2
 8007d90:	4618      	mov	r0, r3
 8007d92:	f001 fbdd 	bl	8009550 <RCCEx_PLL2_Config>
 8007d96:	4603      	mov	r3, r0
 8007d98:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007d9a:	e005      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	75fb      	strb	r3, [r7, #23]
      break;
 8007da0:	e002      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8007da2:	bf00      	nop
 8007da4:	e000      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8007da6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007da8:	7dfb      	ldrb	r3, [r7, #23]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d109      	bne.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007dae:	4ba3      	ldr	r3, [pc, #652]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007db2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dba:	49a0      	ldr	r1, [pc, #640]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007dc0:	e001      	b.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dc2:	7dfb      	ldrb	r3, [r7, #23]
 8007dc4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d042      	beq.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dda:	d01f      	beq.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8007ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007de0:	d805      	bhi.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00a      	beq.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x384>
 8007de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dea:	d00e      	beq.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x392>
 8007dec:	e01f      	b.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8007dee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007df2:	d01f      	beq.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007df4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007df8:	d01e      	beq.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8007dfa:	e018      	b.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dfc:	4b8f      	ldr	r3, [pc, #572]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e00:	4a8e      	ldr	r2, [pc, #568]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007e02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007e08:	e017      	b.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	3304      	adds	r3, #4
 8007e0e:	2100      	movs	r1, #0
 8007e10:	4618      	mov	r0, r3
 8007e12:	f001 fb9d 	bl	8009550 <RCCEx_PLL2_Config>
 8007e16:	4603      	mov	r3, r0
 8007e18:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007e1a:	e00e      	b.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	3324      	adds	r3, #36	; 0x24
 8007e20:	2100      	movs	r1, #0
 8007e22:	4618      	mov	r0, r3
 8007e24:	f001 fc46 	bl	80096b4 <RCCEx_PLL3_Config>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007e2c:	e005      	b.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	75fb      	strb	r3, [r7, #23]
      break;
 8007e32:	e002      	b.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007e34:	bf00      	nop
 8007e36:	e000      	b.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007e38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e3a:	7dfb      	ldrb	r3, [r7, #23]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d109      	bne.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007e40:	4b7e      	ldr	r3, [pc, #504]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e44:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e4c:	497b      	ldr	r1, [pc, #492]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	650b      	str	r3, [r1, #80]	; 0x50
 8007e52:	e001      	b.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e54:	7dfb      	ldrb	r3, [r7, #23]
 8007e56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d042      	beq.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e6c:	d01b      	beq.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007e6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e72:	d805      	bhi.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d022      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x446>
 8007e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e7c:	d00a      	beq.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007e7e:	e01b      	b.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8007e80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e84:	d01d      	beq.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8007e86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e8a:	d01c      	beq.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8007e8c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007e90:	d01b      	beq.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x452>
 8007e92:	e011      	b.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	3304      	adds	r3, #4
 8007e98:	2101      	movs	r1, #1
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f001 fb58 	bl	8009550 <RCCEx_PLL2_Config>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007ea4:	e012      	b.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	3324      	adds	r3, #36	; 0x24
 8007eaa:	2101      	movs	r1, #1
 8007eac:	4618      	mov	r0, r3
 8007eae:	f001 fc01 	bl	80096b4 <RCCEx_PLL3_Config>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007eb6:	e009      	b.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	75fb      	strb	r3, [r7, #23]
      break;
 8007ebc:	e006      	b.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007ebe:	bf00      	nop
 8007ec0:	e004      	b.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007ec2:	bf00      	nop
 8007ec4:	e002      	b.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007ec6:	bf00      	nop
 8007ec8:	e000      	b.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007eca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ecc:	7dfb      	ldrb	r3, [r7, #23]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d109      	bne.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007ed2:	4b5a      	ldr	r3, [pc, #360]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ed6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ede:	4957      	ldr	r1, [pc, #348]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	650b      	str	r3, [r1, #80]	; 0x50
 8007ee4:	e001      	b.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ee6:	7dfb      	ldrb	r3, [r7, #23]
 8007ee8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d044      	beq.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007efc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f00:	d01b      	beq.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8007f02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f06:	d805      	bhi.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d022      	beq.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007f0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f10:	d00a      	beq.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8007f12:	e01b      	b.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8007f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f18:	d01d      	beq.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007f1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f1e:	d01c      	beq.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8007f20:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f24:	d01b      	beq.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007f26:	e011      	b.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	3304      	adds	r3, #4
 8007f2c:	2101      	movs	r1, #1
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f001 fb0e 	bl	8009550 <RCCEx_PLL2_Config>
 8007f34:	4603      	mov	r3, r0
 8007f36:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007f38:	e012      	b.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	3324      	adds	r3, #36	; 0x24
 8007f3e:	2101      	movs	r1, #1
 8007f40:	4618      	mov	r0, r3
 8007f42:	f001 fbb7 	bl	80096b4 <RCCEx_PLL3_Config>
 8007f46:	4603      	mov	r3, r0
 8007f48:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007f4a:	e009      	b.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	75fb      	strb	r3, [r7, #23]
      break;
 8007f50:	e006      	b.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007f52:	bf00      	nop
 8007f54:	e004      	b.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007f56:	bf00      	nop
 8007f58:	e002      	b.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007f5a:	bf00      	nop
 8007f5c:	e000      	b.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007f5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f60:	7dfb      	ldrb	r3, [r7, #23]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d10a      	bne.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007f66:	4b35      	ldr	r3, [pc, #212]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f6a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007f74:	4931      	ldr	r1, [pc, #196]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007f76:	4313      	orrs	r3, r2
 8007f78:	658b      	str	r3, [r1, #88]	; 0x58
 8007f7a:	e001      	b.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f7c:	7dfb      	ldrb	r3, [r7, #23]
 8007f7e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d02d      	beq.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f94:	d005      	beq.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007f96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f9a:	d009      	beq.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d013      	beq.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007fa0:	e00f      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fa2:	4b26      	ldr	r3, [pc, #152]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa6:	4a25      	ldr	r2, [pc, #148]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007fae:	e00c      	b.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	3304      	adds	r3, #4
 8007fb4:	2101      	movs	r1, #1
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f001 faca 	bl	8009550 <RCCEx_PLL2_Config>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007fc0:	e003      	b.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	75fb      	strb	r3, [r7, #23]
      break;
 8007fc6:	e000      	b.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8007fc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fca:	7dfb      	ldrb	r3, [r7, #23]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d109      	bne.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007fd0:	4b1a      	ldr	r3, [pc, #104]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fd4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fdc:	4917      	ldr	r1, [pc, #92]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	650b      	str	r3, [r1, #80]	; 0x50
 8007fe2:	e001      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fe4:	7dfb      	ldrb	r3, [r7, #23]
 8007fe6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d035      	beq.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ff8:	2b03      	cmp	r3, #3
 8007ffa:	d81b      	bhi.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007ffc:	a201      	add	r2, pc, #4	; (adr r2, 8008004 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8007ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008002:	bf00      	nop
 8008004:	08008041 	.word	0x08008041
 8008008:	08008015 	.word	0x08008015
 800800c:	08008023 	.word	0x08008023
 8008010:	08008041 	.word	0x08008041
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008014:	4b09      	ldr	r3, [pc, #36]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008018:	4a08      	ldr	r2, [pc, #32]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800801a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800801e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008020:	e00f      	b.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	3304      	adds	r3, #4
 8008026:	2102      	movs	r1, #2
 8008028:	4618      	mov	r0, r3
 800802a:	f001 fa91 	bl	8009550 <RCCEx_PLL2_Config>
 800802e:	4603      	mov	r3, r0
 8008030:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008032:	e006      	b.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	75fb      	strb	r3, [r7, #23]
      break;
 8008038:	e003      	b.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800803a:	bf00      	nop
 800803c:	58024400 	.word	0x58024400
      break;
 8008040:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008042:	7dfb      	ldrb	r3, [r7, #23]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d109      	bne.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008048:	4bba      	ldr	r3, [pc, #744]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800804a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800804c:	f023 0203 	bic.w	r2, r3, #3
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008054:	49b7      	ldr	r1, [pc, #732]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008056:	4313      	orrs	r3, r2
 8008058:	64cb      	str	r3, [r1, #76]	; 0x4c
 800805a:	e001      	b.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800805c:	7dfb      	ldrb	r3, [r7, #23]
 800805e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008068:	2b00      	cmp	r3, #0
 800806a:	f000 8086 	beq.w	800817a <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800806e:	4bb2      	ldr	r3, [pc, #712]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4ab1      	ldr	r2, [pc, #708]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008078:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800807a:	f7fa fa43 	bl	8002504 <HAL_GetTick>
 800807e:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008080:	e009      	b.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008082:	f7fa fa3f 	bl	8002504 <HAL_GetTick>
 8008086:	4602      	mov	r2, r0
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	1ad3      	subs	r3, r2, r3
 800808c:	2b64      	cmp	r3, #100	; 0x64
 800808e:	d902      	bls.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8008090:	2303      	movs	r3, #3
 8008092:	75fb      	strb	r3, [r7, #23]
        break;
 8008094:	e005      	b.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008096:	4ba8      	ldr	r3, [pc, #672]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d0ef      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80080a2:	7dfb      	ldrb	r3, [r7, #23]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d166      	bne.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80080a8:	4ba2      	ldr	r3, [pc, #648]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80080aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80080b2:	4053      	eors	r3, r2
 80080b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d013      	beq.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80080bc:	4b9d      	ldr	r3, [pc, #628]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80080be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080c4:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80080c6:	4b9b      	ldr	r3, [pc, #620]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80080c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ca:	4a9a      	ldr	r2, [pc, #616]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80080cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080d0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80080d2:	4b98      	ldr	r3, [pc, #608]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80080d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080d6:	4a97      	ldr	r2, [pc, #604]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80080d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080dc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80080de:	4a95      	ldr	r2, [pc, #596]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80080ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080ee:	d115      	bne.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080f0:	f7fa fa08 	bl	8002504 <HAL_GetTick>
 80080f4:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80080f6:	e00b      	b.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080f8:	f7fa fa04 	bl	8002504 <HAL_GetTick>
 80080fc:	4602      	mov	r2, r0
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	f241 3288 	movw	r2, #5000	; 0x1388
 8008106:	4293      	cmp	r3, r2
 8008108:	d902      	bls.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800810a:	2303      	movs	r3, #3
 800810c:	75fb      	strb	r3, [r7, #23]
            break;
 800810e:	e005      	b.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008110:	4b88      	ldr	r3, [pc, #544]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008114:	f003 0302 	and.w	r3, r3, #2
 8008118:	2b00      	cmp	r3, #0
 800811a:	d0ed      	beq.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 800811c:	7dfb      	ldrb	r3, [r7, #23]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d126      	bne.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008128:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800812c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008130:	d10d      	bne.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8008132:	4b80      	ldr	r3, [pc, #512]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008140:	0919      	lsrs	r1, r3, #4
 8008142:	4b7e      	ldr	r3, [pc, #504]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8008144:	400b      	ands	r3, r1
 8008146:	497b      	ldr	r1, [pc, #492]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008148:	4313      	orrs	r3, r2
 800814a:	610b      	str	r3, [r1, #16]
 800814c:	e005      	b.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800814e:	4b79      	ldr	r3, [pc, #484]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008150:	691b      	ldr	r3, [r3, #16]
 8008152:	4a78      	ldr	r2, [pc, #480]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008154:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008158:	6113      	str	r3, [r2, #16]
 800815a:	4b76      	ldr	r3, [pc, #472]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800815c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008168:	4972      	ldr	r1, [pc, #456]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800816a:	4313      	orrs	r3, r2
 800816c:	670b      	str	r3, [r1, #112]	; 0x70
 800816e:	e004      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008170:	7dfb      	ldrb	r3, [r7, #23]
 8008172:	75bb      	strb	r3, [r7, #22]
 8008174:	e001      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008176:	7dfb      	ldrb	r3, [r7, #23]
 8008178:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f003 0301 	and.w	r3, r3, #1
 8008182:	2b00      	cmp	r3, #0
 8008184:	d07d      	beq.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800818a:	2b28      	cmp	r3, #40	; 0x28
 800818c:	d866      	bhi.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800818e:	a201      	add	r2, pc, #4	; (adr r2, 8008194 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008194:	08008263 	.word	0x08008263
 8008198:	0800825d 	.word	0x0800825d
 800819c:	0800825d 	.word	0x0800825d
 80081a0:	0800825d 	.word	0x0800825d
 80081a4:	0800825d 	.word	0x0800825d
 80081a8:	0800825d 	.word	0x0800825d
 80081ac:	0800825d 	.word	0x0800825d
 80081b0:	0800825d 	.word	0x0800825d
 80081b4:	08008239 	.word	0x08008239
 80081b8:	0800825d 	.word	0x0800825d
 80081bc:	0800825d 	.word	0x0800825d
 80081c0:	0800825d 	.word	0x0800825d
 80081c4:	0800825d 	.word	0x0800825d
 80081c8:	0800825d 	.word	0x0800825d
 80081cc:	0800825d 	.word	0x0800825d
 80081d0:	0800825d 	.word	0x0800825d
 80081d4:	0800824b 	.word	0x0800824b
 80081d8:	0800825d 	.word	0x0800825d
 80081dc:	0800825d 	.word	0x0800825d
 80081e0:	0800825d 	.word	0x0800825d
 80081e4:	0800825d 	.word	0x0800825d
 80081e8:	0800825d 	.word	0x0800825d
 80081ec:	0800825d 	.word	0x0800825d
 80081f0:	0800825d 	.word	0x0800825d
 80081f4:	08008263 	.word	0x08008263
 80081f8:	0800825d 	.word	0x0800825d
 80081fc:	0800825d 	.word	0x0800825d
 8008200:	0800825d 	.word	0x0800825d
 8008204:	0800825d 	.word	0x0800825d
 8008208:	0800825d 	.word	0x0800825d
 800820c:	0800825d 	.word	0x0800825d
 8008210:	0800825d 	.word	0x0800825d
 8008214:	08008263 	.word	0x08008263
 8008218:	0800825d 	.word	0x0800825d
 800821c:	0800825d 	.word	0x0800825d
 8008220:	0800825d 	.word	0x0800825d
 8008224:	0800825d 	.word	0x0800825d
 8008228:	0800825d 	.word	0x0800825d
 800822c:	0800825d 	.word	0x0800825d
 8008230:	0800825d 	.word	0x0800825d
 8008234:	08008263 	.word	0x08008263
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	3304      	adds	r3, #4
 800823c:	2101      	movs	r1, #1
 800823e:	4618      	mov	r0, r3
 8008240:	f001 f986 	bl	8009550 <RCCEx_PLL2_Config>
 8008244:	4603      	mov	r3, r0
 8008246:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008248:	e00c      	b.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	3324      	adds	r3, #36	; 0x24
 800824e:	2101      	movs	r1, #1
 8008250:	4618      	mov	r0, r3
 8008252:	f001 fa2f 	bl	80096b4 <RCCEx_PLL3_Config>
 8008256:	4603      	mov	r3, r0
 8008258:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800825a:	e003      	b.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800825c:	2301      	movs	r3, #1
 800825e:	75fb      	strb	r3, [r7, #23]
      break;
 8008260:	e000      	b.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8008262:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008264:	7dfb      	ldrb	r3, [r7, #23]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d109      	bne.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800826a:	4b32      	ldr	r3, [pc, #200]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800826c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800826e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008276:	492f      	ldr	r1, [pc, #188]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008278:	4313      	orrs	r3, r2
 800827a:	654b      	str	r3, [r1, #84]	; 0x54
 800827c:	e001      	b.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800827e:	7dfb      	ldrb	r3, [r7, #23]
 8008280:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f003 0302 	and.w	r3, r3, #2
 800828a:	2b00      	cmp	r3, #0
 800828c:	d037      	beq.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008292:	2b05      	cmp	r3, #5
 8008294:	d820      	bhi.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8008296:	a201      	add	r2, pc, #4	; (adr r2, 800829c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8008298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800829c:	080082df 	.word	0x080082df
 80082a0:	080082b5 	.word	0x080082b5
 80082a4:	080082c7 	.word	0x080082c7
 80082a8:	080082df 	.word	0x080082df
 80082ac:	080082df 	.word	0x080082df
 80082b0:	080082df 	.word	0x080082df
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	3304      	adds	r3, #4
 80082b8:	2101      	movs	r1, #1
 80082ba:	4618      	mov	r0, r3
 80082bc:	f001 f948 	bl	8009550 <RCCEx_PLL2_Config>
 80082c0:	4603      	mov	r3, r0
 80082c2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80082c4:	e00c      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	3324      	adds	r3, #36	; 0x24
 80082ca:	2101      	movs	r1, #1
 80082cc:	4618      	mov	r0, r3
 80082ce:	f001 f9f1 	bl	80096b4 <RCCEx_PLL3_Config>
 80082d2:	4603      	mov	r3, r0
 80082d4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80082d6:	e003      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	75fb      	strb	r3, [r7, #23]
      break;
 80082dc:	e000      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80082de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082e0:	7dfb      	ldrb	r3, [r7, #23]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d109      	bne.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80082e6:	4b13      	ldr	r3, [pc, #76]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80082e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082ea:	f023 0207 	bic.w	r2, r3, #7
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082f2:	4910      	ldr	r1, [pc, #64]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80082f4:	4313      	orrs	r3, r2
 80082f6:	654b      	str	r3, [r1, #84]	; 0x54
 80082f8:	e001      	b.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082fa:	7dfb      	ldrb	r3, [r7, #23]
 80082fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f003 0304 	and.w	r3, r3, #4
 8008306:	2b00      	cmp	r3, #0
 8008308:	d040      	beq.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008310:	2b05      	cmp	r3, #5
 8008312:	d827      	bhi.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8008314:	a201      	add	r2, pc, #4	; (adr r2, 800831c <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8008316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800831a:	bf00      	nop
 800831c:	0800836b 	.word	0x0800836b
 8008320:	08008341 	.word	0x08008341
 8008324:	08008353 	.word	0x08008353
 8008328:	0800836b 	.word	0x0800836b
 800832c:	0800836b 	.word	0x0800836b
 8008330:	0800836b 	.word	0x0800836b
 8008334:	58024400 	.word	0x58024400
 8008338:	58024800 	.word	0x58024800
 800833c:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	3304      	adds	r3, #4
 8008344:	2101      	movs	r1, #1
 8008346:	4618      	mov	r0, r3
 8008348:	f001 f902 	bl	8009550 <RCCEx_PLL2_Config>
 800834c:	4603      	mov	r3, r0
 800834e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008350:	e00c      	b.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	3324      	adds	r3, #36	; 0x24
 8008356:	2101      	movs	r1, #1
 8008358:	4618      	mov	r0, r3
 800835a:	f001 f9ab 	bl	80096b4 <RCCEx_PLL3_Config>
 800835e:	4603      	mov	r3, r0
 8008360:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008362:	e003      	b.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	75fb      	strb	r3, [r7, #23]
      break;
 8008368:	e000      	b.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800836a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800836c:	7dfb      	ldrb	r3, [r7, #23]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d10a      	bne.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008372:	4bb2      	ldr	r3, [pc, #712]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008376:	f023 0207 	bic.w	r2, r3, #7
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008380:	49ae      	ldr	r1, [pc, #696]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008382:	4313      	orrs	r3, r2
 8008384:	658b      	str	r3, [r1, #88]	; 0x58
 8008386:	e001      	b.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008388:	7dfb      	ldrb	r3, [r7, #23]
 800838a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f003 0320 	and.w	r3, r3, #32
 8008394:	2b00      	cmp	r3, #0
 8008396:	d044      	beq.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800839e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083a2:	d01b      	beq.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x964>
 80083a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083a8:	d805      	bhi.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d022      	beq.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80083ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083b2:	d00a      	beq.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x952>
 80083b4:	e01b      	b.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x976>
 80083b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083ba:	d01d      	beq.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80083bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083c0:	d01c      	beq.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x984>
 80083c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80083c6:	d01b      	beq.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80083c8:	e011      	b.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	3304      	adds	r3, #4
 80083ce:	2100      	movs	r1, #0
 80083d0:	4618      	mov	r0, r3
 80083d2:	f001 f8bd 	bl	8009550 <RCCEx_PLL2_Config>
 80083d6:	4603      	mov	r3, r0
 80083d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80083da:	e012      	b.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	3324      	adds	r3, #36	; 0x24
 80083e0:	2102      	movs	r1, #2
 80083e2:	4618      	mov	r0, r3
 80083e4:	f001 f966 	bl	80096b4 <RCCEx_PLL3_Config>
 80083e8:	4603      	mov	r3, r0
 80083ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80083ec:	e009      	b.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	75fb      	strb	r3, [r7, #23]
      break;
 80083f2:	e006      	b.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80083f4:	bf00      	nop
 80083f6:	e004      	b.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80083f8:	bf00      	nop
 80083fa:	e002      	b.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80083fc:	bf00      	nop
 80083fe:	e000      	b.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8008400:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008402:	7dfb      	ldrb	r3, [r7, #23]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d10a      	bne.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008408:	4b8c      	ldr	r3, [pc, #560]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800840a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800840c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008416:	4989      	ldr	r1, [pc, #548]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008418:	4313      	orrs	r3, r2
 800841a:	654b      	str	r3, [r1, #84]	; 0x54
 800841c:	e001      	b.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800841e:	7dfb      	ldrb	r3, [r7, #23]
 8008420:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800842a:	2b00      	cmp	r3, #0
 800842c:	d044      	beq.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008434:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008438:	d01b      	beq.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800843a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800843e:	d805      	bhi.n	800844c <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8008440:	2b00      	cmp	r3, #0
 8008442:	d022      	beq.n	800848a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8008444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008448:	d00a      	beq.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800844a:	e01b      	b.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 800844c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008450:	d01d      	beq.n	800848e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8008452:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008456:	d01c      	beq.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8008458:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800845c:	d01b      	beq.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800845e:	e011      	b.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	3304      	adds	r3, #4
 8008464:	2100      	movs	r1, #0
 8008466:	4618      	mov	r0, r3
 8008468:	f001 f872 	bl	8009550 <RCCEx_PLL2_Config>
 800846c:	4603      	mov	r3, r0
 800846e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008470:	e012      	b.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	3324      	adds	r3, #36	; 0x24
 8008476:	2102      	movs	r1, #2
 8008478:	4618      	mov	r0, r3
 800847a:	f001 f91b 	bl	80096b4 <RCCEx_PLL3_Config>
 800847e:	4603      	mov	r3, r0
 8008480:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008482:	e009      	b.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	75fb      	strb	r3, [r7, #23]
      break;
 8008488:	e006      	b.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800848a:	bf00      	nop
 800848c:	e004      	b.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800848e:	bf00      	nop
 8008490:	e002      	b.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008492:	bf00      	nop
 8008494:	e000      	b.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008496:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008498:	7dfb      	ldrb	r3, [r7, #23]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d10a      	bne.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800849e:	4b67      	ldr	r3, [pc, #412]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80084a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084a2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80084ac:	4963      	ldr	r1, [pc, #396]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80084ae:	4313      	orrs	r3, r2
 80084b0:	658b      	str	r3, [r1, #88]	; 0x58
 80084b2:	e001      	b.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084b4:	7dfb      	ldrb	r3, [r7, #23]
 80084b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d044      	beq.n	800854e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80084ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084ce:	d01b      	beq.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80084d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084d4:	d805      	bhi.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d022      	beq.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80084da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084de:	d00a      	beq.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80084e0:	e01b      	b.n	800851a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80084e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084e6:	d01d      	beq.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80084e8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80084ec:	d01c      	beq.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80084ee:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80084f2:	d01b      	beq.n	800852c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80084f4:	e011      	b.n	800851a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	3304      	adds	r3, #4
 80084fa:	2100      	movs	r1, #0
 80084fc:	4618      	mov	r0, r3
 80084fe:	f001 f827 	bl	8009550 <RCCEx_PLL2_Config>
 8008502:	4603      	mov	r3, r0
 8008504:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008506:	e012      	b.n	800852e <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	3324      	adds	r3, #36	; 0x24
 800850c:	2102      	movs	r1, #2
 800850e:	4618      	mov	r0, r3
 8008510:	f001 f8d0 	bl	80096b4 <RCCEx_PLL3_Config>
 8008514:	4603      	mov	r3, r0
 8008516:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008518:	e009      	b.n	800852e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800851a:	2301      	movs	r3, #1
 800851c:	75fb      	strb	r3, [r7, #23]
      break;
 800851e:	e006      	b.n	800852e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008520:	bf00      	nop
 8008522:	e004      	b.n	800852e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008524:	bf00      	nop
 8008526:	e002      	b.n	800852e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008528:	bf00      	nop
 800852a:	e000      	b.n	800852e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800852c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800852e:	7dfb      	ldrb	r3, [r7, #23]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d10a      	bne.n	800854a <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008534:	4b41      	ldr	r3, [pc, #260]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008538:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008542:	493e      	ldr	r1, [pc, #248]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008544:	4313      	orrs	r3, r2
 8008546:	658b      	str	r3, [r1, #88]	; 0x58
 8008548:	e001      	b.n	800854e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800854a:	7dfb      	ldrb	r3, [r7, #23]
 800854c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f003 0308 	and.w	r3, r3, #8
 8008556:	2b00      	cmp	r3, #0
 8008558:	d01a      	beq.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008564:	d10a      	bne.n	800857c <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	3324      	adds	r3, #36	; 0x24
 800856a:	2102      	movs	r1, #2
 800856c:	4618      	mov	r0, r3
 800856e:	f001 f8a1 	bl	80096b4 <RCCEx_PLL3_Config>
 8008572:	4603      	mov	r3, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	d001      	beq.n	800857c <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800857c:	4b2f      	ldr	r3, [pc, #188]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800857e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008580:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800858a:	492c      	ldr	r1, [pc, #176]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800858c:	4313      	orrs	r3, r2
 800858e:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f003 0310 	and.w	r3, r3, #16
 8008598:	2b00      	cmp	r3, #0
 800859a:	d01a      	beq.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80085a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085a6:	d10a      	bne.n	80085be <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	3324      	adds	r3, #36	; 0x24
 80085ac:	2102      	movs	r1, #2
 80085ae:	4618      	mov	r0, r3
 80085b0:	f001 f880 	bl	80096b4 <RCCEx_PLL3_Config>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d001      	beq.n	80085be <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80085be:	4b1f      	ldr	r3, [pc, #124]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80085c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80085cc:	491b      	ldr	r1, [pc, #108]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80085ce:	4313      	orrs	r3, r2
 80085d0:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d032      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80085e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085e8:	d00d      	beq.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80085ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085ee:	d016      	beq.n	800861e <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d111      	bne.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	3304      	adds	r3, #4
 80085f8:	2100      	movs	r1, #0
 80085fa:	4618      	mov	r0, r3
 80085fc:	f000 ffa8 	bl	8009550 <RCCEx_PLL2_Config>
 8008600:	4603      	mov	r3, r0
 8008602:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008604:	e00c      	b.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	3324      	adds	r3, #36	; 0x24
 800860a:	2102      	movs	r1, #2
 800860c:	4618      	mov	r0, r3
 800860e:	f001 f851 	bl	80096b4 <RCCEx_PLL3_Config>
 8008612:	4603      	mov	r3, r0
 8008614:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008616:	e003      	b.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	75fb      	strb	r3, [r7, #23]
      break;
 800861c:	e000      	b.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800861e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008620:	7dfb      	ldrb	r3, [r7, #23]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d10c      	bne.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008626:	4b05      	ldr	r3, [pc, #20]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800862a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008634:	4901      	ldr	r1, [pc, #4]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008636:	4313      	orrs	r3, r2
 8008638:	658b      	str	r3, [r1, #88]	; 0x58
 800863a:	e003      	b.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 800863c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008640:	7dfb      	ldrb	r3, [r7, #23]
 8008642:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800864c:	2b00      	cmp	r3, #0
 800864e:	d02f      	beq.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008656:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800865a:	d00c      	beq.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800865c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008660:	d015      	beq.n	800868e <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8008662:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008666:	d10f      	bne.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008668:	4b71      	ldr	r3, [pc, #452]	; (8008830 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800866a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800866c:	4a70      	ldr	r2, [pc, #448]	; (8008830 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800866e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008672:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008674:	e00c      	b.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	3324      	adds	r3, #36	; 0x24
 800867a:	2101      	movs	r1, #1
 800867c:	4618      	mov	r0, r3
 800867e:	f001 f819 	bl	80096b4 <RCCEx_PLL3_Config>
 8008682:	4603      	mov	r3, r0
 8008684:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008686:	e003      	b.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008688:	2301      	movs	r3, #1
 800868a:	75fb      	strb	r3, [r7, #23]
      break;
 800868c:	e000      	b.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800868e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008690:	7dfb      	ldrb	r3, [r7, #23]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d10a      	bne.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008696:	4b66      	ldr	r3, [pc, #408]	; (8008830 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800869a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086a4:	4962      	ldr	r1, [pc, #392]	; (8008830 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80086a6:	4313      	orrs	r3, r2
 80086a8:	654b      	str	r3, [r1, #84]	; 0x54
 80086aa:	e001      	b.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086ac:	7dfb      	ldrb	r3, [r7, #23]
 80086ae:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d029      	beq.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d003      	beq.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80086c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086c8:	d007      	beq.n	80086da <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80086ca:	e00f      	b.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086cc:	4b58      	ldr	r3, [pc, #352]	; (8008830 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80086ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d0:	4a57      	ldr	r2, [pc, #348]	; (8008830 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80086d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80086d8:	e00b      	b.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	3304      	adds	r3, #4
 80086de:	2102      	movs	r1, #2
 80086e0:	4618      	mov	r0, r3
 80086e2:	f000 ff35 	bl	8009550 <RCCEx_PLL2_Config>
 80086e6:	4603      	mov	r3, r0
 80086e8:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80086ea:	e002      	b.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	75fb      	strb	r3, [r7, #23]
      break;
 80086f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086f2:	7dfb      	ldrb	r3, [r7, #23]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d109      	bne.n	800870c <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80086f8:	4b4d      	ldr	r3, [pc, #308]	; (8008830 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80086fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008704:	494a      	ldr	r1, [pc, #296]	; (8008830 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008706:	4313      	orrs	r3, r2
 8008708:	64cb      	str	r3, [r1, #76]	; 0x4c
 800870a:	e001      	b.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800870c:	7dfb      	ldrb	r3, [r7, #23]
 800870e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008718:	2b00      	cmp	r3, #0
 800871a:	d00a      	beq.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	3324      	adds	r3, #36	; 0x24
 8008720:	2102      	movs	r1, #2
 8008722:	4618      	mov	r0, r3
 8008724:	f000 ffc6 	bl	80096b4 <RCCEx_PLL3_Config>
 8008728:	4603      	mov	r3, r0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d001      	beq.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800873a:	2b00      	cmp	r3, #0
 800873c:	d02f      	beq.n	800879e <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008746:	d00c      	beq.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800874c:	d802      	bhi.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800874e:	2b00      	cmp	r3, #0
 8008750:	d011      	beq.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8008752:	e00d      	b.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8008754:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008758:	d00f      	beq.n	800877a <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800875a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800875e:	d00e      	beq.n	800877e <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8008760:	e006      	b.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008762:	4b33      	ldr	r3, [pc, #204]	; (8008830 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008766:	4a32      	ldr	r2, [pc, #200]	; (8008830 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800876c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800876e:	e007      	b.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	75fb      	strb	r3, [r7, #23]
      break;
 8008774:	e004      	b.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008776:	bf00      	nop
 8008778:	e002      	b.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800877a:	bf00      	nop
 800877c:	e000      	b.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800877e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008780:	7dfb      	ldrb	r3, [r7, #23]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d109      	bne.n	800879a <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008786:	4b2a      	ldr	r3, [pc, #168]	; (8008830 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800878a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008792:	4927      	ldr	r1, [pc, #156]	; (8008830 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008794:	4313      	orrs	r3, r2
 8008796:	654b      	str	r3, [r1, #84]	; 0x54
 8008798:	e001      	b.n	800879e <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800879a:	7dfb      	ldrb	r3, [r7, #23]
 800879c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d008      	beq.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80087aa:	4b21      	ldr	r3, [pc, #132]	; (8008830 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80087ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087b6:	491e      	ldr	r1, [pc, #120]	; (8008830 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80087b8:	4313      	orrs	r3, r2
 80087ba:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d008      	beq.n	80087da <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80087c8:	4b19      	ldr	r3, [pc, #100]	; (8008830 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80087ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087cc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087d4:	4916      	ldr	r1, [pc, #88]	; (8008830 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80087d6:	4313      	orrs	r3, r2
 80087d8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d00d      	beq.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80087e6:	4b12      	ldr	r3, [pc, #72]	; (8008830 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	4a11      	ldr	r2, [pc, #68]	; (8008830 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80087ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80087f0:	6113      	str	r3, [r2, #16]
 80087f2:	4b0f      	ldr	r3, [pc, #60]	; (8008830 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80087f4:	691a      	ldr	r2, [r3, #16]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80087fc:	490c      	ldr	r1, [pc, #48]	; (8008830 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80087fe:	4313      	orrs	r3, r2
 8008800:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	2b00      	cmp	r3, #0
 8008808:	da08      	bge.n	800881c <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800880a:	4b09      	ldr	r3, [pc, #36]	; (8008830 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800880c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800880e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008816:	4906      	ldr	r1, [pc, #24]	; (8008830 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008818:	4313      	orrs	r3, r2
 800881a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800881c:	7dbb      	ldrb	r3, [r7, #22]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d101      	bne.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8008822:	2300      	movs	r3, #0
 8008824:	e000      	b.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8008826:	2301      	movs	r3, #1
}
 8008828:	4618      	mov	r0, r3
 800882a:	3718      	adds	r7, #24
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}
 8008830:	58024400 	.word	0x58024400

08008834 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b090      	sub	sp, #64	; 0x40
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008842:	d150      	bne.n	80088e6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008844:	4ba1      	ldr	r3, [pc, #644]	; (8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008848:	f003 0307 	and.w	r3, r3, #7
 800884c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800884e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008850:	2b04      	cmp	r3, #4
 8008852:	d844      	bhi.n	80088de <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8008854:	a201      	add	r2, pc, #4	; (adr r2, 800885c <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8008856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885a:	bf00      	nop
 800885c:	08008871 	.word	0x08008871
 8008860:	08008881 	.word	0x08008881
 8008864:	08008891 	.word	0x08008891
 8008868:	080088d9 	.word	0x080088d9
 800886c:	080088a1 	.word	0x080088a1
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008874:	4618      	mov	r0, r3
 8008876:	f000 fd03 	bl	8009280 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800887a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800887e:	e241      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008880:	f107 0318 	add.w	r3, r7, #24
 8008884:	4618      	mov	r0, r3
 8008886:	f000 fa63 	bl	8008d50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800888a:	69bb      	ldr	r3, [r7, #24]
 800888c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800888e:	e239      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008890:	f107 030c 	add.w	r3, r7, #12
 8008894:	4618      	mov	r0, r3
 8008896:	f000 fba7 	bl	8008fe8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800889e:	e231      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80088a0:	4b8a      	ldr	r3, [pc, #552]	; (8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80088a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80088a8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80088aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d102      	bne.n	80088b6 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80088b0:	4b87      	ldr	r3, [pc, #540]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80088b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80088b4:	e226      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80088b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088bc:	d102      	bne.n	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 80088be:	4b85      	ldr	r3, [pc, #532]	; (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80088c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088c2:	e21f      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80088c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088ca:	d102      	bne.n	80088d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 80088cc:	4b82      	ldr	r3, [pc, #520]	; (8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80088ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088d0:	e218      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80088d2:	2300      	movs	r3, #0
 80088d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088d6:	e215      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80088d8:	4b80      	ldr	r3, [pc, #512]	; (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80088da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088dc:	e212      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80088de:	2300      	movs	r3, #0
 80088e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088e2:	bf00      	nop
 80088e4:	e20e      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088ec:	d14f      	bne.n	800898e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80088ee:	4b77      	ldr	r3, [pc, #476]	; (8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80088f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088f2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80088f6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80088f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fa:	2b80      	cmp	r3, #128	; 0x80
 80088fc:	d01c      	beq.n	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80088fe:	2b80      	cmp	r3, #128	; 0x80
 8008900:	d804      	bhi.n	800890c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8008902:	2b00      	cmp	r3, #0
 8008904:	d008      	beq.n	8008918 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8008906:	2b40      	cmp	r3, #64	; 0x40
 8008908:	d00e      	beq.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800890a:	e03c      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800890c:	2bc0      	cmp	r3, #192	; 0xc0
 800890e:	d037      	beq.n	8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8008910:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008914:	d018      	beq.n	8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8008916:	e036      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800891c:	4618      	mov	r0, r3
 800891e:	f000 fcaf 	bl	8009280 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008924:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008926:	e1ed      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008928:	f107 0318 	add.w	r3, r7, #24
 800892c:	4618      	mov	r0, r3
 800892e:	f000 fa0f 	bl	8008d50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008936:	e1e5      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008938:	f107 030c 	add.w	r3, r7, #12
 800893c:	4618      	mov	r0, r3
 800893e:	f000 fb53 	bl	8008fe8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008946:	e1dd      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008948:	4b60      	ldr	r3, [pc, #384]	; (8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800894a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800894c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008950:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008954:	2b00      	cmp	r3, #0
 8008956:	d102      	bne.n	800895e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008958:	4b5d      	ldr	r3, [pc, #372]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800895a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800895c:	e1d2      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800895e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008960:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008964:	d102      	bne.n	800896c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8008966:	4b5b      	ldr	r3, [pc, #364]	; (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008968:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800896a:	e1cb      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800896c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800896e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008972:	d102      	bne.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8008974:	4b58      	ldr	r3, [pc, #352]	; (8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008976:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008978:	e1c4      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800897a:	2300      	movs	r3, #0
 800897c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800897e:	e1c1      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008980:	4b56      	ldr	r3, [pc, #344]	; (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008982:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008984:	e1be      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008986:	2300      	movs	r3, #0
 8008988:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800898a:	bf00      	nop
 800898c:	e1ba      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008994:	d153      	bne.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008996:	4b4d      	ldr	r3, [pc, #308]	; (8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800899a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800899e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80089a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089a6:	d01f      	beq.n	80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80089a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089ac:	d805      	bhi.n	80089ba <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00a      	beq.n	80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 80089b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80089b6:	d00f      	beq.n	80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80089b8:	e03d      	b.n	8008a36 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 80089ba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80089be:	d037      	beq.n	8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80089c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80089c4:	d018      	beq.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 80089c6:	e036      	b.n	8008a36 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089cc:	4618      	mov	r0, r3
 80089ce:	f000 fc57 	bl	8009280 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80089d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089d6:	e195      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089d8:	f107 0318 	add.w	r3, r7, #24
 80089dc:	4618      	mov	r0, r3
 80089de:	f000 f9b7 	bl	8008d50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80089e2:	69bb      	ldr	r3, [r7, #24]
 80089e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089e6:	e18d      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089e8:	f107 030c 	add.w	r3, r7, #12
 80089ec:	4618      	mov	r0, r3
 80089ee:	f000 fafb 	bl	8008fe8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089f6:	e185      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80089f8:	4b34      	ldr	r3, [pc, #208]	; (8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80089fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008a00:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d102      	bne.n	8008a0e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008a08:	4b31      	ldr	r3, [pc, #196]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008a0c:	e17a      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a14:	d102      	bne.n	8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8008a16:	4b2f      	ldr	r3, [pc, #188]	; (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008a18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a1a:	e173      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a22:	d102      	bne.n	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8008a24:	4b2c      	ldr	r3, [pc, #176]	; (8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008a26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a28:	e16c      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a2e:	e169      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008a30:	4b2a      	ldr	r3, [pc, #168]	; (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008a32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a34:	e166      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008a36:	2300      	movs	r3, #0
 8008a38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a3a:	bf00      	nop
 8008a3c:	e162      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a44:	d15d      	bne.n	8008b02 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008a46:	4b21      	ldr	r3, [pc, #132]	; (8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a4a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008a4e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a56:	d01f      	beq.n	8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008a58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a5c:	d805      	bhi.n	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d00a      	beq.n	8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8008a62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008a66:	d00f      	beq.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8008a68:	e047      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8008a6a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008a6e:	d041      	beq.n	8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8008a70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a74:	d018      	beq.n	8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8008a76:	e040      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f000 fbff 	bl	8009280 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a86:	e13d      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a88:	f107 0318 	add.w	r3, r7, #24
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f000 f95f 	bl	8008d50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a96:	e135      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a98:	f107 030c 	add.w	r3, r7, #12
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f000 faa3 	bl	8008fe8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008aa6:	e12d      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008aa8:	4b08      	ldr	r3, [pc, #32]	; (8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008aac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ab0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d102      	bne.n	8008abe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008ab8:	4b05      	ldr	r3, [pc, #20]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008aba:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008abc:	e122      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ac0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ac4:	d10c      	bne.n	8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8008ac6:	4b03      	ldr	r3, [pc, #12]	; (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008aca:	e11b      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008acc:	58024400 	.word	0x58024400
 8008ad0:	03d09000 	.word	0x03d09000
 8008ad4:	003d0900 	.word	0x003d0900
 8008ad8:	017d7840 	.word	0x017d7840
 8008adc:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ae2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ae6:	d102      	bne.n	8008aee <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8008ae8:	4b89      	ldr	r3, [pc, #548]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008aea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008aec:	e10a      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008aee:	2300      	movs	r3, #0
 8008af0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008af2:	e107      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008af4:	4b87      	ldr	r3, [pc, #540]	; (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8008af6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008af8:	e104      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008afa:	2300      	movs	r3, #0
 8008afc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008afe:	bf00      	nop
 8008b00:	e100      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b08:	d153      	bne.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008b0a:	4b83      	ldr	r3, [pc, #524]	; (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b0e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008b12:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b1a:	d01f      	beq.n	8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8008b1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b20:	d805      	bhi.n	8008b2e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00a      	beq.n	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8008b26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b2a:	d00f      	beq.n	8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8008b2c:	e03d      	b.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8008b2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008b32:	d037      	beq.n	8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8008b34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b38:	d018      	beq.n	8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8008b3a:	e036      	b.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b40:	4618      	mov	r0, r3
 8008b42:	f000 fb9d 	bl	8009280 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b4a:	e0db      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b4c:	f107 0318 	add.w	r3, r7, #24
 8008b50:	4618      	mov	r0, r3
 8008b52:	f000 f8fd 	bl	8008d50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b5a:	e0d3      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b5c:	f107 030c 	add.w	r3, r7, #12
 8008b60:	4618      	mov	r0, r3
 8008b62:	f000 fa41 	bl	8008fe8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b6a:	e0cb      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008b6c:	4b6a      	ldr	r3, [pc, #424]	; (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008b74:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d102      	bne.n	8008b82 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008b7c:	4b67      	ldr	r3, [pc, #412]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008b80:	e0c0      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b88:	d102      	bne.n	8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8008b8a:	4b65      	ldr	r3, [pc, #404]	; (8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b8e:	e0b9      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b96:	d102      	bne.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8008b98:	4b5d      	ldr	r3, [pc, #372]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b9c:	e0b2      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ba2:	e0af      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008ba4:	4b5b      	ldr	r3, [pc, #364]	; (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8008ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ba8:	e0ac      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008baa:	2300      	movs	r3, #0
 8008bac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bae:	bf00      	nop
 8008bb0:	e0a8      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008bb8:	d13d      	bne.n	8008c36 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008bba:	4b57      	ldr	r3, [pc, #348]	; (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008bc2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bca:	d00c      	beq.n	8008be6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008bcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008bd0:	d011      	beq.n	8008bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d12b      	bne.n	8008c2e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bd6:	f107 0318 	add.w	r3, r7, #24
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f000 f8b8 	bl	8008d50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008be0:	69bb      	ldr	r3, [r7, #24]
 8008be2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008be4:	e08e      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008be6:	f107 030c 	add.w	r3, r7, #12
 8008bea:	4618      	mov	r0, r3
 8008bec:	f000 f9fc 	bl	8008fe8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bf4:	e086      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008bf6:	4b48      	ldr	r3, [pc, #288]	; (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bfa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008bfe:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d102      	bne.n	8008c0c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008c06:	4b45      	ldr	r3, [pc, #276]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008c08:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008c0a:	e07b      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c12:	d102      	bne.n	8008c1a <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8008c14:	4b42      	ldr	r3, [pc, #264]	; (8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008c16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c18:	e074      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c20:	d102      	bne.n	8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8008c22:	4b3b      	ldr	r3, [pc, #236]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008c24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c26:	e06d      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c2c:	e06a      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c32:	bf00      	nop
 8008c34:	e066      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c3c:	d11f      	bne.n	8008c7e <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008c3e:	4b36      	ldr	r3, [pc, #216]	; (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c46:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d003      	beq.n	8008c56 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c52:	d008      	beq.n	8008c66 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8008c54:	e00f      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f000 fb10 	bl	8009280 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c64:	e04e      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c66:	f107 0318 	add.w	r3, r7, #24
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f000 f870 	bl	8008d50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008c70:	6a3b      	ldr	r3, [r7, #32]
 8008c72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c74:	e046      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008c76:	2300      	movs	r3, #0
 8008c78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c7a:	bf00      	nop
 8008c7c:	e042      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c84:	d13c      	bne.n	8008d00 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008c86:	4b24      	ldr	r3, [pc, #144]	; (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c8a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008c8e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c96:	d01e      	beq.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8008c98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c9c:	d805      	bhi.n	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d00d      	beq.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008ca2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ca6:	d00e      	beq.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8008ca8:	e026      	b.n	8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8008caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cae:	d01d      	beq.n	8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8008cb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cb4:	d01d      	beq.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8008cb6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008cba:	d014      	beq.n	8008ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8008cbc:	e01c      	b.n	8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008cbe:	f000 f831 	bl	8008d24 <HAL_RCCEx_GetD3PCLK1Freq>
 8008cc2:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008cc4:	e01e      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cc6:	f107 0318 	add.w	r3, r7, #24
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f000 f840 	bl	8008d50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cd4:	e016      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cd6:	f107 030c 	add.w	r3, r7, #12
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f000 f984 	bl	8008fe8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ce4:	e00e      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8008ce6:	4b0d      	ldr	r3, [pc, #52]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cea:	e00b      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8008cec:	4b0c      	ldr	r3, [pc, #48]	; (8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008cee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cf0:	e008      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8008cf2:	4b07      	ldr	r3, [pc, #28]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cf6:	e005      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cfc:	bf00      	nop
 8008cfe:	e001      	b.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8008d00:	2300      	movs	r3, #0
 8008d02:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3740      	adds	r7, #64	; 0x40
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	017d7840 	.word	0x017d7840
 8008d14:	00bb8000 	.word	0x00bb8000
 8008d18:	58024400 	.word	0x58024400
 8008d1c:	03d09000 	.word	0x03d09000
 8008d20:	003d0900 	.word	0x003d0900

08008d24 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008d28:	f7fe fe42 	bl	80079b0 <HAL_RCC_GetHCLKFreq>
 8008d2c:	4601      	mov	r1, r0
 8008d2e:	4b06      	ldr	r3, [pc, #24]	; (8008d48 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008d30:	6a1b      	ldr	r3, [r3, #32]
 8008d32:	091b      	lsrs	r3, r3, #4
 8008d34:	f003 0307 	and.w	r3, r3, #7
 8008d38:	4a04      	ldr	r2, [pc, #16]	; (8008d4c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008d3a:	5cd3      	ldrb	r3, [r2, r3]
 8008d3c:	f003 031f 	and.w	r3, r3, #31
 8008d40:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	bd80      	pop	{r7, pc}
 8008d48:	58024400 	.word	0x58024400
 8008d4c:	08011cd4 	.word	0x08011cd4

08008d50 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b089      	sub	sp, #36	; 0x24
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d58:	4b9d      	ldr	r3, [pc, #628]	; (8008fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d5c:	f003 0303 	and.w	r3, r3, #3
 8008d60:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008d62:	4b9b      	ldr	r3, [pc, #620]	; (8008fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d66:	0b1b      	lsrs	r3, r3, #12
 8008d68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d6c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008d6e:	4b98      	ldr	r3, [pc, #608]	; (8008fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d72:	091b      	lsrs	r3, r3, #4
 8008d74:	f003 0301 	and.w	r3, r3, #1
 8008d78:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008d7a:	4b95      	ldr	r3, [pc, #596]	; (8008fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d7e:	08db      	lsrs	r3, r3, #3
 8008d80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d84:	693a      	ldr	r2, [r7, #16]
 8008d86:	fb02 f303 	mul.w	r3, r2, r3
 8008d8a:	ee07 3a90 	vmov	s15, r3
 8008d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	f000 810a 	beq.w	8008fb2 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8008d9e:	69bb      	ldr	r3, [r7, #24]
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d05a      	beq.n	8008e5a <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d302      	bcc.n	8008dae <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8008da8:	2b02      	cmp	r3, #2
 8008daa:	d078      	beq.n	8008e9e <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8008dac:	e099      	b.n	8008ee2 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008dae:	4b88      	ldr	r3, [pc, #544]	; (8008fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f003 0320 	and.w	r3, r3, #32
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d02d      	beq.n	8008e16 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008dba:	4b85      	ldr	r3, [pc, #532]	; (8008fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	08db      	lsrs	r3, r3, #3
 8008dc0:	f003 0303 	and.w	r3, r3, #3
 8008dc4:	4a83      	ldr	r2, [pc, #524]	; (8008fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8008dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8008dca:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	ee07 3a90 	vmov	s15, r3
 8008dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	ee07 3a90 	vmov	s15, r3
 8008ddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008de0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008de4:	4b7a      	ldr	r3, [pc, #488]	; (8008fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dec:	ee07 3a90 	vmov	s15, r3
 8008df0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008df4:	ed97 6a03 	vldr	s12, [r7, #12]
 8008df8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008dfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e10:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008e14:	e087      	b.n	8008f26 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	ee07 3a90 	vmov	s15, r3
 8008e1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e20:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008fdc <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8008e24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e28:	4b69      	ldr	r3, [pc, #420]	; (8008fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e30:	ee07 3a90 	vmov	s15, r3
 8008e34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e38:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e3c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008e40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e54:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e58:	e065      	b.n	8008f26 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	ee07 3a90 	vmov	s15, r3
 8008e60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e64:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008e68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e6c:	4b58      	ldr	r3, [pc, #352]	; (8008fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e74:	ee07 3a90 	vmov	s15, r3
 8008e78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e7c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e80:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008e84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e98:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e9c:	e043      	b.n	8008f26 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	ee07 3a90 	vmov	s15, r3
 8008ea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ea8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8008eac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eb0:	4b47      	ldr	r3, [pc, #284]	; (8008fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eb8:	ee07 3a90 	vmov	s15, r3
 8008ebc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ec0:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ec4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008ec8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ecc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ed0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ed4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008edc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ee0:	e021      	b.n	8008f26 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	ee07 3a90 	vmov	s15, r3
 8008ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eec:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008ef0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ef4:	4b36      	ldr	r3, [pc, #216]	; (8008fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008efc:	ee07 3a90 	vmov	s15, r3
 8008f00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f04:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f08:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008f0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f20:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f24:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008f26:	4b2a      	ldr	r3, [pc, #168]	; (8008fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2a:	0a5b      	lsrs	r3, r3, #9
 8008f2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f30:	ee07 3a90 	vmov	s15, r3
 8008f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f40:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f4c:	ee17 2a90 	vmov	r2, s15
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008f54:	4b1e      	ldr	r3, [pc, #120]	; (8008fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f58:	0c1b      	lsrs	r3, r3, #16
 8008f5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f5e:	ee07 3a90 	vmov	s15, r3
 8008f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f7a:	ee17 2a90 	vmov	r2, s15
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008f82:	4b13      	ldr	r3, [pc, #76]	; (8008fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f86:	0e1b      	lsrs	r3, r3, #24
 8008f88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f8c:	ee07 3a90 	vmov	s15, r3
 8008f90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fa8:	ee17 2a90 	vmov	r2, s15
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008fb0:	e008      	b.n	8008fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	609a      	str	r2, [r3, #8]
}
 8008fc4:	bf00      	nop
 8008fc6:	3724      	adds	r7, #36	; 0x24
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr
 8008fd0:	58024400 	.word	0x58024400
 8008fd4:	03d09000 	.word	0x03d09000
 8008fd8:	46000000 	.word	0x46000000
 8008fdc:	4c742400 	.word	0x4c742400
 8008fe0:	4a742400 	.word	0x4a742400
 8008fe4:	4bbebc20 	.word	0x4bbebc20

08008fe8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b089      	sub	sp, #36	; 0x24
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ff0:	4b9d      	ldr	r3, [pc, #628]	; (8009268 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff4:	f003 0303 	and.w	r3, r3, #3
 8008ff8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008ffa:	4b9b      	ldr	r3, [pc, #620]	; (8009268 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ffe:	0d1b      	lsrs	r3, r3, #20
 8009000:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009004:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009006:	4b98      	ldr	r3, [pc, #608]	; (8009268 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800900a:	0a1b      	lsrs	r3, r3, #8
 800900c:	f003 0301 	and.w	r3, r3, #1
 8009010:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009012:	4b95      	ldr	r3, [pc, #596]	; (8009268 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009016:	08db      	lsrs	r3, r3, #3
 8009018:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800901c:	693a      	ldr	r2, [r7, #16]
 800901e:	fb02 f303 	mul.w	r3, r2, r3
 8009022:	ee07 3a90 	vmov	s15, r3
 8009026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800902a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	2b00      	cmp	r3, #0
 8009032:	f000 810a 	beq.w	800924a <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8009036:	69bb      	ldr	r3, [r7, #24]
 8009038:	2b01      	cmp	r3, #1
 800903a:	d05a      	beq.n	80090f2 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800903c:	2b01      	cmp	r3, #1
 800903e:	d302      	bcc.n	8009046 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8009040:	2b02      	cmp	r3, #2
 8009042:	d078      	beq.n	8009136 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8009044:	e099      	b.n	800917a <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009046:	4b88      	ldr	r3, [pc, #544]	; (8009268 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f003 0320 	and.w	r3, r3, #32
 800904e:	2b00      	cmp	r3, #0
 8009050:	d02d      	beq.n	80090ae <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009052:	4b85      	ldr	r3, [pc, #532]	; (8009268 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	08db      	lsrs	r3, r3, #3
 8009058:	f003 0303 	and.w	r3, r3, #3
 800905c:	4a83      	ldr	r2, [pc, #524]	; (800926c <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800905e:	fa22 f303 	lsr.w	r3, r2, r3
 8009062:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	ee07 3a90 	vmov	s15, r3
 800906a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	ee07 3a90 	vmov	s15, r3
 8009074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009078:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800907c:	4b7a      	ldr	r3, [pc, #488]	; (8009268 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800907e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009084:	ee07 3a90 	vmov	s15, r3
 8009088:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800908c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009090:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009270 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009094:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009098:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800909c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090a8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80090ac:	e087      	b.n	80091be <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	ee07 3a90 	vmov	s15, r3
 80090b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090b8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009274 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80090bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090c0:	4b69      	ldr	r3, [pc, #420]	; (8009268 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80090c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090c8:	ee07 3a90 	vmov	s15, r3
 80090cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80090d4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009270 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80090d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80090f0:	e065      	b.n	80091be <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	ee07 3a90 	vmov	s15, r3
 80090f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090fc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009278 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8009100:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009104:	4b58      	ldr	r3, [pc, #352]	; (8009268 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009108:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800910c:	ee07 3a90 	vmov	s15, r3
 8009110:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009114:	ed97 6a03 	vldr	s12, [r7, #12]
 8009118:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009270 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800911c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009120:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009124:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009128:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800912c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009130:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009134:	e043      	b.n	80091be <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	ee07 3a90 	vmov	s15, r3
 800913c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009140:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800927c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8009144:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009148:	4b47      	ldr	r3, [pc, #284]	; (8009268 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800914a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800914c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009150:	ee07 3a90 	vmov	s15, r3
 8009154:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009158:	ed97 6a03 	vldr	s12, [r7, #12]
 800915c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009270 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009160:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009164:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009168:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800916c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009174:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009178:	e021      	b.n	80091be <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	ee07 3a90 	vmov	s15, r3
 8009180:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009184:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8009278 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8009188:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800918c:	4b36      	ldr	r3, [pc, #216]	; (8009268 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800918e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009194:	ee07 3a90 	vmov	s15, r3
 8009198:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800919c:	ed97 6a03 	vldr	s12, [r7, #12]
 80091a0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009270 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80091a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80091bc:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80091be:	4b2a      	ldr	r3, [pc, #168]	; (8009268 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80091c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091c2:	0a5b      	lsrs	r3, r3, #9
 80091c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091c8:	ee07 3a90 	vmov	s15, r3
 80091cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80091dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091e4:	ee17 2a90 	vmov	r2, s15
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80091ec:	4b1e      	ldr	r3, [pc, #120]	; (8009268 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80091ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f0:	0c1b      	lsrs	r3, r3, #16
 80091f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091f6:	ee07 3a90 	vmov	s15, r3
 80091fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009202:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009206:	edd7 6a07 	vldr	s13, [r7, #28]
 800920a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800920e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009212:	ee17 2a90 	vmov	r2, s15
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800921a:	4b13      	ldr	r3, [pc, #76]	; (8009268 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800921c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800921e:	0e1b      	lsrs	r3, r3, #24
 8009220:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009224:	ee07 3a90 	vmov	s15, r3
 8009228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800922c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009230:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009234:	edd7 6a07 	vldr	s13, [r7, #28]
 8009238:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800923c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009240:	ee17 2a90 	vmov	r2, s15
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009248:	e008      	b.n	800925c <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2200      	movs	r2, #0
 800924e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	609a      	str	r2, [r3, #8]
}
 800925c:	bf00      	nop
 800925e:	3724      	adds	r7, #36	; 0x24
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr
 8009268:	58024400 	.word	0x58024400
 800926c:	03d09000 	.word	0x03d09000
 8009270:	46000000 	.word	0x46000000
 8009274:	4c742400 	.word	0x4c742400
 8009278:	4a742400 	.word	0x4a742400
 800927c:	4bbebc20 	.word	0x4bbebc20

08009280 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009280:	b480      	push	{r7}
 8009282:	b089      	sub	sp, #36	; 0x24
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009288:	4b9d      	ldr	r3, [pc, #628]	; (8009500 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800928a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800928c:	f003 0303 	and.w	r3, r3, #3
 8009290:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009292:	4b9b      	ldr	r3, [pc, #620]	; (8009500 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009296:	091b      	lsrs	r3, r3, #4
 8009298:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800929c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800929e:	4b98      	ldr	r3, [pc, #608]	; (8009500 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80092a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a2:	f003 0301 	and.w	r3, r3, #1
 80092a6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80092a8:	4b95      	ldr	r3, [pc, #596]	; (8009500 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80092aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ac:	08db      	lsrs	r3, r3, #3
 80092ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80092b2:	693a      	ldr	r2, [r7, #16]
 80092b4:	fb02 f303 	mul.w	r3, r2, r3
 80092b8:	ee07 3a90 	vmov	s15, r3
 80092bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092c0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	f000 810a 	beq.w	80094e0 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 80092cc:	69bb      	ldr	r3, [r7, #24]
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d05a      	beq.n	8009388 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d302      	bcc.n	80092dc <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 80092d6:	2b02      	cmp	r3, #2
 80092d8:	d078      	beq.n	80093cc <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 80092da:	e099      	b.n	8009410 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092dc:	4b88      	ldr	r3, [pc, #544]	; (8009500 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f003 0320 	and.w	r3, r3, #32
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d02d      	beq.n	8009344 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80092e8:	4b85      	ldr	r3, [pc, #532]	; (8009500 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	08db      	lsrs	r3, r3, #3
 80092ee:	f003 0303 	and.w	r3, r3, #3
 80092f2:	4a84      	ldr	r2, [pc, #528]	; (8009504 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 80092f4:	fa22 f303 	lsr.w	r3, r2, r3
 80092f8:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	ee07 3a90 	vmov	s15, r3
 8009300:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	ee07 3a90 	vmov	s15, r3
 800930a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800930e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009312:	4b7b      	ldr	r3, [pc, #492]	; (8009500 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800931a:	ee07 3a90 	vmov	s15, r3
 800931e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009322:	ed97 6a03 	vldr	s12, [r7, #12]
 8009326:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009508 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800932a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800932e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800933a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800933e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009342:	e087      	b.n	8009454 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	ee07 3a90 	vmov	s15, r3
 800934a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800934e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800950c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8009352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009356:	4b6a      	ldr	r3, [pc, #424]	; (8009500 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800935a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800935e:	ee07 3a90 	vmov	s15, r3
 8009362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009366:	ed97 6a03 	vldr	s12, [r7, #12]
 800936a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009508 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800936e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800937a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800937e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009382:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009386:	e065      	b.n	8009454 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	ee07 3a90 	vmov	s15, r3
 800938e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009392:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009510 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8009396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800939a:	4b59      	ldr	r3, [pc, #356]	; (8009500 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800939c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800939e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093a2:	ee07 3a90 	vmov	s15, r3
 80093a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80093ae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009508 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80093b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80093ca:	e043      	b.n	8009454 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	ee07 3a90 	vmov	s15, r3
 80093d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093d6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009514 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80093da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093de:	4b48      	ldr	r3, [pc, #288]	; (8009500 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80093e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093e6:	ee07 3a90 	vmov	s15, r3
 80093ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80093f2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009508 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80093f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800940a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800940e:	e021      	b.n	8009454 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	ee07 3a90 	vmov	s15, r3
 8009416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800941a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009510 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800941e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009422:	4b37      	ldr	r3, [pc, #220]	; (8009500 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800942a:	ee07 3a90 	vmov	s15, r3
 800942e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009432:	ed97 6a03 	vldr	s12, [r7, #12]
 8009436:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009508 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800943a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800943e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009442:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800944a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800944e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009452:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009454:	4b2a      	ldr	r3, [pc, #168]	; (8009500 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009458:	0a5b      	lsrs	r3, r3, #9
 800945a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800945e:	ee07 3a90 	vmov	s15, r3
 8009462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009466:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800946a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800946e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009472:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009476:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800947a:	ee17 2a90 	vmov	r2, s15
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009482:	4b1f      	ldr	r3, [pc, #124]	; (8009500 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009486:	0c1b      	lsrs	r3, r3, #16
 8009488:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800948c:	ee07 3a90 	vmov	s15, r3
 8009490:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009494:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009498:	ee37 7a87 	vadd.f32	s14, s15, s14
 800949c:	edd7 6a07 	vldr	s13, [r7, #28]
 80094a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094a8:	ee17 2a90 	vmov	r2, s15
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80094b0:	4b13      	ldr	r3, [pc, #76]	; (8009500 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80094b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b4:	0e1b      	lsrs	r3, r3, #24
 80094b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094ba:	ee07 3a90 	vmov	s15, r3
 80094be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80094c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80094ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094d6:	ee17 2a90 	vmov	r2, s15
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80094de:	e008      	b.n	80094f2 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2200      	movs	r2, #0
 80094ea:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2200      	movs	r2, #0
 80094f0:	609a      	str	r2, [r3, #8]
}
 80094f2:	bf00      	nop
 80094f4:	3724      	adds	r7, #36	; 0x24
 80094f6:	46bd      	mov	sp, r7
 80094f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fc:	4770      	bx	lr
 80094fe:	bf00      	nop
 8009500:	58024400 	.word	0x58024400
 8009504:	03d09000 	.word	0x03d09000
 8009508:	46000000 	.word	0x46000000
 800950c:	4c742400 	.word	0x4c742400
 8009510:	4a742400 	.word	0x4a742400
 8009514:	4bbebc20 	.word	0x4bbebc20

08009518 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1CPRE)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800951c:	f7fe f8d6 	bl	80076cc <HAL_RCC_GetSysClockFreq>
 8009520:	4601      	mov	r1, r0
 8009522:	4b08      	ldr	r3, [pc, #32]	; (8009544 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8009524:	699b      	ldr	r3, [r3, #24]
 8009526:	0a1b      	lsrs	r3, r3, #8
 8009528:	f003 030f 	and.w	r3, r3, #15
 800952c:	4a06      	ldr	r2, [pc, #24]	; (8009548 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 800952e:	5cd3      	ldrb	r3, [r2, r3]
 8009530:	f003 031f 	and.w	r3, r3, #31
 8009534:	fa21 f303 	lsr.w	r3, r1, r3
 8009538:	4a04      	ldr	r2, [pc, #16]	; (800954c <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 800953a:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif
  return SystemCoreClock;
 800953c:	4b03      	ldr	r3, [pc, #12]	; (800954c <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 800953e:	681b      	ldr	r3, [r3, #0]
}
 8009540:	4618      	mov	r0, r3
 8009542:	bd80      	pop	{r7, pc}
 8009544:	58024400 	.word	0x58024400
 8009548:	08011cd4 	.word	0x08011cd4
 800954c:	24000000 	.word	0x24000000

08009550 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800955a:	2300      	movs	r3, #0
 800955c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800955e:	4b53      	ldr	r3, [pc, #332]	; (80096ac <RCCEx_PLL2_Config+0x15c>)
 8009560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009562:	f003 0303 	and.w	r3, r3, #3
 8009566:	2b03      	cmp	r3, #3
 8009568:	d101      	bne.n	800956e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800956a:	2301      	movs	r3, #1
 800956c:	e099      	b.n	80096a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800956e:	4b4f      	ldr	r3, [pc, #316]	; (80096ac <RCCEx_PLL2_Config+0x15c>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4a4e      	ldr	r2, [pc, #312]	; (80096ac <RCCEx_PLL2_Config+0x15c>)
 8009574:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009578:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800957a:	f7f8 ffc3 	bl	8002504 <HAL_GetTick>
 800957e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009580:	e008      	b.n	8009594 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009582:	f7f8 ffbf 	bl	8002504 <HAL_GetTick>
 8009586:	4602      	mov	r2, r0
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	1ad3      	subs	r3, r2, r3
 800958c:	2b02      	cmp	r3, #2
 800958e:	d901      	bls.n	8009594 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009590:	2303      	movs	r3, #3
 8009592:	e086      	b.n	80096a2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009594:	4b45      	ldr	r3, [pc, #276]	; (80096ac <RCCEx_PLL2_Config+0x15c>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800959c:	2b00      	cmp	r3, #0
 800959e:	d1f0      	bne.n	8009582 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80095a0:	4b42      	ldr	r3, [pc, #264]	; (80096ac <RCCEx_PLL2_Config+0x15c>)
 80095a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	031b      	lsls	r3, r3, #12
 80095ae:	493f      	ldr	r1, [pc, #252]	; (80096ac <RCCEx_PLL2_Config+0x15c>)
 80095b0:	4313      	orrs	r3, r2
 80095b2:	628b      	str	r3, [r1, #40]	; 0x28
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	3b01      	subs	r3, #1
 80095ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	689b      	ldr	r3, [r3, #8]
 80095c2:	3b01      	subs	r3, #1
 80095c4:	025b      	lsls	r3, r3, #9
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	431a      	orrs	r2, r3
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	68db      	ldr	r3, [r3, #12]
 80095ce:	3b01      	subs	r3, #1
 80095d0:	041b      	lsls	r3, r3, #16
 80095d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80095d6:	431a      	orrs	r2, r3
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	691b      	ldr	r3, [r3, #16]
 80095dc:	3b01      	subs	r3, #1
 80095de:	061b      	lsls	r3, r3, #24
 80095e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80095e4:	4931      	ldr	r1, [pc, #196]	; (80096ac <RCCEx_PLL2_Config+0x15c>)
 80095e6:	4313      	orrs	r3, r2
 80095e8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80095ea:	4b30      	ldr	r3, [pc, #192]	; (80096ac <RCCEx_PLL2_Config+0x15c>)
 80095ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	695b      	ldr	r3, [r3, #20]
 80095f6:	492d      	ldr	r1, [pc, #180]	; (80096ac <RCCEx_PLL2_Config+0x15c>)
 80095f8:	4313      	orrs	r3, r2
 80095fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80095fc:	4b2b      	ldr	r3, [pc, #172]	; (80096ac <RCCEx_PLL2_Config+0x15c>)
 80095fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009600:	f023 0220 	bic.w	r2, r3, #32
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	699b      	ldr	r3, [r3, #24]
 8009608:	4928      	ldr	r1, [pc, #160]	; (80096ac <RCCEx_PLL2_Config+0x15c>)
 800960a:	4313      	orrs	r3, r2
 800960c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800960e:	4b27      	ldr	r3, [pc, #156]	; (80096ac <RCCEx_PLL2_Config+0x15c>)
 8009610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009612:	4a26      	ldr	r2, [pc, #152]	; (80096ac <RCCEx_PLL2_Config+0x15c>)
 8009614:	f023 0310 	bic.w	r3, r3, #16
 8009618:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800961a:	4b24      	ldr	r3, [pc, #144]	; (80096ac <RCCEx_PLL2_Config+0x15c>)
 800961c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800961e:	4b24      	ldr	r3, [pc, #144]	; (80096b0 <RCCEx_PLL2_Config+0x160>)
 8009620:	4013      	ands	r3, r2
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	69d2      	ldr	r2, [r2, #28]
 8009626:	00d2      	lsls	r2, r2, #3
 8009628:	4920      	ldr	r1, [pc, #128]	; (80096ac <RCCEx_PLL2_Config+0x15c>)
 800962a:	4313      	orrs	r3, r2
 800962c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800962e:	4b1f      	ldr	r3, [pc, #124]	; (80096ac <RCCEx_PLL2_Config+0x15c>)
 8009630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009632:	4a1e      	ldr	r2, [pc, #120]	; (80096ac <RCCEx_PLL2_Config+0x15c>)
 8009634:	f043 0310 	orr.w	r3, r3, #16
 8009638:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d106      	bne.n	800964e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009640:	4b1a      	ldr	r3, [pc, #104]	; (80096ac <RCCEx_PLL2_Config+0x15c>)
 8009642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009644:	4a19      	ldr	r2, [pc, #100]	; (80096ac <RCCEx_PLL2_Config+0x15c>)
 8009646:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800964a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800964c:	e00f      	b.n	800966e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	2b01      	cmp	r3, #1
 8009652:	d106      	bne.n	8009662 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009654:	4b15      	ldr	r3, [pc, #84]	; (80096ac <RCCEx_PLL2_Config+0x15c>)
 8009656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009658:	4a14      	ldr	r2, [pc, #80]	; (80096ac <RCCEx_PLL2_Config+0x15c>)
 800965a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800965e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009660:	e005      	b.n	800966e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009662:	4b12      	ldr	r3, [pc, #72]	; (80096ac <RCCEx_PLL2_Config+0x15c>)
 8009664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009666:	4a11      	ldr	r2, [pc, #68]	; (80096ac <RCCEx_PLL2_Config+0x15c>)
 8009668:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800966c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800966e:	4b0f      	ldr	r3, [pc, #60]	; (80096ac <RCCEx_PLL2_Config+0x15c>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4a0e      	ldr	r2, [pc, #56]	; (80096ac <RCCEx_PLL2_Config+0x15c>)
 8009674:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009678:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800967a:	f7f8 ff43 	bl	8002504 <HAL_GetTick>
 800967e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009680:	e008      	b.n	8009694 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009682:	f7f8 ff3f 	bl	8002504 <HAL_GetTick>
 8009686:	4602      	mov	r2, r0
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	1ad3      	subs	r3, r2, r3
 800968c:	2b02      	cmp	r3, #2
 800968e:	d901      	bls.n	8009694 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009690:	2303      	movs	r3, #3
 8009692:	e006      	b.n	80096a2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009694:	4b05      	ldr	r3, [pc, #20]	; (80096ac <RCCEx_PLL2_Config+0x15c>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800969c:	2b00      	cmp	r3, #0
 800969e:	d0f0      	beq.n	8009682 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80096a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3710      	adds	r7, #16
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	58024400 	.word	0x58024400
 80096b0:	ffff0007 	.word	0xffff0007

080096b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80096be:	2300      	movs	r3, #0
 80096c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80096c2:	4b53      	ldr	r3, [pc, #332]	; (8009810 <RCCEx_PLL3_Config+0x15c>)
 80096c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c6:	f003 0303 	and.w	r3, r3, #3
 80096ca:	2b03      	cmp	r3, #3
 80096cc:	d101      	bne.n	80096d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80096ce:	2301      	movs	r3, #1
 80096d0:	e099      	b.n	8009806 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80096d2:	4b4f      	ldr	r3, [pc, #316]	; (8009810 <RCCEx_PLL3_Config+0x15c>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4a4e      	ldr	r2, [pc, #312]	; (8009810 <RCCEx_PLL3_Config+0x15c>)
 80096d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80096dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096de:	f7f8 ff11 	bl	8002504 <HAL_GetTick>
 80096e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80096e4:	e008      	b.n	80096f8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80096e6:	f7f8 ff0d 	bl	8002504 <HAL_GetTick>
 80096ea:	4602      	mov	r2, r0
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	1ad3      	subs	r3, r2, r3
 80096f0:	2b02      	cmp	r3, #2
 80096f2:	d901      	bls.n	80096f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80096f4:	2303      	movs	r3, #3
 80096f6:	e086      	b.n	8009806 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80096f8:	4b45      	ldr	r3, [pc, #276]	; (8009810 <RCCEx_PLL3_Config+0x15c>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009700:	2b00      	cmp	r3, #0
 8009702:	d1f0      	bne.n	80096e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009704:	4b42      	ldr	r3, [pc, #264]	; (8009810 <RCCEx_PLL3_Config+0x15c>)
 8009706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009708:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	051b      	lsls	r3, r3, #20
 8009712:	493f      	ldr	r1, [pc, #252]	; (8009810 <RCCEx_PLL3_Config+0x15c>)
 8009714:	4313      	orrs	r3, r2
 8009716:	628b      	str	r3, [r1, #40]	; 0x28
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	3b01      	subs	r3, #1
 800971e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	689b      	ldr	r3, [r3, #8]
 8009726:	3b01      	subs	r3, #1
 8009728:	025b      	lsls	r3, r3, #9
 800972a:	b29b      	uxth	r3, r3
 800972c:	431a      	orrs	r2, r3
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	68db      	ldr	r3, [r3, #12]
 8009732:	3b01      	subs	r3, #1
 8009734:	041b      	lsls	r3, r3, #16
 8009736:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800973a:	431a      	orrs	r2, r3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	3b01      	subs	r3, #1
 8009742:	061b      	lsls	r3, r3, #24
 8009744:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009748:	4931      	ldr	r1, [pc, #196]	; (8009810 <RCCEx_PLL3_Config+0x15c>)
 800974a:	4313      	orrs	r3, r2
 800974c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800974e:	4b30      	ldr	r3, [pc, #192]	; (8009810 <RCCEx_PLL3_Config+0x15c>)
 8009750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009752:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	695b      	ldr	r3, [r3, #20]
 800975a:	492d      	ldr	r1, [pc, #180]	; (8009810 <RCCEx_PLL3_Config+0x15c>)
 800975c:	4313      	orrs	r3, r2
 800975e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009760:	4b2b      	ldr	r3, [pc, #172]	; (8009810 <RCCEx_PLL3_Config+0x15c>)
 8009762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009764:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	699b      	ldr	r3, [r3, #24]
 800976c:	4928      	ldr	r1, [pc, #160]	; (8009810 <RCCEx_PLL3_Config+0x15c>)
 800976e:	4313      	orrs	r3, r2
 8009770:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009772:	4b27      	ldr	r3, [pc, #156]	; (8009810 <RCCEx_PLL3_Config+0x15c>)
 8009774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009776:	4a26      	ldr	r2, [pc, #152]	; (8009810 <RCCEx_PLL3_Config+0x15c>)
 8009778:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800977c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800977e:	4b24      	ldr	r3, [pc, #144]	; (8009810 <RCCEx_PLL3_Config+0x15c>)
 8009780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009782:	4b24      	ldr	r3, [pc, #144]	; (8009814 <RCCEx_PLL3_Config+0x160>)
 8009784:	4013      	ands	r3, r2
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	69d2      	ldr	r2, [r2, #28]
 800978a:	00d2      	lsls	r2, r2, #3
 800978c:	4920      	ldr	r1, [pc, #128]	; (8009810 <RCCEx_PLL3_Config+0x15c>)
 800978e:	4313      	orrs	r3, r2
 8009790:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009792:	4b1f      	ldr	r3, [pc, #124]	; (8009810 <RCCEx_PLL3_Config+0x15c>)
 8009794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009796:	4a1e      	ldr	r2, [pc, #120]	; (8009810 <RCCEx_PLL3_Config+0x15c>)
 8009798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800979c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d106      	bne.n	80097b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80097a4:	4b1a      	ldr	r3, [pc, #104]	; (8009810 <RCCEx_PLL3_Config+0x15c>)
 80097a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a8:	4a19      	ldr	r2, [pc, #100]	; (8009810 <RCCEx_PLL3_Config+0x15c>)
 80097aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80097ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80097b0:	e00f      	b.n	80097d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d106      	bne.n	80097c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80097b8:	4b15      	ldr	r3, [pc, #84]	; (8009810 <RCCEx_PLL3_Config+0x15c>)
 80097ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097bc:	4a14      	ldr	r2, [pc, #80]	; (8009810 <RCCEx_PLL3_Config+0x15c>)
 80097be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80097c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80097c4:	e005      	b.n	80097d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80097c6:	4b12      	ldr	r3, [pc, #72]	; (8009810 <RCCEx_PLL3_Config+0x15c>)
 80097c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ca:	4a11      	ldr	r2, [pc, #68]	; (8009810 <RCCEx_PLL3_Config+0x15c>)
 80097cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80097d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80097d2:	4b0f      	ldr	r3, [pc, #60]	; (8009810 <RCCEx_PLL3_Config+0x15c>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a0e      	ldr	r2, [pc, #56]	; (8009810 <RCCEx_PLL3_Config+0x15c>)
 80097d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097de:	f7f8 fe91 	bl	8002504 <HAL_GetTick>
 80097e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80097e4:	e008      	b.n	80097f8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80097e6:	f7f8 fe8d 	bl	8002504 <HAL_GetTick>
 80097ea:	4602      	mov	r2, r0
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	1ad3      	subs	r3, r2, r3
 80097f0:	2b02      	cmp	r3, #2
 80097f2:	d901      	bls.n	80097f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80097f4:	2303      	movs	r3, #3
 80097f6:	e006      	b.n	8009806 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80097f8:	4b05      	ldr	r3, [pc, #20]	; (8009810 <RCCEx_PLL3_Config+0x15c>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009800:	2b00      	cmp	r3, #0
 8009802:	d0f0      	beq.n	80097e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009804:	7bfb      	ldrb	r3, [r7, #15]
}
 8009806:	4618      	mov	r0, r3
 8009808:	3710      	adds	r7, #16
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	58024400 	.word	0x58024400
 8009814:	ffff0007 	.word	0xffff0007

08009818 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009820:	2301      	movs	r3, #1
 8009822:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2b00      	cmp	r3, #0
 8009828:	f000 808a 	beq.w	8009940 <HAL_RTC_Init+0x128>
  {
    status = HAL_OK;
 800982c:	2300      	movs	r3, #0
 800982e:	73fb      	strb	r3, [r7, #15]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009836:	b2db      	uxtb	r3, r3
 8009838:	2b00      	cmp	r3, #0
 800983a:	d106      	bne.n	800984a <HAL_RTC_Init+0x32>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f7f7 fdcd 	bl	80013e4 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2202      	movs	r2, #2
 800984e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	22ca      	movs	r2, #202	; 0xca
 8009858:	625a      	str	r2, [r3, #36]	; 0x24
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	2253      	movs	r2, #83	; 0x53
 8009860:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 f89a 	bl	800999c <RTC_EnterInitMode>
 8009868:	4603      	mov	r3, r0
 800986a:	2b00      	cmp	r3, #0
 800986c:	d00a      	beq.n	8009884 <HAL_RTC_Init+0x6c>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	22ff      	movs	r2, #255	; 0xff
 8009874:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2204      	movs	r2, #4
 800987a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 800987e:	2301      	movs	r3, #1
 8009880:	73fb      	strb	r3, [r7, #15]
 8009882:	e05d      	b.n	8009940 <HAL_RTC_Init+0x128>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	6899      	ldr	r1, [r3, #8]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	4b2f      	ldr	r3, [pc, #188]	; (800994c <HAL_RTC_Init+0x134>)
 8009890:	400b      	ands	r3, r1
 8009892:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	6899      	ldr	r1, [r3, #8]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	685a      	ldr	r2, [r3, #4]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	691b      	ldr	r3, [r3, #16]
 80098a2:	431a      	orrs	r2, r3
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	699b      	ldr	r3, [r3, #24]
 80098a8:	431a      	orrs	r2, r3
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	430a      	orrs	r2, r1
 80098b0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	0419      	lsls	r1, r3, #16
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	68da      	ldr	r2, [r3, #12]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	430a      	orrs	r2, r1
 80098c2:	611a      	str	r2, [r3, #16]
      /* Exit Initialization mode */
#if defined(RTC_ICSR_INIT)
      CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
#endif /* RTC_ICSR_INIT */
#if defined(RTC_ISR_INIT)
      CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	68da      	ldr	r2, [r3, #12]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80098d2:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_INIT */

      /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	f003 0320 	and.w	r3, r3, #32
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d10f      	bne.n	8009902 <HAL_RTC_Init+0xea>
      {
        if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 f834 	bl	8009950 <HAL_RTC_WaitForSynchro>
 80098e8:	4603      	mov	r3, r0
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d009      	beq.n	8009902 <HAL_RTC_Init+0xea>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	22ff      	movs	r2, #255	; 0xff
 80098f4:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2204      	movs	r2, #4
 80098fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          status = HAL_ERROR;
 80098fe:	2301      	movs	r3, #1
 8009900:	73fb      	strb	r3, [r7, #15]
        }
      }

      if(status == HAL_OK)
 8009902:	7bfb      	ldrb	r3, [r7, #15]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d11b      	bne.n	8009940 <HAL_RTC_Init+0x128>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f022 0203 	bic.w	r2, r2, #3
 8009916:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	69da      	ldr	r2, [r3, #28]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	695b      	ldr	r3, [r3, #20]
 8009926:	431a      	orrs	r2, r3
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	430a      	orrs	r2, r1
 800992e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	22ff      	movs	r2, #255	; 0xff
 8009936:	625a      	str	r2, [r3, #36]	; 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2201      	movs	r2, #1
 800993c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  /* return status */
  return status;
 8009940:	7bfb      	ldrb	r3, [r7, #15]
}
 8009942:	4618      	mov	r0, r3
 8009944:	3710      	adds	r7, #16
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	ff8fffbf 	.word	0xff8fffbf

08009950 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	68da      	ldr	r2, [r3, #12]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009966:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8009968:	f7f8 fdcc 	bl	8002504 <HAL_GetTick>
 800996c:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800996e:	e009      	b.n	8009984 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009970:	f7f8 fdc8 	bl	8002504 <HAL_GetTick>
 8009974:	4602      	mov	r2, r0
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	1ad3      	subs	r3, r2, r3
 800997a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800997e:	d901      	bls.n	8009984 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8009980:	2303      	movs	r3, #3
 8009982:	e007      	b.n	8009994 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	f003 0320 	and.w	r3, r3, #32
 800998e:	2b00      	cmp	r3, #0
 8009990:	d0ee      	beq.n	8009970 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8009992:	2300      	movs	r3, #0
}
 8009994:	4618      	mov	r0, r3
 8009996:	3710      	adds	r7, #16
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	68db      	ldr	r3, [r3, #12]
 80099aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d119      	bne.n	80099e6 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f04f 32ff 	mov.w	r2, #4294967295
 80099ba:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80099bc:	f7f8 fda2 	bl	8002504 <HAL_GetTick>
 80099c0:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80099c2:	e009      	b.n	80099d8 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80099c4:	f7f8 fd9e 	bl	8002504 <HAL_GetTick>
 80099c8:	4602      	mov	r2, r0
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	1ad3      	subs	r3, r2, r3
 80099ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80099d2:	d901      	bls.n	80099d8 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80099d4:	2303      	movs	r3, #3
 80099d6:	e007      	b.n	80099e8 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	68db      	ldr	r3, [r3, #12]
 80099de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d0ee      	beq.n	80099c4 <RTC_EnterInitMode+0x28>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return HAL_OK;
 80099e6:	2300      	movs	r3, #0
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3710      	adds	r7, #16
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 80099f8:	2300      	movs	r3, #0
 80099fa:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d101      	bne.n	8009a06 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8009a02:	2301      	movs	r3, #1
 8009a04:	e0e2      	b.n	8009bcc <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a70      	ldr	r2, [pc, #448]	; (8009bd4 <HAL_SPI_Init+0x1e4>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d00f      	beq.n	8009a36 <HAL_SPI_Init+0x46>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a6f      	ldr	r2, [pc, #444]	; (8009bd8 <HAL_SPI_Init+0x1e8>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d00a      	beq.n	8009a36 <HAL_SPI_Init+0x46>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a6d      	ldr	r2, [pc, #436]	; (8009bdc <HAL_SPI_Init+0x1ec>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d005      	beq.n	8009a36 <HAL_SPI_Init+0x46>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	68db      	ldr	r3, [r3, #12]
 8009a2e:	2b0f      	cmp	r3, #15
 8009a30:	d901      	bls.n	8009a36 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8009a32:	2301      	movs	r3, #1
 8009a34:	e0ca      	b.n	8009bcc <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 fe7e 	bl	800a738 <SPI_GetPacketSize>
 8009a3c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4a64      	ldr	r2, [pc, #400]	; (8009bd4 <HAL_SPI_Init+0x1e4>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d00c      	beq.n	8009a62 <HAL_SPI_Init+0x72>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a62      	ldr	r2, [pc, #392]	; (8009bd8 <HAL_SPI_Init+0x1e8>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d007      	beq.n	8009a62 <HAL_SPI_Init+0x72>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a61      	ldr	r2, [pc, #388]	; (8009bdc <HAL_SPI_Init+0x1ec>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d002      	beq.n	8009a62 <HAL_SPI_Init+0x72>
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	2b08      	cmp	r3, #8
 8009a60:	d811      	bhi.n	8009a86 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009a66:	4a5b      	ldr	r2, [pc, #364]	; (8009bd4 <HAL_SPI_Init+0x1e4>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d009      	beq.n	8009a80 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a59      	ldr	r2, [pc, #356]	; (8009bd8 <HAL_SPI_Init+0x1e8>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d004      	beq.n	8009a80 <HAL_SPI_Init+0x90>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a58      	ldr	r2, [pc, #352]	; (8009bdc <HAL_SPI_Init+0x1ec>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d104      	bne.n	8009a8a <HAL_SPI_Init+0x9a>
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	2b10      	cmp	r3, #16
 8009a84:	d901      	bls.n	8009a8a <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8009a86:	2301      	movs	r3, #1
 8009a88:	e0a0      	b.n	8009bcc <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d106      	bne.n	8009aa4 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f7f7 fe12 	bl	80016c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2202      	movs	r2, #2
 8009aa8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f022 0201 	bic.w	r2, r2, #1
 8009aba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	699b      	ldr	r3, [r3, #24]
 8009ac0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009ac4:	d110      	bne.n	8009ae8 <HAL_SPI_Init+0xf8>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ace:	d10b      	bne.n	8009ae8 <HAL_SPI_Init+0xf8>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d107      	bne.n	8009ae8 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009ae6:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	69da      	ldr	r2, [r3, #28]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009af0:	431a      	orrs	r2, r3
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	431a      	orrs	r2, r3
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009afa:	ea42 0103 	orr.w	r1, r2, r3
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	68da      	ldr	r2, [r3, #12]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	430a      	orrs	r2, r1
 8009b08:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b12:	431a      	orrs	r2, r3
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b18:	431a      	orrs	r2, r3
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	699b      	ldr	r3, [r3, #24]
 8009b1e:	431a      	orrs	r2, r3
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	691b      	ldr	r3, [r3, #16]
 8009b24:	431a      	orrs	r2, r3
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	695b      	ldr	r3, [r3, #20]
 8009b2a:	431a      	orrs	r2, r3
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6a1b      	ldr	r3, [r3, #32]
 8009b30:	431a      	orrs	r2, r3
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	431a      	orrs	r2, r3
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b3c:	431a      	orrs	r2, r3
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	431a      	orrs	r2, r3
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b48:	ea42 0103 	orr.w	r1, r2, r3
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	430a      	orrs	r2, r1
 8009b56:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d113      	bne.n	8009b88 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	689b      	ldr	r3, [r3, #8]
 8009b66:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b72:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	689b      	ldr	r3, [r3, #8]
 8009b7a:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009b86:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f022 0201 	bic.w	r2, r2, #1
 8009b96:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	685b      	ldr	r3, [r3, #4]
 8009b9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d00a      	beq.n	8009bba <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	68db      	ldr	r3, [r3, #12]
 8009baa:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	430a      	orrs	r2, r1
 8009bb8:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009bca:	2300      	movs	r3, #0
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3710      	adds	r7, #16
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	40013000 	.word	0x40013000
 8009bd8:	40003800 	.word	0x40003800
 8009bdc:	40003c00 	.word	0x40003c00

08009be0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b08a      	sub	sp, #40	; 0x28
 8009be4:	af02      	add	r7, sp, #8
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	60b9      	str	r1, [r7, #8]
 8009bea:	603b      	str	r3, [r7, #0]
 8009bec:	4613      	mov	r3, r2
 8009bee:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	3320      	adds	r3, #32
 8009bf6:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009c02:	2b01      	cmp	r3, #1
 8009c04:	d101      	bne.n	8009c0a <HAL_SPI_Transmit+0x2a>
 8009c06:	2302      	movs	r3, #2
 8009c08:	e1d7      	b.n	8009fba <HAL_SPI_Transmit+0x3da>
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009c12:	f7f8 fc77 	bl	8002504 <HAL_GetTick>
 8009c16:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	d007      	beq.n	8009c34 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8009c24:	2302      	movs	r3, #2
 8009c26:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009c30:	7efb      	ldrb	r3, [r7, #27]
 8009c32:	e1c2      	b.n	8009fba <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d002      	beq.n	8009c40 <HAL_SPI_Transmit+0x60>
 8009c3a:	88fb      	ldrh	r3, [r7, #6]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d107      	bne.n	8009c50 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8009c40:	2301      	movs	r3, #1
 8009c42:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2200      	movs	r2, #0
 8009c48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009c4c:	7efb      	ldrb	r3, [r7, #27]
 8009c4e:	e1b4      	b.n	8009fba <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2203      	movs	r2, #3
 8009c54:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	68ba      	ldr	r2, [r7, #8]
 8009c64:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	88fa      	ldrh	r2, [r7, #6]
 8009c6a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	88fa      	ldrh	r2, [r7, #6]
 8009c72:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2200      	movs	r2, #0
 8009c88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2200      	movs	r2, #0
 8009c96:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	689b      	ldr	r3, [r3, #8]
 8009c9c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8009ca0:	d107      	bne.n	8009cb2 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	681a      	ldr	r2, [r3, #0]
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009cb0:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	685a      	ldr	r2, [r3, #4]
 8009cb8:	4b96      	ldr	r3, [pc, #600]	; (8009f14 <HAL_SPI_Transmit+0x334>)
 8009cba:	4013      	ands	r3, r2
 8009cbc:	88f9      	ldrh	r1, [r7, #6]
 8009cbe:	68fa      	ldr	r2, [r7, #12]
 8009cc0:	6812      	ldr	r2, [r2, #0]
 8009cc2:	430b      	orrs	r3, r1
 8009cc4:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	681a      	ldr	r2, [r3, #0]
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f042 0201 	orr.w	r2, r2, #1
 8009cd4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009cde:	d107      	bne.n	8009cf0 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	681a      	ldr	r2, [r3, #0]
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	68db      	ldr	r3, [r3, #12]
 8009cf4:	2b0f      	cmp	r3, #15
 8009cf6:	d947      	bls.n	8009d88 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009cf8:	e03f      	b.n	8009d7a <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	695b      	ldr	r3, [r3, #20]
 8009d00:	f003 0302 	and.w	r3, r3, #2
 8009d04:	2b02      	cmp	r3, #2
 8009d06:	d114      	bne.n	8009d32 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	6812      	ldr	r2, [r2, #0]
 8009d12:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d18:	1d1a      	adds	r2, r3, #4
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	3b01      	subs	r3, #1
 8009d28:	b29a      	uxth	r2, r3
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009d30:	e023      	b.n	8009d7a <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d32:	f7f8 fbe7 	bl	8002504 <HAL_GetTick>
 8009d36:	4602      	mov	r2, r0
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	1ad3      	subs	r3, r2, r3
 8009d3c:	683a      	ldr	r2, [r7, #0]
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d803      	bhi.n	8009d4a <HAL_SPI_Transmit+0x16a>
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d48:	d102      	bne.n	8009d50 <HAL_SPI_Transmit+0x170>
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d114      	bne.n	8009d7a <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009d50:	68f8      	ldr	r0, [r7, #12]
 8009d52:	f000 fc23 	bl	800a59c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d64:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2201      	movs	r2, #1
 8009d72:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8009d76:	2301      	movs	r3, #1
 8009d78:	e11f      	b.n	8009fba <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d1b9      	bne.n	8009cfa <HAL_SPI_Transmit+0x11a>
 8009d86:	e0f2      	b.n	8009f6e <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	68db      	ldr	r3, [r3, #12]
 8009d8c:	2b07      	cmp	r3, #7
 8009d8e:	f240 80e7 	bls.w	8009f60 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009d92:	e05d      	b.n	8009e50 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	695b      	ldr	r3, [r3, #20]
 8009d9a:	f003 0302 	and.w	r3, r3, #2
 8009d9e:	2b02      	cmp	r3, #2
 8009da0:	d132      	bne.n	8009e08 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009da8:	b29b      	uxth	r3, r3
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d918      	bls.n	8009de0 <HAL_SPI_Transmit+0x200>
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d014      	beq.n	8009de0 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	6812      	ldr	r2, [r2, #0]
 8009dc0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dc6:	1d1a      	adds	r2, r3, #4
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	3b02      	subs	r3, #2
 8009dd6:	b29a      	uxth	r2, r3
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009dde:	e037      	b.n	8009e50 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009de4:	881a      	ldrh	r2, [r3, #0]
 8009de6:	69fb      	ldr	r3, [r7, #28]
 8009de8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dee:	1c9a      	adds	r2, r3, #2
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	3b01      	subs	r3, #1
 8009dfe:	b29a      	uxth	r2, r3
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009e06:	e023      	b.n	8009e50 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e08:	f7f8 fb7c 	bl	8002504 <HAL_GetTick>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	1ad3      	subs	r3, r2, r3
 8009e12:	683a      	ldr	r2, [r7, #0]
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d803      	bhi.n	8009e20 <HAL_SPI_Transmit+0x240>
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e1e:	d102      	bne.n	8009e26 <HAL_SPI_Transmit+0x246>
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d114      	bne.n	8009e50 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009e26:	68f8      	ldr	r0, [r7, #12]
 8009e28:	f000 fbb8 	bl	800a59c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e3a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2201      	movs	r2, #1
 8009e48:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	e0b4      	b.n	8009fba <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d19b      	bne.n	8009d94 <HAL_SPI_Transmit+0x1b4>
 8009e5c:	e087      	b.n	8009f6e <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	695b      	ldr	r3, [r3, #20]
 8009e64:	f003 0302 	and.w	r3, r3, #2
 8009e68:	2b02      	cmp	r3, #2
 8009e6a:	d155      	bne.n	8009f18 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	2b03      	cmp	r3, #3
 8009e76:	d918      	bls.n	8009eaa <HAL_SPI_Transmit+0x2ca>
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e7c:	2b40      	cmp	r3, #64	; 0x40
 8009e7e:	d914      	bls.n	8009eaa <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	6812      	ldr	r2, [r2, #0]
 8009e8a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e90:	1d1a      	adds	r2, r3, #4
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	3b04      	subs	r3, #4
 8009ea0:	b29a      	uxth	r2, r3
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009ea8:	e05a      	b.n	8009f60 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009eb0:	b29b      	uxth	r3, r3
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d917      	bls.n	8009ee6 <HAL_SPI_Transmit+0x306>
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d013      	beq.n	8009ee6 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ec2:	881a      	ldrh	r2, [r3, #0]
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ecc:	1c9a      	adds	r2, r3, #2
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	3b02      	subs	r3, #2
 8009edc:	b29a      	uxth	r2, r3
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009ee4:	e03c      	b.n	8009f60 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	3320      	adds	r3, #32
 8009ef0:	7812      	ldrb	r2, [r2, #0]
 8009ef2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ef8:	1c5a      	adds	r2, r3, #1
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	3b01      	subs	r3, #1
 8009f08:	b29a      	uxth	r2, r3
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009f10:	e026      	b.n	8009f60 <HAL_SPI_Transmit+0x380>
 8009f12:	bf00      	nop
 8009f14:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f18:	f7f8 faf4 	bl	8002504 <HAL_GetTick>
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	1ad3      	subs	r3, r2, r3
 8009f22:	683a      	ldr	r2, [r7, #0]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d803      	bhi.n	8009f30 <HAL_SPI_Transmit+0x350>
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f2e:	d102      	bne.n	8009f36 <HAL_SPI_Transmit+0x356>
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d114      	bne.n	8009f60 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009f36:	68f8      	ldr	r0, [r7, #12]
 8009f38:	f000 fb30 	bl	800a59c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f4a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2201      	movs	r2, #1
 8009f58:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	e02c      	b.n	8009fba <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	f47f af78 	bne.w	8009e5e <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	9300      	str	r3, [sp, #0]
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	2200      	movs	r2, #0
 8009f76:	2108      	movs	r1, #8
 8009f78:	68f8      	ldr	r0, [r7, #12]
 8009f7a:	f000 fbaf 	bl	800a6dc <SPI_WaitOnFlagUntilTimeout>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d007      	beq.n	8009f94 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f8a:	f043 0220 	orr.w	r2, r3, #32
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009f94:	68f8      	ldr	r0, [r7, #12]
 8009f96:	f000 fb01 	bl	800a59c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d001      	beq.n	8009fb8 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	e000      	b.n	8009fba <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8009fb8:	7efb      	ldrb	r3, [r7, #27]
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3720      	adds	r7, #32
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	bf00      	nop

08009fc4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b08e      	sub	sp, #56	; 0x38
 8009fc8:	af02      	add	r7, sp, #8
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	60b9      	str	r1, [r7, #8]
 8009fce:	607a      	str	r2, [r7, #4]
 8009fd0:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	3320      	adds	r3, #32
 8009fde:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	3330      	adds	r3, #48	; 0x30
 8009fe6:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	d101      	bne.n	8009ff6 <HAL_SPI_TransmitReceive+0x32>
 8009ff2:	2302      	movs	r3, #2
 8009ff4:	e2ce      	b.n	800a594 <HAL_SPI_TransmitReceive+0x5d0>
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009ffe:	f7f8 fa81 	bl	8002504 <HAL_GetTick>
 800a002:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800a004:	887b      	ldrh	r3, [r7, #2]
 800a006:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800a008:	887b      	ldrh	r3, [r7, #2]
 800a00a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a012:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a01a:	7efb      	ldrb	r3, [r7, #27]
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d014      	beq.n	800a04a <HAL_SPI_TransmitReceive+0x86>
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a026:	d106      	bne.n	800a036 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	689b      	ldr	r3, [r3, #8]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d102      	bne.n	800a036 <HAL_SPI_TransmitReceive+0x72>
 800a030:	7efb      	ldrb	r3, [r7, #27]
 800a032:	2b04      	cmp	r3, #4
 800a034:	d009      	beq.n	800a04a <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800a036:	2302      	movs	r3, #2
 800a038:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2200      	movs	r2, #0
 800a040:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a044:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a048:	e2a4      	b.n	800a594 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d005      	beq.n	800a05c <HAL_SPI_TransmitReceive+0x98>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d002      	beq.n	800a05c <HAL_SPI_TransmitReceive+0x98>
 800a056:	887b      	ldrh	r3, [r7, #2]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d109      	bne.n	800a070 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800a05c:	2301      	movs	r3, #1
 800a05e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2200      	movs	r2, #0
 800a066:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a06a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a06e:	e291      	b.n	800a594 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a076:	b2db      	uxtb	r3, r3
 800a078:	2b04      	cmp	r3, #4
 800a07a:	d003      	beq.n	800a084 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2205      	movs	r2, #5
 800a080:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2200      	movs	r2, #0
 800a088:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	887a      	ldrh	r2, [r7, #2]
 800a096:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	887a      	ldrh	r2, [r7, #2]
 800a09e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	68ba      	ldr	r2, [r7, #8]
 800a0a6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	887a      	ldrh	r2, [r7, #2]
 800a0ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	887a      	ldrh	r2, [r7, #2]
 800a0b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	685a      	ldr	r2, [r3, #4]
 800a0ca:	4b9f      	ldr	r3, [pc, #636]	; (800a348 <HAL_SPI_TransmitReceive+0x384>)
 800a0cc:	4013      	ands	r3, r2
 800a0ce:	8879      	ldrh	r1, [r7, #2]
 800a0d0:	68fa      	ldr	r2, [r7, #12]
 800a0d2:	6812      	ldr	r2, [r2, #0]
 800a0d4:	430b      	orrs	r3, r1
 800a0d6:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f042 0201 	orr.w	r2, r2, #1
 800a0e6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a0f0:	d107      	bne.n	800a102 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	681a      	ldr	r2, [r3, #0]
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a100:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	68db      	ldr	r3, [r3, #12]
 800a106:	2b0f      	cmp	r3, #15
 800a108:	d970      	bls.n	800a1ec <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a10a:	e044      	b.n	800a196 <HAL_SPI_TransmitReceive+0x1d2>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	695b      	ldr	r3, [r3, #20]
 800a112:	f003 0302 	and.w	r3, r3, #2
 800a116:	2b02      	cmp	r3, #2
 800a118:	d11a      	bne.n	800a150 <HAL_SPI_TransmitReceive+0x18c>
 800a11a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d017      	beq.n	800a150 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	6812      	ldr	r2, [r2, #0]
 800a12a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a130:	1d1a      	adds	r2, r3, #4
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	3b01      	subs	r3, #1
 800a140:	b29a      	uxth	r2, r3
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a14e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	695a      	ldr	r2, [r3, #20]
 800a156:	f248 0308 	movw	r3, #32776	; 0x8008
 800a15a:	4013      	ands	r3, r2
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d01a      	beq.n	800a196 <HAL_SPI_TransmitReceive+0x1d2>
 800a160:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a162:	2b00      	cmp	r3, #0
 800a164:	d017      	beq.n	800a196 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a16e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a170:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a176:	1d1a      	adds	r2, r3, #4
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a182:	b29b      	uxth	r3, r3
 800a184:	3b01      	subs	r3, #1
 800a186:	b29a      	uxth	r2, r3
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a194:	85bb      	strh	r3, [r7, #44]	; 0x2c
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a196:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d1b7      	bne.n	800a10c <HAL_SPI_TransmitReceive+0x148>
 800a19c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d1b4      	bne.n	800a10c <HAL_SPI_TransmitReceive+0x148>
      }
    }

    /* Timeout management */
    if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a1a2:	f7f8 f9af 	bl	8002504 <HAL_GetTick>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	69fb      	ldr	r3, [r7, #28]
 800a1aa:	1ad3      	subs	r3, r2, r3
 800a1ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d803      	bhi.n	800a1ba <HAL_SPI_TransmitReceive+0x1f6>
 800a1b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1b8:	d103      	bne.n	800a1c2 <HAL_SPI_TransmitReceive+0x1fe>
 800a1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	f040 81c2 	bne.w	800a546 <HAL_SPI_TransmitReceive+0x582>
    {
      /* Call standard close procedure with error check */
      SPI_CloseTransfer(hspi);
 800a1c2:	68f8      	ldr	r0, [r7, #12]
 800a1c4:	f000 f9ea 	bl	800a59c <SPI_CloseTransfer>

      /* Process Unlocked */
      __HAL_UNLOCK(hspi);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      hspi->State = HAL_SPI_STATE_READY;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      return HAL_ERROR;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e1d3      	b.n	800a594 <HAL_SPI_TransmitReceive+0x5d0>
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	68db      	ldr	r3, [r3, #12]
 800a1f0:	2b07      	cmp	r3, #7
 800a1f2:	f240 81a0 	bls.w	800a536 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a1f6:	e0a9      	b.n	800a34c <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	695b      	ldr	r3, [r3, #20]
 800a1fe:	f003 0302 	and.w	r3, r3, #2
 800a202:	2b02      	cmp	r3, #2
 800a204:	d139      	bne.n	800a27a <HAL_SPI_TransmitReceive+0x2b6>
 800a206:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d036      	beq.n	800a27a <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a20c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d91c      	bls.n	800a24c <HAL_SPI_TransmitReceive+0x288>
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a216:	2b00      	cmp	r3, #0
 800a218:	d018      	beq.n	800a24c <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	6812      	ldr	r2, [r2, #0]
 800a224:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a22a:	1d1a      	adds	r2, r3, #4
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a236:	b29b      	uxth	r3, r3
 800a238:	3b02      	subs	r3, #2
 800a23a:	b29a      	uxth	r2, r3
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a248:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a24a:	e016      	b.n	800a27a <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a250:	881a      	ldrh	r2, [r3, #0]
 800a252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a254:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a25a:	1c9a      	adds	r2, r3, #2
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a266:	b29b      	uxth	r3, r3
 800a268:	3b01      	subs	r3, #1
 800a26a:	b29a      	uxth	r2, r3
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a278:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	695b      	ldr	r3, [r3, #20]
 800a280:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a284:	2b00      	cmp	r3, #0
 800a286:	d03a      	beq.n	800a2fe <HAL_SPI_TransmitReceive+0x33a>
 800a288:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d037      	beq.n	800a2fe <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	695b      	ldr	r3, [r3, #20]
 800a294:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d018      	beq.n	800a2ce <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681a      	ldr	r2, [r3, #0]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a2a6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2ac:	1d1a      	adds	r2, r3, #4
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a2b8:	b29b      	uxth	r3, r3
 800a2ba:	3b02      	subs	r3, #2
 800a2bc:	b29a      	uxth	r2, r3
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a2ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a2cc:	e017      	b.n	800a2fe <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2d2:	6a3a      	ldr	r2, [r7, #32]
 800a2d4:	8812      	ldrh	r2, [r2, #0]
 800a2d6:	b292      	uxth	r2, r2
 800a2d8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2de:	1c9a      	adds	r2, r3, #2
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	3b01      	subs	r3, #1
 800a2ee:	b29a      	uxth	r2, r3
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a2fc:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a2fe:	f7f8 f901 	bl	8002504 <HAL_GetTick>
 800a302:	4602      	mov	r2, r0
 800a304:	69fb      	ldr	r3, [r7, #28]
 800a306:	1ad3      	subs	r3, r2, r3
 800a308:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d803      	bhi.n	800a316 <HAL_SPI_TransmitReceive+0x352>
 800a30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a310:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a314:	d102      	bne.n	800a31c <HAL_SPI_TransmitReceive+0x358>
 800a316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d117      	bne.n	800a34c <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800a31c:	68f8      	ldr	r0, [r7, #12]
 800a31e:	f000 f93d 	bl	800a59c <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2200      	movs	r2, #0
 800a326:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a330:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2201      	movs	r2, #1
 800a33e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800a342:	2301      	movs	r3, #1
 800a344:	e126      	b.n	800a594 <HAL_SPI_TransmitReceive+0x5d0>
 800a346:	bf00      	nop
 800a348:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a34c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a34e:	2b00      	cmp	r3, #0
 800a350:	f47f af52 	bne.w	800a1f8 <HAL_SPI_TransmitReceive+0x234>
 800a354:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a356:	2b00      	cmp	r3, #0
 800a358:	f47f af4e 	bne.w	800a1f8 <HAL_SPI_TransmitReceive+0x234>
 800a35c:	e0f3      	b.n	800a546 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	695b      	ldr	r3, [r3, #20]
 800a364:	f003 0302 	and.w	r3, r3, #2
 800a368:	2b02      	cmp	r3, #2
 800a36a:	d15a      	bne.n	800a422 <HAL_SPI_TransmitReceive+0x45e>
 800a36c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d057      	beq.n	800a422 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a372:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a374:	2b03      	cmp	r3, #3
 800a376:	d91c      	bls.n	800a3b2 <HAL_SPI_TransmitReceive+0x3ee>
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a37c:	2b40      	cmp	r3, #64	; 0x40
 800a37e:	d918      	bls.n	800a3b2 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	6812      	ldr	r2, [r2, #0]
 800a38a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a390:	1d1a      	adds	r2, r3, #4
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a39c:	b29b      	uxth	r3, r3
 800a39e:	3b04      	subs	r3, #4
 800a3a0:	b29a      	uxth	r2, r3
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a3ae:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a3b0:	e037      	b.n	800a422 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a3b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d91b      	bls.n	800a3f0 <HAL_SPI_TransmitReceive+0x42c>
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d017      	beq.n	800a3f0 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3c4:	881a      	ldrh	r2, [r3, #0]
 800a3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3ce:	1c9a      	adds	r2, r3, #2
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	3b02      	subs	r3, #2
 800a3de:	b29a      	uxth	r2, r3
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a3ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a3ee:	e018      	b.n	800a422 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	3320      	adds	r3, #32
 800a3fa:	7812      	ldrb	r2, [r2, #0]
 800a3fc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a402:	1c5a      	adds	r2, r3, #1
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a40e:	b29b      	uxth	r3, r3
 800a410:	3b01      	subs	r3, #1
 800a412:	b29a      	uxth	r2, r3
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a420:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	695b      	ldr	r3, [r3, #20]
 800a428:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d05e      	beq.n	800a4ee <HAL_SPI_TransmitReceive+0x52a>
 800a430:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a432:	2b00      	cmp	r3, #0
 800a434:	d05b      	beq.n	800a4ee <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	695b      	ldr	r3, [r3, #20]
 800a43c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a440:	2b00      	cmp	r3, #0
 800a442:	d018      	beq.n	800a476 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681a      	ldr	r2, [r3, #0]
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a44c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a44e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a454:	1d1a      	adds	r2, r3, #4
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a460:	b29b      	uxth	r3, r3
 800a462:	3b04      	subs	r3, #4
 800a464:	b29a      	uxth	r2, r3
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a472:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a474:	e03b      	b.n	800a4ee <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	695b      	ldr	r3, [r3, #20]
 800a47c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800a480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a484:	d918      	bls.n	800a4b8 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a48a:	6a3a      	ldr	r2, [r7, #32]
 800a48c:	8812      	ldrh	r2, [r2, #0]
 800a48e:	b292      	uxth	r2, r2
 800a490:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a496:	1c9a      	adds	r2, r3, #2
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	3b02      	subs	r3, #2
 800a4a6:	b29a      	uxth	r2, r3
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a4b4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a4b6:	e01a      	b.n	800a4ee <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4c4:	7812      	ldrb	r2, [r2, #0]
 800a4c6:	b2d2      	uxtb	r2, r2
 800a4c8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4ce:	1c5a      	adds	r2, r3, #1
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	3b01      	subs	r3, #1
 800a4de:	b29a      	uxth	r2, r3
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a4ec:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a4ee:	f7f8 f809 	bl	8002504 <HAL_GetTick>
 800a4f2:	4602      	mov	r2, r0
 800a4f4:	69fb      	ldr	r3, [r7, #28]
 800a4f6:	1ad3      	subs	r3, r2, r3
 800a4f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d803      	bhi.n	800a506 <HAL_SPI_TransmitReceive+0x542>
 800a4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a500:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a504:	d102      	bne.n	800a50c <HAL_SPI_TransmitReceive+0x548>
 800a506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d114      	bne.n	800a536 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800a50c:	68f8      	ldr	r0, [r7, #12]
 800a50e:	f000 f845 	bl	800a59c <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	2200      	movs	r2, #0
 800a516:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a520:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2201      	movs	r2, #1
 800a52e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800a532:	2301      	movs	r3, #1
 800a534:	e02e      	b.n	800a594 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a536:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a538:	2b00      	cmp	r3, #0
 800a53a:	f47f af10 	bne.w	800a35e <HAL_SPI_TransmitReceive+0x39a>
 800a53e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a540:	2b00      	cmp	r3, #0
 800a542:	f47f af0c 	bne.w	800a35e <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800a546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a548:	9300      	str	r3, [sp, #0]
 800a54a:	69fb      	ldr	r3, [r7, #28]
 800a54c:	2200      	movs	r2, #0
 800a54e:	2108      	movs	r1, #8
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	f000 f8c3 	bl	800a6dc <SPI_WaitOnFlagUntilTimeout>
 800a556:	4603      	mov	r3, r0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d007      	beq.n	800a56c <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a562:	f043 0220 	orr.w	r2, r3, #32
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a56c:	68f8      	ldr	r0, [r7, #12]
 800a56e:	f000 f815 	bl	800a59c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2200      	movs	r2, #0
 800a576:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2201      	movs	r2, #1
 800a57e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d001      	beq.n	800a590 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800a58c:	2301      	movs	r3, #1
 800a58e:	e001      	b.n	800a594 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800a590:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a594:	4618      	mov	r0, r3
 800a596:	3730      	adds	r7, #48	; 0x30
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}

0800a59c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b085      	sub	sp, #20
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	695b      	ldr	r3, [r3, #20]
 800a5aa:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	699a      	ldr	r2, [r3, #24]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f042 0208 	orr.w	r2, r2, #8
 800a5ba:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	699a      	ldr	r2, [r3, #24]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f042 0210 	orr.w	r2, r2, #16
 800a5ca:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	681a      	ldr	r2, [r3, #0]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f022 0201 	bic.w	r2, r2, #1
 800a5da:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	6919      	ldr	r1, [r3, #16]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681a      	ldr	r2, [r3, #0]
 800a5e6:	4b3c      	ldr	r3, [pc, #240]	; (800a6d8 <SPI_CloseTransfer+0x13c>)
 800a5e8:	400b      	ands	r3, r1
 800a5ea:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	689a      	ldr	r2, [r3, #8]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a5fa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a602:	b2db      	uxtb	r3, r3
 800a604:	2b04      	cmp	r3, #4
 800a606:	d014      	beq.n	800a632 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f003 0320 	and.w	r3, r3, #32
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d00f      	beq.n	800a632 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a618:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	699a      	ldr	r2, [r3, #24]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f042 0220 	orr.w	r2, r2, #32
 800a630:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	2b03      	cmp	r3, #3
 800a63c:	d014      	beq.n	800a668 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a644:	2b00      	cmp	r3, #0
 800a646:	d00f      	beq.n	800a668 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a64e:	f043 0204 	orr.w	r2, r3, #4
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	699a      	ldr	r2, [r3, #24]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a666:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d00f      	beq.n	800a692 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a678:	f043 0201 	orr.w	r2, r3, #1
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	699a      	ldr	r2, [r3, #24]
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a690:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d00f      	beq.n	800a6bc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6a2:	f043 0208 	orr.w	r2, r3, #8
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	699a      	ldr	r2, [r3, #24]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a6ba:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800a6cc:	bf00      	nop
 800a6ce:	3714      	adds	r7, #20
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr
 800a6d8:	fffffc90 	.word	0xfffffc90

0800a6dc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b084      	sub	sp, #16
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	60f8      	str	r0, [r7, #12]
 800a6e4:	60b9      	str	r1, [r7, #8]
 800a6e6:	603b      	str	r3, [r7, #0]
 800a6e8:	4613      	mov	r3, r2
 800a6ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a6ec:	e010      	b.n	800a710 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a6ee:	f7f7 ff09 	bl	8002504 <HAL_GetTick>
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	1ad3      	subs	r3, r2, r3
 800a6f8:	69ba      	ldr	r2, [r7, #24]
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	d803      	bhi.n	800a706 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800a6fe:	69bb      	ldr	r3, [r7, #24]
 800a700:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a704:	d102      	bne.n	800a70c <SPI_WaitOnFlagUntilTimeout+0x30>
 800a706:	69bb      	ldr	r3, [r7, #24]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d101      	bne.n	800a710 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800a70c:	2303      	movs	r3, #3
 800a70e:	e00f      	b.n	800a730 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	695a      	ldr	r2, [r3, #20]
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	4013      	ands	r3, r2
 800a71a:	68ba      	ldr	r2, [r7, #8]
 800a71c:	429a      	cmp	r2, r3
 800a71e:	bf0c      	ite	eq
 800a720:	2301      	moveq	r3, #1
 800a722:	2300      	movne	r3, #0
 800a724:	b2db      	uxtb	r3, r3
 800a726:	461a      	mov	r2, r3
 800a728:	79fb      	ldrb	r3, [r7, #7]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d0df      	beq.n	800a6ee <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800a72e:	2300      	movs	r3, #0
}
 800a730:	4618      	mov	r0, r3
 800a732:	3710      	adds	r7, #16
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a738:	b480      	push	{r7}
 800a73a:	b085      	sub	sp, #20
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a744:	095b      	lsrs	r3, r3, #5
 800a746:	3301      	adds	r3, #1
 800a748:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	68db      	ldr	r3, [r3, #12]
 800a74e:	3301      	adds	r3, #1
 800a750:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	3307      	adds	r3, #7
 800a756:	08db      	lsrs	r3, r3, #3
 800a758:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	68fa      	ldr	r2, [r7, #12]
 800a75e:	fb02 f303 	mul.w	r3, r2, r3
}
 800a762:	4618      	mov	r0, r3
 800a764:	3714      	adds	r7, #20
 800a766:	46bd      	mov	sp, r7
 800a768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76c:	4770      	bx	lr

0800a76e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a76e:	b580      	push	{r7, lr}
 800a770:	b082      	sub	sp, #8
 800a772:	af00      	add	r7, sp, #0
 800a774:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d101      	bne.n	800a780 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a77c:	2301      	movs	r3, #1
 800a77e:	e01d      	b.n	800a7bc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a786:	b2db      	uxtb	r3, r3
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d106      	bne.n	800a79a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2200      	movs	r2, #0
 800a790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f7f7 fab5 	bl	8001d04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2202      	movs	r2, #2
 800a79e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681a      	ldr	r2, [r3, #0]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	3304      	adds	r3, #4
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	4610      	mov	r0, r2
 800a7ae:	f000 f921 	bl	800a9f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2201      	movs	r2, #1
 800a7b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a7ba:	2300      	movs	r3, #0
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3708      	adds	r7, #8
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}

0800a7c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b084      	sub	sp, #16
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	60f8      	str	r0, [r7, #12]
 800a7cc:	60b9      	str	r1, [r7, #8]
 800a7ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d101      	bne.n	800a7de <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a7da:	2302      	movs	r3, #2
 800a7dc:	e105      	b.n	800a9ea <HAL_TIM_PWM_ConfigChannel+0x226>
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2201      	movs	r2, #1
 800a7e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	2202      	movs	r2, #2
 800a7ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2b14      	cmp	r3, #20
 800a7f2:	f200 80f0 	bhi.w	800a9d6 <HAL_TIM_PWM_ConfigChannel+0x212>
 800a7f6:	a201      	add	r2, pc, #4	; (adr r2, 800a7fc <HAL_TIM_PWM_ConfigChannel+0x38>)
 800a7f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7fc:	0800a851 	.word	0x0800a851
 800a800:	0800a9d7 	.word	0x0800a9d7
 800a804:	0800a9d7 	.word	0x0800a9d7
 800a808:	0800a9d7 	.word	0x0800a9d7
 800a80c:	0800a891 	.word	0x0800a891
 800a810:	0800a9d7 	.word	0x0800a9d7
 800a814:	0800a9d7 	.word	0x0800a9d7
 800a818:	0800a9d7 	.word	0x0800a9d7
 800a81c:	0800a8d3 	.word	0x0800a8d3
 800a820:	0800a9d7 	.word	0x0800a9d7
 800a824:	0800a9d7 	.word	0x0800a9d7
 800a828:	0800a9d7 	.word	0x0800a9d7
 800a82c:	0800a913 	.word	0x0800a913
 800a830:	0800a9d7 	.word	0x0800a9d7
 800a834:	0800a9d7 	.word	0x0800a9d7
 800a838:	0800a9d7 	.word	0x0800a9d7
 800a83c:	0800a955 	.word	0x0800a955
 800a840:	0800a9d7 	.word	0x0800a9d7
 800a844:	0800a9d7 	.word	0x0800a9d7
 800a848:	0800a9d7 	.word	0x0800a9d7
 800a84c:	0800a995 	.word	0x0800a995
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	68b9      	ldr	r1, [r7, #8]
 800a856:	4618      	mov	r0, r3
 800a858:	f000 f966 	bl	800ab28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	699a      	ldr	r2, [r3, #24]
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f042 0208 	orr.w	r2, r2, #8
 800a86a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	699a      	ldr	r2, [r3, #24]
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f022 0204 	bic.w	r2, r2, #4
 800a87a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	6999      	ldr	r1, [r3, #24]
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	691a      	ldr	r2, [r3, #16]
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	430a      	orrs	r2, r1
 800a88c:	619a      	str	r2, [r3, #24]
      break;
 800a88e:	e0a3      	b.n	800a9d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	68b9      	ldr	r1, [r7, #8]
 800a896:	4618      	mov	r0, r3
 800a898:	f000 f9d6 	bl	800ac48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	699a      	ldr	r2, [r3, #24]
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a8aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	699a      	ldr	r2, [r3, #24]
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a8ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	6999      	ldr	r1, [r3, #24]
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	691b      	ldr	r3, [r3, #16]
 800a8c6:	021a      	lsls	r2, r3, #8
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	430a      	orrs	r2, r1
 800a8ce:	619a      	str	r2, [r3, #24]
      break;
 800a8d0:	e082      	b.n	800a9d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	68b9      	ldr	r1, [r7, #8]
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f000 fa3f 	bl	800ad5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	69da      	ldr	r2, [r3, #28]
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f042 0208 	orr.w	r2, r2, #8
 800a8ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	69da      	ldr	r2, [r3, #28]
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f022 0204 	bic.w	r2, r2, #4
 800a8fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	69d9      	ldr	r1, [r3, #28]
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	691a      	ldr	r2, [r3, #16]
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	430a      	orrs	r2, r1
 800a90e:	61da      	str	r2, [r3, #28]
      break;
 800a910:	e062      	b.n	800a9d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	68b9      	ldr	r1, [r7, #8]
 800a918:	4618      	mov	r0, r3
 800a91a:	f000 faa5 	bl	800ae68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	69da      	ldr	r2, [r3, #28]
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a92c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	69da      	ldr	r2, [r3, #28]
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a93c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	69d9      	ldr	r1, [r3, #28]
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	691b      	ldr	r3, [r3, #16]
 800a948:	021a      	lsls	r2, r3, #8
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	430a      	orrs	r2, r1
 800a950:	61da      	str	r2, [r3, #28]
      break;
 800a952:	e041      	b.n	800a9d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	68b9      	ldr	r1, [r7, #8]
 800a95a:	4618      	mov	r0, r3
 800a95c:	f000 faec 	bl	800af38 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f042 0208 	orr.w	r2, r2, #8
 800a96e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f022 0204 	bic.w	r2, r2, #4
 800a97e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	691a      	ldr	r2, [r3, #16]
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	430a      	orrs	r2, r1
 800a990:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a992:	e021      	b.n	800a9d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	68b9      	ldr	r1, [r7, #8]
 800a99a:	4618      	mov	r0, r3
 800a99c:	f000 fb2e 	bl	800affc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a9ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a9be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	691b      	ldr	r3, [r3, #16]
 800a9ca:	021a      	lsls	r2, r3, #8
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	430a      	orrs	r2, r1
 800a9d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a9d4:	e000      	b.n	800a9d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800a9d6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	2201      	movs	r2, #1
 800a9dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a9e8:	2300      	movs	r3, #0
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3710      	adds	r7, #16
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}
 800a9f2:	bf00      	nop

0800a9f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b085      	sub	sp, #20
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	4a40      	ldr	r2, [pc, #256]	; (800ab08 <TIM_Base_SetConfig+0x114>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d013      	beq.n	800aa34 <TIM_Base_SetConfig+0x40>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa12:	d00f      	beq.n	800aa34 <TIM_Base_SetConfig+0x40>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	4a3d      	ldr	r2, [pc, #244]	; (800ab0c <TIM_Base_SetConfig+0x118>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d00b      	beq.n	800aa34 <TIM_Base_SetConfig+0x40>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	4a3c      	ldr	r2, [pc, #240]	; (800ab10 <TIM_Base_SetConfig+0x11c>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d007      	beq.n	800aa34 <TIM_Base_SetConfig+0x40>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	4a3b      	ldr	r2, [pc, #236]	; (800ab14 <TIM_Base_SetConfig+0x120>)
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d003      	beq.n	800aa34 <TIM_Base_SetConfig+0x40>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	4a3a      	ldr	r2, [pc, #232]	; (800ab18 <TIM_Base_SetConfig+0x124>)
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d108      	bne.n	800aa46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	68fa      	ldr	r2, [r7, #12]
 800aa42:	4313      	orrs	r3, r2
 800aa44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	4a2f      	ldr	r2, [pc, #188]	; (800ab08 <TIM_Base_SetConfig+0x114>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d01f      	beq.n	800aa8e <TIM_Base_SetConfig+0x9a>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa54:	d01b      	beq.n	800aa8e <TIM_Base_SetConfig+0x9a>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	4a2c      	ldr	r2, [pc, #176]	; (800ab0c <TIM_Base_SetConfig+0x118>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d017      	beq.n	800aa8e <TIM_Base_SetConfig+0x9a>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	4a2b      	ldr	r2, [pc, #172]	; (800ab10 <TIM_Base_SetConfig+0x11c>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d013      	beq.n	800aa8e <TIM_Base_SetConfig+0x9a>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	4a2a      	ldr	r2, [pc, #168]	; (800ab14 <TIM_Base_SetConfig+0x120>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d00f      	beq.n	800aa8e <TIM_Base_SetConfig+0x9a>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	4a29      	ldr	r2, [pc, #164]	; (800ab18 <TIM_Base_SetConfig+0x124>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d00b      	beq.n	800aa8e <TIM_Base_SetConfig+0x9a>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	4a28      	ldr	r2, [pc, #160]	; (800ab1c <TIM_Base_SetConfig+0x128>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d007      	beq.n	800aa8e <TIM_Base_SetConfig+0x9a>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	4a27      	ldr	r2, [pc, #156]	; (800ab20 <TIM_Base_SetConfig+0x12c>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d003      	beq.n	800aa8e <TIM_Base_SetConfig+0x9a>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	4a26      	ldr	r2, [pc, #152]	; (800ab24 <TIM_Base_SetConfig+0x130>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d108      	bne.n	800aaa0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	68db      	ldr	r3, [r3, #12]
 800aa9a:	68fa      	ldr	r2, [r7, #12]
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	695b      	ldr	r3, [r3, #20]
 800aaaa:	4313      	orrs	r3, r2
 800aaac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	68fa      	ldr	r2, [r7, #12]
 800aab2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	689a      	ldr	r2, [r3, #8]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	681a      	ldr	r2, [r3, #0]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	4a10      	ldr	r2, [pc, #64]	; (800ab08 <TIM_Base_SetConfig+0x114>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d00f      	beq.n	800aaec <TIM_Base_SetConfig+0xf8>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	4a12      	ldr	r2, [pc, #72]	; (800ab18 <TIM_Base_SetConfig+0x124>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d00b      	beq.n	800aaec <TIM_Base_SetConfig+0xf8>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	4a11      	ldr	r2, [pc, #68]	; (800ab1c <TIM_Base_SetConfig+0x128>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d007      	beq.n	800aaec <TIM_Base_SetConfig+0xf8>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	4a10      	ldr	r2, [pc, #64]	; (800ab20 <TIM_Base_SetConfig+0x12c>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d003      	beq.n	800aaec <TIM_Base_SetConfig+0xf8>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	4a0f      	ldr	r2, [pc, #60]	; (800ab24 <TIM_Base_SetConfig+0x130>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d103      	bne.n	800aaf4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	691a      	ldr	r2, [r3, #16]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	615a      	str	r2, [r3, #20]
}
 800aafa:	bf00      	nop
 800aafc:	3714      	adds	r7, #20
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr
 800ab06:	bf00      	nop
 800ab08:	40010000 	.word	0x40010000
 800ab0c:	40000400 	.word	0x40000400
 800ab10:	40000800 	.word	0x40000800
 800ab14:	40000c00 	.word	0x40000c00
 800ab18:	40010400 	.word	0x40010400
 800ab1c:	40014000 	.word	0x40014000
 800ab20:	40014400 	.word	0x40014400
 800ab24:	40014800 	.word	0x40014800

0800ab28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b087      	sub	sp, #28
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6a1b      	ldr	r3, [r3, #32]
 800ab36:	f023 0201 	bic.w	r2, r3, #1
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6a1b      	ldr	r3, [r3, #32]
 800ab42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	699b      	ldr	r3, [r3, #24]
 800ab4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ab50:	68fa      	ldr	r2, [r7, #12]
 800ab52:	4b37      	ldr	r3, [pc, #220]	; (800ac30 <TIM_OC1_SetConfig+0x108>)
 800ab54:	4013      	ands	r3, r2
 800ab56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f023 0303 	bic.w	r3, r3, #3
 800ab5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	68fa      	ldr	r2, [r7, #12]
 800ab66:	4313      	orrs	r3, r2
 800ab68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	f023 0302 	bic.w	r3, r3, #2
 800ab70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	689b      	ldr	r3, [r3, #8]
 800ab76:	697a      	ldr	r2, [r7, #20]
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	4a2d      	ldr	r2, [pc, #180]	; (800ac34 <TIM_OC1_SetConfig+0x10c>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d00f      	beq.n	800aba4 <TIM_OC1_SetConfig+0x7c>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	4a2c      	ldr	r2, [pc, #176]	; (800ac38 <TIM_OC1_SetConfig+0x110>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d00b      	beq.n	800aba4 <TIM_OC1_SetConfig+0x7c>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	4a2b      	ldr	r2, [pc, #172]	; (800ac3c <TIM_OC1_SetConfig+0x114>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d007      	beq.n	800aba4 <TIM_OC1_SetConfig+0x7c>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	4a2a      	ldr	r2, [pc, #168]	; (800ac40 <TIM_OC1_SetConfig+0x118>)
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d003      	beq.n	800aba4 <TIM_OC1_SetConfig+0x7c>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	4a29      	ldr	r2, [pc, #164]	; (800ac44 <TIM_OC1_SetConfig+0x11c>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d10c      	bne.n	800abbe <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	f023 0308 	bic.w	r3, r3, #8
 800abaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	68db      	ldr	r3, [r3, #12]
 800abb0:	697a      	ldr	r2, [r7, #20]
 800abb2:	4313      	orrs	r3, r2
 800abb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	f023 0304 	bic.w	r3, r3, #4
 800abbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	4a1c      	ldr	r2, [pc, #112]	; (800ac34 <TIM_OC1_SetConfig+0x10c>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d00f      	beq.n	800abe6 <TIM_OC1_SetConfig+0xbe>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	4a1b      	ldr	r2, [pc, #108]	; (800ac38 <TIM_OC1_SetConfig+0x110>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d00b      	beq.n	800abe6 <TIM_OC1_SetConfig+0xbe>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	4a1a      	ldr	r2, [pc, #104]	; (800ac3c <TIM_OC1_SetConfig+0x114>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d007      	beq.n	800abe6 <TIM_OC1_SetConfig+0xbe>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	4a19      	ldr	r2, [pc, #100]	; (800ac40 <TIM_OC1_SetConfig+0x118>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d003      	beq.n	800abe6 <TIM_OC1_SetConfig+0xbe>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	4a18      	ldr	r2, [pc, #96]	; (800ac44 <TIM_OC1_SetConfig+0x11c>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d111      	bne.n	800ac0a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800abec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800abf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	695b      	ldr	r3, [r3, #20]
 800abfa:	693a      	ldr	r2, [r7, #16]
 800abfc:	4313      	orrs	r3, r2
 800abfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	699b      	ldr	r3, [r3, #24]
 800ac04:	693a      	ldr	r2, [r7, #16]
 800ac06:	4313      	orrs	r3, r2
 800ac08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	693a      	ldr	r2, [r7, #16]
 800ac0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	68fa      	ldr	r2, [r7, #12]
 800ac14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	685a      	ldr	r2, [r3, #4]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	697a      	ldr	r2, [r7, #20]
 800ac22:	621a      	str	r2, [r3, #32]
}
 800ac24:	bf00      	nop
 800ac26:	371c      	adds	r7, #28
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr
 800ac30:	fffeff8f 	.word	0xfffeff8f
 800ac34:	40010000 	.word	0x40010000
 800ac38:	40010400 	.word	0x40010400
 800ac3c:	40014000 	.word	0x40014000
 800ac40:	40014400 	.word	0x40014400
 800ac44:	40014800 	.word	0x40014800

0800ac48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b087      	sub	sp, #28
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6a1b      	ldr	r3, [r3, #32]
 800ac56:	f023 0210 	bic.w	r2, r3, #16
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6a1b      	ldr	r3, [r3, #32]
 800ac62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	699b      	ldr	r3, [r3, #24]
 800ac6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ac70:	68fa      	ldr	r2, [r7, #12]
 800ac72:	4b34      	ldr	r3, [pc, #208]	; (800ad44 <TIM_OC2_SetConfig+0xfc>)
 800ac74:	4013      	ands	r3, r2
 800ac76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	021b      	lsls	r3, r3, #8
 800ac86:	68fa      	ldr	r2, [r7, #12]
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	f023 0320 	bic.w	r3, r3, #32
 800ac92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	689b      	ldr	r3, [r3, #8]
 800ac98:	011b      	lsls	r3, r3, #4
 800ac9a:	697a      	ldr	r2, [r7, #20]
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	4a29      	ldr	r2, [pc, #164]	; (800ad48 <TIM_OC2_SetConfig+0x100>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d003      	beq.n	800acb0 <TIM_OC2_SetConfig+0x68>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	4a28      	ldr	r2, [pc, #160]	; (800ad4c <TIM_OC2_SetConfig+0x104>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d10d      	bne.n	800accc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800acb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	68db      	ldr	r3, [r3, #12]
 800acbc:	011b      	lsls	r3, r3, #4
 800acbe:	697a      	ldr	r2, [r7, #20]
 800acc0:	4313      	orrs	r3, r2
 800acc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	4a1e      	ldr	r2, [pc, #120]	; (800ad48 <TIM_OC2_SetConfig+0x100>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d00f      	beq.n	800acf4 <TIM_OC2_SetConfig+0xac>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	4a1d      	ldr	r2, [pc, #116]	; (800ad4c <TIM_OC2_SetConfig+0x104>)
 800acd8:	4293      	cmp	r3, r2
 800acda:	d00b      	beq.n	800acf4 <TIM_OC2_SetConfig+0xac>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	4a1c      	ldr	r2, [pc, #112]	; (800ad50 <TIM_OC2_SetConfig+0x108>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d007      	beq.n	800acf4 <TIM_OC2_SetConfig+0xac>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	4a1b      	ldr	r2, [pc, #108]	; (800ad54 <TIM_OC2_SetConfig+0x10c>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	d003      	beq.n	800acf4 <TIM_OC2_SetConfig+0xac>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	4a1a      	ldr	r2, [pc, #104]	; (800ad58 <TIM_OC2_SetConfig+0x110>)
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d113      	bne.n	800ad1c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800acfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ad02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	695b      	ldr	r3, [r3, #20]
 800ad08:	009b      	lsls	r3, r3, #2
 800ad0a:	693a      	ldr	r2, [r7, #16]
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	699b      	ldr	r3, [r3, #24]
 800ad14:	009b      	lsls	r3, r3, #2
 800ad16:	693a      	ldr	r2, [r7, #16]
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	693a      	ldr	r2, [r7, #16]
 800ad20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	68fa      	ldr	r2, [r7, #12]
 800ad26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	685a      	ldr	r2, [r3, #4]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	697a      	ldr	r2, [r7, #20]
 800ad34:	621a      	str	r2, [r3, #32]
}
 800ad36:	bf00      	nop
 800ad38:	371c      	adds	r7, #28
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad40:	4770      	bx	lr
 800ad42:	bf00      	nop
 800ad44:	feff8fff 	.word	0xfeff8fff
 800ad48:	40010000 	.word	0x40010000
 800ad4c:	40010400 	.word	0x40010400
 800ad50:	40014000 	.word	0x40014000
 800ad54:	40014400 	.word	0x40014400
 800ad58:	40014800 	.word	0x40014800

0800ad5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b087      	sub	sp, #28
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6a1b      	ldr	r3, [r3, #32]
 800ad6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6a1b      	ldr	r3, [r3, #32]
 800ad76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	69db      	ldr	r3, [r3, #28]
 800ad82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f023 0303 	bic.w	r3, r3, #3
 800ad92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	68fa      	ldr	r2, [r7, #12]
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ada4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	689b      	ldr	r3, [r3, #8]
 800adaa:	021b      	lsls	r3, r3, #8
 800adac:	697a      	ldr	r2, [r7, #20]
 800adae:	4313      	orrs	r3, r2
 800adb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	4a27      	ldr	r2, [pc, #156]	; (800ae54 <TIM_OC3_SetConfig+0xf8>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d003      	beq.n	800adc2 <TIM_OC3_SetConfig+0x66>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	4a26      	ldr	r2, [pc, #152]	; (800ae58 <TIM_OC3_SetConfig+0xfc>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d10d      	bne.n	800adde <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800adc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	68db      	ldr	r3, [r3, #12]
 800adce:	021b      	lsls	r3, r3, #8
 800add0:	697a      	ldr	r2, [r7, #20]
 800add2:	4313      	orrs	r3, r2
 800add4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800addc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	4a1c      	ldr	r2, [pc, #112]	; (800ae54 <TIM_OC3_SetConfig+0xf8>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d00f      	beq.n	800ae06 <TIM_OC3_SetConfig+0xaa>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	4a1b      	ldr	r2, [pc, #108]	; (800ae58 <TIM_OC3_SetConfig+0xfc>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d00b      	beq.n	800ae06 <TIM_OC3_SetConfig+0xaa>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	4a1a      	ldr	r2, [pc, #104]	; (800ae5c <TIM_OC3_SetConfig+0x100>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d007      	beq.n	800ae06 <TIM_OC3_SetConfig+0xaa>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	4a19      	ldr	r2, [pc, #100]	; (800ae60 <TIM_OC3_SetConfig+0x104>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d003      	beq.n	800ae06 <TIM_OC3_SetConfig+0xaa>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	4a18      	ldr	r2, [pc, #96]	; (800ae64 <TIM_OC3_SetConfig+0x108>)
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d113      	bne.n	800ae2e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ae14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	695b      	ldr	r3, [r3, #20]
 800ae1a:	011b      	lsls	r3, r3, #4
 800ae1c:	693a      	ldr	r2, [r7, #16]
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	699b      	ldr	r3, [r3, #24]
 800ae26:	011b      	lsls	r3, r3, #4
 800ae28:	693a      	ldr	r2, [r7, #16]
 800ae2a:	4313      	orrs	r3, r2
 800ae2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	693a      	ldr	r2, [r7, #16]
 800ae32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	68fa      	ldr	r2, [r7, #12]
 800ae38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	685a      	ldr	r2, [r3, #4]
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	697a      	ldr	r2, [r7, #20]
 800ae46:	621a      	str	r2, [r3, #32]
}
 800ae48:	bf00      	nop
 800ae4a:	371c      	adds	r7, #28
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr
 800ae54:	40010000 	.word	0x40010000
 800ae58:	40010400 	.word	0x40010400
 800ae5c:	40014000 	.word	0x40014000
 800ae60:	40014400 	.word	0x40014400
 800ae64:	40014800 	.word	0x40014800

0800ae68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b087      	sub	sp, #28
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6a1b      	ldr	r3, [r3, #32]
 800ae76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6a1b      	ldr	r3, [r3, #32]
 800ae82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	69db      	ldr	r3, [r3, #28]
 800ae8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	021b      	lsls	r3, r3, #8
 800aea6:	68fa      	ldr	r2, [r7, #12]
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aeb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	689b      	ldr	r3, [r3, #8]
 800aeb8:	031b      	lsls	r3, r3, #12
 800aeba:	693a      	ldr	r2, [r7, #16]
 800aebc:	4313      	orrs	r3, r2
 800aebe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	4a18      	ldr	r2, [pc, #96]	; (800af24 <TIM_OC4_SetConfig+0xbc>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d00f      	beq.n	800aee8 <TIM_OC4_SetConfig+0x80>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	4a17      	ldr	r2, [pc, #92]	; (800af28 <TIM_OC4_SetConfig+0xc0>)
 800aecc:	4293      	cmp	r3, r2
 800aece:	d00b      	beq.n	800aee8 <TIM_OC4_SetConfig+0x80>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	4a16      	ldr	r2, [pc, #88]	; (800af2c <TIM_OC4_SetConfig+0xc4>)
 800aed4:	4293      	cmp	r3, r2
 800aed6:	d007      	beq.n	800aee8 <TIM_OC4_SetConfig+0x80>
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	4a15      	ldr	r2, [pc, #84]	; (800af30 <TIM_OC4_SetConfig+0xc8>)
 800aedc:	4293      	cmp	r3, r2
 800aede:	d003      	beq.n	800aee8 <TIM_OC4_SetConfig+0x80>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	4a14      	ldr	r2, [pc, #80]	; (800af34 <TIM_OC4_SetConfig+0xcc>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d109      	bne.n	800aefc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aeee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	695b      	ldr	r3, [r3, #20]
 800aef4:	019b      	lsls	r3, r3, #6
 800aef6:	697a      	ldr	r2, [r7, #20]
 800aef8:	4313      	orrs	r3, r2
 800aefa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	697a      	ldr	r2, [r7, #20]
 800af00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	68fa      	ldr	r2, [r7, #12]
 800af06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	685a      	ldr	r2, [r3, #4]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	693a      	ldr	r2, [r7, #16]
 800af14:	621a      	str	r2, [r3, #32]
}
 800af16:	bf00      	nop
 800af18:	371c      	adds	r7, #28
 800af1a:	46bd      	mov	sp, r7
 800af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af20:	4770      	bx	lr
 800af22:	bf00      	nop
 800af24:	40010000 	.word	0x40010000
 800af28:	40010400 	.word	0x40010400
 800af2c:	40014000 	.word	0x40014000
 800af30:	40014400 	.word	0x40014400
 800af34:	40014800 	.word	0x40014800

0800af38 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800af38:	b480      	push	{r7}
 800af3a:	b087      	sub	sp, #28
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6a1b      	ldr	r3, [r3, #32]
 800af46:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6a1b      	ldr	r3, [r3, #32]
 800af52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	685b      	ldr	r3, [r3, #4]
 800af58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	68fa      	ldr	r2, [r7, #12]
 800af6e:	4313      	orrs	r3, r2
 800af70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800af78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	689b      	ldr	r3, [r3, #8]
 800af7e:	041b      	lsls	r3, r3, #16
 800af80:	693a      	ldr	r2, [r7, #16]
 800af82:	4313      	orrs	r3, r2
 800af84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	4a17      	ldr	r2, [pc, #92]	; (800afe8 <TIM_OC5_SetConfig+0xb0>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d00f      	beq.n	800afae <TIM_OC5_SetConfig+0x76>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	4a16      	ldr	r2, [pc, #88]	; (800afec <TIM_OC5_SetConfig+0xb4>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d00b      	beq.n	800afae <TIM_OC5_SetConfig+0x76>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	4a15      	ldr	r2, [pc, #84]	; (800aff0 <TIM_OC5_SetConfig+0xb8>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d007      	beq.n	800afae <TIM_OC5_SetConfig+0x76>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	4a14      	ldr	r2, [pc, #80]	; (800aff4 <TIM_OC5_SetConfig+0xbc>)
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d003      	beq.n	800afae <TIM_OC5_SetConfig+0x76>
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	4a13      	ldr	r2, [pc, #76]	; (800aff8 <TIM_OC5_SetConfig+0xc0>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d109      	bne.n	800afc2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800afb4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	695b      	ldr	r3, [r3, #20]
 800afba:	021b      	lsls	r3, r3, #8
 800afbc:	697a      	ldr	r2, [r7, #20]
 800afbe:	4313      	orrs	r3, r2
 800afc0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	697a      	ldr	r2, [r7, #20]
 800afc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	68fa      	ldr	r2, [r7, #12]
 800afcc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	685a      	ldr	r2, [r3, #4]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	693a      	ldr	r2, [r7, #16]
 800afda:	621a      	str	r2, [r3, #32]
}
 800afdc:	bf00      	nop
 800afde:	371c      	adds	r7, #28
 800afe0:	46bd      	mov	sp, r7
 800afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe6:	4770      	bx	lr
 800afe8:	40010000 	.word	0x40010000
 800afec:	40010400 	.word	0x40010400
 800aff0:	40014000 	.word	0x40014000
 800aff4:	40014400 	.word	0x40014400
 800aff8:	40014800 	.word	0x40014800

0800affc <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800affc:	b480      	push	{r7}
 800affe:	b087      	sub	sp, #28
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6a1b      	ldr	r3, [r3, #32]
 800b00a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6a1b      	ldr	r3, [r3, #32]
 800b016:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b02a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	021b      	lsls	r3, r3, #8
 800b032:	68fa      	ldr	r2, [r7, #12]
 800b034:	4313      	orrs	r3, r2
 800b036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b03e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	689b      	ldr	r3, [r3, #8]
 800b044:	051b      	lsls	r3, r3, #20
 800b046:	693a      	ldr	r2, [r7, #16]
 800b048:	4313      	orrs	r3, r2
 800b04a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	4a18      	ldr	r2, [pc, #96]	; (800b0b0 <TIM_OC6_SetConfig+0xb4>)
 800b050:	4293      	cmp	r3, r2
 800b052:	d00f      	beq.n	800b074 <TIM_OC6_SetConfig+0x78>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	4a17      	ldr	r2, [pc, #92]	; (800b0b4 <TIM_OC6_SetConfig+0xb8>)
 800b058:	4293      	cmp	r3, r2
 800b05a:	d00b      	beq.n	800b074 <TIM_OC6_SetConfig+0x78>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	4a16      	ldr	r2, [pc, #88]	; (800b0b8 <TIM_OC6_SetConfig+0xbc>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d007      	beq.n	800b074 <TIM_OC6_SetConfig+0x78>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	4a15      	ldr	r2, [pc, #84]	; (800b0bc <TIM_OC6_SetConfig+0xc0>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d003      	beq.n	800b074 <TIM_OC6_SetConfig+0x78>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	4a14      	ldr	r2, [pc, #80]	; (800b0c0 <TIM_OC6_SetConfig+0xc4>)
 800b070:	4293      	cmp	r3, r2
 800b072:	d109      	bne.n	800b088 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b07a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	695b      	ldr	r3, [r3, #20]
 800b080:	029b      	lsls	r3, r3, #10
 800b082:	697a      	ldr	r2, [r7, #20]
 800b084:	4313      	orrs	r3, r2
 800b086:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	697a      	ldr	r2, [r7, #20]
 800b08c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	68fa      	ldr	r2, [r7, #12]
 800b092:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	685a      	ldr	r2, [r3, #4]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	693a      	ldr	r2, [r7, #16]
 800b0a0:	621a      	str	r2, [r3, #32]
}
 800b0a2:	bf00      	nop
 800b0a4:	371c      	adds	r7, #28
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ac:	4770      	bx	lr
 800b0ae:	bf00      	nop
 800b0b0:	40010000 	.word	0x40010000
 800b0b4:	40010400 	.word	0x40010400
 800b0b8:	40014000 	.word	0x40014000
 800b0bc:	40014400 	.word	0x40014400
 800b0c0:	40014800 	.word	0x40014800

0800b0c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b085      	sub	sp, #20
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
 800b0cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0d4:	2b01      	cmp	r3, #1
 800b0d6:	d101      	bne.n	800b0dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b0d8:	2302      	movs	r3, #2
 800b0da:	e068      	b.n	800b1ae <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2201      	movs	r2, #1
 800b0e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2202      	movs	r2, #2
 800b0e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	685b      	ldr	r3, [r3, #4]
 800b0f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	689b      	ldr	r3, [r3, #8]
 800b0fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	4a2e      	ldr	r2, [pc, #184]	; (800b1bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b102:	4293      	cmp	r3, r2
 800b104:	d004      	beq.n	800b110 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	4a2d      	ldr	r2, [pc, #180]	; (800b1c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d108      	bne.n	800b122 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b116:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	685b      	ldr	r3, [r3, #4]
 800b11c:	68fa      	ldr	r2, [r7, #12]
 800b11e:	4313      	orrs	r3, r2
 800b120:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b128:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	68fa      	ldr	r2, [r7, #12]
 800b130:	4313      	orrs	r3, r2
 800b132:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	68fa      	ldr	r2, [r7, #12]
 800b13a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	4a1e      	ldr	r2, [pc, #120]	; (800b1bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d01d      	beq.n	800b182 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b14e:	d018      	beq.n	800b182 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4a1b      	ldr	r2, [pc, #108]	; (800b1c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d013      	beq.n	800b182 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	4a1a      	ldr	r2, [pc, #104]	; (800b1c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b160:	4293      	cmp	r3, r2
 800b162:	d00e      	beq.n	800b182 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	4a18      	ldr	r2, [pc, #96]	; (800b1cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d009      	beq.n	800b182 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	4a13      	ldr	r2, [pc, #76]	; (800b1c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b174:	4293      	cmp	r3, r2
 800b176:	d004      	beq.n	800b182 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	4a14      	ldr	r2, [pc, #80]	; (800b1d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	d10c      	bne.n	800b19c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b188:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	689b      	ldr	r3, [r3, #8]
 800b18e:	68ba      	ldr	r2, [r7, #8]
 800b190:	4313      	orrs	r3, r2
 800b192:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	68ba      	ldr	r2, [r7, #8]
 800b19a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2201      	movs	r2, #1
 800b1a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b1ac:	2300      	movs	r3, #0
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3714      	adds	r7, #20
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b8:	4770      	bx	lr
 800b1ba:	bf00      	nop
 800b1bc:	40010000 	.word	0x40010000
 800b1c0:	40010400 	.word	0x40010400
 800b1c4:	40000400 	.word	0x40000400
 800b1c8:	40000800 	.word	0x40000800
 800b1cc:	40000c00 	.word	0x40000c00
 800b1d0:	40001800 	.word	0x40001800

0800b1d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b085      	sub	sp, #20
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1e8:	2b01      	cmp	r3, #1
 800b1ea:	d101      	bne.n	800b1f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b1ec:	2302      	movs	r3, #2
 800b1ee:	e065      	b.n	800b2bc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	68db      	ldr	r3, [r3, #12]
 800b202:	4313      	orrs	r3, r2
 800b204:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	689b      	ldr	r3, [r3, #8]
 800b210:	4313      	orrs	r3, r2
 800b212:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	685b      	ldr	r3, [r3, #4]
 800b21e:	4313      	orrs	r3, r2
 800b220:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	4313      	orrs	r3, r2
 800b22e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	691b      	ldr	r3, [r3, #16]
 800b23a:	4313      	orrs	r3, r2
 800b23c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	695b      	ldr	r3, [r3, #20]
 800b248:	4313      	orrs	r3, r2
 800b24a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b256:	4313      	orrs	r3, r2
 800b258:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	699b      	ldr	r3, [r3, #24]
 800b264:	041b      	lsls	r3, r3, #16
 800b266:	4313      	orrs	r3, r2
 800b268:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	4a16      	ldr	r2, [pc, #88]	; (800b2c8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d004      	beq.n	800b27e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	4a14      	ldr	r2, [pc, #80]	; (800b2cc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d115      	bne.n	800b2aa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b288:	051b      	lsls	r3, r3, #20
 800b28a:	4313      	orrs	r3, r2
 800b28c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	69db      	ldr	r3, [r3, #28]
 800b298:	4313      	orrs	r3, r2
 800b29a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	6a1b      	ldr	r3, [r3, #32]
 800b2a6:	4313      	orrs	r3, r2
 800b2a8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	68fa      	ldr	r2, [r7, #12]
 800b2b0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b2ba:	2300      	movs	r3, #0
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3714      	adds	r7, #20
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr
 800b2c8:	40010000 	.word	0x40010000
 800b2cc:	40010400 	.word	0x40010400

0800b2d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b082      	sub	sp, #8
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d101      	bne.n	800b2e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b2de:	2301      	movs	r3, #1
 800b2e0:	e042      	b.n	800b368 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d106      	bne.n	800b2fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f7f6 fdf1 	bl	8001edc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2224      	movs	r2, #36	; 0x24
 800b2fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	681a      	ldr	r2, [r3, #0]
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f022 0201 	bic.w	r2, r2, #1
 800b310:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f000 f82c 	bl	800b370 <UART_SetConfig>
 800b318:	4603      	mov	r3, r0
 800b31a:	2b01      	cmp	r3, #1
 800b31c:	d101      	bne.n	800b322 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b31e:	2301      	movs	r3, #1
 800b320:	e022      	b.n	800b368 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b326:	2b00      	cmp	r3, #0
 800b328:	d002      	beq.n	800b330 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f002 f99e 	bl	800d66c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	685a      	ldr	r2, [r3, #4]
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b33e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	689a      	ldr	r2, [r3, #8]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b34e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	681a      	ldr	r2, [r3, #0]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f042 0201 	orr.w	r2, r2, #1
 800b35e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f002 fa25 	bl	800d7b0 <UART_CheckIdleState>
 800b366:	4603      	mov	r3, r0
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3708      	adds	r7, #8
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}

0800b370 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b370:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800b374:	b090      	sub	sp, #64	; 0x40
 800b376:	af00      	add	r7, sp, #0
 800b378:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800b37a:	2300      	movs	r3, #0
 800b37c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 800b37e:	2300      	movs	r3, #0
 800b380:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800b384:	2300      	movs	r3, #0
 800b386:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	689a      	ldr	r2, [r3, #8]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	691b      	ldr	r3, [r3, #16]
 800b390:	431a      	orrs	r2, r3
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	695b      	ldr	r3, [r3, #20]
 800b396:	431a      	orrs	r2, r3
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	69db      	ldr	r3, [r3, #28]
 800b39c:	4313      	orrs	r3, r2
 800b39e:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b3a6:	4313      	orrs	r3, r2
 800b3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	681a      	ldr	r2, [r3, #0]
 800b3b0:	4bc1      	ldr	r3, [pc, #772]	; (800b6b8 <UART_SetConfig+0x348>)
 800b3b2:	4013      	ands	r3, r2
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	6812      	ldr	r2, [r2, #0]
 800b3b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b3ba:	430b      	orrs	r3, r1
 800b3bc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	68da      	ldr	r2, [r3, #12]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	430a      	orrs	r2, r1
 800b3d2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	699b      	ldr	r3, [r3, #24]
 800b3d8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	4ab7      	ldr	r2, [pc, #732]	; (800b6bc <UART_SetConfig+0x34c>)
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d004      	beq.n	800b3ee <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6a1b      	ldr	r3, [r3, #32]
 800b3e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b3ea:	4313      	orrs	r3, r2
 800b3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	689a      	ldr	r2, [r3, #8]
 800b3f4:	4bb2      	ldr	r3, [pc, #712]	; (800b6c0 <UART_SetConfig+0x350>)
 800b3f6:	4013      	ands	r3, r2
 800b3f8:	687a      	ldr	r2, [r7, #4]
 800b3fa:	6812      	ldr	r2, [r2, #0]
 800b3fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b3fe:	430b      	orrs	r3, r1
 800b400:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b408:	f023 010f 	bic.w	r1, r3, #15
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	430a      	orrs	r2, r1
 800b416:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	4aa9      	ldr	r2, [pc, #676]	; (800b6c4 <UART_SetConfig+0x354>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	d177      	bne.n	800b512 <UART_SetConfig+0x1a2>
 800b422:	4ba9      	ldr	r3, [pc, #676]	; (800b6c8 <UART_SetConfig+0x358>)
 800b424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b426:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b42a:	2b28      	cmp	r3, #40	; 0x28
 800b42c:	d86c      	bhi.n	800b508 <UART_SetConfig+0x198>
 800b42e:	a201      	add	r2, pc, #4	; (adr r2, 800b434 <UART_SetConfig+0xc4>)
 800b430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b434:	0800b4d9 	.word	0x0800b4d9
 800b438:	0800b509 	.word	0x0800b509
 800b43c:	0800b509 	.word	0x0800b509
 800b440:	0800b509 	.word	0x0800b509
 800b444:	0800b509 	.word	0x0800b509
 800b448:	0800b509 	.word	0x0800b509
 800b44c:	0800b509 	.word	0x0800b509
 800b450:	0800b509 	.word	0x0800b509
 800b454:	0800b4e1 	.word	0x0800b4e1
 800b458:	0800b509 	.word	0x0800b509
 800b45c:	0800b509 	.word	0x0800b509
 800b460:	0800b509 	.word	0x0800b509
 800b464:	0800b509 	.word	0x0800b509
 800b468:	0800b509 	.word	0x0800b509
 800b46c:	0800b509 	.word	0x0800b509
 800b470:	0800b509 	.word	0x0800b509
 800b474:	0800b4e9 	.word	0x0800b4e9
 800b478:	0800b509 	.word	0x0800b509
 800b47c:	0800b509 	.word	0x0800b509
 800b480:	0800b509 	.word	0x0800b509
 800b484:	0800b509 	.word	0x0800b509
 800b488:	0800b509 	.word	0x0800b509
 800b48c:	0800b509 	.word	0x0800b509
 800b490:	0800b509 	.word	0x0800b509
 800b494:	0800b4f1 	.word	0x0800b4f1
 800b498:	0800b509 	.word	0x0800b509
 800b49c:	0800b509 	.word	0x0800b509
 800b4a0:	0800b509 	.word	0x0800b509
 800b4a4:	0800b509 	.word	0x0800b509
 800b4a8:	0800b509 	.word	0x0800b509
 800b4ac:	0800b509 	.word	0x0800b509
 800b4b0:	0800b509 	.word	0x0800b509
 800b4b4:	0800b4f9 	.word	0x0800b4f9
 800b4b8:	0800b509 	.word	0x0800b509
 800b4bc:	0800b509 	.word	0x0800b509
 800b4c0:	0800b509 	.word	0x0800b509
 800b4c4:	0800b509 	.word	0x0800b509
 800b4c8:	0800b509 	.word	0x0800b509
 800b4cc:	0800b509 	.word	0x0800b509
 800b4d0:	0800b509 	.word	0x0800b509
 800b4d4:	0800b501 	.word	0x0800b501
 800b4d8:	2301      	movs	r3, #1
 800b4da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b4de:	e233      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b4e0:	2304      	movs	r3, #4
 800b4e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b4e6:	e22f      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b4e8:	2308      	movs	r3, #8
 800b4ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b4ee:	e22b      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b4f0:	2310      	movs	r3, #16
 800b4f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b4f6:	e227      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b4f8:	2320      	movs	r3, #32
 800b4fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b4fe:	e223      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b500:	2340      	movs	r3, #64	; 0x40
 800b502:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b506:	e21f      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b508:	2380      	movs	r3, #128	; 0x80
 800b50a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b50e:	bf00      	nop
 800b510:	e21a      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4a6d      	ldr	r2, [pc, #436]	; (800b6cc <UART_SetConfig+0x35c>)
 800b518:	4293      	cmp	r3, r2
 800b51a:	d132      	bne.n	800b582 <UART_SetConfig+0x212>
 800b51c:	4b6a      	ldr	r3, [pc, #424]	; (800b6c8 <UART_SetConfig+0x358>)
 800b51e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b520:	f003 0307 	and.w	r3, r3, #7
 800b524:	2b05      	cmp	r3, #5
 800b526:	d827      	bhi.n	800b578 <UART_SetConfig+0x208>
 800b528:	a201      	add	r2, pc, #4	; (adr r2, 800b530 <UART_SetConfig+0x1c0>)
 800b52a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b52e:	bf00      	nop
 800b530:	0800b549 	.word	0x0800b549
 800b534:	0800b551 	.word	0x0800b551
 800b538:	0800b559 	.word	0x0800b559
 800b53c:	0800b561 	.word	0x0800b561
 800b540:	0800b569 	.word	0x0800b569
 800b544:	0800b571 	.word	0x0800b571
 800b548:	2300      	movs	r3, #0
 800b54a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b54e:	e1fb      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b550:	2304      	movs	r3, #4
 800b552:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b556:	e1f7      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b558:	2308      	movs	r3, #8
 800b55a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b55e:	e1f3      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b560:	2310      	movs	r3, #16
 800b562:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b566:	e1ef      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b568:	2320      	movs	r3, #32
 800b56a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b56e:	e1eb      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b570:	2340      	movs	r3, #64	; 0x40
 800b572:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b576:	e1e7      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b578:	2380      	movs	r3, #128	; 0x80
 800b57a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b57e:	bf00      	nop
 800b580:	e1e2      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	4a52      	ldr	r2, [pc, #328]	; (800b6d0 <UART_SetConfig+0x360>)
 800b588:	4293      	cmp	r3, r2
 800b58a:	d132      	bne.n	800b5f2 <UART_SetConfig+0x282>
 800b58c:	4b4e      	ldr	r3, [pc, #312]	; (800b6c8 <UART_SetConfig+0x358>)
 800b58e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b590:	f003 0307 	and.w	r3, r3, #7
 800b594:	2b05      	cmp	r3, #5
 800b596:	d827      	bhi.n	800b5e8 <UART_SetConfig+0x278>
 800b598:	a201      	add	r2, pc, #4	; (adr r2, 800b5a0 <UART_SetConfig+0x230>)
 800b59a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b59e:	bf00      	nop
 800b5a0:	0800b5b9 	.word	0x0800b5b9
 800b5a4:	0800b5c1 	.word	0x0800b5c1
 800b5a8:	0800b5c9 	.word	0x0800b5c9
 800b5ac:	0800b5d1 	.word	0x0800b5d1
 800b5b0:	0800b5d9 	.word	0x0800b5d9
 800b5b4:	0800b5e1 	.word	0x0800b5e1
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b5be:	e1c3      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b5c0:	2304      	movs	r3, #4
 800b5c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b5c6:	e1bf      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b5c8:	2308      	movs	r3, #8
 800b5ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b5ce:	e1bb      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b5d0:	2310      	movs	r3, #16
 800b5d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b5d6:	e1b7      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b5d8:	2320      	movs	r3, #32
 800b5da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b5de:	e1b3      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b5e0:	2340      	movs	r3, #64	; 0x40
 800b5e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b5e6:	e1af      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b5e8:	2380      	movs	r3, #128	; 0x80
 800b5ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b5ee:	bf00      	nop
 800b5f0:	e1aa      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	4a37      	ldr	r2, [pc, #220]	; (800b6d4 <UART_SetConfig+0x364>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d132      	bne.n	800b662 <UART_SetConfig+0x2f2>
 800b5fc:	4b32      	ldr	r3, [pc, #200]	; (800b6c8 <UART_SetConfig+0x358>)
 800b5fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b600:	f003 0307 	and.w	r3, r3, #7
 800b604:	2b05      	cmp	r3, #5
 800b606:	d827      	bhi.n	800b658 <UART_SetConfig+0x2e8>
 800b608:	a201      	add	r2, pc, #4	; (adr r2, 800b610 <UART_SetConfig+0x2a0>)
 800b60a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b60e:	bf00      	nop
 800b610:	0800b629 	.word	0x0800b629
 800b614:	0800b631 	.word	0x0800b631
 800b618:	0800b639 	.word	0x0800b639
 800b61c:	0800b641 	.word	0x0800b641
 800b620:	0800b649 	.word	0x0800b649
 800b624:	0800b651 	.word	0x0800b651
 800b628:	2300      	movs	r3, #0
 800b62a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b62e:	e18b      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b630:	2304      	movs	r3, #4
 800b632:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b636:	e187      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b638:	2308      	movs	r3, #8
 800b63a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b63e:	e183      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b640:	2310      	movs	r3, #16
 800b642:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b646:	e17f      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b648:	2320      	movs	r3, #32
 800b64a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b64e:	e17b      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b650:	2340      	movs	r3, #64	; 0x40
 800b652:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b656:	e177      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b658:	2380      	movs	r3, #128	; 0x80
 800b65a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b65e:	bf00      	nop
 800b660:	e172      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	4a1c      	ldr	r2, [pc, #112]	; (800b6d8 <UART_SetConfig+0x368>)
 800b668:	4293      	cmp	r3, r2
 800b66a:	d144      	bne.n	800b6f6 <UART_SetConfig+0x386>
 800b66c:	4b16      	ldr	r3, [pc, #88]	; (800b6c8 <UART_SetConfig+0x358>)
 800b66e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b670:	f003 0307 	and.w	r3, r3, #7
 800b674:	2b05      	cmp	r3, #5
 800b676:	d839      	bhi.n	800b6ec <UART_SetConfig+0x37c>
 800b678:	a201      	add	r2, pc, #4	; (adr r2, 800b680 <UART_SetConfig+0x310>)
 800b67a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b67e:	bf00      	nop
 800b680:	0800b699 	.word	0x0800b699
 800b684:	0800b6a1 	.word	0x0800b6a1
 800b688:	0800b6a9 	.word	0x0800b6a9
 800b68c:	0800b6b1 	.word	0x0800b6b1
 800b690:	0800b6dd 	.word	0x0800b6dd
 800b694:	0800b6e5 	.word	0x0800b6e5
 800b698:	2300      	movs	r3, #0
 800b69a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b69e:	e153      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b6a0:	2304      	movs	r3, #4
 800b6a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b6a6:	e14f      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b6a8:	2308      	movs	r3, #8
 800b6aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b6ae:	e14b      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b6b0:	2310      	movs	r3, #16
 800b6b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b6b6:	e147      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b6b8:	cfff69f3 	.word	0xcfff69f3
 800b6bc:	58000c00 	.word	0x58000c00
 800b6c0:	11fff4ff 	.word	0x11fff4ff
 800b6c4:	40011000 	.word	0x40011000
 800b6c8:	58024400 	.word	0x58024400
 800b6cc:	40004400 	.word	0x40004400
 800b6d0:	40004800 	.word	0x40004800
 800b6d4:	40004c00 	.word	0x40004c00
 800b6d8:	40005000 	.word	0x40005000
 800b6dc:	2320      	movs	r3, #32
 800b6de:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b6e2:	e131      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b6e4:	2340      	movs	r3, #64	; 0x40
 800b6e6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b6ea:	e12d      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b6ec:	2380      	movs	r3, #128	; 0x80
 800b6ee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b6f2:	bf00      	nop
 800b6f4:	e128      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4ac3      	ldr	r2, [pc, #780]	; (800ba08 <UART_SetConfig+0x698>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d178      	bne.n	800b7f2 <UART_SetConfig+0x482>
 800b700:	4bc2      	ldr	r3, [pc, #776]	; (800ba0c <UART_SetConfig+0x69c>)
 800b702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b704:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b708:	2b28      	cmp	r3, #40	; 0x28
 800b70a:	d86d      	bhi.n	800b7e8 <UART_SetConfig+0x478>
 800b70c:	a201      	add	r2, pc, #4	; (adr r2, 800b714 <UART_SetConfig+0x3a4>)
 800b70e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b712:	bf00      	nop
 800b714:	0800b7b9 	.word	0x0800b7b9
 800b718:	0800b7e9 	.word	0x0800b7e9
 800b71c:	0800b7e9 	.word	0x0800b7e9
 800b720:	0800b7e9 	.word	0x0800b7e9
 800b724:	0800b7e9 	.word	0x0800b7e9
 800b728:	0800b7e9 	.word	0x0800b7e9
 800b72c:	0800b7e9 	.word	0x0800b7e9
 800b730:	0800b7e9 	.word	0x0800b7e9
 800b734:	0800b7c1 	.word	0x0800b7c1
 800b738:	0800b7e9 	.word	0x0800b7e9
 800b73c:	0800b7e9 	.word	0x0800b7e9
 800b740:	0800b7e9 	.word	0x0800b7e9
 800b744:	0800b7e9 	.word	0x0800b7e9
 800b748:	0800b7e9 	.word	0x0800b7e9
 800b74c:	0800b7e9 	.word	0x0800b7e9
 800b750:	0800b7e9 	.word	0x0800b7e9
 800b754:	0800b7c9 	.word	0x0800b7c9
 800b758:	0800b7e9 	.word	0x0800b7e9
 800b75c:	0800b7e9 	.word	0x0800b7e9
 800b760:	0800b7e9 	.word	0x0800b7e9
 800b764:	0800b7e9 	.word	0x0800b7e9
 800b768:	0800b7e9 	.word	0x0800b7e9
 800b76c:	0800b7e9 	.word	0x0800b7e9
 800b770:	0800b7e9 	.word	0x0800b7e9
 800b774:	0800b7d1 	.word	0x0800b7d1
 800b778:	0800b7e9 	.word	0x0800b7e9
 800b77c:	0800b7e9 	.word	0x0800b7e9
 800b780:	0800b7e9 	.word	0x0800b7e9
 800b784:	0800b7e9 	.word	0x0800b7e9
 800b788:	0800b7e9 	.word	0x0800b7e9
 800b78c:	0800b7e9 	.word	0x0800b7e9
 800b790:	0800b7e9 	.word	0x0800b7e9
 800b794:	0800b7d9 	.word	0x0800b7d9
 800b798:	0800b7e9 	.word	0x0800b7e9
 800b79c:	0800b7e9 	.word	0x0800b7e9
 800b7a0:	0800b7e9 	.word	0x0800b7e9
 800b7a4:	0800b7e9 	.word	0x0800b7e9
 800b7a8:	0800b7e9 	.word	0x0800b7e9
 800b7ac:	0800b7e9 	.word	0x0800b7e9
 800b7b0:	0800b7e9 	.word	0x0800b7e9
 800b7b4:	0800b7e1 	.word	0x0800b7e1
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b7be:	e0c3      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b7c0:	2304      	movs	r3, #4
 800b7c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b7c6:	e0bf      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b7c8:	2308      	movs	r3, #8
 800b7ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b7ce:	e0bb      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b7d0:	2310      	movs	r3, #16
 800b7d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b7d6:	e0b7      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b7d8:	2320      	movs	r3, #32
 800b7da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b7de:	e0b3      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b7e0:	2340      	movs	r3, #64	; 0x40
 800b7e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b7e6:	e0af      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b7e8:	2380      	movs	r3, #128	; 0x80
 800b7ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b7ee:	bf00      	nop
 800b7f0:	e0aa      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	4a86      	ldr	r2, [pc, #536]	; (800ba10 <UART_SetConfig+0x6a0>)
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d132      	bne.n	800b862 <UART_SetConfig+0x4f2>
 800b7fc:	4b83      	ldr	r3, [pc, #524]	; (800ba0c <UART_SetConfig+0x69c>)
 800b7fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b800:	f003 0307 	and.w	r3, r3, #7
 800b804:	2b05      	cmp	r3, #5
 800b806:	d827      	bhi.n	800b858 <UART_SetConfig+0x4e8>
 800b808:	a201      	add	r2, pc, #4	; (adr r2, 800b810 <UART_SetConfig+0x4a0>)
 800b80a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b80e:	bf00      	nop
 800b810:	0800b829 	.word	0x0800b829
 800b814:	0800b831 	.word	0x0800b831
 800b818:	0800b839 	.word	0x0800b839
 800b81c:	0800b841 	.word	0x0800b841
 800b820:	0800b849 	.word	0x0800b849
 800b824:	0800b851 	.word	0x0800b851
 800b828:	2300      	movs	r3, #0
 800b82a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b82e:	e08b      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b830:	2304      	movs	r3, #4
 800b832:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b836:	e087      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b838:	2308      	movs	r3, #8
 800b83a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b83e:	e083      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b840:	2310      	movs	r3, #16
 800b842:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b846:	e07f      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b848:	2320      	movs	r3, #32
 800b84a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b84e:	e07b      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b850:	2340      	movs	r3, #64	; 0x40
 800b852:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b856:	e077      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b858:	2380      	movs	r3, #128	; 0x80
 800b85a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b85e:	bf00      	nop
 800b860:	e072      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4a6b      	ldr	r2, [pc, #428]	; (800ba14 <UART_SetConfig+0x6a4>)
 800b868:	4293      	cmp	r3, r2
 800b86a:	d132      	bne.n	800b8d2 <UART_SetConfig+0x562>
 800b86c:	4b67      	ldr	r3, [pc, #412]	; (800ba0c <UART_SetConfig+0x69c>)
 800b86e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b870:	f003 0307 	and.w	r3, r3, #7
 800b874:	2b05      	cmp	r3, #5
 800b876:	d827      	bhi.n	800b8c8 <UART_SetConfig+0x558>
 800b878:	a201      	add	r2, pc, #4	; (adr r2, 800b880 <UART_SetConfig+0x510>)
 800b87a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b87e:	bf00      	nop
 800b880:	0800b899 	.word	0x0800b899
 800b884:	0800b8a1 	.word	0x0800b8a1
 800b888:	0800b8a9 	.word	0x0800b8a9
 800b88c:	0800b8b1 	.word	0x0800b8b1
 800b890:	0800b8b9 	.word	0x0800b8b9
 800b894:	0800b8c1 	.word	0x0800b8c1
 800b898:	2300      	movs	r3, #0
 800b89a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b89e:	e053      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b8a0:	2304      	movs	r3, #4
 800b8a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b8a6:	e04f      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b8a8:	2308      	movs	r3, #8
 800b8aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b8ae:	e04b      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b8b0:	2310      	movs	r3, #16
 800b8b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b8b6:	e047      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b8b8:	2320      	movs	r3, #32
 800b8ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b8be:	e043      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b8c0:	2340      	movs	r3, #64	; 0x40
 800b8c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b8c6:	e03f      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b8c8:	2380      	movs	r3, #128	; 0x80
 800b8ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b8ce:	bf00      	nop
 800b8d0:	e03a      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	4a50      	ldr	r2, [pc, #320]	; (800ba18 <UART_SetConfig+0x6a8>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d132      	bne.n	800b942 <UART_SetConfig+0x5d2>
 800b8dc:	4b4b      	ldr	r3, [pc, #300]	; (800ba0c <UART_SetConfig+0x69c>)
 800b8de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8e0:	f003 0307 	and.w	r3, r3, #7
 800b8e4:	2b05      	cmp	r3, #5
 800b8e6:	d827      	bhi.n	800b938 <UART_SetConfig+0x5c8>
 800b8e8:	a201      	add	r2, pc, #4	; (adr r2, 800b8f0 <UART_SetConfig+0x580>)
 800b8ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8ee:	bf00      	nop
 800b8f0:	0800b909 	.word	0x0800b909
 800b8f4:	0800b911 	.word	0x0800b911
 800b8f8:	0800b919 	.word	0x0800b919
 800b8fc:	0800b921 	.word	0x0800b921
 800b900:	0800b929 	.word	0x0800b929
 800b904:	0800b931 	.word	0x0800b931
 800b908:	2302      	movs	r3, #2
 800b90a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b90e:	e01b      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b910:	2304      	movs	r3, #4
 800b912:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b916:	e017      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b918:	2308      	movs	r3, #8
 800b91a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b91e:	e013      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b920:	2310      	movs	r3, #16
 800b922:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b926:	e00f      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b928:	2320      	movs	r3, #32
 800b92a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b92e:	e00b      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b930:	2340      	movs	r3, #64	; 0x40
 800b932:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b936:	e007      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b938:	2380      	movs	r3, #128	; 0x80
 800b93a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800b93e:	bf00      	nop
 800b940:	e002      	b.n	800b948 <UART_SetConfig+0x5d8>
 800b942:	2380      	movs	r3, #128	; 0x80
 800b944:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	4a32      	ldr	r2, [pc, #200]	; (800ba18 <UART_SetConfig+0x6a8>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	f040 86f7 	bne.w	800c742 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b954:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b958:	2b08      	cmp	r3, #8
 800b95a:	f000 80c0 	beq.w	800bade <UART_SetConfig+0x76e>
 800b95e:	2b08      	cmp	r3, #8
 800b960:	dc04      	bgt.n	800b96c <UART_SetConfig+0x5fc>
 800b962:	2b02      	cmp	r3, #2
 800b964:	d00c      	beq.n	800b980 <UART_SetConfig+0x610>
 800b966:	2b04      	cmp	r3, #4
 800b968:	d065      	beq.n	800ba36 <UART_SetConfig+0x6c6>
 800b96a:	e27a      	b.n	800be62 <UART_SetConfig+0xaf2>
 800b96c:	2b20      	cmp	r3, #32
 800b96e:	f000 81b0 	beq.w	800bcd2 <UART_SetConfig+0x962>
 800b972:	2b40      	cmp	r3, #64	; 0x40
 800b974:	f000 821e 	beq.w	800bdb4 <UART_SetConfig+0xa44>
 800b978:	2b10      	cmp	r3, #16
 800b97a:	f000 8104 	beq.w	800bb86 <UART_SetConfig+0x816>
 800b97e:	e270      	b.n	800be62 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800b980:	f7fd f9d0 	bl	8008d24 <HAL_RCCEx_GetD3PCLK1Freq>
 800b984:	4602      	mov	r2, r0
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d04e      	beq.n	800ba2c <UART_SetConfig+0x6bc>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b992:	2b01      	cmp	r3, #1
 800b994:	d048      	beq.n	800ba28 <UART_SetConfig+0x6b8>
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b99a:	2b02      	cmp	r3, #2
 800b99c:	d042      	beq.n	800ba24 <UART_SetConfig+0x6b4>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a2:	2b03      	cmp	r3, #3
 800b9a4:	d03c      	beq.n	800ba20 <UART_SetConfig+0x6b0>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9aa:	2b04      	cmp	r3, #4
 800b9ac:	d036      	beq.n	800ba1c <UART_SetConfig+0x6ac>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b2:	2b05      	cmp	r3, #5
 800b9b4:	d026      	beq.n	800ba04 <UART_SetConfig+0x694>
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ba:	2b06      	cmp	r3, #6
 800b9bc:	d020      	beq.n	800ba00 <UART_SetConfig+0x690>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c2:	2b07      	cmp	r3, #7
 800b9c4:	d01a      	beq.n	800b9fc <UART_SetConfig+0x68c>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ca:	2b08      	cmp	r3, #8
 800b9cc:	d014      	beq.n	800b9f8 <UART_SetConfig+0x688>
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d2:	2b09      	cmp	r3, #9
 800b9d4:	d00e      	beq.n	800b9f4 <UART_SetConfig+0x684>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9da:	2b0a      	cmp	r3, #10
 800b9dc:	d008      	beq.n	800b9f0 <UART_SetConfig+0x680>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e2:	2b0b      	cmp	r3, #11
 800b9e4:	d102      	bne.n	800b9ec <UART_SetConfig+0x67c>
 800b9e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b9ea:	e020      	b.n	800ba2e <UART_SetConfig+0x6be>
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	e01e      	b.n	800ba2e <UART_SetConfig+0x6be>
 800b9f0:	2380      	movs	r3, #128	; 0x80
 800b9f2:	e01c      	b.n	800ba2e <UART_SetConfig+0x6be>
 800b9f4:	2340      	movs	r3, #64	; 0x40
 800b9f6:	e01a      	b.n	800ba2e <UART_SetConfig+0x6be>
 800b9f8:	2320      	movs	r3, #32
 800b9fa:	e018      	b.n	800ba2e <UART_SetConfig+0x6be>
 800b9fc:	2310      	movs	r3, #16
 800b9fe:	e016      	b.n	800ba2e <UART_SetConfig+0x6be>
 800ba00:	230c      	movs	r3, #12
 800ba02:	e014      	b.n	800ba2e <UART_SetConfig+0x6be>
 800ba04:	230a      	movs	r3, #10
 800ba06:	e012      	b.n	800ba2e <UART_SetConfig+0x6be>
 800ba08:	40011400 	.word	0x40011400
 800ba0c:	58024400 	.word	0x58024400
 800ba10:	40007800 	.word	0x40007800
 800ba14:	40007c00 	.word	0x40007c00
 800ba18:	58000c00 	.word	0x58000c00
 800ba1c:	2308      	movs	r3, #8
 800ba1e:	e006      	b.n	800ba2e <UART_SetConfig+0x6be>
 800ba20:	2306      	movs	r3, #6
 800ba22:	e004      	b.n	800ba2e <UART_SetConfig+0x6be>
 800ba24:	2304      	movs	r3, #4
 800ba26:	e002      	b.n	800ba2e <UART_SetConfig+0x6be>
 800ba28:	2302      	movs	r3, #2
 800ba2a:	e000      	b.n	800ba2e <UART_SetConfig+0x6be>
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba34:	e219      	b.n	800be6a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba36:	f107 0318 	add.w	r3, r7, #24
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7fd f988 	bl	8008d50 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800ba40:	69fa      	ldr	r2, [r7, #28]
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d044      	beq.n	800bad4 <UART_SetConfig+0x764>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba4e:	2b01      	cmp	r3, #1
 800ba50:	d03e      	beq.n	800bad0 <UART_SetConfig+0x760>
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba56:	2b02      	cmp	r3, #2
 800ba58:	d038      	beq.n	800bacc <UART_SetConfig+0x75c>
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba5e:	2b03      	cmp	r3, #3
 800ba60:	d032      	beq.n	800bac8 <UART_SetConfig+0x758>
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba66:	2b04      	cmp	r3, #4
 800ba68:	d02c      	beq.n	800bac4 <UART_SetConfig+0x754>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba6e:	2b05      	cmp	r3, #5
 800ba70:	d026      	beq.n	800bac0 <UART_SetConfig+0x750>
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba76:	2b06      	cmp	r3, #6
 800ba78:	d020      	beq.n	800babc <UART_SetConfig+0x74c>
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba7e:	2b07      	cmp	r3, #7
 800ba80:	d01a      	beq.n	800bab8 <UART_SetConfig+0x748>
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba86:	2b08      	cmp	r3, #8
 800ba88:	d014      	beq.n	800bab4 <UART_SetConfig+0x744>
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba8e:	2b09      	cmp	r3, #9
 800ba90:	d00e      	beq.n	800bab0 <UART_SetConfig+0x740>
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba96:	2b0a      	cmp	r3, #10
 800ba98:	d008      	beq.n	800baac <UART_SetConfig+0x73c>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba9e:	2b0b      	cmp	r3, #11
 800baa0:	d102      	bne.n	800baa8 <UART_SetConfig+0x738>
 800baa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800baa6:	e016      	b.n	800bad6 <UART_SetConfig+0x766>
 800baa8:	2301      	movs	r3, #1
 800baaa:	e014      	b.n	800bad6 <UART_SetConfig+0x766>
 800baac:	2380      	movs	r3, #128	; 0x80
 800baae:	e012      	b.n	800bad6 <UART_SetConfig+0x766>
 800bab0:	2340      	movs	r3, #64	; 0x40
 800bab2:	e010      	b.n	800bad6 <UART_SetConfig+0x766>
 800bab4:	2320      	movs	r3, #32
 800bab6:	e00e      	b.n	800bad6 <UART_SetConfig+0x766>
 800bab8:	2310      	movs	r3, #16
 800baba:	e00c      	b.n	800bad6 <UART_SetConfig+0x766>
 800babc:	230c      	movs	r3, #12
 800babe:	e00a      	b.n	800bad6 <UART_SetConfig+0x766>
 800bac0:	230a      	movs	r3, #10
 800bac2:	e008      	b.n	800bad6 <UART_SetConfig+0x766>
 800bac4:	2308      	movs	r3, #8
 800bac6:	e006      	b.n	800bad6 <UART_SetConfig+0x766>
 800bac8:	2306      	movs	r3, #6
 800baca:	e004      	b.n	800bad6 <UART_SetConfig+0x766>
 800bacc:	2304      	movs	r3, #4
 800bace:	e002      	b.n	800bad6 <UART_SetConfig+0x766>
 800bad0:	2302      	movs	r3, #2
 800bad2:	e000      	b.n	800bad6 <UART_SetConfig+0x766>
 800bad4:	2301      	movs	r3, #1
 800bad6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bada:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800badc:	e1c5      	b.n	800be6a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bade:	f107 030c 	add.w	r3, r7, #12
 800bae2:	4618      	mov	r0, r3
 800bae4:	f7fd fa80 	bl	8008fe8 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800bae8:	693a      	ldr	r2, [r7, #16]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d044      	beq.n	800bb7c <UART_SetConfig+0x80c>
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	d03e      	beq.n	800bb78 <UART_SetConfig+0x808>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bafe:	2b02      	cmp	r3, #2
 800bb00:	d038      	beq.n	800bb74 <UART_SetConfig+0x804>
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb06:	2b03      	cmp	r3, #3
 800bb08:	d032      	beq.n	800bb70 <UART_SetConfig+0x800>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb0e:	2b04      	cmp	r3, #4
 800bb10:	d02c      	beq.n	800bb6c <UART_SetConfig+0x7fc>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb16:	2b05      	cmp	r3, #5
 800bb18:	d026      	beq.n	800bb68 <UART_SetConfig+0x7f8>
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb1e:	2b06      	cmp	r3, #6
 800bb20:	d020      	beq.n	800bb64 <UART_SetConfig+0x7f4>
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb26:	2b07      	cmp	r3, #7
 800bb28:	d01a      	beq.n	800bb60 <UART_SetConfig+0x7f0>
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb2e:	2b08      	cmp	r3, #8
 800bb30:	d014      	beq.n	800bb5c <UART_SetConfig+0x7ec>
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb36:	2b09      	cmp	r3, #9
 800bb38:	d00e      	beq.n	800bb58 <UART_SetConfig+0x7e8>
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb3e:	2b0a      	cmp	r3, #10
 800bb40:	d008      	beq.n	800bb54 <UART_SetConfig+0x7e4>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb46:	2b0b      	cmp	r3, #11
 800bb48:	d102      	bne.n	800bb50 <UART_SetConfig+0x7e0>
 800bb4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb4e:	e016      	b.n	800bb7e <UART_SetConfig+0x80e>
 800bb50:	2301      	movs	r3, #1
 800bb52:	e014      	b.n	800bb7e <UART_SetConfig+0x80e>
 800bb54:	2380      	movs	r3, #128	; 0x80
 800bb56:	e012      	b.n	800bb7e <UART_SetConfig+0x80e>
 800bb58:	2340      	movs	r3, #64	; 0x40
 800bb5a:	e010      	b.n	800bb7e <UART_SetConfig+0x80e>
 800bb5c:	2320      	movs	r3, #32
 800bb5e:	e00e      	b.n	800bb7e <UART_SetConfig+0x80e>
 800bb60:	2310      	movs	r3, #16
 800bb62:	e00c      	b.n	800bb7e <UART_SetConfig+0x80e>
 800bb64:	230c      	movs	r3, #12
 800bb66:	e00a      	b.n	800bb7e <UART_SetConfig+0x80e>
 800bb68:	230a      	movs	r3, #10
 800bb6a:	e008      	b.n	800bb7e <UART_SetConfig+0x80e>
 800bb6c:	2308      	movs	r3, #8
 800bb6e:	e006      	b.n	800bb7e <UART_SetConfig+0x80e>
 800bb70:	2306      	movs	r3, #6
 800bb72:	e004      	b.n	800bb7e <UART_SetConfig+0x80e>
 800bb74:	2304      	movs	r3, #4
 800bb76:	e002      	b.n	800bb7e <UART_SetConfig+0x80e>
 800bb78:	2302      	movs	r3, #2
 800bb7a:	e000      	b.n	800bb7e <UART_SetConfig+0x80e>
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bb84:	e171      	b.n	800be6a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb86:	4b7a      	ldr	r3, [pc, #488]	; (800bd70 <UART_SetConfig+0xa00>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f003 0320 	and.w	r3, r3, #32
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d054      	beq.n	800bc3c <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800bb92:	4b77      	ldr	r3, [pc, #476]	; (800bd70 <UART_SetConfig+0xa00>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	08db      	lsrs	r3, r3, #3
 800bb98:	f003 0303 	and.w	r3, r3, #3
 800bb9c:	4a75      	ldr	r2, [pc, #468]	; (800bd74 <UART_SetConfig+0xa04>)
 800bb9e:	40da      	lsrs	r2, r3
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d044      	beq.n	800bc32 <UART_SetConfig+0x8c2>
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbac:	2b01      	cmp	r3, #1
 800bbae:	d03e      	beq.n	800bc2e <UART_SetConfig+0x8be>
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbb4:	2b02      	cmp	r3, #2
 800bbb6:	d038      	beq.n	800bc2a <UART_SetConfig+0x8ba>
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbbc:	2b03      	cmp	r3, #3
 800bbbe:	d032      	beq.n	800bc26 <UART_SetConfig+0x8b6>
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc4:	2b04      	cmp	r3, #4
 800bbc6:	d02c      	beq.n	800bc22 <UART_SetConfig+0x8b2>
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbcc:	2b05      	cmp	r3, #5
 800bbce:	d026      	beq.n	800bc1e <UART_SetConfig+0x8ae>
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbd4:	2b06      	cmp	r3, #6
 800bbd6:	d020      	beq.n	800bc1a <UART_SetConfig+0x8aa>
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbdc:	2b07      	cmp	r3, #7
 800bbde:	d01a      	beq.n	800bc16 <UART_SetConfig+0x8a6>
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbe4:	2b08      	cmp	r3, #8
 800bbe6:	d014      	beq.n	800bc12 <UART_SetConfig+0x8a2>
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbec:	2b09      	cmp	r3, #9
 800bbee:	d00e      	beq.n	800bc0e <UART_SetConfig+0x89e>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf4:	2b0a      	cmp	r3, #10
 800bbf6:	d008      	beq.n	800bc0a <UART_SetConfig+0x89a>
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbfc:	2b0b      	cmp	r3, #11
 800bbfe:	d102      	bne.n	800bc06 <UART_SetConfig+0x896>
 800bc00:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc04:	e016      	b.n	800bc34 <UART_SetConfig+0x8c4>
 800bc06:	2301      	movs	r3, #1
 800bc08:	e014      	b.n	800bc34 <UART_SetConfig+0x8c4>
 800bc0a:	2380      	movs	r3, #128	; 0x80
 800bc0c:	e012      	b.n	800bc34 <UART_SetConfig+0x8c4>
 800bc0e:	2340      	movs	r3, #64	; 0x40
 800bc10:	e010      	b.n	800bc34 <UART_SetConfig+0x8c4>
 800bc12:	2320      	movs	r3, #32
 800bc14:	e00e      	b.n	800bc34 <UART_SetConfig+0x8c4>
 800bc16:	2310      	movs	r3, #16
 800bc18:	e00c      	b.n	800bc34 <UART_SetConfig+0x8c4>
 800bc1a:	230c      	movs	r3, #12
 800bc1c:	e00a      	b.n	800bc34 <UART_SetConfig+0x8c4>
 800bc1e:	230a      	movs	r3, #10
 800bc20:	e008      	b.n	800bc34 <UART_SetConfig+0x8c4>
 800bc22:	2308      	movs	r3, #8
 800bc24:	e006      	b.n	800bc34 <UART_SetConfig+0x8c4>
 800bc26:	2306      	movs	r3, #6
 800bc28:	e004      	b.n	800bc34 <UART_SetConfig+0x8c4>
 800bc2a:	2304      	movs	r3, #4
 800bc2c:	e002      	b.n	800bc34 <UART_SetConfig+0x8c4>
 800bc2e:	2302      	movs	r3, #2
 800bc30:	e000      	b.n	800bc34 <UART_SetConfig+0x8c4>
 800bc32:	2301      	movs	r3, #1
 800bc34:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc38:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800bc3a:	e116      	b.n	800be6a <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d043      	beq.n	800bccc <UART_SetConfig+0x95c>
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc48:	2b01      	cmp	r3, #1
 800bc4a:	d03d      	beq.n	800bcc8 <UART_SetConfig+0x958>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc50:	2b02      	cmp	r3, #2
 800bc52:	d037      	beq.n	800bcc4 <UART_SetConfig+0x954>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc58:	2b03      	cmp	r3, #3
 800bc5a:	d031      	beq.n	800bcc0 <UART_SetConfig+0x950>
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc60:	2b04      	cmp	r3, #4
 800bc62:	d02b      	beq.n	800bcbc <UART_SetConfig+0x94c>
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc68:	2b05      	cmp	r3, #5
 800bc6a:	d025      	beq.n	800bcb8 <UART_SetConfig+0x948>
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc70:	2b06      	cmp	r3, #6
 800bc72:	d01f      	beq.n	800bcb4 <UART_SetConfig+0x944>
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc78:	2b07      	cmp	r3, #7
 800bc7a:	d019      	beq.n	800bcb0 <UART_SetConfig+0x940>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc80:	2b08      	cmp	r3, #8
 800bc82:	d013      	beq.n	800bcac <UART_SetConfig+0x93c>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc88:	2b09      	cmp	r3, #9
 800bc8a:	d00d      	beq.n	800bca8 <UART_SetConfig+0x938>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc90:	2b0a      	cmp	r3, #10
 800bc92:	d007      	beq.n	800bca4 <UART_SetConfig+0x934>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc98:	2b0b      	cmp	r3, #11
 800bc9a:	d101      	bne.n	800bca0 <UART_SetConfig+0x930>
 800bc9c:	4b36      	ldr	r3, [pc, #216]	; (800bd78 <UART_SetConfig+0xa08>)
 800bc9e:	e016      	b.n	800bcce <UART_SetConfig+0x95e>
 800bca0:	4b34      	ldr	r3, [pc, #208]	; (800bd74 <UART_SetConfig+0xa04>)
 800bca2:	e014      	b.n	800bcce <UART_SetConfig+0x95e>
 800bca4:	4b35      	ldr	r3, [pc, #212]	; (800bd7c <UART_SetConfig+0xa0c>)
 800bca6:	e012      	b.n	800bcce <UART_SetConfig+0x95e>
 800bca8:	4b35      	ldr	r3, [pc, #212]	; (800bd80 <UART_SetConfig+0xa10>)
 800bcaa:	e010      	b.n	800bcce <UART_SetConfig+0x95e>
 800bcac:	4b35      	ldr	r3, [pc, #212]	; (800bd84 <UART_SetConfig+0xa14>)
 800bcae:	e00e      	b.n	800bcce <UART_SetConfig+0x95e>
 800bcb0:	4b35      	ldr	r3, [pc, #212]	; (800bd88 <UART_SetConfig+0xa18>)
 800bcb2:	e00c      	b.n	800bcce <UART_SetConfig+0x95e>
 800bcb4:	4b35      	ldr	r3, [pc, #212]	; (800bd8c <UART_SetConfig+0xa1c>)
 800bcb6:	e00a      	b.n	800bcce <UART_SetConfig+0x95e>
 800bcb8:	4b35      	ldr	r3, [pc, #212]	; (800bd90 <UART_SetConfig+0xa20>)
 800bcba:	e008      	b.n	800bcce <UART_SetConfig+0x95e>
 800bcbc:	4b35      	ldr	r3, [pc, #212]	; (800bd94 <UART_SetConfig+0xa24>)
 800bcbe:	e006      	b.n	800bcce <UART_SetConfig+0x95e>
 800bcc0:	4b35      	ldr	r3, [pc, #212]	; (800bd98 <UART_SetConfig+0xa28>)
 800bcc2:	e004      	b.n	800bcce <UART_SetConfig+0x95e>
 800bcc4:	4b35      	ldr	r3, [pc, #212]	; (800bd9c <UART_SetConfig+0xa2c>)
 800bcc6:	e002      	b.n	800bcce <UART_SetConfig+0x95e>
 800bcc8:	4b35      	ldr	r3, [pc, #212]	; (800bda0 <UART_SetConfig+0xa30>)
 800bcca:	e000      	b.n	800bcce <UART_SetConfig+0x95e>
 800bccc:	4b29      	ldr	r3, [pc, #164]	; (800bd74 <UART_SetConfig+0xa04>)
 800bcce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bcd0:	e0cb      	b.n	800be6a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d046      	beq.n	800bd68 <UART_SetConfig+0x9f8>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcde:	2b01      	cmp	r3, #1
 800bce0:	d040      	beq.n	800bd64 <UART_SetConfig+0x9f4>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce6:	2b02      	cmp	r3, #2
 800bce8:	d03a      	beq.n	800bd60 <UART_SetConfig+0x9f0>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcee:	2b03      	cmp	r3, #3
 800bcf0:	d034      	beq.n	800bd5c <UART_SetConfig+0x9ec>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf6:	2b04      	cmp	r3, #4
 800bcf8:	d02e      	beq.n	800bd58 <UART_SetConfig+0x9e8>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcfe:	2b05      	cmp	r3, #5
 800bd00:	d028      	beq.n	800bd54 <UART_SetConfig+0x9e4>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd06:	2b06      	cmp	r3, #6
 800bd08:	d022      	beq.n	800bd50 <UART_SetConfig+0x9e0>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd0e:	2b07      	cmp	r3, #7
 800bd10:	d01c      	beq.n	800bd4c <UART_SetConfig+0x9dc>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd16:	2b08      	cmp	r3, #8
 800bd18:	d016      	beq.n	800bd48 <UART_SetConfig+0x9d8>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd1e:	2b09      	cmp	r3, #9
 800bd20:	d00f      	beq.n	800bd42 <UART_SetConfig+0x9d2>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd26:	2b0a      	cmp	r3, #10
 800bd28:	d008      	beq.n	800bd3c <UART_SetConfig+0x9cc>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd2e:	2b0b      	cmp	r3, #11
 800bd30:	d102      	bne.n	800bd38 <UART_SetConfig+0x9c8>
 800bd32:	f643 5309 	movw	r3, #15625	; 0x3d09
 800bd36:	e018      	b.n	800bd6a <UART_SetConfig+0x9fa>
 800bd38:	4b13      	ldr	r3, [pc, #76]	; (800bd88 <UART_SetConfig+0xa18>)
 800bd3a:	e016      	b.n	800bd6a <UART_SetConfig+0x9fa>
 800bd3c:	f647 2312 	movw	r3, #31250	; 0x7a12
 800bd40:	e013      	b.n	800bd6a <UART_SetConfig+0x9fa>
 800bd42:	f24f 4324 	movw	r3, #62500	; 0xf424
 800bd46:	e010      	b.n	800bd6a <UART_SetConfig+0x9fa>
 800bd48:	4b16      	ldr	r3, [pc, #88]	; (800bda4 <UART_SetConfig+0xa34>)
 800bd4a:	e00e      	b.n	800bd6a <UART_SetConfig+0x9fa>
 800bd4c:	4b0a      	ldr	r3, [pc, #40]	; (800bd78 <UART_SetConfig+0xa08>)
 800bd4e:	e00c      	b.n	800bd6a <UART_SetConfig+0x9fa>
 800bd50:	4b15      	ldr	r3, [pc, #84]	; (800bda8 <UART_SetConfig+0xa38>)
 800bd52:	e00a      	b.n	800bd6a <UART_SetConfig+0x9fa>
 800bd54:	4b15      	ldr	r3, [pc, #84]	; (800bdac <UART_SetConfig+0xa3c>)
 800bd56:	e008      	b.n	800bd6a <UART_SetConfig+0x9fa>
 800bd58:	4b08      	ldr	r3, [pc, #32]	; (800bd7c <UART_SetConfig+0xa0c>)
 800bd5a:	e006      	b.n	800bd6a <UART_SetConfig+0x9fa>
 800bd5c:	4b14      	ldr	r3, [pc, #80]	; (800bdb0 <UART_SetConfig+0xa40>)
 800bd5e:	e004      	b.n	800bd6a <UART_SetConfig+0x9fa>
 800bd60:	4b07      	ldr	r3, [pc, #28]	; (800bd80 <UART_SetConfig+0xa10>)
 800bd62:	e002      	b.n	800bd6a <UART_SetConfig+0x9fa>
 800bd64:	4b07      	ldr	r3, [pc, #28]	; (800bd84 <UART_SetConfig+0xa14>)
 800bd66:	e000      	b.n	800bd6a <UART_SetConfig+0x9fa>
 800bd68:	4b07      	ldr	r3, [pc, #28]	; (800bd88 <UART_SetConfig+0xa18>)
 800bd6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bd6c:	e07d      	b.n	800be6a <UART_SetConfig+0xafa>
 800bd6e:	bf00      	nop
 800bd70:	58024400 	.word	0x58024400
 800bd74:	03d09000 	.word	0x03d09000
 800bd78:	0003d090 	.word	0x0003d090
 800bd7c:	0007a120 	.word	0x0007a120
 800bd80:	000f4240 	.word	0x000f4240
 800bd84:	001e8480 	.word	0x001e8480
 800bd88:	003d0900 	.word	0x003d0900
 800bd8c:	00516155 	.word	0x00516155
 800bd90:	0061a800 	.word	0x0061a800
 800bd94:	007a1200 	.word	0x007a1200
 800bd98:	00a2c2aa 	.word	0x00a2c2aa
 800bd9c:	00f42400 	.word	0x00f42400
 800bda0:	01e84800 	.word	0x01e84800
 800bda4:	0001e848 	.word	0x0001e848
 800bda8:	00051615 	.word	0x00051615
 800bdac:	00061a80 	.word	0x00061a80
 800bdb0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d04e      	beq.n	800be5a <UART_SetConfig+0xaea>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdc0:	2b01      	cmp	r3, #1
 800bdc2:	d047      	beq.n	800be54 <UART_SetConfig+0xae4>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdc8:	2b02      	cmp	r3, #2
 800bdca:	d040      	beq.n	800be4e <UART_SetConfig+0xade>
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdd0:	2b03      	cmp	r3, #3
 800bdd2:	d039      	beq.n	800be48 <UART_SetConfig+0xad8>
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdd8:	2b04      	cmp	r3, #4
 800bdda:	d032      	beq.n	800be42 <UART_SetConfig+0xad2>
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bde0:	2b05      	cmp	r3, #5
 800bde2:	d02b      	beq.n	800be3c <UART_SetConfig+0xacc>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bde8:	2b06      	cmp	r3, #6
 800bdea:	d024      	beq.n	800be36 <UART_SetConfig+0xac6>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf0:	2b07      	cmp	r3, #7
 800bdf2:	d01d      	beq.n	800be30 <UART_SetConfig+0xac0>
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf8:	2b08      	cmp	r3, #8
 800bdfa:	d016      	beq.n	800be2a <UART_SetConfig+0xaba>
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be00:	2b09      	cmp	r3, #9
 800be02:	d00f      	beq.n	800be24 <UART_SetConfig+0xab4>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be08:	2b0a      	cmp	r3, #10
 800be0a:	d008      	beq.n	800be1e <UART_SetConfig+0xaae>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be10:	2b0b      	cmp	r3, #11
 800be12:	d101      	bne.n	800be18 <UART_SetConfig+0xaa8>
 800be14:	2380      	movs	r3, #128	; 0x80
 800be16:	e022      	b.n	800be5e <UART_SetConfig+0xaee>
 800be18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be1c:	e01f      	b.n	800be5e <UART_SetConfig+0xaee>
 800be1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be22:	e01c      	b.n	800be5e <UART_SetConfig+0xaee>
 800be24:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be28:	e019      	b.n	800be5e <UART_SetConfig+0xaee>
 800be2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be2e:	e016      	b.n	800be5e <UART_SetConfig+0xaee>
 800be30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800be34:	e013      	b.n	800be5e <UART_SetConfig+0xaee>
 800be36:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800be3a:	e010      	b.n	800be5e <UART_SetConfig+0xaee>
 800be3c:	f640 43cc 	movw	r3, #3276	; 0xccc
 800be40:	e00d      	b.n	800be5e <UART_SetConfig+0xaee>
 800be42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be46:	e00a      	b.n	800be5e <UART_SetConfig+0xaee>
 800be48:	f241 5355 	movw	r3, #5461	; 0x1555
 800be4c:	e007      	b.n	800be5e <UART_SetConfig+0xaee>
 800be4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800be52:	e004      	b.n	800be5e <UART_SetConfig+0xaee>
 800be54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800be58:	e001      	b.n	800be5e <UART_SetConfig+0xaee>
 800be5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800be60:	e003      	b.n	800be6a <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 800be62:	2301      	movs	r3, #1
 800be64:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800be68:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800be6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	f001 83e8 	beq.w	800d642 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	685a      	ldr	r2, [r3, #4]
 800be76:	4613      	mov	r3, r2
 800be78:	005b      	lsls	r3, r3, #1
 800be7a:	4413      	add	r3, r2
 800be7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be7e:	429a      	cmp	r2, r3
 800be80:	d305      	bcc.n	800be8e <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	685b      	ldr	r3, [r3, #4]
 800be86:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800be88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d904      	bls.n	800be98 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800be8e:	2301      	movs	r3, #1
 800be90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be94:	f001 bbd5 	b.w	800d642 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 800be98:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800be9c:	2b08      	cmp	r3, #8
 800be9e:	f000 8154 	beq.w	800c14a <UART_SetConfig+0xdda>
 800bea2:	2b08      	cmp	r3, #8
 800bea4:	dc06      	bgt.n	800beb4 <UART_SetConfig+0xb44>
 800bea6:	2b02      	cmp	r3, #2
 800bea8:	d00f      	beq.n	800beca <UART_SetConfig+0xb5a>
 800beaa:	2b04      	cmp	r3, #4
 800beac:	f000 80ac 	beq.w	800c008 <UART_SetConfig+0xc98>
 800beb0:	f000 bc30 	b.w	800c714 <UART_SetConfig+0x13a4>
 800beb4:	2b20      	cmp	r3, #32
 800beb6:	f000 832d 	beq.w	800c514 <UART_SetConfig+0x11a4>
 800beba:	2b40      	cmp	r3, #64	; 0x40
 800bebc:	f000 83a5 	beq.w	800c60a <UART_SetConfig+0x129a>
 800bec0:	2b10      	cmp	r3, #16
 800bec2:	f000 81e3 	beq.w	800c28c <UART_SetConfig+0xf1c>
 800bec6:	f000 bc25 	b.w	800c714 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800beca:	f7fc ff2b 	bl	8008d24 <HAL_RCCEx_GetD3PCLK1Freq>
 800bece:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed2:	4618      	mov	r0, r3
 800bed4:	f04f 0100 	mov.w	r1, #0
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d067      	beq.n	800bfb0 <UART_SetConfig+0xc40>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee4:	2b01      	cmp	r3, #1
 800bee6:	d05e      	beq.n	800bfa6 <UART_SetConfig+0xc36>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beec:	2b02      	cmp	r3, #2
 800beee:	d055      	beq.n	800bf9c <UART_SetConfig+0xc2c>
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bef4:	2b03      	cmp	r3, #3
 800bef6:	d04c      	beq.n	800bf92 <UART_SetConfig+0xc22>
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800befc:	2b04      	cmp	r3, #4
 800befe:	d043      	beq.n	800bf88 <UART_SetConfig+0xc18>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf04:	2b05      	cmp	r3, #5
 800bf06:	d03a      	beq.n	800bf7e <UART_SetConfig+0xc0e>
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf0c:	2b06      	cmp	r3, #6
 800bf0e:	d031      	beq.n	800bf74 <UART_SetConfig+0xc04>
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf14:	2b07      	cmp	r3, #7
 800bf16:	d028      	beq.n	800bf6a <UART_SetConfig+0xbfa>
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf1c:	2b08      	cmp	r3, #8
 800bf1e:	d01f      	beq.n	800bf60 <UART_SetConfig+0xbf0>
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf24:	2b09      	cmp	r3, #9
 800bf26:	d016      	beq.n	800bf56 <UART_SetConfig+0xbe6>
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf2c:	2b0a      	cmp	r3, #10
 800bf2e:	d00d      	beq.n	800bf4c <UART_SetConfig+0xbdc>
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf34:	2b0b      	cmp	r3, #11
 800bf36:	d104      	bne.n	800bf42 <UART_SetConfig+0xbd2>
 800bf38:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bf3c:	f04f 0400 	mov.w	r4, #0
 800bf40:	e03a      	b.n	800bfb8 <UART_SetConfig+0xc48>
 800bf42:	f04f 0301 	mov.w	r3, #1
 800bf46:	f04f 0400 	mov.w	r4, #0
 800bf4a:	e035      	b.n	800bfb8 <UART_SetConfig+0xc48>
 800bf4c:	f04f 0380 	mov.w	r3, #128	; 0x80
 800bf50:	f04f 0400 	mov.w	r4, #0
 800bf54:	e030      	b.n	800bfb8 <UART_SetConfig+0xc48>
 800bf56:	f04f 0340 	mov.w	r3, #64	; 0x40
 800bf5a:	f04f 0400 	mov.w	r4, #0
 800bf5e:	e02b      	b.n	800bfb8 <UART_SetConfig+0xc48>
 800bf60:	f04f 0320 	mov.w	r3, #32
 800bf64:	f04f 0400 	mov.w	r4, #0
 800bf68:	e026      	b.n	800bfb8 <UART_SetConfig+0xc48>
 800bf6a:	f04f 0310 	mov.w	r3, #16
 800bf6e:	f04f 0400 	mov.w	r4, #0
 800bf72:	e021      	b.n	800bfb8 <UART_SetConfig+0xc48>
 800bf74:	f04f 030c 	mov.w	r3, #12
 800bf78:	f04f 0400 	mov.w	r4, #0
 800bf7c:	e01c      	b.n	800bfb8 <UART_SetConfig+0xc48>
 800bf7e:	f04f 030a 	mov.w	r3, #10
 800bf82:	f04f 0400 	mov.w	r4, #0
 800bf86:	e017      	b.n	800bfb8 <UART_SetConfig+0xc48>
 800bf88:	f04f 0308 	mov.w	r3, #8
 800bf8c:	f04f 0400 	mov.w	r4, #0
 800bf90:	e012      	b.n	800bfb8 <UART_SetConfig+0xc48>
 800bf92:	f04f 0306 	mov.w	r3, #6
 800bf96:	f04f 0400 	mov.w	r4, #0
 800bf9a:	e00d      	b.n	800bfb8 <UART_SetConfig+0xc48>
 800bf9c:	f04f 0304 	mov.w	r3, #4
 800bfa0:	f04f 0400 	mov.w	r4, #0
 800bfa4:	e008      	b.n	800bfb8 <UART_SetConfig+0xc48>
 800bfa6:	f04f 0302 	mov.w	r3, #2
 800bfaa:	f04f 0400 	mov.w	r4, #0
 800bfae:	e003      	b.n	800bfb8 <UART_SetConfig+0xc48>
 800bfb0:	f04f 0301 	mov.w	r3, #1
 800bfb4:	f04f 0400 	mov.w	r4, #0
 800bfb8:	461a      	mov	r2, r3
 800bfba:	4623      	mov	r3, r4
 800bfbc:	f7f4 fb9c 	bl	80006f8 <__aeabi_uldivmod>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	460c      	mov	r4, r1
 800bfc4:	4619      	mov	r1, r3
 800bfc6:	4622      	mov	r2, r4
 800bfc8:	f04f 0300 	mov.w	r3, #0
 800bfcc:	f04f 0400 	mov.w	r4, #0
 800bfd0:	0214      	lsls	r4, r2, #8
 800bfd2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800bfd6:	020b      	lsls	r3, r1, #8
 800bfd8:	687a      	ldr	r2, [r7, #4]
 800bfda:	6852      	ldr	r2, [r2, #4]
 800bfdc:	0852      	lsrs	r2, r2, #1
 800bfde:	4611      	mov	r1, r2
 800bfe0:	f04f 0200 	mov.w	r2, #0
 800bfe4:	eb13 0b01 	adds.w	fp, r3, r1
 800bfe8:	eb44 0c02 	adc.w	ip, r4, r2
 800bfec:	4658      	mov	r0, fp
 800bfee:	4661      	mov	r1, ip
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	685b      	ldr	r3, [r3, #4]
 800bff4:	f04f 0400 	mov.w	r4, #0
 800bff8:	461a      	mov	r2, r3
 800bffa:	4623      	mov	r3, r4
 800bffc:	f7f4 fb7c 	bl	80006f8 <__aeabi_uldivmod>
 800c000:	4603      	mov	r3, r0
 800c002:	460c      	mov	r4, r1
 800c004:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c006:	e389      	b.n	800c71c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c008:	f107 0318 	add.w	r3, r7, #24
 800c00c:	4618      	mov	r0, r3
 800c00e:	f7fc fe9f 	bl	8008d50 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c012:	69fb      	ldr	r3, [r7, #28]
 800c014:	4618      	mov	r0, r3
 800c016:	f04f 0100 	mov.w	r1, #0
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d067      	beq.n	800c0f2 <UART_SetConfig+0xd82>
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c026:	2b01      	cmp	r3, #1
 800c028:	d05e      	beq.n	800c0e8 <UART_SetConfig+0xd78>
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c02e:	2b02      	cmp	r3, #2
 800c030:	d055      	beq.n	800c0de <UART_SetConfig+0xd6e>
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c036:	2b03      	cmp	r3, #3
 800c038:	d04c      	beq.n	800c0d4 <UART_SetConfig+0xd64>
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c03e:	2b04      	cmp	r3, #4
 800c040:	d043      	beq.n	800c0ca <UART_SetConfig+0xd5a>
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c046:	2b05      	cmp	r3, #5
 800c048:	d03a      	beq.n	800c0c0 <UART_SetConfig+0xd50>
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c04e:	2b06      	cmp	r3, #6
 800c050:	d031      	beq.n	800c0b6 <UART_SetConfig+0xd46>
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c056:	2b07      	cmp	r3, #7
 800c058:	d028      	beq.n	800c0ac <UART_SetConfig+0xd3c>
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c05e:	2b08      	cmp	r3, #8
 800c060:	d01f      	beq.n	800c0a2 <UART_SetConfig+0xd32>
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c066:	2b09      	cmp	r3, #9
 800c068:	d016      	beq.n	800c098 <UART_SetConfig+0xd28>
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c06e:	2b0a      	cmp	r3, #10
 800c070:	d00d      	beq.n	800c08e <UART_SetConfig+0xd1e>
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c076:	2b0b      	cmp	r3, #11
 800c078:	d104      	bne.n	800c084 <UART_SetConfig+0xd14>
 800c07a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c07e:	f04f 0400 	mov.w	r4, #0
 800c082:	e03a      	b.n	800c0fa <UART_SetConfig+0xd8a>
 800c084:	f04f 0301 	mov.w	r3, #1
 800c088:	f04f 0400 	mov.w	r4, #0
 800c08c:	e035      	b.n	800c0fa <UART_SetConfig+0xd8a>
 800c08e:	f04f 0380 	mov.w	r3, #128	; 0x80
 800c092:	f04f 0400 	mov.w	r4, #0
 800c096:	e030      	b.n	800c0fa <UART_SetConfig+0xd8a>
 800c098:	f04f 0340 	mov.w	r3, #64	; 0x40
 800c09c:	f04f 0400 	mov.w	r4, #0
 800c0a0:	e02b      	b.n	800c0fa <UART_SetConfig+0xd8a>
 800c0a2:	f04f 0320 	mov.w	r3, #32
 800c0a6:	f04f 0400 	mov.w	r4, #0
 800c0aa:	e026      	b.n	800c0fa <UART_SetConfig+0xd8a>
 800c0ac:	f04f 0310 	mov.w	r3, #16
 800c0b0:	f04f 0400 	mov.w	r4, #0
 800c0b4:	e021      	b.n	800c0fa <UART_SetConfig+0xd8a>
 800c0b6:	f04f 030c 	mov.w	r3, #12
 800c0ba:	f04f 0400 	mov.w	r4, #0
 800c0be:	e01c      	b.n	800c0fa <UART_SetConfig+0xd8a>
 800c0c0:	f04f 030a 	mov.w	r3, #10
 800c0c4:	f04f 0400 	mov.w	r4, #0
 800c0c8:	e017      	b.n	800c0fa <UART_SetConfig+0xd8a>
 800c0ca:	f04f 0308 	mov.w	r3, #8
 800c0ce:	f04f 0400 	mov.w	r4, #0
 800c0d2:	e012      	b.n	800c0fa <UART_SetConfig+0xd8a>
 800c0d4:	f04f 0306 	mov.w	r3, #6
 800c0d8:	f04f 0400 	mov.w	r4, #0
 800c0dc:	e00d      	b.n	800c0fa <UART_SetConfig+0xd8a>
 800c0de:	f04f 0304 	mov.w	r3, #4
 800c0e2:	f04f 0400 	mov.w	r4, #0
 800c0e6:	e008      	b.n	800c0fa <UART_SetConfig+0xd8a>
 800c0e8:	f04f 0302 	mov.w	r3, #2
 800c0ec:	f04f 0400 	mov.w	r4, #0
 800c0f0:	e003      	b.n	800c0fa <UART_SetConfig+0xd8a>
 800c0f2:	f04f 0301 	mov.w	r3, #1
 800c0f6:	f04f 0400 	mov.w	r4, #0
 800c0fa:	461a      	mov	r2, r3
 800c0fc:	4623      	mov	r3, r4
 800c0fe:	f7f4 fafb 	bl	80006f8 <__aeabi_uldivmod>
 800c102:	4603      	mov	r3, r0
 800c104:	460c      	mov	r4, r1
 800c106:	4619      	mov	r1, r3
 800c108:	4622      	mov	r2, r4
 800c10a:	f04f 0300 	mov.w	r3, #0
 800c10e:	f04f 0400 	mov.w	r4, #0
 800c112:	0214      	lsls	r4, r2, #8
 800c114:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800c118:	020b      	lsls	r3, r1, #8
 800c11a:	687a      	ldr	r2, [r7, #4]
 800c11c:	6852      	ldr	r2, [r2, #4]
 800c11e:	0852      	lsrs	r2, r2, #1
 800c120:	4611      	mov	r1, r2
 800c122:	f04f 0200 	mov.w	r2, #0
 800c126:	eb13 0b01 	adds.w	fp, r3, r1
 800c12a:	eb44 0c02 	adc.w	ip, r4, r2
 800c12e:	4658      	mov	r0, fp
 800c130:	4661      	mov	r1, ip
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	685b      	ldr	r3, [r3, #4]
 800c136:	f04f 0400 	mov.w	r4, #0
 800c13a:	461a      	mov	r2, r3
 800c13c:	4623      	mov	r3, r4
 800c13e:	f7f4 fadb 	bl	80006f8 <__aeabi_uldivmod>
 800c142:	4603      	mov	r3, r0
 800c144:	460c      	mov	r4, r1
 800c146:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c148:	e2e8      	b.n	800c71c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c14a:	f107 030c 	add.w	r3, r7, #12
 800c14e:	4618      	mov	r0, r3
 800c150:	f7fc ff4a 	bl	8008fe8 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c154:	693b      	ldr	r3, [r7, #16]
 800c156:	4618      	mov	r0, r3
 800c158:	f04f 0100 	mov.w	r1, #0
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c160:	2b00      	cmp	r3, #0
 800c162:	d067      	beq.n	800c234 <UART_SetConfig+0xec4>
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c168:	2b01      	cmp	r3, #1
 800c16a:	d05e      	beq.n	800c22a <UART_SetConfig+0xeba>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c170:	2b02      	cmp	r3, #2
 800c172:	d055      	beq.n	800c220 <UART_SetConfig+0xeb0>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c178:	2b03      	cmp	r3, #3
 800c17a:	d04c      	beq.n	800c216 <UART_SetConfig+0xea6>
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c180:	2b04      	cmp	r3, #4
 800c182:	d043      	beq.n	800c20c <UART_SetConfig+0xe9c>
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c188:	2b05      	cmp	r3, #5
 800c18a:	d03a      	beq.n	800c202 <UART_SetConfig+0xe92>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c190:	2b06      	cmp	r3, #6
 800c192:	d031      	beq.n	800c1f8 <UART_SetConfig+0xe88>
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c198:	2b07      	cmp	r3, #7
 800c19a:	d028      	beq.n	800c1ee <UART_SetConfig+0xe7e>
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1a0:	2b08      	cmp	r3, #8
 800c1a2:	d01f      	beq.n	800c1e4 <UART_SetConfig+0xe74>
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1a8:	2b09      	cmp	r3, #9
 800c1aa:	d016      	beq.n	800c1da <UART_SetConfig+0xe6a>
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1b0:	2b0a      	cmp	r3, #10
 800c1b2:	d00d      	beq.n	800c1d0 <UART_SetConfig+0xe60>
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1b8:	2b0b      	cmp	r3, #11
 800c1ba:	d104      	bne.n	800c1c6 <UART_SetConfig+0xe56>
 800c1bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c1c0:	f04f 0400 	mov.w	r4, #0
 800c1c4:	e03a      	b.n	800c23c <UART_SetConfig+0xecc>
 800c1c6:	f04f 0301 	mov.w	r3, #1
 800c1ca:	f04f 0400 	mov.w	r4, #0
 800c1ce:	e035      	b.n	800c23c <UART_SetConfig+0xecc>
 800c1d0:	f04f 0380 	mov.w	r3, #128	; 0x80
 800c1d4:	f04f 0400 	mov.w	r4, #0
 800c1d8:	e030      	b.n	800c23c <UART_SetConfig+0xecc>
 800c1da:	f04f 0340 	mov.w	r3, #64	; 0x40
 800c1de:	f04f 0400 	mov.w	r4, #0
 800c1e2:	e02b      	b.n	800c23c <UART_SetConfig+0xecc>
 800c1e4:	f04f 0320 	mov.w	r3, #32
 800c1e8:	f04f 0400 	mov.w	r4, #0
 800c1ec:	e026      	b.n	800c23c <UART_SetConfig+0xecc>
 800c1ee:	f04f 0310 	mov.w	r3, #16
 800c1f2:	f04f 0400 	mov.w	r4, #0
 800c1f6:	e021      	b.n	800c23c <UART_SetConfig+0xecc>
 800c1f8:	f04f 030c 	mov.w	r3, #12
 800c1fc:	f04f 0400 	mov.w	r4, #0
 800c200:	e01c      	b.n	800c23c <UART_SetConfig+0xecc>
 800c202:	f04f 030a 	mov.w	r3, #10
 800c206:	f04f 0400 	mov.w	r4, #0
 800c20a:	e017      	b.n	800c23c <UART_SetConfig+0xecc>
 800c20c:	f04f 0308 	mov.w	r3, #8
 800c210:	f04f 0400 	mov.w	r4, #0
 800c214:	e012      	b.n	800c23c <UART_SetConfig+0xecc>
 800c216:	f04f 0306 	mov.w	r3, #6
 800c21a:	f04f 0400 	mov.w	r4, #0
 800c21e:	e00d      	b.n	800c23c <UART_SetConfig+0xecc>
 800c220:	f04f 0304 	mov.w	r3, #4
 800c224:	f04f 0400 	mov.w	r4, #0
 800c228:	e008      	b.n	800c23c <UART_SetConfig+0xecc>
 800c22a:	f04f 0302 	mov.w	r3, #2
 800c22e:	f04f 0400 	mov.w	r4, #0
 800c232:	e003      	b.n	800c23c <UART_SetConfig+0xecc>
 800c234:	f04f 0301 	mov.w	r3, #1
 800c238:	f04f 0400 	mov.w	r4, #0
 800c23c:	461a      	mov	r2, r3
 800c23e:	4623      	mov	r3, r4
 800c240:	f7f4 fa5a 	bl	80006f8 <__aeabi_uldivmod>
 800c244:	4603      	mov	r3, r0
 800c246:	460c      	mov	r4, r1
 800c248:	4619      	mov	r1, r3
 800c24a:	4622      	mov	r2, r4
 800c24c:	f04f 0300 	mov.w	r3, #0
 800c250:	f04f 0400 	mov.w	r4, #0
 800c254:	0214      	lsls	r4, r2, #8
 800c256:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800c25a:	020b      	lsls	r3, r1, #8
 800c25c:	687a      	ldr	r2, [r7, #4]
 800c25e:	6852      	ldr	r2, [r2, #4]
 800c260:	0852      	lsrs	r2, r2, #1
 800c262:	4611      	mov	r1, r2
 800c264:	f04f 0200 	mov.w	r2, #0
 800c268:	eb13 0b01 	adds.w	fp, r3, r1
 800c26c:	eb44 0c02 	adc.w	ip, r4, r2
 800c270:	4658      	mov	r0, fp
 800c272:	4661      	mov	r1, ip
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	685b      	ldr	r3, [r3, #4]
 800c278:	f04f 0400 	mov.w	r4, #0
 800c27c:	461a      	mov	r2, r3
 800c27e:	4623      	mov	r3, r4
 800c280:	f7f4 fa3a 	bl	80006f8 <__aeabi_uldivmod>
 800c284:	4603      	mov	r3, r0
 800c286:	460c      	mov	r4, r1
 800c288:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c28a:	e247      	b.n	800c71c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c28c:	4b96      	ldr	r3, [pc, #600]	; (800c4e8 <UART_SetConfig+0x1178>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	f003 0320 	and.w	r3, r3, #32
 800c294:	2b00      	cmp	r3, #0
 800c296:	f000 80a3 	beq.w	800c3e0 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c29a:	4b93      	ldr	r3, [pc, #588]	; (800c4e8 <UART_SetConfig+0x1178>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	08db      	lsrs	r3, r3, #3
 800c2a0:	f003 0303 	and.w	r3, r3, #3
 800c2a4:	4a91      	ldr	r2, [pc, #580]	; (800c4ec <UART_SetConfig+0x117c>)
 800c2a6:	fa22 f303 	lsr.w	r3, r2, r3
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f04f 0100 	mov.w	r1, #0
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d067      	beq.n	800c388 <UART_SetConfig+0x1018>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2bc:	2b01      	cmp	r3, #1
 800c2be:	d05e      	beq.n	800c37e <UART_SetConfig+0x100e>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2c4:	2b02      	cmp	r3, #2
 800c2c6:	d055      	beq.n	800c374 <UART_SetConfig+0x1004>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2cc:	2b03      	cmp	r3, #3
 800c2ce:	d04c      	beq.n	800c36a <UART_SetConfig+0xffa>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2d4:	2b04      	cmp	r3, #4
 800c2d6:	d043      	beq.n	800c360 <UART_SetConfig+0xff0>
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2dc:	2b05      	cmp	r3, #5
 800c2de:	d03a      	beq.n	800c356 <UART_SetConfig+0xfe6>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2e4:	2b06      	cmp	r3, #6
 800c2e6:	d031      	beq.n	800c34c <UART_SetConfig+0xfdc>
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2ec:	2b07      	cmp	r3, #7
 800c2ee:	d028      	beq.n	800c342 <UART_SetConfig+0xfd2>
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2f4:	2b08      	cmp	r3, #8
 800c2f6:	d01f      	beq.n	800c338 <UART_SetConfig+0xfc8>
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2fc:	2b09      	cmp	r3, #9
 800c2fe:	d016      	beq.n	800c32e <UART_SetConfig+0xfbe>
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c304:	2b0a      	cmp	r3, #10
 800c306:	d00d      	beq.n	800c324 <UART_SetConfig+0xfb4>
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c30c:	2b0b      	cmp	r3, #11
 800c30e:	d104      	bne.n	800c31a <UART_SetConfig+0xfaa>
 800c310:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c314:	f04f 0400 	mov.w	r4, #0
 800c318:	e03a      	b.n	800c390 <UART_SetConfig+0x1020>
 800c31a:	f04f 0301 	mov.w	r3, #1
 800c31e:	f04f 0400 	mov.w	r4, #0
 800c322:	e035      	b.n	800c390 <UART_SetConfig+0x1020>
 800c324:	f04f 0380 	mov.w	r3, #128	; 0x80
 800c328:	f04f 0400 	mov.w	r4, #0
 800c32c:	e030      	b.n	800c390 <UART_SetConfig+0x1020>
 800c32e:	f04f 0340 	mov.w	r3, #64	; 0x40
 800c332:	f04f 0400 	mov.w	r4, #0
 800c336:	e02b      	b.n	800c390 <UART_SetConfig+0x1020>
 800c338:	f04f 0320 	mov.w	r3, #32
 800c33c:	f04f 0400 	mov.w	r4, #0
 800c340:	e026      	b.n	800c390 <UART_SetConfig+0x1020>
 800c342:	f04f 0310 	mov.w	r3, #16
 800c346:	f04f 0400 	mov.w	r4, #0
 800c34a:	e021      	b.n	800c390 <UART_SetConfig+0x1020>
 800c34c:	f04f 030c 	mov.w	r3, #12
 800c350:	f04f 0400 	mov.w	r4, #0
 800c354:	e01c      	b.n	800c390 <UART_SetConfig+0x1020>
 800c356:	f04f 030a 	mov.w	r3, #10
 800c35a:	f04f 0400 	mov.w	r4, #0
 800c35e:	e017      	b.n	800c390 <UART_SetConfig+0x1020>
 800c360:	f04f 0308 	mov.w	r3, #8
 800c364:	f04f 0400 	mov.w	r4, #0
 800c368:	e012      	b.n	800c390 <UART_SetConfig+0x1020>
 800c36a:	f04f 0306 	mov.w	r3, #6
 800c36e:	f04f 0400 	mov.w	r4, #0
 800c372:	e00d      	b.n	800c390 <UART_SetConfig+0x1020>
 800c374:	f04f 0304 	mov.w	r3, #4
 800c378:	f04f 0400 	mov.w	r4, #0
 800c37c:	e008      	b.n	800c390 <UART_SetConfig+0x1020>
 800c37e:	f04f 0302 	mov.w	r3, #2
 800c382:	f04f 0400 	mov.w	r4, #0
 800c386:	e003      	b.n	800c390 <UART_SetConfig+0x1020>
 800c388:	f04f 0301 	mov.w	r3, #1
 800c38c:	f04f 0400 	mov.w	r4, #0
 800c390:	461a      	mov	r2, r3
 800c392:	4623      	mov	r3, r4
 800c394:	f7f4 f9b0 	bl	80006f8 <__aeabi_uldivmod>
 800c398:	4603      	mov	r3, r0
 800c39a:	460c      	mov	r4, r1
 800c39c:	4619      	mov	r1, r3
 800c39e:	4622      	mov	r2, r4
 800c3a0:	f04f 0300 	mov.w	r3, #0
 800c3a4:	f04f 0400 	mov.w	r4, #0
 800c3a8:	0214      	lsls	r4, r2, #8
 800c3aa:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800c3ae:	020b      	lsls	r3, r1, #8
 800c3b0:	687a      	ldr	r2, [r7, #4]
 800c3b2:	6852      	ldr	r2, [r2, #4]
 800c3b4:	0852      	lsrs	r2, r2, #1
 800c3b6:	4611      	mov	r1, r2
 800c3b8:	f04f 0200 	mov.w	r2, #0
 800c3bc:	eb13 0b01 	adds.w	fp, r3, r1
 800c3c0:	eb44 0c02 	adc.w	ip, r4, r2
 800c3c4:	4658      	mov	r0, fp
 800c3c6:	4661      	mov	r1, ip
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	685b      	ldr	r3, [r3, #4]
 800c3cc:	f04f 0400 	mov.w	r4, #0
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	4623      	mov	r3, r4
 800c3d4:	f7f4 f990 	bl	80006f8 <__aeabi_uldivmod>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	460c      	mov	r4, r1
 800c3dc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800c3de:	e19d      	b.n	800c71c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d05b      	beq.n	800c4a0 <UART_SetConfig+0x1130>
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ec:	2b01      	cmp	r3, #1
 800c3ee:	d053      	beq.n	800c498 <UART_SetConfig+0x1128>
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3f4:	2b02      	cmp	r3, #2
 800c3f6:	d04b      	beq.n	800c490 <UART_SetConfig+0x1120>
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3fc:	2b03      	cmp	r3, #3
 800c3fe:	d043      	beq.n	800c488 <UART_SetConfig+0x1118>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c404:	2b04      	cmp	r3, #4
 800c406:	d03b      	beq.n	800c480 <UART_SetConfig+0x1110>
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c40c:	2b05      	cmp	r3, #5
 800c40e:	d033      	beq.n	800c478 <UART_SetConfig+0x1108>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c414:	2b06      	cmp	r3, #6
 800c416:	d02b      	beq.n	800c470 <UART_SetConfig+0x1100>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c41c:	2b07      	cmp	r3, #7
 800c41e:	d023      	beq.n	800c468 <UART_SetConfig+0x10f8>
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c424:	2b08      	cmp	r3, #8
 800c426:	d01b      	beq.n	800c460 <UART_SetConfig+0x10f0>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c42c:	2b09      	cmp	r3, #9
 800c42e:	d013      	beq.n	800c458 <UART_SetConfig+0x10e8>
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c434:	2b0a      	cmp	r3, #10
 800c436:	d00b      	beq.n	800c450 <UART_SetConfig+0x10e0>
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c43c:	2b0b      	cmp	r3, #11
 800c43e:	d103      	bne.n	800c448 <UART_SetConfig+0x10d8>
 800c440:	4b2a      	ldr	r3, [pc, #168]	; (800c4ec <UART_SetConfig+0x117c>)
 800c442:	f04f 0400 	mov.w	r4, #0
 800c446:	e02e      	b.n	800c4a6 <UART_SetConfig+0x1136>
 800c448:	4b29      	ldr	r3, [pc, #164]	; (800c4f0 <UART_SetConfig+0x1180>)
 800c44a:	f04f 0403 	mov.w	r4, #3
 800c44e:	e02a      	b.n	800c4a6 <UART_SetConfig+0x1136>
 800c450:	4b28      	ldr	r3, [pc, #160]	; (800c4f4 <UART_SetConfig+0x1184>)
 800c452:	f04f 0400 	mov.w	r4, #0
 800c456:	e026      	b.n	800c4a6 <UART_SetConfig+0x1136>
 800c458:	4b27      	ldr	r3, [pc, #156]	; (800c4f8 <UART_SetConfig+0x1188>)
 800c45a:	f04f 0400 	mov.w	r4, #0
 800c45e:	e022      	b.n	800c4a6 <UART_SetConfig+0x1136>
 800c460:	4b26      	ldr	r3, [pc, #152]	; (800c4fc <UART_SetConfig+0x118c>)
 800c462:	f04f 0400 	mov.w	r4, #0
 800c466:	e01e      	b.n	800c4a6 <UART_SetConfig+0x1136>
 800c468:	4b25      	ldr	r3, [pc, #148]	; (800c500 <UART_SetConfig+0x1190>)
 800c46a:	f04f 0400 	mov.w	r4, #0
 800c46e:	e01a      	b.n	800c4a6 <UART_SetConfig+0x1136>
 800c470:	a419      	add	r4, pc, #100	; (adr r4, 800c4d8 <UART_SetConfig+0x1168>)
 800c472:	e9d4 3400 	ldrd	r3, r4, [r4]
 800c476:	e016      	b.n	800c4a6 <UART_SetConfig+0x1136>
 800c478:	4b22      	ldr	r3, [pc, #136]	; (800c504 <UART_SetConfig+0x1194>)
 800c47a:	f04f 0400 	mov.w	r4, #0
 800c47e:	e012      	b.n	800c4a6 <UART_SetConfig+0x1136>
 800c480:	4b21      	ldr	r3, [pc, #132]	; (800c508 <UART_SetConfig+0x1198>)
 800c482:	f04f 0400 	mov.w	r4, #0
 800c486:	e00e      	b.n	800c4a6 <UART_SetConfig+0x1136>
 800c488:	a415      	add	r4, pc, #84	; (adr r4, 800c4e0 <UART_SetConfig+0x1170>)
 800c48a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800c48e:	e00a      	b.n	800c4a6 <UART_SetConfig+0x1136>
 800c490:	4b1e      	ldr	r3, [pc, #120]	; (800c50c <UART_SetConfig+0x119c>)
 800c492:	f04f 0400 	mov.w	r4, #0
 800c496:	e006      	b.n	800c4a6 <UART_SetConfig+0x1136>
 800c498:	4b1d      	ldr	r3, [pc, #116]	; (800c510 <UART_SetConfig+0x11a0>)
 800c49a:	f04f 0401 	mov.w	r4, #1
 800c49e:	e002      	b.n	800c4a6 <UART_SetConfig+0x1136>
 800c4a0:	4b13      	ldr	r3, [pc, #76]	; (800c4f0 <UART_SetConfig+0x1180>)
 800c4a2:	f04f 0403 	mov.w	r4, #3
 800c4a6:	687a      	ldr	r2, [r7, #4]
 800c4a8:	6852      	ldr	r2, [r2, #4]
 800c4aa:	0852      	lsrs	r2, r2, #1
 800c4ac:	4611      	mov	r1, r2
 800c4ae:	f04f 0200 	mov.w	r2, #0
 800c4b2:	eb13 0b01 	adds.w	fp, r3, r1
 800c4b6:	eb44 0c02 	adc.w	ip, r4, r2
 800c4ba:	4658      	mov	r0, fp
 800c4bc:	4661      	mov	r1, ip
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	685b      	ldr	r3, [r3, #4]
 800c4c2:	f04f 0400 	mov.w	r4, #0
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	4623      	mov	r3, r4
 800c4ca:	f7f4 f915 	bl	80006f8 <__aeabi_uldivmod>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	460c      	mov	r4, r1
 800c4d2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c4d4:	e122      	b.n	800c71c <UART_SetConfig+0x13ac>
 800c4d6:	bf00      	nop
 800c4d8:	51615500 	.word	0x51615500
 800c4dc:	00000000 	.word	0x00000000
 800c4e0:	a2c2aa00 	.word	0xa2c2aa00
 800c4e4:	00000000 	.word	0x00000000
 800c4e8:	58024400 	.word	0x58024400
 800c4ec:	03d09000 	.word	0x03d09000
 800c4f0:	d0900000 	.word	0xd0900000
 800c4f4:	07a12000 	.word	0x07a12000
 800c4f8:	0f424000 	.word	0x0f424000
 800c4fc:	1e848000 	.word	0x1e848000
 800c500:	3d090000 	.word	0x3d090000
 800c504:	61a80000 	.word	0x61a80000
 800c508:	7a120000 	.word	0x7a120000
 800c50c:	f4240000 	.word	0xf4240000
 800c510:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d05b      	beq.n	800c5d4 <UART_SetConfig+0x1264>
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c520:	2b01      	cmp	r3, #1
 800c522:	d053      	beq.n	800c5cc <UART_SetConfig+0x125c>
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c528:	2b02      	cmp	r3, #2
 800c52a:	d04b      	beq.n	800c5c4 <UART_SetConfig+0x1254>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c530:	2b03      	cmp	r3, #3
 800c532:	d043      	beq.n	800c5bc <UART_SetConfig+0x124c>
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c538:	2b04      	cmp	r3, #4
 800c53a:	d03b      	beq.n	800c5b4 <UART_SetConfig+0x1244>
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c540:	2b05      	cmp	r3, #5
 800c542:	d033      	beq.n	800c5ac <UART_SetConfig+0x123c>
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c548:	2b06      	cmp	r3, #6
 800c54a:	d02b      	beq.n	800c5a4 <UART_SetConfig+0x1234>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c550:	2b07      	cmp	r3, #7
 800c552:	d023      	beq.n	800c59c <UART_SetConfig+0x122c>
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c558:	2b08      	cmp	r3, #8
 800c55a:	d01b      	beq.n	800c594 <UART_SetConfig+0x1224>
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c560:	2b09      	cmp	r3, #9
 800c562:	d013      	beq.n	800c58c <UART_SetConfig+0x121c>
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c568:	2b0a      	cmp	r3, #10
 800c56a:	d00b      	beq.n	800c584 <UART_SetConfig+0x1214>
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c570:	2b0b      	cmp	r3, #11
 800c572:	d103      	bne.n	800c57c <UART_SetConfig+0x120c>
 800c574:	4bc0      	ldr	r3, [pc, #768]	; (800c878 <UART_SetConfig+0x1508>)
 800c576:	f04f 0400 	mov.w	r4, #0
 800c57a:	e02e      	b.n	800c5da <UART_SetConfig+0x126a>
 800c57c:	4bbf      	ldr	r3, [pc, #764]	; (800c87c <UART_SetConfig+0x150c>)
 800c57e:	f04f 0400 	mov.w	r4, #0
 800c582:	e02a      	b.n	800c5da <UART_SetConfig+0x126a>
 800c584:	4bbe      	ldr	r3, [pc, #760]	; (800c880 <UART_SetConfig+0x1510>)
 800c586:	f04f 0400 	mov.w	r4, #0
 800c58a:	e026      	b.n	800c5da <UART_SetConfig+0x126a>
 800c58c:	4bbd      	ldr	r3, [pc, #756]	; (800c884 <UART_SetConfig+0x1514>)
 800c58e:	f04f 0400 	mov.w	r4, #0
 800c592:	e022      	b.n	800c5da <UART_SetConfig+0x126a>
 800c594:	4bbc      	ldr	r3, [pc, #752]	; (800c888 <UART_SetConfig+0x1518>)
 800c596:	f04f 0400 	mov.w	r4, #0
 800c59a:	e01e      	b.n	800c5da <UART_SetConfig+0x126a>
 800c59c:	4bbb      	ldr	r3, [pc, #748]	; (800c88c <UART_SetConfig+0x151c>)
 800c59e:	f04f 0400 	mov.w	r4, #0
 800c5a2:	e01a      	b.n	800c5da <UART_SetConfig+0x126a>
 800c5a4:	a4b0      	add	r4, pc, #704	; (adr r4, 800c868 <UART_SetConfig+0x14f8>)
 800c5a6:	e9d4 3400 	ldrd	r3, r4, [r4]
 800c5aa:	e016      	b.n	800c5da <UART_SetConfig+0x126a>
 800c5ac:	4bb8      	ldr	r3, [pc, #736]	; (800c890 <UART_SetConfig+0x1520>)
 800c5ae:	f04f 0400 	mov.w	r4, #0
 800c5b2:	e012      	b.n	800c5da <UART_SetConfig+0x126a>
 800c5b4:	4bb7      	ldr	r3, [pc, #732]	; (800c894 <UART_SetConfig+0x1524>)
 800c5b6:	f04f 0400 	mov.w	r4, #0
 800c5ba:	e00e      	b.n	800c5da <UART_SetConfig+0x126a>
 800c5bc:	a4ac      	add	r4, pc, #688	; (adr r4, 800c870 <UART_SetConfig+0x1500>)
 800c5be:	e9d4 3400 	ldrd	r3, r4, [r4]
 800c5c2:	e00a      	b.n	800c5da <UART_SetConfig+0x126a>
 800c5c4:	4bb4      	ldr	r3, [pc, #720]	; (800c898 <UART_SetConfig+0x1528>)
 800c5c6:	f04f 0400 	mov.w	r4, #0
 800c5ca:	e006      	b.n	800c5da <UART_SetConfig+0x126a>
 800c5cc:	4bb3      	ldr	r3, [pc, #716]	; (800c89c <UART_SetConfig+0x152c>)
 800c5ce:	f04f 0400 	mov.w	r4, #0
 800c5d2:	e002      	b.n	800c5da <UART_SetConfig+0x126a>
 800c5d4:	4ba9      	ldr	r3, [pc, #676]	; (800c87c <UART_SetConfig+0x150c>)
 800c5d6:	f04f 0400 	mov.w	r4, #0
 800c5da:	687a      	ldr	r2, [r7, #4]
 800c5dc:	6852      	ldr	r2, [r2, #4]
 800c5de:	0852      	lsrs	r2, r2, #1
 800c5e0:	4611      	mov	r1, r2
 800c5e2:	f04f 0200 	mov.w	r2, #0
 800c5e6:	eb13 0b01 	adds.w	fp, r3, r1
 800c5ea:	eb44 0c02 	adc.w	ip, r4, r2
 800c5ee:	4658      	mov	r0, fp
 800c5f0:	4661      	mov	r1, ip
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	685b      	ldr	r3, [r3, #4]
 800c5f6:	f04f 0400 	mov.w	r4, #0
 800c5fa:	461a      	mov	r2, r3
 800c5fc:	4623      	mov	r3, r4
 800c5fe:	f7f4 f87b 	bl	80006f8 <__aeabi_uldivmod>
 800c602:	4603      	mov	r3, r0
 800c604:	460c      	mov	r4, r1
 800c606:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c608:	e088      	b.n	800c71c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d064      	beq.n	800c6dc <UART_SetConfig+0x136c>
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c616:	2b01      	cmp	r3, #1
 800c618:	d05b      	beq.n	800c6d2 <UART_SetConfig+0x1362>
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c61e:	2b02      	cmp	r3, #2
 800c620:	d052      	beq.n	800c6c8 <UART_SetConfig+0x1358>
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c626:	2b03      	cmp	r3, #3
 800c628:	d04a      	beq.n	800c6c0 <UART_SetConfig+0x1350>
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c62e:	2b04      	cmp	r3, #4
 800c630:	d041      	beq.n	800c6b6 <UART_SetConfig+0x1346>
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c636:	2b05      	cmp	r3, #5
 800c638:	d039      	beq.n	800c6ae <UART_SetConfig+0x133e>
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c63e:	2b06      	cmp	r3, #6
 800c640:	d031      	beq.n	800c6a6 <UART_SetConfig+0x1336>
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c646:	2b07      	cmp	r3, #7
 800c648:	d028      	beq.n	800c69c <UART_SetConfig+0x132c>
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c64e:	2b08      	cmp	r3, #8
 800c650:	d01f      	beq.n	800c692 <UART_SetConfig+0x1322>
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c656:	2b09      	cmp	r3, #9
 800c658:	d016      	beq.n	800c688 <UART_SetConfig+0x1318>
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c65e:	2b0a      	cmp	r3, #10
 800c660:	d00d      	beq.n	800c67e <UART_SetConfig+0x130e>
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c666:	2b0b      	cmp	r3, #11
 800c668:	d104      	bne.n	800c674 <UART_SetConfig+0x1304>
 800c66a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c66e:	f04f 0400 	mov.w	r4, #0
 800c672:	e037      	b.n	800c6e4 <UART_SetConfig+0x1374>
 800c674:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c678:	f04f 0400 	mov.w	r4, #0
 800c67c:	e032      	b.n	800c6e4 <UART_SetConfig+0x1374>
 800c67e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c682:	f04f 0400 	mov.w	r4, #0
 800c686:	e02d      	b.n	800c6e4 <UART_SetConfig+0x1374>
 800c688:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c68c:	f04f 0400 	mov.w	r4, #0
 800c690:	e028      	b.n	800c6e4 <UART_SetConfig+0x1374>
 800c692:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c696:	f04f 0400 	mov.w	r4, #0
 800c69a:	e023      	b.n	800c6e4 <UART_SetConfig+0x1374>
 800c69c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c6a0:	f04f 0400 	mov.w	r4, #0
 800c6a4:	e01e      	b.n	800c6e4 <UART_SetConfig+0x1374>
 800c6a6:	4b7e      	ldr	r3, [pc, #504]	; (800c8a0 <UART_SetConfig+0x1530>)
 800c6a8:	f04f 0400 	mov.w	r4, #0
 800c6ac:	e01a      	b.n	800c6e4 <UART_SetConfig+0x1374>
 800c6ae:	4b7d      	ldr	r3, [pc, #500]	; (800c8a4 <UART_SetConfig+0x1534>)
 800c6b0:	f04f 0400 	mov.w	r4, #0
 800c6b4:	e016      	b.n	800c6e4 <UART_SetConfig+0x1374>
 800c6b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c6ba:	f04f 0400 	mov.w	r4, #0
 800c6be:	e011      	b.n	800c6e4 <UART_SetConfig+0x1374>
 800c6c0:	4b79      	ldr	r3, [pc, #484]	; (800c8a8 <UART_SetConfig+0x1538>)
 800c6c2:	f04f 0400 	mov.w	r4, #0
 800c6c6:	e00d      	b.n	800c6e4 <UART_SetConfig+0x1374>
 800c6c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c6cc:	f04f 0400 	mov.w	r4, #0
 800c6d0:	e008      	b.n	800c6e4 <UART_SetConfig+0x1374>
 800c6d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c6d6:	f04f 0400 	mov.w	r4, #0
 800c6da:	e003      	b.n	800c6e4 <UART_SetConfig+0x1374>
 800c6dc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c6e0:	f04f 0400 	mov.w	r4, #0
 800c6e4:	687a      	ldr	r2, [r7, #4]
 800c6e6:	6852      	ldr	r2, [r2, #4]
 800c6e8:	0852      	lsrs	r2, r2, #1
 800c6ea:	4611      	mov	r1, r2
 800c6ec:	f04f 0200 	mov.w	r2, #0
 800c6f0:	eb13 0b01 	adds.w	fp, r3, r1
 800c6f4:	eb44 0c02 	adc.w	ip, r4, r2
 800c6f8:	4658      	mov	r0, fp
 800c6fa:	4661      	mov	r1, ip
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	685b      	ldr	r3, [r3, #4]
 800c700:	f04f 0400 	mov.w	r4, #0
 800c704:	461a      	mov	r2, r3
 800c706:	4623      	mov	r3, r4
 800c708:	f7f3 fff6 	bl	80006f8 <__aeabi_uldivmod>
 800c70c:	4603      	mov	r3, r0
 800c70e:	460c      	mov	r4, r1
 800c710:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c712:	e003      	b.n	800c71c <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800c714:	2301      	movs	r3, #1
 800c716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800c71a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c71c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c71e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c722:	d309      	bcc.n	800c738 <UART_SetConfig+0x13c8>
 800c724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c726:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c72a:	d205      	bcs.n	800c738 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c732:	60da      	str	r2, [r3, #12]
 800c734:	f000 bf85 	b.w	800d642 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 800c738:	2301      	movs	r3, #1
 800c73a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c73e:	f000 bf80 	b.w	800d642 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	69db      	ldr	r3, [r3, #28]
 800c746:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c74a:	f040 83da 	bne.w	800cf02 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800c74e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c752:	2b40      	cmp	r3, #64	; 0x40
 800c754:	f200 83b3 	bhi.w	800cebe <UART_SetConfig+0x1b4e>
 800c758:	a201      	add	r2, pc, #4	; (adr r2, 800c760 <UART_SetConfig+0x13f0>)
 800c75a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c75e:	bf00      	nop
 800c760:	0800c8ad 	.word	0x0800c8ad
 800c764:	0800c965 	.word	0x0800c965
 800c768:	0800cebf 	.word	0x0800cebf
 800c76c:	0800cebf 	.word	0x0800cebf
 800c770:	0800ca1d 	.word	0x0800ca1d
 800c774:	0800cebf 	.word	0x0800cebf
 800c778:	0800cebf 	.word	0x0800cebf
 800c77c:	0800cebf 	.word	0x0800cebf
 800c780:	0800cad9 	.word	0x0800cad9
 800c784:	0800cebf 	.word	0x0800cebf
 800c788:	0800cebf 	.word	0x0800cebf
 800c78c:	0800cebf 	.word	0x0800cebf
 800c790:	0800cebf 	.word	0x0800cebf
 800c794:	0800cebf 	.word	0x0800cebf
 800c798:	0800cebf 	.word	0x0800cebf
 800c79c:	0800cebf 	.word	0x0800cebf
 800c7a0:	0800cb95 	.word	0x0800cb95
 800c7a4:	0800cebf 	.word	0x0800cebf
 800c7a8:	0800cebf 	.word	0x0800cebf
 800c7ac:	0800cebf 	.word	0x0800cebf
 800c7b0:	0800cebf 	.word	0x0800cebf
 800c7b4:	0800cebf 	.word	0x0800cebf
 800c7b8:	0800cebf 	.word	0x0800cebf
 800c7bc:	0800cebf 	.word	0x0800cebf
 800c7c0:	0800cebf 	.word	0x0800cebf
 800c7c4:	0800cebf 	.word	0x0800cebf
 800c7c8:	0800cebf 	.word	0x0800cebf
 800c7cc:	0800cebf 	.word	0x0800cebf
 800c7d0:	0800cebf 	.word	0x0800cebf
 800c7d4:	0800cebf 	.word	0x0800cebf
 800c7d8:	0800cebf 	.word	0x0800cebf
 800c7dc:	0800cebf 	.word	0x0800cebf
 800c7e0:	0800cd07 	.word	0x0800cd07
 800c7e4:	0800cebf 	.word	0x0800cebf
 800c7e8:	0800cebf 	.word	0x0800cebf
 800c7ec:	0800cebf 	.word	0x0800cebf
 800c7f0:	0800cebf 	.word	0x0800cebf
 800c7f4:	0800cebf 	.word	0x0800cebf
 800c7f8:	0800cebf 	.word	0x0800cebf
 800c7fc:	0800cebf 	.word	0x0800cebf
 800c800:	0800cebf 	.word	0x0800cebf
 800c804:	0800cebf 	.word	0x0800cebf
 800c808:	0800cebf 	.word	0x0800cebf
 800c80c:	0800cebf 	.word	0x0800cebf
 800c810:	0800cebf 	.word	0x0800cebf
 800c814:	0800cebf 	.word	0x0800cebf
 800c818:	0800cebf 	.word	0x0800cebf
 800c81c:	0800cebf 	.word	0x0800cebf
 800c820:	0800cebf 	.word	0x0800cebf
 800c824:	0800cebf 	.word	0x0800cebf
 800c828:	0800cebf 	.word	0x0800cebf
 800c82c:	0800cebf 	.word	0x0800cebf
 800c830:	0800cebf 	.word	0x0800cebf
 800c834:	0800cebf 	.word	0x0800cebf
 800c838:	0800cebf 	.word	0x0800cebf
 800c83c:	0800cebf 	.word	0x0800cebf
 800c840:	0800cebf 	.word	0x0800cebf
 800c844:	0800cebf 	.word	0x0800cebf
 800c848:	0800cebf 	.word	0x0800cebf
 800c84c:	0800cebf 	.word	0x0800cebf
 800c850:	0800cebf 	.word	0x0800cebf
 800c854:	0800cebf 	.word	0x0800cebf
 800c858:	0800cebf 	.word	0x0800cebf
 800c85c:	0800cebf 	.word	0x0800cebf
 800c860:	0800cdfd 	.word	0x0800cdfd
 800c864:	f3af 8000 	nop.w
 800c868:	05161500 	.word	0x05161500
 800c86c:	00000000 	.word	0x00000000
 800c870:	0a2c2a00 	.word	0x0a2c2a00
 800c874:	00000000 	.word	0x00000000
 800c878:	003d0900 	.word	0x003d0900
 800c87c:	3d090000 	.word	0x3d090000
 800c880:	007a1200 	.word	0x007a1200
 800c884:	00f42400 	.word	0x00f42400
 800c888:	01e84800 	.word	0x01e84800
 800c88c:	03d09000 	.word	0x03d09000
 800c890:	061a8000 	.word	0x061a8000
 800c894:	07a12000 	.word	0x07a12000
 800c898:	0f424000 	.word	0x0f424000
 800c89c:	1e848000 	.word	0x1e848000
 800c8a0:	000aaa00 	.word	0x000aaa00
 800c8a4:	000ccc00 	.word	0x000ccc00
 800c8a8:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c8ac:	f7fb f89c 	bl	80079e8 <HAL_RCC_GetPCLK1Freq>
 800c8b0:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d044      	beq.n	800c944 <UART_SetConfig+0x15d4>
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8be:	2b01      	cmp	r3, #1
 800c8c0:	d03e      	beq.n	800c940 <UART_SetConfig+0x15d0>
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8c6:	2b02      	cmp	r3, #2
 800c8c8:	d038      	beq.n	800c93c <UART_SetConfig+0x15cc>
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8ce:	2b03      	cmp	r3, #3
 800c8d0:	d032      	beq.n	800c938 <UART_SetConfig+0x15c8>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8d6:	2b04      	cmp	r3, #4
 800c8d8:	d02c      	beq.n	800c934 <UART_SetConfig+0x15c4>
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8de:	2b05      	cmp	r3, #5
 800c8e0:	d026      	beq.n	800c930 <UART_SetConfig+0x15c0>
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8e6:	2b06      	cmp	r3, #6
 800c8e8:	d020      	beq.n	800c92c <UART_SetConfig+0x15bc>
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8ee:	2b07      	cmp	r3, #7
 800c8f0:	d01a      	beq.n	800c928 <UART_SetConfig+0x15b8>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8f6:	2b08      	cmp	r3, #8
 800c8f8:	d014      	beq.n	800c924 <UART_SetConfig+0x15b4>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8fe:	2b09      	cmp	r3, #9
 800c900:	d00e      	beq.n	800c920 <UART_SetConfig+0x15b0>
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c906:	2b0a      	cmp	r3, #10
 800c908:	d008      	beq.n	800c91c <UART_SetConfig+0x15ac>
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c90e:	2b0b      	cmp	r3, #11
 800c910:	d102      	bne.n	800c918 <UART_SetConfig+0x15a8>
 800c912:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c916:	e016      	b.n	800c946 <UART_SetConfig+0x15d6>
 800c918:	2301      	movs	r3, #1
 800c91a:	e014      	b.n	800c946 <UART_SetConfig+0x15d6>
 800c91c:	2380      	movs	r3, #128	; 0x80
 800c91e:	e012      	b.n	800c946 <UART_SetConfig+0x15d6>
 800c920:	2340      	movs	r3, #64	; 0x40
 800c922:	e010      	b.n	800c946 <UART_SetConfig+0x15d6>
 800c924:	2320      	movs	r3, #32
 800c926:	e00e      	b.n	800c946 <UART_SetConfig+0x15d6>
 800c928:	2310      	movs	r3, #16
 800c92a:	e00c      	b.n	800c946 <UART_SetConfig+0x15d6>
 800c92c:	230c      	movs	r3, #12
 800c92e:	e00a      	b.n	800c946 <UART_SetConfig+0x15d6>
 800c930:	230a      	movs	r3, #10
 800c932:	e008      	b.n	800c946 <UART_SetConfig+0x15d6>
 800c934:	2308      	movs	r3, #8
 800c936:	e006      	b.n	800c946 <UART_SetConfig+0x15d6>
 800c938:	2306      	movs	r3, #6
 800c93a:	e004      	b.n	800c946 <UART_SetConfig+0x15d6>
 800c93c:	2304      	movs	r3, #4
 800c93e:	e002      	b.n	800c946 <UART_SetConfig+0x15d6>
 800c940:	2302      	movs	r3, #2
 800c942:	e000      	b.n	800c946 <UART_SetConfig+0x15d6>
 800c944:	2301      	movs	r3, #1
 800c946:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c948:	fbb2 f3f3 	udiv	r3, r2, r3
 800c94c:	005a      	lsls	r2, r3, #1
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	685b      	ldr	r3, [r3, #4]
 800c952:	085b      	lsrs	r3, r3, #1
 800c954:	441a      	add	r2, r3
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	685b      	ldr	r3, [r3, #4]
 800c95a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c95e:	b29b      	uxth	r3, r3
 800c960:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c962:	e2b0      	b.n	800cec6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c964:	f7fb f856 	bl	8007a14 <HAL_RCC_GetPCLK2Freq>
 800c968:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d044      	beq.n	800c9fc <UART_SetConfig+0x168c>
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c976:	2b01      	cmp	r3, #1
 800c978:	d03e      	beq.n	800c9f8 <UART_SetConfig+0x1688>
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c97e:	2b02      	cmp	r3, #2
 800c980:	d038      	beq.n	800c9f4 <UART_SetConfig+0x1684>
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c986:	2b03      	cmp	r3, #3
 800c988:	d032      	beq.n	800c9f0 <UART_SetConfig+0x1680>
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c98e:	2b04      	cmp	r3, #4
 800c990:	d02c      	beq.n	800c9ec <UART_SetConfig+0x167c>
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c996:	2b05      	cmp	r3, #5
 800c998:	d026      	beq.n	800c9e8 <UART_SetConfig+0x1678>
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c99e:	2b06      	cmp	r3, #6
 800c9a0:	d020      	beq.n	800c9e4 <UART_SetConfig+0x1674>
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9a6:	2b07      	cmp	r3, #7
 800c9a8:	d01a      	beq.n	800c9e0 <UART_SetConfig+0x1670>
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9ae:	2b08      	cmp	r3, #8
 800c9b0:	d014      	beq.n	800c9dc <UART_SetConfig+0x166c>
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9b6:	2b09      	cmp	r3, #9
 800c9b8:	d00e      	beq.n	800c9d8 <UART_SetConfig+0x1668>
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9be:	2b0a      	cmp	r3, #10
 800c9c0:	d008      	beq.n	800c9d4 <UART_SetConfig+0x1664>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9c6:	2b0b      	cmp	r3, #11
 800c9c8:	d102      	bne.n	800c9d0 <UART_SetConfig+0x1660>
 800c9ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c9ce:	e016      	b.n	800c9fe <UART_SetConfig+0x168e>
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	e014      	b.n	800c9fe <UART_SetConfig+0x168e>
 800c9d4:	2380      	movs	r3, #128	; 0x80
 800c9d6:	e012      	b.n	800c9fe <UART_SetConfig+0x168e>
 800c9d8:	2340      	movs	r3, #64	; 0x40
 800c9da:	e010      	b.n	800c9fe <UART_SetConfig+0x168e>
 800c9dc:	2320      	movs	r3, #32
 800c9de:	e00e      	b.n	800c9fe <UART_SetConfig+0x168e>
 800c9e0:	2310      	movs	r3, #16
 800c9e2:	e00c      	b.n	800c9fe <UART_SetConfig+0x168e>
 800c9e4:	230c      	movs	r3, #12
 800c9e6:	e00a      	b.n	800c9fe <UART_SetConfig+0x168e>
 800c9e8:	230a      	movs	r3, #10
 800c9ea:	e008      	b.n	800c9fe <UART_SetConfig+0x168e>
 800c9ec:	2308      	movs	r3, #8
 800c9ee:	e006      	b.n	800c9fe <UART_SetConfig+0x168e>
 800c9f0:	2306      	movs	r3, #6
 800c9f2:	e004      	b.n	800c9fe <UART_SetConfig+0x168e>
 800c9f4:	2304      	movs	r3, #4
 800c9f6:	e002      	b.n	800c9fe <UART_SetConfig+0x168e>
 800c9f8:	2302      	movs	r3, #2
 800c9fa:	e000      	b.n	800c9fe <UART_SetConfig+0x168e>
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca00:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca04:	005a      	lsls	r2, r3, #1
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	685b      	ldr	r3, [r3, #4]
 800ca0a:	085b      	lsrs	r3, r3, #1
 800ca0c:	441a      	add	r2, r3
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	685b      	ldr	r3, [r3, #4]
 800ca12:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca16:	b29b      	uxth	r3, r3
 800ca18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ca1a:	e254      	b.n	800cec6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca1c:	f107 0318 	add.w	r3, r7, #24
 800ca20:	4618      	mov	r0, r3
 800ca22:	f7fc f995 	bl	8008d50 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca26:	69fa      	ldr	r2, [r7, #28]
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d044      	beq.n	800caba <UART_SetConfig+0x174a>
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca34:	2b01      	cmp	r3, #1
 800ca36:	d03e      	beq.n	800cab6 <UART_SetConfig+0x1746>
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca3c:	2b02      	cmp	r3, #2
 800ca3e:	d038      	beq.n	800cab2 <UART_SetConfig+0x1742>
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca44:	2b03      	cmp	r3, #3
 800ca46:	d032      	beq.n	800caae <UART_SetConfig+0x173e>
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca4c:	2b04      	cmp	r3, #4
 800ca4e:	d02c      	beq.n	800caaa <UART_SetConfig+0x173a>
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca54:	2b05      	cmp	r3, #5
 800ca56:	d026      	beq.n	800caa6 <UART_SetConfig+0x1736>
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca5c:	2b06      	cmp	r3, #6
 800ca5e:	d020      	beq.n	800caa2 <UART_SetConfig+0x1732>
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca64:	2b07      	cmp	r3, #7
 800ca66:	d01a      	beq.n	800ca9e <UART_SetConfig+0x172e>
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca6c:	2b08      	cmp	r3, #8
 800ca6e:	d014      	beq.n	800ca9a <UART_SetConfig+0x172a>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca74:	2b09      	cmp	r3, #9
 800ca76:	d00e      	beq.n	800ca96 <UART_SetConfig+0x1726>
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca7c:	2b0a      	cmp	r3, #10
 800ca7e:	d008      	beq.n	800ca92 <UART_SetConfig+0x1722>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca84:	2b0b      	cmp	r3, #11
 800ca86:	d102      	bne.n	800ca8e <UART_SetConfig+0x171e>
 800ca88:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ca8c:	e016      	b.n	800cabc <UART_SetConfig+0x174c>
 800ca8e:	2301      	movs	r3, #1
 800ca90:	e014      	b.n	800cabc <UART_SetConfig+0x174c>
 800ca92:	2380      	movs	r3, #128	; 0x80
 800ca94:	e012      	b.n	800cabc <UART_SetConfig+0x174c>
 800ca96:	2340      	movs	r3, #64	; 0x40
 800ca98:	e010      	b.n	800cabc <UART_SetConfig+0x174c>
 800ca9a:	2320      	movs	r3, #32
 800ca9c:	e00e      	b.n	800cabc <UART_SetConfig+0x174c>
 800ca9e:	2310      	movs	r3, #16
 800caa0:	e00c      	b.n	800cabc <UART_SetConfig+0x174c>
 800caa2:	230c      	movs	r3, #12
 800caa4:	e00a      	b.n	800cabc <UART_SetConfig+0x174c>
 800caa6:	230a      	movs	r3, #10
 800caa8:	e008      	b.n	800cabc <UART_SetConfig+0x174c>
 800caaa:	2308      	movs	r3, #8
 800caac:	e006      	b.n	800cabc <UART_SetConfig+0x174c>
 800caae:	2306      	movs	r3, #6
 800cab0:	e004      	b.n	800cabc <UART_SetConfig+0x174c>
 800cab2:	2304      	movs	r3, #4
 800cab4:	e002      	b.n	800cabc <UART_SetConfig+0x174c>
 800cab6:	2302      	movs	r3, #2
 800cab8:	e000      	b.n	800cabc <UART_SetConfig+0x174c>
 800caba:	2301      	movs	r3, #1
 800cabc:	fbb2 f3f3 	udiv	r3, r2, r3
 800cac0:	005a      	lsls	r2, r3, #1
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	685b      	ldr	r3, [r3, #4]
 800cac6:	085b      	lsrs	r3, r3, #1
 800cac8:	441a      	add	r2, r3
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	fbb2 f3f3 	udiv	r3, r2, r3
 800cad2:	b29b      	uxth	r3, r3
 800cad4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cad6:	e1f6      	b.n	800cec6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cad8:	f107 030c 	add.w	r3, r7, #12
 800cadc:	4618      	mov	r0, r3
 800cade:	f7fc fa83 	bl	8008fe8 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cae2:	693a      	ldr	r2, [r7, #16]
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d044      	beq.n	800cb76 <UART_SetConfig+0x1806>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caf0:	2b01      	cmp	r3, #1
 800caf2:	d03e      	beq.n	800cb72 <UART_SetConfig+0x1802>
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caf8:	2b02      	cmp	r3, #2
 800cafa:	d038      	beq.n	800cb6e <UART_SetConfig+0x17fe>
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb00:	2b03      	cmp	r3, #3
 800cb02:	d032      	beq.n	800cb6a <UART_SetConfig+0x17fa>
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb08:	2b04      	cmp	r3, #4
 800cb0a:	d02c      	beq.n	800cb66 <UART_SetConfig+0x17f6>
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb10:	2b05      	cmp	r3, #5
 800cb12:	d026      	beq.n	800cb62 <UART_SetConfig+0x17f2>
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb18:	2b06      	cmp	r3, #6
 800cb1a:	d020      	beq.n	800cb5e <UART_SetConfig+0x17ee>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb20:	2b07      	cmp	r3, #7
 800cb22:	d01a      	beq.n	800cb5a <UART_SetConfig+0x17ea>
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb28:	2b08      	cmp	r3, #8
 800cb2a:	d014      	beq.n	800cb56 <UART_SetConfig+0x17e6>
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb30:	2b09      	cmp	r3, #9
 800cb32:	d00e      	beq.n	800cb52 <UART_SetConfig+0x17e2>
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb38:	2b0a      	cmp	r3, #10
 800cb3a:	d008      	beq.n	800cb4e <UART_SetConfig+0x17de>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb40:	2b0b      	cmp	r3, #11
 800cb42:	d102      	bne.n	800cb4a <UART_SetConfig+0x17da>
 800cb44:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cb48:	e016      	b.n	800cb78 <UART_SetConfig+0x1808>
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	e014      	b.n	800cb78 <UART_SetConfig+0x1808>
 800cb4e:	2380      	movs	r3, #128	; 0x80
 800cb50:	e012      	b.n	800cb78 <UART_SetConfig+0x1808>
 800cb52:	2340      	movs	r3, #64	; 0x40
 800cb54:	e010      	b.n	800cb78 <UART_SetConfig+0x1808>
 800cb56:	2320      	movs	r3, #32
 800cb58:	e00e      	b.n	800cb78 <UART_SetConfig+0x1808>
 800cb5a:	2310      	movs	r3, #16
 800cb5c:	e00c      	b.n	800cb78 <UART_SetConfig+0x1808>
 800cb5e:	230c      	movs	r3, #12
 800cb60:	e00a      	b.n	800cb78 <UART_SetConfig+0x1808>
 800cb62:	230a      	movs	r3, #10
 800cb64:	e008      	b.n	800cb78 <UART_SetConfig+0x1808>
 800cb66:	2308      	movs	r3, #8
 800cb68:	e006      	b.n	800cb78 <UART_SetConfig+0x1808>
 800cb6a:	2306      	movs	r3, #6
 800cb6c:	e004      	b.n	800cb78 <UART_SetConfig+0x1808>
 800cb6e:	2304      	movs	r3, #4
 800cb70:	e002      	b.n	800cb78 <UART_SetConfig+0x1808>
 800cb72:	2302      	movs	r3, #2
 800cb74:	e000      	b.n	800cb78 <UART_SetConfig+0x1808>
 800cb76:	2301      	movs	r3, #1
 800cb78:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb7c:	005a      	lsls	r2, r3, #1
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	685b      	ldr	r3, [r3, #4]
 800cb82:	085b      	lsrs	r3, r3, #1
 800cb84:	441a      	add	r2, r3
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	685b      	ldr	r3, [r3, #4]
 800cb8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb8e:	b29b      	uxth	r3, r3
 800cb90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cb92:	e198      	b.n	800cec6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb94:	4b87      	ldr	r3, [pc, #540]	; (800cdb4 <UART_SetConfig+0x1a44>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	f003 0320 	and.w	r3, r3, #32
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d05e      	beq.n	800cc5e <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cba0:	4b84      	ldr	r3, [pc, #528]	; (800cdb4 <UART_SetConfig+0x1a44>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	08db      	lsrs	r3, r3, #3
 800cba6:	f003 0303 	and.w	r3, r3, #3
 800cbaa:	4a83      	ldr	r2, [pc, #524]	; (800cdb8 <UART_SetConfig+0x1a48>)
 800cbac:	40da      	lsrs	r2, r3
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d044      	beq.n	800cc40 <UART_SetConfig+0x18d0>
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbba:	2b01      	cmp	r3, #1
 800cbbc:	d03e      	beq.n	800cc3c <UART_SetConfig+0x18cc>
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbc2:	2b02      	cmp	r3, #2
 800cbc4:	d038      	beq.n	800cc38 <UART_SetConfig+0x18c8>
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbca:	2b03      	cmp	r3, #3
 800cbcc:	d032      	beq.n	800cc34 <UART_SetConfig+0x18c4>
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbd2:	2b04      	cmp	r3, #4
 800cbd4:	d02c      	beq.n	800cc30 <UART_SetConfig+0x18c0>
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbda:	2b05      	cmp	r3, #5
 800cbdc:	d026      	beq.n	800cc2c <UART_SetConfig+0x18bc>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbe2:	2b06      	cmp	r3, #6
 800cbe4:	d020      	beq.n	800cc28 <UART_SetConfig+0x18b8>
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbea:	2b07      	cmp	r3, #7
 800cbec:	d01a      	beq.n	800cc24 <UART_SetConfig+0x18b4>
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbf2:	2b08      	cmp	r3, #8
 800cbf4:	d014      	beq.n	800cc20 <UART_SetConfig+0x18b0>
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbfa:	2b09      	cmp	r3, #9
 800cbfc:	d00e      	beq.n	800cc1c <UART_SetConfig+0x18ac>
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc02:	2b0a      	cmp	r3, #10
 800cc04:	d008      	beq.n	800cc18 <UART_SetConfig+0x18a8>
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc0a:	2b0b      	cmp	r3, #11
 800cc0c:	d102      	bne.n	800cc14 <UART_SetConfig+0x18a4>
 800cc0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cc12:	e016      	b.n	800cc42 <UART_SetConfig+0x18d2>
 800cc14:	2301      	movs	r3, #1
 800cc16:	e014      	b.n	800cc42 <UART_SetConfig+0x18d2>
 800cc18:	2380      	movs	r3, #128	; 0x80
 800cc1a:	e012      	b.n	800cc42 <UART_SetConfig+0x18d2>
 800cc1c:	2340      	movs	r3, #64	; 0x40
 800cc1e:	e010      	b.n	800cc42 <UART_SetConfig+0x18d2>
 800cc20:	2320      	movs	r3, #32
 800cc22:	e00e      	b.n	800cc42 <UART_SetConfig+0x18d2>
 800cc24:	2310      	movs	r3, #16
 800cc26:	e00c      	b.n	800cc42 <UART_SetConfig+0x18d2>
 800cc28:	230c      	movs	r3, #12
 800cc2a:	e00a      	b.n	800cc42 <UART_SetConfig+0x18d2>
 800cc2c:	230a      	movs	r3, #10
 800cc2e:	e008      	b.n	800cc42 <UART_SetConfig+0x18d2>
 800cc30:	2308      	movs	r3, #8
 800cc32:	e006      	b.n	800cc42 <UART_SetConfig+0x18d2>
 800cc34:	2306      	movs	r3, #6
 800cc36:	e004      	b.n	800cc42 <UART_SetConfig+0x18d2>
 800cc38:	2304      	movs	r3, #4
 800cc3a:	e002      	b.n	800cc42 <UART_SetConfig+0x18d2>
 800cc3c:	2302      	movs	r3, #2
 800cc3e:	e000      	b.n	800cc42 <UART_SetConfig+0x18d2>
 800cc40:	2301      	movs	r3, #1
 800cc42:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc46:	005a      	lsls	r2, r3, #1
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	685b      	ldr	r3, [r3, #4]
 800cc4c:	085b      	lsrs	r3, r3, #1
 800cc4e:	441a      	add	r2, r3
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	685b      	ldr	r3, [r3, #4]
 800cc54:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc58:	b29b      	uxth	r3, r3
 800cc5a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800cc5c:	e133      	b.n	800cec6 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d043      	beq.n	800ccee <UART_SetConfig+0x197e>
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc6a:	2b01      	cmp	r3, #1
 800cc6c:	d03d      	beq.n	800ccea <UART_SetConfig+0x197a>
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc72:	2b02      	cmp	r3, #2
 800cc74:	d037      	beq.n	800cce6 <UART_SetConfig+0x1976>
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc7a:	2b03      	cmp	r3, #3
 800cc7c:	d031      	beq.n	800cce2 <UART_SetConfig+0x1972>
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc82:	2b04      	cmp	r3, #4
 800cc84:	d02b      	beq.n	800ccde <UART_SetConfig+0x196e>
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc8a:	2b05      	cmp	r3, #5
 800cc8c:	d025      	beq.n	800ccda <UART_SetConfig+0x196a>
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc92:	2b06      	cmp	r3, #6
 800cc94:	d01f      	beq.n	800ccd6 <UART_SetConfig+0x1966>
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc9a:	2b07      	cmp	r3, #7
 800cc9c:	d019      	beq.n	800ccd2 <UART_SetConfig+0x1962>
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cca2:	2b08      	cmp	r3, #8
 800cca4:	d013      	beq.n	800ccce <UART_SetConfig+0x195e>
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccaa:	2b09      	cmp	r3, #9
 800ccac:	d00d      	beq.n	800ccca <UART_SetConfig+0x195a>
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccb2:	2b0a      	cmp	r3, #10
 800ccb4:	d007      	beq.n	800ccc6 <UART_SetConfig+0x1956>
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccba:	2b0b      	cmp	r3, #11
 800ccbc:	d101      	bne.n	800ccc2 <UART_SetConfig+0x1952>
 800ccbe:	4b3f      	ldr	r3, [pc, #252]	; (800cdbc <UART_SetConfig+0x1a4c>)
 800ccc0:	e016      	b.n	800ccf0 <UART_SetConfig+0x1980>
 800ccc2:	4b3f      	ldr	r3, [pc, #252]	; (800cdc0 <UART_SetConfig+0x1a50>)
 800ccc4:	e014      	b.n	800ccf0 <UART_SetConfig+0x1980>
 800ccc6:	4b3f      	ldr	r3, [pc, #252]	; (800cdc4 <UART_SetConfig+0x1a54>)
 800ccc8:	e012      	b.n	800ccf0 <UART_SetConfig+0x1980>
 800ccca:	4b3f      	ldr	r3, [pc, #252]	; (800cdc8 <UART_SetConfig+0x1a58>)
 800cccc:	e010      	b.n	800ccf0 <UART_SetConfig+0x1980>
 800ccce:	4b3f      	ldr	r3, [pc, #252]	; (800cdcc <UART_SetConfig+0x1a5c>)
 800ccd0:	e00e      	b.n	800ccf0 <UART_SetConfig+0x1980>
 800ccd2:	4b3f      	ldr	r3, [pc, #252]	; (800cdd0 <UART_SetConfig+0x1a60>)
 800ccd4:	e00c      	b.n	800ccf0 <UART_SetConfig+0x1980>
 800ccd6:	4b3f      	ldr	r3, [pc, #252]	; (800cdd4 <UART_SetConfig+0x1a64>)
 800ccd8:	e00a      	b.n	800ccf0 <UART_SetConfig+0x1980>
 800ccda:	4b3f      	ldr	r3, [pc, #252]	; (800cdd8 <UART_SetConfig+0x1a68>)
 800ccdc:	e008      	b.n	800ccf0 <UART_SetConfig+0x1980>
 800ccde:	4b3f      	ldr	r3, [pc, #252]	; (800cddc <UART_SetConfig+0x1a6c>)
 800cce0:	e006      	b.n	800ccf0 <UART_SetConfig+0x1980>
 800cce2:	4b3f      	ldr	r3, [pc, #252]	; (800cde0 <UART_SetConfig+0x1a70>)
 800cce4:	e004      	b.n	800ccf0 <UART_SetConfig+0x1980>
 800cce6:	4b3f      	ldr	r3, [pc, #252]	; (800cde4 <UART_SetConfig+0x1a74>)
 800cce8:	e002      	b.n	800ccf0 <UART_SetConfig+0x1980>
 800ccea:	4b33      	ldr	r3, [pc, #204]	; (800cdb8 <UART_SetConfig+0x1a48>)
 800ccec:	e000      	b.n	800ccf0 <UART_SetConfig+0x1980>
 800ccee:	4b34      	ldr	r3, [pc, #208]	; (800cdc0 <UART_SetConfig+0x1a50>)
 800ccf0:	687a      	ldr	r2, [r7, #4]
 800ccf2:	6852      	ldr	r2, [r2, #4]
 800ccf4:	0852      	lsrs	r2, r2, #1
 800ccf6:	441a      	add	r2, r3
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	685b      	ldr	r3, [r3, #4]
 800ccfc:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd00:	b29b      	uxth	r3, r3
 800cd02:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cd04:	e0df      	b.n	800cec6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d045      	beq.n	800cd9a <UART_SetConfig+0x1a2a>
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd12:	2b01      	cmp	r3, #1
 800cd14:	d03f      	beq.n	800cd96 <UART_SetConfig+0x1a26>
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd1a:	2b02      	cmp	r3, #2
 800cd1c:	d039      	beq.n	800cd92 <UART_SetConfig+0x1a22>
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd22:	2b03      	cmp	r3, #3
 800cd24:	d033      	beq.n	800cd8e <UART_SetConfig+0x1a1e>
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd2a:	2b04      	cmp	r3, #4
 800cd2c:	d02d      	beq.n	800cd8a <UART_SetConfig+0x1a1a>
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd32:	2b05      	cmp	r3, #5
 800cd34:	d027      	beq.n	800cd86 <UART_SetConfig+0x1a16>
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd3a:	2b06      	cmp	r3, #6
 800cd3c:	d021      	beq.n	800cd82 <UART_SetConfig+0x1a12>
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd42:	2b07      	cmp	r3, #7
 800cd44:	d01b      	beq.n	800cd7e <UART_SetConfig+0x1a0e>
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd4a:	2b08      	cmp	r3, #8
 800cd4c:	d015      	beq.n	800cd7a <UART_SetConfig+0x1a0a>
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd52:	2b09      	cmp	r3, #9
 800cd54:	d00f      	beq.n	800cd76 <UART_SetConfig+0x1a06>
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd5a:	2b0a      	cmp	r3, #10
 800cd5c:	d008      	beq.n	800cd70 <UART_SetConfig+0x1a00>
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd62:	2b0b      	cmp	r3, #11
 800cd64:	d102      	bne.n	800cd6c <UART_SetConfig+0x19fc>
 800cd66:	f647 2312 	movw	r3, #31250	; 0x7a12
 800cd6a:	e017      	b.n	800cd9c <UART_SetConfig+0x1a2c>
 800cd6c:	4b18      	ldr	r3, [pc, #96]	; (800cdd0 <UART_SetConfig+0x1a60>)
 800cd6e:	e015      	b.n	800cd9c <UART_SetConfig+0x1a2c>
 800cd70:	f24f 4324 	movw	r3, #62500	; 0xf424
 800cd74:	e012      	b.n	800cd9c <UART_SetConfig+0x1a2c>
 800cd76:	4b1c      	ldr	r3, [pc, #112]	; (800cde8 <UART_SetConfig+0x1a78>)
 800cd78:	e010      	b.n	800cd9c <UART_SetConfig+0x1a2c>
 800cd7a:	4b1c      	ldr	r3, [pc, #112]	; (800cdec <UART_SetConfig+0x1a7c>)
 800cd7c:	e00e      	b.n	800cd9c <UART_SetConfig+0x1a2c>
 800cd7e:	4b0f      	ldr	r3, [pc, #60]	; (800cdbc <UART_SetConfig+0x1a4c>)
 800cd80:	e00c      	b.n	800cd9c <UART_SetConfig+0x1a2c>
 800cd82:	4b1b      	ldr	r3, [pc, #108]	; (800cdf0 <UART_SetConfig+0x1a80>)
 800cd84:	e00a      	b.n	800cd9c <UART_SetConfig+0x1a2c>
 800cd86:	4b1b      	ldr	r3, [pc, #108]	; (800cdf4 <UART_SetConfig+0x1a84>)
 800cd88:	e008      	b.n	800cd9c <UART_SetConfig+0x1a2c>
 800cd8a:	4b0e      	ldr	r3, [pc, #56]	; (800cdc4 <UART_SetConfig+0x1a54>)
 800cd8c:	e006      	b.n	800cd9c <UART_SetConfig+0x1a2c>
 800cd8e:	4b1a      	ldr	r3, [pc, #104]	; (800cdf8 <UART_SetConfig+0x1a88>)
 800cd90:	e004      	b.n	800cd9c <UART_SetConfig+0x1a2c>
 800cd92:	4b0d      	ldr	r3, [pc, #52]	; (800cdc8 <UART_SetConfig+0x1a58>)
 800cd94:	e002      	b.n	800cd9c <UART_SetConfig+0x1a2c>
 800cd96:	4b0d      	ldr	r3, [pc, #52]	; (800cdcc <UART_SetConfig+0x1a5c>)
 800cd98:	e000      	b.n	800cd9c <UART_SetConfig+0x1a2c>
 800cd9a:	4b0d      	ldr	r3, [pc, #52]	; (800cdd0 <UART_SetConfig+0x1a60>)
 800cd9c:	687a      	ldr	r2, [r7, #4]
 800cd9e:	6852      	ldr	r2, [r2, #4]
 800cda0:	0852      	lsrs	r2, r2, #1
 800cda2:	441a      	add	r2, r3
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	685b      	ldr	r3, [r3, #4]
 800cda8:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdac:	b29b      	uxth	r3, r3
 800cdae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cdb0:	e089      	b.n	800cec6 <UART_SetConfig+0x1b56>
 800cdb2:	bf00      	nop
 800cdb4:	58024400 	.word	0x58024400
 800cdb8:	03d09000 	.word	0x03d09000
 800cdbc:	0007a120 	.word	0x0007a120
 800cdc0:	07a12000 	.word	0x07a12000
 800cdc4:	000f4240 	.word	0x000f4240
 800cdc8:	001e8480 	.word	0x001e8480
 800cdcc:	003d0900 	.word	0x003d0900
 800cdd0:	007a1200 	.word	0x007a1200
 800cdd4:	00a2c2aa 	.word	0x00a2c2aa
 800cdd8:	00c35000 	.word	0x00c35000
 800cddc:	00f42400 	.word	0x00f42400
 800cde0:	01458554 	.word	0x01458554
 800cde4:	01e84800 	.word	0x01e84800
 800cde8:	0001e848 	.word	0x0001e848
 800cdec:	0003d090 	.word	0x0003d090
 800cdf0:	000a2c2a 	.word	0x000a2c2a
 800cdf4:	000c3500 	.word	0x000c3500
 800cdf8:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d04f      	beq.n	800cea4 <UART_SetConfig+0x1b34>
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce08:	2b01      	cmp	r3, #1
 800ce0a:	d048      	beq.n	800ce9e <UART_SetConfig+0x1b2e>
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce10:	2b02      	cmp	r3, #2
 800ce12:	d041      	beq.n	800ce98 <UART_SetConfig+0x1b28>
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce18:	2b03      	cmp	r3, #3
 800ce1a:	d03a      	beq.n	800ce92 <UART_SetConfig+0x1b22>
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce20:	2b04      	cmp	r3, #4
 800ce22:	d033      	beq.n	800ce8c <UART_SetConfig+0x1b1c>
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce28:	2b05      	cmp	r3, #5
 800ce2a:	d02c      	beq.n	800ce86 <UART_SetConfig+0x1b16>
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce30:	2b06      	cmp	r3, #6
 800ce32:	d025      	beq.n	800ce80 <UART_SetConfig+0x1b10>
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce38:	2b07      	cmp	r3, #7
 800ce3a:	d01e      	beq.n	800ce7a <UART_SetConfig+0x1b0a>
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce40:	2b08      	cmp	r3, #8
 800ce42:	d017      	beq.n	800ce74 <UART_SetConfig+0x1b04>
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce48:	2b09      	cmp	r3, #9
 800ce4a:	d010      	beq.n	800ce6e <UART_SetConfig+0x1afe>
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce50:	2b0a      	cmp	r3, #10
 800ce52:	d009      	beq.n	800ce68 <UART_SetConfig+0x1af8>
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce58:	2b0b      	cmp	r3, #11
 800ce5a:	d102      	bne.n	800ce62 <UART_SetConfig+0x1af2>
 800ce5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ce60:	e022      	b.n	800cea8 <UART_SetConfig+0x1b38>
 800ce62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ce66:	e01f      	b.n	800cea8 <UART_SetConfig+0x1b38>
 800ce68:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ce6c:	e01c      	b.n	800cea8 <UART_SetConfig+0x1b38>
 800ce6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce72:	e019      	b.n	800cea8 <UART_SetConfig+0x1b38>
 800ce74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ce78:	e016      	b.n	800cea8 <UART_SetConfig+0x1b38>
 800ce7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ce7e:	e013      	b.n	800cea8 <UART_SetConfig+0x1b38>
 800ce80:	f241 5354 	movw	r3, #5460	; 0x1554
 800ce84:	e010      	b.n	800cea8 <UART_SetConfig+0x1b38>
 800ce86:	f641 1398 	movw	r3, #6552	; 0x1998
 800ce8a:	e00d      	b.n	800cea8 <UART_SetConfig+0x1b38>
 800ce8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ce90:	e00a      	b.n	800cea8 <UART_SetConfig+0x1b38>
 800ce92:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800ce96:	e007      	b.n	800cea8 <UART_SetConfig+0x1b38>
 800ce98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ce9c:	e004      	b.n	800cea8 <UART_SetConfig+0x1b38>
 800ce9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cea2:	e001      	b.n	800cea8 <UART_SetConfig+0x1b38>
 800cea4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800cea8:	687a      	ldr	r2, [r7, #4]
 800ceaa:	6852      	ldr	r2, [r2, #4]
 800ceac:	0852      	lsrs	r2, r2, #1
 800ceae:	441a      	add	r2, r3
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	685b      	ldr	r3, [r3, #4]
 800ceb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ceb8:	b29b      	uxth	r3, r3
 800ceba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cebc:	e003      	b.n	800cec6 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800cebe:	2301      	movs	r3, #1
 800cec0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800cec4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cec8:	2b0f      	cmp	r3, #15
 800ceca:	d916      	bls.n	800cefa <UART_SetConfig+0x1b8a>
 800cecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ced2:	d212      	bcs.n	800cefa <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ced4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ced6:	b29b      	uxth	r3, r3
 800ced8:	f023 030f 	bic.w	r3, r3, #15
 800cedc:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cee0:	085b      	lsrs	r3, r3, #1
 800cee2:	b29b      	uxth	r3, r3
 800cee4:	f003 0307 	and.w	r3, r3, #7
 800cee8:	b29a      	uxth	r2, r3
 800ceea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ceec:	4313      	orrs	r3, r2
 800ceee:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cef6:	60da      	str	r2, [r3, #12]
 800cef8:	e3a3      	b.n	800d642 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800cefa:	2301      	movs	r3, #1
 800cefc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf00:	e39f      	b.n	800d642 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800cf02:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800cf06:	2b40      	cmp	r3, #64	; 0x40
 800cf08:	f200 8388 	bhi.w	800d61c <UART_SetConfig+0x22ac>
 800cf0c:	a201      	add	r2, pc, #4	; (adr r2, 800cf14 <UART_SetConfig+0x1ba4>)
 800cf0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf12:	bf00      	nop
 800cf14:	0800d019 	.word	0x0800d019
 800cf18:	0800d0cf 	.word	0x0800d0cf
 800cf1c:	0800d61d 	.word	0x0800d61d
 800cf20:	0800d61d 	.word	0x0800d61d
 800cf24:	0800d185 	.word	0x0800d185
 800cf28:	0800d61d 	.word	0x0800d61d
 800cf2c:	0800d61d 	.word	0x0800d61d
 800cf30:	0800d61d 	.word	0x0800d61d
 800cf34:	0800d23f 	.word	0x0800d23f
 800cf38:	0800d61d 	.word	0x0800d61d
 800cf3c:	0800d61d 	.word	0x0800d61d
 800cf40:	0800d61d 	.word	0x0800d61d
 800cf44:	0800d61d 	.word	0x0800d61d
 800cf48:	0800d61d 	.word	0x0800d61d
 800cf4c:	0800d61d 	.word	0x0800d61d
 800cf50:	0800d61d 	.word	0x0800d61d
 800cf54:	0800d2f9 	.word	0x0800d2f9
 800cf58:	0800d61d 	.word	0x0800d61d
 800cf5c:	0800d61d 	.word	0x0800d61d
 800cf60:	0800d61d 	.word	0x0800d61d
 800cf64:	0800d61d 	.word	0x0800d61d
 800cf68:	0800d61d 	.word	0x0800d61d
 800cf6c:	0800d61d 	.word	0x0800d61d
 800cf70:	0800d61d 	.word	0x0800d61d
 800cf74:	0800d61d 	.word	0x0800d61d
 800cf78:	0800d61d 	.word	0x0800d61d
 800cf7c:	0800d61d 	.word	0x0800d61d
 800cf80:	0800d61d 	.word	0x0800d61d
 800cf84:	0800d61d 	.word	0x0800d61d
 800cf88:	0800d61d 	.word	0x0800d61d
 800cf8c:	0800d61d 	.word	0x0800d61d
 800cf90:	0800d61d 	.word	0x0800d61d
 800cf94:	0800d469 	.word	0x0800d469
 800cf98:	0800d61d 	.word	0x0800d61d
 800cf9c:	0800d61d 	.word	0x0800d61d
 800cfa0:	0800d61d 	.word	0x0800d61d
 800cfa4:	0800d61d 	.word	0x0800d61d
 800cfa8:	0800d61d 	.word	0x0800d61d
 800cfac:	0800d61d 	.word	0x0800d61d
 800cfb0:	0800d61d 	.word	0x0800d61d
 800cfb4:	0800d61d 	.word	0x0800d61d
 800cfb8:	0800d61d 	.word	0x0800d61d
 800cfbc:	0800d61d 	.word	0x0800d61d
 800cfc0:	0800d61d 	.word	0x0800d61d
 800cfc4:	0800d61d 	.word	0x0800d61d
 800cfc8:	0800d61d 	.word	0x0800d61d
 800cfcc:	0800d61d 	.word	0x0800d61d
 800cfd0:	0800d61d 	.word	0x0800d61d
 800cfd4:	0800d61d 	.word	0x0800d61d
 800cfd8:	0800d61d 	.word	0x0800d61d
 800cfdc:	0800d61d 	.word	0x0800d61d
 800cfe0:	0800d61d 	.word	0x0800d61d
 800cfe4:	0800d61d 	.word	0x0800d61d
 800cfe8:	0800d61d 	.word	0x0800d61d
 800cfec:	0800d61d 	.word	0x0800d61d
 800cff0:	0800d61d 	.word	0x0800d61d
 800cff4:	0800d61d 	.word	0x0800d61d
 800cff8:	0800d61d 	.word	0x0800d61d
 800cffc:	0800d61d 	.word	0x0800d61d
 800d000:	0800d61d 	.word	0x0800d61d
 800d004:	0800d61d 	.word	0x0800d61d
 800d008:	0800d61d 	.word	0x0800d61d
 800d00c:	0800d61d 	.word	0x0800d61d
 800d010:	0800d61d 	.word	0x0800d61d
 800d014:	0800d55d 	.word	0x0800d55d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d018:	f7fa fce6 	bl	80079e8 <HAL_RCC_GetPCLK1Freq>
 800d01c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d022:	2b00      	cmp	r3, #0
 800d024:	d044      	beq.n	800d0b0 <UART_SetConfig+0x1d40>
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d02a:	2b01      	cmp	r3, #1
 800d02c:	d03e      	beq.n	800d0ac <UART_SetConfig+0x1d3c>
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d032:	2b02      	cmp	r3, #2
 800d034:	d038      	beq.n	800d0a8 <UART_SetConfig+0x1d38>
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d03a:	2b03      	cmp	r3, #3
 800d03c:	d032      	beq.n	800d0a4 <UART_SetConfig+0x1d34>
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d042:	2b04      	cmp	r3, #4
 800d044:	d02c      	beq.n	800d0a0 <UART_SetConfig+0x1d30>
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d04a:	2b05      	cmp	r3, #5
 800d04c:	d026      	beq.n	800d09c <UART_SetConfig+0x1d2c>
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d052:	2b06      	cmp	r3, #6
 800d054:	d020      	beq.n	800d098 <UART_SetConfig+0x1d28>
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d05a:	2b07      	cmp	r3, #7
 800d05c:	d01a      	beq.n	800d094 <UART_SetConfig+0x1d24>
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d062:	2b08      	cmp	r3, #8
 800d064:	d014      	beq.n	800d090 <UART_SetConfig+0x1d20>
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d06a:	2b09      	cmp	r3, #9
 800d06c:	d00e      	beq.n	800d08c <UART_SetConfig+0x1d1c>
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d072:	2b0a      	cmp	r3, #10
 800d074:	d008      	beq.n	800d088 <UART_SetConfig+0x1d18>
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d07a:	2b0b      	cmp	r3, #11
 800d07c:	d102      	bne.n	800d084 <UART_SetConfig+0x1d14>
 800d07e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d082:	e016      	b.n	800d0b2 <UART_SetConfig+0x1d42>
 800d084:	2301      	movs	r3, #1
 800d086:	e014      	b.n	800d0b2 <UART_SetConfig+0x1d42>
 800d088:	2380      	movs	r3, #128	; 0x80
 800d08a:	e012      	b.n	800d0b2 <UART_SetConfig+0x1d42>
 800d08c:	2340      	movs	r3, #64	; 0x40
 800d08e:	e010      	b.n	800d0b2 <UART_SetConfig+0x1d42>
 800d090:	2320      	movs	r3, #32
 800d092:	e00e      	b.n	800d0b2 <UART_SetConfig+0x1d42>
 800d094:	2310      	movs	r3, #16
 800d096:	e00c      	b.n	800d0b2 <UART_SetConfig+0x1d42>
 800d098:	230c      	movs	r3, #12
 800d09a:	e00a      	b.n	800d0b2 <UART_SetConfig+0x1d42>
 800d09c:	230a      	movs	r3, #10
 800d09e:	e008      	b.n	800d0b2 <UART_SetConfig+0x1d42>
 800d0a0:	2308      	movs	r3, #8
 800d0a2:	e006      	b.n	800d0b2 <UART_SetConfig+0x1d42>
 800d0a4:	2306      	movs	r3, #6
 800d0a6:	e004      	b.n	800d0b2 <UART_SetConfig+0x1d42>
 800d0a8:	2304      	movs	r3, #4
 800d0aa:	e002      	b.n	800d0b2 <UART_SetConfig+0x1d42>
 800d0ac:	2302      	movs	r3, #2
 800d0ae:	e000      	b.n	800d0b2 <UART_SetConfig+0x1d42>
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0b4:	fbb2 f2f3 	udiv	r2, r2, r3
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	685b      	ldr	r3, [r3, #4]
 800d0bc:	085b      	lsrs	r3, r3, #1
 800d0be:	441a      	add	r2, r3
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	685b      	ldr	r3, [r3, #4]
 800d0c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0c8:	b29b      	uxth	r3, r3
 800d0ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d0cc:	e2aa      	b.n	800d624 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d0ce:	f7fa fca1 	bl	8007a14 <HAL_RCC_GetPCLK2Freq>
 800d0d2:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d044      	beq.n	800d166 <UART_SetConfig+0x1df6>
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0e0:	2b01      	cmp	r3, #1
 800d0e2:	d03e      	beq.n	800d162 <UART_SetConfig+0x1df2>
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0e8:	2b02      	cmp	r3, #2
 800d0ea:	d038      	beq.n	800d15e <UART_SetConfig+0x1dee>
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0f0:	2b03      	cmp	r3, #3
 800d0f2:	d032      	beq.n	800d15a <UART_SetConfig+0x1dea>
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0f8:	2b04      	cmp	r3, #4
 800d0fa:	d02c      	beq.n	800d156 <UART_SetConfig+0x1de6>
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d100:	2b05      	cmp	r3, #5
 800d102:	d026      	beq.n	800d152 <UART_SetConfig+0x1de2>
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d108:	2b06      	cmp	r3, #6
 800d10a:	d020      	beq.n	800d14e <UART_SetConfig+0x1dde>
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d110:	2b07      	cmp	r3, #7
 800d112:	d01a      	beq.n	800d14a <UART_SetConfig+0x1dda>
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d118:	2b08      	cmp	r3, #8
 800d11a:	d014      	beq.n	800d146 <UART_SetConfig+0x1dd6>
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d120:	2b09      	cmp	r3, #9
 800d122:	d00e      	beq.n	800d142 <UART_SetConfig+0x1dd2>
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d128:	2b0a      	cmp	r3, #10
 800d12a:	d008      	beq.n	800d13e <UART_SetConfig+0x1dce>
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d130:	2b0b      	cmp	r3, #11
 800d132:	d102      	bne.n	800d13a <UART_SetConfig+0x1dca>
 800d134:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d138:	e016      	b.n	800d168 <UART_SetConfig+0x1df8>
 800d13a:	2301      	movs	r3, #1
 800d13c:	e014      	b.n	800d168 <UART_SetConfig+0x1df8>
 800d13e:	2380      	movs	r3, #128	; 0x80
 800d140:	e012      	b.n	800d168 <UART_SetConfig+0x1df8>
 800d142:	2340      	movs	r3, #64	; 0x40
 800d144:	e010      	b.n	800d168 <UART_SetConfig+0x1df8>
 800d146:	2320      	movs	r3, #32
 800d148:	e00e      	b.n	800d168 <UART_SetConfig+0x1df8>
 800d14a:	2310      	movs	r3, #16
 800d14c:	e00c      	b.n	800d168 <UART_SetConfig+0x1df8>
 800d14e:	230c      	movs	r3, #12
 800d150:	e00a      	b.n	800d168 <UART_SetConfig+0x1df8>
 800d152:	230a      	movs	r3, #10
 800d154:	e008      	b.n	800d168 <UART_SetConfig+0x1df8>
 800d156:	2308      	movs	r3, #8
 800d158:	e006      	b.n	800d168 <UART_SetConfig+0x1df8>
 800d15a:	2306      	movs	r3, #6
 800d15c:	e004      	b.n	800d168 <UART_SetConfig+0x1df8>
 800d15e:	2304      	movs	r3, #4
 800d160:	e002      	b.n	800d168 <UART_SetConfig+0x1df8>
 800d162:	2302      	movs	r3, #2
 800d164:	e000      	b.n	800d168 <UART_SetConfig+0x1df8>
 800d166:	2301      	movs	r3, #1
 800d168:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d16a:	fbb2 f2f3 	udiv	r2, r2, r3
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	685b      	ldr	r3, [r3, #4]
 800d172:	085b      	lsrs	r3, r3, #1
 800d174:	441a      	add	r2, r3
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	685b      	ldr	r3, [r3, #4]
 800d17a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d17e:	b29b      	uxth	r3, r3
 800d180:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d182:	e24f      	b.n	800d624 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d184:	f107 0318 	add.w	r3, r7, #24
 800d188:	4618      	mov	r0, r3
 800d18a:	f7fb fde1 	bl	8008d50 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d18e:	69fa      	ldr	r2, [r7, #28]
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d194:	2b00      	cmp	r3, #0
 800d196:	d044      	beq.n	800d222 <UART_SetConfig+0x1eb2>
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d19c:	2b01      	cmp	r3, #1
 800d19e:	d03e      	beq.n	800d21e <UART_SetConfig+0x1eae>
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1a4:	2b02      	cmp	r3, #2
 800d1a6:	d038      	beq.n	800d21a <UART_SetConfig+0x1eaa>
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ac:	2b03      	cmp	r3, #3
 800d1ae:	d032      	beq.n	800d216 <UART_SetConfig+0x1ea6>
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1b4:	2b04      	cmp	r3, #4
 800d1b6:	d02c      	beq.n	800d212 <UART_SetConfig+0x1ea2>
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1bc:	2b05      	cmp	r3, #5
 800d1be:	d026      	beq.n	800d20e <UART_SetConfig+0x1e9e>
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1c4:	2b06      	cmp	r3, #6
 800d1c6:	d020      	beq.n	800d20a <UART_SetConfig+0x1e9a>
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1cc:	2b07      	cmp	r3, #7
 800d1ce:	d01a      	beq.n	800d206 <UART_SetConfig+0x1e96>
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1d4:	2b08      	cmp	r3, #8
 800d1d6:	d014      	beq.n	800d202 <UART_SetConfig+0x1e92>
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1dc:	2b09      	cmp	r3, #9
 800d1de:	d00e      	beq.n	800d1fe <UART_SetConfig+0x1e8e>
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1e4:	2b0a      	cmp	r3, #10
 800d1e6:	d008      	beq.n	800d1fa <UART_SetConfig+0x1e8a>
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ec:	2b0b      	cmp	r3, #11
 800d1ee:	d102      	bne.n	800d1f6 <UART_SetConfig+0x1e86>
 800d1f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d1f4:	e016      	b.n	800d224 <UART_SetConfig+0x1eb4>
 800d1f6:	2301      	movs	r3, #1
 800d1f8:	e014      	b.n	800d224 <UART_SetConfig+0x1eb4>
 800d1fa:	2380      	movs	r3, #128	; 0x80
 800d1fc:	e012      	b.n	800d224 <UART_SetConfig+0x1eb4>
 800d1fe:	2340      	movs	r3, #64	; 0x40
 800d200:	e010      	b.n	800d224 <UART_SetConfig+0x1eb4>
 800d202:	2320      	movs	r3, #32
 800d204:	e00e      	b.n	800d224 <UART_SetConfig+0x1eb4>
 800d206:	2310      	movs	r3, #16
 800d208:	e00c      	b.n	800d224 <UART_SetConfig+0x1eb4>
 800d20a:	230c      	movs	r3, #12
 800d20c:	e00a      	b.n	800d224 <UART_SetConfig+0x1eb4>
 800d20e:	230a      	movs	r3, #10
 800d210:	e008      	b.n	800d224 <UART_SetConfig+0x1eb4>
 800d212:	2308      	movs	r3, #8
 800d214:	e006      	b.n	800d224 <UART_SetConfig+0x1eb4>
 800d216:	2306      	movs	r3, #6
 800d218:	e004      	b.n	800d224 <UART_SetConfig+0x1eb4>
 800d21a:	2304      	movs	r3, #4
 800d21c:	e002      	b.n	800d224 <UART_SetConfig+0x1eb4>
 800d21e:	2302      	movs	r3, #2
 800d220:	e000      	b.n	800d224 <UART_SetConfig+0x1eb4>
 800d222:	2301      	movs	r3, #1
 800d224:	fbb2 f2f3 	udiv	r2, r2, r3
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	685b      	ldr	r3, [r3, #4]
 800d22c:	085b      	lsrs	r3, r3, #1
 800d22e:	441a      	add	r2, r3
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	685b      	ldr	r3, [r3, #4]
 800d234:	fbb2 f3f3 	udiv	r3, r2, r3
 800d238:	b29b      	uxth	r3, r3
 800d23a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d23c:	e1f2      	b.n	800d624 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d23e:	f107 030c 	add.w	r3, r7, #12
 800d242:	4618      	mov	r0, r3
 800d244:	f7fb fed0 	bl	8008fe8 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d248:	693a      	ldr	r2, [r7, #16]
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d044      	beq.n	800d2dc <UART_SetConfig+0x1f6c>
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d256:	2b01      	cmp	r3, #1
 800d258:	d03e      	beq.n	800d2d8 <UART_SetConfig+0x1f68>
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d25e:	2b02      	cmp	r3, #2
 800d260:	d038      	beq.n	800d2d4 <UART_SetConfig+0x1f64>
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d266:	2b03      	cmp	r3, #3
 800d268:	d032      	beq.n	800d2d0 <UART_SetConfig+0x1f60>
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d26e:	2b04      	cmp	r3, #4
 800d270:	d02c      	beq.n	800d2cc <UART_SetConfig+0x1f5c>
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d276:	2b05      	cmp	r3, #5
 800d278:	d026      	beq.n	800d2c8 <UART_SetConfig+0x1f58>
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d27e:	2b06      	cmp	r3, #6
 800d280:	d020      	beq.n	800d2c4 <UART_SetConfig+0x1f54>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d286:	2b07      	cmp	r3, #7
 800d288:	d01a      	beq.n	800d2c0 <UART_SetConfig+0x1f50>
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d28e:	2b08      	cmp	r3, #8
 800d290:	d014      	beq.n	800d2bc <UART_SetConfig+0x1f4c>
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d296:	2b09      	cmp	r3, #9
 800d298:	d00e      	beq.n	800d2b8 <UART_SetConfig+0x1f48>
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d29e:	2b0a      	cmp	r3, #10
 800d2a0:	d008      	beq.n	800d2b4 <UART_SetConfig+0x1f44>
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2a6:	2b0b      	cmp	r3, #11
 800d2a8:	d102      	bne.n	800d2b0 <UART_SetConfig+0x1f40>
 800d2aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d2ae:	e016      	b.n	800d2de <UART_SetConfig+0x1f6e>
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	e014      	b.n	800d2de <UART_SetConfig+0x1f6e>
 800d2b4:	2380      	movs	r3, #128	; 0x80
 800d2b6:	e012      	b.n	800d2de <UART_SetConfig+0x1f6e>
 800d2b8:	2340      	movs	r3, #64	; 0x40
 800d2ba:	e010      	b.n	800d2de <UART_SetConfig+0x1f6e>
 800d2bc:	2320      	movs	r3, #32
 800d2be:	e00e      	b.n	800d2de <UART_SetConfig+0x1f6e>
 800d2c0:	2310      	movs	r3, #16
 800d2c2:	e00c      	b.n	800d2de <UART_SetConfig+0x1f6e>
 800d2c4:	230c      	movs	r3, #12
 800d2c6:	e00a      	b.n	800d2de <UART_SetConfig+0x1f6e>
 800d2c8:	230a      	movs	r3, #10
 800d2ca:	e008      	b.n	800d2de <UART_SetConfig+0x1f6e>
 800d2cc:	2308      	movs	r3, #8
 800d2ce:	e006      	b.n	800d2de <UART_SetConfig+0x1f6e>
 800d2d0:	2306      	movs	r3, #6
 800d2d2:	e004      	b.n	800d2de <UART_SetConfig+0x1f6e>
 800d2d4:	2304      	movs	r3, #4
 800d2d6:	e002      	b.n	800d2de <UART_SetConfig+0x1f6e>
 800d2d8:	2302      	movs	r3, #2
 800d2da:	e000      	b.n	800d2de <UART_SetConfig+0x1f6e>
 800d2dc:	2301      	movs	r3, #1
 800d2de:	fbb2 f2f3 	udiv	r2, r2, r3
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	685b      	ldr	r3, [r3, #4]
 800d2e6:	085b      	lsrs	r3, r3, #1
 800d2e8:	441a      	add	r2, r3
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	685b      	ldr	r3, [r3, #4]
 800d2ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2f2:	b29b      	uxth	r3, r3
 800d2f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d2f6:	e195      	b.n	800d624 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d2f8:	4b87      	ldr	r3, [pc, #540]	; (800d518 <UART_SetConfig+0x21a8>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	f003 0320 	and.w	r3, r3, #32
 800d300:	2b00      	cmp	r3, #0
 800d302:	d05d      	beq.n	800d3c0 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d304:	4b84      	ldr	r3, [pc, #528]	; (800d518 <UART_SetConfig+0x21a8>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	08db      	lsrs	r3, r3, #3
 800d30a:	f003 0303 	and.w	r3, r3, #3
 800d30e:	4a83      	ldr	r2, [pc, #524]	; (800d51c <UART_SetConfig+0x21ac>)
 800d310:	40da      	lsrs	r2, r3
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d316:	2b00      	cmp	r3, #0
 800d318:	d044      	beq.n	800d3a4 <UART_SetConfig+0x2034>
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d31e:	2b01      	cmp	r3, #1
 800d320:	d03e      	beq.n	800d3a0 <UART_SetConfig+0x2030>
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d326:	2b02      	cmp	r3, #2
 800d328:	d038      	beq.n	800d39c <UART_SetConfig+0x202c>
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d32e:	2b03      	cmp	r3, #3
 800d330:	d032      	beq.n	800d398 <UART_SetConfig+0x2028>
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d336:	2b04      	cmp	r3, #4
 800d338:	d02c      	beq.n	800d394 <UART_SetConfig+0x2024>
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d33e:	2b05      	cmp	r3, #5
 800d340:	d026      	beq.n	800d390 <UART_SetConfig+0x2020>
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d346:	2b06      	cmp	r3, #6
 800d348:	d020      	beq.n	800d38c <UART_SetConfig+0x201c>
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d34e:	2b07      	cmp	r3, #7
 800d350:	d01a      	beq.n	800d388 <UART_SetConfig+0x2018>
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d356:	2b08      	cmp	r3, #8
 800d358:	d014      	beq.n	800d384 <UART_SetConfig+0x2014>
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d35e:	2b09      	cmp	r3, #9
 800d360:	d00e      	beq.n	800d380 <UART_SetConfig+0x2010>
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d366:	2b0a      	cmp	r3, #10
 800d368:	d008      	beq.n	800d37c <UART_SetConfig+0x200c>
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d36e:	2b0b      	cmp	r3, #11
 800d370:	d102      	bne.n	800d378 <UART_SetConfig+0x2008>
 800d372:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d376:	e016      	b.n	800d3a6 <UART_SetConfig+0x2036>
 800d378:	2301      	movs	r3, #1
 800d37a:	e014      	b.n	800d3a6 <UART_SetConfig+0x2036>
 800d37c:	2380      	movs	r3, #128	; 0x80
 800d37e:	e012      	b.n	800d3a6 <UART_SetConfig+0x2036>
 800d380:	2340      	movs	r3, #64	; 0x40
 800d382:	e010      	b.n	800d3a6 <UART_SetConfig+0x2036>
 800d384:	2320      	movs	r3, #32
 800d386:	e00e      	b.n	800d3a6 <UART_SetConfig+0x2036>
 800d388:	2310      	movs	r3, #16
 800d38a:	e00c      	b.n	800d3a6 <UART_SetConfig+0x2036>
 800d38c:	230c      	movs	r3, #12
 800d38e:	e00a      	b.n	800d3a6 <UART_SetConfig+0x2036>
 800d390:	230a      	movs	r3, #10
 800d392:	e008      	b.n	800d3a6 <UART_SetConfig+0x2036>
 800d394:	2308      	movs	r3, #8
 800d396:	e006      	b.n	800d3a6 <UART_SetConfig+0x2036>
 800d398:	2306      	movs	r3, #6
 800d39a:	e004      	b.n	800d3a6 <UART_SetConfig+0x2036>
 800d39c:	2304      	movs	r3, #4
 800d39e:	e002      	b.n	800d3a6 <UART_SetConfig+0x2036>
 800d3a0:	2302      	movs	r3, #2
 800d3a2:	e000      	b.n	800d3a6 <UART_SetConfig+0x2036>
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	fbb2 f2f3 	udiv	r2, r2, r3
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	685b      	ldr	r3, [r3, #4]
 800d3ae:	085b      	lsrs	r3, r3, #1
 800d3b0:	441a      	add	r2, r3
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	685b      	ldr	r3, [r3, #4]
 800d3b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3ba:	b29b      	uxth	r3, r3
 800d3bc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800d3be:	e131      	b.n	800d624 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d043      	beq.n	800d450 <UART_SetConfig+0x20e0>
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3cc:	2b01      	cmp	r3, #1
 800d3ce:	d03d      	beq.n	800d44c <UART_SetConfig+0x20dc>
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3d4:	2b02      	cmp	r3, #2
 800d3d6:	d037      	beq.n	800d448 <UART_SetConfig+0x20d8>
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3dc:	2b03      	cmp	r3, #3
 800d3de:	d031      	beq.n	800d444 <UART_SetConfig+0x20d4>
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3e4:	2b04      	cmp	r3, #4
 800d3e6:	d02b      	beq.n	800d440 <UART_SetConfig+0x20d0>
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ec:	2b05      	cmp	r3, #5
 800d3ee:	d025      	beq.n	800d43c <UART_SetConfig+0x20cc>
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3f4:	2b06      	cmp	r3, #6
 800d3f6:	d01f      	beq.n	800d438 <UART_SetConfig+0x20c8>
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3fc:	2b07      	cmp	r3, #7
 800d3fe:	d019      	beq.n	800d434 <UART_SetConfig+0x20c4>
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d404:	2b08      	cmp	r3, #8
 800d406:	d013      	beq.n	800d430 <UART_SetConfig+0x20c0>
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d40c:	2b09      	cmp	r3, #9
 800d40e:	d00d      	beq.n	800d42c <UART_SetConfig+0x20bc>
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d414:	2b0a      	cmp	r3, #10
 800d416:	d007      	beq.n	800d428 <UART_SetConfig+0x20b8>
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d41c:	2b0b      	cmp	r3, #11
 800d41e:	d101      	bne.n	800d424 <UART_SetConfig+0x20b4>
 800d420:	4b3f      	ldr	r3, [pc, #252]	; (800d520 <UART_SetConfig+0x21b0>)
 800d422:	e016      	b.n	800d452 <UART_SetConfig+0x20e2>
 800d424:	4b3d      	ldr	r3, [pc, #244]	; (800d51c <UART_SetConfig+0x21ac>)
 800d426:	e014      	b.n	800d452 <UART_SetConfig+0x20e2>
 800d428:	4b3e      	ldr	r3, [pc, #248]	; (800d524 <UART_SetConfig+0x21b4>)
 800d42a:	e012      	b.n	800d452 <UART_SetConfig+0x20e2>
 800d42c:	4b3e      	ldr	r3, [pc, #248]	; (800d528 <UART_SetConfig+0x21b8>)
 800d42e:	e010      	b.n	800d452 <UART_SetConfig+0x20e2>
 800d430:	4b3e      	ldr	r3, [pc, #248]	; (800d52c <UART_SetConfig+0x21bc>)
 800d432:	e00e      	b.n	800d452 <UART_SetConfig+0x20e2>
 800d434:	4b3e      	ldr	r3, [pc, #248]	; (800d530 <UART_SetConfig+0x21c0>)
 800d436:	e00c      	b.n	800d452 <UART_SetConfig+0x20e2>
 800d438:	4b3e      	ldr	r3, [pc, #248]	; (800d534 <UART_SetConfig+0x21c4>)
 800d43a:	e00a      	b.n	800d452 <UART_SetConfig+0x20e2>
 800d43c:	4b3e      	ldr	r3, [pc, #248]	; (800d538 <UART_SetConfig+0x21c8>)
 800d43e:	e008      	b.n	800d452 <UART_SetConfig+0x20e2>
 800d440:	4b3e      	ldr	r3, [pc, #248]	; (800d53c <UART_SetConfig+0x21cc>)
 800d442:	e006      	b.n	800d452 <UART_SetConfig+0x20e2>
 800d444:	4b3e      	ldr	r3, [pc, #248]	; (800d540 <UART_SetConfig+0x21d0>)
 800d446:	e004      	b.n	800d452 <UART_SetConfig+0x20e2>
 800d448:	4b3e      	ldr	r3, [pc, #248]	; (800d544 <UART_SetConfig+0x21d4>)
 800d44a:	e002      	b.n	800d452 <UART_SetConfig+0x20e2>
 800d44c:	4b3e      	ldr	r3, [pc, #248]	; (800d548 <UART_SetConfig+0x21d8>)
 800d44e:	e000      	b.n	800d452 <UART_SetConfig+0x20e2>
 800d450:	4b32      	ldr	r3, [pc, #200]	; (800d51c <UART_SetConfig+0x21ac>)
 800d452:	687a      	ldr	r2, [r7, #4]
 800d454:	6852      	ldr	r2, [r2, #4]
 800d456:	0852      	lsrs	r2, r2, #1
 800d458:	441a      	add	r2, r3
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	685b      	ldr	r3, [r3, #4]
 800d45e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d462:	b29b      	uxth	r3, r3
 800d464:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d466:	e0dd      	b.n	800d624 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d046      	beq.n	800d4fe <UART_SetConfig+0x218e>
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d474:	2b01      	cmp	r3, #1
 800d476:	d040      	beq.n	800d4fa <UART_SetConfig+0x218a>
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d47c:	2b02      	cmp	r3, #2
 800d47e:	d03a      	beq.n	800d4f6 <UART_SetConfig+0x2186>
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d484:	2b03      	cmp	r3, #3
 800d486:	d034      	beq.n	800d4f2 <UART_SetConfig+0x2182>
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d48c:	2b04      	cmp	r3, #4
 800d48e:	d02e      	beq.n	800d4ee <UART_SetConfig+0x217e>
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d494:	2b05      	cmp	r3, #5
 800d496:	d028      	beq.n	800d4ea <UART_SetConfig+0x217a>
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d49c:	2b06      	cmp	r3, #6
 800d49e:	d022      	beq.n	800d4e6 <UART_SetConfig+0x2176>
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4a4:	2b07      	cmp	r3, #7
 800d4a6:	d01c      	beq.n	800d4e2 <UART_SetConfig+0x2172>
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ac:	2b08      	cmp	r3, #8
 800d4ae:	d016      	beq.n	800d4de <UART_SetConfig+0x216e>
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4b4:	2b09      	cmp	r3, #9
 800d4b6:	d00f      	beq.n	800d4d8 <UART_SetConfig+0x2168>
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4bc:	2b0a      	cmp	r3, #10
 800d4be:	d008      	beq.n	800d4d2 <UART_SetConfig+0x2162>
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4c4:	2b0b      	cmp	r3, #11
 800d4c6:	d102      	bne.n	800d4ce <UART_SetConfig+0x215e>
 800d4c8:	f643 5309 	movw	r3, #15625	; 0x3d09
 800d4cc:	e018      	b.n	800d500 <UART_SetConfig+0x2190>
 800d4ce:	4b18      	ldr	r3, [pc, #96]	; (800d530 <UART_SetConfig+0x21c0>)
 800d4d0:	e016      	b.n	800d500 <UART_SetConfig+0x2190>
 800d4d2:	f647 2312 	movw	r3, #31250	; 0x7a12
 800d4d6:	e013      	b.n	800d500 <UART_SetConfig+0x2190>
 800d4d8:	f24f 4324 	movw	r3, #62500	; 0xf424
 800d4dc:	e010      	b.n	800d500 <UART_SetConfig+0x2190>
 800d4de:	4b1b      	ldr	r3, [pc, #108]	; (800d54c <UART_SetConfig+0x21dc>)
 800d4e0:	e00e      	b.n	800d500 <UART_SetConfig+0x2190>
 800d4e2:	4b0f      	ldr	r3, [pc, #60]	; (800d520 <UART_SetConfig+0x21b0>)
 800d4e4:	e00c      	b.n	800d500 <UART_SetConfig+0x2190>
 800d4e6:	4b1a      	ldr	r3, [pc, #104]	; (800d550 <UART_SetConfig+0x21e0>)
 800d4e8:	e00a      	b.n	800d500 <UART_SetConfig+0x2190>
 800d4ea:	4b1a      	ldr	r3, [pc, #104]	; (800d554 <UART_SetConfig+0x21e4>)
 800d4ec:	e008      	b.n	800d500 <UART_SetConfig+0x2190>
 800d4ee:	4b0d      	ldr	r3, [pc, #52]	; (800d524 <UART_SetConfig+0x21b4>)
 800d4f0:	e006      	b.n	800d500 <UART_SetConfig+0x2190>
 800d4f2:	4b19      	ldr	r3, [pc, #100]	; (800d558 <UART_SetConfig+0x21e8>)
 800d4f4:	e004      	b.n	800d500 <UART_SetConfig+0x2190>
 800d4f6:	4b0c      	ldr	r3, [pc, #48]	; (800d528 <UART_SetConfig+0x21b8>)
 800d4f8:	e002      	b.n	800d500 <UART_SetConfig+0x2190>
 800d4fa:	4b0c      	ldr	r3, [pc, #48]	; (800d52c <UART_SetConfig+0x21bc>)
 800d4fc:	e000      	b.n	800d500 <UART_SetConfig+0x2190>
 800d4fe:	4b0c      	ldr	r3, [pc, #48]	; (800d530 <UART_SetConfig+0x21c0>)
 800d500:	687a      	ldr	r2, [r7, #4]
 800d502:	6852      	ldr	r2, [r2, #4]
 800d504:	0852      	lsrs	r2, r2, #1
 800d506:	441a      	add	r2, r3
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	685b      	ldr	r3, [r3, #4]
 800d50c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d510:	b29b      	uxth	r3, r3
 800d512:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d514:	e086      	b.n	800d624 <UART_SetConfig+0x22b4>
 800d516:	bf00      	nop
 800d518:	58024400 	.word	0x58024400
 800d51c:	03d09000 	.word	0x03d09000
 800d520:	0003d090 	.word	0x0003d090
 800d524:	0007a120 	.word	0x0007a120
 800d528:	000f4240 	.word	0x000f4240
 800d52c:	001e8480 	.word	0x001e8480
 800d530:	003d0900 	.word	0x003d0900
 800d534:	00516155 	.word	0x00516155
 800d538:	0061a800 	.word	0x0061a800
 800d53c:	007a1200 	.word	0x007a1200
 800d540:	00a2c2aa 	.word	0x00a2c2aa
 800d544:	00f42400 	.word	0x00f42400
 800d548:	01e84800 	.word	0x01e84800
 800d54c:	0001e848 	.word	0x0001e848
 800d550:	00051615 	.word	0x00051615
 800d554:	00061a80 	.word	0x00061a80
 800d558:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d560:	2b00      	cmp	r3, #0
 800d562:	d04e      	beq.n	800d602 <UART_SetConfig+0x2292>
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d568:	2b01      	cmp	r3, #1
 800d56a:	d047      	beq.n	800d5fc <UART_SetConfig+0x228c>
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d570:	2b02      	cmp	r3, #2
 800d572:	d040      	beq.n	800d5f6 <UART_SetConfig+0x2286>
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d578:	2b03      	cmp	r3, #3
 800d57a:	d039      	beq.n	800d5f0 <UART_SetConfig+0x2280>
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d580:	2b04      	cmp	r3, #4
 800d582:	d032      	beq.n	800d5ea <UART_SetConfig+0x227a>
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d588:	2b05      	cmp	r3, #5
 800d58a:	d02b      	beq.n	800d5e4 <UART_SetConfig+0x2274>
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d590:	2b06      	cmp	r3, #6
 800d592:	d024      	beq.n	800d5de <UART_SetConfig+0x226e>
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d598:	2b07      	cmp	r3, #7
 800d59a:	d01d      	beq.n	800d5d8 <UART_SetConfig+0x2268>
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5a0:	2b08      	cmp	r3, #8
 800d5a2:	d016      	beq.n	800d5d2 <UART_SetConfig+0x2262>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5a8:	2b09      	cmp	r3, #9
 800d5aa:	d00f      	beq.n	800d5cc <UART_SetConfig+0x225c>
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5b0:	2b0a      	cmp	r3, #10
 800d5b2:	d008      	beq.n	800d5c6 <UART_SetConfig+0x2256>
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5b8:	2b0b      	cmp	r3, #11
 800d5ba:	d101      	bne.n	800d5c0 <UART_SetConfig+0x2250>
 800d5bc:	2380      	movs	r3, #128	; 0x80
 800d5be:	e022      	b.n	800d606 <UART_SetConfig+0x2296>
 800d5c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d5c4:	e01f      	b.n	800d606 <UART_SetConfig+0x2296>
 800d5c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d5ca:	e01c      	b.n	800d606 <UART_SetConfig+0x2296>
 800d5cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d5d0:	e019      	b.n	800d606 <UART_SetConfig+0x2296>
 800d5d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5d6:	e016      	b.n	800d606 <UART_SetConfig+0x2296>
 800d5d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d5dc:	e013      	b.n	800d606 <UART_SetConfig+0x2296>
 800d5de:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800d5e2:	e010      	b.n	800d606 <UART_SetConfig+0x2296>
 800d5e4:	f640 43cc 	movw	r3, #3276	; 0xccc
 800d5e8:	e00d      	b.n	800d606 <UART_SetConfig+0x2296>
 800d5ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d5ee:	e00a      	b.n	800d606 <UART_SetConfig+0x2296>
 800d5f0:	f241 5355 	movw	r3, #5461	; 0x1555
 800d5f4:	e007      	b.n	800d606 <UART_SetConfig+0x2296>
 800d5f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d5fa:	e004      	b.n	800d606 <UART_SetConfig+0x2296>
 800d5fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d600:	e001      	b.n	800d606 <UART_SetConfig+0x2296>
 800d602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d606:	687a      	ldr	r2, [r7, #4]
 800d608:	6852      	ldr	r2, [r2, #4]
 800d60a:	0852      	lsrs	r2, r2, #1
 800d60c:	441a      	add	r2, r3
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	685b      	ldr	r3, [r3, #4]
 800d612:	fbb2 f3f3 	udiv	r3, r2, r3
 800d616:	b29b      	uxth	r3, r3
 800d618:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d61a:	e003      	b.n	800d624 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800d61c:	2301      	movs	r3, #1
 800d61e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800d622:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d626:	2b0f      	cmp	r3, #15
 800d628:	d908      	bls.n	800d63c <UART_SetConfig+0x22cc>
 800d62a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d62c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d630:	d204      	bcs.n	800d63c <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d638:	60da      	str	r2, [r3, #12]
 800d63a:	e002      	b.n	800d642 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800d63c:	2301      	movs	r3, #1
 800d63e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2201      	movs	r2, #1
 800d646:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	2201      	movs	r2, #1
 800d64e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2200      	movs	r2, #0
 800d656:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2200      	movs	r2, #0
 800d65c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800d65e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800d662:	4618      	mov	r0, r3
 800d664:	3740      	adds	r7, #64	; 0x40
 800d666:	46bd      	mov	sp, r7
 800d668:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800d66c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d66c:	b480      	push	{r7}
 800d66e:	b083      	sub	sp, #12
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d678:	f003 0301 	and.w	r3, r3, #1
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d00a      	beq.n	800d696 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	685b      	ldr	r3, [r3, #4]
 800d686:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	430a      	orrs	r2, r1
 800d694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d69a:	f003 0302 	and.w	r3, r3, #2
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d00a      	beq.n	800d6b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	685b      	ldr	r3, [r3, #4]
 800d6a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	430a      	orrs	r2, r1
 800d6b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6bc:	f003 0304 	and.w	r3, r3, #4
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d00a      	beq.n	800d6da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	685b      	ldr	r3, [r3, #4]
 800d6ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	430a      	orrs	r2, r1
 800d6d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6de:	f003 0308 	and.w	r3, r3, #8
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d00a      	beq.n	800d6fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	685b      	ldr	r3, [r3, #4]
 800d6ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	430a      	orrs	r2, r1
 800d6fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d700:	f003 0310 	and.w	r3, r3, #16
 800d704:	2b00      	cmp	r3, #0
 800d706:	d00a      	beq.n	800d71e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	689b      	ldr	r3, [r3, #8]
 800d70e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	430a      	orrs	r2, r1
 800d71c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d722:	f003 0320 	and.w	r3, r3, #32
 800d726:	2b00      	cmp	r3, #0
 800d728:	d00a      	beq.n	800d740 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	689b      	ldr	r3, [r3, #8]
 800d730:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	430a      	orrs	r2, r1
 800d73e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d01a      	beq.n	800d782 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	685b      	ldr	r3, [r3, #4]
 800d752:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	430a      	orrs	r2, r1
 800d760:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d766:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d76a:	d10a      	bne.n	800d782 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	685b      	ldr	r3, [r3, #4]
 800d772:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	430a      	orrs	r2, r1
 800d780:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d00a      	beq.n	800d7a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	685b      	ldr	r3, [r3, #4]
 800d794:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	430a      	orrs	r2, r1
 800d7a2:	605a      	str	r2, [r3, #4]
  }
}
 800d7a4:	bf00      	nop
 800d7a6:	370c      	adds	r7, #12
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ae:	4770      	bx	lr

0800d7b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b086      	sub	sp, #24
 800d7b4:	af02      	add	r7, sp, #8
 800d7b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800d7c0:	f7f4 fea0 	bl	8002504 <HAL_GetTick>
 800d7c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	f003 0308 	and.w	r3, r3, #8
 800d7d0:	2b08      	cmp	r3, #8
 800d7d2:	d10e      	bne.n	800d7f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d7d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d7d8:	9300      	str	r3, [sp, #0]
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	2200      	movs	r2, #0
 800d7de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d7e2:	6878      	ldr	r0, [r7, #4]
 800d7e4:	f000 f82c 	bl	800d840 <UART_WaitOnFlagUntilTimeout>
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d001      	beq.n	800d7f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d7ee:	2303      	movs	r3, #3
 800d7f0:	e022      	b.n	800d838 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	f003 0304 	and.w	r3, r3, #4
 800d7fc:	2b04      	cmp	r3, #4
 800d7fe:	d10e      	bne.n	800d81e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d800:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d804:	9300      	str	r3, [sp, #0]
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	2200      	movs	r2, #0
 800d80a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f000 f816 	bl	800d840 <UART_WaitOnFlagUntilTimeout>
 800d814:	4603      	mov	r3, r0
 800d816:	2b00      	cmp	r3, #0
 800d818:	d001      	beq.n	800d81e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d81a:	2303      	movs	r3, #3
 800d81c:	e00c      	b.n	800d838 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2220      	movs	r2, #32
 800d822:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2220      	movs	r2, #32
 800d82a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2200      	movs	r2, #0
 800d832:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d836:	2300      	movs	r3, #0
}
 800d838:	4618      	mov	r0, r3
 800d83a:	3710      	adds	r7, #16
 800d83c:	46bd      	mov	sp, r7
 800d83e:	bd80      	pop	{r7, pc}

0800d840 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b084      	sub	sp, #16
 800d844:	af00      	add	r7, sp, #0
 800d846:	60f8      	str	r0, [r7, #12]
 800d848:	60b9      	str	r1, [r7, #8]
 800d84a:	603b      	str	r3, [r7, #0]
 800d84c:	4613      	mov	r3, r2
 800d84e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d850:	e062      	b.n	800d918 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d852:	69bb      	ldr	r3, [r7, #24]
 800d854:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d858:	d05e      	beq.n	800d918 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d85a:	f7f4 fe53 	bl	8002504 <HAL_GetTick>
 800d85e:	4602      	mov	r2, r0
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	1ad3      	subs	r3, r2, r3
 800d864:	69ba      	ldr	r2, [r7, #24]
 800d866:	429a      	cmp	r2, r3
 800d868:	d302      	bcc.n	800d870 <UART_WaitOnFlagUntilTimeout+0x30>
 800d86a:	69bb      	ldr	r3, [r7, #24]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d11d      	bne.n	800d8ac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	681a      	ldr	r2, [r3, #0]
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d87e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	689a      	ldr	r2, [r3, #8]
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	f022 0201 	bic.w	r2, r2, #1
 800d88e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	2220      	movs	r2, #32
 800d894:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	2220      	movs	r2, #32
 800d89c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800d8a8:	2303      	movs	r3, #3
 800d8aa:	e045      	b.n	800d938 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	f003 0304 	and.w	r3, r3, #4
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d02e      	beq.n	800d918 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	69db      	ldr	r3, [r3, #28]
 800d8c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d8c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d8c8:	d126      	bne.n	800d918 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d8d2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	681a      	ldr	r2, [r3, #0]
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d8e2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	689a      	ldr	r2, [r3, #8]
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	f022 0201 	bic.w	r2, r2, #1
 800d8f2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	2220      	movs	r2, #32
 800d8f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	2220      	movs	r2, #32
 800d900:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	2220      	movs	r2, #32
 800d908:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	2200      	movs	r2, #0
 800d910:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800d914:	2303      	movs	r3, #3
 800d916:	e00f      	b.n	800d938 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	69da      	ldr	r2, [r3, #28]
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	4013      	ands	r3, r2
 800d922:	68ba      	ldr	r2, [r7, #8]
 800d924:	429a      	cmp	r2, r3
 800d926:	bf0c      	ite	eq
 800d928:	2301      	moveq	r3, #1
 800d92a:	2300      	movne	r3, #0
 800d92c:	b2db      	uxtb	r3, r3
 800d92e:	461a      	mov	r2, r3
 800d930:	79fb      	ldrb	r3, [r7, #7]
 800d932:	429a      	cmp	r2, r3
 800d934:	d08d      	beq.n	800d852 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d936:	2300      	movs	r3, #0
}
 800d938:	4618      	mov	r0, r3
 800d93a:	3710      	adds	r7, #16
 800d93c:	46bd      	mov	sp, r7
 800d93e:	bd80      	pop	{r7, pc}

0800d940 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d940:	b480      	push	{r7}
 800d942:	b085      	sub	sp, #20
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d94e:	2b01      	cmp	r3, #1
 800d950:	d101      	bne.n	800d956 <HAL_UARTEx_DisableFifoMode+0x16>
 800d952:	2302      	movs	r3, #2
 800d954:	e027      	b.n	800d9a6 <HAL_UARTEx_DisableFifoMode+0x66>
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	2201      	movs	r2, #1
 800d95a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2224      	movs	r2, #36	; 0x24
 800d962:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	681a      	ldr	r2, [r3, #0]
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	f022 0201 	bic.w	r2, r2, #1
 800d97c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d984:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2200      	movs	r2, #0
 800d98a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	68fa      	ldr	r2, [r7, #12]
 800d992:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2220      	movs	r2, #32
 800d998:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2200      	movs	r2, #0
 800d9a0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d9a4:	2300      	movs	r3, #0
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3714      	adds	r7, #20
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b0:	4770      	bx	lr

0800d9b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d9b2:	b580      	push	{r7, lr}
 800d9b4:	b084      	sub	sp, #16
 800d9b6:	af00      	add	r7, sp, #0
 800d9b8:	6078      	str	r0, [r7, #4]
 800d9ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d9c2:	2b01      	cmp	r3, #1
 800d9c4:	d101      	bne.n	800d9ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d9c6:	2302      	movs	r3, #2
 800d9c8:	e02d      	b.n	800da26 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	2201      	movs	r2, #1
 800d9ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	2224      	movs	r2, #36	; 0x24
 800d9d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	681a      	ldr	r2, [r3, #0]
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	f022 0201 	bic.w	r2, r2, #1
 800d9f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	689b      	ldr	r3, [r3, #8]
 800d9f8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	683a      	ldr	r2, [r7, #0]
 800da02:	430a      	orrs	r2, r1
 800da04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800da06:	6878      	ldr	r0, [r7, #4]
 800da08:	f000 f850 	bl	800daac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	68fa      	ldr	r2, [r7, #12]
 800da12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2220      	movs	r2, #32
 800da18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2200      	movs	r2, #0
 800da20:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800da24:	2300      	movs	r3, #0
}
 800da26:	4618      	mov	r0, r3
 800da28:	3710      	adds	r7, #16
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}

0800da2e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800da2e:	b580      	push	{r7, lr}
 800da30:	b084      	sub	sp, #16
 800da32:	af00      	add	r7, sp, #0
 800da34:	6078      	str	r0, [r7, #4]
 800da36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800da3e:	2b01      	cmp	r3, #1
 800da40:	d101      	bne.n	800da46 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800da42:	2302      	movs	r3, #2
 800da44:	e02d      	b.n	800daa2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2201      	movs	r2, #1
 800da4a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2224      	movs	r2, #36	; 0x24
 800da52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	681a      	ldr	r2, [r3, #0]
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	f022 0201 	bic.w	r2, r2, #1
 800da6c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	689b      	ldr	r3, [r3, #8]
 800da74:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	683a      	ldr	r2, [r7, #0]
 800da7e:	430a      	orrs	r2, r1
 800da80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f000 f812 	bl	800daac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	68fa      	ldr	r2, [r7, #12]
 800da8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2220      	movs	r2, #32
 800da94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2200      	movs	r2, #0
 800da9c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800daa0:	2300      	movs	r3, #0
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	3710      	adds	r7, #16
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bd80      	pop	{r7, pc}
	...

0800daac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800daac:	b480      	push	{r7}
 800daae:	b089      	sub	sp, #36	; 0x24
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800dab4:	4a2f      	ldr	r2, [pc, #188]	; (800db74 <UARTEx_SetNbDataToProcess+0xc8>)
 800dab6:	f107 0314 	add.w	r3, r7, #20
 800daba:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dabe:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800dac2:	4a2d      	ldr	r2, [pc, #180]	; (800db78 <UARTEx_SetNbDataToProcess+0xcc>)
 800dac4:	f107 030c 	add.w	r3, r7, #12
 800dac8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dacc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d108      	bne.n	800daea <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2201      	movs	r2, #1
 800dadc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2201      	movs	r2, #1
 800dae4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dae8:	e03d      	b.n	800db66 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800daea:	2308      	movs	r3, #8
 800daec:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800daee:	2308      	movs	r3, #8
 800daf0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	689b      	ldr	r3, [r3, #8]
 800daf8:	0e5b      	lsrs	r3, r3, #25
 800dafa:	b2db      	uxtb	r3, r3
 800dafc:	f003 0307 	and.w	r3, r3, #7
 800db00:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	689b      	ldr	r3, [r3, #8]
 800db08:	0f5b      	lsrs	r3, r3, #29
 800db0a:	b2db      	uxtb	r3, r3
 800db0c:	f003 0307 	and.w	r3, r3, #7
 800db10:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800db12:	7fbb      	ldrb	r3, [r7, #30]
 800db14:	7f3a      	ldrb	r2, [r7, #28]
 800db16:	f107 0120 	add.w	r1, r7, #32
 800db1a:	440a      	add	r2, r1
 800db1c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800db20:	fb02 f303 	mul.w	r3, r2, r3
 800db24:	7f3a      	ldrb	r2, [r7, #28]
 800db26:	f107 0120 	add.w	r1, r7, #32
 800db2a:	440a      	add	r2, r1
 800db2c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800db30:	fb93 f3f2 	sdiv	r3, r3, r2
 800db34:	b29a      	uxth	r2, r3
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800db3c:	7ffb      	ldrb	r3, [r7, #31]
 800db3e:	7f7a      	ldrb	r2, [r7, #29]
 800db40:	f107 0120 	add.w	r1, r7, #32
 800db44:	440a      	add	r2, r1
 800db46:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800db4a:	fb02 f303 	mul.w	r3, r2, r3
 800db4e:	7f7a      	ldrb	r2, [r7, #29]
 800db50:	f107 0120 	add.w	r1, r7, #32
 800db54:	440a      	add	r2, r1
 800db56:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800db5a:	fb93 f3f2 	sdiv	r3, r3, r2
 800db5e:	b29a      	uxth	r2, r3
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800db66:	bf00      	nop
 800db68:	3724      	adds	r7, #36	; 0x24
 800db6a:	46bd      	mov	sp, r7
 800db6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db70:	4770      	bx	lr
 800db72:	bf00      	nop
 800db74:	08011c7c 	.word	0x08011c7c
 800db78:	08011c84 	.word	0x08011c84

0800db7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800db7c:	b084      	sub	sp, #16
 800db7e:	b580      	push	{r7, lr}
 800db80:	b084      	sub	sp, #16
 800db82:	af00      	add	r7, sp, #0
 800db84:	6078      	str	r0, [r7, #4]
 800db86:	f107 001c 	add.w	r0, r7, #28
 800db8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800db8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db90:	2b01      	cmp	r3, #1
 800db92:	d120      	bne.n	800dbd6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	68da      	ldr	r2, [r3, #12]
 800dba4:	4b25      	ldr	r3, [pc, #148]	; (800dc3c <USB_CoreInit+0xc0>)
 800dba6:	4013      	ands	r3, r2
 800dba8:	687a      	ldr	r2, [r7, #4]
 800dbaa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	68db      	ldr	r3, [r3, #12]
 800dbb0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800dbb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbba:	2b01      	cmp	r3, #1
 800dbbc:	d105      	bne.n	800dbca <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	68db      	ldr	r3, [r3, #12]
 800dbc2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	f001 fa66 	bl	800f09c <USB_CoreReset>
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	73fb      	strb	r3, [r7, #15]
 800dbd4:	e01a      	b.n	800dc0c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	68db      	ldr	r3, [r3, #12]
 800dbda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800dbe2:	6878      	ldr	r0, [r7, #4]
 800dbe4:	f001 fa5a 	bl	800f09c <USB_CoreReset>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800dbec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d106      	bne.n	800dc00 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbf6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	639a      	str	r2, [r3, #56]	; 0x38
 800dbfe:	e005      	b.n	800dc0c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800dc0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc0e:	2b01      	cmp	r3, #1
 800dc10:	d10b      	bne.n	800dc2a <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	689b      	ldr	r3, [r3, #8]
 800dc16:	f043 0206 	orr.w	r2, r3, #6
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	689b      	ldr	r3, [r3, #8]
 800dc22:	f043 0220 	orr.w	r2, r3, #32
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800dc2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3710      	adds	r7, #16
 800dc30:	46bd      	mov	sp, r7
 800dc32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dc36:	b004      	add	sp, #16
 800dc38:	4770      	bx	lr
 800dc3a:	bf00      	nop
 800dc3c:	ffbdffbf 	.word	0xffbdffbf

0800dc40 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800dc40:	b480      	push	{r7}
 800dc42:	b087      	sub	sp, #28
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	60f8      	str	r0, [r7, #12]
 800dc48:	60b9      	str	r1, [r7, #8]
 800dc4a:	4613      	mov	r3, r2
 800dc4c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800dc4e:	79fb      	ldrb	r3, [r7, #7]
 800dc50:	2b02      	cmp	r3, #2
 800dc52:	d165      	bne.n	800dd20 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	4a41      	ldr	r2, [pc, #260]	; (800dd5c <USB_SetTurnaroundTime+0x11c>)
 800dc58:	4293      	cmp	r3, r2
 800dc5a:	d906      	bls.n	800dc6a <USB_SetTurnaroundTime+0x2a>
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	4a40      	ldr	r2, [pc, #256]	; (800dd60 <USB_SetTurnaroundTime+0x120>)
 800dc60:	4293      	cmp	r3, r2
 800dc62:	d802      	bhi.n	800dc6a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800dc64:	230f      	movs	r3, #15
 800dc66:	617b      	str	r3, [r7, #20]
 800dc68:	e062      	b.n	800dd30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	4a3c      	ldr	r2, [pc, #240]	; (800dd60 <USB_SetTurnaroundTime+0x120>)
 800dc6e:	4293      	cmp	r3, r2
 800dc70:	d906      	bls.n	800dc80 <USB_SetTurnaroundTime+0x40>
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	4a3b      	ldr	r2, [pc, #236]	; (800dd64 <USB_SetTurnaroundTime+0x124>)
 800dc76:	4293      	cmp	r3, r2
 800dc78:	d802      	bhi.n	800dc80 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800dc7a:	230e      	movs	r3, #14
 800dc7c:	617b      	str	r3, [r7, #20]
 800dc7e:	e057      	b.n	800dd30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800dc80:	68bb      	ldr	r3, [r7, #8]
 800dc82:	4a38      	ldr	r2, [pc, #224]	; (800dd64 <USB_SetTurnaroundTime+0x124>)
 800dc84:	4293      	cmp	r3, r2
 800dc86:	d906      	bls.n	800dc96 <USB_SetTurnaroundTime+0x56>
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	4a37      	ldr	r2, [pc, #220]	; (800dd68 <USB_SetTurnaroundTime+0x128>)
 800dc8c:	4293      	cmp	r3, r2
 800dc8e:	d802      	bhi.n	800dc96 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800dc90:	230d      	movs	r3, #13
 800dc92:	617b      	str	r3, [r7, #20]
 800dc94:	e04c      	b.n	800dd30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	4a33      	ldr	r2, [pc, #204]	; (800dd68 <USB_SetTurnaroundTime+0x128>)
 800dc9a:	4293      	cmp	r3, r2
 800dc9c:	d906      	bls.n	800dcac <USB_SetTurnaroundTime+0x6c>
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	4a32      	ldr	r2, [pc, #200]	; (800dd6c <USB_SetTurnaroundTime+0x12c>)
 800dca2:	4293      	cmp	r3, r2
 800dca4:	d802      	bhi.n	800dcac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800dca6:	230c      	movs	r3, #12
 800dca8:	617b      	str	r3, [r7, #20]
 800dcaa:	e041      	b.n	800dd30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	4a2f      	ldr	r2, [pc, #188]	; (800dd6c <USB_SetTurnaroundTime+0x12c>)
 800dcb0:	4293      	cmp	r3, r2
 800dcb2:	d906      	bls.n	800dcc2 <USB_SetTurnaroundTime+0x82>
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	4a2e      	ldr	r2, [pc, #184]	; (800dd70 <USB_SetTurnaroundTime+0x130>)
 800dcb8:	4293      	cmp	r3, r2
 800dcba:	d802      	bhi.n	800dcc2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800dcbc:	230b      	movs	r3, #11
 800dcbe:	617b      	str	r3, [r7, #20]
 800dcc0:	e036      	b.n	800dd30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	4a2a      	ldr	r2, [pc, #168]	; (800dd70 <USB_SetTurnaroundTime+0x130>)
 800dcc6:	4293      	cmp	r3, r2
 800dcc8:	d906      	bls.n	800dcd8 <USB_SetTurnaroundTime+0x98>
 800dcca:	68bb      	ldr	r3, [r7, #8]
 800dccc:	4a29      	ldr	r2, [pc, #164]	; (800dd74 <USB_SetTurnaroundTime+0x134>)
 800dcce:	4293      	cmp	r3, r2
 800dcd0:	d802      	bhi.n	800dcd8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800dcd2:	230a      	movs	r3, #10
 800dcd4:	617b      	str	r3, [r7, #20]
 800dcd6:	e02b      	b.n	800dd30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800dcd8:	68bb      	ldr	r3, [r7, #8]
 800dcda:	4a26      	ldr	r2, [pc, #152]	; (800dd74 <USB_SetTurnaroundTime+0x134>)
 800dcdc:	4293      	cmp	r3, r2
 800dcde:	d906      	bls.n	800dcee <USB_SetTurnaroundTime+0xae>
 800dce0:	68bb      	ldr	r3, [r7, #8]
 800dce2:	4a25      	ldr	r2, [pc, #148]	; (800dd78 <USB_SetTurnaroundTime+0x138>)
 800dce4:	4293      	cmp	r3, r2
 800dce6:	d802      	bhi.n	800dcee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800dce8:	2309      	movs	r3, #9
 800dcea:	617b      	str	r3, [r7, #20]
 800dcec:	e020      	b.n	800dd30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800dcee:	68bb      	ldr	r3, [r7, #8]
 800dcf0:	4a21      	ldr	r2, [pc, #132]	; (800dd78 <USB_SetTurnaroundTime+0x138>)
 800dcf2:	4293      	cmp	r3, r2
 800dcf4:	d906      	bls.n	800dd04 <USB_SetTurnaroundTime+0xc4>
 800dcf6:	68bb      	ldr	r3, [r7, #8]
 800dcf8:	4a20      	ldr	r2, [pc, #128]	; (800dd7c <USB_SetTurnaroundTime+0x13c>)
 800dcfa:	4293      	cmp	r3, r2
 800dcfc:	d802      	bhi.n	800dd04 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800dcfe:	2308      	movs	r3, #8
 800dd00:	617b      	str	r3, [r7, #20]
 800dd02:	e015      	b.n	800dd30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800dd04:	68bb      	ldr	r3, [r7, #8]
 800dd06:	4a1d      	ldr	r2, [pc, #116]	; (800dd7c <USB_SetTurnaroundTime+0x13c>)
 800dd08:	4293      	cmp	r3, r2
 800dd0a:	d906      	bls.n	800dd1a <USB_SetTurnaroundTime+0xda>
 800dd0c:	68bb      	ldr	r3, [r7, #8]
 800dd0e:	4a1c      	ldr	r2, [pc, #112]	; (800dd80 <USB_SetTurnaroundTime+0x140>)
 800dd10:	4293      	cmp	r3, r2
 800dd12:	d802      	bhi.n	800dd1a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800dd14:	2307      	movs	r3, #7
 800dd16:	617b      	str	r3, [r7, #20]
 800dd18:	e00a      	b.n	800dd30 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800dd1a:	2306      	movs	r3, #6
 800dd1c:	617b      	str	r3, [r7, #20]
 800dd1e:	e007      	b.n	800dd30 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800dd20:	79fb      	ldrb	r3, [r7, #7]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d102      	bne.n	800dd2c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800dd26:	2309      	movs	r3, #9
 800dd28:	617b      	str	r3, [r7, #20]
 800dd2a:	e001      	b.n	800dd30 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800dd2c:	2309      	movs	r3, #9
 800dd2e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	68db      	ldr	r3, [r3, #12]
 800dd34:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	68da      	ldr	r2, [r3, #12]
 800dd40:	697b      	ldr	r3, [r7, #20]
 800dd42:	029b      	lsls	r3, r3, #10
 800dd44:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800dd48:	431a      	orrs	r2, r3
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800dd4e:	2300      	movs	r3, #0
}
 800dd50:	4618      	mov	r0, r3
 800dd52:	371c      	adds	r7, #28
 800dd54:	46bd      	mov	sp, r7
 800dd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5a:	4770      	bx	lr
 800dd5c:	00d8acbf 	.word	0x00d8acbf
 800dd60:	00e4e1bf 	.word	0x00e4e1bf
 800dd64:	00f423ff 	.word	0x00f423ff
 800dd68:	0106737f 	.word	0x0106737f
 800dd6c:	011a499f 	.word	0x011a499f
 800dd70:	01312cff 	.word	0x01312cff
 800dd74:	014ca43f 	.word	0x014ca43f
 800dd78:	016e35ff 	.word	0x016e35ff
 800dd7c:	01a6ab1f 	.word	0x01a6ab1f
 800dd80:	01e847ff 	.word	0x01e847ff

0800dd84 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800dd84:	b480      	push	{r7}
 800dd86:	b083      	sub	sp, #12
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	689b      	ldr	r3, [r3, #8]
 800dd90:	f043 0201 	orr.w	r2, r3, #1
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dd98:	2300      	movs	r3, #0
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	370c      	adds	r7, #12
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda4:	4770      	bx	lr

0800dda6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800dda6:	b480      	push	{r7}
 800dda8:	b083      	sub	sp, #12
 800ddaa:	af00      	add	r7, sp, #0
 800ddac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	689b      	ldr	r3, [r3, #8]
 800ddb2:	f023 0201 	bic.w	r2, r3, #1
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ddba:	2300      	movs	r3, #0
}
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	370c      	adds	r7, #12
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc6:	4770      	bx	lr

0800ddc8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b082      	sub	sp, #8
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
 800ddd0:	460b      	mov	r3, r1
 800ddd2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	68db      	ldr	r3, [r3, #12]
 800ddd8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800dde0:	78fb      	ldrb	r3, [r7, #3]
 800dde2:	2b01      	cmp	r3, #1
 800dde4:	d106      	bne.n	800ddf4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	68db      	ldr	r3, [r3, #12]
 800ddea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	60da      	str	r2, [r3, #12]
 800ddf2:	e00b      	b.n	800de0c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800ddf4:	78fb      	ldrb	r3, [r7, #3]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d106      	bne.n	800de08 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	68db      	ldr	r3, [r3, #12]
 800ddfe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	60da      	str	r2, [r3, #12]
 800de06:	e001      	b.n	800de0c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800de08:	2301      	movs	r3, #1
 800de0a:	e003      	b.n	800de14 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800de0c:	2032      	movs	r0, #50	; 0x32
 800de0e:	f7f4 fb85 	bl	800251c <HAL_Delay>

  return HAL_OK;
 800de12:	2300      	movs	r3, #0
}
 800de14:	4618      	mov	r0, r3
 800de16:	3708      	adds	r7, #8
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}

0800de1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800de1c:	b084      	sub	sp, #16
 800de1e:	b580      	push	{r7, lr}
 800de20:	b086      	sub	sp, #24
 800de22:	af00      	add	r7, sp, #0
 800de24:	6078      	str	r0, [r7, #4]
 800de26:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800de2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800de2e:	2300      	movs	r3, #0
 800de30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800de36:	2300      	movs	r3, #0
 800de38:	613b      	str	r3, [r7, #16]
 800de3a:	e009      	b.n	800de50 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800de3c:	687a      	ldr	r2, [r7, #4]
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	3340      	adds	r3, #64	; 0x40
 800de42:	009b      	lsls	r3, r3, #2
 800de44:	4413      	add	r3, r2
 800de46:	2200      	movs	r2, #0
 800de48:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800de4a:	693b      	ldr	r3, [r7, #16]
 800de4c:	3301      	adds	r3, #1
 800de4e:	613b      	str	r3, [r7, #16]
 800de50:	693b      	ldr	r3, [r7, #16]
 800de52:	2b0e      	cmp	r3, #14
 800de54:	d9f2      	bls.n	800de3c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800de56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d11c      	bne.n	800de96 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de62:	685b      	ldr	r3, [r3, #4]
 800de64:	68fa      	ldr	r2, [r7, #12]
 800de66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800de6a:	f043 0302 	orr.w	r3, r3, #2
 800de6e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de74:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	601a      	str	r2, [r3, #0]
 800de94:	e005      	b.n	800dea2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de9a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dea8:	461a      	mov	r2, r3
 800deaa:	2300      	movs	r3, #0
 800deac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800deb4:	4619      	mov	r1, r3
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800debc:	461a      	mov	r2, r3
 800debe:	680b      	ldr	r3, [r1, #0]
 800dec0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dec4:	2b01      	cmp	r3, #1
 800dec6:	d10c      	bne.n	800dee2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800dec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deca:	2b00      	cmp	r3, #0
 800decc:	d104      	bne.n	800ded8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800dece:	2100      	movs	r1, #0
 800ded0:	6878      	ldr	r0, [r7, #4]
 800ded2:	f000 f949 	bl	800e168 <USB_SetDevSpeed>
 800ded6:	e008      	b.n	800deea <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ded8:	2101      	movs	r1, #1
 800deda:	6878      	ldr	r0, [r7, #4]
 800dedc:	f000 f944 	bl	800e168 <USB_SetDevSpeed>
 800dee0:	e003      	b.n	800deea <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800dee2:	2103      	movs	r1, #3
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	f000 f93f 	bl	800e168 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800deea:	2110      	movs	r1, #16
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f000 f8f3 	bl	800e0d8 <USB_FlushTxFifo>
 800def2:	4603      	mov	r3, r0
 800def4:	2b00      	cmp	r3, #0
 800def6:	d001      	beq.n	800defc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800def8:	2301      	movs	r3, #1
 800defa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800defc:	6878      	ldr	r0, [r7, #4]
 800defe:	f000 f911 	bl	800e124 <USB_FlushRxFifo>
 800df02:	4603      	mov	r3, r0
 800df04:	2b00      	cmp	r3, #0
 800df06:	d001      	beq.n	800df0c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800df08:	2301      	movs	r3, #1
 800df0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df12:	461a      	mov	r2, r3
 800df14:	2300      	movs	r3, #0
 800df16:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df1e:	461a      	mov	r2, r3
 800df20:	2300      	movs	r3, #0
 800df22:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df2a:	461a      	mov	r2, r3
 800df2c:	2300      	movs	r3, #0
 800df2e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800df30:	2300      	movs	r3, #0
 800df32:	613b      	str	r3, [r7, #16]
 800df34:	e043      	b.n	800dfbe <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800df36:	693b      	ldr	r3, [r7, #16]
 800df38:	015a      	lsls	r2, r3, #5
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	4413      	add	r3, r2
 800df3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800df48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800df4c:	d118      	bne.n	800df80 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800df4e:	693b      	ldr	r3, [r7, #16]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d10a      	bne.n	800df6a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800df54:	693b      	ldr	r3, [r7, #16]
 800df56:	015a      	lsls	r2, r3, #5
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	4413      	add	r3, r2
 800df5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df60:	461a      	mov	r2, r3
 800df62:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800df66:	6013      	str	r3, [r2, #0]
 800df68:	e013      	b.n	800df92 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800df6a:	693b      	ldr	r3, [r7, #16]
 800df6c:	015a      	lsls	r2, r3, #5
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	4413      	add	r3, r2
 800df72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df76:	461a      	mov	r2, r3
 800df78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800df7c:	6013      	str	r3, [r2, #0]
 800df7e:	e008      	b.n	800df92 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800df80:	693b      	ldr	r3, [r7, #16]
 800df82:	015a      	lsls	r2, r3, #5
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	4413      	add	r3, r2
 800df88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df8c:	461a      	mov	r2, r3
 800df8e:	2300      	movs	r3, #0
 800df90:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800df92:	693b      	ldr	r3, [r7, #16]
 800df94:	015a      	lsls	r2, r3, #5
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	4413      	add	r3, r2
 800df9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df9e:	461a      	mov	r2, r3
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800dfa4:	693b      	ldr	r3, [r7, #16]
 800dfa6:	015a      	lsls	r2, r3, #5
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	4413      	add	r3, r2
 800dfac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfb0:	461a      	mov	r2, r3
 800dfb2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800dfb6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dfb8:	693b      	ldr	r3, [r7, #16]
 800dfba:	3301      	adds	r3, #1
 800dfbc:	613b      	str	r3, [r7, #16]
 800dfbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc0:	693a      	ldr	r2, [r7, #16]
 800dfc2:	429a      	cmp	r2, r3
 800dfc4:	d3b7      	bcc.n	800df36 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	613b      	str	r3, [r7, #16]
 800dfca:	e043      	b.n	800e054 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dfcc:	693b      	ldr	r3, [r7, #16]
 800dfce:	015a      	lsls	r2, r3, #5
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	4413      	add	r3, r2
 800dfd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dfde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dfe2:	d118      	bne.n	800e016 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800dfe4:	693b      	ldr	r3, [r7, #16]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d10a      	bne.n	800e000 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800dfea:	693b      	ldr	r3, [r7, #16]
 800dfec:	015a      	lsls	r2, r3, #5
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	4413      	add	r3, r2
 800dff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dff6:	461a      	mov	r2, r3
 800dff8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dffc:	6013      	str	r3, [r2, #0]
 800dffe:	e013      	b.n	800e028 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e000:	693b      	ldr	r3, [r7, #16]
 800e002:	015a      	lsls	r2, r3, #5
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	4413      	add	r3, r2
 800e008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e00c:	461a      	mov	r2, r3
 800e00e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e012:	6013      	str	r3, [r2, #0]
 800e014:	e008      	b.n	800e028 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e016:	693b      	ldr	r3, [r7, #16]
 800e018:	015a      	lsls	r2, r3, #5
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	4413      	add	r3, r2
 800e01e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e022:	461a      	mov	r2, r3
 800e024:	2300      	movs	r3, #0
 800e026:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e028:	693b      	ldr	r3, [r7, #16]
 800e02a:	015a      	lsls	r2, r3, #5
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	4413      	add	r3, r2
 800e030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e034:	461a      	mov	r2, r3
 800e036:	2300      	movs	r3, #0
 800e038:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e03a:	693b      	ldr	r3, [r7, #16]
 800e03c:	015a      	lsls	r2, r3, #5
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	4413      	add	r3, r2
 800e042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e046:	461a      	mov	r2, r3
 800e048:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e04c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e04e:	693b      	ldr	r3, [r7, #16]
 800e050:	3301      	adds	r3, #1
 800e052:	613b      	str	r3, [r7, #16]
 800e054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e056:	693a      	ldr	r2, [r7, #16]
 800e058:	429a      	cmp	r2, r3
 800e05a:	d3b7      	bcc.n	800dfcc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e062:	691b      	ldr	r3, [r3, #16]
 800e064:	68fa      	ldr	r2, [r7, #12]
 800e066:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e06a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e06e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2200      	movs	r2, #0
 800e074:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e07c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e080:	2b00      	cmp	r3, #0
 800e082:	d105      	bne.n	800e090 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	699b      	ldr	r3, [r3, #24]
 800e088:	f043 0210 	orr.w	r2, r3, #16
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	699a      	ldr	r2, [r3, #24]
 800e094:	4b0e      	ldr	r3, [pc, #56]	; (800e0d0 <USB_DevInit+0x2b4>)
 800e096:	4313      	orrs	r3, r2
 800e098:	687a      	ldr	r2, [r7, #4]
 800e09a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e09c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d005      	beq.n	800e0ae <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	699b      	ldr	r3, [r3, #24]
 800e0a6:	f043 0208 	orr.w	r2, r3, #8
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e0ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0b0:	2b01      	cmp	r3, #1
 800e0b2:	d105      	bne.n	800e0c0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	699a      	ldr	r2, [r3, #24]
 800e0b8:	4b06      	ldr	r3, [pc, #24]	; (800e0d4 <USB_DevInit+0x2b8>)
 800e0ba:	4313      	orrs	r3, r2
 800e0bc:	687a      	ldr	r2, [r7, #4]
 800e0be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e0c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	3718      	adds	r7, #24
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e0cc:	b004      	add	sp, #16
 800e0ce:	4770      	bx	lr
 800e0d0:	803c3800 	.word	0x803c3800
 800e0d4:	40000004 	.word	0x40000004

0800e0d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e0d8:	b480      	push	{r7}
 800e0da:	b085      	sub	sp, #20
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
 800e0e0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	019b      	lsls	r3, r3, #6
 800e0ea:	f043 0220 	orr.w	r2, r3, #32
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	3301      	adds	r3, #1
 800e0f6:	60fb      	str	r3, [r7, #12]
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	4a09      	ldr	r2, [pc, #36]	; (800e120 <USB_FlushTxFifo+0x48>)
 800e0fc:	4293      	cmp	r3, r2
 800e0fe:	d901      	bls.n	800e104 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800e100:	2303      	movs	r3, #3
 800e102:	e006      	b.n	800e112 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	691b      	ldr	r3, [r3, #16]
 800e108:	f003 0320 	and.w	r3, r3, #32
 800e10c:	2b20      	cmp	r3, #32
 800e10e:	d0f0      	beq.n	800e0f2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800e110:	2300      	movs	r3, #0
}
 800e112:	4618      	mov	r0, r3
 800e114:	3714      	adds	r7, #20
 800e116:	46bd      	mov	sp, r7
 800e118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11c:	4770      	bx	lr
 800e11e:	bf00      	nop
 800e120:	00030d40 	.word	0x00030d40

0800e124 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e124:	b480      	push	{r7}
 800e126:	b085      	sub	sp, #20
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800e12c:	2300      	movs	r3, #0
 800e12e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2210      	movs	r2, #16
 800e134:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	3301      	adds	r3, #1
 800e13a:	60fb      	str	r3, [r7, #12]
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	4a09      	ldr	r2, [pc, #36]	; (800e164 <USB_FlushRxFifo+0x40>)
 800e140:	4293      	cmp	r3, r2
 800e142:	d901      	bls.n	800e148 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800e144:	2303      	movs	r3, #3
 800e146:	e006      	b.n	800e156 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	691b      	ldr	r3, [r3, #16]
 800e14c:	f003 0310 	and.w	r3, r3, #16
 800e150:	2b10      	cmp	r3, #16
 800e152:	d0f0      	beq.n	800e136 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800e154:	2300      	movs	r3, #0
}
 800e156:	4618      	mov	r0, r3
 800e158:	3714      	adds	r7, #20
 800e15a:	46bd      	mov	sp, r7
 800e15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e160:	4770      	bx	lr
 800e162:	bf00      	nop
 800e164:	00030d40 	.word	0x00030d40

0800e168 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e168:	b480      	push	{r7}
 800e16a:	b085      	sub	sp, #20
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
 800e170:	460b      	mov	r3, r1
 800e172:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e17e:	681a      	ldr	r2, [r3, #0]
 800e180:	78fb      	ldrb	r3, [r7, #3]
 800e182:	68f9      	ldr	r1, [r7, #12]
 800e184:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e188:	4313      	orrs	r3, r2
 800e18a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e18c:	2300      	movs	r3, #0
}
 800e18e:	4618      	mov	r0, r3
 800e190:	3714      	adds	r7, #20
 800e192:	46bd      	mov	sp, r7
 800e194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e198:	4770      	bx	lr

0800e19a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800e19a:	b480      	push	{r7}
 800e19c:	b087      	sub	sp, #28
 800e19e:	af00      	add	r7, sp, #0
 800e1a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e1a6:	693b      	ldr	r3, [r7, #16]
 800e1a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1ac:	689b      	ldr	r3, [r3, #8]
 800e1ae:	f003 0306 	and.w	r3, r3, #6
 800e1b2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d102      	bne.n	800e1c0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	75fb      	strb	r3, [r7, #23]
 800e1be:	e00a      	b.n	800e1d6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	2b02      	cmp	r3, #2
 800e1c4:	d002      	beq.n	800e1cc <USB_GetDevSpeed+0x32>
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	2b06      	cmp	r3, #6
 800e1ca:	d102      	bne.n	800e1d2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e1cc:	2302      	movs	r3, #2
 800e1ce:	75fb      	strb	r3, [r7, #23]
 800e1d0:	e001      	b.n	800e1d6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e1d2:	230f      	movs	r3, #15
 800e1d4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e1d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1d8:	4618      	mov	r0, r3
 800e1da:	371c      	adds	r7, #28
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e2:	4770      	bx	lr

0800e1e4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e1e4:	b480      	push	{r7}
 800e1e6:	b085      	sub	sp, #20
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
 800e1ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e1f2:	683b      	ldr	r3, [r7, #0]
 800e1f4:	781b      	ldrb	r3, [r3, #0]
 800e1f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	785b      	ldrb	r3, [r3, #1]
 800e1fc:	2b01      	cmp	r3, #1
 800e1fe:	d139      	bne.n	800e274 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e206:	69da      	ldr	r2, [r3, #28]
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	781b      	ldrb	r3, [r3, #0]
 800e20c:	f003 030f 	and.w	r3, r3, #15
 800e210:	2101      	movs	r1, #1
 800e212:	fa01 f303 	lsl.w	r3, r1, r3
 800e216:	b29b      	uxth	r3, r3
 800e218:	68f9      	ldr	r1, [r7, #12]
 800e21a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e21e:	4313      	orrs	r3, r2
 800e220:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e222:	68bb      	ldr	r3, [r7, #8]
 800e224:	015a      	lsls	r2, r3, #5
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	4413      	add	r3, r2
 800e22a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e234:	2b00      	cmp	r3, #0
 800e236:	d153      	bne.n	800e2e0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e238:	68bb      	ldr	r3, [r7, #8]
 800e23a:	015a      	lsls	r2, r3, #5
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	4413      	add	r3, r2
 800e240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e244:	681a      	ldr	r2, [r3, #0]
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	689b      	ldr	r3, [r3, #8]
 800e24a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	78db      	ldrb	r3, [r3, #3]
 800e252:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e254:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e256:	68bb      	ldr	r3, [r7, #8]
 800e258:	059b      	lsls	r3, r3, #22
 800e25a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e25c:	431a      	orrs	r2, r3
 800e25e:	68bb      	ldr	r3, [r7, #8]
 800e260:	0159      	lsls	r1, r3, #5
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	440b      	add	r3, r1
 800e266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e26a:	4619      	mov	r1, r3
 800e26c:	4b20      	ldr	r3, [pc, #128]	; (800e2f0 <USB_ActivateEndpoint+0x10c>)
 800e26e:	4313      	orrs	r3, r2
 800e270:	600b      	str	r3, [r1, #0]
 800e272:	e035      	b.n	800e2e0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e27a:	69da      	ldr	r2, [r3, #28]
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	781b      	ldrb	r3, [r3, #0]
 800e280:	f003 030f 	and.w	r3, r3, #15
 800e284:	2101      	movs	r1, #1
 800e286:	fa01 f303 	lsl.w	r3, r1, r3
 800e28a:	041b      	lsls	r3, r3, #16
 800e28c:	68f9      	ldr	r1, [r7, #12]
 800e28e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e292:	4313      	orrs	r3, r2
 800e294:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e296:	68bb      	ldr	r3, [r7, #8]
 800e298:	015a      	lsls	r2, r3, #5
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	4413      	add	r3, r2
 800e29e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d119      	bne.n	800e2e0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e2ac:	68bb      	ldr	r3, [r7, #8]
 800e2ae:	015a      	lsls	r2, r3, #5
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	4413      	add	r3, r2
 800e2b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2b8:	681a      	ldr	r2, [r3, #0]
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	689b      	ldr	r3, [r3, #8]
 800e2be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	78db      	ldrb	r3, [r3, #3]
 800e2c6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e2c8:	430b      	orrs	r3, r1
 800e2ca:	431a      	orrs	r2, r3
 800e2cc:	68bb      	ldr	r3, [r7, #8]
 800e2ce:	0159      	lsls	r1, r3, #5
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	440b      	add	r3, r1
 800e2d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2d8:	4619      	mov	r1, r3
 800e2da:	4b05      	ldr	r3, [pc, #20]	; (800e2f0 <USB_ActivateEndpoint+0x10c>)
 800e2dc:	4313      	orrs	r3, r2
 800e2de:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e2e0:	2300      	movs	r3, #0
}
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	3714      	adds	r7, #20
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ec:	4770      	bx	lr
 800e2ee:	bf00      	nop
 800e2f0:	10008000 	.word	0x10008000

0800e2f4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e2f4:	b480      	push	{r7}
 800e2f6:	b085      	sub	sp, #20
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
 800e2fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	781b      	ldrb	r3, [r3, #0]
 800e306:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	785b      	ldrb	r3, [r3, #1]
 800e30c:	2b01      	cmp	r3, #1
 800e30e:	d135      	bne.n	800e37c <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e316:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	781b      	ldrb	r3, [r3, #0]
 800e31c:	f003 030f 	and.w	r3, r3, #15
 800e320:	2101      	movs	r1, #1
 800e322:	fa01 f303 	lsl.w	r3, r1, r3
 800e326:	b29b      	uxth	r3, r3
 800e328:	43db      	mvns	r3, r3
 800e32a:	68f9      	ldr	r1, [r7, #12]
 800e32c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e330:	4013      	ands	r3, r2
 800e332:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e33a:	69da      	ldr	r2, [r3, #28]
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	781b      	ldrb	r3, [r3, #0]
 800e340:	f003 030f 	and.w	r3, r3, #15
 800e344:	2101      	movs	r1, #1
 800e346:	fa01 f303 	lsl.w	r3, r1, r3
 800e34a:	b29b      	uxth	r3, r3
 800e34c:	43db      	mvns	r3, r3
 800e34e:	68f9      	ldr	r1, [r7, #12]
 800e350:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e354:	4013      	ands	r3, r2
 800e356:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e358:	68bb      	ldr	r3, [r7, #8]
 800e35a:	015a      	lsls	r2, r3, #5
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	4413      	add	r3, r2
 800e360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e364:	681a      	ldr	r2, [r3, #0]
 800e366:	68bb      	ldr	r3, [r7, #8]
 800e368:	0159      	lsls	r1, r3, #5
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	440b      	add	r3, r1
 800e36e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e372:	4619      	mov	r1, r3
 800e374:	4b1f      	ldr	r3, [pc, #124]	; (800e3f4 <USB_DeactivateEndpoint+0x100>)
 800e376:	4013      	ands	r3, r2
 800e378:	600b      	str	r3, [r1, #0]
 800e37a:	e034      	b.n	800e3e6 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e382:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	781b      	ldrb	r3, [r3, #0]
 800e388:	f003 030f 	and.w	r3, r3, #15
 800e38c:	2101      	movs	r1, #1
 800e38e:	fa01 f303 	lsl.w	r3, r1, r3
 800e392:	041b      	lsls	r3, r3, #16
 800e394:	43db      	mvns	r3, r3
 800e396:	68f9      	ldr	r1, [r7, #12]
 800e398:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e39c:	4013      	ands	r3, r2
 800e39e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3a6:	69da      	ldr	r2, [r3, #28]
 800e3a8:	683b      	ldr	r3, [r7, #0]
 800e3aa:	781b      	ldrb	r3, [r3, #0]
 800e3ac:	f003 030f 	and.w	r3, r3, #15
 800e3b0:	2101      	movs	r1, #1
 800e3b2:	fa01 f303 	lsl.w	r3, r1, r3
 800e3b6:	041b      	lsls	r3, r3, #16
 800e3b8:	43db      	mvns	r3, r3
 800e3ba:	68f9      	ldr	r1, [r7, #12]
 800e3bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e3c0:	4013      	ands	r3, r2
 800e3c2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e3c4:	68bb      	ldr	r3, [r7, #8]
 800e3c6:	015a      	lsls	r2, r3, #5
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	4413      	add	r3, r2
 800e3cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3d0:	681a      	ldr	r2, [r3, #0]
 800e3d2:	68bb      	ldr	r3, [r7, #8]
 800e3d4:	0159      	lsls	r1, r3, #5
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	440b      	add	r3, r1
 800e3da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3de:	4619      	mov	r1, r3
 800e3e0:	4b05      	ldr	r3, [pc, #20]	; (800e3f8 <USB_DeactivateEndpoint+0x104>)
 800e3e2:	4013      	ands	r3, r2
 800e3e4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e3e6:	2300      	movs	r3, #0
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	3714      	adds	r7, #20
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f2:	4770      	bx	lr
 800e3f4:	ec337800 	.word	0xec337800
 800e3f8:	eff37800 	.word	0xeff37800

0800e3fc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b08a      	sub	sp, #40	; 0x28
 800e400:	af02      	add	r7, sp, #8
 800e402:	60f8      	str	r0, [r7, #12]
 800e404:	60b9      	str	r1, [r7, #8]
 800e406:	4613      	mov	r3, r2
 800e408:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e40e:	68bb      	ldr	r3, [r7, #8]
 800e410:	781b      	ldrb	r3, [r3, #0]
 800e412:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	785b      	ldrb	r3, [r3, #1]
 800e418:	2b01      	cmp	r3, #1
 800e41a:	f040 8163 	bne.w	800e6e4 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e41e:	68bb      	ldr	r3, [r7, #8]
 800e420:	695b      	ldr	r3, [r3, #20]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d132      	bne.n	800e48c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e426:	69bb      	ldr	r3, [r7, #24]
 800e428:	015a      	lsls	r2, r3, #5
 800e42a:	69fb      	ldr	r3, [r7, #28]
 800e42c:	4413      	add	r3, r2
 800e42e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e432:	691a      	ldr	r2, [r3, #16]
 800e434:	69bb      	ldr	r3, [r7, #24]
 800e436:	0159      	lsls	r1, r3, #5
 800e438:	69fb      	ldr	r3, [r7, #28]
 800e43a:	440b      	add	r3, r1
 800e43c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e440:	4619      	mov	r1, r3
 800e442:	4ba5      	ldr	r3, [pc, #660]	; (800e6d8 <USB_EPStartXfer+0x2dc>)
 800e444:	4013      	ands	r3, r2
 800e446:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e448:	69bb      	ldr	r3, [r7, #24]
 800e44a:	015a      	lsls	r2, r3, #5
 800e44c:	69fb      	ldr	r3, [r7, #28]
 800e44e:	4413      	add	r3, r2
 800e450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e454:	691b      	ldr	r3, [r3, #16]
 800e456:	69ba      	ldr	r2, [r7, #24]
 800e458:	0151      	lsls	r1, r2, #5
 800e45a:	69fa      	ldr	r2, [r7, #28]
 800e45c:	440a      	add	r2, r1
 800e45e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e462:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e466:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e468:	69bb      	ldr	r3, [r7, #24]
 800e46a:	015a      	lsls	r2, r3, #5
 800e46c:	69fb      	ldr	r3, [r7, #28]
 800e46e:	4413      	add	r3, r2
 800e470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e474:	691a      	ldr	r2, [r3, #16]
 800e476:	69bb      	ldr	r3, [r7, #24]
 800e478:	0159      	lsls	r1, r3, #5
 800e47a:	69fb      	ldr	r3, [r7, #28]
 800e47c:	440b      	add	r3, r1
 800e47e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e482:	4619      	mov	r1, r3
 800e484:	4b95      	ldr	r3, [pc, #596]	; (800e6dc <USB_EPStartXfer+0x2e0>)
 800e486:	4013      	ands	r3, r2
 800e488:	610b      	str	r3, [r1, #16]
 800e48a:	e074      	b.n	800e576 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e48c:	69bb      	ldr	r3, [r7, #24]
 800e48e:	015a      	lsls	r2, r3, #5
 800e490:	69fb      	ldr	r3, [r7, #28]
 800e492:	4413      	add	r3, r2
 800e494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e498:	691a      	ldr	r2, [r3, #16]
 800e49a:	69bb      	ldr	r3, [r7, #24]
 800e49c:	0159      	lsls	r1, r3, #5
 800e49e:	69fb      	ldr	r3, [r7, #28]
 800e4a0:	440b      	add	r3, r1
 800e4a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4a6:	4619      	mov	r1, r3
 800e4a8:	4b8c      	ldr	r3, [pc, #560]	; (800e6dc <USB_EPStartXfer+0x2e0>)
 800e4aa:	4013      	ands	r3, r2
 800e4ac:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e4ae:	69bb      	ldr	r3, [r7, #24]
 800e4b0:	015a      	lsls	r2, r3, #5
 800e4b2:	69fb      	ldr	r3, [r7, #28]
 800e4b4:	4413      	add	r3, r2
 800e4b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4ba:	691a      	ldr	r2, [r3, #16]
 800e4bc:	69bb      	ldr	r3, [r7, #24]
 800e4be:	0159      	lsls	r1, r3, #5
 800e4c0:	69fb      	ldr	r3, [r7, #28]
 800e4c2:	440b      	add	r3, r1
 800e4c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4c8:	4619      	mov	r1, r3
 800e4ca:	4b83      	ldr	r3, [pc, #524]	; (800e6d8 <USB_EPStartXfer+0x2dc>)
 800e4cc:	4013      	ands	r3, r2
 800e4ce:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e4d0:	69bb      	ldr	r3, [r7, #24]
 800e4d2:	015a      	lsls	r2, r3, #5
 800e4d4:	69fb      	ldr	r3, [r7, #28]
 800e4d6:	4413      	add	r3, r2
 800e4d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4dc:	691a      	ldr	r2, [r3, #16]
 800e4de:	68bb      	ldr	r3, [r7, #8]
 800e4e0:	6959      	ldr	r1, [r3, #20]
 800e4e2:	68bb      	ldr	r3, [r7, #8]
 800e4e4:	689b      	ldr	r3, [r3, #8]
 800e4e6:	440b      	add	r3, r1
 800e4e8:	1e59      	subs	r1, r3, #1
 800e4ea:	68bb      	ldr	r3, [r7, #8]
 800e4ec:	689b      	ldr	r3, [r3, #8]
 800e4ee:	fbb1 f3f3 	udiv	r3, r1, r3
 800e4f2:	04d9      	lsls	r1, r3, #19
 800e4f4:	4b7a      	ldr	r3, [pc, #488]	; (800e6e0 <USB_EPStartXfer+0x2e4>)
 800e4f6:	400b      	ands	r3, r1
 800e4f8:	69b9      	ldr	r1, [r7, #24]
 800e4fa:	0148      	lsls	r0, r1, #5
 800e4fc:	69f9      	ldr	r1, [r7, #28]
 800e4fe:	4401      	add	r1, r0
 800e500:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e504:	4313      	orrs	r3, r2
 800e506:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e508:	69bb      	ldr	r3, [r7, #24]
 800e50a:	015a      	lsls	r2, r3, #5
 800e50c:	69fb      	ldr	r3, [r7, #28]
 800e50e:	4413      	add	r3, r2
 800e510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e514:	691a      	ldr	r2, [r3, #16]
 800e516:	68bb      	ldr	r3, [r7, #8]
 800e518:	695b      	ldr	r3, [r3, #20]
 800e51a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e51e:	69b9      	ldr	r1, [r7, #24]
 800e520:	0148      	lsls	r0, r1, #5
 800e522:	69f9      	ldr	r1, [r7, #28]
 800e524:	4401      	add	r1, r0
 800e526:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e52a:	4313      	orrs	r3, r2
 800e52c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e52e:	68bb      	ldr	r3, [r7, #8]
 800e530:	78db      	ldrb	r3, [r3, #3]
 800e532:	2b01      	cmp	r3, #1
 800e534:	d11f      	bne.n	800e576 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e536:	69bb      	ldr	r3, [r7, #24]
 800e538:	015a      	lsls	r2, r3, #5
 800e53a:	69fb      	ldr	r3, [r7, #28]
 800e53c:	4413      	add	r3, r2
 800e53e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e542:	691b      	ldr	r3, [r3, #16]
 800e544:	69ba      	ldr	r2, [r7, #24]
 800e546:	0151      	lsls	r1, r2, #5
 800e548:	69fa      	ldr	r2, [r7, #28]
 800e54a:	440a      	add	r2, r1
 800e54c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e550:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800e554:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e556:	69bb      	ldr	r3, [r7, #24]
 800e558:	015a      	lsls	r2, r3, #5
 800e55a:	69fb      	ldr	r3, [r7, #28]
 800e55c:	4413      	add	r3, r2
 800e55e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e562:	691b      	ldr	r3, [r3, #16]
 800e564:	69ba      	ldr	r2, [r7, #24]
 800e566:	0151      	lsls	r1, r2, #5
 800e568:	69fa      	ldr	r2, [r7, #28]
 800e56a:	440a      	add	r2, r1
 800e56c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e570:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e574:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e576:	79fb      	ldrb	r3, [r7, #7]
 800e578:	2b01      	cmp	r3, #1
 800e57a:	d14b      	bne.n	800e614 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e57c:	68bb      	ldr	r3, [r7, #8]
 800e57e:	691b      	ldr	r3, [r3, #16]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d009      	beq.n	800e598 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e584:	69bb      	ldr	r3, [r7, #24]
 800e586:	015a      	lsls	r2, r3, #5
 800e588:	69fb      	ldr	r3, [r7, #28]
 800e58a:	4413      	add	r3, r2
 800e58c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e590:	461a      	mov	r2, r3
 800e592:	68bb      	ldr	r3, [r7, #8]
 800e594:	691b      	ldr	r3, [r3, #16]
 800e596:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e598:	68bb      	ldr	r3, [r7, #8]
 800e59a:	78db      	ldrb	r3, [r3, #3]
 800e59c:	2b01      	cmp	r3, #1
 800e59e:	d128      	bne.n	800e5f2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e5a0:	69fb      	ldr	r3, [r7, #28]
 800e5a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5a6:	689b      	ldr	r3, [r3, #8]
 800e5a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d110      	bne.n	800e5d2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e5b0:	69bb      	ldr	r3, [r7, #24]
 800e5b2:	015a      	lsls	r2, r3, #5
 800e5b4:	69fb      	ldr	r3, [r7, #28]
 800e5b6:	4413      	add	r3, r2
 800e5b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	69ba      	ldr	r2, [r7, #24]
 800e5c0:	0151      	lsls	r1, r2, #5
 800e5c2:	69fa      	ldr	r2, [r7, #28]
 800e5c4:	440a      	add	r2, r1
 800e5c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e5ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e5ce:	6013      	str	r3, [r2, #0]
 800e5d0:	e00f      	b.n	800e5f2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e5d2:	69bb      	ldr	r3, [r7, #24]
 800e5d4:	015a      	lsls	r2, r3, #5
 800e5d6:	69fb      	ldr	r3, [r7, #28]
 800e5d8:	4413      	add	r3, r2
 800e5da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	69ba      	ldr	r2, [r7, #24]
 800e5e2:	0151      	lsls	r1, r2, #5
 800e5e4:	69fa      	ldr	r2, [r7, #28]
 800e5e6:	440a      	add	r2, r1
 800e5e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e5ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e5f0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e5f2:	69bb      	ldr	r3, [r7, #24]
 800e5f4:	015a      	lsls	r2, r3, #5
 800e5f6:	69fb      	ldr	r3, [r7, #28]
 800e5f8:	4413      	add	r3, r2
 800e5fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	69ba      	ldr	r2, [r7, #24]
 800e602:	0151      	lsls	r1, r2, #5
 800e604:	69fa      	ldr	r2, [r7, #28]
 800e606:	440a      	add	r2, r1
 800e608:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e60c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e610:	6013      	str	r3, [r2, #0]
 800e612:	e133      	b.n	800e87c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e614:	69bb      	ldr	r3, [r7, #24]
 800e616:	015a      	lsls	r2, r3, #5
 800e618:	69fb      	ldr	r3, [r7, #28]
 800e61a:	4413      	add	r3, r2
 800e61c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	69ba      	ldr	r2, [r7, #24]
 800e624:	0151      	lsls	r1, r2, #5
 800e626:	69fa      	ldr	r2, [r7, #28]
 800e628:	440a      	add	r2, r1
 800e62a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e62e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e632:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e634:	68bb      	ldr	r3, [r7, #8]
 800e636:	78db      	ldrb	r3, [r3, #3]
 800e638:	2b01      	cmp	r3, #1
 800e63a:	d015      	beq.n	800e668 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	695b      	ldr	r3, [r3, #20]
 800e640:	2b00      	cmp	r3, #0
 800e642:	f000 811b 	beq.w	800e87c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e646:	69fb      	ldr	r3, [r7, #28]
 800e648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e64c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e64e:	68bb      	ldr	r3, [r7, #8]
 800e650:	781b      	ldrb	r3, [r3, #0]
 800e652:	f003 030f 	and.w	r3, r3, #15
 800e656:	2101      	movs	r1, #1
 800e658:	fa01 f303 	lsl.w	r3, r1, r3
 800e65c:	69f9      	ldr	r1, [r7, #28]
 800e65e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e662:	4313      	orrs	r3, r2
 800e664:	634b      	str	r3, [r1, #52]	; 0x34
 800e666:	e109      	b.n	800e87c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e668:	69fb      	ldr	r3, [r7, #28]
 800e66a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e66e:	689b      	ldr	r3, [r3, #8]
 800e670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e674:	2b00      	cmp	r3, #0
 800e676:	d110      	bne.n	800e69a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e678:	69bb      	ldr	r3, [r7, #24]
 800e67a:	015a      	lsls	r2, r3, #5
 800e67c:	69fb      	ldr	r3, [r7, #28]
 800e67e:	4413      	add	r3, r2
 800e680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	69ba      	ldr	r2, [r7, #24]
 800e688:	0151      	lsls	r1, r2, #5
 800e68a:	69fa      	ldr	r2, [r7, #28]
 800e68c:	440a      	add	r2, r1
 800e68e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e692:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e696:	6013      	str	r3, [r2, #0]
 800e698:	e00f      	b.n	800e6ba <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e69a:	69bb      	ldr	r3, [r7, #24]
 800e69c:	015a      	lsls	r2, r3, #5
 800e69e:	69fb      	ldr	r3, [r7, #28]
 800e6a0:	4413      	add	r3, r2
 800e6a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	69ba      	ldr	r2, [r7, #24]
 800e6aa:	0151      	lsls	r1, r2, #5
 800e6ac:	69fa      	ldr	r2, [r7, #28]
 800e6ae:	440a      	add	r2, r1
 800e6b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e6b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e6b8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e6ba:	68bb      	ldr	r3, [r7, #8]
 800e6bc:	68d9      	ldr	r1, [r3, #12]
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	781a      	ldrb	r2, [r3, #0]
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	695b      	ldr	r3, [r3, #20]
 800e6c6:	b298      	uxth	r0, r3
 800e6c8:	79fb      	ldrb	r3, [r7, #7]
 800e6ca:	9300      	str	r3, [sp, #0]
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	68f8      	ldr	r0, [r7, #12]
 800e6d0:	f000 fa38 	bl	800eb44 <USB_WritePacket>
 800e6d4:	e0d2      	b.n	800e87c <USB_EPStartXfer+0x480>
 800e6d6:	bf00      	nop
 800e6d8:	e007ffff 	.word	0xe007ffff
 800e6dc:	fff80000 	.word	0xfff80000
 800e6e0:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e6e4:	69bb      	ldr	r3, [r7, #24]
 800e6e6:	015a      	lsls	r2, r3, #5
 800e6e8:	69fb      	ldr	r3, [r7, #28]
 800e6ea:	4413      	add	r3, r2
 800e6ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6f0:	691a      	ldr	r2, [r3, #16]
 800e6f2:	69bb      	ldr	r3, [r7, #24]
 800e6f4:	0159      	lsls	r1, r3, #5
 800e6f6:	69fb      	ldr	r3, [r7, #28]
 800e6f8:	440b      	add	r3, r1
 800e6fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6fe:	4619      	mov	r1, r3
 800e700:	4b61      	ldr	r3, [pc, #388]	; (800e888 <USB_EPStartXfer+0x48c>)
 800e702:	4013      	ands	r3, r2
 800e704:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e706:	69bb      	ldr	r3, [r7, #24]
 800e708:	015a      	lsls	r2, r3, #5
 800e70a:	69fb      	ldr	r3, [r7, #28]
 800e70c:	4413      	add	r3, r2
 800e70e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e712:	691a      	ldr	r2, [r3, #16]
 800e714:	69bb      	ldr	r3, [r7, #24]
 800e716:	0159      	lsls	r1, r3, #5
 800e718:	69fb      	ldr	r3, [r7, #28]
 800e71a:	440b      	add	r3, r1
 800e71c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e720:	4619      	mov	r1, r3
 800e722:	4b5a      	ldr	r3, [pc, #360]	; (800e88c <USB_EPStartXfer+0x490>)
 800e724:	4013      	ands	r3, r2
 800e726:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800e728:	68bb      	ldr	r3, [r7, #8]
 800e72a:	695b      	ldr	r3, [r3, #20]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d123      	bne.n	800e778 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e730:	69bb      	ldr	r3, [r7, #24]
 800e732:	015a      	lsls	r2, r3, #5
 800e734:	69fb      	ldr	r3, [r7, #28]
 800e736:	4413      	add	r3, r2
 800e738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e73c:	691a      	ldr	r2, [r3, #16]
 800e73e:	68bb      	ldr	r3, [r7, #8]
 800e740:	689b      	ldr	r3, [r3, #8]
 800e742:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e746:	69b9      	ldr	r1, [r7, #24]
 800e748:	0148      	lsls	r0, r1, #5
 800e74a:	69f9      	ldr	r1, [r7, #28]
 800e74c:	4401      	add	r1, r0
 800e74e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e752:	4313      	orrs	r3, r2
 800e754:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e756:	69bb      	ldr	r3, [r7, #24]
 800e758:	015a      	lsls	r2, r3, #5
 800e75a:	69fb      	ldr	r3, [r7, #28]
 800e75c:	4413      	add	r3, r2
 800e75e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e762:	691b      	ldr	r3, [r3, #16]
 800e764:	69ba      	ldr	r2, [r7, #24]
 800e766:	0151      	lsls	r1, r2, #5
 800e768:	69fa      	ldr	r2, [r7, #28]
 800e76a:	440a      	add	r2, r1
 800e76c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e770:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e774:	6113      	str	r3, [r2, #16]
 800e776:	e033      	b.n	800e7e0 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e778:	68bb      	ldr	r3, [r7, #8]
 800e77a:	695a      	ldr	r2, [r3, #20]
 800e77c:	68bb      	ldr	r3, [r7, #8]
 800e77e:	689b      	ldr	r3, [r3, #8]
 800e780:	4413      	add	r3, r2
 800e782:	1e5a      	subs	r2, r3, #1
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	689b      	ldr	r3, [r3, #8]
 800e788:	fbb2 f3f3 	udiv	r3, r2, r3
 800e78c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e78e:	69bb      	ldr	r3, [r7, #24]
 800e790:	015a      	lsls	r2, r3, #5
 800e792:	69fb      	ldr	r3, [r7, #28]
 800e794:	4413      	add	r3, r2
 800e796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e79a:	691a      	ldr	r2, [r3, #16]
 800e79c:	8afb      	ldrh	r3, [r7, #22]
 800e79e:	04d9      	lsls	r1, r3, #19
 800e7a0:	4b3b      	ldr	r3, [pc, #236]	; (800e890 <USB_EPStartXfer+0x494>)
 800e7a2:	400b      	ands	r3, r1
 800e7a4:	69b9      	ldr	r1, [r7, #24]
 800e7a6:	0148      	lsls	r0, r1, #5
 800e7a8:	69f9      	ldr	r1, [r7, #28]
 800e7aa:	4401      	add	r1, r0
 800e7ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e7b0:	4313      	orrs	r3, r2
 800e7b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800e7b4:	69bb      	ldr	r3, [r7, #24]
 800e7b6:	015a      	lsls	r2, r3, #5
 800e7b8:	69fb      	ldr	r3, [r7, #28]
 800e7ba:	4413      	add	r3, r2
 800e7bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7c0:	691a      	ldr	r2, [r3, #16]
 800e7c2:	68bb      	ldr	r3, [r7, #8]
 800e7c4:	689b      	ldr	r3, [r3, #8]
 800e7c6:	8af9      	ldrh	r1, [r7, #22]
 800e7c8:	fb01 f303 	mul.w	r3, r1, r3
 800e7cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e7d0:	69b9      	ldr	r1, [r7, #24]
 800e7d2:	0148      	lsls	r0, r1, #5
 800e7d4:	69f9      	ldr	r1, [r7, #28]
 800e7d6:	4401      	add	r1, r0
 800e7d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e7dc:	4313      	orrs	r3, r2
 800e7de:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e7e0:	79fb      	ldrb	r3, [r7, #7]
 800e7e2:	2b01      	cmp	r3, #1
 800e7e4:	d10d      	bne.n	800e802 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	68db      	ldr	r3, [r3, #12]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d009      	beq.n	800e802 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e7ee:	68bb      	ldr	r3, [r7, #8]
 800e7f0:	68d9      	ldr	r1, [r3, #12]
 800e7f2:	69bb      	ldr	r3, [r7, #24]
 800e7f4:	015a      	lsls	r2, r3, #5
 800e7f6:	69fb      	ldr	r3, [r7, #28]
 800e7f8:	4413      	add	r3, r2
 800e7fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7fe:	460a      	mov	r2, r1
 800e800:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	78db      	ldrb	r3, [r3, #3]
 800e806:	2b01      	cmp	r3, #1
 800e808:	d128      	bne.n	800e85c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e80a:	69fb      	ldr	r3, [r7, #28]
 800e80c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e810:	689b      	ldr	r3, [r3, #8]
 800e812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e816:	2b00      	cmp	r3, #0
 800e818:	d110      	bne.n	800e83c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e81a:	69bb      	ldr	r3, [r7, #24]
 800e81c:	015a      	lsls	r2, r3, #5
 800e81e:	69fb      	ldr	r3, [r7, #28]
 800e820:	4413      	add	r3, r2
 800e822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	69ba      	ldr	r2, [r7, #24]
 800e82a:	0151      	lsls	r1, r2, #5
 800e82c:	69fa      	ldr	r2, [r7, #28]
 800e82e:	440a      	add	r2, r1
 800e830:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e834:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e838:	6013      	str	r3, [r2, #0]
 800e83a:	e00f      	b.n	800e85c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e83c:	69bb      	ldr	r3, [r7, #24]
 800e83e:	015a      	lsls	r2, r3, #5
 800e840:	69fb      	ldr	r3, [r7, #28]
 800e842:	4413      	add	r3, r2
 800e844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	69ba      	ldr	r2, [r7, #24]
 800e84c:	0151      	lsls	r1, r2, #5
 800e84e:	69fa      	ldr	r2, [r7, #28]
 800e850:	440a      	add	r2, r1
 800e852:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e85a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e85c:	69bb      	ldr	r3, [r7, #24]
 800e85e:	015a      	lsls	r2, r3, #5
 800e860:	69fb      	ldr	r3, [r7, #28]
 800e862:	4413      	add	r3, r2
 800e864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	69ba      	ldr	r2, [r7, #24]
 800e86c:	0151      	lsls	r1, r2, #5
 800e86e:	69fa      	ldr	r2, [r7, #28]
 800e870:	440a      	add	r2, r1
 800e872:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e876:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e87a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e87c:	2300      	movs	r3, #0
}
 800e87e:	4618      	mov	r0, r3
 800e880:	3720      	adds	r7, #32
 800e882:	46bd      	mov	sp, r7
 800e884:	bd80      	pop	{r7, pc}
 800e886:	bf00      	nop
 800e888:	fff80000 	.word	0xfff80000
 800e88c:	e007ffff 	.word	0xe007ffff
 800e890:	1ff80000 	.word	0x1ff80000

0800e894 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e894:	b480      	push	{r7}
 800e896:	b087      	sub	sp, #28
 800e898:	af00      	add	r7, sp, #0
 800e89a:	60f8      	str	r0, [r7, #12]
 800e89c:	60b9      	str	r1, [r7, #8]
 800e89e:	4613      	mov	r3, r2
 800e8a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800e8a6:	68bb      	ldr	r3, [r7, #8]
 800e8a8:	781b      	ldrb	r3, [r3, #0]
 800e8aa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e8ac:	68bb      	ldr	r3, [r7, #8]
 800e8ae:	785b      	ldrb	r3, [r3, #1]
 800e8b0:	2b01      	cmp	r3, #1
 800e8b2:	f040 80cd 	bne.w	800ea50 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e8b6:	68bb      	ldr	r3, [r7, #8]
 800e8b8:	695b      	ldr	r3, [r3, #20]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d132      	bne.n	800e924 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e8be:	693b      	ldr	r3, [r7, #16]
 800e8c0:	015a      	lsls	r2, r3, #5
 800e8c2:	697b      	ldr	r3, [r7, #20]
 800e8c4:	4413      	add	r3, r2
 800e8c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8ca:	691a      	ldr	r2, [r3, #16]
 800e8cc:	693b      	ldr	r3, [r7, #16]
 800e8ce:	0159      	lsls	r1, r3, #5
 800e8d0:	697b      	ldr	r3, [r7, #20]
 800e8d2:	440b      	add	r3, r1
 800e8d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8d8:	4619      	mov	r1, r3
 800e8da:	4b98      	ldr	r3, [pc, #608]	; (800eb3c <USB_EP0StartXfer+0x2a8>)
 800e8dc:	4013      	ands	r3, r2
 800e8de:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e8e0:	693b      	ldr	r3, [r7, #16]
 800e8e2:	015a      	lsls	r2, r3, #5
 800e8e4:	697b      	ldr	r3, [r7, #20]
 800e8e6:	4413      	add	r3, r2
 800e8e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8ec:	691b      	ldr	r3, [r3, #16]
 800e8ee:	693a      	ldr	r2, [r7, #16]
 800e8f0:	0151      	lsls	r1, r2, #5
 800e8f2:	697a      	ldr	r2, [r7, #20]
 800e8f4:	440a      	add	r2, r1
 800e8f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e8fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e8fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e900:	693b      	ldr	r3, [r7, #16]
 800e902:	015a      	lsls	r2, r3, #5
 800e904:	697b      	ldr	r3, [r7, #20]
 800e906:	4413      	add	r3, r2
 800e908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e90c:	691a      	ldr	r2, [r3, #16]
 800e90e:	693b      	ldr	r3, [r7, #16]
 800e910:	0159      	lsls	r1, r3, #5
 800e912:	697b      	ldr	r3, [r7, #20]
 800e914:	440b      	add	r3, r1
 800e916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e91a:	4619      	mov	r1, r3
 800e91c:	4b88      	ldr	r3, [pc, #544]	; (800eb40 <USB_EP0StartXfer+0x2ac>)
 800e91e:	4013      	ands	r3, r2
 800e920:	610b      	str	r3, [r1, #16]
 800e922:	e04e      	b.n	800e9c2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e924:	693b      	ldr	r3, [r7, #16]
 800e926:	015a      	lsls	r2, r3, #5
 800e928:	697b      	ldr	r3, [r7, #20]
 800e92a:	4413      	add	r3, r2
 800e92c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e930:	691a      	ldr	r2, [r3, #16]
 800e932:	693b      	ldr	r3, [r7, #16]
 800e934:	0159      	lsls	r1, r3, #5
 800e936:	697b      	ldr	r3, [r7, #20]
 800e938:	440b      	add	r3, r1
 800e93a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e93e:	4619      	mov	r1, r3
 800e940:	4b7f      	ldr	r3, [pc, #508]	; (800eb40 <USB_EP0StartXfer+0x2ac>)
 800e942:	4013      	ands	r3, r2
 800e944:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e946:	693b      	ldr	r3, [r7, #16]
 800e948:	015a      	lsls	r2, r3, #5
 800e94a:	697b      	ldr	r3, [r7, #20]
 800e94c:	4413      	add	r3, r2
 800e94e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e952:	691a      	ldr	r2, [r3, #16]
 800e954:	693b      	ldr	r3, [r7, #16]
 800e956:	0159      	lsls	r1, r3, #5
 800e958:	697b      	ldr	r3, [r7, #20]
 800e95a:	440b      	add	r3, r1
 800e95c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e960:	4619      	mov	r1, r3
 800e962:	4b76      	ldr	r3, [pc, #472]	; (800eb3c <USB_EP0StartXfer+0x2a8>)
 800e964:	4013      	ands	r3, r2
 800e966:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800e968:	68bb      	ldr	r3, [r7, #8]
 800e96a:	695a      	ldr	r2, [r3, #20]
 800e96c:	68bb      	ldr	r3, [r7, #8]
 800e96e:	689b      	ldr	r3, [r3, #8]
 800e970:	429a      	cmp	r2, r3
 800e972:	d903      	bls.n	800e97c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800e974:	68bb      	ldr	r3, [r7, #8]
 800e976:	689a      	ldr	r2, [r3, #8]
 800e978:	68bb      	ldr	r3, [r7, #8]
 800e97a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e97c:	693b      	ldr	r3, [r7, #16]
 800e97e:	015a      	lsls	r2, r3, #5
 800e980:	697b      	ldr	r3, [r7, #20]
 800e982:	4413      	add	r3, r2
 800e984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e988:	691b      	ldr	r3, [r3, #16]
 800e98a:	693a      	ldr	r2, [r7, #16]
 800e98c:	0151      	lsls	r1, r2, #5
 800e98e:	697a      	ldr	r2, [r7, #20]
 800e990:	440a      	add	r2, r1
 800e992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e996:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e99a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e99c:	693b      	ldr	r3, [r7, #16]
 800e99e:	015a      	lsls	r2, r3, #5
 800e9a0:	697b      	ldr	r3, [r7, #20]
 800e9a2:	4413      	add	r3, r2
 800e9a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9a8:	691a      	ldr	r2, [r3, #16]
 800e9aa:	68bb      	ldr	r3, [r7, #8]
 800e9ac:	695b      	ldr	r3, [r3, #20]
 800e9ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e9b2:	6939      	ldr	r1, [r7, #16]
 800e9b4:	0148      	lsls	r0, r1, #5
 800e9b6:	6979      	ldr	r1, [r7, #20]
 800e9b8:	4401      	add	r1, r0
 800e9ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e9be:	4313      	orrs	r3, r2
 800e9c0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e9c2:	79fb      	ldrb	r3, [r7, #7]
 800e9c4:	2b01      	cmp	r3, #1
 800e9c6:	d11e      	bne.n	800ea06 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e9c8:	68bb      	ldr	r3, [r7, #8]
 800e9ca:	691b      	ldr	r3, [r3, #16]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d009      	beq.n	800e9e4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e9d0:	693b      	ldr	r3, [r7, #16]
 800e9d2:	015a      	lsls	r2, r3, #5
 800e9d4:	697b      	ldr	r3, [r7, #20]
 800e9d6:	4413      	add	r3, r2
 800e9d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9dc:	461a      	mov	r2, r3
 800e9de:	68bb      	ldr	r3, [r7, #8]
 800e9e0:	691b      	ldr	r3, [r3, #16]
 800e9e2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e9e4:	693b      	ldr	r3, [r7, #16]
 800e9e6:	015a      	lsls	r2, r3, #5
 800e9e8:	697b      	ldr	r3, [r7, #20]
 800e9ea:	4413      	add	r3, r2
 800e9ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	693a      	ldr	r2, [r7, #16]
 800e9f4:	0151      	lsls	r1, r2, #5
 800e9f6:	697a      	ldr	r2, [r7, #20]
 800e9f8:	440a      	add	r2, r1
 800e9fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e9fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ea02:	6013      	str	r3, [r2, #0]
 800ea04:	e092      	b.n	800eb2c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ea06:	693b      	ldr	r3, [r7, #16]
 800ea08:	015a      	lsls	r2, r3, #5
 800ea0a:	697b      	ldr	r3, [r7, #20]
 800ea0c:	4413      	add	r3, r2
 800ea0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	693a      	ldr	r2, [r7, #16]
 800ea16:	0151      	lsls	r1, r2, #5
 800ea18:	697a      	ldr	r2, [r7, #20]
 800ea1a:	440a      	add	r2, r1
 800ea1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea20:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ea24:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ea26:	68bb      	ldr	r3, [r7, #8]
 800ea28:	695b      	ldr	r3, [r3, #20]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d07e      	beq.n	800eb2c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ea2e:	697b      	ldr	r3, [r7, #20]
 800ea30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea36:	68bb      	ldr	r3, [r7, #8]
 800ea38:	781b      	ldrb	r3, [r3, #0]
 800ea3a:	f003 030f 	and.w	r3, r3, #15
 800ea3e:	2101      	movs	r1, #1
 800ea40:	fa01 f303 	lsl.w	r3, r1, r3
 800ea44:	6979      	ldr	r1, [r7, #20]
 800ea46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ea4a:	4313      	orrs	r3, r2
 800ea4c:	634b      	str	r3, [r1, #52]	; 0x34
 800ea4e:	e06d      	b.n	800eb2c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ea50:	693b      	ldr	r3, [r7, #16]
 800ea52:	015a      	lsls	r2, r3, #5
 800ea54:	697b      	ldr	r3, [r7, #20]
 800ea56:	4413      	add	r3, r2
 800ea58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea5c:	691a      	ldr	r2, [r3, #16]
 800ea5e:	693b      	ldr	r3, [r7, #16]
 800ea60:	0159      	lsls	r1, r3, #5
 800ea62:	697b      	ldr	r3, [r7, #20]
 800ea64:	440b      	add	r3, r1
 800ea66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea6a:	4619      	mov	r1, r3
 800ea6c:	4b34      	ldr	r3, [pc, #208]	; (800eb40 <USB_EP0StartXfer+0x2ac>)
 800ea6e:	4013      	ands	r3, r2
 800ea70:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ea72:	693b      	ldr	r3, [r7, #16]
 800ea74:	015a      	lsls	r2, r3, #5
 800ea76:	697b      	ldr	r3, [r7, #20]
 800ea78:	4413      	add	r3, r2
 800ea7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea7e:	691a      	ldr	r2, [r3, #16]
 800ea80:	693b      	ldr	r3, [r7, #16]
 800ea82:	0159      	lsls	r1, r3, #5
 800ea84:	697b      	ldr	r3, [r7, #20]
 800ea86:	440b      	add	r3, r1
 800ea88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea8c:	4619      	mov	r1, r3
 800ea8e:	4b2b      	ldr	r3, [pc, #172]	; (800eb3c <USB_EP0StartXfer+0x2a8>)
 800ea90:	4013      	ands	r3, r2
 800ea92:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800ea94:	68bb      	ldr	r3, [r7, #8]
 800ea96:	695b      	ldr	r3, [r3, #20]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d003      	beq.n	800eaa4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800ea9c:	68bb      	ldr	r3, [r7, #8]
 800ea9e:	689a      	ldr	r2, [r3, #8]
 800eaa0:	68bb      	ldr	r3, [r7, #8]
 800eaa2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800eaa4:	693b      	ldr	r3, [r7, #16]
 800eaa6:	015a      	lsls	r2, r3, #5
 800eaa8:	697b      	ldr	r3, [r7, #20]
 800eaaa:	4413      	add	r3, r2
 800eaac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eab0:	691b      	ldr	r3, [r3, #16]
 800eab2:	693a      	ldr	r2, [r7, #16]
 800eab4:	0151      	lsls	r1, r2, #5
 800eab6:	697a      	ldr	r2, [r7, #20]
 800eab8:	440a      	add	r2, r1
 800eaba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eabe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800eac2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800eac4:	693b      	ldr	r3, [r7, #16]
 800eac6:	015a      	lsls	r2, r3, #5
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	4413      	add	r3, r2
 800eacc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ead0:	691a      	ldr	r2, [r3, #16]
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	689b      	ldr	r3, [r3, #8]
 800ead6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eada:	6939      	ldr	r1, [r7, #16]
 800eadc:	0148      	lsls	r0, r1, #5
 800eade:	6979      	ldr	r1, [r7, #20]
 800eae0:	4401      	add	r1, r0
 800eae2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800eae6:	4313      	orrs	r3, r2
 800eae8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800eaea:	79fb      	ldrb	r3, [r7, #7]
 800eaec:	2b01      	cmp	r3, #1
 800eaee:	d10d      	bne.n	800eb0c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800eaf0:	68bb      	ldr	r3, [r7, #8]
 800eaf2:	68db      	ldr	r3, [r3, #12]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d009      	beq.n	800eb0c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	68d9      	ldr	r1, [r3, #12]
 800eafc:	693b      	ldr	r3, [r7, #16]
 800eafe:	015a      	lsls	r2, r3, #5
 800eb00:	697b      	ldr	r3, [r7, #20]
 800eb02:	4413      	add	r3, r2
 800eb04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb08:	460a      	mov	r2, r1
 800eb0a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800eb0c:	693b      	ldr	r3, [r7, #16]
 800eb0e:	015a      	lsls	r2, r3, #5
 800eb10:	697b      	ldr	r3, [r7, #20]
 800eb12:	4413      	add	r3, r2
 800eb14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	693a      	ldr	r2, [r7, #16]
 800eb1c:	0151      	lsls	r1, r2, #5
 800eb1e:	697a      	ldr	r2, [r7, #20]
 800eb20:	440a      	add	r2, r1
 800eb22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eb26:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800eb2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800eb2c:	2300      	movs	r3, #0
}
 800eb2e:	4618      	mov	r0, r3
 800eb30:	371c      	adds	r7, #28
 800eb32:	46bd      	mov	sp, r7
 800eb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb38:	4770      	bx	lr
 800eb3a:	bf00      	nop
 800eb3c:	e007ffff 	.word	0xe007ffff
 800eb40:	fff80000 	.word	0xfff80000

0800eb44 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800eb44:	b480      	push	{r7}
 800eb46:	b089      	sub	sp, #36	; 0x24
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	60f8      	str	r0, [r7, #12]
 800eb4c:	60b9      	str	r1, [r7, #8]
 800eb4e:	4611      	mov	r1, r2
 800eb50:	461a      	mov	r2, r3
 800eb52:	460b      	mov	r3, r1
 800eb54:	71fb      	strb	r3, [r7, #7]
 800eb56:	4613      	mov	r3, r2
 800eb58:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800eb62:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d11a      	bne.n	800eba0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800eb6a:	88bb      	ldrh	r3, [r7, #4]
 800eb6c:	3303      	adds	r3, #3
 800eb6e:	089b      	lsrs	r3, r3, #2
 800eb70:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800eb72:	2300      	movs	r3, #0
 800eb74:	61bb      	str	r3, [r7, #24]
 800eb76:	e00f      	b.n	800eb98 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800eb78:	79fb      	ldrb	r3, [r7, #7]
 800eb7a:	031a      	lsls	r2, r3, #12
 800eb7c:	697b      	ldr	r3, [r7, #20]
 800eb7e:	4413      	add	r3, r2
 800eb80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eb84:	461a      	mov	r2, r3
 800eb86:	69fb      	ldr	r3, [r7, #28]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800eb8c:	69fb      	ldr	r3, [r7, #28]
 800eb8e:	3304      	adds	r3, #4
 800eb90:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800eb92:	69bb      	ldr	r3, [r7, #24]
 800eb94:	3301      	adds	r3, #1
 800eb96:	61bb      	str	r3, [r7, #24]
 800eb98:	69ba      	ldr	r2, [r7, #24]
 800eb9a:	693b      	ldr	r3, [r7, #16]
 800eb9c:	429a      	cmp	r2, r3
 800eb9e:	d3eb      	bcc.n	800eb78 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800eba0:	2300      	movs	r3, #0
}
 800eba2:	4618      	mov	r0, r3
 800eba4:	3724      	adds	r7, #36	; 0x24
 800eba6:	46bd      	mov	sp, r7
 800eba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebac:	4770      	bx	lr

0800ebae <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ebae:	b480      	push	{r7}
 800ebb0:	b089      	sub	sp, #36	; 0x24
 800ebb2:	af00      	add	r7, sp, #0
 800ebb4:	60f8      	str	r0, [r7, #12]
 800ebb6:	60b9      	str	r1, [r7, #8]
 800ebb8:	4613      	mov	r3, r2
 800ebba:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800ebc0:	68bb      	ldr	r3, [r7, #8]
 800ebc2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800ebc4:	88fb      	ldrh	r3, [r7, #6]
 800ebc6:	3303      	adds	r3, #3
 800ebc8:	089b      	lsrs	r3, r3, #2
 800ebca:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800ebcc:	2300      	movs	r3, #0
 800ebce:	61bb      	str	r3, [r7, #24]
 800ebd0:	e00b      	b.n	800ebea <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ebd2:	697b      	ldr	r3, [r7, #20]
 800ebd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ebd8:	681a      	ldr	r2, [r3, #0]
 800ebda:	69fb      	ldr	r3, [r7, #28]
 800ebdc:	601a      	str	r2, [r3, #0]
    pDest++;
 800ebde:	69fb      	ldr	r3, [r7, #28]
 800ebe0:	3304      	adds	r3, #4
 800ebe2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800ebe4:	69bb      	ldr	r3, [r7, #24]
 800ebe6:	3301      	adds	r3, #1
 800ebe8:	61bb      	str	r3, [r7, #24]
 800ebea:	69ba      	ldr	r2, [r7, #24]
 800ebec:	693b      	ldr	r3, [r7, #16]
 800ebee:	429a      	cmp	r2, r3
 800ebf0:	d3ef      	bcc.n	800ebd2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800ebf2:	69fb      	ldr	r3, [r7, #28]
}
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	3724      	adds	r7, #36	; 0x24
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfe:	4770      	bx	lr

0800ec00 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ec00:	b480      	push	{r7}
 800ec02:	b085      	sub	sp, #20
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
 800ec08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ec0e:	683b      	ldr	r3, [r7, #0]
 800ec10:	781b      	ldrb	r3, [r3, #0]
 800ec12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	785b      	ldrb	r3, [r3, #1]
 800ec18:	2b01      	cmp	r3, #1
 800ec1a:	d12c      	bne.n	800ec76 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ec1c:	68bb      	ldr	r3, [r7, #8]
 800ec1e:	015a      	lsls	r2, r3, #5
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	4413      	add	r3, r2
 800ec24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	db12      	blt.n	800ec54 <USB_EPSetStall+0x54>
 800ec2e:	68bb      	ldr	r3, [r7, #8]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d00f      	beq.n	800ec54 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ec34:	68bb      	ldr	r3, [r7, #8]
 800ec36:	015a      	lsls	r2, r3, #5
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	4413      	add	r3, r2
 800ec3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	68ba      	ldr	r2, [r7, #8]
 800ec44:	0151      	lsls	r1, r2, #5
 800ec46:	68fa      	ldr	r2, [r7, #12]
 800ec48:	440a      	add	r2, r1
 800ec4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ec52:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ec54:	68bb      	ldr	r3, [r7, #8]
 800ec56:	015a      	lsls	r2, r3, #5
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	4413      	add	r3, r2
 800ec5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	68ba      	ldr	r2, [r7, #8]
 800ec64:	0151      	lsls	r1, r2, #5
 800ec66:	68fa      	ldr	r2, [r7, #12]
 800ec68:	440a      	add	r2, r1
 800ec6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ec72:	6013      	str	r3, [r2, #0]
 800ec74:	e02b      	b.n	800ecce <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ec76:	68bb      	ldr	r3, [r7, #8]
 800ec78:	015a      	lsls	r2, r3, #5
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	4413      	add	r3, r2
 800ec7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	db12      	blt.n	800ecae <USB_EPSetStall+0xae>
 800ec88:	68bb      	ldr	r3, [r7, #8]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d00f      	beq.n	800ecae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ec8e:	68bb      	ldr	r3, [r7, #8]
 800ec90:	015a      	lsls	r2, r3, #5
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	4413      	add	r3, r2
 800ec96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	68ba      	ldr	r2, [r7, #8]
 800ec9e:	0151      	lsls	r1, r2, #5
 800eca0:	68fa      	ldr	r2, [r7, #12]
 800eca2:	440a      	add	r2, r1
 800eca4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eca8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ecac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ecae:	68bb      	ldr	r3, [r7, #8]
 800ecb0:	015a      	lsls	r2, r3, #5
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	4413      	add	r3, r2
 800ecb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	68ba      	ldr	r2, [r7, #8]
 800ecbe:	0151      	lsls	r1, r2, #5
 800ecc0:	68fa      	ldr	r2, [r7, #12]
 800ecc2:	440a      	add	r2, r1
 800ecc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ecc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800eccc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ecce:	2300      	movs	r3, #0
}
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	3714      	adds	r7, #20
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecda:	4770      	bx	lr

0800ecdc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ecdc:	b480      	push	{r7}
 800ecde:	b085      	sub	sp, #20
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
 800ece4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	781b      	ldrb	r3, [r3, #0]
 800ecee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ecf0:	683b      	ldr	r3, [r7, #0]
 800ecf2:	785b      	ldrb	r3, [r3, #1]
 800ecf4:	2b01      	cmp	r3, #1
 800ecf6:	d128      	bne.n	800ed4a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ecf8:	68bb      	ldr	r3, [r7, #8]
 800ecfa:	015a      	lsls	r2, r3, #5
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	4413      	add	r3, r2
 800ed00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	68ba      	ldr	r2, [r7, #8]
 800ed08:	0151      	lsls	r1, r2, #5
 800ed0a:	68fa      	ldr	r2, [r7, #12]
 800ed0c:	440a      	add	r2, r1
 800ed0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ed16:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	78db      	ldrb	r3, [r3, #3]
 800ed1c:	2b03      	cmp	r3, #3
 800ed1e:	d003      	beq.n	800ed28 <USB_EPClearStall+0x4c>
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	78db      	ldrb	r3, [r3, #3]
 800ed24:	2b02      	cmp	r3, #2
 800ed26:	d138      	bne.n	800ed9a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ed28:	68bb      	ldr	r3, [r7, #8]
 800ed2a:	015a      	lsls	r2, r3, #5
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	4413      	add	r3, r2
 800ed30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	68ba      	ldr	r2, [r7, #8]
 800ed38:	0151      	lsls	r1, r2, #5
 800ed3a:	68fa      	ldr	r2, [r7, #12]
 800ed3c:	440a      	add	r2, r1
 800ed3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ed46:	6013      	str	r3, [r2, #0]
 800ed48:	e027      	b.n	800ed9a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ed4a:	68bb      	ldr	r3, [r7, #8]
 800ed4c:	015a      	lsls	r2, r3, #5
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	4413      	add	r3, r2
 800ed52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	68ba      	ldr	r2, [r7, #8]
 800ed5a:	0151      	lsls	r1, r2, #5
 800ed5c:	68fa      	ldr	r2, [r7, #12]
 800ed5e:	440a      	add	r2, r1
 800ed60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed64:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ed68:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ed6a:	683b      	ldr	r3, [r7, #0]
 800ed6c:	78db      	ldrb	r3, [r3, #3]
 800ed6e:	2b03      	cmp	r3, #3
 800ed70:	d003      	beq.n	800ed7a <USB_EPClearStall+0x9e>
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	78db      	ldrb	r3, [r3, #3]
 800ed76:	2b02      	cmp	r3, #2
 800ed78:	d10f      	bne.n	800ed9a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	015a      	lsls	r2, r3, #5
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	4413      	add	r3, r2
 800ed82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	68ba      	ldr	r2, [r7, #8]
 800ed8a:	0151      	lsls	r1, r2, #5
 800ed8c:	68fa      	ldr	r2, [r7, #12]
 800ed8e:	440a      	add	r2, r1
 800ed90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ed98:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ed9a:	2300      	movs	r3, #0
}
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	3714      	adds	r7, #20
 800eda0:	46bd      	mov	sp, r7
 800eda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda6:	4770      	bx	lr

0800eda8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800eda8:	b480      	push	{r7}
 800edaa:	b085      	sub	sp, #20
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
 800edb0:	460b      	mov	r3, r1
 800edb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	68fa      	ldr	r2, [r7, #12]
 800edc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800edc6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800edca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800edd2:	681a      	ldr	r2, [r3, #0]
 800edd4:	78fb      	ldrb	r3, [r7, #3]
 800edd6:	011b      	lsls	r3, r3, #4
 800edd8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800eddc:	68f9      	ldr	r1, [r7, #12]
 800edde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ede2:	4313      	orrs	r3, r2
 800ede4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ede6:	2300      	movs	r3, #0
}
 800ede8:	4618      	mov	r0, r3
 800edea:	3714      	adds	r7, #20
 800edec:	46bd      	mov	sp, r7
 800edee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf2:	4770      	bx	lr

0800edf4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b084      	sub	sp, #16
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee06:	685b      	ldr	r3, [r3, #4]
 800ee08:	68fa      	ldr	r2, [r7, #12]
 800ee0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ee0e:	f023 0302 	bic.w	r3, r3, #2
 800ee12:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800ee14:	2003      	movs	r0, #3
 800ee16:	f7f3 fb81 	bl	800251c <HAL_Delay>

  return HAL_OK;
 800ee1a:	2300      	movs	r3, #0
}
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	3710      	adds	r7, #16
 800ee20:	46bd      	mov	sp, r7
 800ee22:	bd80      	pop	{r7, pc}

0800ee24 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b084      	sub	sp, #16
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee36:	685b      	ldr	r3, [r3, #4]
 800ee38:	68fa      	ldr	r2, [r7, #12]
 800ee3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ee3e:	f043 0302 	orr.w	r3, r3, #2
 800ee42:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800ee44:	2003      	movs	r0, #3
 800ee46:	f7f3 fb69 	bl	800251c <HAL_Delay>

  return HAL_OK;
 800ee4a:	2300      	movs	r3, #0
}
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	3710      	adds	r7, #16
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}

0800ee54 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ee54:	b480      	push	{r7}
 800ee56:	b085      	sub	sp, #20
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	695b      	ldr	r3, [r3, #20]
 800ee60:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	699b      	ldr	r3, [r3, #24]
 800ee66:	68fa      	ldr	r2, [r7, #12]
 800ee68:	4013      	ands	r3, r2
 800ee6a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
}
 800ee6e:	4618      	mov	r0, r3
 800ee70:	3714      	adds	r7, #20
 800ee72:	46bd      	mov	sp, r7
 800ee74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee78:	4770      	bx	lr

0800ee7a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ee7a:	b480      	push	{r7}
 800ee7c:	b085      	sub	sp, #20
 800ee7e:	af00      	add	r7, sp, #0
 800ee80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee8c:	699b      	ldr	r3, [r3, #24]
 800ee8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee96:	69db      	ldr	r3, [r3, #28]
 800ee98:	68ba      	ldr	r2, [r7, #8]
 800ee9a:	4013      	ands	r3, r2
 800ee9c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ee9e:	68bb      	ldr	r3, [r7, #8]
 800eea0:	0c1b      	lsrs	r3, r3, #16
}
 800eea2:	4618      	mov	r0, r3
 800eea4:	3714      	adds	r7, #20
 800eea6:	46bd      	mov	sp, r7
 800eea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeac:	4770      	bx	lr

0800eeae <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800eeae:	b480      	push	{r7}
 800eeb0:	b085      	sub	sp, #20
 800eeb2:	af00      	add	r7, sp, #0
 800eeb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eec0:	699b      	ldr	r3, [r3, #24]
 800eec2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eeca:	69db      	ldr	r3, [r3, #28]
 800eecc:	68ba      	ldr	r2, [r7, #8]
 800eece:	4013      	ands	r3, r2
 800eed0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800eed2:	68bb      	ldr	r3, [r7, #8]
 800eed4:	b29b      	uxth	r3, r3
}
 800eed6:	4618      	mov	r0, r3
 800eed8:	3714      	adds	r7, #20
 800eeda:	46bd      	mov	sp, r7
 800eedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee0:	4770      	bx	lr

0800eee2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800eee2:	b480      	push	{r7}
 800eee4:	b085      	sub	sp, #20
 800eee6:	af00      	add	r7, sp, #0
 800eee8:	6078      	str	r0, [r7, #4]
 800eeea:	460b      	mov	r3, r1
 800eeec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800eef2:	78fb      	ldrb	r3, [r7, #3]
 800eef4:	015a      	lsls	r2, r3, #5
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	4413      	add	r3, r2
 800eefa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eefe:	689b      	ldr	r3, [r3, #8]
 800ef00:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef08:	695b      	ldr	r3, [r3, #20]
 800ef0a:	68ba      	ldr	r2, [r7, #8]
 800ef0c:	4013      	ands	r3, r2
 800ef0e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ef10:	68bb      	ldr	r3, [r7, #8]
}
 800ef12:	4618      	mov	r0, r3
 800ef14:	3714      	adds	r7, #20
 800ef16:	46bd      	mov	sp, r7
 800ef18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1c:	4770      	bx	lr

0800ef1e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ef1e:	b480      	push	{r7}
 800ef20:	b087      	sub	sp, #28
 800ef22:	af00      	add	r7, sp, #0
 800ef24:	6078      	str	r0, [r7, #4]
 800ef26:	460b      	mov	r3, r1
 800ef28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ef2e:	697b      	ldr	r3, [r7, #20]
 800ef30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef34:	691b      	ldr	r3, [r3, #16]
 800ef36:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef40:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ef42:	78fb      	ldrb	r3, [r7, #3]
 800ef44:	f003 030f 	and.w	r3, r3, #15
 800ef48:	68fa      	ldr	r2, [r7, #12]
 800ef4a:	fa22 f303 	lsr.w	r3, r2, r3
 800ef4e:	01db      	lsls	r3, r3, #7
 800ef50:	b2db      	uxtb	r3, r3
 800ef52:	693a      	ldr	r2, [r7, #16]
 800ef54:	4313      	orrs	r3, r2
 800ef56:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ef58:	78fb      	ldrb	r3, [r7, #3]
 800ef5a:	015a      	lsls	r2, r3, #5
 800ef5c:	697b      	ldr	r3, [r7, #20]
 800ef5e:	4413      	add	r3, r2
 800ef60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef64:	689b      	ldr	r3, [r3, #8]
 800ef66:	693a      	ldr	r2, [r7, #16]
 800ef68:	4013      	ands	r3, r2
 800ef6a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ef6c:	68bb      	ldr	r3, [r7, #8]
}
 800ef6e:	4618      	mov	r0, r3
 800ef70:	371c      	adds	r7, #28
 800ef72:	46bd      	mov	sp, r7
 800ef74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef78:	4770      	bx	lr

0800ef7a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ef7a:	b480      	push	{r7}
 800ef7c:	b083      	sub	sp, #12
 800ef7e:	af00      	add	r7, sp, #0
 800ef80:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	695b      	ldr	r3, [r3, #20]
 800ef86:	f003 0301 	and.w	r3, r3, #1
}
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	370c      	adds	r7, #12
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef94:	4770      	bx	lr
	...

0800ef98 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ef98:	b480      	push	{r7}
 800ef9a:	b085      	sub	sp, #20
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efaa:	681a      	ldr	r2, [r3, #0]
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efb2:	4619      	mov	r1, r3
 800efb4:	4b09      	ldr	r3, [pc, #36]	; (800efdc <USB_ActivateSetup+0x44>)
 800efb6:	4013      	ands	r3, r2
 800efb8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800efc0:	685b      	ldr	r3, [r3, #4]
 800efc2:	68fa      	ldr	r2, [r7, #12]
 800efc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800efc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800efcc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800efce:	2300      	movs	r3, #0
}
 800efd0:	4618      	mov	r0, r3
 800efd2:	3714      	adds	r7, #20
 800efd4:	46bd      	mov	sp, r7
 800efd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efda:	4770      	bx	lr
 800efdc:	fffff800 	.word	0xfffff800

0800efe0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800efe0:	b480      	push	{r7}
 800efe2:	b087      	sub	sp, #28
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	60f8      	str	r0, [r7, #12]
 800efe8:	460b      	mov	r3, r1
 800efea:	607a      	str	r2, [r7, #4]
 800efec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	333c      	adds	r3, #60	; 0x3c
 800eff6:	3304      	adds	r3, #4
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800effc:	693b      	ldr	r3, [r7, #16]
 800effe:	4a26      	ldr	r2, [pc, #152]	; (800f098 <USB_EP0_OutStart+0xb8>)
 800f000:	4293      	cmp	r3, r2
 800f002:	d90a      	bls.n	800f01a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f004:	697b      	ldr	r3, [r7, #20]
 800f006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f010:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f014:	d101      	bne.n	800f01a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f016:	2300      	movs	r3, #0
 800f018:	e037      	b.n	800f08a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f01a:	697b      	ldr	r3, [r7, #20]
 800f01c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f020:	461a      	mov	r2, r3
 800f022:	2300      	movs	r3, #0
 800f024:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f026:	697b      	ldr	r3, [r7, #20]
 800f028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f02c:	691b      	ldr	r3, [r3, #16]
 800f02e:	697a      	ldr	r2, [r7, #20]
 800f030:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f034:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f038:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f03a:	697b      	ldr	r3, [r7, #20]
 800f03c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f040:	691b      	ldr	r3, [r3, #16]
 800f042:	697a      	ldr	r2, [r7, #20]
 800f044:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f048:	f043 0318 	orr.w	r3, r3, #24
 800f04c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f04e:	697b      	ldr	r3, [r7, #20]
 800f050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f054:	691b      	ldr	r3, [r3, #16]
 800f056:	697a      	ldr	r2, [r7, #20]
 800f058:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f05c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800f060:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f062:	7afb      	ldrb	r3, [r7, #11]
 800f064:	2b01      	cmp	r3, #1
 800f066:	d10f      	bne.n	800f088 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f068:	697b      	ldr	r3, [r7, #20]
 800f06a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f06e:	461a      	mov	r2, r3
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f074:	697b      	ldr	r3, [r7, #20]
 800f076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	697a      	ldr	r2, [r7, #20]
 800f07e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f082:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800f086:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f088:	2300      	movs	r3, #0
}
 800f08a:	4618      	mov	r0, r3
 800f08c:	371c      	adds	r7, #28
 800f08e:	46bd      	mov	sp, r7
 800f090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f094:	4770      	bx	lr
 800f096:	bf00      	nop
 800f098:	4f54300a 	.word	0x4f54300a

0800f09c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f09c:	b480      	push	{r7}
 800f09e:	b085      	sub	sp, #20
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	3301      	adds	r3, #1
 800f0ac:	60fb      	str	r3, [r7, #12]
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	4a13      	ldr	r2, [pc, #76]	; (800f100 <USB_CoreReset+0x64>)
 800f0b2:	4293      	cmp	r3, r2
 800f0b4:	d901      	bls.n	800f0ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f0b6:	2303      	movs	r3, #3
 800f0b8:	e01b      	b.n	800f0f2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	691b      	ldr	r3, [r3, #16]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	daf2      	bge.n	800f0a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	691b      	ldr	r3, [r3, #16]
 800f0ca:	f043 0201 	orr.w	r2, r3, #1
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	3301      	adds	r3, #1
 800f0d6:	60fb      	str	r3, [r7, #12]
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	4a09      	ldr	r2, [pc, #36]	; (800f100 <USB_CoreReset+0x64>)
 800f0dc:	4293      	cmp	r3, r2
 800f0de:	d901      	bls.n	800f0e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f0e0:	2303      	movs	r3, #3
 800f0e2:	e006      	b.n	800f0f2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	691b      	ldr	r3, [r3, #16]
 800f0e8:	f003 0301 	and.w	r3, r3, #1
 800f0ec:	2b01      	cmp	r3, #1
 800f0ee:	d0f0      	beq.n	800f0d2 <USB_CoreReset+0x36>

  return HAL_OK;
 800f0f0:	2300      	movs	r3, #0
}
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	3714      	adds	r7, #20
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fc:	4770      	bx	lr
 800f0fe:	bf00      	nop
 800f100:	00030d40 	.word	0x00030d40

0800f104 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f104:	b580      	push	{r7, lr}
 800f106:	b084      	sub	sp, #16
 800f108:	af00      	add	r7, sp, #0
 800f10a:	6078      	str	r0, [r7, #4]
 800f10c:	460b      	mov	r3, r1
 800f10e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800f110:	2300      	movs	r3, #0
 800f112:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	7c1b      	ldrb	r3, [r3, #16]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d115      	bne.n	800f148 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f11c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f120:	2202      	movs	r2, #2
 800f122:	2181      	movs	r1, #129	; 0x81
 800f124:	6878      	ldr	r0, [r7, #4]
 800f126:	f001 ffe2 	bl	80110ee <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	2201      	movs	r2, #1
 800f12e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f130:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f134:	2202      	movs	r2, #2
 800f136:	2101      	movs	r1, #1
 800f138:	6878      	ldr	r0, [r7, #4]
 800f13a:	f001 ffd8 	bl	80110ee <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	2201      	movs	r2, #1
 800f142:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800f146:	e012      	b.n	800f16e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f148:	2340      	movs	r3, #64	; 0x40
 800f14a:	2202      	movs	r2, #2
 800f14c:	2181      	movs	r1, #129	; 0x81
 800f14e:	6878      	ldr	r0, [r7, #4]
 800f150:	f001 ffcd 	bl	80110ee <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	2201      	movs	r2, #1
 800f158:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f15a:	2340      	movs	r3, #64	; 0x40
 800f15c:	2202      	movs	r2, #2
 800f15e:	2101      	movs	r1, #1
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	f001 ffc4 	bl	80110ee <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	2201      	movs	r2, #1
 800f16a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f16e:	2308      	movs	r3, #8
 800f170:	2203      	movs	r2, #3
 800f172:	2182      	movs	r1, #130	; 0x82
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	f001 ffba 	bl	80110ee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	2201      	movs	r2, #1
 800f17e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f180:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800f184:	f002 f930 	bl	80113e8 <malloc>
 800f188:	4603      	mov	r3, r0
 800f18a:	461a      	mov	r2, r3
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  memset(pdev->pClassData,0,sizeof(USBD_CDC_HandleTypeDef)); // THIS LINE WAS ADDED
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f198:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800f19c:	2100      	movs	r1, #0
 800f19e:	4618      	mov	r0, r3
 800f1a0:	f002 f93d 	bl	801141e <memset>
  if (pdev->pClassData == NULL)
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d102      	bne.n	800f1b4 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800f1ae:	2301      	movs	r3, #1
 800f1b0:	73fb      	strb	r3, [r7, #15]
 800f1b2:	e026      	b.n	800f202 <USBD_CDC_Init+0xfe>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1ba:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800f1c6:	68bb      	ldr	r3, [r7, #8]
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800f1ce:	68bb      	ldr	r3, [r7, #8]
 800f1d0:	2200      	movs	r2, #0
 800f1d2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	7c1b      	ldrb	r3, [r3, #16]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d109      	bne.n	800f1f2 <USBD_CDC_Init+0xee>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f1de:	68bb      	ldr	r3, [r7, #8]
 800f1e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f1e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f1e8:	2101      	movs	r1, #1
 800f1ea:	6878      	ldr	r0, [r7, #4]
 800f1ec:	f002 f870 	bl	80112d0 <USBD_LL_PrepareReceive>
 800f1f0:	e007      	b.n	800f202 <USBD_CDC_Init+0xfe>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f1f2:	68bb      	ldr	r3, [r7, #8]
 800f1f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f1f8:	2340      	movs	r3, #64	; 0x40
 800f1fa:	2101      	movs	r1, #1
 800f1fc:	6878      	ldr	r0, [r7, #4]
 800f1fe:	f002 f867 	bl	80112d0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800f202:	7bfb      	ldrb	r3, [r7, #15]
}
 800f204:	4618      	mov	r0, r3
 800f206:	3710      	adds	r7, #16
 800f208:	46bd      	mov	sp, r7
 800f20a:	bd80      	pop	{r7, pc}

0800f20c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b084      	sub	sp, #16
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
 800f214:	460b      	mov	r3, r1
 800f216:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800f218:	2300      	movs	r3, #0
 800f21a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800f21c:	2181      	movs	r1, #129	; 0x81
 800f21e:	6878      	ldr	r0, [r7, #4]
 800f220:	f001 ff8b 	bl	801113a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	2200      	movs	r2, #0
 800f228:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800f22a:	2101      	movs	r1, #1
 800f22c:	6878      	ldr	r0, [r7, #4]
 800f22e:	f001 ff84 	bl	801113a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	2200      	movs	r2, #0
 800f236:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800f23a:	2182      	movs	r1, #130	; 0x82
 800f23c:	6878      	ldr	r0, [r7, #4]
 800f23e:	f001 ff7c 	bl	801113a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	2200      	movs	r2, #0
 800f246:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d00e      	beq.n	800f270 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f258:	685b      	ldr	r3, [r3, #4]
 800f25a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f262:	4618      	mov	r0, r3
 800f264:	f002 f8c8 	bl	80113f8 <free>
    pdev->pClassData = NULL;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2200      	movs	r2, #0
 800f26c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800f270:	7bfb      	ldrb	r3, [r7, #15]
}
 800f272:	4618      	mov	r0, r3
 800f274:	3710      	adds	r7, #16
 800f276:	46bd      	mov	sp, r7
 800f278:	bd80      	pop	{r7, pc}

0800f27a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800f27a:	b580      	push	{r7, lr}
 800f27c:	b086      	sub	sp, #24
 800f27e:	af00      	add	r7, sp, #0
 800f280:	6078      	str	r0, [r7, #4]
 800f282:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f28a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800f28c:	2300      	movs	r3, #0
 800f28e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800f290:	2300      	movs	r3, #0
 800f292:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800f294:	2300      	movs	r3, #0
 800f296:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	781b      	ldrb	r3, [r3, #0]
 800f29c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d039      	beq.n	800f318 <USBD_CDC_Setup+0x9e>
 800f2a4:	2b20      	cmp	r3, #32
 800f2a6:	d17c      	bne.n	800f3a2 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	88db      	ldrh	r3, [r3, #6]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d029      	beq.n	800f304 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	781b      	ldrb	r3, [r3, #0]
 800f2b4:	b25b      	sxtb	r3, r3
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	da11      	bge.n	800f2de <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f2c0:	689b      	ldr	r3, [r3, #8]
 800f2c2:	683a      	ldr	r2, [r7, #0]
 800f2c4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800f2c6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f2c8:	683a      	ldr	r2, [r7, #0]
 800f2ca:	88d2      	ldrh	r2, [r2, #6]
 800f2cc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800f2ce:	6939      	ldr	r1, [r7, #16]
 800f2d0:	683b      	ldr	r3, [r7, #0]
 800f2d2:	88db      	ldrh	r3, [r3, #6]
 800f2d4:	461a      	mov	r2, r3
 800f2d6:	6878      	ldr	r0, [r7, #4]
 800f2d8:	f001 fa40 	bl	801075c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800f2dc:	e068      	b.n	800f3b0 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800f2de:	683b      	ldr	r3, [r7, #0]
 800f2e0:	785a      	ldrb	r2, [r3, #1]
 800f2e2:	693b      	ldr	r3, [r7, #16]
 800f2e4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	88db      	ldrh	r3, [r3, #6]
 800f2ec:	b2da      	uxtb	r2, r3
 800f2ee:	693b      	ldr	r3, [r7, #16]
 800f2f0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800f2f4:	6939      	ldr	r1, [r7, #16]
 800f2f6:	683b      	ldr	r3, [r7, #0]
 800f2f8:	88db      	ldrh	r3, [r3, #6]
 800f2fa:	461a      	mov	r2, r3
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f001 fa5b 	bl	80107b8 <USBD_CtlPrepareRx>
      break;
 800f302:	e055      	b.n	800f3b0 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f30a:	689b      	ldr	r3, [r3, #8]
 800f30c:	683a      	ldr	r2, [r7, #0]
 800f30e:	7850      	ldrb	r0, [r2, #1]
 800f310:	2200      	movs	r2, #0
 800f312:	6839      	ldr	r1, [r7, #0]
 800f314:	4798      	blx	r3
      break;
 800f316:	e04b      	b.n	800f3b0 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f318:	683b      	ldr	r3, [r7, #0]
 800f31a:	785b      	ldrb	r3, [r3, #1]
 800f31c:	2b0a      	cmp	r3, #10
 800f31e:	d017      	beq.n	800f350 <USBD_CDC_Setup+0xd6>
 800f320:	2b0b      	cmp	r3, #11
 800f322:	d029      	beq.n	800f378 <USBD_CDC_Setup+0xfe>
 800f324:	2b00      	cmp	r3, #0
 800f326:	d133      	bne.n	800f390 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f32e:	2b03      	cmp	r3, #3
 800f330:	d107      	bne.n	800f342 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800f332:	f107 030c 	add.w	r3, r7, #12
 800f336:	2202      	movs	r2, #2
 800f338:	4619      	mov	r1, r3
 800f33a:	6878      	ldr	r0, [r7, #4]
 800f33c:	f001 fa0e 	bl	801075c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f340:	e02e      	b.n	800f3a0 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800f342:	6839      	ldr	r1, [r7, #0]
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	f001 f99e 	bl	8010686 <USBD_CtlError>
            ret = USBD_FAIL;
 800f34a:	2302      	movs	r3, #2
 800f34c:	75fb      	strb	r3, [r7, #23]
          break;
 800f34e:	e027      	b.n	800f3a0 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f356:	2b03      	cmp	r3, #3
 800f358:	d107      	bne.n	800f36a <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800f35a:	f107 030f 	add.w	r3, r7, #15
 800f35e:	2201      	movs	r2, #1
 800f360:	4619      	mov	r1, r3
 800f362:	6878      	ldr	r0, [r7, #4]
 800f364:	f001 f9fa 	bl	801075c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f368:	e01a      	b.n	800f3a0 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800f36a:	6839      	ldr	r1, [r7, #0]
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	f001 f98a 	bl	8010686 <USBD_CtlError>
            ret = USBD_FAIL;
 800f372:	2302      	movs	r3, #2
 800f374:	75fb      	strb	r3, [r7, #23]
          break;
 800f376:	e013      	b.n	800f3a0 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f37e:	2b03      	cmp	r3, #3
 800f380:	d00d      	beq.n	800f39e <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 800f382:	6839      	ldr	r1, [r7, #0]
 800f384:	6878      	ldr	r0, [r7, #4]
 800f386:	f001 f97e 	bl	8010686 <USBD_CtlError>
            ret = USBD_FAIL;
 800f38a:	2302      	movs	r3, #2
 800f38c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f38e:	e006      	b.n	800f39e <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800f390:	6839      	ldr	r1, [r7, #0]
 800f392:	6878      	ldr	r0, [r7, #4]
 800f394:	f001 f977 	bl	8010686 <USBD_CtlError>
          ret = USBD_FAIL;
 800f398:	2302      	movs	r3, #2
 800f39a:	75fb      	strb	r3, [r7, #23]
          break;
 800f39c:	e000      	b.n	800f3a0 <USBD_CDC_Setup+0x126>
          break;
 800f39e:	bf00      	nop
      }
      break;
 800f3a0:	e006      	b.n	800f3b0 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800f3a2:	6839      	ldr	r1, [r7, #0]
 800f3a4:	6878      	ldr	r0, [r7, #4]
 800f3a6:	f001 f96e 	bl	8010686 <USBD_CtlError>
      ret = USBD_FAIL;
 800f3aa:	2302      	movs	r3, #2
 800f3ac:	75fb      	strb	r3, [r7, #23]
      break;
 800f3ae:	bf00      	nop
  }

  return ret;
 800f3b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	3718      	adds	r7, #24
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	bd80      	pop	{r7, pc}

0800f3ba <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f3ba:	b580      	push	{r7, lr}
 800f3bc:	b084      	sub	sp, #16
 800f3be:	af00      	add	r7, sp, #0
 800f3c0:	6078      	str	r0, [r7, #4]
 800f3c2:	460b      	mov	r3, r1
 800f3c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3cc:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f3d4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d03a      	beq.n	800f456 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800f3e0:	78fa      	ldrb	r2, [r7, #3]
 800f3e2:	6879      	ldr	r1, [r7, #4]
 800f3e4:	4613      	mov	r3, r2
 800f3e6:	009b      	lsls	r3, r3, #2
 800f3e8:	4413      	add	r3, r2
 800f3ea:	009b      	lsls	r3, r3, #2
 800f3ec:	440b      	add	r3, r1
 800f3ee:	331c      	adds	r3, #28
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d029      	beq.n	800f44a <USBD_CDC_DataIn+0x90>
 800f3f6:	78fa      	ldrb	r2, [r7, #3]
 800f3f8:	6879      	ldr	r1, [r7, #4]
 800f3fa:	4613      	mov	r3, r2
 800f3fc:	009b      	lsls	r3, r3, #2
 800f3fe:	4413      	add	r3, r2
 800f400:	009b      	lsls	r3, r3, #2
 800f402:	440b      	add	r3, r1
 800f404:	331c      	adds	r3, #28
 800f406:	681a      	ldr	r2, [r3, #0]
 800f408:	78f9      	ldrb	r1, [r7, #3]
 800f40a:	68b8      	ldr	r0, [r7, #8]
 800f40c:	460b      	mov	r3, r1
 800f40e:	00db      	lsls	r3, r3, #3
 800f410:	1a5b      	subs	r3, r3, r1
 800f412:	009b      	lsls	r3, r3, #2
 800f414:	4403      	add	r3, r0
 800f416:	3344      	adds	r3, #68	; 0x44
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	fbb2 f1f3 	udiv	r1, r2, r3
 800f41e:	fb03 f301 	mul.w	r3, r3, r1
 800f422:	1ad3      	subs	r3, r2, r3
 800f424:	2b00      	cmp	r3, #0
 800f426:	d110      	bne.n	800f44a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800f428:	78fa      	ldrb	r2, [r7, #3]
 800f42a:	6879      	ldr	r1, [r7, #4]
 800f42c:	4613      	mov	r3, r2
 800f42e:	009b      	lsls	r3, r3, #2
 800f430:	4413      	add	r3, r2
 800f432:	009b      	lsls	r3, r3, #2
 800f434:	440b      	add	r3, r1
 800f436:	331c      	adds	r3, #28
 800f438:	2200      	movs	r2, #0
 800f43a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f43c:	78f9      	ldrb	r1, [r7, #3]
 800f43e:	2300      	movs	r3, #0
 800f440:	2200      	movs	r2, #0
 800f442:	6878      	ldr	r0, [r7, #4]
 800f444:	f001 ff21 	bl	801128a <USBD_LL_Transmit>
 800f448:	e003      	b.n	800f452 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	2200      	movs	r2, #0
 800f44e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800f452:	2300      	movs	r3, #0
 800f454:	e000      	b.n	800f458 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800f456:	2302      	movs	r3, #2
  }
}
 800f458:	4618      	mov	r0, r3
 800f45a:	3710      	adds	r7, #16
 800f45c:	46bd      	mov	sp, r7
 800f45e:	bd80      	pop	{r7, pc}

0800f460 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b084      	sub	sp, #16
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
 800f468:	460b      	mov	r3, r1
 800f46a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f472:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f474:	78fb      	ldrb	r3, [r7, #3]
 800f476:	4619      	mov	r1, r3
 800f478:	6878      	ldr	r0, [r7, #4]
 800f47a:	f001 ff4c 	bl	8011316 <USBD_LL_GetRxDataSize>
 800f47e:	4602      	mov	r2, r0
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d00d      	beq.n	800f4ac <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f496:	68db      	ldr	r3, [r3, #12]
 800f498:	68fa      	ldr	r2, [r7, #12]
 800f49a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800f49e:	68fa      	ldr	r2, [r7, #12]
 800f4a0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800f4a4:	4611      	mov	r1, r2
 800f4a6:	4798      	blx	r3

    return USBD_OK;
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	e000      	b.n	800f4ae <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800f4ac:	2302      	movs	r3, #2
  }
}
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	3710      	adds	r7, #16
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	bd80      	pop	{r7, pc}

0800f4b6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f4b6:	b580      	push	{r7, lr}
 800f4b8:	b084      	sub	sp, #16
 800f4ba:	af00      	add	r7, sp, #0
 800f4bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f4c4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d015      	beq.n	800f4fc <USBD_CDC_EP0_RxReady+0x46>
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f4d6:	2bff      	cmp	r3, #255	; 0xff
 800f4d8:	d010      	beq.n	800f4fc <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f4e0:	689b      	ldr	r3, [r3, #8]
 800f4e2:	68fa      	ldr	r2, [r7, #12]
 800f4e4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800f4e8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800f4ea:	68fa      	ldr	r2, [r7, #12]
 800f4ec:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f4f0:	b292      	uxth	r2, r2
 800f4f2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	22ff      	movs	r2, #255	; 0xff
 800f4f8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800f4fc:	2300      	movs	r3, #0
}
 800f4fe:	4618      	mov	r0, r3
 800f500:	3710      	adds	r7, #16
 800f502:	46bd      	mov	sp, r7
 800f504:	bd80      	pop	{r7, pc}
	...

0800f508 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f508:	b480      	push	{r7}
 800f50a:	b083      	sub	sp, #12
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	2243      	movs	r2, #67	; 0x43
 800f514:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800f516:	4b03      	ldr	r3, [pc, #12]	; (800f524 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800f518:	4618      	mov	r0, r3
 800f51a:	370c      	adds	r7, #12
 800f51c:	46bd      	mov	sp, r7
 800f51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f522:	4770      	bx	lr
 800f524:	24000098 	.word	0x24000098

0800f528 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f528:	b480      	push	{r7}
 800f52a:	b083      	sub	sp, #12
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	2243      	movs	r2, #67	; 0x43
 800f534:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800f536:	4b03      	ldr	r3, [pc, #12]	; (800f544 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800f538:	4618      	mov	r0, r3
 800f53a:	370c      	adds	r7, #12
 800f53c:	46bd      	mov	sp, r7
 800f53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f542:	4770      	bx	lr
 800f544:	24000054 	.word	0x24000054

0800f548 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f548:	b480      	push	{r7}
 800f54a:	b083      	sub	sp, #12
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2243      	movs	r2, #67	; 0x43
 800f554:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800f556:	4b03      	ldr	r3, [pc, #12]	; (800f564 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800f558:	4618      	mov	r0, r3
 800f55a:	370c      	adds	r7, #12
 800f55c:	46bd      	mov	sp, r7
 800f55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f562:	4770      	bx	lr
 800f564:	240000dc 	.word	0x240000dc

0800f568 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f568:	b480      	push	{r7}
 800f56a:	b083      	sub	sp, #12
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	220a      	movs	r2, #10
 800f574:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800f576:	4b03      	ldr	r3, [pc, #12]	; (800f584 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f578:	4618      	mov	r0, r3
 800f57a:	370c      	adds	r7, #12
 800f57c:	46bd      	mov	sp, r7
 800f57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f582:	4770      	bx	lr
 800f584:	24000010 	.word	0x24000010

0800f588 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800f588:	b480      	push	{r7}
 800f58a:	b085      	sub	sp, #20
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
 800f590:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800f592:	2302      	movs	r3, #2
 800f594:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d005      	beq.n	800f5a8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	683a      	ldr	r2, [r7, #0]
 800f5a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f5a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	3714      	adds	r7, #20
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b4:	4770      	bx	lr

0800f5b6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800f5b6:	b480      	push	{r7}
 800f5b8:	b087      	sub	sp, #28
 800f5ba:	af00      	add	r7, sp, #0
 800f5bc:	60f8      	str	r0, [r7, #12]
 800f5be:	60b9      	str	r1, [r7, #8]
 800f5c0:	4613      	mov	r3, r2
 800f5c2:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5ca:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800f5cc:	697b      	ldr	r3, [r7, #20]
 800f5ce:	68ba      	ldr	r2, [r7, #8]
 800f5d0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800f5d4:	88fa      	ldrh	r2, [r7, #6]
 800f5d6:	697b      	ldr	r3, [r7, #20]
 800f5d8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800f5dc:	2300      	movs	r3, #0
}
 800f5de:	4618      	mov	r0, r3
 800f5e0:	371c      	adds	r7, #28
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e8:	4770      	bx	lr

0800f5ea <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800f5ea:	b480      	push	{r7}
 800f5ec:	b085      	sub	sp, #20
 800f5ee:	af00      	add	r7, sp, #0
 800f5f0:	6078      	str	r0, [r7, #4]
 800f5f2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5fa:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	683a      	ldr	r2, [r7, #0]
 800f600:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800f604:	2300      	movs	r3, #0
}
 800f606:	4618      	mov	r0, r3
 800f608:	3714      	adds	r7, #20
 800f60a:	46bd      	mov	sp, r7
 800f60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f610:	4770      	bx	lr

0800f612 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800f612:	b580      	push	{r7, lr}
 800f614:	b084      	sub	sp, #16
 800f616:	af00      	add	r7, sp, #0
 800f618:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f620:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d01c      	beq.n	800f666 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f632:	2b00      	cmp	r3, #0
 800f634:	d115      	bne.n	800f662 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	2201      	movs	r2, #1
 800f63a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800f654:	b29b      	uxth	r3, r3
 800f656:	2181      	movs	r1, #129	; 0x81
 800f658:	6878      	ldr	r0, [r7, #4]
 800f65a:	f001 fe16 	bl	801128a <USBD_LL_Transmit>

      return USBD_OK;
 800f65e:	2300      	movs	r3, #0
 800f660:	e002      	b.n	800f668 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800f662:	2301      	movs	r3, #1
 800f664:	e000      	b.n	800f668 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800f666:	2302      	movs	r3, #2
  }
}
 800f668:	4618      	mov	r0, r3
 800f66a:	3710      	adds	r7, #16
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}

0800f670 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b084      	sub	sp, #16
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f67e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f686:	2b00      	cmp	r3, #0
 800f688:	d017      	beq.n	800f6ba <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	7c1b      	ldrb	r3, [r3, #16]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d109      	bne.n	800f6a6 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f698:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f69c:	2101      	movs	r1, #1
 800f69e:	6878      	ldr	r0, [r7, #4]
 800f6a0:	f001 fe16 	bl	80112d0 <USBD_LL_PrepareReceive>
 800f6a4:	e007      	b.n	800f6b6 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f6ac:	2340      	movs	r3, #64	; 0x40
 800f6ae:	2101      	movs	r1, #1
 800f6b0:	6878      	ldr	r0, [r7, #4]
 800f6b2:	f001 fe0d 	bl	80112d0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	e000      	b.n	800f6bc <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800f6ba:	2302      	movs	r3, #2
  }
}
 800f6bc:	4618      	mov	r0, r3
 800f6be:	3710      	adds	r7, #16
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	bd80      	pop	{r7, pc}

0800f6c4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b084      	sub	sp, #16
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	60f8      	str	r0, [r7, #12]
 800f6cc:	60b9      	str	r1, [r7, #8]
 800f6ce:	4613      	mov	r3, r2
 800f6d0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d101      	bne.n	800f6dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f6d8:	2302      	movs	r3, #2
 800f6da:	e01a      	b.n	800f712 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d003      	beq.n	800f6ee <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f6ee:	68bb      	ldr	r3, [r7, #8]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d003      	beq.n	800f6fc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	68ba      	ldr	r2, [r7, #8]
 800f6f8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	2201      	movs	r2, #1
 800f700:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	79fa      	ldrb	r2, [r7, #7]
 800f708:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800f70a:	68f8      	ldr	r0, [r7, #12]
 800f70c:	f001 fc84 	bl	8011018 <USBD_LL_Init>

  return USBD_OK;
 800f710:	2300      	movs	r3, #0
}
 800f712:	4618      	mov	r0, r3
 800f714:	3710      	adds	r7, #16
 800f716:	46bd      	mov	sp, r7
 800f718:	bd80      	pop	{r7, pc}

0800f71a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f71a:	b480      	push	{r7}
 800f71c:	b085      	sub	sp, #20
 800f71e:	af00      	add	r7, sp, #0
 800f720:	6078      	str	r0, [r7, #4]
 800f722:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800f724:	2300      	movs	r3, #0
 800f726:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800f728:	683b      	ldr	r3, [r7, #0]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d006      	beq.n	800f73c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	683a      	ldr	r2, [r7, #0]
 800f732:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800f736:	2300      	movs	r3, #0
 800f738:	73fb      	strb	r3, [r7, #15]
 800f73a:	e001      	b.n	800f740 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800f73c:	2302      	movs	r3, #2
 800f73e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f740:	7bfb      	ldrb	r3, [r7, #15]
}
 800f742:	4618      	mov	r0, r3
 800f744:	3714      	adds	r7, #20
 800f746:	46bd      	mov	sp, r7
 800f748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74c:	4770      	bx	lr

0800f74e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f74e:	b580      	push	{r7, lr}
 800f750:	b082      	sub	sp, #8
 800f752:	af00      	add	r7, sp, #0
 800f754:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800f756:	6878      	ldr	r0, [r7, #4]
 800f758:	f001 fcae 	bl	80110b8 <USBD_LL_Start>

  return USBD_OK;
 800f75c:	2300      	movs	r3, #0
}
 800f75e:	4618      	mov	r0, r3
 800f760:	3708      	adds	r7, #8
 800f762:	46bd      	mov	sp, r7
 800f764:	bd80      	pop	{r7, pc}

0800f766 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f766:	b480      	push	{r7}
 800f768:	b083      	sub	sp, #12
 800f76a:	af00      	add	r7, sp, #0
 800f76c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f76e:	2300      	movs	r3, #0
}
 800f770:	4618      	mov	r0, r3
 800f772:	370c      	adds	r7, #12
 800f774:	46bd      	mov	sp, r7
 800f776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77a:	4770      	bx	lr

0800f77c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b084      	sub	sp, #16
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
 800f784:	460b      	mov	r3, r1
 800f786:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f788:	2302      	movs	r3, #2
 800f78a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f792:	2b00      	cmp	r3, #0
 800f794:	d00c      	beq.n	800f7b0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	78fa      	ldrb	r2, [r7, #3]
 800f7a0:	4611      	mov	r1, r2
 800f7a2:	6878      	ldr	r0, [r7, #4]
 800f7a4:	4798      	blx	r3
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d101      	bne.n	800f7b0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800f7b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	3710      	adds	r7, #16
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	bd80      	pop	{r7, pc}

0800f7ba <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800f7ba:	b580      	push	{r7, lr}
 800f7bc:	b082      	sub	sp, #8
 800f7be:	af00      	add	r7, sp, #0
 800f7c0:	6078      	str	r0, [r7, #4]
 800f7c2:	460b      	mov	r3, r1
 800f7c4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7cc:	685b      	ldr	r3, [r3, #4]
 800f7ce:	78fa      	ldrb	r2, [r7, #3]
 800f7d0:	4611      	mov	r1, r2
 800f7d2:	6878      	ldr	r0, [r7, #4]
 800f7d4:	4798      	blx	r3

  return USBD_OK;
 800f7d6:	2300      	movs	r3, #0
}
 800f7d8:	4618      	mov	r0, r3
 800f7da:	3708      	adds	r7, #8
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	bd80      	pop	{r7, pc}

0800f7e0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b082      	sub	sp, #8
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]
 800f7e8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800f7f0:	6839      	ldr	r1, [r7, #0]
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	f000 ff0a 	bl	801060c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	2201      	movs	r2, #1
 800f7fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800f806:	461a      	mov	r2, r3
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800f814:	f003 031f 	and.w	r3, r3, #31
 800f818:	2b01      	cmp	r3, #1
 800f81a:	d00c      	beq.n	800f836 <USBD_LL_SetupStage+0x56>
 800f81c:	2b01      	cmp	r3, #1
 800f81e:	d302      	bcc.n	800f826 <USBD_LL_SetupStage+0x46>
 800f820:	2b02      	cmp	r3, #2
 800f822:	d010      	beq.n	800f846 <USBD_LL_SetupStage+0x66>
 800f824:	e017      	b.n	800f856 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800f82c:	4619      	mov	r1, r3
 800f82e:	6878      	ldr	r0, [r7, #4]
 800f830:	f000 fa0a 	bl	800fc48 <USBD_StdDevReq>
      break;
 800f834:	e01a      	b.n	800f86c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800f83c:	4619      	mov	r1, r3
 800f83e:	6878      	ldr	r0, [r7, #4]
 800f840:	f000 fa6c 	bl	800fd1c <USBD_StdItfReq>
      break;
 800f844:	e012      	b.n	800f86c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800f84c:	4619      	mov	r1, r3
 800f84e:	6878      	ldr	r0, [r7, #4]
 800f850:	f000 faaa 	bl	800fda8 <USBD_StdEPReq>
      break;
 800f854:	e00a      	b.n	800f86c <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800f85c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f860:	b2db      	uxtb	r3, r3
 800f862:	4619      	mov	r1, r3
 800f864:	6878      	ldr	r0, [r7, #4]
 800f866:	f001 fc87 	bl	8011178 <USBD_LL_StallEP>
      break;
 800f86a:	bf00      	nop
  }

  return USBD_OK;
 800f86c:	2300      	movs	r3, #0
}
 800f86e:	4618      	mov	r0, r3
 800f870:	3708      	adds	r7, #8
 800f872:	46bd      	mov	sp, r7
 800f874:	bd80      	pop	{r7, pc}

0800f876 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f876:	b580      	push	{r7, lr}
 800f878:	b086      	sub	sp, #24
 800f87a:	af00      	add	r7, sp, #0
 800f87c:	60f8      	str	r0, [r7, #12]
 800f87e:	460b      	mov	r3, r1
 800f880:	607a      	str	r2, [r7, #4]
 800f882:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800f884:	7afb      	ldrb	r3, [r7, #11]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d14b      	bne.n	800f922 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f890:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f898:	2b03      	cmp	r3, #3
 800f89a:	d134      	bne.n	800f906 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800f89c:	697b      	ldr	r3, [r7, #20]
 800f89e:	68da      	ldr	r2, [r3, #12]
 800f8a0:	697b      	ldr	r3, [r7, #20]
 800f8a2:	691b      	ldr	r3, [r3, #16]
 800f8a4:	429a      	cmp	r2, r3
 800f8a6:	d919      	bls.n	800f8dc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800f8a8:	697b      	ldr	r3, [r7, #20]
 800f8aa:	68da      	ldr	r2, [r3, #12]
 800f8ac:	697b      	ldr	r3, [r7, #20]
 800f8ae:	691b      	ldr	r3, [r3, #16]
 800f8b0:	1ad2      	subs	r2, r2, r3
 800f8b2:	697b      	ldr	r3, [r7, #20]
 800f8b4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800f8b6:	697b      	ldr	r3, [r7, #20]
 800f8b8:	68da      	ldr	r2, [r3, #12]
 800f8ba:	697b      	ldr	r3, [r7, #20]
 800f8bc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800f8be:	429a      	cmp	r2, r3
 800f8c0:	d203      	bcs.n	800f8ca <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800f8c2:	697b      	ldr	r3, [r7, #20]
 800f8c4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800f8c6:	b29b      	uxth	r3, r3
 800f8c8:	e002      	b.n	800f8d0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800f8ca:	697b      	ldr	r3, [r7, #20]
 800f8cc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800f8ce:	b29b      	uxth	r3, r3
 800f8d0:	461a      	mov	r2, r3
 800f8d2:	6879      	ldr	r1, [r7, #4]
 800f8d4:	68f8      	ldr	r0, [r7, #12]
 800f8d6:	f000 ff8d 	bl	80107f4 <USBD_CtlContinueRx>
 800f8da:	e038      	b.n	800f94e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f8e2:	691b      	ldr	r3, [r3, #16]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d00a      	beq.n	800f8fe <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800f8ee:	2b03      	cmp	r3, #3
 800f8f0:	d105      	bne.n	800f8fe <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f8f8:	691b      	ldr	r3, [r3, #16]
 800f8fa:	68f8      	ldr	r0, [r7, #12]
 800f8fc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800f8fe:	68f8      	ldr	r0, [r7, #12]
 800f900:	f000 ff8a 	bl	8010818 <USBD_CtlSendStatus>
 800f904:	e023      	b.n	800f94e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f90c:	2b05      	cmp	r3, #5
 800f90e:	d11e      	bne.n	800f94e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	2200      	movs	r2, #0
 800f914:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800f918:	2100      	movs	r1, #0
 800f91a:	68f8      	ldr	r0, [r7, #12]
 800f91c:	f001 fc2c 	bl	8011178 <USBD_LL_StallEP>
 800f920:	e015      	b.n	800f94e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f928:	699b      	ldr	r3, [r3, #24]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d00d      	beq.n	800f94a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800f934:	2b03      	cmp	r3, #3
 800f936:	d108      	bne.n	800f94a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f93e:	699b      	ldr	r3, [r3, #24]
 800f940:	7afa      	ldrb	r2, [r7, #11]
 800f942:	4611      	mov	r1, r2
 800f944:	68f8      	ldr	r0, [r7, #12]
 800f946:	4798      	blx	r3
 800f948:	e001      	b.n	800f94e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f94a:	2302      	movs	r3, #2
 800f94c:	e000      	b.n	800f950 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800f94e:	2300      	movs	r3, #0
}
 800f950:	4618      	mov	r0, r3
 800f952:	3718      	adds	r7, #24
 800f954:	46bd      	mov	sp, r7
 800f956:	bd80      	pop	{r7, pc}

0800f958 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f958:	b580      	push	{r7, lr}
 800f95a:	b086      	sub	sp, #24
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	60f8      	str	r0, [r7, #12]
 800f960:	460b      	mov	r3, r1
 800f962:	607a      	str	r2, [r7, #4]
 800f964:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800f966:	7afb      	ldrb	r3, [r7, #11]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d17f      	bne.n	800fa6c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	3314      	adds	r3, #20
 800f970:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f978:	2b02      	cmp	r3, #2
 800f97a:	d15c      	bne.n	800fa36 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800f97c:	697b      	ldr	r3, [r7, #20]
 800f97e:	68da      	ldr	r2, [r3, #12]
 800f980:	697b      	ldr	r3, [r7, #20]
 800f982:	691b      	ldr	r3, [r3, #16]
 800f984:	429a      	cmp	r2, r3
 800f986:	d915      	bls.n	800f9b4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800f988:	697b      	ldr	r3, [r7, #20]
 800f98a:	68da      	ldr	r2, [r3, #12]
 800f98c:	697b      	ldr	r3, [r7, #20]
 800f98e:	691b      	ldr	r3, [r3, #16]
 800f990:	1ad2      	subs	r2, r2, r3
 800f992:	697b      	ldr	r3, [r7, #20]
 800f994:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800f996:	697b      	ldr	r3, [r7, #20]
 800f998:	68db      	ldr	r3, [r3, #12]
 800f99a:	b29b      	uxth	r3, r3
 800f99c:	461a      	mov	r2, r3
 800f99e:	6879      	ldr	r1, [r7, #4]
 800f9a0:	68f8      	ldr	r0, [r7, #12]
 800f9a2:	f000 fef7 	bl	8010794 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	2100      	movs	r1, #0
 800f9ac:	68f8      	ldr	r0, [r7, #12]
 800f9ae:	f001 fc8f 	bl	80112d0 <USBD_LL_PrepareReceive>
 800f9b2:	e04e      	b.n	800fa52 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800f9b4:	697b      	ldr	r3, [r7, #20]
 800f9b6:	689b      	ldr	r3, [r3, #8]
 800f9b8:	697a      	ldr	r2, [r7, #20]
 800f9ba:	6912      	ldr	r2, [r2, #16]
 800f9bc:	fbb3 f1f2 	udiv	r1, r3, r2
 800f9c0:	fb02 f201 	mul.w	r2, r2, r1
 800f9c4:	1a9b      	subs	r3, r3, r2
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d11c      	bne.n	800fa04 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800f9ca:	697b      	ldr	r3, [r7, #20]
 800f9cc:	689a      	ldr	r2, [r3, #8]
 800f9ce:	697b      	ldr	r3, [r7, #20]
 800f9d0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800f9d2:	429a      	cmp	r2, r3
 800f9d4:	d316      	bcc.n	800fa04 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800f9d6:	697b      	ldr	r3, [r7, #20]
 800f9d8:	689a      	ldr	r2, [r3, #8]
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f9e0:	429a      	cmp	r2, r3
 800f9e2:	d20f      	bcs.n	800fa04 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	2100      	movs	r1, #0
 800f9e8:	68f8      	ldr	r0, [r7, #12]
 800f9ea:	f000 fed3 	bl	8010794 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	2100      	movs	r1, #0
 800f9fc:	68f8      	ldr	r0, [r7, #12]
 800f9fe:	f001 fc67 	bl	80112d0 <USBD_LL_PrepareReceive>
 800fa02:	e026      	b.n	800fa52 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fa0a:	68db      	ldr	r3, [r3, #12]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d00a      	beq.n	800fa26 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800fa16:	2b03      	cmp	r3, #3
 800fa18:	d105      	bne.n	800fa26 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fa20:	68db      	ldr	r3, [r3, #12]
 800fa22:	68f8      	ldr	r0, [r7, #12]
 800fa24:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800fa26:	2180      	movs	r1, #128	; 0x80
 800fa28:	68f8      	ldr	r0, [r7, #12]
 800fa2a:	f001 fba5 	bl	8011178 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800fa2e:	68f8      	ldr	r0, [r7, #12]
 800fa30:	f000 ff05 	bl	801083e <USBD_CtlReceiveStatus>
 800fa34:	e00d      	b.n	800fa52 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fa3c:	2b04      	cmp	r3, #4
 800fa3e:	d004      	beq.n	800fa4a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d103      	bne.n	800fa52 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800fa4a:	2180      	movs	r1, #128	; 0x80
 800fa4c:	68f8      	ldr	r0, [r7, #12]
 800fa4e:	f001 fb93 	bl	8011178 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800fa58:	2b01      	cmp	r3, #1
 800fa5a:	d11d      	bne.n	800fa98 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800fa5c:	68f8      	ldr	r0, [r7, #12]
 800fa5e:	f7ff fe82 	bl	800f766 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	2200      	movs	r2, #0
 800fa66:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800fa6a:	e015      	b.n	800fa98 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fa72:	695b      	ldr	r3, [r3, #20]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d00d      	beq.n	800fa94 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800fa7e:	2b03      	cmp	r3, #3
 800fa80:	d108      	bne.n	800fa94 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fa88:	695b      	ldr	r3, [r3, #20]
 800fa8a:	7afa      	ldrb	r2, [r7, #11]
 800fa8c:	4611      	mov	r1, r2
 800fa8e:	68f8      	ldr	r0, [r7, #12]
 800fa90:	4798      	blx	r3
 800fa92:	e001      	b.n	800fa98 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800fa94:	2302      	movs	r3, #2
 800fa96:	e000      	b.n	800fa9a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800fa98:	2300      	movs	r3, #0
}
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	3718      	adds	r7, #24
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	bd80      	pop	{r7, pc}

0800faa2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800faa2:	b580      	push	{r7, lr}
 800faa4:	b082      	sub	sp, #8
 800faa6:	af00      	add	r7, sp, #0
 800faa8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800faaa:	2340      	movs	r3, #64	; 0x40
 800faac:	2200      	movs	r2, #0
 800faae:	2100      	movs	r1, #0
 800fab0:	6878      	ldr	r0, [r7, #4]
 800fab2:	f001 fb1c 	bl	80110ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	2201      	movs	r2, #1
 800faba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	2240      	movs	r2, #64	; 0x40
 800fac2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fac6:	2340      	movs	r3, #64	; 0x40
 800fac8:	2200      	movs	r2, #0
 800faca:	2180      	movs	r1, #128	; 0x80
 800facc:	6878      	ldr	r0, [r7, #4]
 800face:	f001 fb0e 	bl	80110ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	2201      	movs	r2, #1
 800fad6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	2240      	movs	r2, #64	; 0x40
 800fadc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	2201      	movs	r2, #1
 800fae2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	2200      	movs	r2, #0
 800faea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	2200      	movs	r2, #0
 800faf2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2200      	movs	r2, #0
 800faf8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d009      	beq.n	800fb1a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb0c:	685b      	ldr	r3, [r3, #4]
 800fb0e:	687a      	ldr	r2, [r7, #4]
 800fb10:	6852      	ldr	r2, [r2, #4]
 800fb12:	b2d2      	uxtb	r2, r2
 800fb14:	4611      	mov	r1, r2
 800fb16:	6878      	ldr	r0, [r7, #4]
 800fb18:	4798      	blx	r3
  }

  return USBD_OK;
 800fb1a:	2300      	movs	r3, #0
}
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	3708      	adds	r7, #8
 800fb20:	46bd      	mov	sp, r7
 800fb22:	bd80      	pop	{r7, pc}

0800fb24 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800fb24:	b480      	push	{r7}
 800fb26:	b083      	sub	sp, #12
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
 800fb2c:	460b      	mov	r3, r1
 800fb2e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	78fa      	ldrb	r2, [r7, #3]
 800fb34:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800fb36:	2300      	movs	r3, #0
}
 800fb38:	4618      	mov	r0, r3
 800fb3a:	370c      	adds	r7, #12
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb42:	4770      	bx	lr

0800fb44 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800fb44:	b480      	push	{r7}
 800fb46:	b083      	sub	sp, #12
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	2204      	movs	r2, #4
 800fb5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800fb60:	2300      	movs	r3, #0
}
 800fb62:	4618      	mov	r0, r3
 800fb64:	370c      	adds	r7, #12
 800fb66:	46bd      	mov	sp, r7
 800fb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6c:	4770      	bx	lr

0800fb6e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800fb6e:	b480      	push	{r7}
 800fb70:	b083      	sub	sp, #12
 800fb72:	af00      	add	r7, sp, #0
 800fb74:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb7c:	2b04      	cmp	r3, #4
 800fb7e:	d105      	bne.n	800fb8c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800fb8c:	2300      	movs	r3, #0
}
 800fb8e:	4618      	mov	r0, r3
 800fb90:	370c      	adds	r7, #12
 800fb92:	46bd      	mov	sp, r7
 800fb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb98:	4770      	bx	lr

0800fb9a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800fb9a:	b580      	push	{r7, lr}
 800fb9c:	b082      	sub	sp, #8
 800fb9e:	af00      	add	r7, sp, #0
 800fba0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fba8:	2b03      	cmp	r3, #3
 800fbaa:	d10b      	bne.n	800fbc4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fbb2:	69db      	ldr	r3, [r3, #28]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d005      	beq.n	800fbc4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fbbe:	69db      	ldr	r3, [r3, #28]
 800fbc0:	6878      	ldr	r0, [r7, #4]
 800fbc2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fbc4:	2300      	movs	r3, #0
}
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	3708      	adds	r7, #8
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	bd80      	pop	{r7, pc}

0800fbce <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800fbce:	b480      	push	{r7}
 800fbd0:	b083      	sub	sp, #12
 800fbd2:	af00      	add	r7, sp, #0
 800fbd4:	6078      	str	r0, [r7, #4]
 800fbd6:	460b      	mov	r3, r1
 800fbd8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800fbda:	2300      	movs	r3, #0
}
 800fbdc:	4618      	mov	r0, r3
 800fbde:	370c      	adds	r7, #12
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe6:	4770      	bx	lr

0800fbe8 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800fbe8:	b480      	push	{r7}
 800fbea:	b083      	sub	sp, #12
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
 800fbf0:	460b      	mov	r3, r1
 800fbf2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800fbf4:	2300      	movs	r3, #0
}
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	370c      	adds	r7, #12
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc00:	4770      	bx	lr

0800fc02 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800fc02:	b480      	push	{r7}
 800fc04:	b083      	sub	sp, #12
 800fc06:	af00      	add	r7, sp, #0
 800fc08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fc0a:	2300      	movs	r3, #0
}
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	370c      	adds	r7, #12
 800fc10:	46bd      	mov	sp, r7
 800fc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc16:	4770      	bx	lr

0800fc18 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b082      	sub	sp, #8
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	2201      	movs	r2, #1
 800fc24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc2e:	685b      	ldr	r3, [r3, #4]
 800fc30:	687a      	ldr	r2, [r7, #4]
 800fc32:	6852      	ldr	r2, [r2, #4]
 800fc34:	b2d2      	uxtb	r2, r2
 800fc36:	4611      	mov	r1, r2
 800fc38:	6878      	ldr	r0, [r7, #4]
 800fc3a:	4798      	blx	r3

  return USBD_OK;
 800fc3c:	2300      	movs	r3, #0
}
 800fc3e:	4618      	mov	r0, r3
 800fc40:	3708      	adds	r7, #8
 800fc42:	46bd      	mov	sp, r7
 800fc44:	bd80      	pop	{r7, pc}
	...

0800fc48 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b084      	sub	sp, #16
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
 800fc50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fc52:	2300      	movs	r3, #0
 800fc54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fc56:	683b      	ldr	r3, [r7, #0]
 800fc58:	781b      	ldrb	r3, [r3, #0]
 800fc5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fc5e:	2b20      	cmp	r3, #32
 800fc60:	d004      	beq.n	800fc6c <USBD_StdDevReq+0x24>
 800fc62:	2b40      	cmp	r3, #64	; 0x40
 800fc64:	d002      	beq.n	800fc6c <USBD_StdDevReq+0x24>
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d008      	beq.n	800fc7c <USBD_StdDevReq+0x34>
 800fc6a:	e04c      	b.n	800fd06 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc72:	689b      	ldr	r3, [r3, #8]
 800fc74:	6839      	ldr	r1, [r7, #0]
 800fc76:	6878      	ldr	r0, [r7, #4]
 800fc78:	4798      	blx	r3
      break;
 800fc7a:	e049      	b.n	800fd10 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fc7c:	683b      	ldr	r3, [r7, #0]
 800fc7e:	785b      	ldrb	r3, [r3, #1]
 800fc80:	2b09      	cmp	r3, #9
 800fc82:	d83a      	bhi.n	800fcfa <USBD_StdDevReq+0xb2>
 800fc84:	a201      	add	r2, pc, #4	; (adr r2, 800fc8c <USBD_StdDevReq+0x44>)
 800fc86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc8a:	bf00      	nop
 800fc8c:	0800fcdd 	.word	0x0800fcdd
 800fc90:	0800fcf1 	.word	0x0800fcf1
 800fc94:	0800fcfb 	.word	0x0800fcfb
 800fc98:	0800fce7 	.word	0x0800fce7
 800fc9c:	0800fcfb 	.word	0x0800fcfb
 800fca0:	0800fcbf 	.word	0x0800fcbf
 800fca4:	0800fcb5 	.word	0x0800fcb5
 800fca8:	0800fcfb 	.word	0x0800fcfb
 800fcac:	0800fcd3 	.word	0x0800fcd3
 800fcb0:	0800fcc9 	.word	0x0800fcc9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800fcb4:	6839      	ldr	r1, [r7, #0]
 800fcb6:	6878      	ldr	r0, [r7, #4]
 800fcb8:	f000 f9d4 	bl	8010064 <USBD_GetDescriptor>
          break;
 800fcbc:	e022      	b.n	800fd04 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800fcbe:	6839      	ldr	r1, [r7, #0]
 800fcc0:	6878      	ldr	r0, [r7, #4]
 800fcc2:	f000 fb37 	bl	8010334 <USBD_SetAddress>
          break;
 800fcc6:	e01d      	b.n	800fd04 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800fcc8:	6839      	ldr	r1, [r7, #0]
 800fcca:	6878      	ldr	r0, [r7, #4]
 800fccc:	f000 fb74 	bl	80103b8 <USBD_SetConfig>
          break;
 800fcd0:	e018      	b.n	800fd04 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800fcd2:	6839      	ldr	r1, [r7, #0]
 800fcd4:	6878      	ldr	r0, [r7, #4]
 800fcd6:	f000 fbfd 	bl	80104d4 <USBD_GetConfig>
          break;
 800fcda:	e013      	b.n	800fd04 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800fcdc:	6839      	ldr	r1, [r7, #0]
 800fcde:	6878      	ldr	r0, [r7, #4]
 800fce0:	f000 fc2c 	bl	801053c <USBD_GetStatus>
          break;
 800fce4:	e00e      	b.n	800fd04 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800fce6:	6839      	ldr	r1, [r7, #0]
 800fce8:	6878      	ldr	r0, [r7, #4]
 800fcea:	f000 fc5a 	bl	80105a2 <USBD_SetFeature>
          break;
 800fcee:	e009      	b.n	800fd04 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800fcf0:	6839      	ldr	r1, [r7, #0]
 800fcf2:	6878      	ldr	r0, [r7, #4]
 800fcf4:	f000 fc69 	bl	80105ca <USBD_ClrFeature>
          break;
 800fcf8:	e004      	b.n	800fd04 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800fcfa:	6839      	ldr	r1, [r7, #0]
 800fcfc:	6878      	ldr	r0, [r7, #4]
 800fcfe:	f000 fcc2 	bl	8010686 <USBD_CtlError>
          break;
 800fd02:	bf00      	nop
      }
      break;
 800fd04:	e004      	b.n	800fd10 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800fd06:	6839      	ldr	r1, [r7, #0]
 800fd08:	6878      	ldr	r0, [r7, #4]
 800fd0a:	f000 fcbc 	bl	8010686 <USBD_CtlError>
      break;
 800fd0e:	bf00      	nop
  }

  return ret;
 800fd10:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd12:	4618      	mov	r0, r3
 800fd14:	3710      	adds	r7, #16
 800fd16:	46bd      	mov	sp, r7
 800fd18:	bd80      	pop	{r7, pc}
 800fd1a:	bf00      	nop

0800fd1c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b084      	sub	sp, #16
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
 800fd24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fd26:	2300      	movs	r3, #0
 800fd28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fd2a:	683b      	ldr	r3, [r7, #0]
 800fd2c:	781b      	ldrb	r3, [r3, #0]
 800fd2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fd32:	2b20      	cmp	r3, #32
 800fd34:	d003      	beq.n	800fd3e <USBD_StdItfReq+0x22>
 800fd36:	2b40      	cmp	r3, #64	; 0x40
 800fd38:	d001      	beq.n	800fd3e <USBD_StdItfReq+0x22>
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d12a      	bne.n	800fd94 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd44:	3b01      	subs	r3, #1
 800fd46:	2b02      	cmp	r3, #2
 800fd48:	d81d      	bhi.n	800fd86 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800fd4a:	683b      	ldr	r3, [r7, #0]
 800fd4c:	889b      	ldrh	r3, [r3, #4]
 800fd4e:	b2db      	uxtb	r3, r3
 800fd50:	2b01      	cmp	r3, #1
 800fd52:	d813      	bhi.n	800fd7c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fd5a:	689b      	ldr	r3, [r3, #8]
 800fd5c:	6839      	ldr	r1, [r7, #0]
 800fd5e:	6878      	ldr	r0, [r7, #4]
 800fd60:	4798      	blx	r3
 800fd62:	4603      	mov	r3, r0
 800fd64:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800fd66:	683b      	ldr	r3, [r7, #0]
 800fd68:	88db      	ldrh	r3, [r3, #6]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d110      	bne.n	800fd90 <USBD_StdItfReq+0x74>
 800fd6e:	7bfb      	ldrb	r3, [r7, #15]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d10d      	bne.n	800fd90 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800fd74:	6878      	ldr	r0, [r7, #4]
 800fd76:	f000 fd4f 	bl	8010818 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800fd7a:	e009      	b.n	800fd90 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800fd7c:	6839      	ldr	r1, [r7, #0]
 800fd7e:	6878      	ldr	r0, [r7, #4]
 800fd80:	f000 fc81 	bl	8010686 <USBD_CtlError>
          break;
 800fd84:	e004      	b.n	800fd90 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800fd86:	6839      	ldr	r1, [r7, #0]
 800fd88:	6878      	ldr	r0, [r7, #4]
 800fd8a:	f000 fc7c 	bl	8010686 <USBD_CtlError>
          break;
 800fd8e:	e000      	b.n	800fd92 <USBD_StdItfReq+0x76>
          break;
 800fd90:	bf00      	nop
      }
      break;
 800fd92:	e004      	b.n	800fd9e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800fd94:	6839      	ldr	r1, [r7, #0]
 800fd96:	6878      	ldr	r0, [r7, #4]
 800fd98:	f000 fc75 	bl	8010686 <USBD_CtlError>
      break;
 800fd9c:	bf00      	nop
  }

  return USBD_OK;
 800fd9e:	2300      	movs	r3, #0
}
 800fda0:	4618      	mov	r0, r3
 800fda2:	3710      	adds	r7, #16
 800fda4:	46bd      	mov	sp, r7
 800fda6:	bd80      	pop	{r7, pc}

0800fda8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800fda8:	b580      	push	{r7, lr}
 800fdaa:	b084      	sub	sp, #16
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]
 800fdb0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800fdb6:	683b      	ldr	r3, [r7, #0]
 800fdb8:	889b      	ldrh	r3, [r3, #4]
 800fdba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fdbc:	683b      	ldr	r3, [r7, #0]
 800fdbe:	781b      	ldrb	r3, [r3, #0]
 800fdc0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fdc4:	2b20      	cmp	r3, #32
 800fdc6:	d004      	beq.n	800fdd2 <USBD_StdEPReq+0x2a>
 800fdc8:	2b40      	cmp	r3, #64	; 0x40
 800fdca:	d002      	beq.n	800fdd2 <USBD_StdEPReq+0x2a>
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d008      	beq.n	800fde2 <USBD_StdEPReq+0x3a>
 800fdd0:	e13d      	b.n	801004e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fdd8:	689b      	ldr	r3, [r3, #8]
 800fdda:	6839      	ldr	r1, [r7, #0]
 800fddc:	6878      	ldr	r0, [r7, #4]
 800fdde:	4798      	blx	r3
      break;
 800fde0:	e13a      	b.n	8010058 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800fde2:	683b      	ldr	r3, [r7, #0]
 800fde4:	781b      	ldrb	r3, [r3, #0]
 800fde6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fdea:	2b20      	cmp	r3, #32
 800fdec:	d10a      	bne.n	800fe04 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fdf4:	689b      	ldr	r3, [r3, #8]
 800fdf6:	6839      	ldr	r1, [r7, #0]
 800fdf8:	6878      	ldr	r0, [r7, #4]
 800fdfa:	4798      	blx	r3
 800fdfc:	4603      	mov	r3, r0
 800fdfe:	73fb      	strb	r3, [r7, #15]

        return ret;
 800fe00:	7bfb      	ldrb	r3, [r7, #15]
 800fe02:	e12a      	b.n	801005a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800fe04:	683b      	ldr	r3, [r7, #0]
 800fe06:	785b      	ldrb	r3, [r3, #1]
 800fe08:	2b01      	cmp	r3, #1
 800fe0a:	d03e      	beq.n	800fe8a <USBD_StdEPReq+0xe2>
 800fe0c:	2b03      	cmp	r3, #3
 800fe0e:	d002      	beq.n	800fe16 <USBD_StdEPReq+0x6e>
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d070      	beq.n	800fef6 <USBD_StdEPReq+0x14e>
 800fe14:	e115      	b.n	8010042 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe1c:	2b02      	cmp	r3, #2
 800fe1e:	d002      	beq.n	800fe26 <USBD_StdEPReq+0x7e>
 800fe20:	2b03      	cmp	r3, #3
 800fe22:	d015      	beq.n	800fe50 <USBD_StdEPReq+0xa8>
 800fe24:	e02b      	b.n	800fe7e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fe26:	7bbb      	ldrb	r3, [r7, #14]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d00c      	beq.n	800fe46 <USBD_StdEPReq+0x9e>
 800fe2c:	7bbb      	ldrb	r3, [r7, #14]
 800fe2e:	2b80      	cmp	r3, #128	; 0x80
 800fe30:	d009      	beq.n	800fe46 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800fe32:	7bbb      	ldrb	r3, [r7, #14]
 800fe34:	4619      	mov	r1, r3
 800fe36:	6878      	ldr	r0, [r7, #4]
 800fe38:	f001 f99e 	bl	8011178 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800fe3c:	2180      	movs	r1, #128	; 0x80
 800fe3e:	6878      	ldr	r0, [r7, #4]
 800fe40:	f001 f99a 	bl	8011178 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fe44:	e020      	b.n	800fe88 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800fe46:	6839      	ldr	r1, [r7, #0]
 800fe48:	6878      	ldr	r0, [r7, #4]
 800fe4a:	f000 fc1c 	bl	8010686 <USBD_CtlError>
              break;
 800fe4e:	e01b      	b.n	800fe88 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fe50:	683b      	ldr	r3, [r7, #0]
 800fe52:	885b      	ldrh	r3, [r3, #2]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d10e      	bne.n	800fe76 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800fe58:	7bbb      	ldrb	r3, [r7, #14]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d00b      	beq.n	800fe76 <USBD_StdEPReq+0xce>
 800fe5e:	7bbb      	ldrb	r3, [r7, #14]
 800fe60:	2b80      	cmp	r3, #128	; 0x80
 800fe62:	d008      	beq.n	800fe76 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800fe64:	683b      	ldr	r3, [r7, #0]
 800fe66:	88db      	ldrh	r3, [r3, #6]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d104      	bne.n	800fe76 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800fe6c:	7bbb      	ldrb	r3, [r7, #14]
 800fe6e:	4619      	mov	r1, r3
 800fe70:	6878      	ldr	r0, [r7, #4]
 800fe72:	f001 f981 	bl	8011178 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800fe76:	6878      	ldr	r0, [r7, #4]
 800fe78:	f000 fcce 	bl	8010818 <USBD_CtlSendStatus>

              break;
 800fe7c:	e004      	b.n	800fe88 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800fe7e:	6839      	ldr	r1, [r7, #0]
 800fe80:	6878      	ldr	r0, [r7, #4]
 800fe82:	f000 fc00 	bl	8010686 <USBD_CtlError>
              break;
 800fe86:	bf00      	nop
          }
          break;
 800fe88:	e0e0      	b.n	801004c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe90:	2b02      	cmp	r3, #2
 800fe92:	d002      	beq.n	800fe9a <USBD_StdEPReq+0xf2>
 800fe94:	2b03      	cmp	r3, #3
 800fe96:	d015      	beq.n	800fec4 <USBD_StdEPReq+0x11c>
 800fe98:	e026      	b.n	800fee8 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fe9a:	7bbb      	ldrb	r3, [r7, #14]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d00c      	beq.n	800feba <USBD_StdEPReq+0x112>
 800fea0:	7bbb      	ldrb	r3, [r7, #14]
 800fea2:	2b80      	cmp	r3, #128	; 0x80
 800fea4:	d009      	beq.n	800feba <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800fea6:	7bbb      	ldrb	r3, [r7, #14]
 800fea8:	4619      	mov	r1, r3
 800feaa:	6878      	ldr	r0, [r7, #4]
 800feac:	f001 f964 	bl	8011178 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800feb0:	2180      	movs	r1, #128	; 0x80
 800feb2:	6878      	ldr	r0, [r7, #4]
 800feb4:	f001 f960 	bl	8011178 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800feb8:	e01c      	b.n	800fef4 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800feba:	6839      	ldr	r1, [r7, #0]
 800febc:	6878      	ldr	r0, [r7, #4]
 800febe:	f000 fbe2 	bl	8010686 <USBD_CtlError>
              break;
 800fec2:	e017      	b.n	800fef4 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fec4:	683b      	ldr	r3, [r7, #0]
 800fec6:	885b      	ldrh	r3, [r3, #2]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d112      	bne.n	800fef2 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800fecc:	7bbb      	ldrb	r3, [r7, #14]
 800fece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d004      	beq.n	800fee0 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800fed6:	7bbb      	ldrb	r3, [r7, #14]
 800fed8:	4619      	mov	r1, r3
 800feda:	6878      	ldr	r0, [r7, #4]
 800fedc:	f001 f96b 	bl	80111b6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800fee0:	6878      	ldr	r0, [r7, #4]
 800fee2:	f000 fc99 	bl	8010818 <USBD_CtlSendStatus>
              }
              break;
 800fee6:	e004      	b.n	800fef2 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800fee8:	6839      	ldr	r1, [r7, #0]
 800feea:	6878      	ldr	r0, [r7, #4]
 800feec:	f000 fbcb 	bl	8010686 <USBD_CtlError>
              break;
 800fef0:	e000      	b.n	800fef4 <USBD_StdEPReq+0x14c>
              break;
 800fef2:	bf00      	nop
          }
          break;
 800fef4:	e0aa      	b.n	801004c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fefc:	2b02      	cmp	r3, #2
 800fefe:	d002      	beq.n	800ff06 <USBD_StdEPReq+0x15e>
 800ff00:	2b03      	cmp	r3, #3
 800ff02:	d032      	beq.n	800ff6a <USBD_StdEPReq+0x1c2>
 800ff04:	e097      	b.n	8010036 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ff06:	7bbb      	ldrb	r3, [r7, #14]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d007      	beq.n	800ff1c <USBD_StdEPReq+0x174>
 800ff0c:	7bbb      	ldrb	r3, [r7, #14]
 800ff0e:	2b80      	cmp	r3, #128	; 0x80
 800ff10:	d004      	beq.n	800ff1c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800ff12:	6839      	ldr	r1, [r7, #0]
 800ff14:	6878      	ldr	r0, [r7, #4]
 800ff16:	f000 fbb6 	bl	8010686 <USBD_CtlError>
                break;
 800ff1a:	e091      	b.n	8010040 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ff1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	da0b      	bge.n	800ff3c <USBD_StdEPReq+0x194>
 800ff24:	7bbb      	ldrb	r3, [r7, #14]
 800ff26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ff2a:	4613      	mov	r3, r2
 800ff2c:	009b      	lsls	r3, r3, #2
 800ff2e:	4413      	add	r3, r2
 800ff30:	009b      	lsls	r3, r3, #2
 800ff32:	3310      	adds	r3, #16
 800ff34:	687a      	ldr	r2, [r7, #4]
 800ff36:	4413      	add	r3, r2
 800ff38:	3304      	adds	r3, #4
 800ff3a:	e00b      	b.n	800ff54 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ff3c:	7bbb      	ldrb	r3, [r7, #14]
 800ff3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ff42:	4613      	mov	r3, r2
 800ff44:	009b      	lsls	r3, r3, #2
 800ff46:	4413      	add	r3, r2
 800ff48:	009b      	lsls	r3, r3, #2
 800ff4a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ff4e:	687a      	ldr	r2, [r7, #4]
 800ff50:	4413      	add	r3, r2
 800ff52:	3304      	adds	r3, #4
 800ff54:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ff56:	68bb      	ldr	r3, [r7, #8]
 800ff58:	2200      	movs	r2, #0
 800ff5a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ff5c:	68bb      	ldr	r3, [r7, #8]
 800ff5e:	2202      	movs	r2, #2
 800ff60:	4619      	mov	r1, r3
 800ff62:	6878      	ldr	r0, [r7, #4]
 800ff64:	f000 fbfa 	bl	801075c <USBD_CtlSendData>
              break;
 800ff68:	e06a      	b.n	8010040 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ff6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	da11      	bge.n	800ff96 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ff72:	7bbb      	ldrb	r3, [r7, #14]
 800ff74:	f003 020f 	and.w	r2, r3, #15
 800ff78:	6879      	ldr	r1, [r7, #4]
 800ff7a:	4613      	mov	r3, r2
 800ff7c:	009b      	lsls	r3, r3, #2
 800ff7e:	4413      	add	r3, r2
 800ff80:	009b      	lsls	r3, r3, #2
 800ff82:	440b      	add	r3, r1
 800ff84:	3318      	adds	r3, #24
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d117      	bne.n	800ffbc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800ff8c:	6839      	ldr	r1, [r7, #0]
 800ff8e:	6878      	ldr	r0, [r7, #4]
 800ff90:	f000 fb79 	bl	8010686 <USBD_CtlError>
                  break;
 800ff94:	e054      	b.n	8010040 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ff96:	7bbb      	ldrb	r3, [r7, #14]
 800ff98:	f003 020f 	and.w	r2, r3, #15
 800ff9c:	6879      	ldr	r1, [r7, #4]
 800ff9e:	4613      	mov	r3, r2
 800ffa0:	009b      	lsls	r3, r3, #2
 800ffa2:	4413      	add	r3, r2
 800ffa4:	009b      	lsls	r3, r3, #2
 800ffa6:	440b      	add	r3, r1
 800ffa8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d104      	bne.n	800ffbc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800ffb2:	6839      	ldr	r1, [r7, #0]
 800ffb4:	6878      	ldr	r0, [r7, #4]
 800ffb6:	f000 fb66 	bl	8010686 <USBD_CtlError>
                  break;
 800ffba:	e041      	b.n	8010040 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ffbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	da0b      	bge.n	800ffdc <USBD_StdEPReq+0x234>
 800ffc4:	7bbb      	ldrb	r3, [r7, #14]
 800ffc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ffca:	4613      	mov	r3, r2
 800ffcc:	009b      	lsls	r3, r3, #2
 800ffce:	4413      	add	r3, r2
 800ffd0:	009b      	lsls	r3, r3, #2
 800ffd2:	3310      	adds	r3, #16
 800ffd4:	687a      	ldr	r2, [r7, #4]
 800ffd6:	4413      	add	r3, r2
 800ffd8:	3304      	adds	r3, #4
 800ffda:	e00b      	b.n	800fff4 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ffdc:	7bbb      	ldrb	r3, [r7, #14]
 800ffde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ffe2:	4613      	mov	r3, r2
 800ffe4:	009b      	lsls	r3, r3, #2
 800ffe6:	4413      	add	r3, r2
 800ffe8:	009b      	lsls	r3, r3, #2
 800ffea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ffee:	687a      	ldr	r2, [r7, #4]
 800fff0:	4413      	add	r3, r2
 800fff2:	3304      	adds	r3, #4
 800fff4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fff6:	7bbb      	ldrb	r3, [r7, #14]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d002      	beq.n	8010002 <USBD_StdEPReq+0x25a>
 800fffc:	7bbb      	ldrb	r3, [r7, #14]
 800fffe:	2b80      	cmp	r3, #128	; 0x80
 8010000:	d103      	bne.n	801000a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8010002:	68bb      	ldr	r3, [r7, #8]
 8010004:	2200      	movs	r2, #0
 8010006:	601a      	str	r2, [r3, #0]
 8010008:	e00e      	b.n	8010028 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801000a:	7bbb      	ldrb	r3, [r7, #14]
 801000c:	4619      	mov	r1, r3
 801000e:	6878      	ldr	r0, [r7, #4]
 8010010:	f001 f8f0 	bl	80111f4 <USBD_LL_IsStallEP>
 8010014:	4603      	mov	r3, r0
 8010016:	2b00      	cmp	r3, #0
 8010018:	d003      	beq.n	8010022 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 801001a:	68bb      	ldr	r3, [r7, #8]
 801001c:	2201      	movs	r2, #1
 801001e:	601a      	str	r2, [r3, #0]
 8010020:	e002      	b.n	8010028 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8010022:	68bb      	ldr	r3, [r7, #8]
 8010024:	2200      	movs	r2, #0
 8010026:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8010028:	68bb      	ldr	r3, [r7, #8]
 801002a:	2202      	movs	r2, #2
 801002c:	4619      	mov	r1, r3
 801002e:	6878      	ldr	r0, [r7, #4]
 8010030:	f000 fb94 	bl	801075c <USBD_CtlSendData>
              break;
 8010034:	e004      	b.n	8010040 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8010036:	6839      	ldr	r1, [r7, #0]
 8010038:	6878      	ldr	r0, [r7, #4]
 801003a:	f000 fb24 	bl	8010686 <USBD_CtlError>
              break;
 801003e:	bf00      	nop
          }
          break;
 8010040:	e004      	b.n	801004c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8010042:	6839      	ldr	r1, [r7, #0]
 8010044:	6878      	ldr	r0, [r7, #4]
 8010046:	f000 fb1e 	bl	8010686 <USBD_CtlError>
          break;
 801004a:	bf00      	nop
      }
      break;
 801004c:	e004      	b.n	8010058 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 801004e:	6839      	ldr	r1, [r7, #0]
 8010050:	6878      	ldr	r0, [r7, #4]
 8010052:	f000 fb18 	bl	8010686 <USBD_CtlError>
      break;
 8010056:	bf00      	nop
  }

  return ret;
 8010058:	7bfb      	ldrb	r3, [r7, #15]
}
 801005a:	4618      	mov	r0, r3
 801005c:	3710      	adds	r7, #16
 801005e:	46bd      	mov	sp, r7
 8010060:	bd80      	pop	{r7, pc}
	...

08010064 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b084      	sub	sp, #16
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
 801006c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801006e:	2300      	movs	r3, #0
 8010070:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010072:	2300      	movs	r3, #0
 8010074:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010076:	2300      	movs	r3, #0
 8010078:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801007a:	683b      	ldr	r3, [r7, #0]
 801007c:	885b      	ldrh	r3, [r3, #2]
 801007e:	0a1b      	lsrs	r3, r3, #8
 8010080:	b29b      	uxth	r3, r3
 8010082:	3b01      	subs	r3, #1
 8010084:	2b06      	cmp	r3, #6
 8010086:	f200 8128 	bhi.w	80102da <USBD_GetDescriptor+0x276>
 801008a:	a201      	add	r2, pc, #4	; (adr r2, 8010090 <USBD_GetDescriptor+0x2c>)
 801008c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010090:	080100ad 	.word	0x080100ad
 8010094:	080100c5 	.word	0x080100c5
 8010098:	08010105 	.word	0x08010105
 801009c:	080102db 	.word	0x080102db
 80100a0:	080102db 	.word	0x080102db
 80100a4:	0801027b 	.word	0x0801027b
 80100a8:	080102a7 	.word	0x080102a7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	687a      	ldr	r2, [r7, #4]
 80100b6:	7c12      	ldrb	r2, [r2, #16]
 80100b8:	f107 0108 	add.w	r1, r7, #8
 80100bc:	4610      	mov	r0, r2
 80100be:	4798      	blx	r3
 80100c0:	60f8      	str	r0, [r7, #12]
      break;
 80100c2:	e112      	b.n	80102ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	7c1b      	ldrb	r3, [r3, #16]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d10d      	bne.n	80100e8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80100d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100d4:	f107 0208 	add.w	r2, r7, #8
 80100d8:	4610      	mov	r0, r2
 80100da:	4798      	blx	r3
 80100dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	3301      	adds	r3, #1
 80100e2:	2202      	movs	r2, #2
 80100e4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80100e6:	e100      	b.n	80102ea <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80100ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100f0:	f107 0208 	add.w	r2, r7, #8
 80100f4:	4610      	mov	r0, r2
 80100f6:	4798      	blx	r3
 80100f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	3301      	adds	r3, #1
 80100fe:	2202      	movs	r2, #2
 8010100:	701a      	strb	r2, [r3, #0]
      break;
 8010102:	e0f2      	b.n	80102ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010104:	683b      	ldr	r3, [r7, #0]
 8010106:	885b      	ldrh	r3, [r3, #2]
 8010108:	b2db      	uxtb	r3, r3
 801010a:	2b05      	cmp	r3, #5
 801010c:	f200 80ac 	bhi.w	8010268 <USBD_GetDescriptor+0x204>
 8010110:	a201      	add	r2, pc, #4	; (adr r2, 8010118 <USBD_GetDescriptor+0xb4>)
 8010112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010116:	bf00      	nop
 8010118:	08010131 	.word	0x08010131
 801011c:	08010165 	.word	0x08010165
 8010120:	08010199 	.word	0x08010199
 8010124:	080101cd 	.word	0x080101cd
 8010128:	08010201 	.word	0x08010201
 801012c:	08010235 	.word	0x08010235
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010136:	685b      	ldr	r3, [r3, #4]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d00b      	beq.n	8010154 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010142:	685b      	ldr	r3, [r3, #4]
 8010144:	687a      	ldr	r2, [r7, #4]
 8010146:	7c12      	ldrb	r2, [r2, #16]
 8010148:	f107 0108 	add.w	r1, r7, #8
 801014c:	4610      	mov	r0, r2
 801014e:	4798      	blx	r3
 8010150:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010152:	e091      	b.n	8010278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010154:	6839      	ldr	r1, [r7, #0]
 8010156:	6878      	ldr	r0, [r7, #4]
 8010158:	f000 fa95 	bl	8010686 <USBD_CtlError>
            err++;
 801015c:	7afb      	ldrb	r3, [r7, #11]
 801015e:	3301      	adds	r3, #1
 8010160:	72fb      	strb	r3, [r7, #11]
          break;
 8010162:	e089      	b.n	8010278 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801016a:	689b      	ldr	r3, [r3, #8]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d00b      	beq.n	8010188 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010176:	689b      	ldr	r3, [r3, #8]
 8010178:	687a      	ldr	r2, [r7, #4]
 801017a:	7c12      	ldrb	r2, [r2, #16]
 801017c:	f107 0108 	add.w	r1, r7, #8
 8010180:	4610      	mov	r0, r2
 8010182:	4798      	blx	r3
 8010184:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010186:	e077      	b.n	8010278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010188:	6839      	ldr	r1, [r7, #0]
 801018a:	6878      	ldr	r0, [r7, #4]
 801018c:	f000 fa7b 	bl	8010686 <USBD_CtlError>
            err++;
 8010190:	7afb      	ldrb	r3, [r7, #11]
 8010192:	3301      	adds	r3, #1
 8010194:	72fb      	strb	r3, [r7, #11]
          break;
 8010196:	e06f      	b.n	8010278 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801019e:	68db      	ldr	r3, [r3, #12]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d00b      	beq.n	80101bc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80101aa:	68db      	ldr	r3, [r3, #12]
 80101ac:	687a      	ldr	r2, [r7, #4]
 80101ae:	7c12      	ldrb	r2, [r2, #16]
 80101b0:	f107 0108 	add.w	r1, r7, #8
 80101b4:	4610      	mov	r0, r2
 80101b6:	4798      	blx	r3
 80101b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80101ba:	e05d      	b.n	8010278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80101bc:	6839      	ldr	r1, [r7, #0]
 80101be:	6878      	ldr	r0, [r7, #4]
 80101c0:	f000 fa61 	bl	8010686 <USBD_CtlError>
            err++;
 80101c4:	7afb      	ldrb	r3, [r7, #11]
 80101c6:	3301      	adds	r3, #1
 80101c8:	72fb      	strb	r3, [r7, #11]
          break;
 80101ca:	e055      	b.n	8010278 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80101d2:	691b      	ldr	r3, [r3, #16]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d00b      	beq.n	80101f0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80101de:	691b      	ldr	r3, [r3, #16]
 80101e0:	687a      	ldr	r2, [r7, #4]
 80101e2:	7c12      	ldrb	r2, [r2, #16]
 80101e4:	f107 0108 	add.w	r1, r7, #8
 80101e8:	4610      	mov	r0, r2
 80101ea:	4798      	blx	r3
 80101ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80101ee:	e043      	b.n	8010278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80101f0:	6839      	ldr	r1, [r7, #0]
 80101f2:	6878      	ldr	r0, [r7, #4]
 80101f4:	f000 fa47 	bl	8010686 <USBD_CtlError>
            err++;
 80101f8:	7afb      	ldrb	r3, [r7, #11]
 80101fa:	3301      	adds	r3, #1
 80101fc:	72fb      	strb	r3, [r7, #11]
          break;
 80101fe:	e03b      	b.n	8010278 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010206:	695b      	ldr	r3, [r3, #20]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d00b      	beq.n	8010224 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010212:	695b      	ldr	r3, [r3, #20]
 8010214:	687a      	ldr	r2, [r7, #4]
 8010216:	7c12      	ldrb	r2, [r2, #16]
 8010218:	f107 0108 	add.w	r1, r7, #8
 801021c:	4610      	mov	r0, r2
 801021e:	4798      	blx	r3
 8010220:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010222:	e029      	b.n	8010278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010224:	6839      	ldr	r1, [r7, #0]
 8010226:	6878      	ldr	r0, [r7, #4]
 8010228:	f000 fa2d 	bl	8010686 <USBD_CtlError>
            err++;
 801022c:	7afb      	ldrb	r3, [r7, #11]
 801022e:	3301      	adds	r3, #1
 8010230:	72fb      	strb	r3, [r7, #11]
          break;
 8010232:	e021      	b.n	8010278 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801023a:	699b      	ldr	r3, [r3, #24]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d00b      	beq.n	8010258 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010246:	699b      	ldr	r3, [r3, #24]
 8010248:	687a      	ldr	r2, [r7, #4]
 801024a:	7c12      	ldrb	r2, [r2, #16]
 801024c:	f107 0108 	add.w	r1, r7, #8
 8010250:	4610      	mov	r0, r2
 8010252:	4798      	blx	r3
 8010254:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010256:	e00f      	b.n	8010278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010258:	6839      	ldr	r1, [r7, #0]
 801025a:	6878      	ldr	r0, [r7, #4]
 801025c:	f000 fa13 	bl	8010686 <USBD_CtlError>
            err++;
 8010260:	7afb      	ldrb	r3, [r7, #11]
 8010262:	3301      	adds	r3, #1
 8010264:	72fb      	strb	r3, [r7, #11]
          break;
 8010266:	e007      	b.n	8010278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8010268:	6839      	ldr	r1, [r7, #0]
 801026a:	6878      	ldr	r0, [r7, #4]
 801026c:	f000 fa0b 	bl	8010686 <USBD_CtlError>
          err++;
 8010270:	7afb      	ldrb	r3, [r7, #11]
 8010272:	3301      	adds	r3, #1
 8010274:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8010276:	e038      	b.n	80102ea <USBD_GetDescriptor+0x286>
 8010278:	e037      	b.n	80102ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	7c1b      	ldrb	r3, [r3, #16]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d109      	bne.n	8010296 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801028a:	f107 0208 	add.w	r2, r7, #8
 801028e:	4610      	mov	r0, r2
 8010290:	4798      	blx	r3
 8010292:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010294:	e029      	b.n	80102ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8010296:	6839      	ldr	r1, [r7, #0]
 8010298:	6878      	ldr	r0, [r7, #4]
 801029a:	f000 f9f4 	bl	8010686 <USBD_CtlError>
        err++;
 801029e:	7afb      	ldrb	r3, [r7, #11]
 80102a0:	3301      	adds	r3, #1
 80102a2:	72fb      	strb	r3, [r7, #11]
      break;
 80102a4:	e021      	b.n	80102ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	7c1b      	ldrb	r3, [r3, #16]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d10d      	bne.n	80102ca <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80102b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102b6:	f107 0208 	add.w	r2, r7, #8
 80102ba:	4610      	mov	r0, r2
 80102bc:	4798      	blx	r3
 80102be:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	3301      	adds	r3, #1
 80102c4:	2207      	movs	r2, #7
 80102c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80102c8:	e00f      	b.n	80102ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80102ca:	6839      	ldr	r1, [r7, #0]
 80102cc:	6878      	ldr	r0, [r7, #4]
 80102ce:	f000 f9da 	bl	8010686 <USBD_CtlError>
        err++;
 80102d2:	7afb      	ldrb	r3, [r7, #11]
 80102d4:	3301      	adds	r3, #1
 80102d6:	72fb      	strb	r3, [r7, #11]
      break;
 80102d8:	e007      	b.n	80102ea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80102da:	6839      	ldr	r1, [r7, #0]
 80102dc:	6878      	ldr	r0, [r7, #4]
 80102de:	f000 f9d2 	bl	8010686 <USBD_CtlError>
      err++;
 80102e2:	7afb      	ldrb	r3, [r7, #11]
 80102e4:	3301      	adds	r3, #1
 80102e6:	72fb      	strb	r3, [r7, #11]
      break;
 80102e8:	bf00      	nop
  }

  if (err != 0U)
 80102ea:	7afb      	ldrb	r3, [r7, #11]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d11c      	bne.n	801032a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80102f0:	893b      	ldrh	r3, [r7, #8]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d011      	beq.n	801031a <USBD_GetDescriptor+0x2b6>
 80102f6:	683b      	ldr	r3, [r7, #0]
 80102f8:	88db      	ldrh	r3, [r3, #6]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d00d      	beq.n	801031a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	88da      	ldrh	r2, [r3, #6]
 8010302:	893b      	ldrh	r3, [r7, #8]
 8010304:	4293      	cmp	r3, r2
 8010306:	bf28      	it	cs
 8010308:	4613      	movcs	r3, r2
 801030a:	b29b      	uxth	r3, r3
 801030c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801030e:	893b      	ldrh	r3, [r7, #8]
 8010310:	461a      	mov	r2, r3
 8010312:	68f9      	ldr	r1, [r7, #12]
 8010314:	6878      	ldr	r0, [r7, #4]
 8010316:	f000 fa21 	bl	801075c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801031a:	683b      	ldr	r3, [r7, #0]
 801031c:	88db      	ldrh	r3, [r3, #6]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d104      	bne.n	801032c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8010322:	6878      	ldr	r0, [r7, #4]
 8010324:	f000 fa78 	bl	8010818 <USBD_CtlSendStatus>
 8010328:	e000      	b.n	801032c <USBD_GetDescriptor+0x2c8>
    return;
 801032a:	bf00      	nop
    }
  }
}
 801032c:	3710      	adds	r7, #16
 801032e:	46bd      	mov	sp, r7
 8010330:	bd80      	pop	{r7, pc}
 8010332:	bf00      	nop

08010334 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8010334:	b580      	push	{r7, lr}
 8010336:	b084      	sub	sp, #16
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
 801033c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801033e:	683b      	ldr	r3, [r7, #0]
 8010340:	889b      	ldrh	r3, [r3, #4]
 8010342:	2b00      	cmp	r3, #0
 8010344:	d130      	bne.n	80103a8 <USBD_SetAddress+0x74>
 8010346:	683b      	ldr	r3, [r7, #0]
 8010348:	88db      	ldrh	r3, [r3, #6]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d12c      	bne.n	80103a8 <USBD_SetAddress+0x74>
 801034e:	683b      	ldr	r3, [r7, #0]
 8010350:	885b      	ldrh	r3, [r3, #2]
 8010352:	2b7f      	cmp	r3, #127	; 0x7f
 8010354:	d828      	bhi.n	80103a8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010356:	683b      	ldr	r3, [r7, #0]
 8010358:	885b      	ldrh	r3, [r3, #2]
 801035a:	b2db      	uxtb	r3, r3
 801035c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010360:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010368:	2b03      	cmp	r3, #3
 801036a:	d104      	bne.n	8010376 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 801036c:	6839      	ldr	r1, [r7, #0]
 801036e:	6878      	ldr	r0, [r7, #4]
 8010370:	f000 f989 	bl	8010686 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010374:	e01c      	b.n	80103b0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	7bfa      	ldrb	r2, [r7, #15]
 801037a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801037e:	7bfb      	ldrb	r3, [r7, #15]
 8010380:	4619      	mov	r1, r3
 8010382:	6878      	ldr	r0, [r7, #4]
 8010384:	f000 ff62 	bl	801124c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8010388:	6878      	ldr	r0, [r7, #4]
 801038a:	f000 fa45 	bl	8010818 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801038e:	7bfb      	ldrb	r3, [r7, #15]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d004      	beq.n	801039e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	2202      	movs	r2, #2
 8010398:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801039c:	e008      	b.n	80103b0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	2201      	movs	r2, #1
 80103a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80103a6:	e003      	b.n	80103b0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80103a8:	6839      	ldr	r1, [r7, #0]
 80103aa:	6878      	ldr	r0, [r7, #4]
 80103ac:	f000 f96b 	bl	8010686 <USBD_CtlError>
  }
}
 80103b0:	bf00      	nop
 80103b2:	3710      	adds	r7, #16
 80103b4:	46bd      	mov	sp, r7
 80103b6:	bd80      	pop	{r7, pc}

080103b8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b082      	sub	sp, #8
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
 80103c0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80103c2:	683b      	ldr	r3, [r7, #0]
 80103c4:	885b      	ldrh	r3, [r3, #2]
 80103c6:	b2da      	uxtb	r2, r3
 80103c8:	4b41      	ldr	r3, [pc, #260]	; (80104d0 <USBD_SetConfig+0x118>)
 80103ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80103cc:	4b40      	ldr	r3, [pc, #256]	; (80104d0 <USBD_SetConfig+0x118>)
 80103ce:	781b      	ldrb	r3, [r3, #0]
 80103d0:	2b01      	cmp	r3, #1
 80103d2:	d904      	bls.n	80103de <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80103d4:	6839      	ldr	r1, [r7, #0]
 80103d6:	6878      	ldr	r0, [r7, #4]
 80103d8:	f000 f955 	bl	8010686 <USBD_CtlError>
 80103dc:	e075      	b.n	80104ca <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80103e4:	2b02      	cmp	r3, #2
 80103e6:	d002      	beq.n	80103ee <USBD_SetConfig+0x36>
 80103e8:	2b03      	cmp	r3, #3
 80103ea:	d023      	beq.n	8010434 <USBD_SetConfig+0x7c>
 80103ec:	e062      	b.n	80104b4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80103ee:	4b38      	ldr	r3, [pc, #224]	; (80104d0 <USBD_SetConfig+0x118>)
 80103f0:	781b      	ldrb	r3, [r3, #0]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d01a      	beq.n	801042c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80103f6:	4b36      	ldr	r3, [pc, #216]	; (80104d0 <USBD_SetConfig+0x118>)
 80103f8:	781b      	ldrb	r3, [r3, #0]
 80103fa:	461a      	mov	r2, r3
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2203      	movs	r2, #3
 8010404:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8010408:	4b31      	ldr	r3, [pc, #196]	; (80104d0 <USBD_SetConfig+0x118>)
 801040a:	781b      	ldrb	r3, [r3, #0]
 801040c:	4619      	mov	r1, r3
 801040e:	6878      	ldr	r0, [r7, #4]
 8010410:	f7ff f9b4 	bl	800f77c <USBD_SetClassConfig>
 8010414:	4603      	mov	r3, r0
 8010416:	2b02      	cmp	r3, #2
 8010418:	d104      	bne.n	8010424 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 801041a:	6839      	ldr	r1, [r7, #0]
 801041c:	6878      	ldr	r0, [r7, #4]
 801041e:	f000 f932 	bl	8010686 <USBD_CtlError>
            return;
 8010422:	e052      	b.n	80104ca <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8010424:	6878      	ldr	r0, [r7, #4]
 8010426:	f000 f9f7 	bl	8010818 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801042a:	e04e      	b.n	80104ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 801042c:	6878      	ldr	r0, [r7, #4]
 801042e:	f000 f9f3 	bl	8010818 <USBD_CtlSendStatus>
        break;
 8010432:	e04a      	b.n	80104ca <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8010434:	4b26      	ldr	r3, [pc, #152]	; (80104d0 <USBD_SetConfig+0x118>)
 8010436:	781b      	ldrb	r3, [r3, #0]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d112      	bne.n	8010462 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	2202      	movs	r2, #2
 8010440:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8010444:	4b22      	ldr	r3, [pc, #136]	; (80104d0 <USBD_SetConfig+0x118>)
 8010446:	781b      	ldrb	r3, [r3, #0]
 8010448:	461a      	mov	r2, r3
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801044e:	4b20      	ldr	r3, [pc, #128]	; (80104d0 <USBD_SetConfig+0x118>)
 8010450:	781b      	ldrb	r3, [r3, #0]
 8010452:	4619      	mov	r1, r3
 8010454:	6878      	ldr	r0, [r7, #4]
 8010456:	f7ff f9b0 	bl	800f7ba <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801045a:	6878      	ldr	r0, [r7, #4]
 801045c:	f000 f9dc 	bl	8010818 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8010460:	e033      	b.n	80104ca <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8010462:	4b1b      	ldr	r3, [pc, #108]	; (80104d0 <USBD_SetConfig+0x118>)
 8010464:	781b      	ldrb	r3, [r3, #0]
 8010466:	461a      	mov	r2, r3
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	685b      	ldr	r3, [r3, #4]
 801046c:	429a      	cmp	r2, r3
 801046e:	d01d      	beq.n	80104ac <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	685b      	ldr	r3, [r3, #4]
 8010474:	b2db      	uxtb	r3, r3
 8010476:	4619      	mov	r1, r3
 8010478:	6878      	ldr	r0, [r7, #4]
 801047a:	f7ff f99e 	bl	800f7ba <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801047e:	4b14      	ldr	r3, [pc, #80]	; (80104d0 <USBD_SetConfig+0x118>)
 8010480:	781b      	ldrb	r3, [r3, #0]
 8010482:	461a      	mov	r2, r3
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8010488:	4b11      	ldr	r3, [pc, #68]	; (80104d0 <USBD_SetConfig+0x118>)
 801048a:	781b      	ldrb	r3, [r3, #0]
 801048c:	4619      	mov	r1, r3
 801048e:	6878      	ldr	r0, [r7, #4]
 8010490:	f7ff f974 	bl	800f77c <USBD_SetClassConfig>
 8010494:	4603      	mov	r3, r0
 8010496:	2b02      	cmp	r3, #2
 8010498:	d104      	bne.n	80104a4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 801049a:	6839      	ldr	r1, [r7, #0]
 801049c:	6878      	ldr	r0, [r7, #4]
 801049e:	f000 f8f2 	bl	8010686 <USBD_CtlError>
            return;
 80104a2:	e012      	b.n	80104ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80104a4:	6878      	ldr	r0, [r7, #4]
 80104a6:	f000 f9b7 	bl	8010818 <USBD_CtlSendStatus>
        break;
 80104aa:	e00e      	b.n	80104ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80104ac:	6878      	ldr	r0, [r7, #4]
 80104ae:	f000 f9b3 	bl	8010818 <USBD_CtlSendStatus>
        break;
 80104b2:	e00a      	b.n	80104ca <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80104b4:	6839      	ldr	r1, [r7, #0]
 80104b6:	6878      	ldr	r0, [r7, #4]
 80104b8:	f000 f8e5 	bl	8010686 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80104bc:	4b04      	ldr	r3, [pc, #16]	; (80104d0 <USBD_SetConfig+0x118>)
 80104be:	781b      	ldrb	r3, [r3, #0]
 80104c0:	4619      	mov	r1, r3
 80104c2:	6878      	ldr	r0, [r7, #4]
 80104c4:	f7ff f979 	bl	800f7ba <USBD_ClrClassConfig>
        break;
 80104c8:	bf00      	nop
    }
  }
}
 80104ca:	3708      	adds	r7, #8
 80104cc:	46bd      	mov	sp, r7
 80104ce:	bd80      	pop	{r7, pc}
 80104d0:	240002b4 	.word	0x240002b4

080104d4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80104d4:	b580      	push	{r7, lr}
 80104d6:	b082      	sub	sp, #8
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]
 80104dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80104de:	683b      	ldr	r3, [r7, #0]
 80104e0:	88db      	ldrh	r3, [r3, #6]
 80104e2:	2b01      	cmp	r3, #1
 80104e4:	d004      	beq.n	80104f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80104e6:	6839      	ldr	r1, [r7, #0]
 80104e8:	6878      	ldr	r0, [r7, #4]
 80104ea:	f000 f8cc 	bl	8010686 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80104ee:	e021      	b.n	8010534 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80104f6:	2b01      	cmp	r3, #1
 80104f8:	db17      	blt.n	801052a <USBD_GetConfig+0x56>
 80104fa:	2b02      	cmp	r3, #2
 80104fc:	dd02      	ble.n	8010504 <USBD_GetConfig+0x30>
 80104fe:	2b03      	cmp	r3, #3
 8010500:	d00b      	beq.n	801051a <USBD_GetConfig+0x46>
 8010502:	e012      	b.n	801052a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	2200      	movs	r2, #0
 8010508:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	3308      	adds	r3, #8
 801050e:	2201      	movs	r2, #1
 8010510:	4619      	mov	r1, r3
 8010512:	6878      	ldr	r0, [r7, #4]
 8010514:	f000 f922 	bl	801075c <USBD_CtlSendData>
        break;
 8010518:	e00c      	b.n	8010534 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	3304      	adds	r3, #4
 801051e:	2201      	movs	r2, #1
 8010520:	4619      	mov	r1, r3
 8010522:	6878      	ldr	r0, [r7, #4]
 8010524:	f000 f91a 	bl	801075c <USBD_CtlSendData>
        break;
 8010528:	e004      	b.n	8010534 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 801052a:	6839      	ldr	r1, [r7, #0]
 801052c:	6878      	ldr	r0, [r7, #4]
 801052e:	f000 f8aa 	bl	8010686 <USBD_CtlError>
        break;
 8010532:	bf00      	nop
}
 8010534:	bf00      	nop
 8010536:	3708      	adds	r7, #8
 8010538:	46bd      	mov	sp, r7
 801053a:	bd80      	pop	{r7, pc}

0801053c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b082      	sub	sp, #8
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
 8010544:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801054c:	3b01      	subs	r3, #1
 801054e:	2b02      	cmp	r3, #2
 8010550:	d81e      	bhi.n	8010590 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	88db      	ldrh	r3, [r3, #6]
 8010556:	2b02      	cmp	r3, #2
 8010558:	d004      	beq.n	8010564 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 801055a:	6839      	ldr	r1, [r7, #0]
 801055c:	6878      	ldr	r0, [r7, #4]
 801055e:	f000 f892 	bl	8010686 <USBD_CtlError>
        break;
 8010562:	e01a      	b.n	801059a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	2201      	movs	r2, #1
 8010568:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8010570:	2b00      	cmp	r3, #0
 8010572:	d005      	beq.n	8010580 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	68db      	ldr	r3, [r3, #12]
 8010578:	f043 0202 	orr.w	r2, r3, #2
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	330c      	adds	r3, #12
 8010584:	2202      	movs	r2, #2
 8010586:	4619      	mov	r1, r3
 8010588:	6878      	ldr	r0, [r7, #4]
 801058a:	f000 f8e7 	bl	801075c <USBD_CtlSendData>
      break;
 801058e:	e004      	b.n	801059a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8010590:	6839      	ldr	r1, [r7, #0]
 8010592:	6878      	ldr	r0, [r7, #4]
 8010594:	f000 f877 	bl	8010686 <USBD_CtlError>
      break;
 8010598:	bf00      	nop
  }
}
 801059a:	bf00      	nop
 801059c:	3708      	adds	r7, #8
 801059e:	46bd      	mov	sp, r7
 80105a0:	bd80      	pop	{r7, pc}

080105a2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80105a2:	b580      	push	{r7, lr}
 80105a4:	b082      	sub	sp, #8
 80105a6:	af00      	add	r7, sp, #0
 80105a8:	6078      	str	r0, [r7, #4]
 80105aa:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80105ac:	683b      	ldr	r3, [r7, #0]
 80105ae:	885b      	ldrh	r3, [r3, #2]
 80105b0:	2b01      	cmp	r3, #1
 80105b2:	d106      	bne.n	80105c2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	2201      	movs	r2, #1
 80105b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80105bc:	6878      	ldr	r0, [r7, #4]
 80105be:	f000 f92b 	bl	8010818 <USBD_CtlSendStatus>
  }
}
 80105c2:	bf00      	nop
 80105c4:	3708      	adds	r7, #8
 80105c6:	46bd      	mov	sp, r7
 80105c8:	bd80      	pop	{r7, pc}

080105ca <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80105ca:	b580      	push	{r7, lr}
 80105cc:	b082      	sub	sp, #8
 80105ce:	af00      	add	r7, sp, #0
 80105d0:	6078      	str	r0, [r7, #4]
 80105d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80105da:	3b01      	subs	r3, #1
 80105dc:	2b02      	cmp	r3, #2
 80105de:	d80b      	bhi.n	80105f8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80105e0:	683b      	ldr	r3, [r7, #0]
 80105e2:	885b      	ldrh	r3, [r3, #2]
 80105e4:	2b01      	cmp	r3, #1
 80105e6:	d10c      	bne.n	8010602 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	2200      	movs	r2, #0
 80105ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80105f0:	6878      	ldr	r0, [r7, #4]
 80105f2:	f000 f911 	bl	8010818 <USBD_CtlSendStatus>
      }
      break;
 80105f6:	e004      	b.n	8010602 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80105f8:	6839      	ldr	r1, [r7, #0]
 80105fa:	6878      	ldr	r0, [r7, #4]
 80105fc:	f000 f843 	bl	8010686 <USBD_CtlError>
      break;
 8010600:	e000      	b.n	8010604 <USBD_ClrFeature+0x3a>
      break;
 8010602:	bf00      	nop
  }
}
 8010604:	bf00      	nop
 8010606:	3708      	adds	r7, #8
 8010608:	46bd      	mov	sp, r7
 801060a:	bd80      	pop	{r7, pc}

0801060c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801060c:	b480      	push	{r7}
 801060e:	b083      	sub	sp, #12
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
 8010614:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8010616:	683b      	ldr	r3, [r7, #0]
 8010618:	781a      	ldrb	r2, [r3, #0]
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801061e:	683b      	ldr	r3, [r7, #0]
 8010620:	785a      	ldrb	r2, [r3, #1]
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8010626:	683b      	ldr	r3, [r7, #0]
 8010628:	3302      	adds	r3, #2
 801062a:	781b      	ldrb	r3, [r3, #0]
 801062c:	b29a      	uxth	r2, r3
 801062e:	683b      	ldr	r3, [r7, #0]
 8010630:	3303      	adds	r3, #3
 8010632:	781b      	ldrb	r3, [r3, #0]
 8010634:	b29b      	uxth	r3, r3
 8010636:	021b      	lsls	r3, r3, #8
 8010638:	b29b      	uxth	r3, r3
 801063a:	4413      	add	r3, r2
 801063c:	b29a      	uxth	r2, r3
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8010642:	683b      	ldr	r3, [r7, #0]
 8010644:	3304      	adds	r3, #4
 8010646:	781b      	ldrb	r3, [r3, #0]
 8010648:	b29a      	uxth	r2, r3
 801064a:	683b      	ldr	r3, [r7, #0]
 801064c:	3305      	adds	r3, #5
 801064e:	781b      	ldrb	r3, [r3, #0]
 8010650:	b29b      	uxth	r3, r3
 8010652:	021b      	lsls	r3, r3, #8
 8010654:	b29b      	uxth	r3, r3
 8010656:	4413      	add	r3, r2
 8010658:	b29a      	uxth	r2, r3
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801065e:	683b      	ldr	r3, [r7, #0]
 8010660:	3306      	adds	r3, #6
 8010662:	781b      	ldrb	r3, [r3, #0]
 8010664:	b29a      	uxth	r2, r3
 8010666:	683b      	ldr	r3, [r7, #0]
 8010668:	3307      	adds	r3, #7
 801066a:	781b      	ldrb	r3, [r3, #0]
 801066c:	b29b      	uxth	r3, r3
 801066e:	021b      	lsls	r3, r3, #8
 8010670:	b29b      	uxth	r3, r3
 8010672:	4413      	add	r3, r2
 8010674:	b29a      	uxth	r2, r3
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	80da      	strh	r2, [r3, #6]

}
 801067a:	bf00      	nop
 801067c:	370c      	adds	r7, #12
 801067e:	46bd      	mov	sp, r7
 8010680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010684:	4770      	bx	lr

08010686 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8010686:	b580      	push	{r7, lr}
 8010688:	b082      	sub	sp, #8
 801068a:	af00      	add	r7, sp, #0
 801068c:	6078      	str	r0, [r7, #4]
 801068e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8010690:	2180      	movs	r1, #128	; 0x80
 8010692:	6878      	ldr	r0, [r7, #4]
 8010694:	f000 fd70 	bl	8011178 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8010698:	2100      	movs	r1, #0
 801069a:	6878      	ldr	r0, [r7, #4]
 801069c:	f000 fd6c 	bl	8011178 <USBD_LL_StallEP>
}
 80106a0:	bf00      	nop
 80106a2:	3708      	adds	r7, #8
 80106a4:	46bd      	mov	sp, r7
 80106a6:	bd80      	pop	{r7, pc}

080106a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b086      	sub	sp, #24
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	60f8      	str	r0, [r7, #12]
 80106b0:	60b9      	str	r1, [r7, #8]
 80106b2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80106b4:	2300      	movs	r3, #0
 80106b6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d032      	beq.n	8010724 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80106be:	68f8      	ldr	r0, [r7, #12]
 80106c0:	f000 f834 	bl	801072c <USBD_GetLen>
 80106c4:	4603      	mov	r3, r0
 80106c6:	3301      	adds	r3, #1
 80106c8:	b29b      	uxth	r3, r3
 80106ca:	005b      	lsls	r3, r3, #1
 80106cc:	b29a      	uxth	r2, r3
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80106d2:	7dfb      	ldrb	r3, [r7, #23]
 80106d4:	1c5a      	adds	r2, r3, #1
 80106d6:	75fa      	strb	r2, [r7, #23]
 80106d8:	461a      	mov	r2, r3
 80106da:	68bb      	ldr	r3, [r7, #8]
 80106dc:	4413      	add	r3, r2
 80106de:	687a      	ldr	r2, [r7, #4]
 80106e0:	7812      	ldrb	r2, [r2, #0]
 80106e2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80106e4:	7dfb      	ldrb	r3, [r7, #23]
 80106e6:	1c5a      	adds	r2, r3, #1
 80106e8:	75fa      	strb	r2, [r7, #23]
 80106ea:	461a      	mov	r2, r3
 80106ec:	68bb      	ldr	r3, [r7, #8]
 80106ee:	4413      	add	r3, r2
 80106f0:	2203      	movs	r2, #3
 80106f2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80106f4:	e012      	b.n	801071c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	1c5a      	adds	r2, r3, #1
 80106fa:	60fa      	str	r2, [r7, #12]
 80106fc:	7dfa      	ldrb	r2, [r7, #23]
 80106fe:	1c51      	adds	r1, r2, #1
 8010700:	75f9      	strb	r1, [r7, #23]
 8010702:	4611      	mov	r1, r2
 8010704:	68ba      	ldr	r2, [r7, #8]
 8010706:	440a      	add	r2, r1
 8010708:	781b      	ldrb	r3, [r3, #0]
 801070a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801070c:	7dfb      	ldrb	r3, [r7, #23]
 801070e:	1c5a      	adds	r2, r3, #1
 8010710:	75fa      	strb	r2, [r7, #23]
 8010712:	461a      	mov	r2, r3
 8010714:	68bb      	ldr	r3, [r7, #8]
 8010716:	4413      	add	r3, r2
 8010718:	2200      	movs	r2, #0
 801071a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	781b      	ldrb	r3, [r3, #0]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d1e8      	bne.n	80106f6 <USBD_GetString+0x4e>
    }
  }
}
 8010724:	bf00      	nop
 8010726:	3718      	adds	r7, #24
 8010728:	46bd      	mov	sp, r7
 801072a:	bd80      	pop	{r7, pc}

0801072c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801072c:	b480      	push	{r7}
 801072e:	b085      	sub	sp, #20
 8010730:	af00      	add	r7, sp, #0
 8010732:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010734:	2300      	movs	r3, #0
 8010736:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8010738:	e005      	b.n	8010746 <USBD_GetLen+0x1a>
  {
    len++;
 801073a:	7bfb      	ldrb	r3, [r7, #15]
 801073c:	3301      	adds	r3, #1
 801073e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	3301      	adds	r3, #1
 8010744:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	781b      	ldrb	r3, [r3, #0]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d1f5      	bne.n	801073a <USBD_GetLen+0xe>
  }

  return len;
 801074e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010750:	4618      	mov	r0, r3
 8010752:	3714      	adds	r7, #20
 8010754:	46bd      	mov	sp, r7
 8010756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075a:	4770      	bx	lr

0801075c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801075c:	b580      	push	{r7, lr}
 801075e:	b084      	sub	sp, #16
 8010760:	af00      	add	r7, sp, #0
 8010762:	60f8      	str	r0, [r7, #12]
 8010764:	60b9      	str	r1, [r7, #8]
 8010766:	4613      	mov	r3, r2
 8010768:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	2202      	movs	r2, #2
 801076e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8010772:	88fa      	ldrh	r2, [r7, #6]
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8010778:	88fa      	ldrh	r2, [r7, #6]
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801077e:	88fb      	ldrh	r3, [r7, #6]
 8010780:	68ba      	ldr	r2, [r7, #8]
 8010782:	2100      	movs	r1, #0
 8010784:	68f8      	ldr	r0, [r7, #12]
 8010786:	f000 fd80 	bl	801128a <USBD_LL_Transmit>

  return USBD_OK;
 801078a:	2300      	movs	r3, #0
}
 801078c:	4618      	mov	r0, r3
 801078e:	3710      	adds	r7, #16
 8010790:	46bd      	mov	sp, r7
 8010792:	bd80      	pop	{r7, pc}

08010794 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8010794:	b580      	push	{r7, lr}
 8010796:	b084      	sub	sp, #16
 8010798:	af00      	add	r7, sp, #0
 801079a:	60f8      	str	r0, [r7, #12]
 801079c:	60b9      	str	r1, [r7, #8]
 801079e:	4613      	mov	r3, r2
 80107a0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80107a2:	88fb      	ldrh	r3, [r7, #6]
 80107a4:	68ba      	ldr	r2, [r7, #8]
 80107a6:	2100      	movs	r1, #0
 80107a8:	68f8      	ldr	r0, [r7, #12]
 80107aa:	f000 fd6e 	bl	801128a <USBD_LL_Transmit>

  return USBD_OK;
 80107ae:	2300      	movs	r3, #0
}
 80107b0:	4618      	mov	r0, r3
 80107b2:	3710      	adds	r7, #16
 80107b4:	46bd      	mov	sp, r7
 80107b6:	bd80      	pop	{r7, pc}

080107b8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80107b8:	b580      	push	{r7, lr}
 80107ba:	b084      	sub	sp, #16
 80107bc:	af00      	add	r7, sp, #0
 80107be:	60f8      	str	r0, [r7, #12]
 80107c0:	60b9      	str	r1, [r7, #8]
 80107c2:	4613      	mov	r3, r2
 80107c4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	2203      	movs	r2, #3
 80107ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80107ce:	88fa      	ldrh	r2, [r7, #6]
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80107d6:	88fa      	ldrh	r2, [r7, #6]
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80107de:	88fb      	ldrh	r3, [r7, #6]
 80107e0:	68ba      	ldr	r2, [r7, #8]
 80107e2:	2100      	movs	r1, #0
 80107e4:	68f8      	ldr	r0, [r7, #12]
 80107e6:	f000 fd73 	bl	80112d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80107ea:	2300      	movs	r3, #0
}
 80107ec:	4618      	mov	r0, r3
 80107ee:	3710      	adds	r7, #16
 80107f0:	46bd      	mov	sp, r7
 80107f2:	bd80      	pop	{r7, pc}

080107f4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80107f4:	b580      	push	{r7, lr}
 80107f6:	b084      	sub	sp, #16
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	60f8      	str	r0, [r7, #12]
 80107fc:	60b9      	str	r1, [r7, #8]
 80107fe:	4613      	mov	r3, r2
 8010800:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010802:	88fb      	ldrh	r3, [r7, #6]
 8010804:	68ba      	ldr	r2, [r7, #8]
 8010806:	2100      	movs	r1, #0
 8010808:	68f8      	ldr	r0, [r7, #12]
 801080a:	f000 fd61 	bl	80112d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801080e:	2300      	movs	r3, #0
}
 8010810:	4618      	mov	r0, r3
 8010812:	3710      	adds	r7, #16
 8010814:	46bd      	mov	sp, r7
 8010816:	bd80      	pop	{r7, pc}

08010818 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010818:	b580      	push	{r7, lr}
 801081a:	b082      	sub	sp, #8
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	2204      	movs	r2, #4
 8010824:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010828:	2300      	movs	r3, #0
 801082a:	2200      	movs	r2, #0
 801082c:	2100      	movs	r1, #0
 801082e:	6878      	ldr	r0, [r7, #4]
 8010830:	f000 fd2b 	bl	801128a <USBD_LL_Transmit>

  return USBD_OK;
 8010834:	2300      	movs	r3, #0
}
 8010836:	4618      	mov	r0, r3
 8010838:	3708      	adds	r7, #8
 801083a:	46bd      	mov	sp, r7
 801083c:	bd80      	pop	{r7, pc}

0801083e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801083e:	b580      	push	{r7, lr}
 8010840:	b082      	sub	sp, #8
 8010842:	af00      	add	r7, sp, #0
 8010844:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	2205      	movs	r2, #5
 801084a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801084e:	2300      	movs	r3, #0
 8010850:	2200      	movs	r2, #0
 8010852:	2100      	movs	r1, #0
 8010854:	6878      	ldr	r0, [r7, #4]
 8010856:	f000 fd3b 	bl	80112d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801085a:	2300      	movs	r3, #0
}
 801085c:	4618      	mov	r0, r3
 801085e:	3708      	adds	r7, #8
 8010860:	46bd      	mov	sp, r7
 8010862:	bd80      	pop	{r7, pc}

08010864 <_ZN4DataC1Ev>:

Data::Data(void)
{
    /* zero all data values */

 8010864:	4770      	bx	lr

08010866 <_ZN9SchedulerC1Ev>:
/*
extern MS5607Ctrl_t ms5607_2;
*/
extern MS5607Ctrl_t ms5607_1;

Scheduler::Scheduler(void)
 8010866:	b513      	push	{r0, r1, r4, lr}
 8010868:	4604      	mov	r4, r0
 801086a:	f7ff fffb 	bl	8010864 <_ZN4DataC1Ev>
{

    /* initialize data structure */
    this->data = Data();
 801086e:	a801      	add	r0, sp, #4
 8010870:	f7ff fff8 	bl	8010864 <_ZN4DataC1Ev>

}
 8010874:	4620      	mov	r0, r4
 8010876:	b002      	add	sp, #8
 8010878:	bd10      	pop	{r4, pc}
	...

0801087c <_ZN9Scheduler3runEv>:

void Scheduler::run(void)
{
 801087c:	b530      	push	{r4, r5, lr}

    /* ms5607 barometer */
    /* these configs are not correct for the final
     * this will be on SPI 3 and the CS will be PA15
     */
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 801087e:	4d1a      	ldr	r5, [pc, #104]	; (80108e8 <_ZN9Scheduler3runEv+0x6c>)
{
 8010880:	b085      	sub	sp, #20
 8010882:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8010884:	2201      	movs	r2, #1
 8010886:	4628      	mov	r0, r5
 8010888:	2120      	movs	r1, #32
 801088a:	f7f4 fe03 	bl	8005494 <HAL_GPIO_WritePin>
    ms5607_1.spiconfig.hspi = hspi1;
 801088e:	4b17      	ldr	r3, [pc, #92]	; (80108ec <_ZN9Scheduler3runEv+0x70>)
 8010890:	4917      	ldr	r1, [pc, #92]	; (80108f0 <_ZN9Scheduler3runEv+0x74>)
 8010892:	2288      	movs	r2, #136	; 0x88
 8010894:	4618      	mov	r0, r3
 8010896:	f000 fdb7 	bl	8011408 <memcpy>
    ms5607_1.spiconfig.port = GPIOC;
    ms5607_1.spiconfig.pin = GPIO_PIN_5;
 801089a:	2220      	movs	r2, #32
    ms5607_1.spiconfig.port = GPIOC;
 801089c:	f8c0 5088 	str.w	r5, [r0, #136]	; 0x88
    ms5607_1.spiconfig.pin = GPIO_PIN_5;
 80108a0:	f8a0 208c 	strh.w	r2, [r0, #140]	; 0x8c
    MS5607_init(&ms5607_1);
 80108a4:	f7f1 fbc2 	bl	800202c <MS5607_init>
    ms5607_2.spiconfig.pin = GPIO_PIN_15;
    MS5607_init(&ms5607_2);
    */

    /* setup for scheduler */
    State state1 = State(&(this->data));
 80108a8:	4621      	mov	r1, r4
 80108aa:	4668      	mov	r0, sp
 80108ac:	f000 f849 	bl	8010942 <_ZN5StateC1EP4Data>
    State state2 = State(&(this->data));
 80108b0:	4621      	mov	r1, r4
 80108b2:	a801      	add	r0, sp, #4
    State::state_t state = STATE1;
 80108b4:	2400      	movs	r4, #0
    State state2 = State(&(this->data));
 80108b6:	f000 f844 	bl	8010942 <_ZN5StateC1EP4Data>

    State states[] = {state1, state2};
 80108ba:	9b00      	ldr	r3, [sp, #0]
 80108bc:	9302      	str	r3, [sp, #8]
 80108be:	9b01      	ldr	r3, [sp, #4]
 80108c0:	9303      	str	r3, [sp, #12]

    uint32_t lastTime = HAL_GetTick();
 80108c2:	f7f1 fe1f 	bl	8002504 <HAL_GetTick>
 80108c6:	4605      	mov	r5, r0

    while(1)
    {
        /* rate limiting code for 1 Hz */
        while((HAL_GetTick() - lastTime) < SCHEDULER_1HZ_RATE);
 80108c8:	f7f1 fe1c 	bl	8002504 <HAL_GetTick>
 80108cc:	1b40      	subs	r0, r0, r5
 80108ce:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80108d2:	d3f9      	bcc.n	80108c8 <_ZN9Scheduler3runEv+0x4c>
        lastTime = HAL_GetTick();
 80108d4:	f7f1 fe16 	bl	8002504 <HAL_GetTick>

        /* scheduler main loop */
        state = states[state].run();
 80108d8:	ab02      	add	r3, sp, #8
        lastTime = HAL_GetTick();
 80108da:	4605      	mov	r5, r0
        state = states[state].run();
 80108dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80108e0:	f000 f84e 	bl	8010980 <_ZN5State3runEv>
 80108e4:	4604      	mov	r4, r0
    while(1)
 80108e6:	e7ef      	b.n	80108c8 <_ZN9Scheduler3runEv+0x4c>
 80108e8:	58020800 	.word	0x58020800
 80108ec:	24000208 	.word	0x24000208
 80108f0:	240005f4 	.word	0x240005f4

080108f4 <debugprintf>:
#include "serialPrint.h"

int debugprintf(const char *format, ...)
{
 80108f4:	b40f      	push	{r0, r1, r2, r3}
 80108f6:	b580      	push	{r7, lr}
 80108f8:	b0c2      	sub	sp, #264	; 0x108
 80108fa:	af00      	add	r7, sp, #0
    //declare variable arguments list
    va_list args;

    //get the arguments list
    va_start(args, format);
 80108fc:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8010900:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

    //make a buffer of size 256
    char buff[256];
    memset(buff, 0, sizeof(buff));
 8010904:	1d3b      	adds	r3, r7, #4
 8010906:	f44f 7280 	mov.w	r2, #256	; 0x100
 801090a:	2100      	movs	r1, #0
 801090c:	4618      	mov	r0, r3
 801090e:	f000 fd86 	bl	801141e <memset>

    //make format string
    vsnprintf(buff, 256, (char*)format, args);
 8010912:	1d38      	adds	r0, r7, #4
 8010914:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010918:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801091c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010920:	f000 fe6a 	bl	80115f8 <vsniprintf>

    //end list
    va_end(args);

    //send string out over usb
    return CDC_Transmit_FS((uint8_t *)buff, sizeof(buff));
 8010924:	1d3b      	adds	r3, r7, #4
 8010926:	f44f 7180 	mov.w	r1, #256	; 0x100
 801092a:	4618      	mov	r0, r3
 801092c:	f000 f8ee 	bl	8010b0c <CDC_Transmit_FS>
 8010930:	4603      	mov	r3, r0

    // old function call for uart print
    //return HAL_UART_Transmit(&huart2, (uint8_t*)buff, sizeof(buff), 10000);
}
 8010932:	4618      	mov	r0, r3
 8010934:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8010938:	46bd      	mov	sp, r7
 801093a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801093e:	b004      	add	sp, #16
 8010940:	4770      	bx	lr

08010942 <_ZN5StateC1EP4Data>:
*/
extern MS5607Ctrl_t ms5607_1;

State::State(Data *data)
{
    this->data = data;
 8010942:	6001      	str	r1, [r0, #0]
}
 8010944:	4770      	bx	lr
	...

08010948 <_ZN5State7generalEv>:

/** 
 * general functions that run in every state
 */
void State::general(void)
{
 8010948:	b513      	push	{r0, r1, r4, lr}

    /* read data from sensors */
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);
	MS5607_get_data(&ms5607_1);
 801094a:	4c0a      	ldr	r4, [pc, #40]	; (8010974 <_ZN5State7generalEv+0x2c>)
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);
 801094c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010950:	4809      	ldr	r0, [pc, #36]	; (8010978 <_ZN5State7generalEv+0x30>)
 8010952:	f7f4 fdb8 	bl	80054c6 <HAL_GPIO_TogglePin>
	MS5607_get_data(&ms5607_1);
 8010956:	4620      	mov	r0, r4
 8010958:	f7f1 fb92 	bl	8002080 <MS5607_get_data>

	debugprintf("Atmospheric Pressure: %f Pa\t Temperature %f C\r\n", ms5607_1.altData.baro, ms5607_1.altData.temp);
 801095c:	e9d4 0124 	ldrd	r0, r1, [r4, #144]	; 0x90
 8010960:	e9d4 2326 	ldrd	r2, r3, [r4, #152]	; 0x98
 8010964:	e9cd 0100 	strd	r0, r1, [sp]
 8010968:	4804      	ldr	r0, [pc, #16]	; (801097c <_ZN5State7generalEv+0x34>)
 801096a:	f7ff ffc3 	bl	80108f4 <debugprintf>

}
 801096e:	b002      	add	sp, #8
 8010970:	bd10      	pop	{r4, pc}
 8010972:	bf00      	nop
 8010974:	24000208 	.word	0x24000208
 8010978:	58021000 	.word	0x58021000
 801097c:	08011cec 	.word	0x08011cec

08010980 <_ZN5State3runEv>:
{
 8010980:	b508      	push	{r3, lr}
    this->general();
 8010982:	f7ff ffe1 	bl	8010948 <_ZN5State7generalEv>
}
 8010986:	2000      	movs	r0, #0
 8010988:	bd08      	pop	{r3, pc}
	...

0801098c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801098c:	b580      	push	{r7, lr}
 801098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010990:	2200      	movs	r2, #0
 8010992:	4913      	ldr	r1, [pc, #76]	; (80109e0 <MX_USB_DEVICE_Init+0x54>)
 8010994:	4813      	ldr	r0, [pc, #76]	; (80109e4 <MX_USB_DEVICE_Init+0x58>)
 8010996:	f7fe fe95 	bl	800f6c4 <USBD_Init>
 801099a:	4603      	mov	r3, r0
 801099c:	2b00      	cmp	r3, #0
 801099e:	d001      	beq.n	80109a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80109a0:	f7f0 fcf6 	bl	8001390 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80109a4:	4910      	ldr	r1, [pc, #64]	; (80109e8 <MX_USB_DEVICE_Init+0x5c>)
 80109a6:	480f      	ldr	r0, [pc, #60]	; (80109e4 <MX_USB_DEVICE_Init+0x58>)
 80109a8:	f7fe feb7 	bl	800f71a <USBD_RegisterClass>
 80109ac:	4603      	mov	r3, r0
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d001      	beq.n	80109b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80109b2:	f7f0 fced 	bl	8001390 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80109b6:	490d      	ldr	r1, [pc, #52]	; (80109ec <MX_USB_DEVICE_Init+0x60>)
 80109b8:	480a      	ldr	r0, [pc, #40]	; (80109e4 <MX_USB_DEVICE_Init+0x58>)
 80109ba:	f7fe fde5 	bl	800f588 <USBD_CDC_RegisterInterface>
 80109be:	4603      	mov	r3, r0
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d001      	beq.n	80109c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80109c4:	f7f0 fce4 	bl	8001390 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80109c8:	4806      	ldr	r0, [pc, #24]	; (80109e4 <MX_USB_DEVICE_Init+0x58>)
 80109ca:	f7fe fec0 	bl	800f74e <USBD_Start>
 80109ce:	4603      	mov	r3, r0
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d001      	beq.n	80109d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80109d4:	f7f0 fcdc 	bl	8001390 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80109d8:	f7f6 f8dc 	bl	8006b94 <HAL_PWREx_EnableUSBVoltageDetector>
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80109dc:	bf00      	nop
 80109de:	bd80      	pop	{r7, pc}
 80109e0:	24000130 	.word	0x24000130
 80109e4:	24000804 	.word	0x24000804
 80109e8:	2400001c 	.word	0x2400001c
 80109ec:	24000120 	.word	0x24000120

080109f0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80109f4:	2200      	movs	r2, #0
 80109f6:	4905      	ldr	r1, [pc, #20]	; (8010a0c <CDC_Init_FS+0x1c>)
 80109f8:	4805      	ldr	r0, [pc, #20]	; (8010a10 <CDC_Init_FS+0x20>)
 80109fa:	f7fe fddc 	bl	800f5b6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80109fe:	4905      	ldr	r1, [pc, #20]	; (8010a14 <CDC_Init_FS+0x24>)
 8010a00:	4803      	ldr	r0, [pc, #12]	; (8010a10 <CDC_Init_FS+0x20>)
 8010a02:	f7fe fdf2 	bl	800f5ea <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010a06:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010a08:	4618      	mov	r0, r3
 8010a0a:	bd80      	pop	{r7, pc}
 8010a0c:	240012c8 	.word	0x240012c8
 8010a10:	24000804 	.word	0x24000804
 8010a14:	24000ac8 	.word	0x24000ac8

08010a18 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010a18:	b480      	push	{r7}
 8010a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010a1c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010a1e:	4618      	mov	r0, r3
 8010a20:	46bd      	mov	sp, r7
 8010a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a26:	4770      	bx	lr

08010a28 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010a28:	b480      	push	{r7}
 8010a2a:	b083      	sub	sp, #12
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	4603      	mov	r3, r0
 8010a30:	6039      	str	r1, [r7, #0]
 8010a32:	71fb      	strb	r3, [r7, #7]
 8010a34:	4613      	mov	r3, r2
 8010a36:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010a38:	79fb      	ldrb	r3, [r7, #7]
 8010a3a:	2b23      	cmp	r3, #35	; 0x23
 8010a3c:	d84a      	bhi.n	8010ad4 <CDC_Control_FS+0xac>
 8010a3e:	a201      	add	r2, pc, #4	; (adr r2, 8010a44 <CDC_Control_FS+0x1c>)
 8010a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a44:	08010ad5 	.word	0x08010ad5
 8010a48:	08010ad5 	.word	0x08010ad5
 8010a4c:	08010ad5 	.word	0x08010ad5
 8010a50:	08010ad5 	.word	0x08010ad5
 8010a54:	08010ad5 	.word	0x08010ad5
 8010a58:	08010ad5 	.word	0x08010ad5
 8010a5c:	08010ad5 	.word	0x08010ad5
 8010a60:	08010ad5 	.word	0x08010ad5
 8010a64:	08010ad5 	.word	0x08010ad5
 8010a68:	08010ad5 	.word	0x08010ad5
 8010a6c:	08010ad5 	.word	0x08010ad5
 8010a70:	08010ad5 	.word	0x08010ad5
 8010a74:	08010ad5 	.word	0x08010ad5
 8010a78:	08010ad5 	.word	0x08010ad5
 8010a7c:	08010ad5 	.word	0x08010ad5
 8010a80:	08010ad5 	.word	0x08010ad5
 8010a84:	08010ad5 	.word	0x08010ad5
 8010a88:	08010ad5 	.word	0x08010ad5
 8010a8c:	08010ad5 	.word	0x08010ad5
 8010a90:	08010ad5 	.word	0x08010ad5
 8010a94:	08010ad5 	.word	0x08010ad5
 8010a98:	08010ad5 	.word	0x08010ad5
 8010a9c:	08010ad5 	.word	0x08010ad5
 8010aa0:	08010ad5 	.word	0x08010ad5
 8010aa4:	08010ad5 	.word	0x08010ad5
 8010aa8:	08010ad5 	.word	0x08010ad5
 8010aac:	08010ad5 	.word	0x08010ad5
 8010ab0:	08010ad5 	.word	0x08010ad5
 8010ab4:	08010ad5 	.word	0x08010ad5
 8010ab8:	08010ad5 	.word	0x08010ad5
 8010abc:	08010ad5 	.word	0x08010ad5
 8010ac0:	08010ad5 	.word	0x08010ad5
 8010ac4:	08010ad5 	.word	0x08010ad5
 8010ac8:	08010ad5 	.word	0x08010ad5
 8010acc:	08010ad5 	.word	0x08010ad5
 8010ad0:	08010ad5 	.word	0x08010ad5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010ad4:	bf00      	nop
  }

  return (USBD_OK);
 8010ad6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010ad8:	4618      	mov	r0, r3
 8010ada:	370c      	adds	r7, #12
 8010adc:	46bd      	mov	sp, r7
 8010ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae2:	4770      	bx	lr

08010ae4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	b082      	sub	sp, #8
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	6078      	str	r0, [r7, #4]
 8010aec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010aee:	6879      	ldr	r1, [r7, #4]
 8010af0:	4805      	ldr	r0, [pc, #20]	; (8010b08 <CDC_Receive_FS+0x24>)
 8010af2:	f7fe fd7a 	bl	800f5ea <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010af6:	4804      	ldr	r0, [pc, #16]	; (8010b08 <CDC_Receive_FS+0x24>)
 8010af8:	f7fe fdba 	bl	800f670 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010afc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010afe:	4618      	mov	r0, r3
 8010b00:	3708      	adds	r7, #8
 8010b02:	46bd      	mov	sp, r7
 8010b04:	bd80      	pop	{r7, pc}
 8010b06:	bf00      	nop
 8010b08:	24000804 	.word	0x24000804

08010b0c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	b084      	sub	sp, #16
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	6078      	str	r0, [r7, #4]
 8010b14:	460b      	mov	r3, r1
 8010b16:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010b18:	2300      	movs	r3, #0
 8010b1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010b1c:	4b0d      	ldr	r3, [pc, #52]	; (8010b54 <CDC_Transmit_FS+0x48>)
 8010b1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b22:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010b24:	68bb      	ldr	r3, [r7, #8]
 8010b26:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d001      	beq.n	8010b32 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8010b2e:	2301      	movs	r3, #1
 8010b30:	e00b      	b.n	8010b4a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010b32:	887b      	ldrh	r3, [r7, #2]
 8010b34:	461a      	mov	r2, r3
 8010b36:	6879      	ldr	r1, [r7, #4]
 8010b38:	4806      	ldr	r0, [pc, #24]	; (8010b54 <CDC_Transmit_FS+0x48>)
 8010b3a:	f7fe fd3c 	bl	800f5b6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010b3e:	4805      	ldr	r0, [pc, #20]	; (8010b54 <CDC_Transmit_FS+0x48>)
 8010b40:	f7fe fd67 	bl	800f612 <USBD_CDC_TransmitPacket>
 8010b44:	4603      	mov	r3, r0
 8010b46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	3710      	adds	r7, #16
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	bd80      	pop	{r7, pc}
 8010b52:	bf00      	nop
 8010b54:	24000804 	.word	0x24000804

08010b58 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b58:	b480      	push	{r7}
 8010b5a:	b083      	sub	sp, #12
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	4603      	mov	r3, r0
 8010b60:	6039      	str	r1, [r7, #0]
 8010b62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010b64:	683b      	ldr	r3, [r7, #0]
 8010b66:	2212      	movs	r2, #18
 8010b68:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010b6a:	4b03      	ldr	r3, [pc, #12]	; (8010b78 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	370c      	adds	r7, #12
 8010b70:	46bd      	mov	sp, r7
 8010b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b76:	4770      	bx	lr
 8010b78:	2400014c 	.word	0x2400014c

08010b7c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b7c:	b480      	push	{r7}
 8010b7e:	b083      	sub	sp, #12
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	4603      	mov	r3, r0
 8010b84:	6039      	str	r1, [r7, #0]
 8010b86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010b88:	683b      	ldr	r3, [r7, #0]
 8010b8a:	2204      	movs	r2, #4
 8010b8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010b8e:	4b03      	ldr	r3, [pc, #12]	; (8010b9c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010b90:	4618      	mov	r0, r3
 8010b92:	370c      	adds	r7, #12
 8010b94:	46bd      	mov	sp, r7
 8010b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9a:	4770      	bx	lr
 8010b9c:	24000160 	.word	0x24000160

08010ba0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b082      	sub	sp, #8
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	4603      	mov	r3, r0
 8010ba8:	6039      	str	r1, [r7, #0]
 8010baa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010bac:	79fb      	ldrb	r3, [r7, #7]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d105      	bne.n	8010bbe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010bb2:	683a      	ldr	r2, [r7, #0]
 8010bb4:	4907      	ldr	r1, [pc, #28]	; (8010bd4 <USBD_FS_ProductStrDescriptor+0x34>)
 8010bb6:	4808      	ldr	r0, [pc, #32]	; (8010bd8 <USBD_FS_ProductStrDescriptor+0x38>)
 8010bb8:	f7ff fd76 	bl	80106a8 <USBD_GetString>
 8010bbc:	e004      	b.n	8010bc8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010bbe:	683a      	ldr	r2, [r7, #0]
 8010bc0:	4904      	ldr	r1, [pc, #16]	; (8010bd4 <USBD_FS_ProductStrDescriptor+0x34>)
 8010bc2:	4805      	ldr	r0, [pc, #20]	; (8010bd8 <USBD_FS_ProductStrDescriptor+0x38>)
 8010bc4:	f7ff fd70 	bl	80106a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010bc8:	4b02      	ldr	r3, [pc, #8]	; (8010bd4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010bca:	4618      	mov	r0, r3
 8010bcc:	3708      	adds	r7, #8
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	bd80      	pop	{r7, pc}
 8010bd2:	bf00      	nop
 8010bd4:	24001ac8 	.word	0x24001ac8
 8010bd8:	08011c8c 	.word	0x08011c8c

08010bdc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b082      	sub	sp, #8
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	4603      	mov	r3, r0
 8010be4:	6039      	str	r1, [r7, #0]
 8010be6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010be8:	683a      	ldr	r2, [r7, #0]
 8010bea:	4904      	ldr	r1, [pc, #16]	; (8010bfc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010bec:	4804      	ldr	r0, [pc, #16]	; (8010c00 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010bee:	f7ff fd5b 	bl	80106a8 <USBD_GetString>
  return USBD_StrDesc;
 8010bf2:	4b02      	ldr	r3, [pc, #8]	; (8010bfc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	3708      	adds	r7, #8
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	bd80      	pop	{r7, pc}
 8010bfc:	24001ac8 	.word	0x24001ac8
 8010c00:	08011ca4 	.word	0x08011ca4

08010c04 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c04:	b580      	push	{r7, lr}
 8010c06:	b082      	sub	sp, #8
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	6039      	str	r1, [r7, #0]
 8010c0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010c10:	683b      	ldr	r3, [r7, #0]
 8010c12:	221a      	movs	r2, #26
 8010c14:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010c16:	f000 f843 	bl	8010ca0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010c1a:	4b02      	ldr	r3, [pc, #8]	; (8010c24 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	3708      	adds	r7, #8
 8010c20:	46bd      	mov	sp, r7
 8010c22:	bd80      	pop	{r7, pc}
 8010c24:	24000164 	.word	0x24000164

08010c28 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b082      	sub	sp, #8
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	4603      	mov	r3, r0
 8010c30:	6039      	str	r1, [r7, #0]
 8010c32:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010c34:	79fb      	ldrb	r3, [r7, #7]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d105      	bne.n	8010c46 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010c3a:	683a      	ldr	r2, [r7, #0]
 8010c3c:	4907      	ldr	r1, [pc, #28]	; (8010c5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8010c3e:	4808      	ldr	r0, [pc, #32]	; (8010c60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010c40:	f7ff fd32 	bl	80106a8 <USBD_GetString>
 8010c44:	e004      	b.n	8010c50 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010c46:	683a      	ldr	r2, [r7, #0]
 8010c48:	4904      	ldr	r1, [pc, #16]	; (8010c5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8010c4a:	4805      	ldr	r0, [pc, #20]	; (8010c60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010c4c:	f7ff fd2c 	bl	80106a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010c50:	4b02      	ldr	r3, [pc, #8]	; (8010c5c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010c52:	4618      	mov	r0, r3
 8010c54:	3708      	adds	r7, #8
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bd80      	pop	{r7, pc}
 8010c5a:	bf00      	nop
 8010c5c:	24001ac8 	.word	0x24001ac8
 8010c60:	08011cb8 	.word	0x08011cb8

08010c64 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b082      	sub	sp, #8
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	6039      	str	r1, [r7, #0]
 8010c6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010c70:	79fb      	ldrb	r3, [r7, #7]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d105      	bne.n	8010c82 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010c76:	683a      	ldr	r2, [r7, #0]
 8010c78:	4907      	ldr	r1, [pc, #28]	; (8010c98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010c7a:	4808      	ldr	r0, [pc, #32]	; (8010c9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010c7c:	f7ff fd14 	bl	80106a8 <USBD_GetString>
 8010c80:	e004      	b.n	8010c8c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010c82:	683a      	ldr	r2, [r7, #0]
 8010c84:	4904      	ldr	r1, [pc, #16]	; (8010c98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010c86:	4805      	ldr	r0, [pc, #20]	; (8010c9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010c88:	f7ff fd0e 	bl	80106a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010c8c:	4b02      	ldr	r3, [pc, #8]	; (8010c98 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010c8e:	4618      	mov	r0, r3
 8010c90:	3708      	adds	r7, #8
 8010c92:	46bd      	mov	sp, r7
 8010c94:	bd80      	pop	{r7, pc}
 8010c96:	bf00      	nop
 8010c98:	24001ac8 	.word	0x24001ac8
 8010c9c:	08011cc4 	.word	0x08011cc4

08010ca0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b084      	sub	sp, #16
 8010ca4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010ca6:	4b0f      	ldr	r3, [pc, #60]	; (8010ce4 <Get_SerialNum+0x44>)
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010cac:	4b0e      	ldr	r3, [pc, #56]	; (8010ce8 <Get_SerialNum+0x48>)
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010cb2:	4b0e      	ldr	r3, [pc, #56]	; (8010cec <Get_SerialNum+0x4c>)
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010cb8:	68fa      	ldr	r2, [r7, #12]
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	4413      	add	r3, r2
 8010cbe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d009      	beq.n	8010cda <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010cc6:	2208      	movs	r2, #8
 8010cc8:	4909      	ldr	r1, [pc, #36]	; (8010cf0 <Get_SerialNum+0x50>)
 8010cca:	68f8      	ldr	r0, [r7, #12]
 8010ccc:	f000 f814 	bl	8010cf8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010cd0:	2204      	movs	r2, #4
 8010cd2:	4908      	ldr	r1, [pc, #32]	; (8010cf4 <Get_SerialNum+0x54>)
 8010cd4:	68b8      	ldr	r0, [r7, #8]
 8010cd6:	f000 f80f 	bl	8010cf8 <IntToUnicode>
  }
}
 8010cda:	bf00      	nop
 8010cdc:	3710      	adds	r7, #16
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	bd80      	pop	{r7, pc}
 8010ce2:	bf00      	nop
 8010ce4:	1ff1e800 	.word	0x1ff1e800
 8010ce8:	1ff1e804 	.word	0x1ff1e804
 8010cec:	1ff1e808 	.word	0x1ff1e808
 8010cf0:	24000166 	.word	0x24000166
 8010cf4:	24000176 	.word	0x24000176

08010cf8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010cf8:	b480      	push	{r7}
 8010cfa:	b087      	sub	sp, #28
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	60f8      	str	r0, [r7, #12]
 8010d00:	60b9      	str	r1, [r7, #8]
 8010d02:	4613      	mov	r3, r2
 8010d04:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010d06:	2300      	movs	r3, #0
 8010d08:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	75fb      	strb	r3, [r7, #23]
 8010d0e:	e027      	b.n	8010d60 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	0f1b      	lsrs	r3, r3, #28
 8010d14:	2b09      	cmp	r3, #9
 8010d16:	d80b      	bhi.n	8010d30 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	0f1b      	lsrs	r3, r3, #28
 8010d1c:	b2da      	uxtb	r2, r3
 8010d1e:	7dfb      	ldrb	r3, [r7, #23]
 8010d20:	005b      	lsls	r3, r3, #1
 8010d22:	4619      	mov	r1, r3
 8010d24:	68bb      	ldr	r3, [r7, #8]
 8010d26:	440b      	add	r3, r1
 8010d28:	3230      	adds	r2, #48	; 0x30
 8010d2a:	b2d2      	uxtb	r2, r2
 8010d2c:	701a      	strb	r2, [r3, #0]
 8010d2e:	e00a      	b.n	8010d46 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	0f1b      	lsrs	r3, r3, #28
 8010d34:	b2da      	uxtb	r2, r3
 8010d36:	7dfb      	ldrb	r3, [r7, #23]
 8010d38:	005b      	lsls	r3, r3, #1
 8010d3a:	4619      	mov	r1, r3
 8010d3c:	68bb      	ldr	r3, [r7, #8]
 8010d3e:	440b      	add	r3, r1
 8010d40:	3237      	adds	r2, #55	; 0x37
 8010d42:	b2d2      	uxtb	r2, r2
 8010d44:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	011b      	lsls	r3, r3, #4
 8010d4a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010d4c:	7dfb      	ldrb	r3, [r7, #23]
 8010d4e:	005b      	lsls	r3, r3, #1
 8010d50:	3301      	adds	r3, #1
 8010d52:	68ba      	ldr	r2, [r7, #8]
 8010d54:	4413      	add	r3, r2
 8010d56:	2200      	movs	r2, #0
 8010d58:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010d5a:	7dfb      	ldrb	r3, [r7, #23]
 8010d5c:	3301      	adds	r3, #1
 8010d5e:	75fb      	strb	r3, [r7, #23]
 8010d60:	7dfa      	ldrb	r2, [r7, #23]
 8010d62:	79fb      	ldrb	r3, [r7, #7]
 8010d64:	429a      	cmp	r2, r3
 8010d66:	d3d3      	bcc.n	8010d10 <IntToUnicode+0x18>
  }
}
 8010d68:	bf00      	nop
 8010d6a:	371c      	adds	r7, #28
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d72:	4770      	bx	lr

08010d74 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010d74:	b580      	push	{r7, lr}
 8010d76:	b08a      	sub	sp, #40	; 0x28
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010d7c:	f107 0314 	add.w	r3, r7, #20
 8010d80:	2200      	movs	r2, #0
 8010d82:	601a      	str	r2, [r3, #0]
 8010d84:	605a      	str	r2, [r3, #4]
 8010d86:	609a      	str	r2, [r3, #8]
 8010d88:	60da      	str	r2, [r3, #12]
 8010d8a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	4a25      	ldr	r2, [pc, #148]	; (8010e28 <HAL_PCD_MspInit+0xb4>)
 8010d92:	4293      	cmp	r3, r2
 8010d94:	d143      	bne.n	8010e1e <HAL_PCD_MspInit+0xaa>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010d96:	4b25      	ldr	r3, [pc, #148]	; (8010e2c <HAL_PCD_MspInit+0xb8>)
 8010d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010d9c:	4a23      	ldr	r2, [pc, #140]	; (8010e2c <HAL_PCD_MspInit+0xb8>)
 8010d9e:	f043 0301 	orr.w	r3, r3, #1
 8010da2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010da6:	4b21      	ldr	r3, [pc, #132]	; (8010e2c <HAL_PCD_MspInit+0xb8>)
 8010da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010dac:	f003 0301 	and.w	r3, r3, #1
 8010db0:	613b      	str	r3, [r7, #16]
 8010db2:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8010db4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010dba:	2300      	movs	r3, #0
 8010dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010dbe:	2300      	movs	r3, #0
 8010dc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010dc2:	f107 0314 	add.w	r3, r7, #20
 8010dc6:	4619      	mov	r1, r3
 8010dc8:	4819      	ldr	r0, [pc, #100]	; (8010e30 <HAL_PCD_MspInit+0xbc>)
 8010dca:	f7f4 f9b3 	bl	8005134 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010dce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010dd4:	2302      	movs	r3, #2
 8010dd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010dd8:	2300      	movs	r3, #0
 8010dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010ddc:	2300      	movs	r3, #0
 8010dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8010de0:	230a      	movs	r3, #10
 8010de2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010de4:	f107 0314 	add.w	r3, r7, #20
 8010de8:	4619      	mov	r1, r3
 8010dea:	4811      	ldr	r0, [pc, #68]	; (8010e30 <HAL_PCD_MspInit+0xbc>)
 8010dec:	f7f4 f9a2 	bl	8005134 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010df0:	4b0e      	ldr	r3, [pc, #56]	; (8010e2c <HAL_PCD_MspInit+0xb8>)
 8010df2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010df6:	4a0d      	ldr	r2, [pc, #52]	; (8010e2c <HAL_PCD_MspInit+0xb8>)
 8010df8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010dfc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8010e00:	4b0a      	ldr	r3, [pc, #40]	; (8010e2c <HAL_PCD_MspInit+0xb8>)
 8010e02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010e06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010e0a:	60fb      	str	r3, [r7, #12]
 8010e0c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010e0e:	2200      	movs	r2, #0
 8010e10:	2100      	movs	r1, #0
 8010e12:	2065      	movs	r0, #101	; 0x65
 8010e14:	f7f2 fccd 	bl	80037b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010e18:	2065      	movs	r0, #101	; 0x65
 8010e1a:	f7f2 fce4 	bl	80037e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010e1e:	bf00      	nop
 8010e20:	3728      	adds	r7, #40	; 0x28
 8010e22:	46bd      	mov	sp, r7
 8010e24:	bd80      	pop	{r7, pc}
 8010e26:	bf00      	nop
 8010e28:	40080000 	.word	0x40080000
 8010e2c:	58024400 	.word	0x58024400
 8010e30:	58020000 	.word	0x58020000

08010e34 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b082      	sub	sp, #8
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010e48:	4619      	mov	r1, r3
 8010e4a:	4610      	mov	r0, r2
 8010e4c:	f7fe fcc8 	bl	800f7e0 <USBD_LL_SetupStage>
}
 8010e50:	bf00      	nop
 8010e52:	3708      	adds	r7, #8
 8010e54:	46bd      	mov	sp, r7
 8010e56:	bd80      	pop	{r7, pc}

08010e58 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b082      	sub	sp, #8
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	6078      	str	r0, [r7, #4]
 8010e60:	460b      	mov	r3, r1
 8010e62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010e6a:	78fa      	ldrb	r2, [r7, #3]
 8010e6c:	6879      	ldr	r1, [r7, #4]
 8010e6e:	4613      	mov	r3, r2
 8010e70:	00db      	lsls	r3, r3, #3
 8010e72:	1a9b      	subs	r3, r3, r2
 8010e74:	009b      	lsls	r3, r3, #2
 8010e76:	440b      	add	r3, r1
 8010e78:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010e7c:	681a      	ldr	r2, [r3, #0]
 8010e7e:	78fb      	ldrb	r3, [r7, #3]
 8010e80:	4619      	mov	r1, r3
 8010e82:	f7fe fcf8 	bl	800f876 <USBD_LL_DataOutStage>
}
 8010e86:	bf00      	nop
 8010e88:	3708      	adds	r7, #8
 8010e8a:	46bd      	mov	sp, r7
 8010e8c:	bd80      	pop	{r7, pc}

08010e8e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e8e:	b580      	push	{r7, lr}
 8010e90:	b082      	sub	sp, #8
 8010e92:	af00      	add	r7, sp, #0
 8010e94:	6078      	str	r0, [r7, #4]
 8010e96:	460b      	mov	r3, r1
 8010e98:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010ea0:	78fa      	ldrb	r2, [r7, #3]
 8010ea2:	6879      	ldr	r1, [r7, #4]
 8010ea4:	4613      	mov	r3, r2
 8010ea6:	00db      	lsls	r3, r3, #3
 8010ea8:	1a9b      	subs	r3, r3, r2
 8010eaa:	009b      	lsls	r3, r3, #2
 8010eac:	440b      	add	r3, r1
 8010eae:	3348      	adds	r3, #72	; 0x48
 8010eb0:	681a      	ldr	r2, [r3, #0]
 8010eb2:	78fb      	ldrb	r3, [r7, #3]
 8010eb4:	4619      	mov	r1, r3
 8010eb6:	f7fe fd4f 	bl	800f958 <USBD_LL_DataInStage>
}
 8010eba:	bf00      	nop
 8010ebc:	3708      	adds	r7, #8
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	bd80      	pop	{r7, pc}

08010ec2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ec2:	b580      	push	{r7, lr}
 8010ec4:	b082      	sub	sp, #8
 8010ec6:	af00      	add	r7, sp, #0
 8010ec8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	f7fe fe62 	bl	800fb9a <USBD_LL_SOF>
}
 8010ed6:	bf00      	nop
 8010ed8:	3708      	adds	r7, #8
 8010eda:	46bd      	mov	sp, r7
 8010edc:	bd80      	pop	{r7, pc}

08010ede <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8010ede:	b580      	push	{r7, lr}
 8010ee0:	b084      	sub	sp, #16
 8010ee2:	af00      	add	r7, sp, #0
 8010ee4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010ee6:	2301      	movs	r3, #1
 8010ee8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	68db      	ldr	r3, [r3, #12]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d102      	bne.n	8010ef8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	73fb      	strb	r3, [r7, #15]
 8010ef6:	e008      	b.n	8010f0a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	68db      	ldr	r3, [r3, #12]
 8010efc:	2b02      	cmp	r3, #2
 8010efe:	d102      	bne.n	8010f06 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8010f00:	2301      	movs	r3, #1
 8010f02:	73fb      	strb	r3, [r7, #15]
 8010f04:	e001      	b.n	8010f0a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8010f06:	f7f0 fa43 	bl	8001390 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010f10:	7bfa      	ldrb	r2, [r7, #15]
 8010f12:	4611      	mov	r1, r2
 8010f14:	4618      	mov	r0, r3
 8010f16:	f7fe fe05 	bl	800fb24 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010f20:	4618      	mov	r0, r3
 8010f22:	f7fe fdbe 	bl	800faa2 <USBD_LL_Reset>
}
 8010f26:	bf00      	nop
 8010f28:	3710      	adds	r7, #16
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	bd80      	pop	{r7, pc}
	...

08010f30 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f30:	b580      	push	{r7, lr}
 8010f32:	b082      	sub	sp, #8
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010f3e:	4618      	mov	r0, r3
 8010f40:	f7fe fe00 	bl	800fb44 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	687a      	ldr	r2, [r7, #4]
 8010f50:	6812      	ldr	r2, [r2, #0]
 8010f52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010f56:	f043 0301 	orr.w	r3, r3, #1
 8010f5a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	6a1b      	ldr	r3, [r3, #32]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d005      	beq.n	8010f70 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010f64:	4b04      	ldr	r3, [pc, #16]	; (8010f78 <HAL_PCD_SuspendCallback+0x48>)
 8010f66:	691b      	ldr	r3, [r3, #16]
 8010f68:	4a03      	ldr	r2, [pc, #12]	; (8010f78 <HAL_PCD_SuspendCallback+0x48>)
 8010f6a:	f043 0306 	orr.w	r3, r3, #6
 8010f6e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010f70:	bf00      	nop
 8010f72:	3708      	adds	r7, #8
 8010f74:	46bd      	mov	sp, r7
 8010f76:	bd80      	pop	{r7, pc}
 8010f78:	e000ed00 	.word	0xe000ed00

08010f7c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	b082      	sub	sp, #8
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	f7fe fdef 	bl	800fb6e <USBD_LL_Resume>
}
 8010f90:	bf00      	nop
 8010f92:	3708      	adds	r7, #8
 8010f94:	46bd      	mov	sp, r7
 8010f96:	bd80      	pop	{r7, pc}

08010f98 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b082      	sub	sp, #8
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	6078      	str	r0, [r7, #4]
 8010fa0:	460b      	mov	r3, r1
 8010fa2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010faa:	78fa      	ldrb	r2, [r7, #3]
 8010fac:	4611      	mov	r1, r2
 8010fae:	4618      	mov	r0, r3
 8010fb0:	f7fe fe1a 	bl	800fbe8 <USBD_LL_IsoOUTIncomplete>
}
 8010fb4:	bf00      	nop
 8010fb6:	3708      	adds	r7, #8
 8010fb8:	46bd      	mov	sp, r7
 8010fba:	bd80      	pop	{r7, pc}

08010fbc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010fbc:	b580      	push	{r7, lr}
 8010fbe:	b082      	sub	sp, #8
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	6078      	str	r0, [r7, #4]
 8010fc4:	460b      	mov	r3, r1
 8010fc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010fce:	78fa      	ldrb	r2, [r7, #3]
 8010fd0:	4611      	mov	r1, r2
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	f7fe fdfb 	bl	800fbce <USBD_LL_IsoINIncomplete>
}
 8010fd8:	bf00      	nop
 8010fda:	3708      	adds	r7, #8
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	bd80      	pop	{r7, pc}

08010fe0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010fe0:	b580      	push	{r7, lr}
 8010fe2:	b082      	sub	sp, #8
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010fee:	4618      	mov	r0, r3
 8010ff0:	f7fe fe07 	bl	800fc02 <USBD_LL_DevConnected>
}
 8010ff4:	bf00      	nop
 8010ff6:	3708      	adds	r7, #8
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	bd80      	pop	{r7, pc}

08010ffc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	b082      	sub	sp, #8
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801100a:	4618      	mov	r0, r3
 801100c:	f7fe fe04 	bl	800fc18 <USBD_LL_DevDisconnected>
}
 8011010:	bf00      	nop
 8011012:	3708      	adds	r7, #8
 8011014:	46bd      	mov	sp, r7
 8011016:	bd80      	pop	{r7, pc}

08011018 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b082      	sub	sp, #8
 801101c:	af00      	add	r7, sp, #0
 801101e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	781b      	ldrb	r3, [r3, #0]
 8011024:	2b00      	cmp	r3, #0
 8011026:	d13e      	bne.n	80110a6 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011028:	4a21      	ldr	r2, [pc, #132]	; (80110b0 <USBD_LL_Init+0x98>)
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	4a1f      	ldr	r2, [pc, #124]	; (80110b0 <USBD_LL_Init+0x98>)
 8011034:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011038:	4b1d      	ldr	r3, [pc, #116]	; (80110b0 <USBD_LL_Init+0x98>)
 801103a:	4a1e      	ldr	r2, [pc, #120]	; (80110b4 <USBD_LL_Init+0x9c>)
 801103c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801103e:	4b1c      	ldr	r3, [pc, #112]	; (80110b0 <USBD_LL_Init+0x98>)
 8011040:	2209      	movs	r2, #9
 8011042:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011044:	4b1a      	ldr	r3, [pc, #104]	; (80110b0 <USBD_LL_Init+0x98>)
 8011046:	2202      	movs	r2, #2
 8011048:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801104a:	4b19      	ldr	r3, [pc, #100]	; (80110b0 <USBD_LL_Init+0x98>)
 801104c:	2200      	movs	r2, #0
 801104e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011050:	4b17      	ldr	r3, [pc, #92]	; (80110b0 <USBD_LL_Init+0x98>)
 8011052:	2202      	movs	r2, #2
 8011054:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011056:	4b16      	ldr	r3, [pc, #88]	; (80110b0 <USBD_LL_Init+0x98>)
 8011058:	2200      	movs	r2, #0
 801105a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801105c:	4b14      	ldr	r3, [pc, #80]	; (80110b0 <USBD_LL_Init+0x98>)
 801105e:	2200      	movs	r2, #0
 8011060:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011062:	4b13      	ldr	r3, [pc, #76]	; (80110b0 <USBD_LL_Init+0x98>)
 8011064:	2200      	movs	r2, #0
 8011066:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8011068:	4b11      	ldr	r3, [pc, #68]	; (80110b0 <USBD_LL_Init+0x98>)
 801106a:	2200      	movs	r2, #0
 801106c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 801106e:	4b10      	ldr	r3, [pc, #64]	; (80110b0 <USBD_LL_Init+0x98>)
 8011070:	2201      	movs	r2, #1
 8011072:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011074:	4b0e      	ldr	r3, [pc, #56]	; (80110b0 <USBD_LL_Init+0x98>)
 8011076:	2200      	movs	r2, #0
 8011078:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801107a:	480d      	ldr	r0, [pc, #52]	; (80110b0 <USBD_LL_Init+0x98>)
 801107c:	f7f4 fb65 	bl	800574a <HAL_PCD_Init>
 8011080:	4603      	mov	r3, r0
 8011082:	2b00      	cmp	r3, #0
 8011084:	d001      	beq.n	801108a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8011086:	f7f0 f983 	bl	8001390 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801108a:	2180      	movs	r1, #128	; 0x80
 801108c:	4808      	ldr	r0, [pc, #32]	; (80110b0 <USBD_LL_Init+0x98>)
 801108e:	f7f5 fcf6 	bl	8006a7e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011092:	2240      	movs	r2, #64	; 0x40
 8011094:	2100      	movs	r1, #0
 8011096:	4806      	ldr	r0, [pc, #24]	; (80110b0 <USBD_LL_Init+0x98>)
 8011098:	f7f5 fcaa 	bl	80069f0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801109c:	2280      	movs	r2, #128	; 0x80
 801109e:	2101      	movs	r1, #1
 80110a0:	4803      	ldr	r0, [pc, #12]	; (80110b0 <USBD_LL_Init+0x98>)
 80110a2:	f7f5 fca5 	bl	80069f0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80110a6:	2300      	movs	r3, #0
}
 80110a8:	4618      	mov	r0, r3
 80110aa:	3708      	adds	r7, #8
 80110ac:	46bd      	mov	sp, r7
 80110ae:	bd80      	pop	{r7, pc}
 80110b0:	24001b08 	.word	0x24001b08
 80110b4:	40080000 	.word	0x40080000

080110b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80110b8:	b580      	push	{r7, lr}
 80110ba:	b084      	sub	sp, #16
 80110bc:	af00      	add	r7, sp, #0
 80110be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80110c0:	2300      	movs	r3, #0
 80110c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80110c4:	2300      	movs	r3, #0
 80110c6:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80110ce:	4618      	mov	r0, r3
 80110d0:	f7f4 fc5f 	bl	8005992 <HAL_PCD_Start>
 80110d4:	4603      	mov	r3, r0
 80110d6:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80110d8:	7bfb      	ldrb	r3, [r7, #15]
 80110da:	4618      	mov	r0, r3
 80110dc:	f000 f92e 	bl	801133c <USBD_Get_USB_Status>
 80110e0:	4603      	mov	r3, r0
 80110e2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80110e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80110e6:	4618      	mov	r0, r3
 80110e8:	3710      	adds	r7, #16
 80110ea:	46bd      	mov	sp, r7
 80110ec:	bd80      	pop	{r7, pc}

080110ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80110ee:	b580      	push	{r7, lr}
 80110f0:	b084      	sub	sp, #16
 80110f2:	af00      	add	r7, sp, #0
 80110f4:	6078      	str	r0, [r7, #4]
 80110f6:	4608      	mov	r0, r1
 80110f8:	4611      	mov	r1, r2
 80110fa:	461a      	mov	r2, r3
 80110fc:	4603      	mov	r3, r0
 80110fe:	70fb      	strb	r3, [r7, #3]
 8011100:	460b      	mov	r3, r1
 8011102:	70bb      	strb	r3, [r7, #2]
 8011104:	4613      	mov	r3, r2
 8011106:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011108:	2300      	movs	r3, #0
 801110a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801110c:	2300      	movs	r3, #0
 801110e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8011116:	78bb      	ldrb	r3, [r7, #2]
 8011118:	883a      	ldrh	r2, [r7, #0]
 801111a:	78f9      	ldrb	r1, [r7, #3]
 801111c:	f7f5 f870 	bl	8006200 <HAL_PCD_EP_Open>
 8011120:	4603      	mov	r3, r0
 8011122:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011124:	7bfb      	ldrb	r3, [r7, #15]
 8011126:	4618      	mov	r0, r3
 8011128:	f000 f908 	bl	801133c <USBD_Get_USB_Status>
 801112c:	4603      	mov	r3, r0
 801112e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8011130:	7bbb      	ldrb	r3, [r7, #14]
}
 8011132:	4618      	mov	r0, r3
 8011134:	3710      	adds	r7, #16
 8011136:	46bd      	mov	sp, r7
 8011138:	bd80      	pop	{r7, pc}

0801113a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801113a:	b580      	push	{r7, lr}
 801113c:	b084      	sub	sp, #16
 801113e:	af00      	add	r7, sp, #0
 8011140:	6078      	str	r0, [r7, #4]
 8011142:	460b      	mov	r3, r1
 8011144:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011146:	2300      	movs	r3, #0
 8011148:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801114a:	2300      	movs	r3, #0
 801114c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011154:	78fa      	ldrb	r2, [r7, #3]
 8011156:	4611      	mov	r1, r2
 8011158:	4618      	mov	r0, r3
 801115a:	f7f5 f8b9 	bl	80062d0 <HAL_PCD_EP_Close>
 801115e:	4603      	mov	r3, r0
 8011160:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8011162:	7bfb      	ldrb	r3, [r7, #15]
 8011164:	4618      	mov	r0, r3
 8011166:	f000 f8e9 	bl	801133c <USBD_Get_USB_Status>
 801116a:	4603      	mov	r3, r0
 801116c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 801116e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011170:	4618      	mov	r0, r3
 8011172:	3710      	adds	r7, #16
 8011174:	46bd      	mov	sp, r7
 8011176:	bd80      	pop	{r7, pc}

08011178 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011178:	b580      	push	{r7, lr}
 801117a:	b084      	sub	sp, #16
 801117c:	af00      	add	r7, sp, #0
 801117e:	6078      	str	r0, [r7, #4]
 8011180:	460b      	mov	r3, r1
 8011182:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011184:	2300      	movs	r3, #0
 8011186:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011188:	2300      	movs	r3, #0
 801118a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011192:	78fa      	ldrb	r2, [r7, #3]
 8011194:	4611      	mov	r1, r2
 8011196:	4618      	mov	r0, r3
 8011198:	f7f5 f991 	bl	80064be <HAL_PCD_EP_SetStall>
 801119c:	4603      	mov	r3, r0
 801119e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80111a0:	7bfb      	ldrb	r3, [r7, #15]
 80111a2:	4618      	mov	r0, r3
 80111a4:	f000 f8ca 	bl	801133c <USBD_Get_USB_Status>
 80111a8:	4603      	mov	r3, r0
 80111aa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80111ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80111ae:	4618      	mov	r0, r3
 80111b0:	3710      	adds	r7, #16
 80111b2:	46bd      	mov	sp, r7
 80111b4:	bd80      	pop	{r7, pc}

080111b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80111b6:	b580      	push	{r7, lr}
 80111b8:	b084      	sub	sp, #16
 80111ba:	af00      	add	r7, sp, #0
 80111bc:	6078      	str	r0, [r7, #4]
 80111be:	460b      	mov	r3, r1
 80111c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80111c2:	2300      	movs	r3, #0
 80111c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80111c6:	2300      	movs	r3, #0
 80111c8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80111d0:	78fa      	ldrb	r2, [r7, #3]
 80111d2:	4611      	mov	r1, r2
 80111d4:	4618      	mov	r0, r3
 80111d6:	f7f5 f9d6 	bl	8006586 <HAL_PCD_EP_ClrStall>
 80111da:	4603      	mov	r3, r0
 80111dc:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 80111de:	7bfb      	ldrb	r3, [r7, #15]
 80111e0:	4618      	mov	r0, r3
 80111e2:	f000 f8ab 	bl	801133c <USBD_Get_USB_Status>
 80111e6:	4603      	mov	r3, r0
 80111e8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 80111ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80111ec:	4618      	mov	r0, r3
 80111ee:	3710      	adds	r7, #16
 80111f0:	46bd      	mov	sp, r7
 80111f2:	bd80      	pop	{r7, pc}

080111f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80111f4:	b480      	push	{r7}
 80111f6:	b085      	sub	sp, #20
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	6078      	str	r0, [r7, #4]
 80111fc:	460b      	mov	r3, r1
 80111fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011206:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8011208:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801120c:	2b00      	cmp	r3, #0
 801120e:	da0b      	bge.n	8011228 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8011210:	78fb      	ldrb	r3, [r7, #3]
 8011212:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011216:	68f9      	ldr	r1, [r7, #12]
 8011218:	4613      	mov	r3, r2
 801121a:	00db      	lsls	r3, r3, #3
 801121c:	1a9b      	subs	r3, r3, r2
 801121e:	009b      	lsls	r3, r3, #2
 8011220:	440b      	add	r3, r1
 8011222:	333e      	adds	r3, #62	; 0x3e
 8011224:	781b      	ldrb	r3, [r3, #0]
 8011226:	e00b      	b.n	8011240 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8011228:	78fb      	ldrb	r3, [r7, #3]
 801122a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801122e:	68f9      	ldr	r1, [r7, #12]
 8011230:	4613      	mov	r3, r2
 8011232:	00db      	lsls	r3, r3, #3
 8011234:	1a9b      	subs	r3, r3, r2
 8011236:	009b      	lsls	r3, r3, #2
 8011238:	440b      	add	r3, r1
 801123a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801123e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011240:	4618      	mov	r0, r3
 8011242:	3714      	adds	r7, #20
 8011244:	46bd      	mov	sp, r7
 8011246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801124a:	4770      	bx	lr

0801124c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801124c:	b580      	push	{r7, lr}
 801124e:	b084      	sub	sp, #16
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
 8011254:	460b      	mov	r3, r1
 8011256:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011258:	2300      	movs	r3, #0
 801125a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801125c:	2300      	movs	r3, #0
 801125e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011266:	78fa      	ldrb	r2, [r7, #3]
 8011268:	4611      	mov	r1, r2
 801126a:	4618      	mov	r0, r3
 801126c:	f7f4 ffa3 	bl	80061b6 <HAL_PCD_SetAddress>
 8011270:	4603      	mov	r3, r0
 8011272:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8011274:	7bfb      	ldrb	r3, [r7, #15]
 8011276:	4618      	mov	r0, r3
 8011278:	f000 f860 	bl	801133c <USBD_Get_USB_Status>
 801127c:	4603      	mov	r3, r0
 801127e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8011280:	7bbb      	ldrb	r3, [r7, #14]
}
 8011282:	4618      	mov	r0, r3
 8011284:	3710      	adds	r7, #16
 8011286:	46bd      	mov	sp, r7
 8011288:	bd80      	pop	{r7, pc}

0801128a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801128a:	b580      	push	{r7, lr}
 801128c:	b086      	sub	sp, #24
 801128e:	af00      	add	r7, sp, #0
 8011290:	60f8      	str	r0, [r7, #12]
 8011292:	607a      	str	r2, [r7, #4]
 8011294:	461a      	mov	r2, r3
 8011296:	460b      	mov	r3, r1
 8011298:	72fb      	strb	r3, [r7, #11]
 801129a:	4613      	mov	r3, r2
 801129c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801129e:	2300      	movs	r3, #0
 80112a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80112a2:	2300      	movs	r3, #0
 80112a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80112ac:	893b      	ldrh	r3, [r7, #8]
 80112ae:	7af9      	ldrb	r1, [r7, #11]
 80112b0:	687a      	ldr	r2, [r7, #4]
 80112b2:	f7f5 f8ba 	bl	800642a <HAL_PCD_EP_Transmit>
 80112b6:	4603      	mov	r3, r0
 80112b8:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 80112ba:	7dfb      	ldrb	r3, [r7, #23]
 80112bc:	4618      	mov	r0, r3
 80112be:	f000 f83d 	bl	801133c <USBD_Get_USB_Status>
 80112c2:	4603      	mov	r3, r0
 80112c4:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80112c6:	7dbb      	ldrb	r3, [r7, #22]
}
 80112c8:	4618      	mov	r0, r3
 80112ca:	3718      	adds	r7, #24
 80112cc:	46bd      	mov	sp, r7
 80112ce:	bd80      	pop	{r7, pc}

080112d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b086      	sub	sp, #24
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	60f8      	str	r0, [r7, #12]
 80112d8:	607a      	str	r2, [r7, #4]
 80112da:	461a      	mov	r2, r3
 80112dc:	460b      	mov	r3, r1
 80112de:	72fb      	strb	r3, [r7, #11]
 80112e0:	4613      	mov	r3, r2
 80112e2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80112e4:	2300      	movs	r3, #0
 80112e6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80112e8:	2300      	movs	r3, #0
 80112ea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80112f2:	893b      	ldrh	r3, [r7, #8]
 80112f4:	7af9      	ldrb	r1, [r7, #11]
 80112f6:	687a      	ldr	r2, [r7, #4]
 80112f8:	f7f5 f834 	bl	8006364 <HAL_PCD_EP_Receive>
 80112fc:	4603      	mov	r3, r0
 80112fe:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8011300:	7dfb      	ldrb	r3, [r7, #23]
 8011302:	4618      	mov	r0, r3
 8011304:	f000 f81a 	bl	801133c <USBD_Get_USB_Status>
 8011308:	4603      	mov	r3, r0
 801130a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 801130c:	7dbb      	ldrb	r3, [r7, #22]
}
 801130e:	4618      	mov	r0, r3
 8011310:	3718      	adds	r7, #24
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}

08011316 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011316:	b580      	push	{r7, lr}
 8011318:	b082      	sub	sp, #8
 801131a:	af00      	add	r7, sp, #0
 801131c:	6078      	str	r0, [r7, #4]
 801131e:	460b      	mov	r3, r1
 8011320:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011328:	78fa      	ldrb	r2, [r7, #3]
 801132a:	4611      	mov	r1, r2
 801132c:	4618      	mov	r0, r3
 801132e:	f7f5 f864 	bl	80063fa <HAL_PCD_EP_GetRxCount>
 8011332:	4603      	mov	r3, r0
}
 8011334:	4618      	mov	r0, r3
 8011336:	3708      	adds	r7, #8
 8011338:	46bd      	mov	sp, r7
 801133a:	bd80      	pop	{r7, pc}

0801133c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801133c:	b480      	push	{r7}
 801133e:	b085      	sub	sp, #20
 8011340:	af00      	add	r7, sp, #0
 8011342:	4603      	mov	r3, r0
 8011344:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011346:	2300      	movs	r3, #0
 8011348:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801134a:	79fb      	ldrb	r3, [r7, #7]
 801134c:	2b03      	cmp	r3, #3
 801134e:	d817      	bhi.n	8011380 <USBD_Get_USB_Status+0x44>
 8011350:	a201      	add	r2, pc, #4	; (adr r2, 8011358 <USBD_Get_USB_Status+0x1c>)
 8011352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011356:	bf00      	nop
 8011358:	08011369 	.word	0x08011369
 801135c:	0801136f 	.word	0x0801136f
 8011360:	08011375 	.word	0x08011375
 8011364:	0801137b 	.word	0x0801137b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011368:	2300      	movs	r3, #0
 801136a:	73fb      	strb	r3, [r7, #15]
    break;
 801136c:	e00b      	b.n	8011386 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801136e:	2302      	movs	r3, #2
 8011370:	73fb      	strb	r3, [r7, #15]
    break;
 8011372:	e008      	b.n	8011386 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011374:	2301      	movs	r3, #1
 8011376:	73fb      	strb	r3, [r7, #15]
    break;
 8011378:	e005      	b.n	8011386 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801137a:	2302      	movs	r3, #2
 801137c:	73fb      	strb	r3, [r7, #15]
    break;
 801137e:	e002      	b.n	8011386 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011380:	2302      	movs	r3, #2
 8011382:	73fb      	strb	r3, [r7, #15]
    break;
 8011384:	bf00      	nop
  }
  return usb_status;
 8011386:	7bfb      	ldrb	r3, [r7, #15]
}
 8011388:	4618      	mov	r0, r3
 801138a:	3714      	adds	r7, #20
 801138c:	46bd      	mov	sp, r7
 801138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011392:	4770      	bx	lr

08011394 <__errno>:
 8011394:	4b01      	ldr	r3, [pc, #4]	; (801139c <__errno+0x8>)
 8011396:	6818      	ldr	r0, [r3, #0]
 8011398:	4770      	bx	lr
 801139a:	bf00      	nop
 801139c:	24000180 	.word	0x24000180

080113a0 <__libc_init_array>:
 80113a0:	b570      	push	{r4, r5, r6, lr}
 80113a2:	4e0d      	ldr	r6, [pc, #52]	; (80113d8 <__libc_init_array+0x38>)
 80113a4:	4c0d      	ldr	r4, [pc, #52]	; (80113dc <__libc_init_array+0x3c>)
 80113a6:	1ba4      	subs	r4, r4, r6
 80113a8:	10a4      	asrs	r4, r4, #2
 80113aa:	2500      	movs	r5, #0
 80113ac:	42a5      	cmp	r5, r4
 80113ae:	d109      	bne.n	80113c4 <__libc_init_array+0x24>
 80113b0:	4e0b      	ldr	r6, [pc, #44]	; (80113e0 <__libc_init_array+0x40>)
 80113b2:	4c0c      	ldr	r4, [pc, #48]	; (80113e4 <__libc_init_array+0x44>)
 80113b4:	f000 fc52 	bl	8011c5c <_init>
 80113b8:	1ba4      	subs	r4, r4, r6
 80113ba:	10a4      	asrs	r4, r4, #2
 80113bc:	2500      	movs	r5, #0
 80113be:	42a5      	cmp	r5, r4
 80113c0:	d105      	bne.n	80113ce <__libc_init_array+0x2e>
 80113c2:	bd70      	pop	{r4, r5, r6, pc}
 80113c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80113c8:	4798      	blx	r3
 80113ca:	3501      	adds	r5, #1
 80113cc:	e7ee      	b.n	80113ac <__libc_init_array+0xc>
 80113ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80113d2:	4798      	blx	r3
 80113d4:	3501      	adds	r5, #1
 80113d6:	e7f2      	b.n	80113be <__libc_init_array+0x1e>
 80113d8:	08011d58 	.word	0x08011d58
 80113dc:	08011d58 	.word	0x08011d58
 80113e0:	08011d58 	.word	0x08011d58
 80113e4:	08011d5c 	.word	0x08011d5c

080113e8 <malloc>:
 80113e8:	4b02      	ldr	r3, [pc, #8]	; (80113f4 <malloc+0xc>)
 80113ea:	4601      	mov	r1, r0
 80113ec:	6818      	ldr	r0, [r3, #0]
 80113ee:	f000 b86d 	b.w	80114cc <_malloc_r>
 80113f2:	bf00      	nop
 80113f4:	24000180 	.word	0x24000180

080113f8 <free>:
 80113f8:	4b02      	ldr	r3, [pc, #8]	; (8011404 <free+0xc>)
 80113fa:	4601      	mov	r1, r0
 80113fc:	6818      	ldr	r0, [r3, #0]
 80113fe:	f000 b817 	b.w	8011430 <_free_r>
 8011402:	bf00      	nop
 8011404:	24000180 	.word	0x24000180

08011408 <memcpy>:
 8011408:	b510      	push	{r4, lr}
 801140a:	1e43      	subs	r3, r0, #1
 801140c:	440a      	add	r2, r1
 801140e:	4291      	cmp	r1, r2
 8011410:	d100      	bne.n	8011414 <memcpy+0xc>
 8011412:	bd10      	pop	{r4, pc}
 8011414:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011418:	f803 4f01 	strb.w	r4, [r3, #1]!
 801141c:	e7f7      	b.n	801140e <memcpy+0x6>

0801141e <memset>:
 801141e:	4402      	add	r2, r0
 8011420:	4603      	mov	r3, r0
 8011422:	4293      	cmp	r3, r2
 8011424:	d100      	bne.n	8011428 <memset+0xa>
 8011426:	4770      	bx	lr
 8011428:	f803 1b01 	strb.w	r1, [r3], #1
 801142c:	e7f9      	b.n	8011422 <memset+0x4>
	...

08011430 <_free_r>:
 8011430:	b538      	push	{r3, r4, r5, lr}
 8011432:	4605      	mov	r5, r0
 8011434:	2900      	cmp	r1, #0
 8011436:	d045      	beq.n	80114c4 <_free_r+0x94>
 8011438:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801143c:	1f0c      	subs	r4, r1, #4
 801143e:	2b00      	cmp	r3, #0
 8011440:	bfb8      	it	lt
 8011442:	18e4      	addlt	r4, r4, r3
 8011444:	f000 f8e6 	bl	8011614 <__malloc_lock>
 8011448:	4a1f      	ldr	r2, [pc, #124]	; (80114c8 <_free_r+0x98>)
 801144a:	6813      	ldr	r3, [r2, #0]
 801144c:	4610      	mov	r0, r2
 801144e:	b933      	cbnz	r3, 801145e <_free_r+0x2e>
 8011450:	6063      	str	r3, [r4, #4]
 8011452:	6014      	str	r4, [r2, #0]
 8011454:	4628      	mov	r0, r5
 8011456:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801145a:	f000 b8dc 	b.w	8011616 <__malloc_unlock>
 801145e:	42a3      	cmp	r3, r4
 8011460:	d90c      	bls.n	801147c <_free_r+0x4c>
 8011462:	6821      	ldr	r1, [r4, #0]
 8011464:	1862      	adds	r2, r4, r1
 8011466:	4293      	cmp	r3, r2
 8011468:	bf04      	itt	eq
 801146a:	681a      	ldreq	r2, [r3, #0]
 801146c:	685b      	ldreq	r3, [r3, #4]
 801146e:	6063      	str	r3, [r4, #4]
 8011470:	bf04      	itt	eq
 8011472:	1852      	addeq	r2, r2, r1
 8011474:	6022      	streq	r2, [r4, #0]
 8011476:	6004      	str	r4, [r0, #0]
 8011478:	e7ec      	b.n	8011454 <_free_r+0x24>
 801147a:	4613      	mov	r3, r2
 801147c:	685a      	ldr	r2, [r3, #4]
 801147e:	b10a      	cbz	r2, 8011484 <_free_r+0x54>
 8011480:	42a2      	cmp	r2, r4
 8011482:	d9fa      	bls.n	801147a <_free_r+0x4a>
 8011484:	6819      	ldr	r1, [r3, #0]
 8011486:	1858      	adds	r0, r3, r1
 8011488:	42a0      	cmp	r0, r4
 801148a:	d10b      	bne.n	80114a4 <_free_r+0x74>
 801148c:	6820      	ldr	r0, [r4, #0]
 801148e:	4401      	add	r1, r0
 8011490:	1858      	adds	r0, r3, r1
 8011492:	4282      	cmp	r2, r0
 8011494:	6019      	str	r1, [r3, #0]
 8011496:	d1dd      	bne.n	8011454 <_free_r+0x24>
 8011498:	6810      	ldr	r0, [r2, #0]
 801149a:	6852      	ldr	r2, [r2, #4]
 801149c:	605a      	str	r2, [r3, #4]
 801149e:	4401      	add	r1, r0
 80114a0:	6019      	str	r1, [r3, #0]
 80114a2:	e7d7      	b.n	8011454 <_free_r+0x24>
 80114a4:	d902      	bls.n	80114ac <_free_r+0x7c>
 80114a6:	230c      	movs	r3, #12
 80114a8:	602b      	str	r3, [r5, #0]
 80114aa:	e7d3      	b.n	8011454 <_free_r+0x24>
 80114ac:	6820      	ldr	r0, [r4, #0]
 80114ae:	1821      	adds	r1, r4, r0
 80114b0:	428a      	cmp	r2, r1
 80114b2:	bf04      	itt	eq
 80114b4:	6811      	ldreq	r1, [r2, #0]
 80114b6:	6852      	ldreq	r2, [r2, #4]
 80114b8:	6062      	str	r2, [r4, #4]
 80114ba:	bf04      	itt	eq
 80114bc:	1809      	addeq	r1, r1, r0
 80114be:	6021      	streq	r1, [r4, #0]
 80114c0:	605c      	str	r4, [r3, #4]
 80114c2:	e7c7      	b.n	8011454 <_free_r+0x24>
 80114c4:	bd38      	pop	{r3, r4, r5, pc}
 80114c6:	bf00      	nop
 80114c8:	240002b8 	.word	0x240002b8

080114cc <_malloc_r>:
 80114cc:	b570      	push	{r4, r5, r6, lr}
 80114ce:	1ccd      	adds	r5, r1, #3
 80114d0:	f025 0503 	bic.w	r5, r5, #3
 80114d4:	3508      	adds	r5, #8
 80114d6:	2d0c      	cmp	r5, #12
 80114d8:	bf38      	it	cc
 80114da:	250c      	movcc	r5, #12
 80114dc:	2d00      	cmp	r5, #0
 80114de:	4606      	mov	r6, r0
 80114e0:	db01      	blt.n	80114e6 <_malloc_r+0x1a>
 80114e2:	42a9      	cmp	r1, r5
 80114e4:	d903      	bls.n	80114ee <_malloc_r+0x22>
 80114e6:	230c      	movs	r3, #12
 80114e8:	6033      	str	r3, [r6, #0]
 80114ea:	2000      	movs	r0, #0
 80114ec:	bd70      	pop	{r4, r5, r6, pc}
 80114ee:	f000 f891 	bl	8011614 <__malloc_lock>
 80114f2:	4a21      	ldr	r2, [pc, #132]	; (8011578 <_malloc_r+0xac>)
 80114f4:	6814      	ldr	r4, [r2, #0]
 80114f6:	4621      	mov	r1, r4
 80114f8:	b991      	cbnz	r1, 8011520 <_malloc_r+0x54>
 80114fa:	4c20      	ldr	r4, [pc, #128]	; (801157c <_malloc_r+0xb0>)
 80114fc:	6823      	ldr	r3, [r4, #0]
 80114fe:	b91b      	cbnz	r3, 8011508 <_malloc_r+0x3c>
 8011500:	4630      	mov	r0, r6
 8011502:	f000 f83d 	bl	8011580 <_sbrk_r>
 8011506:	6020      	str	r0, [r4, #0]
 8011508:	4629      	mov	r1, r5
 801150a:	4630      	mov	r0, r6
 801150c:	f000 f838 	bl	8011580 <_sbrk_r>
 8011510:	1c43      	adds	r3, r0, #1
 8011512:	d124      	bne.n	801155e <_malloc_r+0x92>
 8011514:	230c      	movs	r3, #12
 8011516:	6033      	str	r3, [r6, #0]
 8011518:	4630      	mov	r0, r6
 801151a:	f000 f87c 	bl	8011616 <__malloc_unlock>
 801151e:	e7e4      	b.n	80114ea <_malloc_r+0x1e>
 8011520:	680b      	ldr	r3, [r1, #0]
 8011522:	1b5b      	subs	r3, r3, r5
 8011524:	d418      	bmi.n	8011558 <_malloc_r+0x8c>
 8011526:	2b0b      	cmp	r3, #11
 8011528:	d90f      	bls.n	801154a <_malloc_r+0x7e>
 801152a:	600b      	str	r3, [r1, #0]
 801152c:	50cd      	str	r5, [r1, r3]
 801152e:	18cc      	adds	r4, r1, r3
 8011530:	4630      	mov	r0, r6
 8011532:	f000 f870 	bl	8011616 <__malloc_unlock>
 8011536:	f104 000b 	add.w	r0, r4, #11
 801153a:	1d23      	adds	r3, r4, #4
 801153c:	f020 0007 	bic.w	r0, r0, #7
 8011540:	1ac3      	subs	r3, r0, r3
 8011542:	d0d3      	beq.n	80114ec <_malloc_r+0x20>
 8011544:	425a      	negs	r2, r3
 8011546:	50e2      	str	r2, [r4, r3]
 8011548:	e7d0      	b.n	80114ec <_malloc_r+0x20>
 801154a:	428c      	cmp	r4, r1
 801154c:	684b      	ldr	r3, [r1, #4]
 801154e:	bf16      	itet	ne
 8011550:	6063      	strne	r3, [r4, #4]
 8011552:	6013      	streq	r3, [r2, #0]
 8011554:	460c      	movne	r4, r1
 8011556:	e7eb      	b.n	8011530 <_malloc_r+0x64>
 8011558:	460c      	mov	r4, r1
 801155a:	6849      	ldr	r1, [r1, #4]
 801155c:	e7cc      	b.n	80114f8 <_malloc_r+0x2c>
 801155e:	1cc4      	adds	r4, r0, #3
 8011560:	f024 0403 	bic.w	r4, r4, #3
 8011564:	42a0      	cmp	r0, r4
 8011566:	d005      	beq.n	8011574 <_malloc_r+0xa8>
 8011568:	1a21      	subs	r1, r4, r0
 801156a:	4630      	mov	r0, r6
 801156c:	f000 f808 	bl	8011580 <_sbrk_r>
 8011570:	3001      	adds	r0, #1
 8011572:	d0cf      	beq.n	8011514 <_malloc_r+0x48>
 8011574:	6025      	str	r5, [r4, #0]
 8011576:	e7db      	b.n	8011530 <_malloc_r+0x64>
 8011578:	240002b8 	.word	0x240002b8
 801157c:	240002bc 	.word	0x240002bc

08011580 <_sbrk_r>:
 8011580:	b538      	push	{r3, r4, r5, lr}
 8011582:	4c06      	ldr	r4, [pc, #24]	; (801159c <_sbrk_r+0x1c>)
 8011584:	2300      	movs	r3, #0
 8011586:	4605      	mov	r5, r0
 8011588:	4608      	mov	r0, r1
 801158a:	6023      	str	r3, [r4, #0]
 801158c:	f7f0 f9ec 	bl	8001968 <_sbrk>
 8011590:	1c43      	adds	r3, r0, #1
 8011592:	d102      	bne.n	801159a <_sbrk_r+0x1a>
 8011594:	6823      	ldr	r3, [r4, #0]
 8011596:	b103      	cbz	r3, 801159a <_sbrk_r+0x1a>
 8011598:	602b      	str	r3, [r5, #0]
 801159a:	bd38      	pop	{r3, r4, r5, pc}
 801159c:	24001f10 	.word	0x24001f10

080115a0 <_vsniprintf_r>:
 80115a0:	b530      	push	{r4, r5, lr}
 80115a2:	1e14      	subs	r4, r2, #0
 80115a4:	4605      	mov	r5, r0
 80115a6:	b09b      	sub	sp, #108	; 0x6c
 80115a8:	4618      	mov	r0, r3
 80115aa:	da05      	bge.n	80115b8 <_vsniprintf_r+0x18>
 80115ac:	238b      	movs	r3, #139	; 0x8b
 80115ae:	602b      	str	r3, [r5, #0]
 80115b0:	f04f 30ff 	mov.w	r0, #4294967295
 80115b4:	b01b      	add	sp, #108	; 0x6c
 80115b6:	bd30      	pop	{r4, r5, pc}
 80115b8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80115bc:	f8ad 300c 	strh.w	r3, [sp, #12]
 80115c0:	bf14      	ite	ne
 80115c2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80115c6:	4623      	moveq	r3, r4
 80115c8:	9302      	str	r3, [sp, #8]
 80115ca:	9305      	str	r3, [sp, #20]
 80115cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80115d0:	9100      	str	r1, [sp, #0]
 80115d2:	9104      	str	r1, [sp, #16]
 80115d4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80115d8:	4602      	mov	r2, r0
 80115da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80115dc:	4669      	mov	r1, sp
 80115de:	4628      	mov	r0, r5
 80115e0:	f000 f874 	bl	80116cc <_svfiprintf_r>
 80115e4:	1c43      	adds	r3, r0, #1
 80115e6:	bfbc      	itt	lt
 80115e8:	238b      	movlt	r3, #139	; 0x8b
 80115ea:	602b      	strlt	r3, [r5, #0]
 80115ec:	2c00      	cmp	r4, #0
 80115ee:	d0e1      	beq.n	80115b4 <_vsniprintf_r+0x14>
 80115f0:	9b00      	ldr	r3, [sp, #0]
 80115f2:	2200      	movs	r2, #0
 80115f4:	701a      	strb	r2, [r3, #0]
 80115f6:	e7dd      	b.n	80115b4 <_vsniprintf_r+0x14>

080115f8 <vsniprintf>:
 80115f8:	b507      	push	{r0, r1, r2, lr}
 80115fa:	9300      	str	r3, [sp, #0]
 80115fc:	4613      	mov	r3, r2
 80115fe:	460a      	mov	r2, r1
 8011600:	4601      	mov	r1, r0
 8011602:	4803      	ldr	r0, [pc, #12]	; (8011610 <vsniprintf+0x18>)
 8011604:	6800      	ldr	r0, [r0, #0]
 8011606:	f7ff ffcb 	bl	80115a0 <_vsniprintf_r>
 801160a:	b003      	add	sp, #12
 801160c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011610:	24000180 	.word	0x24000180

08011614 <__malloc_lock>:
 8011614:	4770      	bx	lr

08011616 <__malloc_unlock>:
 8011616:	4770      	bx	lr

08011618 <__ssputs_r>:
 8011618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801161c:	688e      	ldr	r6, [r1, #8]
 801161e:	429e      	cmp	r6, r3
 8011620:	4682      	mov	sl, r0
 8011622:	460c      	mov	r4, r1
 8011624:	4690      	mov	r8, r2
 8011626:	4699      	mov	r9, r3
 8011628:	d837      	bhi.n	801169a <__ssputs_r+0x82>
 801162a:	898a      	ldrh	r2, [r1, #12]
 801162c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011630:	d031      	beq.n	8011696 <__ssputs_r+0x7e>
 8011632:	6825      	ldr	r5, [r4, #0]
 8011634:	6909      	ldr	r1, [r1, #16]
 8011636:	1a6f      	subs	r7, r5, r1
 8011638:	6965      	ldr	r5, [r4, #20]
 801163a:	2302      	movs	r3, #2
 801163c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011640:	fb95 f5f3 	sdiv	r5, r5, r3
 8011644:	f109 0301 	add.w	r3, r9, #1
 8011648:	443b      	add	r3, r7
 801164a:	429d      	cmp	r5, r3
 801164c:	bf38      	it	cc
 801164e:	461d      	movcc	r5, r3
 8011650:	0553      	lsls	r3, r2, #21
 8011652:	d530      	bpl.n	80116b6 <__ssputs_r+0x9e>
 8011654:	4629      	mov	r1, r5
 8011656:	f7ff ff39 	bl	80114cc <_malloc_r>
 801165a:	4606      	mov	r6, r0
 801165c:	b950      	cbnz	r0, 8011674 <__ssputs_r+0x5c>
 801165e:	230c      	movs	r3, #12
 8011660:	f8ca 3000 	str.w	r3, [sl]
 8011664:	89a3      	ldrh	r3, [r4, #12]
 8011666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801166a:	81a3      	strh	r3, [r4, #12]
 801166c:	f04f 30ff 	mov.w	r0, #4294967295
 8011670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011674:	463a      	mov	r2, r7
 8011676:	6921      	ldr	r1, [r4, #16]
 8011678:	f7ff fec6 	bl	8011408 <memcpy>
 801167c:	89a3      	ldrh	r3, [r4, #12]
 801167e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011686:	81a3      	strh	r3, [r4, #12]
 8011688:	6126      	str	r6, [r4, #16]
 801168a:	6165      	str	r5, [r4, #20]
 801168c:	443e      	add	r6, r7
 801168e:	1bed      	subs	r5, r5, r7
 8011690:	6026      	str	r6, [r4, #0]
 8011692:	60a5      	str	r5, [r4, #8]
 8011694:	464e      	mov	r6, r9
 8011696:	454e      	cmp	r6, r9
 8011698:	d900      	bls.n	801169c <__ssputs_r+0x84>
 801169a:	464e      	mov	r6, r9
 801169c:	4632      	mov	r2, r6
 801169e:	4641      	mov	r1, r8
 80116a0:	6820      	ldr	r0, [r4, #0]
 80116a2:	f000 fa93 	bl	8011bcc <memmove>
 80116a6:	68a3      	ldr	r3, [r4, #8]
 80116a8:	1b9b      	subs	r3, r3, r6
 80116aa:	60a3      	str	r3, [r4, #8]
 80116ac:	6823      	ldr	r3, [r4, #0]
 80116ae:	441e      	add	r6, r3
 80116b0:	6026      	str	r6, [r4, #0]
 80116b2:	2000      	movs	r0, #0
 80116b4:	e7dc      	b.n	8011670 <__ssputs_r+0x58>
 80116b6:	462a      	mov	r2, r5
 80116b8:	f000 faa1 	bl	8011bfe <_realloc_r>
 80116bc:	4606      	mov	r6, r0
 80116be:	2800      	cmp	r0, #0
 80116c0:	d1e2      	bne.n	8011688 <__ssputs_r+0x70>
 80116c2:	6921      	ldr	r1, [r4, #16]
 80116c4:	4650      	mov	r0, sl
 80116c6:	f7ff feb3 	bl	8011430 <_free_r>
 80116ca:	e7c8      	b.n	801165e <__ssputs_r+0x46>

080116cc <_svfiprintf_r>:
 80116cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116d0:	461d      	mov	r5, r3
 80116d2:	898b      	ldrh	r3, [r1, #12]
 80116d4:	061f      	lsls	r7, r3, #24
 80116d6:	b09d      	sub	sp, #116	; 0x74
 80116d8:	4680      	mov	r8, r0
 80116da:	460c      	mov	r4, r1
 80116dc:	4616      	mov	r6, r2
 80116de:	d50f      	bpl.n	8011700 <_svfiprintf_r+0x34>
 80116e0:	690b      	ldr	r3, [r1, #16]
 80116e2:	b96b      	cbnz	r3, 8011700 <_svfiprintf_r+0x34>
 80116e4:	2140      	movs	r1, #64	; 0x40
 80116e6:	f7ff fef1 	bl	80114cc <_malloc_r>
 80116ea:	6020      	str	r0, [r4, #0]
 80116ec:	6120      	str	r0, [r4, #16]
 80116ee:	b928      	cbnz	r0, 80116fc <_svfiprintf_r+0x30>
 80116f0:	230c      	movs	r3, #12
 80116f2:	f8c8 3000 	str.w	r3, [r8]
 80116f6:	f04f 30ff 	mov.w	r0, #4294967295
 80116fa:	e0c8      	b.n	801188e <_svfiprintf_r+0x1c2>
 80116fc:	2340      	movs	r3, #64	; 0x40
 80116fe:	6163      	str	r3, [r4, #20]
 8011700:	2300      	movs	r3, #0
 8011702:	9309      	str	r3, [sp, #36]	; 0x24
 8011704:	2320      	movs	r3, #32
 8011706:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801170a:	2330      	movs	r3, #48	; 0x30
 801170c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011710:	9503      	str	r5, [sp, #12]
 8011712:	f04f 0b01 	mov.w	fp, #1
 8011716:	4637      	mov	r7, r6
 8011718:	463d      	mov	r5, r7
 801171a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801171e:	b10b      	cbz	r3, 8011724 <_svfiprintf_r+0x58>
 8011720:	2b25      	cmp	r3, #37	; 0x25
 8011722:	d13e      	bne.n	80117a2 <_svfiprintf_r+0xd6>
 8011724:	ebb7 0a06 	subs.w	sl, r7, r6
 8011728:	d00b      	beq.n	8011742 <_svfiprintf_r+0x76>
 801172a:	4653      	mov	r3, sl
 801172c:	4632      	mov	r2, r6
 801172e:	4621      	mov	r1, r4
 8011730:	4640      	mov	r0, r8
 8011732:	f7ff ff71 	bl	8011618 <__ssputs_r>
 8011736:	3001      	adds	r0, #1
 8011738:	f000 80a4 	beq.w	8011884 <_svfiprintf_r+0x1b8>
 801173c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801173e:	4453      	add	r3, sl
 8011740:	9309      	str	r3, [sp, #36]	; 0x24
 8011742:	783b      	ldrb	r3, [r7, #0]
 8011744:	2b00      	cmp	r3, #0
 8011746:	f000 809d 	beq.w	8011884 <_svfiprintf_r+0x1b8>
 801174a:	2300      	movs	r3, #0
 801174c:	f04f 32ff 	mov.w	r2, #4294967295
 8011750:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011754:	9304      	str	r3, [sp, #16]
 8011756:	9307      	str	r3, [sp, #28]
 8011758:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801175c:	931a      	str	r3, [sp, #104]	; 0x68
 801175e:	462f      	mov	r7, r5
 8011760:	2205      	movs	r2, #5
 8011762:	f817 1b01 	ldrb.w	r1, [r7], #1
 8011766:	4850      	ldr	r0, [pc, #320]	; (80118a8 <_svfiprintf_r+0x1dc>)
 8011768:	f7ee fdba 	bl	80002e0 <memchr>
 801176c:	9b04      	ldr	r3, [sp, #16]
 801176e:	b9d0      	cbnz	r0, 80117a6 <_svfiprintf_r+0xda>
 8011770:	06d9      	lsls	r1, r3, #27
 8011772:	bf44      	itt	mi
 8011774:	2220      	movmi	r2, #32
 8011776:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801177a:	071a      	lsls	r2, r3, #28
 801177c:	bf44      	itt	mi
 801177e:	222b      	movmi	r2, #43	; 0x2b
 8011780:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011784:	782a      	ldrb	r2, [r5, #0]
 8011786:	2a2a      	cmp	r2, #42	; 0x2a
 8011788:	d015      	beq.n	80117b6 <_svfiprintf_r+0xea>
 801178a:	9a07      	ldr	r2, [sp, #28]
 801178c:	462f      	mov	r7, r5
 801178e:	2000      	movs	r0, #0
 8011790:	250a      	movs	r5, #10
 8011792:	4639      	mov	r1, r7
 8011794:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011798:	3b30      	subs	r3, #48	; 0x30
 801179a:	2b09      	cmp	r3, #9
 801179c:	d94d      	bls.n	801183a <_svfiprintf_r+0x16e>
 801179e:	b1b8      	cbz	r0, 80117d0 <_svfiprintf_r+0x104>
 80117a0:	e00f      	b.n	80117c2 <_svfiprintf_r+0xf6>
 80117a2:	462f      	mov	r7, r5
 80117a4:	e7b8      	b.n	8011718 <_svfiprintf_r+0x4c>
 80117a6:	4a40      	ldr	r2, [pc, #256]	; (80118a8 <_svfiprintf_r+0x1dc>)
 80117a8:	1a80      	subs	r0, r0, r2
 80117aa:	fa0b f000 	lsl.w	r0, fp, r0
 80117ae:	4318      	orrs	r0, r3
 80117b0:	9004      	str	r0, [sp, #16]
 80117b2:	463d      	mov	r5, r7
 80117b4:	e7d3      	b.n	801175e <_svfiprintf_r+0x92>
 80117b6:	9a03      	ldr	r2, [sp, #12]
 80117b8:	1d11      	adds	r1, r2, #4
 80117ba:	6812      	ldr	r2, [r2, #0]
 80117bc:	9103      	str	r1, [sp, #12]
 80117be:	2a00      	cmp	r2, #0
 80117c0:	db01      	blt.n	80117c6 <_svfiprintf_r+0xfa>
 80117c2:	9207      	str	r2, [sp, #28]
 80117c4:	e004      	b.n	80117d0 <_svfiprintf_r+0x104>
 80117c6:	4252      	negs	r2, r2
 80117c8:	f043 0302 	orr.w	r3, r3, #2
 80117cc:	9207      	str	r2, [sp, #28]
 80117ce:	9304      	str	r3, [sp, #16]
 80117d0:	783b      	ldrb	r3, [r7, #0]
 80117d2:	2b2e      	cmp	r3, #46	; 0x2e
 80117d4:	d10c      	bne.n	80117f0 <_svfiprintf_r+0x124>
 80117d6:	787b      	ldrb	r3, [r7, #1]
 80117d8:	2b2a      	cmp	r3, #42	; 0x2a
 80117da:	d133      	bne.n	8011844 <_svfiprintf_r+0x178>
 80117dc:	9b03      	ldr	r3, [sp, #12]
 80117de:	1d1a      	adds	r2, r3, #4
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	9203      	str	r2, [sp, #12]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	bfb8      	it	lt
 80117e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80117ec:	3702      	adds	r7, #2
 80117ee:	9305      	str	r3, [sp, #20]
 80117f0:	4d2e      	ldr	r5, [pc, #184]	; (80118ac <_svfiprintf_r+0x1e0>)
 80117f2:	7839      	ldrb	r1, [r7, #0]
 80117f4:	2203      	movs	r2, #3
 80117f6:	4628      	mov	r0, r5
 80117f8:	f7ee fd72 	bl	80002e0 <memchr>
 80117fc:	b138      	cbz	r0, 801180e <_svfiprintf_r+0x142>
 80117fe:	2340      	movs	r3, #64	; 0x40
 8011800:	1b40      	subs	r0, r0, r5
 8011802:	fa03 f000 	lsl.w	r0, r3, r0
 8011806:	9b04      	ldr	r3, [sp, #16]
 8011808:	4303      	orrs	r3, r0
 801180a:	3701      	adds	r7, #1
 801180c:	9304      	str	r3, [sp, #16]
 801180e:	7839      	ldrb	r1, [r7, #0]
 8011810:	4827      	ldr	r0, [pc, #156]	; (80118b0 <_svfiprintf_r+0x1e4>)
 8011812:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011816:	2206      	movs	r2, #6
 8011818:	1c7e      	adds	r6, r7, #1
 801181a:	f7ee fd61 	bl	80002e0 <memchr>
 801181e:	2800      	cmp	r0, #0
 8011820:	d038      	beq.n	8011894 <_svfiprintf_r+0x1c8>
 8011822:	4b24      	ldr	r3, [pc, #144]	; (80118b4 <_svfiprintf_r+0x1e8>)
 8011824:	bb13      	cbnz	r3, 801186c <_svfiprintf_r+0x1a0>
 8011826:	9b03      	ldr	r3, [sp, #12]
 8011828:	3307      	adds	r3, #7
 801182a:	f023 0307 	bic.w	r3, r3, #7
 801182e:	3308      	adds	r3, #8
 8011830:	9303      	str	r3, [sp, #12]
 8011832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011834:	444b      	add	r3, r9
 8011836:	9309      	str	r3, [sp, #36]	; 0x24
 8011838:	e76d      	b.n	8011716 <_svfiprintf_r+0x4a>
 801183a:	fb05 3202 	mla	r2, r5, r2, r3
 801183e:	2001      	movs	r0, #1
 8011840:	460f      	mov	r7, r1
 8011842:	e7a6      	b.n	8011792 <_svfiprintf_r+0xc6>
 8011844:	2300      	movs	r3, #0
 8011846:	3701      	adds	r7, #1
 8011848:	9305      	str	r3, [sp, #20]
 801184a:	4619      	mov	r1, r3
 801184c:	250a      	movs	r5, #10
 801184e:	4638      	mov	r0, r7
 8011850:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011854:	3a30      	subs	r2, #48	; 0x30
 8011856:	2a09      	cmp	r2, #9
 8011858:	d903      	bls.n	8011862 <_svfiprintf_r+0x196>
 801185a:	2b00      	cmp	r3, #0
 801185c:	d0c8      	beq.n	80117f0 <_svfiprintf_r+0x124>
 801185e:	9105      	str	r1, [sp, #20]
 8011860:	e7c6      	b.n	80117f0 <_svfiprintf_r+0x124>
 8011862:	fb05 2101 	mla	r1, r5, r1, r2
 8011866:	2301      	movs	r3, #1
 8011868:	4607      	mov	r7, r0
 801186a:	e7f0      	b.n	801184e <_svfiprintf_r+0x182>
 801186c:	ab03      	add	r3, sp, #12
 801186e:	9300      	str	r3, [sp, #0]
 8011870:	4622      	mov	r2, r4
 8011872:	4b11      	ldr	r3, [pc, #68]	; (80118b8 <_svfiprintf_r+0x1ec>)
 8011874:	a904      	add	r1, sp, #16
 8011876:	4640      	mov	r0, r8
 8011878:	f3af 8000 	nop.w
 801187c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011880:	4681      	mov	r9, r0
 8011882:	d1d6      	bne.n	8011832 <_svfiprintf_r+0x166>
 8011884:	89a3      	ldrh	r3, [r4, #12]
 8011886:	065b      	lsls	r3, r3, #25
 8011888:	f53f af35 	bmi.w	80116f6 <_svfiprintf_r+0x2a>
 801188c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801188e:	b01d      	add	sp, #116	; 0x74
 8011890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011894:	ab03      	add	r3, sp, #12
 8011896:	9300      	str	r3, [sp, #0]
 8011898:	4622      	mov	r2, r4
 801189a:	4b07      	ldr	r3, [pc, #28]	; (80118b8 <_svfiprintf_r+0x1ec>)
 801189c:	a904      	add	r1, sp, #16
 801189e:	4640      	mov	r0, r8
 80118a0:	f000 f882 	bl	80119a8 <_printf_i>
 80118a4:	e7ea      	b.n	801187c <_svfiprintf_r+0x1b0>
 80118a6:	bf00      	nop
 80118a8:	08011d1c 	.word	0x08011d1c
 80118ac:	08011d22 	.word	0x08011d22
 80118b0:	08011d26 	.word	0x08011d26
 80118b4:	00000000 	.word	0x00000000
 80118b8:	08011619 	.word	0x08011619

080118bc <_printf_common>:
 80118bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118c0:	4691      	mov	r9, r2
 80118c2:	461f      	mov	r7, r3
 80118c4:	688a      	ldr	r2, [r1, #8]
 80118c6:	690b      	ldr	r3, [r1, #16]
 80118c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80118cc:	4293      	cmp	r3, r2
 80118ce:	bfb8      	it	lt
 80118d0:	4613      	movlt	r3, r2
 80118d2:	f8c9 3000 	str.w	r3, [r9]
 80118d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80118da:	4606      	mov	r6, r0
 80118dc:	460c      	mov	r4, r1
 80118de:	b112      	cbz	r2, 80118e6 <_printf_common+0x2a>
 80118e0:	3301      	adds	r3, #1
 80118e2:	f8c9 3000 	str.w	r3, [r9]
 80118e6:	6823      	ldr	r3, [r4, #0]
 80118e8:	0699      	lsls	r1, r3, #26
 80118ea:	bf42      	ittt	mi
 80118ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 80118f0:	3302      	addmi	r3, #2
 80118f2:	f8c9 3000 	strmi.w	r3, [r9]
 80118f6:	6825      	ldr	r5, [r4, #0]
 80118f8:	f015 0506 	ands.w	r5, r5, #6
 80118fc:	d107      	bne.n	801190e <_printf_common+0x52>
 80118fe:	f104 0a19 	add.w	sl, r4, #25
 8011902:	68e3      	ldr	r3, [r4, #12]
 8011904:	f8d9 2000 	ldr.w	r2, [r9]
 8011908:	1a9b      	subs	r3, r3, r2
 801190a:	42ab      	cmp	r3, r5
 801190c:	dc28      	bgt.n	8011960 <_printf_common+0xa4>
 801190e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011912:	6822      	ldr	r2, [r4, #0]
 8011914:	3300      	adds	r3, #0
 8011916:	bf18      	it	ne
 8011918:	2301      	movne	r3, #1
 801191a:	0692      	lsls	r2, r2, #26
 801191c:	d42d      	bmi.n	801197a <_printf_common+0xbe>
 801191e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011922:	4639      	mov	r1, r7
 8011924:	4630      	mov	r0, r6
 8011926:	47c0      	blx	r8
 8011928:	3001      	adds	r0, #1
 801192a:	d020      	beq.n	801196e <_printf_common+0xb2>
 801192c:	6823      	ldr	r3, [r4, #0]
 801192e:	68e5      	ldr	r5, [r4, #12]
 8011930:	f8d9 2000 	ldr.w	r2, [r9]
 8011934:	f003 0306 	and.w	r3, r3, #6
 8011938:	2b04      	cmp	r3, #4
 801193a:	bf08      	it	eq
 801193c:	1aad      	subeq	r5, r5, r2
 801193e:	68a3      	ldr	r3, [r4, #8]
 8011940:	6922      	ldr	r2, [r4, #16]
 8011942:	bf0c      	ite	eq
 8011944:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011948:	2500      	movne	r5, #0
 801194a:	4293      	cmp	r3, r2
 801194c:	bfc4      	itt	gt
 801194e:	1a9b      	subgt	r3, r3, r2
 8011950:	18ed      	addgt	r5, r5, r3
 8011952:	f04f 0900 	mov.w	r9, #0
 8011956:	341a      	adds	r4, #26
 8011958:	454d      	cmp	r5, r9
 801195a:	d11a      	bne.n	8011992 <_printf_common+0xd6>
 801195c:	2000      	movs	r0, #0
 801195e:	e008      	b.n	8011972 <_printf_common+0xb6>
 8011960:	2301      	movs	r3, #1
 8011962:	4652      	mov	r2, sl
 8011964:	4639      	mov	r1, r7
 8011966:	4630      	mov	r0, r6
 8011968:	47c0      	blx	r8
 801196a:	3001      	adds	r0, #1
 801196c:	d103      	bne.n	8011976 <_printf_common+0xba>
 801196e:	f04f 30ff 	mov.w	r0, #4294967295
 8011972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011976:	3501      	adds	r5, #1
 8011978:	e7c3      	b.n	8011902 <_printf_common+0x46>
 801197a:	18e1      	adds	r1, r4, r3
 801197c:	1c5a      	adds	r2, r3, #1
 801197e:	2030      	movs	r0, #48	; 0x30
 8011980:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011984:	4422      	add	r2, r4
 8011986:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801198a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801198e:	3302      	adds	r3, #2
 8011990:	e7c5      	b.n	801191e <_printf_common+0x62>
 8011992:	2301      	movs	r3, #1
 8011994:	4622      	mov	r2, r4
 8011996:	4639      	mov	r1, r7
 8011998:	4630      	mov	r0, r6
 801199a:	47c0      	blx	r8
 801199c:	3001      	adds	r0, #1
 801199e:	d0e6      	beq.n	801196e <_printf_common+0xb2>
 80119a0:	f109 0901 	add.w	r9, r9, #1
 80119a4:	e7d8      	b.n	8011958 <_printf_common+0x9c>
	...

080119a8 <_printf_i>:
 80119a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80119ac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80119b0:	460c      	mov	r4, r1
 80119b2:	7e09      	ldrb	r1, [r1, #24]
 80119b4:	b085      	sub	sp, #20
 80119b6:	296e      	cmp	r1, #110	; 0x6e
 80119b8:	4617      	mov	r7, r2
 80119ba:	4606      	mov	r6, r0
 80119bc:	4698      	mov	r8, r3
 80119be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80119c0:	f000 80b3 	beq.w	8011b2a <_printf_i+0x182>
 80119c4:	d822      	bhi.n	8011a0c <_printf_i+0x64>
 80119c6:	2963      	cmp	r1, #99	; 0x63
 80119c8:	d036      	beq.n	8011a38 <_printf_i+0x90>
 80119ca:	d80a      	bhi.n	80119e2 <_printf_i+0x3a>
 80119cc:	2900      	cmp	r1, #0
 80119ce:	f000 80b9 	beq.w	8011b44 <_printf_i+0x19c>
 80119d2:	2958      	cmp	r1, #88	; 0x58
 80119d4:	f000 8083 	beq.w	8011ade <_printf_i+0x136>
 80119d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80119dc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80119e0:	e032      	b.n	8011a48 <_printf_i+0xa0>
 80119e2:	2964      	cmp	r1, #100	; 0x64
 80119e4:	d001      	beq.n	80119ea <_printf_i+0x42>
 80119e6:	2969      	cmp	r1, #105	; 0x69
 80119e8:	d1f6      	bne.n	80119d8 <_printf_i+0x30>
 80119ea:	6820      	ldr	r0, [r4, #0]
 80119ec:	6813      	ldr	r3, [r2, #0]
 80119ee:	0605      	lsls	r5, r0, #24
 80119f0:	f103 0104 	add.w	r1, r3, #4
 80119f4:	d52a      	bpl.n	8011a4c <_printf_i+0xa4>
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	6011      	str	r1, [r2, #0]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	da03      	bge.n	8011a06 <_printf_i+0x5e>
 80119fe:	222d      	movs	r2, #45	; 0x2d
 8011a00:	425b      	negs	r3, r3
 8011a02:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011a06:	486f      	ldr	r0, [pc, #444]	; (8011bc4 <_printf_i+0x21c>)
 8011a08:	220a      	movs	r2, #10
 8011a0a:	e039      	b.n	8011a80 <_printf_i+0xd8>
 8011a0c:	2973      	cmp	r1, #115	; 0x73
 8011a0e:	f000 809d 	beq.w	8011b4c <_printf_i+0x1a4>
 8011a12:	d808      	bhi.n	8011a26 <_printf_i+0x7e>
 8011a14:	296f      	cmp	r1, #111	; 0x6f
 8011a16:	d020      	beq.n	8011a5a <_printf_i+0xb2>
 8011a18:	2970      	cmp	r1, #112	; 0x70
 8011a1a:	d1dd      	bne.n	80119d8 <_printf_i+0x30>
 8011a1c:	6823      	ldr	r3, [r4, #0]
 8011a1e:	f043 0320 	orr.w	r3, r3, #32
 8011a22:	6023      	str	r3, [r4, #0]
 8011a24:	e003      	b.n	8011a2e <_printf_i+0x86>
 8011a26:	2975      	cmp	r1, #117	; 0x75
 8011a28:	d017      	beq.n	8011a5a <_printf_i+0xb2>
 8011a2a:	2978      	cmp	r1, #120	; 0x78
 8011a2c:	d1d4      	bne.n	80119d8 <_printf_i+0x30>
 8011a2e:	2378      	movs	r3, #120	; 0x78
 8011a30:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011a34:	4864      	ldr	r0, [pc, #400]	; (8011bc8 <_printf_i+0x220>)
 8011a36:	e055      	b.n	8011ae4 <_printf_i+0x13c>
 8011a38:	6813      	ldr	r3, [r2, #0]
 8011a3a:	1d19      	adds	r1, r3, #4
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	6011      	str	r1, [r2, #0]
 8011a40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011a44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011a48:	2301      	movs	r3, #1
 8011a4a:	e08c      	b.n	8011b66 <_printf_i+0x1be>
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	6011      	str	r1, [r2, #0]
 8011a50:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011a54:	bf18      	it	ne
 8011a56:	b21b      	sxthne	r3, r3
 8011a58:	e7cf      	b.n	80119fa <_printf_i+0x52>
 8011a5a:	6813      	ldr	r3, [r2, #0]
 8011a5c:	6825      	ldr	r5, [r4, #0]
 8011a5e:	1d18      	adds	r0, r3, #4
 8011a60:	6010      	str	r0, [r2, #0]
 8011a62:	0628      	lsls	r0, r5, #24
 8011a64:	d501      	bpl.n	8011a6a <_printf_i+0xc2>
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	e002      	b.n	8011a70 <_printf_i+0xc8>
 8011a6a:	0668      	lsls	r0, r5, #25
 8011a6c:	d5fb      	bpl.n	8011a66 <_printf_i+0xbe>
 8011a6e:	881b      	ldrh	r3, [r3, #0]
 8011a70:	4854      	ldr	r0, [pc, #336]	; (8011bc4 <_printf_i+0x21c>)
 8011a72:	296f      	cmp	r1, #111	; 0x6f
 8011a74:	bf14      	ite	ne
 8011a76:	220a      	movne	r2, #10
 8011a78:	2208      	moveq	r2, #8
 8011a7a:	2100      	movs	r1, #0
 8011a7c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011a80:	6865      	ldr	r5, [r4, #4]
 8011a82:	60a5      	str	r5, [r4, #8]
 8011a84:	2d00      	cmp	r5, #0
 8011a86:	f2c0 8095 	blt.w	8011bb4 <_printf_i+0x20c>
 8011a8a:	6821      	ldr	r1, [r4, #0]
 8011a8c:	f021 0104 	bic.w	r1, r1, #4
 8011a90:	6021      	str	r1, [r4, #0]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d13d      	bne.n	8011b12 <_printf_i+0x16a>
 8011a96:	2d00      	cmp	r5, #0
 8011a98:	f040 808e 	bne.w	8011bb8 <_printf_i+0x210>
 8011a9c:	4665      	mov	r5, ip
 8011a9e:	2a08      	cmp	r2, #8
 8011aa0:	d10b      	bne.n	8011aba <_printf_i+0x112>
 8011aa2:	6823      	ldr	r3, [r4, #0]
 8011aa4:	07db      	lsls	r3, r3, #31
 8011aa6:	d508      	bpl.n	8011aba <_printf_i+0x112>
 8011aa8:	6923      	ldr	r3, [r4, #16]
 8011aaa:	6862      	ldr	r2, [r4, #4]
 8011aac:	429a      	cmp	r2, r3
 8011aae:	bfde      	ittt	le
 8011ab0:	2330      	movle	r3, #48	; 0x30
 8011ab2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011ab6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011aba:	ebac 0305 	sub.w	r3, ip, r5
 8011abe:	6123      	str	r3, [r4, #16]
 8011ac0:	f8cd 8000 	str.w	r8, [sp]
 8011ac4:	463b      	mov	r3, r7
 8011ac6:	aa03      	add	r2, sp, #12
 8011ac8:	4621      	mov	r1, r4
 8011aca:	4630      	mov	r0, r6
 8011acc:	f7ff fef6 	bl	80118bc <_printf_common>
 8011ad0:	3001      	adds	r0, #1
 8011ad2:	d14d      	bne.n	8011b70 <_printf_i+0x1c8>
 8011ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8011ad8:	b005      	add	sp, #20
 8011ada:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ade:	4839      	ldr	r0, [pc, #228]	; (8011bc4 <_printf_i+0x21c>)
 8011ae0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8011ae4:	6813      	ldr	r3, [r2, #0]
 8011ae6:	6821      	ldr	r1, [r4, #0]
 8011ae8:	1d1d      	adds	r5, r3, #4
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	6015      	str	r5, [r2, #0]
 8011aee:	060a      	lsls	r2, r1, #24
 8011af0:	d50b      	bpl.n	8011b0a <_printf_i+0x162>
 8011af2:	07ca      	lsls	r2, r1, #31
 8011af4:	bf44      	itt	mi
 8011af6:	f041 0120 	orrmi.w	r1, r1, #32
 8011afa:	6021      	strmi	r1, [r4, #0]
 8011afc:	b91b      	cbnz	r3, 8011b06 <_printf_i+0x15e>
 8011afe:	6822      	ldr	r2, [r4, #0]
 8011b00:	f022 0220 	bic.w	r2, r2, #32
 8011b04:	6022      	str	r2, [r4, #0]
 8011b06:	2210      	movs	r2, #16
 8011b08:	e7b7      	b.n	8011a7a <_printf_i+0xd2>
 8011b0a:	064d      	lsls	r5, r1, #25
 8011b0c:	bf48      	it	mi
 8011b0e:	b29b      	uxthmi	r3, r3
 8011b10:	e7ef      	b.n	8011af2 <_printf_i+0x14a>
 8011b12:	4665      	mov	r5, ip
 8011b14:	fbb3 f1f2 	udiv	r1, r3, r2
 8011b18:	fb02 3311 	mls	r3, r2, r1, r3
 8011b1c:	5cc3      	ldrb	r3, [r0, r3]
 8011b1e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8011b22:	460b      	mov	r3, r1
 8011b24:	2900      	cmp	r1, #0
 8011b26:	d1f5      	bne.n	8011b14 <_printf_i+0x16c>
 8011b28:	e7b9      	b.n	8011a9e <_printf_i+0xf6>
 8011b2a:	6813      	ldr	r3, [r2, #0]
 8011b2c:	6825      	ldr	r5, [r4, #0]
 8011b2e:	6961      	ldr	r1, [r4, #20]
 8011b30:	1d18      	adds	r0, r3, #4
 8011b32:	6010      	str	r0, [r2, #0]
 8011b34:	0628      	lsls	r0, r5, #24
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	d501      	bpl.n	8011b3e <_printf_i+0x196>
 8011b3a:	6019      	str	r1, [r3, #0]
 8011b3c:	e002      	b.n	8011b44 <_printf_i+0x19c>
 8011b3e:	066a      	lsls	r2, r5, #25
 8011b40:	d5fb      	bpl.n	8011b3a <_printf_i+0x192>
 8011b42:	8019      	strh	r1, [r3, #0]
 8011b44:	2300      	movs	r3, #0
 8011b46:	6123      	str	r3, [r4, #16]
 8011b48:	4665      	mov	r5, ip
 8011b4a:	e7b9      	b.n	8011ac0 <_printf_i+0x118>
 8011b4c:	6813      	ldr	r3, [r2, #0]
 8011b4e:	1d19      	adds	r1, r3, #4
 8011b50:	6011      	str	r1, [r2, #0]
 8011b52:	681d      	ldr	r5, [r3, #0]
 8011b54:	6862      	ldr	r2, [r4, #4]
 8011b56:	2100      	movs	r1, #0
 8011b58:	4628      	mov	r0, r5
 8011b5a:	f7ee fbc1 	bl	80002e0 <memchr>
 8011b5e:	b108      	cbz	r0, 8011b64 <_printf_i+0x1bc>
 8011b60:	1b40      	subs	r0, r0, r5
 8011b62:	6060      	str	r0, [r4, #4]
 8011b64:	6863      	ldr	r3, [r4, #4]
 8011b66:	6123      	str	r3, [r4, #16]
 8011b68:	2300      	movs	r3, #0
 8011b6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011b6e:	e7a7      	b.n	8011ac0 <_printf_i+0x118>
 8011b70:	6923      	ldr	r3, [r4, #16]
 8011b72:	462a      	mov	r2, r5
 8011b74:	4639      	mov	r1, r7
 8011b76:	4630      	mov	r0, r6
 8011b78:	47c0      	blx	r8
 8011b7a:	3001      	adds	r0, #1
 8011b7c:	d0aa      	beq.n	8011ad4 <_printf_i+0x12c>
 8011b7e:	6823      	ldr	r3, [r4, #0]
 8011b80:	079b      	lsls	r3, r3, #30
 8011b82:	d413      	bmi.n	8011bac <_printf_i+0x204>
 8011b84:	68e0      	ldr	r0, [r4, #12]
 8011b86:	9b03      	ldr	r3, [sp, #12]
 8011b88:	4298      	cmp	r0, r3
 8011b8a:	bfb8      	it	lt
 8011b8c:	4618      	movlt	r0, r3
 8011b8e:	e7a3      	b.n	8011ad8 <_printf_i+0x130>
 8011b90:	2301      	movs	r3, #1
 8011b92:	464a      	mov	r2, r9
 8011b94:	4639      	mov	r1, r7
 8011b96:	4630      	mov	r0, r6
 8011b98:	47c0      	blx	r8
 8011b9a:	3001      	adds	r0, #1
 8011b9c:	d09a      	beq.n	8011ad4 <_printf_i+0x12c>
 8011b9e:	3501      	adds	r5, #1
 8011ba0:	68e3      	ldr	r3, [r4, #12]
 8011ba2:	9a03      	ldr	r2, [sp, #12]
 8011ba4:	1a9b      	subs	r3, r3, r2
 8011ba6:	42ab      	cmp	r3, r5
 8011ba8:	dcf2      	bgt.n	8011b90 <_printf_i+0x1e8>
 8011baa:	e7eb      	b.n	8011b84 <_printf_i+0x1dc>
 8011bac:	2500      	movs	r5, #0
 8011bae:	f104 0919 	add.w	r9, r4, #25
 8011bb2:	e7f5      	b.n	8011ba0 <_printf_i+0x1f8>
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d1ac      	bne.n	8011b12 <_printf_i+0x16a>
 8011bb8:	7803      	ldrb	r3, [r0, #0]
 8011bba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011bbe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011bc2:	e76c      	b.n	8011a9e <_printf_i+0xf6>
 8011bc4:	08011d2d 	.word	0x08011d2d
 8011bc8:	08011d3e 	.word	0x08011d3e

08011bcc <memmove>:
 8011bcc:	4288      	cmp	r0, r1
 8011bce:	b510      	push	{r4, lr}
 8011bd0:	eb01 0302 	add.w	r3, r1, r2
 8011bd4:	d807      	bhi.n	8011be6 <memmove+0x1a>
 8011bd6:	1e42      	subs	r2, r0, #1
 8011bd8:	4299      	cmp	r1, r3
 8011bda:	d00a      	beq.n	8011bf2 <memmove+0x26>
 8011bdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011be0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8011be4:	e7f8      	b.n	8011bd8 <memmove+0xc>
 8011be6:	4283      	cmp	r3, r0
 8011be8:	d9f5      	bls.n	8011bd6 <memmove+0xa>
 8011bea:	1881      	adds	r1, r0, r2
 8011bec:	1ad2      	subs	r2, r2, r3
 8011bee:	42d3      	cmn	r3, r2
 8011bf0:	d100      	bne.n	8011bf4 <memmove+0x28>
 8011bf2:	bd10      	pop	{r4, pc}
 8011bf4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011bf8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8011bfc:	e7f7      	b.n	8011bee <memmove+0x22>

08011bfe <_realloc_r>:
 8011bfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c00:	4607      	mov	r7, r0
 8011c02:	4614      	mov	r4, r2
 8011c04:	460e      	mov	r6, r1
 8011c06:	b921      	cbnz	r1, 8011c12 <_realloc_r+0x14>
 8011c08:	4611      	mov	r1, r2
 8011c0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011c0e:	f7ff bc5d 	b.w	80114cc <_malloc_r>
 8011c12:	b922      	cbnz	r2, 8011c1e <_realloc_r+0x20>
 8011c14:	f7ff fc0c 	bl	8011430 <_free_r>
 8011c18:	4625      	mov	r5, r4
 8011c1a:	4628      	mov	r0, r5
 8011c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c1e:	f000 f814 	bl	8011c4a <_malloc_usable_size_r>
 8011c22:	42a0      	cmp	r0, r4
 8011c24:	d20f      	bcs.n	8011c46 <_realloc_r+0x48>
 8011c26:	4621      	mov	r1, r4
 8011c28:	4638      	mov	r0, r7
 8011c2a:	f7ff fc4f 	bl	80114cc <_malloc_r>
 8011c2e:	4605      	mov	r5, r0
 8011c30:	2800      	cmp	r0, #0
 8011c32:	d0f2      	beq.n	8011c1a <_realloc_r+0x1c>
 8011c34:	4631      	mov	r1, r6
 8011c36:	4622      	mov	r2, r4
 8011c38:	f7ff fbe6 	bl	8011408 <memcpy>
 8011c3c:	4631      	mov	r1, r6
 8011c3e:	4638      	mov	r0, r7
 8011c40:	f7ff fbf6 	bl	8011430 <_free_r>
 8011c44:	e7e9      	b.n	8011c1a <_realloc_r+0x1c>
 8011c46:	4635      	mov	r5, r6
 8011c48:	e7e7      	b.n	8011c1a <_realloc_r+0x1c>

08011c4a <_malloc_usable_size_r>:
 8011c4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011c4e:	1f18      	subs	r0, r3, #4
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	bfbc      	itt	lt
 8011c54:	580b      	ldrlt	r3, [r1, r0]
 8011c56:	18c0      	addlt	r0, r0, r3
 8011c58:	4770      	bx	lr
	...

08011c5c <_init>:
 8011c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c5e:	bf00      	nop
 8011c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c62:	bc08      	pop	{r3}
 8011c64:	469e      	mov	lr, r3
 8011c66:	4770      	bx	lr

08011c68 <_fini>:
 8011c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c6a:	bf00      	nop
 8011c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c6e:	bc08      	pop	{r3}
 8011c70:	469e      	mov	lr, r3
 8011c72:	4770      	bx	lr
