
H750VBT6-flight-board-v0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe24  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080100bc  080100bc  000200bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801012c  0801012c  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  0801012c  0801012c  0002012c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010134  08010134  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010134  08010134  00020134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010138  08010138  00020138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  24000000  0801013c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c84  240001e4  08010320  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24001e68  08010320  00031e68  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038c39  00000000  00000000  00030212  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005913  00000000  00000000  00068e4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002160  00000000  00000000  0006e760  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f38  00000000  00000000  000708c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003f207  00000000  00000000  000727f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00020eed  00000000  00000000  000b19ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00185704  00000000  00000000  000d28ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00257ff0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000090c0  00000000  00000000  0025806c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240001e4 	.word	0x240001e4
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080100a4 	.word	0x080100a4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240001e8 	.word	0x240001e8
 80002d4:	080100a4 	.word	0x080100a4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f001 fb56 	bl	8001c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f820 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 fdd8 	bl	8001198 <MX_GPIO_Init>
  MX_DMA_Init();
 80005e8:	f000 fdb6 	bl	8001158 <MX_DMA_Init>
  MX_ADC1_Init();
 80005ec:	f000 f92a 	bl	8000844 <MX_ADC1_Init>
  MX_ADC2_Init();
 80005f0:	f000 f99e 	bl	8000930 <MX_ADC2_Init>
  MX_ADC3_Init();
 80005f4:	f000 fa00 	bl	80009f8 <MX_ADC3_Init>
  MX_I2C1_Init();
 80005f8:	f000 fa62 	bl	8000ac0 <MX_I2C1_Init>
  MX_RTC_Init();
 80005fc:	f000 faa0 	bl	8000b40 <MX_RTC_Init>
  MX_SPI1_Init();
 8000600:	f000 fac6 	bl	8000b90 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000604:	f000 fb1a 	bl	8000c3c <MX_SPI3_Init>
  MX_SPI4_Init();
 8000608:	f000 fb6e 	bl	8000ce8 <MX_SPI4_Init>
  MX_SPI6_Init();
 800060c:	f000 fbc2 	bl	8000d94 <MX_SPI6_Init>
  MX_TIM1_Init();
 8000610:	f000 fc16 	bl	8000e40 <MX_TIM1_Init>
  MX_TIM8_Init();
 8000614:	f000 fca2 	bl	8000f5c <MX_TIM8_Init>
  MX_UART5_Init();
 8000618:	f000 fd52 	bl	80010c0 <MX_UART5_Init>
  MX_USB_DEVICE_Init();
 800061c:	f00e ff68 	bl	800f4f0 <MX_USB_DEVICE_Init>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000620:	e7fe      	b.n	8000620 <main+0x48>
	...

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b0cc      	sub	sp, #304	; 0x130
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800062e:	224c      	movs	r2, #76	; 0x4c
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f00f fc74 	bl	800ff20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800063c:	2220      	movs	r2, #32
 800063e:	2100      	movs	r1, #0
 8000640:	4618      	mov	r0, r3
 8000642:	f00f fc6d 	bl	800ff20 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000646:	f107 0308 	add.w	r3, r7, #8
 800064a:	4618      	mov	r0, r3
 800064c:	23bc      	movs	r3, #188	; 0xbc
 800064e:	461a      	mov	r2, r3
 8000650:	2100      	movs	r1, #0
 8000652:	f00f fc65 	bl	800ff20 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000656:	2002      	movs	r0, #2
 8000658:	f005 fe8e 	bl	8006378 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	4b74      	ldr	r3, [pc, #464]	; (8000834 <SystemClock_Config+0x210>)
 8000664:	699b      	ldr	r3, [r3, #24]
 8000666:	4a73      	ldr	r2, [pc, #460]	; (8000834 <SystemClock_Config+0x210>)
 8000668:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800066c:	6193      	str	r3, [r2, #24]
 800066e:	4b71      	ldr	r3, [pc, #452]	; (8000834 <SystemClock_Config+0x210>)
 8000670:	699b      	ldr	r3, [r3, #24]
 8000672:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	4b6f      	ldr	r3, [pc, #444]	; (8000838 <SystemClock_Config+0x214>)
 800067c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800067e:	4a6e      	ldr	r2, [pc, #440]	; (8000838 <SystemClock_Config+0x214>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000686:	4b6c      	ldr	r3, [pc, #432]	; (8000838 <SystemClock_Config+0x214>)
 8000688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800068a:	f003 0201 	and.w	r2, r3, #1
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000696:	bf00      	nop
 8000698:	4b66      	ldr	r3, [pc, #408]	; (8000834 <SystemClock_Config+0x210>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006a4:	d1f8      	bne.n	8000698 <SystemClock_Config+0x74>
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80006a6:	f005 fe57 	bl	8006358 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006aa:	f001 fb9f 	bl	8001dec <HAL_GetREVID>
 80006ae:	4b63      	ldr	r3, [pc, #396]	; (800083c <SystemClock_Config+0x218>)
 80006b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80006b2:	4a62      	ldr	r2, [pc, #392]	; (800083c <SystemClock_Config+0x218>)
 80006b4:	f023 0318 	bic.w	r3, r3, #24
 80006b8:	6713      	str	r3, [r2, #112]	; 0x70
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80006ba:	4b60      	ldr	r3, [pc, #384]	; (800083c <SystemClock_Config+0x218>)
 80006bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006be:	f023 0303 	bic.w	r3, r3, #3
 80006c2:	4a5e      	ldr	r2, [pc, #376]	; (800083c <SystemClock_Config+0x218>)
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80006ca:	2305      	movs	r3, #5
 80006cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006d8:	2301      	movs	r3, #1
 80006da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006de:	2302      	movs	r3, #2
 80006e0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e4:	2302      	movs	r3, #2
 80006e6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80006ea:	2305      	movs	r3, #5
 80006ec:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 192;
 80006f0:	23c0      	movs	r3, #192	; 0xc0
 80006f2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 20;
 80006fc:	2314      	movs	r3, #20
 80006fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000702:	2302      	movs	r3, #2
 8000704:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000708:	2308      	movs	r3, #8
 800070a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800070e:	2300      	movs	r3, #0
 8000710:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800071e:	4618      	mov	r0, r3
 8000720:	f005 fe74 	bl	800640c <HAL_RCC_OscConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x10a>
  {
    Error_Handler();
 800072a:	f000 fe2b 	bl	8001384 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072e:	233f      	movs	r3, #63	; 0x3f
 8000730:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000734:	2303      	movs	r3, #3
 8000736:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000740:	2308      	movs	r3, #8
 8000742:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000746:	2340      	movs	r3, #64	; 0x40
 8000748:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800074c:	2340      	movs	r3, #64	; 0x40
 800074e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000756:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800075a:	2340      	movs	r3, #64	; 0x40
 800075c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000760:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000764:	2104      	movs	r1, #4
 8000766:	4618      	mov	r0, r3
 8000768:	f006 fa28 	bl	8006bbc <HAL_RCC_ClockConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0x152>
  {
    Error_Handler();
 8000772:	f000 fe07 	bl	8001384 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_UART5
 8000776:	f107 0308 	add.w	r3, r7, #8
 800077a:	4a31      	ldr	r2, [pc, #196]	; (8000840 <SystemClock_Config+0x21c>)
 800077c:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_SPI4|RCC_PERIPHCLK_SPI3
                              |RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_ADC
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_SPI6
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800077e:	f107 0308 	add.w	r3, r7, #8
 8000782:	2202      	movs	r2, #2
 8000784:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000786:	f107 0308 	add.w	r3, r7, #8
 800078a:	220c      	movs	r2, #12
 800078c:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 800078e:	f107 0308 	add.w	r3, r7, #8
 8000792:	2201      	movs	r2, #1
 8000794:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000796:	f107 0308 	add.w	r3, r7, #8
 800079a:	2202      	movs	r2, #2
 800079c:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800079e:	f107 0308 	add.w	r3, r7, #8
 80007a2:	2202      	movs	r2, #2
 80007a4:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80007a6:	f107 0308 	add.w	r3, r7, #8
 80007aa:	22c0      	movs	r2, #192	; 0xc0
 80007ac:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80007ae:	f107 0308 	add.w	r3, r7, #8
 80007b2:	2220      	movs	r2, #32
 80007b4:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80007b6:	f107 0308 	add.w	r3, r7, #8
 80007ba:	2200      	movs	r2, #0
 80007bc:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80007be:	f107 0308 	add.w	r3, r7, #8
 80007c2:	2200      	movs	r2, #0
 80007c4:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80007c6:	f107 0308 	add.w	r3, r7, #8
 80007ca:	2200      	movs	r2, #0
 80007cc:	661a      	str	r2, [r3, #96]	; 0x60
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80007ce:	f107 0308 	add.w	r3, r7, #8
 80007d2:	2200      	movs	r2, #0
 80007d4:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80007d6:	f107 0308 	add.w	r3, r7, #8
 80007da:	2200      	movs	r2, #0
 80007dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80007e0:	f107 0308 	add.w	r3, r7, #8
 80007e4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80007e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80007ec:	f107 0308 	add.w	r3, r7, #8
 80007f0:	2200      	movs	r2, #0
 80007f2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_D3PCLK1;
 80007f6:	f107 0308 	add.w	r3, r7, #8
 80007fa:	2200      	movs	r2, #0
 80007fc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000800:	f107 0308 	add.w	r3, r7, #8
 8000804:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000808:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800080c:	f107 0308 	add.w	r3, r7, #8
 8000810:	4618      	mov	r0, r3
 8000812:	f006 fd5d 	bl	80072d0 <HAL_RCCEx_PeriphCLKConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x1fc>
  {
    Error_Handler();
 800081c:	f000 fdb2 	bl	8001384 <Error_Handler>
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 8000820:	f006 fb70 	bl	8006f04 <HAL_RCC_EnableCSS>
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000824:	f005 fde2 	bl	80063ec <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000828:	bf00      	nop
 800082a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	58024800 	.word	0x58024800
 8000838:	58000400 	.word	0x58000400
 800083c:	58024400 	.word	0x58024400
 8000840:	004c700a 	.word	0x004c700a

08000844 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	; 0x28
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000856:	463b      	mov	r3, r7
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]
 8000864:	615a      	str	r2, [r3, #20]
 8000866:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000868:	4b2e      	ldr	r3, [pc, #184]	; (8000924 <MX_ADC1_Init+0xe0>)
 800086a:	4a2f      	ldr	r2, [pc, #188]	; (8000928 <MX_ADC1_Init+0xe4>)
 800086c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800086e:	4b2d      	ldr	r3, [pc, #180]	; (8000924 <MX_ADC1_Init+0xe0>)
 8000870:	2200      	movs	r2, #0
 8000872:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000874:	4b2b      	ldr	r3, [pc, #172]	; (8000924 <MX_ADC1_Init+0xe0>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800087a:	4b2a      	ldr	r3, [pc, #168]	; (8000924 <MX_ADC1_Init+0xe0>)
 800087c:	2200      	movs	r2, #0
 800087e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000880:	4b28      	ldr	r3, [pc, #160]	; (8000924 <MX_ADC1_Init+0xe0>)
 8000882:	2204      	movs	r2, #4
 8000884:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000886:	4b27      	ldr	r3, [pc, #156]	; (8000924 <MX_ADC1_Init+0xe0>)
 8000888:	2200      	movs	r2, #0
 800088a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800088c:	4b25      	ldr	r3, [pc, #148]	; (8000924 <MX_ADC1_Init+0xe0>)
 800088e:	2200      	movs	r2, #0
 8000890:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000892:	4b24      	ldr	r3, [pc, #144]	; (8000924 <MX_ADC1_Init+0xe0>)
 8000894:	2201      	movs	r2, #1
 8000896:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000898:	4b22      	ldr	r3, [pc, #136]	; (8000924 <MX_ADC1_Init+0xe0>)
 800089a:	2200      	movs	r2, #0
 800089c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800089e:	4b21      	ldr	r3, [pc, #132]	; (8000924 <MX_ADC1_Init+0xe0>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008a4:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <MX_ADC1_Init+0xe0>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008aa:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <MX_ADC1_Init+0xe0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008b0:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <MX_ADC1_Init+0xe0>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008b6:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <MX_ADC1_Init+0xe0>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008bc:	4b19      	ldr	r3, [pc, #100]	; (8000924 <MX_ADC1_Init+0xe0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008c4:	4817      	ldr	r0, [pc, #92]	; (8000924 <MX_ADC1_Init+0xe0>)
 80008c6:	f001 fc33 	bl	8002130 <HAL_ADC_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008d0:	f000 fd58 	bl	8001384 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	4811      	ldr	r0, [pc, #68]	; (8000924 <MX_ADC1_Init+0xe0>)
 80008e0:	f002 f9f8 	bl	8002cd4 <HAL_ADCEx_MultiModeConfigChannel>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80008ea:	f000 fd4b 	bl	8001384 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_ADC1_Init+0xe8>)
 80008f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008f2:	2306      	movs	r3, #6
 80008f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008fa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008fe:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000900:	2304      	movs	r3, #4
 8000902:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000908:	463b      	mov	r3, r7
 800090a:	4619      	mov	r1, r3
 800090c:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_ADC1_Init+0xe0>)
 800090e:	f001 fdaf 	bl	8002470 <HAL_ADC_ConfigChannel>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000918:	f000 fd34 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	3728      	adds	r7, #40	; 0x28
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	240004a0 	.word	0x240004a0
 8000928:	40022000 	.word	0x40022000
 800092c:	10c00010 	.word	0x10c00010

08000930 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
 8000944:	615a      	str	r2, [r3, #20]
 8000946:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 8000948:	4b28      	ldr	r3, [pc, #160]	; (80009ec <MX_ADC2_Init+0xbc>)
 800094a:	4a29      	ldr	r2, [pc, #164]	; (80009f0 <MX_ADC2_Init+0xc0>)
 800094c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800094e:	4b27      	ldr	r3, [pc, #156]	; (80009ec <MX_ADC2_Init+0xbc>)
 8000950:	2200      	movs	r2, #0
 8000952:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000954:	4b25      	ldr	r3, [pc, #148]	; (80009ec <MX_ADC2_Init+0xbc>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800095a:	4b24      	ldr	r3, [pc, #144]	; (80009ec <MX_ADC2_Init+0xbc>)
 800095c:	2200      	movs	r2, #0
 800095e:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000960:	4b22      	ldr	r3, [pc, #136]	; (80009ec <MX_ADC2_Init+0xbc>)
 8000962:	2204      	movs	r2, #4
 8000964:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000966:	4b21      	ldr	r3, [pc, #132]	; (80009ec <MX_ADC2_Init+0xbc>)
 8000968:	2200      	movs	r2, #0
 800096a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800096c:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <MX_ADC2_Init+0xbc>)
 800096e:	2200      	movs	r2, #0
 8000970:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000972:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <MX_ADC2_Init+0xbc>)
 8000974:	2201      	movs	r2, #1
 8000976:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000978:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <MX_ADC2_Init+0xbc>)
 800097a:	2200      	movs	r2, #0
 800097c:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800097e:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <MX_ADC2_Init+0xbc>)
 8000980:	2200      	movs	r2, #0
 8000982:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000984:	4b19      	ldr	r3, [pc, #100]	; (80009ec <MX_ADC2_Init+0xbc>)
 8000986:	2200      	movs	r2, #0
 8000988:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800098a:	4b18      	ldr	r3, [pc, #96]	; (80009ec <MX_ADC2_Init+0xbc>)
 800098c:	2200      	movs	r2, #0
 800098e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000990:	4b16      	ldr	r3, [pc, #88]	; (80009ec <MX_ADC2_Init+0xbc>)
 8000992:	2200      	movs	r2, #0
 8000994:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <MX_ADC2_Init+0xbc>)
 8000998:	2200      	movs	r2, #0
 800099a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800099c:	4b13      	ldr	r3, [pc, #76]	; (80009ec <MX_ADC2_Init+0xbc>)
 800099e:	2200      	movs	r2, #0
 80009a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80009a4:	4811      	ldr	r0, [pc, #68]	; (80009ec <MX_ADC2_Init+0xbc>)
 80009a6:	f001 fbc3 	bl	8002130 <HAL_ADC_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 80009b0:	f000 fce8 	bl	8001384 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <MX_ADC2_Init+0xc4>)
 80009b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009b8:	2306      	movs	r3, #6
 80009ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009bc:	2300      	movs	r3, #0
 80009be:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009c0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80009c4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009c6:	2304      	movs	r3, #4
 80009c8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	4619      	mov	r1, r3
 80009d2:	4806      	ldr	r0, [pc, #24]	; (80009ec <MX_ADC2_Init+0xbc>)
 80009d4:	f001 fd4c 	bl	8002470 <HAL_ADC_ConfigChannel>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 80009de:	f000 fcd1 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	3720      	adds	r7, #32
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	24000254 	.word	0x24000254
 80009f0:	40022100 	.word	0x40022100
 80009f4:	25b00200 	.word	0x25b00200

080009f8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b088      	sub	sp, #32
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
 8000a0c:	615a      	str	r2, [r3, #20]
 8000a0e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 8000a10:	4b28      	ldr	r3, [pc, #160]	; (8000ab4 <MX_ADC3_Init+0xbc>)
 8000a12:	4a29      	ldr	r2, [pc, #164]	; (8000ab8 <MX_ADC3_Init+0xc0>)
 8000a14:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a16:	4b27      	ldr	r3, [pc, #156]	; (8000ab4 <MX_ADC3_Init+0xbc>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000a1c:	4b25      	ldr	r3, [pc, #148]	; (8000ab4 <MX_ADC3_Init+0xbc>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a22:	4b24      	ldr	r3, [pc, #144]	; (8000ab4 <MX_ADC3_Init+0xbc>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a28:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <MX_ADC3_Init+0xbc>)
 8000a2a:	2204      	movs	r2, #4
 8000a2c:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000a2e:	4b21      	ldr	r3, [pc, #132]	; (8000ab4 <MX_ADC3_Init+0xbc>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000a34:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <MX_ADC3_Init+0xbc>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000a3a:	4b1e      	ldr	r3, [pc, #120]	; (8000ab4 <MX_ADC3_Init+0xbc>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000a40:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <MX_ADC3_Init+0xbc>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a46:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <MX_ADC3_Init+0xbc>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a4c:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <MX_ADC3_Init+0xbc>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a52:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <MX_ADC3_Init+0xbc>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a58:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <MX_ADC3_Init+0xbc>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <MX_ADC3_Init+0xbc>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000a64:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <MX_ADC3_Init+0xbc>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a6c:	4811      	ldr	r0, [pc, #68]	; (8000ab4 <MX_ADC3_Init+0xbc>)
 8000a6e:	f001 fb5f 	bl	8002130 <HAL_ADC_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8000a78:	f000 fc84 	bl	8001384 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <MX_ADC3_Init+0xc4>)
 8000a7e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a80:	2306      	movs	r3, #6
 8000a82:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a88:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a8c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a8e:	2304      	movs	r3, #4
 8000a90:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4806      	ldr	r0, [pc, #24]	; (8000ab4 <MX_ADC3_Init+0xbc>)
 8000a9c:	f001 fce8 	bl	8002470 <HAL_ADC_ConfigChannel>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8000aa6:	f000 fc6d 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	3720      	adds	r7, #32
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	24000504 	.word	0x24000504
 8000ab8:	58026000 	.word	0x58026000
 8000abc:	04300002 	.word	0x04300002

08000ac0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ac4:	4b1b      	ldr	r3, [pc, #108]	; (8000b34 <MX_I2C1_Init+0x74>)
 8000ac6:	4a1c      	ldr	r2, [pc, #112]	; (8000b38 <MX_I2C1_Init+0x78>)
 8000ac8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000aca:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <MX_I2C1_Init+0x74>)
 8000acc:	4a1b      	ldr	r2, [pc, #108]	; (8000b3c <MX_I2C1_Init+0x7c>)
 8000ace:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ad0:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <MX_I2C1_Init+0x74>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <MX_I2C1_Init+0x74>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000adc:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <MX_I2C1_Init+0x74>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ae2:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <MX_I2C1_Init+0x74>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <MX_I2C1_Init+0x74>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <MX_I2C1_Init+0x74>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <MX_I2C1_Init+0x74>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000afa:	480e      	ldr	r0, [pc, #56]	; (8000b34 <MX_I2C1_Init+0x74>)
 8000afc:	f004 f92a 	bl	8004d54 <HAL_I2C_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b06:	f000 fc3d 	bl	8001384 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4809      	ldr	r0, [pc, #36]	; (8000b34 <MX_I2C1_Init+0x74>)
 8000b0e:	f004 f9b1 	bl	8004e74 <HAL_I2CEx_ConfigAnalogFilter>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b18:	f000 fc34 	bl	8001384 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_I2C1_Init+0x74>)
 8000b20:	f004 f9f3 	bl	8004f0a <HAL_I2CEx_ConfigDigitalFilter>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b2a:	f000 fc2b 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	240002b8 	.word	0x240002b8
 8000b38:	40005400 	.word	0x40005400
 8000b3c:	307075b1 	.word	0x307075b1

08000b40 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000b44:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <MX_RTC_Init+0x48>)
 8000b46:	4a11      	ldr	r2, [pc, #68]	; (8000b8c <MX_RTC_Init+0x4c>)
 8000b48:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <MX_RTC_Init+0x48>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b50:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <MX_RTC_Init+0x48>)
 8000b52:	227f      	movs	r2, #127	; 0x7f
 8000b54:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <MX_RTC_Init+0x48>)
 8000b58:	22ff      	movs	r2, #255	; 0xff
 8000b5a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <MX_RTC_Init+0x48>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <MX_RTC_Init+0x48>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b68:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <MX_RTC_Init+0x48>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <MX_RTC_Init+0x48>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b74:	4804      	ldr	r0, [pc, #16]	; (8000b88 <MX_RTC_Init+0x48>)
 8000b76:	f008 fa7b 	bl	8009070 <HAL_RTC_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000b80:	f000 fc00 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	240005f0 	.word	0x240005f0
 8000b8c:	58004000 	.word	0x58004000

08000b90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b94:	4b27      	ldr	r3, [pc, #156]	; (8000c34 <MX_SPI1_Init+0xa4>)
 8000b96:	4a28      	ldr	r2, [pc, #160]	; (8000c38 <MX_SPI1_Init+0xa8>)
 8000b98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b9a:	4b26      	ldr	r3, [pc, #152]	; (8000c34 <MX_SPI1_Init+0xa4>)
 8000b9c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ba0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ba2:	4b24      	ldr	r3, [pc, #144]	; (8000c34 <MX_SPI1_Init+0xa4>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ba8:	4b22      	ldr	r3, [pc, #136]	; (8000c34 <MX_SPI1_Init+0xa4>)
 8000baa:	2203      	movs	r2, #3
 8000bac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bae:	4b21      	ldr	r3, [pc, #132]	; (8000c34 <MX_SPI1_Init+0xa4>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bb4:	4b1f      	ldr	r3, [pc, #124]	; (8000c34 <MX_SPI1_Init+0xa4>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bba:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <MX_SPI1_Init+0xa4>)
 8000bbc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000bc0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000bc2:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <MX_SPI1_Init+0xa4>)
 8000bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bc8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bca:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <MX_SPI1_Init+0xa4>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bd0:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <MX_SPI1_Init+0xa4>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bd6:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <MX_SPI1_Init+0xa4>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000bdc:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <MX_SPI1_Init+0xa4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000be2:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <MX_SPI1_Init+0xa4>)
 8000be4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000be8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000bea:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <MX_SPI1_Init+0xa4>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000bf0:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <MX_SPI1_Init+0xa4>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <MX_SPI1_Init+0xa4>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000bfc:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <MX_SPI1_Init+0xa4>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <MX_SPI1_Init+0xa4>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c08:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <MX_SPI1_Init+0xa4>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <MX_SPI1_Init+0xa4>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c14:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <MX_SPI1_Init+0xa4>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <MX_SPI1_Init+0xa4>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c20:	4804      	ldr	r0, [pc, #16]	; (8000c34 <MX_SPI1_Init+0xa4>)
 8000c22:	f008 fb11 	bl	8009248 <HAL_SPI_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000c2c:	f000 fbaa 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	24000654 	.word	0x24000654
 8000c38:	40013000 	.word	0x40013000

08000c3c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000c40:	4b27      	ldr	r3, [pc, #156]	; (8000ce0 <MX_SPI3_Init+0xa4>)
 8000c42:	4a28      	ldr	r2, [pc, #160]	; (8000ce4 <MX_SPI3_Init+0xa8>)
 8000c44:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c46:	4b26      	ldr	r3, [pc, #152]	; (8000ce0 <MX_SPI3_Init+0xa4>)
 8000c48:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000c4c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c4e:	4b24      	ldr	r3, [pc, #144]	; (8000ce0 <MX_SPI3_Init+0xa4>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c54:	4b22      	ldr	r3, [pc, #136]	; (8000ce0 <MX_SPI3_Init+0xa4>)
 8000c56:	2203      	movs	r2, #3
 8000c58:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <MX_SPI3_Init+0xa4>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <MX_SPI3_Init+0xa4>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <MX_SPI3_Init+0xa4>)
 8000c68:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000c6c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <MX_SPI3_Init+0xa4>)
 8000c70:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000c74:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c76:	4b1a      	ldr	r3, [pc, #104]	; (8000ce0 <MX_SPI3_Init+0xa4>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c7c:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <MX_SPI3_Init+0xa4>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <MX_SPI3_Init+0xa4>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000c88:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <MX_SPI3_Init+0xa4>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c8e:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <MX_SPI3_Init+0xa4>)
 8000c90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c94:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c96:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <MX_SPI3_Init+0xa4>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c9c:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <MX_SPI3_Init+0xa4>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <MX_SPI3_Init+0xa4>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ca8:	4b0d      	ldr	r3, [pc, #52]	; (8000ce0 <MX_SPI3_Init+0xa4>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <MX_SPI3_Init+0xa4>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <MX_SPI3_Init+0xa4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <MX_SPI3_Init+0xa4>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000cc0:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <MX_SPI3_Init+0xa4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <MX_SPI3_Init+0xa4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ccc:	4804      	ldr	r0, [pc, #16]	; (8000ce0 <MX_SPI3_Init+0xa4>)
 8000cce:	f008 fabb 	bl	8009248 <HAL_SPI_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8000cd8:	f000 fb54 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	2400038c 	.word	0x2400038c
 8000ce4:	40003c00 	.word	0x40003c00

08000ce8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000cec:	4b27      	ldr	r3, [pc, #156]	; (8000d8c <MX_SPI4_Init+0xa4>)
 8000cee:	4a28      	ldr	r2, [pc, #160]	; (8000d90 <MX_SPI4_Init+0xa8>)
 8000cf0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000cf2:	4b26      	ldr	r3, [pc, #152]	; (8000d8c <MX_SPI4_Init+0xa4>)
 8000cf4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000cf8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000cfa:	4b24      	ldr	r3, [pc, #144]	; (8000d8c <MX_SPI4_Init+0xa4>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d00:	4b22      	ldr	r3, [pc, #136]	; (8000d8c <MX_SPI4_Init+0xa4>)
 8000d02:	2203      	movs	r2, #3
 8000d04:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d06:	4b21      	ldr	r3, [pc, #132]	; (8000d8c <MX_SPI4_Init+0xa4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d0c:	4b1f      	ldr	r3, [pc, #124]	; (8000d8c <MX_SPI4_Init+0xa4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000d12:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <MX_SPI4_Init+0xa4>)
 8000d14:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000d18:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000d1a:	4b1c      	ldr	r3, [pc, #112]	; (8000d8c <MX_SPI4_Init+0xa4>)
 8000d1c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d20:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d22:	4b1a      	ldr	r3, [pc, #104]	; (8000d8c <MX_SPI4_Init+0xa4>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d28:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <MX_SPI4_Init+0xa4>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d2e:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <MX_SPI4_Init+0xa4>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000d34:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <MX_SPI4_Init+0xa4>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d3a:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <MX_SPI4_Init+0xa4>)
 8000d3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d40:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d42:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <MX_SPI4_Init+0xa4>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d48:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <MX_SPI4_Init+0xa4>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <MX_SPI4_Init+0xa4>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d54:	4b0d      	ldr	r3, [pc, #52]	; (8000d8c <MX_SPI4_Init+0xa4>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <MX_SPI4_Init+0xa4>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d60:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <MX_SPI4_Init+0xa4>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <MX_SPI4_Init+0xa4>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d6c:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <MX_SPI4_Init+0xa4>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <MX_SPI4_Init+0xa4>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000d78:	4804      	ldr	r0, [pc, #16]	; (8000d8c <MX_SPI4_Init+0xa4>)
 8000d7a:	f008 fa65 	bl	8009248 <HAL_SPI_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8000d84:	f000 fafe 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	24000568 	.word	0x24000568
 8000d90:	40013400 	.word	0x40013400

08000d94 <MX_SPI6_Init>:
  * @brief SPI6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI6_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  /* SPI6 parameter configuration*/
  hspi6.Instance = SPI6;
 8000d98:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <MX_SPI6_Init+0xa4>)
 8000d9a:	4a28      	ldr	r2, [pc, #160]	; (8000e3c <MX_SPI6_Init+0xa8>)
 8000d9c:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8000d9e:	4b26      	ldr	r3, [pc, #152]	; (8000e38 <MX_SPI6_Init+0xa4>)
 8000da0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000da4:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8000da6:	4b24      	ldr	r3, [pc, #144]	; (8000e38 <MX_SPI6_Init+0xa4>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_4BIT;
 8000dac:	4b22      	ldr	r3, [pc, #136]	; (8000e38 <MX_SPI6_Init+0xa4>)
 8000dae:	2203      	movs	r2, #3
 8000db0:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000db2:	4b21      	ldr	r3, [pc, #132]	; (8000e38 <MX_SPI6_Init+0xa4>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000db8:	4b1f      	ldr	r3, [pc, #124]	; (8000e38 <MX_SPI6_Init+0xa4>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8000dbe:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <MX_SPI6_Init+0xa4>)
 8000dc0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000dc4:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000dc6:	4b1c      	ldr	r3, [pc, #112]	; (8000e38 <MX_SPI6_Init+0xa4>)
 8000dc8:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8000dcc:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dce:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <MX_SPI6_Init+0xa4>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dd4:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <MX_SPI6_Init+0xa4>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dda:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <MX_SPI6_Init+0xa4>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 8000de0:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <MX_SPI6_Init+0xa4>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000de6:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <MX_SPI6_Init+0xa4>)
 8000de8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dec:	635a      	str	r2, [r3, #52]	; 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000dee:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <MX_SPI6_Init+0xa4>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000df4:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <MX_SPI6_Init+0xa4>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <MX_SPI6_Init+0xa4>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e00:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <MX_SPI6_Init+0xa4>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	645a      	str	r2, [r3, #68]	; 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <MX_SPI6_Init+0xa4>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <MX_SPI6_Init+0xa4>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <MX_SPI6_Init+0xa4>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	651a      	str	r2, [r3, #80]	; 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e18:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <MX_SPI6_Init+0xa4>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <MX_SPI6_Init+0xa4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8000e24:	4804      	ldr	r0, [pc, #16]	; (8000e38 <MX_SPI6_Init+0xa4>)
 8000e26:	f008 fa0f 	bl	8009248 <HAL_SPI_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_SPI6_Init+0xa0>
  {
    Error_Handler();
 8000e30:	f000 faa8 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	24000304 	.word	0x24000304
 8000e3c:	58001400 	.word	0x58001400

08000e40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b096      	sub	sp, #88	; 0x58
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e46:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
 8000e60:	611a      	str	r2, [r3, #16]
 8000e62:	615a      	str	r2, [r3, #20]
 8000e64:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	222c      	movs	r2, #44	; 0x2c
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f00f f857 	bl	800ff20 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e72:	4b38      	ldr	r3, [pc, #224]	; (8000f54 <MX_TIM1_Init+0x114>)
 8000e74:	4a38      	ldr	r2, [pc, #224]	; (8000f58 <MX_TIM1_Init+0x118>)
 8000e76:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e78:	4b36      	ldr	r3, [pc, #216]	; (8000f54 <MX_TIM1_Init+0x114>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7e:	4b35      	ldr	r3, [pc, #212]	; (8000f54 <MX_TIM1_Init+0x114>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000e84:	4b33      	ldr	r3, [pc, #204]	; (8000f54 <MX_TIM1_Init+0x114>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e8a:	4b32      	ldr	r3, [pc, #200]	; (8000f54 <MX_TIM1_Init+0x114>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e90:	4b30      	ldr	r3, [pc, #192]	; (8000f54 <MX_TIM1_Init+0x114>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e96:	4b2f      	ldr	r3, [pc, #188]	; (8000f54 <MX_TIM1_Init+0x114>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e9c:	482d      	ldr	r0, [pc, #180]	; (8000f54 <MX_TIM1_Init+0x114>)
 8000e9e:	f008 fae6 	bl	800946e <HAL_TIM_PWM_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000ea8:	f000 fa6c 	bl	8001384 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eac:	2300      	movs	r3, #0
 8000eae:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000eb8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4825      	ldr	r0, [pc, #148]	; (8000f54 <MX_TIM1_Init+0x114>)
 8000ec0:	f008 ff80 	bl	8009dc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000eca:	f000 fa5b 	bl	8001384 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ece:	2360      	movs	r3, #96	; 0x60
 8000ed0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000eda:	2300      	movs	r3, #0
 8000edc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000eee:	2200      	movs	r2, #0
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4818      	ldr	r0, [pc, #96]	; (8000f54 <MX_TIM1_Init+0x114>)
 8000ef4:	f008 fae6 	bl	80094c4 <HAL_TIM_PWM_ConfigChannel>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000efe:	f000 fa41 	bl	8001384 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f1a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	4619      	mov	r1, r3
 8000f36:	4807      	ldr	r0, [pc, #28]	; (8000f54 <MX_TIM1_Init+0x114>)
 8000f38:	f008 ffcc 	bl	8009ed4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8000f42:	f000 fa1f 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f46:	4803      	ldr	r0, [pc, #12]	; (8000f54 <MX_TIM1_Init+0x114>)
 8000f48:	f000 fcc2 	bl	80018d0 <HAL_TIM_MspPostInit>

}
 8000f4c:	bf00      	nop
 8000f4e:	3758      	adds	r7, #88	; 0x58
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	24000614 	.word	0x24000614
 8000f58:	40010000 	.word	0x40010000

08000f5c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b096      	sub	sp, #88	; 0x58
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f62:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
 8000f7c:	611a      	str	r2, [r3, #16]
 8000f7e:	615a      	str	r2, [r3, #20]
 8000f80:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	222c      	movs	r2, #44	; 0x2c
 8000f86:	2100      	movs	r1, #0
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f00e ffc9 	bl	800ff20 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000f8e:	4b4a      	ldr	r3, [pc, #296]	; (80010b8 <MX_TIM8_Init+0x15c>)
 8000f90:	4a4a      	ldr	r2, [pc, #296]	; (80010bc <MX_TIM8_Init+0x160>)
 8000f92:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000f94:	4b48      	ldr	r3, [pc, #288]	; (80010b8 <MX_TIM8_Init+0x15c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9a:	4b47      	ldr	r3, [pc, #284]	; (80010b8 <MX_TIM8_Init+0x15c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 8000fa0:	4b45      	ldr	r3, [pc, #276]	; (80010b8 <MX_TIM8_Init+0x15c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa6:	4b44      	ldr	r3, [pc, #272]	; (80010b8 <MX_TIM8_Init+0x15c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000fac:	4b42      	ldr	r3, [pc, #264]	; (80010b8 <MX_TIM8_Init+0x15c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb2:	4b41      	ldr	r3, [pc, #260]	; (80010b8 <MX_TIM8_Init+0x15c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000fb8:	483f      	ldr	r0, [pc, #252]	; (80010b8 <MX_TIM8_Init+0x15c>)
 8000fba:	f008 fa58 	bl	800946e <HAL_TIM_PWM_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8000fc4:	f000 f9de 	bl	8001384 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000fd4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4837      	ldr	r0, [pc, #220]	; (80010b8 <MX_TIM8_Init+0x15c>)
 8000fdc:	f008 fef2 	bl	8009dc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 8000fe6:	f000 f9cd 	bl	8001384 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fea:	2360      	movs	r3, #96	; 0x60
 8000fec:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ffe:	2300      	movs	r3, #0
 8001000:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001002:	2300      	movs	r3, #0
 8001004:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001006:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800100a:	2200      	movs	r2, #0
 800100c:	4619      	mov	r1, r3
 800100e:	482a      	ldr	r0, [pc, #168]	; (80010b8 <MX_TIM8_Init+0x15c>)
 8001010:	f008 fa58 	bl	80094c4 <HAL_TIM_PWM_ConfigChannel>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 800101a:	f000 f9b3 	bl	8001384 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800101e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001022:	2204      	movs	r2, #4
 8001024:	4619      	mov	r1, r3
 8001026:	4824      	ldr	r0, [pc, #144]	; (80010b8 <MX_TIM8_Init+0x15c>)
 8001028:	f008 fa4c 	bl	80094c4 <HAL_TIM_PWM_ConfigChannel>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM8_Init+0xda>
  {
    Error_Handler();
 8001032:	f000 f9a7 	bl	8001384 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001036:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800103a:	2208      	movs	r2, #8
 800103c:	4619      	mov	r1, r3
 800103e:	481e      	ldr	r0, [pc, #120]	; (80010b8 <MX_TIM8_Init+0x15c>)
 8001040:	f008 fa40 	bl	80094c4 <HAL_TIM_PWM_ConfigChannel>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 800104a:	f000 f99b 	bl	8001384 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800104e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001052:	220c      	movs	r2, #12
 8001054:	4619      	mov	r1, r3
 8001056:	4818      	ldr	r0, [pc, #96]	; (80010b8 <MX_TIM8_Init+0x15c>)
 8001058:	f008 fa34 	bl	80094c4 <HAL_TIM_PWM_ConfigChannel>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM8_Init+0x10a>
  {
    Error_Handler();
 8001062:	f000 f98f 	bl	8001384 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001066:	2300      	movs	r3, #0
 8001068:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800106a:	2300      	movs	r3, #0
 800106c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800107a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800107e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001084:	2300      	movs	r3, #0
 8001086:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001088:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001092:	2300      	movs	r3, #0
 8001094:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	4619      	mov	r1, r3
 800109a:	4807      	ldr	r0, [pc, #28]	; (80010b8 <MX_TIM8_Init+0x15c>)
 800109c:	f008 ff1a 	bl	8009ed4 <HAL_TIMEx_ConfigBreakDeadTime>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_TIM8_Init+0x14e>
  {
    Error_Handler();
 80010a6:	f000 f96d 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80010aa:	4803      	ldr	r0, [pc, #12]	; (80010b8 <MX_TIM8_Init+0x15c>)
 80010ac:	f000 fc10 	bl	80018d0 <HAL_TIM_MspPostInit>

}
 80010b0:	bf00      	nop
 80010b2:	3758      	adds	r7, #88	; 0x58
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	24000214 	.word	0x24000214
 80010bc:	40010400 	.word	0x40010400

080010c0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80010c4:	4b22      	ldr	r3, [pc, #136]	; (8001150 <MX_UART5_Init+0x90>)
 80010c6:	4a23      	ldr	r2, [pc, #140]	; (8001154 <MX_UART5_Init+0x94>)
 80010c8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80010ca:	4b21      	ldr	r3, [pc, #132]	; (8001150 <MX_UART5_Init+0x90>)
 80010cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010d0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80010d2:	4b1f      	ldr	r3, [pc, #124]	; (8001150 <MX_UART5_Init+0x90>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80010d8:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <MX_UART5_Init+0x90>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80010de:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <MX_UART5_Init+0x90>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80010e4:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <MX_UART5_Init+0x90>)
 80010e6:	220c      	movs	r2, #12
 80010e8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ea:	4b19      	ldr	r3, [pc, #100]	; (8001150 <MX_UART5_Init+0x90>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f0:	4b17      	ldr	r3, [pc, #92]	; (8001150 <MX_UART5_Init+0x90>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010f6:	4b16      	ldr	r3, [pc, #88]	; (8001150 <MX_UART5_Init+0x90>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010fc:	4b14      	ldr	r3, [pc, #80]	; (8001150 <MX_UART5_Init+0x90>)
 80010fe:	2200      	movs	r2, #0
 8001100:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001102:	4b13      	ldr	r3, [pc, #76]	; (8001150 <MX_UART5_Init+0x90>)
 8001104:	2200      	movs	r2, #0
 8001106:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001108:	4811      	ldr	r0, [pc, #68]	; (8001150 <MX_UART5_Init+0x90>)
 800110a:	f008 ff61 	bl	8009fd0 <HAL_UART_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001114:	f000 f936 	bl	8001384 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001118:	2100      	movs	r1, #0
 800111a:	480d      	ldr	r0, [pc, #52]	; (8001150 <MX_UART5_Init+0x90>)
 800111c:	f00b fac9 	bl	800c6b2 <HAL_UARTEx_SetTxFifoThreshold>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001126:	f000 f92d 	bl	8001384 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800112a:	2100      	movs	r1, #0
 800112c:	4808      	ldr	r0, [pc, #32]	; (8001150 <MX_UART5_Init+0x90>)
 800112e:	f00b fafe 	bl	800c72e <HAL_UARTEx_SetRxFifoThreshold>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001138:	f000 f924 	bl	8001384 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800113c:	4804      	ldr	r0, [pc, #16]	; (8001150 <MX_UART5_Init+0x90>)
 800113e:	f00b fa7f 	bl	800c640 <HAL_UARTEx_DisableFifoMode>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001148:	f000 f91c 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	24000414 	.word	0x24000414
 8001154:	40005000 	.word	0x40005000

08001158 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800115e:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <MX_DMA_Init+0x3c>)
 8001160:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001164:	4a0b      	ldr	r2, [pc, #44]	; (8001194 <MX_DMA_Init+0x3c>)
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <MX_DMA_Init+0x3c>)
 8001170:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800117c:	2200      	movs	r2, #0
 800117e:	2100      	movs	r1, #0
 8001180:	200b      	movs	r0, #11
 8001182:	f001 ff5c 	bl	800303e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001186:	200b      	movs	r0, #11
 8001188:	f001 ff73 	bl	8003072 <HAL_NVIC_EnableIRQ>

}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	58024400 	.word	0x58024400

08001198 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08c      	sub	sp, #48	; 0x30
 800119c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119e:	f107 031c 	add.w	r3, r7, #28
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
 80011ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ae:	4b6f      	ldr	r3, [pc, #444]	; (800136c <MX_GPIO_Init+0x1d4>)
 80011b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b4:	4a6d      	ldr	r2, [pc, #436]	; (800136c <MX_GPIO_Init+0x1d4>)
 80011b6:	f043 0310 	orr.w	r3, r3, #16
 80011ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011be:	4b6b      	ldr	r3, [pc, #428]	; (800136c <MX_GPIO_Init+0x1d4>)
 80011c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c4:	f003 0310 	and.w	r3, r3, #16
 80011c8:	61bb      	str	r3, [r7, #24]
 80011ca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011cc:	4b67      	ldr	r3, [pc, #412]	; (800136c <MX_GPIO_Init+0x1d4>)
 80011ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d2:	4a66      	ldr	r2, [pc, #408]	; (800136c <MX_GPIO_Init+0x1d4>)
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011dc:	4b63      	ldr	r3, [pc, #396]	; (800136c <MX_GPIO_Init+0x1d4>)
 80011de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	617b      	str	r3, [r7, #20]
 80011e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ea:	4b60      	ldr	r3, [pc, #384]	; (800136c <MX_GPIO_Init+0x1d4>)
 80011ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f0:	4a5e      	ldr	r2, [pc, #376]	; (800136c <MX_GPIO_Init+0x1d4>)
 80011f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011fa:	4b5c      	ldr	r3, [pc, #368]	; (800136c <MX_GPIO_Init+0x1d4>)
 80011fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001208:	4b58      	ldr	r3, [pc, #352]	; (800136c <MX_GPIO_Init+0x1d4>)
 800120a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800120e:	4a57      	ldr	r2, [pc, #348]	; (800136c <MX_GPIO_Init+0x1d4>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001218:	4b54      	ldr	r3, [pc, #336]	; (800136c <MX_GPIO_Init+0x1d4>)
 800121a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001226:	4b51      	ldr	r3, [pc, #324]	; (800136c <MX_GPIO_Init+0x1d4>)
 8001228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800122c:	4a4f      	ldr	r2, [pc, #316]	; (800136c <MX_GPIO_Init+0x1d4>)
 800122e:	f043 0302 	orr.w	r3, r3, #2
 8001232:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001236:	4b4d      	ldr	r3, [pc, #308]	; (800136c <MX_GPIO_Init+0x1d4>)
 8001238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001244:	4b49      	ldr	r3, [pc, #292]	; (800136c <MX_GPIO_Init+0x1d4>)
 8001246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800124a:	4a48      	ldr	r2, [pc, #288]	; (800136c <MX_GPIO_Init+0x1d4>)
 800124c:	f043 0308 	orr.w	r3, r3, #8
 8001250:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001254:	4b45      	ldr	r3, [pc, #276]	; (800136c <MX_GPIO_Init+0x1d4>)
 8001256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800125a:	f003 0308 	and.w	r3, r3, #8
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8001262:	2200      	movs	r2, #0
 8001264:	f640 7107 	movw	r1, #3847	; 0xf07
 8001268:	4841      	ldr	r0, [pc, #260]	; (8001370 <MX_GPIO_Init+0x1d8>)
 800126a:	f003 fd59 	bl	8004d20 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	2120      	movs	r1, #32
 8001272:	4840      	ldr	r0, [pc, #256]	; (8001374 <MX_GPIO_Init+0x1dc>)
 8001274:	f003 fd54 	bl	8004d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800127e:	483e      	ldr	r0, [pc, #248]	; (8001378 <MX_GPIO_Init+0x1e0>)
 8001280:	f003 fd4e 	bl	8004d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 8001284:	2200      	movs	r2, #0
 8001286:	f64f 4107 	movw	r1, #64519	; 0xfc07
 800128a:	483c      	ldr	r0, [pc, #240]	; (800137c <MX_GPIO_Init+0x1e4>)
 800128c:	f003 fd48 	bl	8004d20 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1 
                          |GPIO_PIN_2, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001290:	2200      	movs	r2, #0
 8001292:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001296:	483a      	ldr	r0, [pc, #232]	; (8001380 <MX_GPIO_Init+0x1e8>)
 8001298:	f003 fd42 	bl	8004d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE8 PE9 PE10 
                           PE11 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 800129c:	f640 7307 	movw	r3, #3847	; 0xf07
 80012a0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a2:	2301      	movs	r3, #1
 80012a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	2300      	movs	r3, #0
 80012ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012ae:	f107 031c 	add.w	r3, r7, #28
 80012b2:	4619      	mov	r1, r3
 80012b4:	482e      	ldr	r0, [pc, #184]	; (8001370 <MX_GPIO_Init+0x1d8>)
 80012b6:	f003 fb83 	bl	80049c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012ba:	2320      	movs	r3, #32
 80012bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012be:	2301      	movs	r3, #1
 80012c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ca:	f107 031c 	add.w	r3, r7, #28
 80012ce:	4619      	mov	r1, r3
 80012d0:	4828      	ldr	r0, [pc, #160]	; (8001374 <MX_GPIO_Init+0x1dc>)
 80012d2:	f003 fb75 	bl	80049c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012dc:	2300      	movs	r3, #0
 80012de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	4619      	mov	r1, r3
 80012ea:	4821      	ldr	r0, [pc, #132]	; (8001370 <MX_GPIO_Init+0x1d8>)
 80012ec:	f003 fb68 	bl	80049c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14;
 80012f0:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 80012f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f6:	2300      	movs	r3, #0
 80012f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fe:	f107 031c 	add.w	r3, r7, #28
 8001302:	4619      	mov	r1, r3
 8001304:	481c      	ldr	r0, [pc, #112]	; (8001378 <MX_GPIO_Init+0x1e0>)
 8001306:	f003 fb5b 	bl	80049c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800130a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800130e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001310:	2301      	movs	r3, #1
 8001312:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001318:	2300      	movs	r3, #0
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	4619      	mov	r1, r3
 8001322:	4815      	ldr	r0, [pc, #84]	; (8001378 <MX_GPIO_Init+0x1e0>)
 8001324:	f003 fb4c 	bl	80049c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13 
                           PD14 PD15 PD0 PD1 
                           PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 8001328:	f64f 4307 	movw	r3, #64519	; 0xfc07
 800132c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1 
                          |GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132e:	2301      	movs	r3, #1
 8001330:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	4619      	mov	r1, r3
 8001340:	480e      	ldr	r0, [pc, #56]	; (800137c <MX_GPIO_Init+0x1e4>)
 8001342:	f003 fb3d 	bl	80049c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001346:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800134a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134c:	2301      	movs	r3, #1
 800134e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	2300      	movs	r3, #0
 8001356:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001358:	f107 031c 	add.w	r3, r7, #28
 800135c:	4619      	mov	r1, r3
 800135e:	4808      	ldr	r0, [pc, #32]	; (8001380 <MX_GPIO_Init+0x1e8>)
 8001360:	f003 fb2e 	bl	80049c0 <HAL_GPIO_Init>

}
 8001364:	bf00      	nop
 8001366:	3730      	adds	r7, #48	; 0x30
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	58024400 	.word	0x58024400
 8001370:	58021000 	.word	0x58021000
 8001374:	58020800 	.word	0x58020800
 8001378:	58020400 	.word	0x58020400
 800137c:	58020c00 	.word	0x58020c00
 8001380:	58020000 	.word	0x58020000

08001384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
	...

08001394 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139a:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <HAL_MspInit+0x30>)
 800139c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013a0:	4a08      	ldr	r2, [pc, #32]	; (80013c4 <HAL_MspInit+0x30>)
 80013a2:	f043 0302 	orr.w	r3, r3, #2
 80013a6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <HAL_MspInit+0x30>)
 80013ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	58024400 	.word	0x58024400

080013c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b090      	sub	sp, #64	; 0x40
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a69      	ldr	r2, [pc, #420]	; (800158c <HAL_ADC_MspInit+0x1c4>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d14e      	bne.n	8001488 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013ea:	4b69      	ldr	r3, [pc, #420]	; (8001590 <HAL_ADC_MspInit+0x1c8>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	3301      	adds	r3, #1
 80013f0:	4a67      	ldr	r2, [pc, #412]	; (8001590 <HAL_ADC_MspInit+0x1c8>)
 80013f2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013f4:	4b66      	ldr	r3, [pc, #408]	; (8001590 <HAL_ADC_MspInit+0x1c8>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d10e      	bne.n	800141a <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013fc:	4b65      	ldr	r3, [pc, #404]	; (8001594 <HAL_ADC_MspInit+0x1cc>)
 80013fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001402:	4a64      	ldr	r2, [pc, #400]	; (8001594 <HAL_ADC_MspInit+0x1cc>)
 8001404:	f043 0320 	orr.w	r3, r3, #32
 8001408:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800140c:	4b61      	ldr	r3, [pc, #388]	; (8001594 <HAL_ADC_MspInit+0x1cc>)
 800140e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001412:	f003 0320 	and.w	r3, r3, #32
 8001416:	62bb      	str	r3, [r7, #40]	; 0x28
 8001418:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141a:	4b5e      	ldr	r3, [pc, #376]	; (8001594 <HAL_ADC_MspInit+0x1cc>)
 800141c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001420:	4a5c      	ldr	r2, [pc, #368]	; (8001594 <HAL_ADC_MspInit+0x1cc>)
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800142a:	4b5a      	ldr	r3, [pc, #360]	; (8001594 <HAL_ADC_MspInit+0x1cc>)
 800142c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001438:	4b56      	ldr	r3, [pc, #344]	; (8001594 <HAL_ADC_MspInit+0x1cc>)
 800143a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800143e:	4a55      	ldr	r2, [pc, #340]	; (8001594 <HAL_ADC_MspInit+0x1cc>)
 8001440:	f043 0304 	orr.w	r3, r3, #4
 8001444:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001448:	4b52      	ldr	r3, [pc, #328]	; (8001594 <HAL_ADC_MspInit+0x1cc>)
 800144a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800144e:	f003 0304 	and.w	r3, r3, #4
 8001452:	623b      	str	r3, [r7, #32]
 8001454:	6a3b      	ldr	r3, [r7, #32]
    PA0     ------> ADC1_INP16
    PA1     ------> ADC1_INP17
    PA4     ------> ADC1_INP18
    PC4     ------> ADC1_INP4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8001456:	2313      	movs	r3, #19
 8001458:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800145a:	2303      	movs	r3, #3
 800145c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001462:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001466:	4619      	mov	r1, r3
 8001468:	484b      	ldr	r0, [pc, #300]	; (8001598 <HAL_ADC_MspInit+0x1d0>)
 800146a:	f003 faa9 	bl	80049c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800146e:	2310      	movs	r3, #16
 8001470:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001472:	2303      	movs	r3, #3
 8001474:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800147a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800147e:	4619      	mov	r1, r3
 8001480:	4846      	ldr	r0, [pc, #280]	; (800159c <HAL_ADC_MspInit+0x1d4>)
 8001482:	f003 fa9d 	bl	80049c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001486:	e07c      	b.n	8001582 <HAL_ADC_MspInit+0x1ba>
  else if(hadc->Instance==ADC2)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a44      	ldr	r2, [pc, #272]	; (80015a0 <HAL_ADC_MspInit+0x1d8>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d14e      	bne.n	8001530 <HAL_ADC_MspInit+0x168>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001492:	4b3f      	ldr	r3, [pc, #252]	; (8001590 <HAL_ADC_MspInit+0x1c8>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	3301      	adds	r3, #1
 8001498:	4a3d      	ldr	r2, [pc, #244]	; (8001590 <HAL_ADC_MspInit+0x1c8>)
 800149a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800149c:	4b3c      	ldr	r3, [pc, #240]	; (8001590 <HAL_ADC_MspInit+0x1c8>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d10e      	bne.n	80014c2 <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80014a4:	4b3b      	ldr	r3, [pc, #236]	; (8001594 <HAL_ADC_MspInit+0x1cc>)
 80014a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014aa:	4a3a      	ldr	r2, [pc, #232]	; (8001594 <HAL_ADC_MspInit+0x1cc>)
 80014ac:	f043 0320 	orr.w	r3, r3, #32
 80014b0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80014b4:	4b37      	ldr	r3, [pc, #220]	; (8001594 <HAL_ADC_MspInit+0x1cc>)
 80014b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014ba:	f003 0320 	and.w	r3, r3, #32
 80014be:	61fb      	str	r3, [r7, #28]
 80014c0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c2:	4b34      	ldr	r3, [pc, #208]	; (8001594 <HAL_ADC_MspInit+0x1cc>)
 80014c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c8:	4a32      	ldr	r2, [pc, #200]	; (8001594 <HAL_ADC_MspInit+0x1cc>)
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014d2:	4b30      	ldr	r3, [pc, #192]	; (8001594 <HAL_ADC_MspInit+0x1cc>)
 80014d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	61bb      	str	r3, [r7, #24]
 80014de:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e0:	4b2c      	ldr	r3, [pc, #176]	; (8001594 <HAL_ADC_MspInit+0x1cc>)
 80014e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e6:	4a2b      	ldr	r2, [pc, #172]	; (8001594 <HAL_ADC_MspInit+0x1cc>)
 80014e8:	f043 0302 	orr.w	r3, r3, #2
 80014ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014f0:	4b28      	ldr	r3, [pc, #160]	; (8001594 <HAL_ADC_MspInit+0x1cc>)
 80014f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80014fe:	231c      	movs	r3, #28
 8001500:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001502:	2303      	movs	r3, #3
 8001504:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800150e:	4619      	mov	r1, r3
 8001510:	4821      	ldr	r0, [pc, #132]	; (8001598 <HAL_ADC_MspInit+0x1d0>)
 8001512:	f003 fa55 	bl	80049c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001516:	2301      	movs	r3, #1
 8001518:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800151a:	2303      	movs	r3, #3
 800151c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001522:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001526:	4619      	mov	r1, r3
 8001528:	481e      	ldr	r0, [pc, #120]	; (80015a4 <HAL_ADC_MspInit+0x1dc>)
 800152a:	f003 fa49 	bl	80049c0 <HAL_GPIO_Init>
}
 800152e:	e028      	b.n	8001582 <HAL_ADC_MspInit+0x1ba>
  else if(hadc->Instance==ADC3)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a1c      	ldr	r2, [pc, #112]	; (80015a8 <HAL_ADC_MspInit+0x1e0>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d123      	bne.n	8001582 <HAL_ADC_MspInit+0x1ba>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800153a:	4b16      	ldr	r3, [pc, #88]	; (8001594 <HAL_ADC_MspInit+0x1cc>)
 800153c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001540:	4a14      	ldr	r2, [pc, #80]	; (8001594 <HAL_ADC_MspInit+0x1cc>)
 8001542:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001546:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800154a:	4b12      	ldr	r3, [pc, #72]	; (8001594 <HAL_ADC_MspInit+0x1cc>)
 800154c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001550:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001558:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <HAL_ADC_MspInit+0x1cc>)
 800155a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800155e:	4a0d      	ldr	r2, [pc, #52]	; (8001594 <HAL_ADC_MspInit+0x1cc>)
 8001560:	f043 0304 	orr.w	r3, r3, #4
 8001564:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001568:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <HAL_ADC_MspInit+0x1cc>)
 800156a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800156e:	f003 0304 	and.w	r3, r3, #4
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001576:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800157a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800157e:	f000 fc41 	bl	8001e04 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001582:	bf00      	nop
 8001584:	3740      	adds	r7, #64	; 0x40
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40022000 	.word	0x40022000
 8001590:	24000200 	.word	0x24000200
 8001594:	58024400 	.word	0x58024400
 8001598:	58020000 	.word	0x58020000
 800159c:	58020800 	.word	0x58020800
 80015a0:	40022100 	.word	0x40022100
 80015a4:	58020400 	.word	0x58020400
 80015a8:	58026000 	.word	0x58026000

080015ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08a      	sub	sp, #40	; 0x28
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b4:	f107 0314 	add.w	r3, r7, #20
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a1a      	ldr	r2, [pc, #104]	; (8001634 <HAL_I2C_MspInit+0x88>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d12d      	bne.n	800162a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ce:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <HAL_I2C_MspInit+0x8c>)
 80015d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d4:	4a18      	ldr	r2, [pc, #96]	; (8001638 <HAL_I2C_MspInit+0x8c>)
 80015d6:	f043 0302 	orr.w	r3, r3, #2
 80015da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015de:	4b16      	ldr	r3, [pc, #88]	; (8001638 <HAL_I2C_MspInit+0x8c>)
 80015e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015ec:	23c0      	movs	r3, #192	; 0xc0
 80015ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015f0:	2312      	movs	r3, #18
 80015f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f8:	2300      	movs	r3, #0
 80015fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015fc:	2304      	movs	r3, #4
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	4619      	mov	r1, r3
 8001606:	480d      	ldr	r0, [pc, #52]	; (800163c <HAL_I2C_MspInit+0x90>)
 8001608:	f003 f9da 	bl	80049c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800160c:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <HAL_I2C_MspInit+0x8c>)
 800160e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001612:	4a09      	ldr	r2, [pc, #36]	; (8001638 <HAL_I2C_MspInit+0x8c>)
 8001614:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001618:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <HAL_I2C_MspInit+0x8c>)
 800161e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001622:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800162a:	bf00      	nop
 800162c:	3728      	adds	r7, #40	; 0x28
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40005400 	.word	0x40005400
 8001638:	58024400 	.word	0x58024400
 800163c:	58020400 	.word	0x58020400

08001640 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a07      	ldr	r2, [pc, #28]	; (800166c <HAL_RTC_MspInit+0x2c>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d105      	bne.n	800165e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001652:	4b07      	ldr	r3, [pc, #28]	; (8001670 <HAL_RTC_MspInit+0x30>)
 8001654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001656:	4a06      	ldr	r2, [pc, #24]	; (8001670 <HAL_RTC_MspInit+0x30>)
 8001658:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800165c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	58004000 	.word	0x58004000
 8001670:	58024400 	.word	0x58024400

08001674 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b090      	sub	sp, #64	; 0x40
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a69      	ldr	r2, [pc, #420]	; (8001838 <HAL_SPI_MspInit+0x1c4>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d12e      	bne.n	80016f4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001696:	4b69      	ldr	r3, [pc, #420]	; (800183c <HAL_SPI_MspInit+0x1c8>)
 8001698:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800169c:	4a67      	ldr	r2, [pc, #412]	; (800183c <HAL_SPI_MspInit+0x1c8>)
 800169e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80016a6:	4b65      	ldr	r3, [pc, #404]	; (800183c <HAL_SPI_MspInit+0x1c8>)
 80016a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80016b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b4:	4b61      	ldr	r3, [pc, #388]	; (800183c <HAL_SPI_MspInit+0x1c8>)
 80016b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ba:	4a60      	ldr	r2, [pc, #384]	; (800183c <HAL_SPI_MspInit+0x1c8>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016c4:	4b5d      	ldr	r3, [pc, #372]	; (800183c <HAL_SPI_MspInit+0x1c8>)
 80016c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80016d2:	23e0      	movs	r3, #224	; 0xe0
 80016d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d6:	2302      	movs	r3, #2
 80016d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016de:	2300      	movs	r3, #0
 80016e0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016e2:	2305      	movs	r3, #5
 80016e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016ea:	4619      	mov	r1, r3
 80016ec:	4854      	ldr	r0, [pc, #336]	; (8001840 <HAL_SPI_MspInit+0x1cc>)
 80016ee:	f003 f967 	bl	80049c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }

}
 80016f2:	e09c      	b.n	800182e <HAL_SPI_MspInit+0x1ba>
  else if(hspi->Instance==SPI3)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a52      	ldr	r2, [pc, #328]	; (8001844 <HAL_SPI_MspInit+0x1d0>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d12f      	bne.n	800175e <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016fe:	4b4f      	ldr	r3, [pc, #316]	; (800183c <HAL_SPI_MspInit+0x1c8>)
 8001700:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001704:	4a4d      	ldr	r2, [pc, #308]	; (800183c <HAL_SPI_MspInit+0x1c8>)
 8001706:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800170a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800170e:	4b4b      	ldr	r3, [pc, #300]	; (800183c <HAL_SPI_MspInit+0x1c8>)
 8001710:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001714:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001718:	623b      	str	r3, [r7, #32]
 800171a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800171c:	4b47      	ldr	r3, [pc, #284]	; (800183c <HAL_SPI_MspInit+0x1c8>)
 800171e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001722:	4a46      	ldr	r2, [pc, #280]	; (800183c <HAL_SPI_MspInit+0x1c8>)
 8001724:	f043 0304 	orr.w	r3, r3, #4
 8001728:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800172c:	4b43      	ldr	r3, [pc, #268]	; (800183c <HAL_SPI_MspInit+0x1c8>)
 800172e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001732:	f003 0304 	and.w	r3, r3, #4
 8001736:	61fb      	str	r3, [r7, #28]
 8001738:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800173a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800173e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001740:	2302      	movs	r3, #2
 8001742:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001748:	2300      	movs	r3, #0
 800174a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800174c:	2306      	movs	r3, #6
 800174e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001750:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001754:	4619      	mov	r1, r3
 8001756:	483c      	ldr	r0, [pc, #240]	; (8001848 <HAL_SPI_MspInit+0x1d4>)
 8001758:	f003 f932 	bl	80049c0 <HAL_GPIO_Init>
}
 800175c:	e067      	b.n	800182e <HAL_SPI_MspInit+0x1ba>
  else if(hspi->Instance==SPI4)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a3a      	ldr	r2, [pc, #232]	; (800184c <HAL_SPI_MspInit+0x1d8>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d12f      	bne.n	80017c8 <HAL_SPI_MspInit+0x154>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001768:	4b34      	ldr	r3, [pc, #208]	; (800183c <HAL_SPI_MspInit+0x1c8>)
 800176a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800176e:	4a33      	ldr	r2, [pc, #204]	; (800183c <HAL_SPI_MspInit+0x1c8>)
 8001770:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001774:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001778:	4b30      	ldr	r3, [pc, #192]	; (800183c <HAL_SPI_MspInit+0x1c8>)
 800177a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800177e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001782:	61bb      	str	r3, [r7, #24]
 8001784:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001786:	4b2d      	ldr	r3, [pc, #180]	; (800183c <HAL_SPI_MspInit+0x1c8>)
 8001788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800178c:	4a2b      	ldr	r2, [pc, #172]	; (800183c <HAL_SPI_MspInit+0x1c8>)
 800178e:	f043 0310 	orr.w	r3, r3, #16
 8001792:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001796:	4b29      	ldr	r3, [pc, #164]	; (800183c <HAL_SPI_MspInit+0x1c8>)
 8001798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800179c:	f003 0310 	and.w	r3, r3, #16
 80017a0:	617b      	str	r3, [r7, #20]
 80017a2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80017a4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80017a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b2:	2300      	movs	r3, #0
 80017b4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80017b6:	2305      	movs	r3, #5
 80017b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017be:	4619      	mov	r1, r3
 80017c0:	4823      	ldr	r0, [pc, #140]	; (8001850 <HAL_SPI_MspInit+0x1dc>)
 80017c2:	f003 f8fd 	bl	80049c0 <HAL_GPIO_Init>
}
 80017c6:	e032      	b.n	800182e <HAL_SPI_MspInit+0x1ba>
  else if(hspi->Instance==SPI6)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a21      	ldr	r2, [pc, #132]	; (8001854 <HAL_SPI_MspInit+0x1e0>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d12d      	bne.n	800182e <HAL_SPI_MspInit+0x1ba>
    __HAL_RCC_SPI6_CLK_ENABLE();
 80017d2:	4b1a      	ldr	r3, [pc, #104]	; (800183c <HAL_SPI_MspInit+0x1c8>)
 80017d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017d8:	4a18      	ldr	r2, [pc, #96]	; (800183c <HAL_SPI_MspInit+0x1c8>)
 80017da:	f043 0320 	orr.w	r3, r3, #32
 80017de:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80017e2:	4b16      	ldr	r3, [pc, #88]	; (800183c <HAL_SPI_MspInit+0x1c8>)
 80017e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017e8:	f003 0320 	and.w	r3, r3, #32
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f0:	4b12      	ldr	r3, [pc, #72]	; (800183c <HAL_SPI_MspInit+0x1c8>)
 80017f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017f6:	4a11      	ldr	r2, [pc, #68]	; (800183c <HAL_SPI_MspInit+0x1c8>)
 80017f8:	f043 0302 	orr.w	r3, r3, #2
 80017fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001800:	4b0e      	ldr	r3, [pc, #56]	; (800183c <HAL_SPI_MspInit+0x1c8>)
 8001802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800180e:	2338      	movs	r3, #56	; 0x38
 8001810:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181a:	2300      	movs	r3, #0
 800181c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 800181e:	2308      	movs	r3, #8
 8001820:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001822:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001826:	4619      	mov	r1, r3
 8001828:	480b      	ldr	r0, [pc, #44]	; (8001858 <HAL_SPI_MspInit+0x1e4>)
 800182a:	f003 f8c9 	bl	80049c0 <HAL_GPIO_Init>
}
 800182e:	bf00      	nop
 8001830:	3740      	adds	r7, #64	; 0x40
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40013000 	.word	0x40013000
 800183c:	58024400 	.word	0x58024400
 8001840:	58020000 	.word	0x58020000
 8001844:	40003c00 	.word	0x40003c00
 8001848:	58020800 	.word	0x58020800
 800184c:	40013400 	.word	0x40013400
 8001850:	58021000 	.word	0x58021000
 8001854:	58001400 	.word	0x58001400
 8001858:	58020400 	.word	0x58020400

0800185c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a16      	ldr	r2, [pc, #88]	; (80018c4 <HAL_TIM_PWM_MspInit+0x68>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d10f      	bne.n	800188e <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800186e:	4b16      	ldr	r3, [pc, #88]	; (80018c8 <HAL_TIM_PWM_MspInit+0x6c>)
 8001870:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001874:	4a14      	ldr	r2, [pc, #80]	; (80018c8 <HAL_TIM_PWM_MspInit+0x6c>)
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800187e:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <HAL_TIM_PWM_MspInit+0x6c>)
 8001880:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800188c:	e013      	b.n	80018b6 <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM8)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a0e      	ldr	r2, [pc, #56]	; (80018cc <HAL_TIM_PWM_MspInit+0x70>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d10e      	bne.n	80018b6 <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001898:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <HAL_TIM_PWM_MspInit+0x6c>)
 800189a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800189e:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <HAL_TIM_PWM_MspInit+0x6c>)
 80018a0:	f043 0302 	orr.w	r3, r3, #2
 80018a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80018a8:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <HAL_TIM_PWM_MspInit+0x6c>)
 80018aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	68bb      	ldr	r3, [r7, #8]
}
 80018b6:	bf00      	nop
 80018b8:	3714      	adds	r7, #20
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	40010000 	.word	0x40010000
 80018c8:	58024400 	.word	0x58024400
 80018cc:	40010400 	.word	0x40010400

080018d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08a      	sub	sp, #40	; 0x28
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a26      	ldr	r2, [pc, #152]	; (8001988 <HAL_TIM_MspPostInit+0xb8>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d120      	bne.n	8001934 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f2:	4b26      	ldr	r3, [pc, #152]	; (800198c <HAL_TIM_MspPostInit+0xbc>)
 80018f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018f8:	4a24      	ldr	r2, [pc, #144]	; (800198c <HAL_TIM_MspPostInit+0xbc>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001902:	4b22      	ldr	r3, [pc, #136]	; (800198c <HAL_TIM_MspPostInit+0xbc>)
 8001904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001910:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001916:	2302      	movs	r3, #2
 8001918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191e:	2300      	movs	r3, #0
 8001920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001922:	2301      	movs	r3, #1
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001926:	f107 0314 	add.w	r3, r7, #20
 800192a:	4619      	mov	r1, r3
 800192c:	4818      	ldr	r0, [pc, #96]	; (8001990 <HAL_TIM_MspPostInit+0xc0>)
 800192e:	f003 f847 	bl	80049c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001932:	e024      	b.n	800197e <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM8)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a16      	ldr	r2, [pc, #88]	; (8001994 <HAL_TIM_MspPostInit+0xc4>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d11f      	bne.n	800197e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800193e:	4b13      	ldr	r3, [pc, #76]	; (800198c <HAL_TIM_MspPostInit+0xbc>)
 8001940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001944:	4a11      	ldr	r2, [pc, #68]	; (800198c <HAL_TIM_MspPostInit+0xbc>)
 8001946:	f043 0304 	orr.w	r3, r3, #4
 800194a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800194e:	4b0f      	ldr	r3, [pc, #60]	; (800198c <HAL_TIM_MspPostInit+0xbc>)
 8001950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800195c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001962:	2302      	movs	r3, #2
 8001964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196a:	2300      	movs	r3, #0
 800196c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800196e:	2303      	movs	r3, #3
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	4619      	mov	r1, r3
 8001978:	4807      	ldr	r0, [pc, #28]	; (8001998 <HAL_TIM_MspPostInit+0xc8>)
 800197a:	f003 f821 	bl	80049c0 <HAL_GPIO_Init>
}
 800197e:	bf00      	nop
 8001980:	3728      	adds	r7, #40	; 0x28
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40010000 	.word	0x40010000
 800198c:	58024400 	.word	0x58024400
 8001990:	58020000 	.word	0x58020000
 8001994:	40010400 	.word	0x40010400
 8001998:	58020800 	.word	0x58020800

0800199c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	; 0x28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a32      	ldr	r2, [pc, #200]	; (8001a84 <HAL_UART_MspInit+0xe8>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d15d      	bne.n	8001a7a <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80019be:	4b32      	ldr	r3, [pc, #200]	; (8001a88 <HAL_UART_MspInit+0xec>)
 80019c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019c4:	4a30      	ldr	r2, [pc, #192]	; (8001a88 <HAL_UART_MspInit+0xec>)
 80019c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80019ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019ce:	4b2e      	ldr	r3, [pc, #184]	; (8001a88 <HAL_UART_MspInit+0xec>)
 80019d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019dc:	4b2a      	ldr	r3, [pc, #168]	; (8001a88 <HAL_UART_MspInit+0xec>)
 80019de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e2:	4a29      	ldr	r2, [pc, #164]	; (8001a88 <HAL_UART_MspInit+0xec>)
 80019e4:	f043 0302 	orr.w	r3, r3, #2
 80019e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ec:	4b26      	ldr	r3, [pc, #152]	; (8001a88 <HAL_UART_MspInit+0xec>)
 80019ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration    
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80019fa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80019fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a00:	2302      	movs	r3, #2
 8001a02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001a0c:	230e      	movs	r3, #14
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	4619      	mov	r1, r3
 8001a16:	481d      	ldr	r0, [pc, #116]	; (8001a8c <HAL_UART_MspInit+0xf0>)
 8001a18:	f002 ffd2 	bl	80049c0 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001a1c:	4b1c      	ldr	r3, [pc, #112]	; (8001a90 <HAL_UART_MspInit+0xf4>)
 8001a1e:	4a1d      	ldr	r2, [pc, #116]	; (8001a94 <HAL_UART_MspInit+0xf8>)
 8001a20:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8001a22:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <HAL_UART_MspInit+0xf4>)
 8001a24:	2241      	movs	r2, #65	; 0x41
 8001a26:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a28:	4b19      	ldr	r3, [pc, #100]	; (8001a90 <HAL_UART_MspInit+0xf4>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a2e:	4b18      	ldr	r3, [pc, #96]	; (8001a90 <HAL_UART_MspInit+0xf4>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a34:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <HAL_UART_MspInit+0xf4>)
 8001a36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a3a:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a3c:	4b14      	ldr	r3, [pc, #80]	; (8001a90 <HAL_UART_MspInit+0xf4>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a42:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <HAL_UART_MspInit+0xf4>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8001a48:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <HAL_UART_MspInit+0xf4>)
 8001a4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a4e:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001a50:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <HAL_UART_MspInit+0xf4>)
 8001a52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a56:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a58:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <HAL_UART_MspInit+0xf4>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001a5e:	480c      	ldr	r0, [pc, #48]	; (8001a90 <HAL_UART_MspInit+0xf4>)
 8001a60:	f001 fb22 	bl	80030a8 <HAL_DMA_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8001a6a:	f7ff fc8b 	bl	8001384 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a07      	ldr	r2, [pc, #28]	; (8001a90 <HAL_UART_MspInit+0xf4>)
 8001a72:	679a      	str	r2, [r3, #120]	; 0x78
 8001a74:	4a06      	ldr	r2, [pc, #24]	; (8001a90 <HAL_UART_MspInit+0xf4>)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8001a7a:	bf00      	nop
 8001a7c:	3728      	adds	r7, #40	; 0x28
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40005000 	.word	0x40005000
 8001a88:	58024400 	.word	0x58024400
 8001a8c:	58020400 	.word	0x58020400
 8001a90:	240006dc 	.word	0x240006dc
 8001a94:	40020010 	.word	0x40020010

08001a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001a9c:	f005 fbfc 	bl	8007298 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aa8:	e7fe      	b.n	8001aa8 <HardFault_Handler+0x4>

08001aaa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aae:	e7fe      	b.n	8001aae <MemManage_Handler+0x4>

08001ab0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ab4:	e7fe      	b.n	8001ab4 <BusFault_Handler+0x4>

08001ab6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aba:	e7fe      	b.n	8001aba <UsageFault_Handler+0x4>

08001abc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aea:	f000 f93d 	bl	8001d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001af8:	4802      	ldr	r0, [pc, #8]	; (8001b04 <DMA1_Stream0_IRQHandler+0x10>)
 8001afa:	f001 fdfb 	bl	80036f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	240006dc 	.word	0x240006dc

08001b08 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001b0c:	4802      	ldr	r0, [pc, #8]	; (8001b18 <OTG_FS_IRQHandler+0x10>)
 8001b0e:	f003 fb9f 	bl	8005250 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	24001a5c 	.word	0x24001a5c

08001b1c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001b24:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <_sbrk+0x50>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d102      	bne.n	8001b32 <_sbrk+0x16>
		heap_end = &end;
 8001b2c:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <_sbrk+0x50>)
 8001b2e:	4a10      	ldr	r2, [pc, #64]	; (8001b70 <_sbrk+0x54>)
 8001b30:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001b32:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <_sbrk+0x50>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001b38:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <_sbrk+0x50>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4413      	add	r3, r2
 8001b40:	466a      	mov	r2, sp
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d907      	bls.n	8001b56 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001b46:	f00e f9b1 	bl	800feac <__errno>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	230c      	movs	r3, #12
 8001b4e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001b50:	f04f 33ff 	mov.w	r3, #4294967295
 8001b54:	e006      	b.n	8001b64 <_sbrk+0x48>
	}

	heap_end += incr;
 8001b56:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <_sbrk+0x50>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	4a03      	ldr	r2, [pc, #12]	; (8001b6c <_sbrk+0x50>)
 8001b60:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001b62:	68fb      	ldr	r3, [r7, #12]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	24000204 	.word	0x24000204
 8001b70:	24001e68 	.word	0x24001e68

08001b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b78:	4b29      	ldr	r3, [pc, #164]	; (8001c20 <SystemInit+0xac>)
 8001b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b7e:	4a28      	ldr	r2, [pc, #160]	; (8001c20 <SystemInit+0xac>)
 8001b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b88:	4b26      	ldr	r3, [pc, #152]	; (8001c24 <SystemInit+0xb0>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a25      	ldr	r2, [pc, #148]	; (8001c24 <SystemInit+0xb0>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b94:	4b23      	ldr	r3, [pc, #140]	; (8001c24 <SystemInit+0xb0>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b9a:	4b22      	ldr	r3, [pc, #136]	; (8001c24 <SystemInit+0xb0>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	4921      	ldr	r1, [pc, #132]	; (8001c24 <SystemInit+0xb0>)
 8001ba0:	4b21      	ldr	r3, [pc, #132]	; (8001c28 <SystemInit+0xb4>)
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001ba6:	4b1f      	ldr	r3, [pc, #124]	; (8001c24 <SystemInit+0xb0>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001bac:	4b1d      	ldr	r3, [pc, #116]	; (8001c24 <SystemInit+0xb0>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001bb2:	4b1c      	ldr	r3, [pc, #112]	; (8001c24 <SystemInit+0xb0>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001bb8:	4b1a      	ldr	r3, [pc, #104]	; (8001c24 <SystemInit+0xb0>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8001bbe:	4b19      	ldr	r3, [pc, #100]	; (8001c24 <SystemInit+0xb0>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001bc4:	4b17      	ldr	r3, [pc, #92]	; (8001c24 <SystemInit+0xb0>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001bca:	4b16      	ldr	r3, [pc, #88]	; (8001c24 <SystemInit+0xb0>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8001bd0:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <SystemInit+0xb0>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001bd6:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <SystemInit+0xb0>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <SystemInit+0xb0>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001be2:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <SystemInit+0xb0>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001be8:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <SystemInit+0xb0>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a0d      	ldr	r2, [pc, #52]	; (8001c24 <SystemInit+0xb0>)
 8001bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <SystemInit+0xb0>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001bfa:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <SystemInit+0xb8>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <SystemInit+0xbc>)
 8001c00:	4013      	ands	r3, r2
 8001c02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c06:	d202      	bcs.n	8001c0e <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001c08:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <SystemInit+0xc0>)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c0e:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <SystemInit+0xac>)
 8001c10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c14:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001c16:	bf00      	nop
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	e000ed00 	.word	0xe000ed00
 8001c24:	58024400 	.word	0x58024400
 8001c28:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c2c:	5c001000 	.word	0x5c001000
 8001c30:	ffff0000 	.word	0xffff0000
 8001c34:	51008108 	.word	0x51008108

08001c38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c70 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c3e:	e003      	b.n	8001c48 <LoopCopyDataInit>

08001c40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c40:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c46:	3104      	adds	r1, #4

08001c48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c48:	480b      	ldr	r0, [pc, #44]	; (8001c78 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c4a:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c50:	d3f6      	bcc.n	8001c40 <CopyDataInit>
  ldr  r2, =_sbss
 8001c52:	4a0b      	ldr	r2, [pc, #44]	; (8001c80 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c54:	e002      	b.n	8001c5c <LoopFillZerobss>

08001c56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c56:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c58:	f842 3b04 	str.w	r3, [r2], #4

08001c5c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c5c:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c60:	d3f9      	bcc.n	8001c56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c62:	f7ff ff87 	bl	8001b74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c66:	f00e f927 	bl	800feb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c6a:	f7fe fcb5 	bl	80005d8 <main>
  bx  lr    
 8001c6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c70:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001c74:	0801013c 	.word	0x0801013c
  ldr  r0, =_sdata
 8001c78:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001c7c:	240001e4 	.word	0x240001e4
  ldr  r2, =_sbss
 8001c80:	240001e4 	.word	0x240001e4
  ldr  r3, = _ebss
 8001c84:	24001e68 	.word	0x24001e68

08001c88 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c88:	e7fe      	b.n	8001c88 <ADC3_IRQHandler>
	...

08001c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c90:	2003      	movs	r0, #3
 8001c92:	f001 f9c9 	bl	8003028 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c96:	f005 f945 	bl	8006f24 <HAL_RCC_GetSysClockFreq>
 8001c9a:	4601      	mov	r1, r0
 8001c9c:	4b13      	ldr	r3, [pc, #76]	; (8001cec <HAL_Init+0x60>)
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	0a1b      	lsrs	r3, r3, #8
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	4a12      	ldr	r2, [pc, #72]	; (8001cf0 <HAL_Init+0x64>)
 8001ca8:	5cd3      	ldrb	r3, [r2, r3]
 8001caa:	f003 031f 	and.w	r3, r3, #31
 8001cae:	fa21 f303 	lsr.w	r3, r1, r3
 8001cb2:	4a10      	ldr	r2, [pc, #64]	; (8001cf4 <HAL_Init+0x68>)
 8001cb4:	6013      	str	r3, [r2, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001cb6:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <HAL_Init+0x68>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <HAL_Init+0x60>)
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	490b      	ldr	r1, [pc, #44]	; (8001cf0 <HAL_Init+0x64>)
 8001cc4:	5ccb      	ldrb	r3, [r1, r3]
 8001cc6:	f003 031f 	and.w	r3, r3, #31
 8001cca:	fa22 f303 	lsr.w	r3, r2, r3
 8001cce:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <HAL_Init+0x6c>)
 8001cd0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	f000 f812 	bl	8001cfc <HAL_InitTick>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_Init+0x56>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e002      	b.n	8001ce8 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ce2:	f7ff fb57 	bl	8001394 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	58024400 	.word	0x58024400
 8001cf0:	08010114 	.word	0x08010114
 8001cf4:	24000000 	.word	0x24000000
 8001cf8:	24000004 	.word	0x24000004

08001cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001d04:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <HAL_InitTick+0x60>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d101      	bne.n	8001d10 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e021      	b.n	8001d54 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001d10:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <HAL_InitTick+0x64>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <HAL_InitTick+0x60>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d26:	4618      	mov	r0, r3
 8001d28:	f001 f9b1 	bl	800308e <HAL_SYSTICK_Config>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e00e      	b.n	8001d54 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b0f      	cmp	r3, #15
 8001d3a:	d80a      	bhi.n	8001d52 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	f04f 30ff 	mov.w	r0, #4294967295
 8001d44:	f001 f97b 	bl	800303e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d48:	4a06      	ldr	r2, [pc, #24]	; (8001d64 <HAL_InitTick+0x68>)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	e000      	b.n	8001d54 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	2400000c 	.word	0x2400000c
 8001d60:	24000000 	.word	0x24000000
 8001d64:	24000008 	.word	0x24000008

08001d68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d6c:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <HAL_IncTick+0x20>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	461a      	mov	r2, r3
 8001d72:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <HAL_IncTick+0x24>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4413      	add	r3, r2
 8001d78:	4a04      	ldr	r2, [pc, #16]	; (8001d8c <HAL_IncTick+0x24>)
 8001d7a:	6013      	str	r3, [r2, #0]
}
 8001d7c:	bf00      	nop
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	2400000c 	.word	0x2400000c
 8001d8c:	24000754 	.word	0x24000754

08001d90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return uwTick;
 8001d94:	4b03      	ldr	r3, [pc, #12]	; (8001da4 <HAL_GetTick+0x14>)
 8001d96:	681b      	ldr	r3, [r3, #0]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	24000754 	.word	0x24000754

08001da8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001db0:	f7ff ffee 	bl	8001d90 <HAL_GetTick>
 8001db4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc0:	d005      	beq.n	8001dce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dc2:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <HAL_Delay+0x40>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4413      	add	r3, r2
 8001dcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dce:	bf00      	nop
 8001dd0:	f7ff ffde 	bl	8001d90 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d8f7      	bhi.n	8001dd0 <HAL_Delay+0x28>
  {
  }
}
 8001de0:	bf00      	nop
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	2400000c 	.word	0x2400000c

08001dec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001df0:	4b03      	ldr	r3, [pc, #12]	; (8001e00 <HAL_GetREVID+0x14>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	0c1b      	lsrs	r3, r3, #16
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	5c001000 	.word	0x5c001000

08001e04 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001e0e:	4b07      	ldr	r3, [pc, #28]	; (8001e2c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	401a      	ands	r2, r3
 8001e18:	4904      	ldr	r1, [pc, #16]	; (8001e2c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	604b      	str	r3, [r1, #4]
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	58000400 	.word	0x58000400

08001e30 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	431a      	orrs	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	609a      	str	r2, [r3, #8]
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
 8001e5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e98:	b490      	push	{r4, r7}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
 8001ea4:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	3360      	adds	r3, #96	; 0x60
 8001eaa:	461a      	mov	r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001eb4:	6823      	ldr	r3, [r4, #0]
 8001eb6:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	430b      	orrs	r3, r1
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ec8:	bf00      	nop
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc90      	pop	{r4, r7}
 8001ed0:	4770      	bx	lr

08001ed2 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b085      	sub	sp, #20
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	60f8      	str	r0, [r7, #12]
 8001eda:	60b9      	str	r1, [r7, #8]
 8001edc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	f003 031f 	and.w	r3, r3, #31
 8001eec:	6879      	ldr	r1, [r7, #4]
 8001eee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	611a      	str	r2, [r3, #16]
}
 8001ef8:	bf00      	nop
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001f04:	b490      	push	{r4, r7}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	3360      	adds	r3, #96	; 0x60
 8001f14:	461a      	mov	r2, r3
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001f1e:	6823      	ldr	r3, [r4, #0]
 8001f20:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	6023      	str	r3, [r4, #0]
}
 8001f2a:	bf00      	nop
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc90      	pop	{r4, r7}
 8001f32:	4770      	bx	lr

08001f34 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f34:	b490      	push	{r4, r7}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	3330      	adds	r3, #48	; 0x30
 8001f44:	461a      	mov	r2, r3
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	f003 030c 	and.w	r3, r3, #12
 8001f50:	4413      	add	r3, r2
 8001f52:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001f54:	6822      	ldr	r2, [r4, #0]
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	f003 031f 	and.w	r3, r3, #31
 8001f5c:	211f      	movs	r1, #31
 8001f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	401a      	ands	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	0e9b      	lsrs	r3, r3, #26
 8001f6a:	f003 011f 	and.w	r1, r3, #31
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	f003 031f 	and.w	r3, r3, #31
 8001f74:	fa01 f303 	lsl.w	r3, r1, r3
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f7c:	bf00      	nop
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bc90      	pop	{r4, r7}
 8001f84:	4770      	bx	lr

08001f86 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f86:	b490      	push	{r4, r7}
 8001f88:	b084      	sub	sp, #16
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	60f8      	str	r0, [r7, #12]
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	3314      	adds	r3, #20
 8001f96:	461a      	mov	r2, r3
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	0e5b      	lsrs	r3, r3, #25
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	f003 0304 	and.w	r3, r3, #4
 8001fa2:	4413      	add	r3, r2
 8001fa4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001fa6:	6822      	ldr	r2, [r4, #0]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	0d1b      	lsrs	r3, r3, #20
 8001fac:	f003 031f 	and.w	r3, r3, #31
 8001fb0:	2107      	movs	r1, #7
 8001fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	401a      	ands	r2, r3
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	0d1b      	lsrs	r3, r3, #20
 8001fbe:	f003 031f 	and.w	r3, r3, #31
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001fcc:	bf00      	nop
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc90      	pop	{r4, r7}
 8001fd4:	4770      	bx	lr
	...

08001fd8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f003 0318 	and.w	r3, r3, #24
 8001ffa:	4908      	ldr	r1, [pc, #32]	; (800201c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ffc:	40d9      	lsrs	r1, r3
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	400b      	ands	r3, r1
 8002002:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002006:	431a      	orrs	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800200e:	bf00      	nop
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	000fffff 	.word	0x000fffff

08002020 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	4b04      	ldr	r3, [pc, #16]	; (8002040 <LL_ADC_DisableDeepPowerDown+0x20>)
 800202e:	4013      	ands	r3, r2
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	6093      	str	r3, [r2, #8]
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	5fffffc0 	.word	0x5fffffc0

08002044 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002054:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002058:	d101      	bne.n	800205e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	4b05      	ldr	r3, [pc, #20]	; (8002090 <LL_ADC_EnableInternalRegulator+0x24>)
 800207a:	4013      	ands	r3, r2
 800207c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	6fffffc0 	.word	0x6fffffc0

08002094 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020a8:	d101      	bne.n	80020ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80020aa:	2301      	movs	r3, #1
 80020ac:	e000      	b.n	80020b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d101      	bne.n	80020d4 <LL_ADC_IsEnabled+0x18>
 80020d0:	2301      	movs	r3, #1
 80020d2:	e000      	b.n	80020d6 <LL_ADC_IsEnabled+0x1a>
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 0304 	and.w	r3, r3, #4
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d101      	bne.n	80020fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	2b08      	cmp	r3, #8
 800211a:	d101      	bne.n	8002120 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800211c:	2301      	movs	r3, #1
 800211e:	e000      	b.n	8002122 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
	...

08002130 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002130:	b590      	push	{r4, r7, lr}
 8002132:	b089      	sub	sp, #36	; 0x24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002138:	2300      	movs	r3, #0
 800213a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800213c:	2300      	movs	r3, #0
 800213e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e18e      	b.n	8002468 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002154:	2b00      	cmp	r3, #0
 8002156:	d109      	bne.n	800216c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7ff f935 	bl	80013c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff ff67 	bl	8002044 <LL_ADC_IsDeepPowerDownEnabled>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d004      	beq.n	8002186 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff ff4d 	bl	8002020 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff ff82 	bl	8002094 <LL_ADC_IsInternalRegulatorEnabled>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d113      	bne.n	80021be <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff ff66 	bl	800206c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80021a0:	4b9a      	ldr	r3, [pc, #616]	; (800240c <HAL_ADC_Init+0x2dc>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	099b      	lsrs	r3, r3, #6
 80021a6:	4a9a      	ldr	r2, [pc, #616]	; (8002410 <HAL_ADC_Init+0x2e0>)
 80021a8:	fba2 2303 	umull	r2, r3, r2, r3
 80021ac:	099b      	lsrs	r3, r3, #6
 80021ae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021b0:	e002      	b.n	80021b8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	3b01      	subs	r3, #1
 80021b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f9      	bne.n	80021b2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff ff66 	bl	8002094 <LL_ADC_IsInternalRegulatorEnabled>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10d      	bne.n	80021ea <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d2:	f043 0210 	orr.w	r2, r3, #16
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021de:	f043 0201 	orr.w	r2, r3, #1
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff ff77 	bl	80020e2 <LL_ADC_REG_IsConversionOngoing>
 80021f4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fa:	f003 0310 	and.w	r3, r3, #16
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f040 8129 	bne.w	8002456 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	2b00      	cmp	r3, #0
 8002208:	f040 8125 	bne.w	8002456 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002210:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002214:	f043 0202 	orr.w	r2, r3, #2
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff ff4b 	bl	80020bc <LL_ADC_IsEnabled>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d136      	bne.n	800229a <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a78      	ldr	r2, [pc, #480]	; (8002414 <HAL_ADC_Init+0x2e4>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d004      	beq.n	8002240 <HAL_ADC_Init+0x110>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a77      	ldr	r2, [pc, #476]	; (8002418 <HAL_ADC_Init+0x2e8>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d10e      	bne.n	800225e <HAL_ADC_Init+0x12e>
 8002240:	4874      	ldr	r0, [pc, #464]	; (8002414 <HAL_ADC_Init+0x2e4>)
 8002242:	f7ff ff3b 	bl	80020bc <LL_ADC_IsEnabled>
 8002246:	4604      	mov	r4, r0
 8002248:	4873      	ldr	r0, [pc, #460]	; (8002418 <HAL_ADC_Init+0x2e8>)
 800224a:	f7ff ff37 	bl	80020bc <LL_ADC_IsEnabled>
 800224e:	4603      	mov	r3, r0
 8002250:	4323      	orrs	r3, r4
 8002252:	2b00      	cmp	r3, #0
 8002254:	bf0c      	ite	eq
 8002256:	2301      	moveq	r3, #1
 8002258:	2300      	movne	r3, #0
 800225a:	b2db      	uxtb	r3, r3
 800225c:	e008      	b.n	8002270 <HAL_ADC_Init+0x140>
 800225e:	486f      	ldr	r0, [pc, #444]	; (800241c <HAL_ADC_Init+0x2ec>)
 8002260:	f7ff ff2c 	bl	80020bc <LL_ADC_IsEnabled>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	bf0c      	ite	eq
 800226a:	2301      	moveq	r3, #1
 800226c:	2300      	movne	r3, #0
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b00      	cmp	r3, #0
 8002272:	d012      	beq.n	800229a <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a66      	ldr	r2, [pc, #408]	; (8002414 <HAL_ADC_Init+0x2e4>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d004      	beq.n	8002288 <HAL_ADC_Init+0x158>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a65      	ldr	r2, [pc, #404]	; (8002418 <HAL_ADC_Init+0x2e8>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d101      	bne.n	800228c <HAL_ADC_Init+0x15c>
 8002288:	4a65      	ldr	r2, [pc, #404]	; (8002420 <HAL_ADC_Init+0x2f0>)
 800228a:	e000      	b.n	800228e <HAL_ADC_Init+0x15e>
 800228c:	4a65      	ldr	r2, [pc, #404]	; (8002424 <HAL_ADC_Init+0x2f4>)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	4619      	mov	r1, r3
 8002294:	4610      	mov	r0, r2
 8002296:	f7ff fdcb 	bl	8001e30 <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800229a:	f7ff fda7 	bl	8001dec <HAL_GetREVID>
 800229e:	4602      	mov	r2, r0
 80022a0:	f241 0303 	movw	r3, #4099	; 0x1003
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d914      	bls.n	80022d2 <HAL_ADC_Init+0x1a2>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2b10      	cmp	r3, #16
 80022ae:	d110      	bne.n	80022d2 <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	7d5b      	ldrb	r3, [r3, #21]
 80022b4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022ba:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80022c0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	7f1b      	ldrb	r3, [r3, #28]
 80022c6:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 80022c8:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022ca:	f043 030c 	orr.w	r3, r3, #12
 80022ce:	61bb      	str	r3, [r7, #24]
 80022d0:	e00d      	b.n	80022ee <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	7d5b      	ldrb	r3, [r3, #21]
 80022d6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022dc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80022e2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	7f1b      	ldrb	r3, [r3, #28]
 80022e8:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	7f1b      	ldrb	r3, [r3, #28]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d106      	bne.n	8002304 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	045b      	lsls	r3, r3, #17
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4313      	orrs	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	2b00      	cmp	r3, #0
 800230a:	d009      	beq.n	8002320 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002318:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4313      	orrs	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68da      	ldr	r2, [r3, #12]
 8002326:	4b40      	ldr	r3, [pc, #256]	; (8002428 <HAL_ADC_Init+0x2f8>)
 8002328:	4013      	ands	r3, r2
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6812      	ldr	r2, [r2, #0]
 800232e:	69b9      	ldr	r1, [r7, #24]
 8002330:	430b      	orrs	r3, r1
 8002332:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff fed2 	bl	80020e2 <LL_ADC_REG_IsConversionOngoing>
 800233e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff fedf 	bl	8002108 <LL_ADC_INJ_IsConversionOngoing>
 800234a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d14a      	bne.n	80023e8 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d147      	bne.n	80023e8 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	7d1b      	ldrb	r3, [r3, #20]
 800235c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68da      	ldr	r2, [r3, #12]
 800236c:	4b2f      	ldr	r3, [pc, #188]	; (800242c <HAL_ADC_Init+0x2fc>)
 800236e:	4013      	ands	r3, r2
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6812      	ldr	r2, [r2, #0]
 8002374:	69b9      	ldr	r1, [r7, #24]
 8002376:	430b      	orrs	r3, r1
 8002378:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002380:	2b01      	cmp	r3, #1
 8002382:	d11b      	bne.n	80023bc <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	691a      	ldr	r2, [r3, #16]
 8002390:	4b27      	ldr	r3, [pc, #156]	; (8002430 <HAL_ADC_Init+0x300>)
 8002392:	4013      	ands	r3, r2
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002398:	3a01      	subs	r2, #1
 800239a:	0411      	lsls	r1, r2, #16
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023a0:	4311      	orrs	r1, r2
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80023a6:	4311      	orrs	r1, r2
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80023ac:	430a      	orrs	r2, r1
 80023ae:	431a      	orrs	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f042 0201 	orr.w	r2, r2, #1
 80023b8:	611a      	str	r2, [r3, #16]
 80023ba:	e007      	b.n	80023cc <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	691a      	ldr	r2, [r3, #16]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 0201 	bic.w	r2, r2, #1
 80023ca:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 fb58 	bl	8002a98 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d121      	bne.n	8002434 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	f023 010f 	bic.w	r1, r3, #15
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	1e5a      	subs	r2, r3, #1
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	430a      	orrs	r2, r1
 8002406:	631a      	str	r2, [r3, #48]	; 0x30
 8002408:	e01c      	b.n	8002444 <HAL_ADC_Init+0x314>
 800240a:	bf00      	nop
 800240c:	24000000 	.word	0x24000000
 8002410:	053e2d63 	.word	0x053e2d63
 8002414:	40022000 	.word	0x40022000
 8002418:	40022100 	.word	0x40022100
 800241c:	58026000 	.word	0x58026000
 8002420:	40022300 	.word	0x40022300
 8002424:	58026300 	.word	0x58026300
 8002428:	fff0c003 	.word	0xfff0c003
 800242c:	ffffbffc 	.word	0xffffbffc
 8002430:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 020f 	bic.w	r2, r2, #15
 8002442:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002448:	f023 0303 	bic.w	r3, r3, #3
 800244c:	f043 0201 	orr.w	r2, r3, #1
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	655a      	str	r2, [r3, #84]	; 0x54
 8002454:	e007      	b.n	8002466 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245a:	f043 0210 	orr.w	r2, r3, #16
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002466:	7ffb      	ldrb	r3, [r7, #31]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3724      	adds	r7, #36	; 0x24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd90      	pop	{r4, r7, pc}

08002470 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002470:	b590      	push	{r4, r7, lr}
 8002472:	b099      	sub	sp, #100	; 0x64
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002480:	2300      	movs	r3, #0
 8002482:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	4a99      	ldr	r2, [pc, #612]	; (80026f0 <HAL_ADC_ConfigChannel+0x280>)
 800248a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002492:	2b01      	cmp	r3, #1
 8002494:	d101      	bne.n	800249a <HAL_ADC_ConfigChannel+0x2a>
 8002496:	2302      	movs	r3, #2
 8002498:	e2e6      	b.n	8002a68 <HAL_ADC_ConfigChannel+0x5f8>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff fe1b 	bl	80020e2 <LL_ADC_REG_IsConversionOngoing>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f040 82cb 	bne.w	8002a4a <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d108      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x62>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	0e9b      	lsrs	r3, r3, #26
 80024c6:	f003 031f 	and.w	r3, r3, #31
 80024ca:	2201      	movs	r2, #1
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	e00f      	b.n	80024f2 <HAL_ADC_ConfigChannel+0x82>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024da:	fa93 f3a3 	rbit	r3, r3
 80024de:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024e2:	fab3 f383 	clz	r3, r3
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	f003 031f 	and.w	r3, r3, #31
 80024ec:	2201      	movs	r2, #1
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6812      	ldr	r2, [r2, #0]
 80024f6:	69d1      	ldr	r1, [r2, #28]
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6812      	ldr	r2, [r2, #0]
 80024fc:	430b      	orrs	r3, r1
 80024fe:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6818      	ldr	r0, [r3, #0]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	6859      	ldr	r1, [r3, #4]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	461a      	mov	r2, r3
 800250e:	f7ff fd11 	bl	8001f34 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff fde3 	bl	80020e2 <LL_ADC_REG_IsConversionOngoing>
 800251c:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff fdf0 	bl	8002108 <LL_ADC_INJ_IsConversionOngoing>
 8002528:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800252a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800252c:	2b00      	cmp	r3, #0
 800252e:	f040 80b3 	bne.w	8002698 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002534:	2b00      	cmp	r3, #0
 8002536:	f040 80af 	bne.w	8002698 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6818      	ldr	r0, [r3, #0]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	6819      	ldr	r1, [r3, #0]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	461a      	mov	r2, r3
 8002548:	f7ff fd1d 	bl	8001f86 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800254c:	4b69      	ldr	r3, [pc, #420]	; (80026f4 <HAL_ADC_ConfigChannel+0x284>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002554:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002558:	d10b      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x102>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	695a      	ldr	r2, [r3, #20]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	089b      	lsrs	r3, r3, #2
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	e01d      	b.n	80025ae <HAL_ADC_ConfigChannel+0x13e>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f003 0310 	and.w	r3, r3, #16
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10b      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x128>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	695a      	ldr	r2, [r3, #20]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	089b      	lsrs	r3, r3, #2
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	e00a      	b.n	80025ae <HAL_ADC_ConfigChannel+0x13e>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	695a      	ldr	r2, [r3, #20]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	089b      	lsrs	r3, r3, #2
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	2b04      	cmp	r3, #4
 80025b6:	d027      	beq.n	8002608 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6818      	ldr	r0, [r3, #0]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	6919      	ldr	r1, [r3, #16]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025c6:	f7ff fc67 	bl	8001e98 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6818      	ldr	r0, [r3, #0]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	6919      	ldr	r1, [r3, #16]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	7e5b      	ldrb	r3, [r3, #25]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d102      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x170>
 80025da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80025de:	e000      	b.n	80025e2 <HAL_ADC_ConfigChannel+0x172>
 80025e0:	2300      	movs	r3, #0
 80025e2:	461a      	mov	r2, r3
 80025e4:	f7ff fc8e 	bl	8001f04 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6818      	ldr	r0, [r3, #0]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	6919      	ldr	r1, [r3, #16]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	7e1b      	ldrb	r3, [r3, #24]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d102      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x18e>
 80025f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025fc:	e000      	b.n	8002600 <HAL_ADC_ConfigChannel+0x190>
 80025fe:	2300      	movs	r3, #0
 8002600:	461a      	mov	r2, r3
 8002602:	f7ff fc66 	bl	8001ed2 <LL_ADC_SetDataRightShift>
 8002606:	e047      	b.n	8002698 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800260e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	069b      	lsls	r3, r3, #26
 8002618:	429a      	cmp	r2, r3
 800261a:	d107      	bne.n	800262c <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800262a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002632:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	069b      	lsls	r3, r3, #26
 800263c:	429a      	cmp	r2, r3
 800263e:	d107      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800264e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002656:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	069b      	lsls	r3, r3, #26
 8002660:	429a      	cmp	r2, r3
 8002662:	d107      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002672:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800267a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	069b      	lsls	r3, r3, #26
 8002684:	429a      	cmp	r2, r3
 8002686:	d107      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002696:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff fd0d 	bl	80020bc <LL_ADC_IsEnabled>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f040 81d9 	bne.w	8002a5c <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6818      	ldr	r0, [r3, #0]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	6819      	ldr	r1, [r3, #0]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	461a      	mov	r2, r3
 80026b8:	f7ff fc8e 	bl	8001fd8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	4a0b      	ldr	r2, [pc, #44]	; (80026f0 <HAL_ADC_ConfigChannel+0x280>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	f040 8101 	bne.w	80028ca <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10f      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x288>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	0e9b      	lsrs	r3, r3, #26
 80026de:	3301      	adds	r3, #1
 80026e0:	f003 031f 	and.w	r3, r3, #31
 80026e4:	2b09      	cmp	r3, #9
 80026e6:	bf94      	ite	ls
 80026e8:	2301      	movls	r3, #1
 80026ea:	2300      	movhi	r3, #0
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	e016      	b.n	800271e <HAL_ADC_ConfigChannel+0x2ae>
 80026f0:	47ff0000 	.word	0x47ff0000
 80026f4:	5c001000 	.word	0x5c001000
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002700:	fa93 f3a3 	rbit	r3, r3
 8002704:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002708:	fab3 f383 	clz	r3, r3
 800270c:	b2db      	uxtb	r3, r3
 800270e:	3301      	adds	r3, #1
 8002710:	f003 031f 	and.w	r3, r3, #31
 8002714:	2b09      	cmp	r3, #9
 8002716:	bf94      	ite	ls
 8002718:	2301      	movls	r3, #1
 800271a:	2300      	movhi	r3, #0
 800271c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800271e:	2b00      	cmp	r3, #0
 8002720:	d064      	beq.n	80027ec <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800272a:	2b00      	cmp	r3, #0
 800272c:	d107      	bne.n	800273e <HAL_ADC_ConfigChannel+0x2ce>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	0e9b      	lsrs	r3, r3, #26
 8002734:	3301      	adds	r3, #1
 8002736:	069b      	lsls	r3, r3, #26
 8002738:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800273c:	e00e      	b.n	800275c <HAL_ADC_ConfigChannel+0x2ec>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002746:	fa93 f3a3 	rbit	r3, r3
 800274a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800274c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800274e:	fab3 f383 	clz	r3, r3
 8002752:	b2db      	uxtb	r3, r3
 8002754:	3301      	adds	r3, #1
 8002756:	069b      	lsls	r3, r3, #26
 8002758:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002764:	2b00      	cmp	r3, #0
 8002766:	d109      	bne.n	800277c <HAL_ADC_ConfigChannel+0x30c>
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	0e9b      	lsrs	r3, r3, #26
 800276e:	3301      	adds	r3, #1
 8002770:	f003 031f 	and.w	r3, r3, #31
 8002774:	2101      	movs	r1, #1
 8002776:	fa01 f303 	lsl.w	r3, r1, r3
 800277a:	e010      	b.n	800279e <HAL_ADC_ConfigChannel+0x32e>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002784:	fa93 f3a3 	rbit	r3, r3
 8002788:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800278a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278c:	fab3 f383 	clz	r3, r3
 8002790:	b2db      	uxtb	r3, r3
 8002792:	3301      	adds	r3, #1
 8002794:	f003 031f 	and.w	r3, r3, #31
 8002798:	2101      	movs	r1, #1
 800279a:	fa01 f303 	lsl.w	r3, r1, r3
 800279e:	ea42 0103 	orr.w	r1, r2, r3
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10a      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x354>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	0e9b      	lsrs	r3, r3, #26
 80027b4:	3301      	adds	r3, #1
 80027b6:	f003 021f 	and.w	r2, r3, #31
 80027ba:	4613      	mov	r3, r2
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	4413      	add	r3, r2
 80027c0:	051b      	lsls	r3, r3, #20
 80027c2:	e011      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x378>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027cc:	fa93 f3a3 	rbit	r3, r3
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	fab3 f383 	clz	r3, r3
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	3301      	adds	r3, #1
 80027dc:	f003 021f 	and.w	r2, r3, #31
 80027e0:	4613      	mov	r3, r2
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	4413      	add	r3, r2
 80027e6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027e8:	430b      	orrs	r3, r1
 80027ea:	e069      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d107      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x398>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	0e9b      	lsrs	r3, r3, #26
 80027fe:	3301      	adds	r3, #1
 8002800:	069b      	lsls	r3, r3, #26
 8002802:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002806:	e00e      	b.n	8002826 <HAL_ADC_ConfigChannel+0x3b6>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280e:	6a3b      	ldr	r3, [r7, #32]
 8002810:	fa93 f3a3 	rbit	r3, r3
 8002814:	61fb      	str	r3, [r7, #28]
  return result;
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	fab3 f383 	clz	r3, r3
 800281c:	b2db      	uxtb	r3, r3
 800281e:	3301      	adds	r3, #1
 8002820:	069b      	lsls	r3, r3, #26
 8002822:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800282e:	2b00      	cmp	r3, #0
 8002830:	d109      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x3d6>
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	0e9b      	lsrs	r3, r3, #26
 8002838:	3301      	adds	r3, #1
 800283a:	f003 031f 	and.w	r3, r3, #31
 800283e:	2101      	movs	r1, #1
 8002840:	fa01 f303 	lsl.w	r3, r1, r3
 8002844:	e010      	b.n	8002868 <HAL_ADC_ConfigChannel+0x3f8>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	fa93 f3a3 	rbit	r3, r3
 8002852:	617b      	str	r3, [r7, #20]
  return result;
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	fab3 f383 	clz	r3, r3
 800285a:	b2db      	uxtb	r3, r3
 800285c:	3301      	adds	r3, #1
 800285e:	f003 031f 	and.w	r3, r3, #31
 8002862:	2101      	movs	r1, #1
 8002864:	fa01 f303 	lsl.w	r3, r1, r3
 8002868:	ea42 0103 	orr.w	r1, r2, r3
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10d      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x424>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	0e9b      	lsrs	r3, r3, #26
 800287e:	3301      	adds	r3, #1
 8002880:	f003 021f 	and.w	r2, r3, #31
 8002884:	4613      	mov	r3, r2
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	4413      	add	r3, r2
 800288a:	3b1e      	subs	r3, #30
 800288c:	051b      	lsls	r3, r3, #20
 800288e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002892:	e014      	b.n	80028be <HAL_ADC_ConfigChannel+0x44e>
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	fa93 f3a3 	rbit	r3, r3
 80028a0:	60fb      	str	r3, [r7, #12]
  return result;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	fab3 f383 	clz	r3, r3
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	3301      	adds	r3, #1
 80028ac:	f003 021f 	and.w	r2, r3, #31
 80028b0:	4613      	mov	r3, r2
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	4413      	add	r3, r2
 80028b6:	3b1e      	subs	r3, #30
 80028b8:	051b      	lsls	r3, r3, #20
 80028ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028be:	430b      	orrs	r3, r1
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	6892      	ldr	r2, [r2, #8]
 80028c4:	4619      	mov	r1, r3
 80028c6:	f7ff fb5e 	bl	8001f86 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f280 80c4 	bge.w	8002a5c <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a65      	ldr	r2, [pc, #404]	; (8002a70 <HAL_ADC_ConfigChannel+0x600>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d004      	beq.n	80028e8 <HAL_ADC_ConfigChannel+0x478>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a64      	ldr	r2, [pc, #400]	; (8002a74 <HAL_ADC_ConfigChannel+0x604>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d101      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x47c>
 80028e8:	4b63      	ldr	r3, [pc, #396]	; (8002a78 <HAL_ADC_ConfigChannel+0x608>)
 80028ea:	e000      	b.n	80028ee <HAL_ADC_ConfigChannel+0x47e>
 80028ec:	4b63      	ldr	r3, [pc, #396]	; (8002a7c <HAL_ADC_ConfigChannel+0x60c>)
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff fac4 	bl	8001e7c <LL_ADC_GetCommonPathInternalCh>
 80028f4:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a5d      	ldr	r2, [pc, #372]	; (8002a70 <HAL_ADC_ConfigChannel+0x600>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d004      	beq.n	800290a <HAL_ADC_ConfigChannel+0x49a>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a5b      	ldr	r2, [pc, #364]	; (8002a74 <HAL_ADC_ConfigChannel+0x604>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d10e      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x4b8>
 800290a:	4859      	ldr	r0, [pc, #356]	; (8002a70 <HAL_ADC_ConfigChannel+0x600>)
 800290c:	f7ff fbd6 	bl	80020bc <LL_ADC_IsEnabled>
 8002910:	4604      	mov	r4, r0
 8002912:	4858      	ldr	r0, [pc, #352]	; (8002a74 <HAL_ADC_ConfigChannel+0x604>)
 8002914:	f7ff fbd2 	bl	80020bc <LL_ADC_IsEnabled>
 8002918:	4603      	mov	r3, r0
 800291a:	4323      	orrs	r3, r4
 800291c:	2b00      	cmp	r3, #0
 800291e:	bf0c      	ite	eq
 8002920:	2301      	moveq	r3, #1
 8002922:	2300      	movne	r3, #0
 8002924:	b2db      	uxtb	r3, r3
 8002926:	e008      	b.n	800293a <HAL_ADC_ConfigChannel+0x4ca>
 8002928:	4855      	ldr	r0, [pc, #340]	; (8002a80 <HAL_ADC_ConfigChannel+0x610>)
 800292a:	f7ff fbc7 	bl	80020bc <LL_ADC_IsEnabled>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	bf0c      	ite	eq
 8002934:	2301      	moveq	r3, #1
 8002936:	2300      	movne	r3, #0
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d07b      	beq.n	8002a36 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a50      	ldr	r2, [pc, #320]	; (8002a84 <HAL_ADC_ConfigChannel+0x614>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d12e      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x536>
 8002948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800294a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d129      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a4a      	ldr	r2, [pc, #296]	; (8002a80 <HAL_ADC_ConfigChannel+0x610>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d17f      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a43      	ldr	r2, [pc, #268]	; (8002a70 <HAL_ADC_ConfigChannel+0x600>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d004      	beq.n	8002970 <HAL_ADC_ConfigChannel+0x500>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a42      	ldr	r2, [pc, #264]	; (8002a74 <HAL_ADC_ConfigChannel+0x604>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d101      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x504>
 8002970:	4a41      	ldr	r2, [pc, #260]	; (8002a78 <HAL_ADC_ConfigChannel+0x608>)
 8002972:	e000      	b.n	8002976 <HAL_ADC_ConfigChannel+0x506>
 8002974:	4a41      	ldr	r2, [pc, #260]	; (8002a7c <HAL_ADC_ConfigChannel+0x60c>)
 8002976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002978:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800297c:	4619      	mov	r1, r3
 800297e:	4610      	mov	r0, r2
 8002980:	f7ff fa69 	bl	8001e56 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002984:	4b40      	ldr	r3, [pc, #256]	; (8002a88 <HAL_ADC_ConfigChannel+0x618>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	099b      	lsrs	r3, r3, #6
 800298a:	4a40      	ldr	r2, [pc, #256]	; (8002a8c <HAL_ADC_ConfigChannel+0x61c>)
 800298c:	fba2 2303 	umull	r2, r3, r2, r3
 8002990:	099b      	lsrs	r3, r3, #6
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002996:	e002      	b.n	800299e <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	3b01      	subs	r3, #1
 800299c:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1f9      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029a4:	e05a      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a39      	ldr	r2, [pc, #228]	; (8002a90 <HAL_ADC_ConfigChannel+0x620>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d11e      	bne.n	80029ee <HAL_ADC_ConfigChannel+0x57e>
 80029b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d119      	bne.n	80029ee <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a30      	ldr	r2, [pc, #192]	; (8002a80 <HAL_ADC_ConfigChannel+0x610>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d14b      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a29      	ldr	r2, [pc, #164]	; (8002a70 <HAL_ADC_ConfigChannel+0x600>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d004      	beq.n	80029d8 <HAL_ADC_ConfigChannel+0x568>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a28      	ldr	r2, [pc, #160]	; (8002a74 <HAL_ADC_ConfigChannel+0x604>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d101      	bne.n	80029dc <HAL_ADC_ConfigChannel+0x56c>
 80029d8:	4a27      	ldr	r2, [pc, #156]	; (8002a78 <HAL_ADC_ConfigChannel+0x608>)
 80029da:	e000      	b.n	80029de <HAL_ADC_ConfigChannel+0x56e>
 80029dc:	4a27      	ldr	r2, [pc, #156]	; (8002a7c <HAL_ADC_ConfigChannel+0x60c>)
 80029de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029e4:	4619      	mov	r1, r3
 80029e6:	4610      	mov	r0, r2
 80029e8:	f7ff fa35 	bl	8001e56 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029ec:	e036      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a28      	ldr	r2, [pc, #160]	; (8002a94 <HAL_ADC_ConfigChannel+0x624>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d131      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x5ec>
 80029f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d12c      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a1e      	ldr	r2, [pc, #120]	; (8002a80 <HAL_ADC_ConfigChannel+0x610>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d127      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a17      	ldr	r2, [pc, #92]	; (8002a70 <HAL_ADC_ConfigChannel+0x600>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d004      	beq.n	8002a20 <HAL_ADC_ConfigChannel+0x5b0>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a16      	ldr	r2, [pc, #88]	; (8002a74 <HAL_ADC_ConfigChannel+0x604>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d101      	bne.n	8002a24 <HAL_ADC_ConfigChannel+0x5b4>
 8002a20:	4a15      	ldr	r2, [pc, #84]	; (8002a78 <HAL_ADC_ConfigChannel+0x608>)
 8002a22:	e000      	b.n	8002a26 <HAL_ADC_ConfigChannel+0x5b6>
 8002a24:	4a15      	ldr	r2, [pc, #84]	; (8002a7c <HAL_ADC_ConfigChannel+0x60c>)
 8002a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4610      	mov	r0, r2
 8002a30:	f7ff fa11 	bl	8001e56 <LL_ADC_SetCommonPathInternalCh>
 8002a34:	e012      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3a:	f043 0220 	orr.w	r2, r3, #32
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002a48:	e008      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4e:	f043 0220 	orr.w	r2, r3, #32
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3764      	adds	r7, #100	; 0x64
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd90      	pop	{r4, r7, pc}
 8002a70:	40022000 	.word	0x40022000
 8002a74:	40022100 	.word	0x40022100
 8002a78:	40022300 	.word	0x40022300
 8002a7c:	58026300 	.word	0x58026300
 8002a80:	58026000 	.word	0x58026000
 8002a84:	cb840000 	.word	0xcb840000
 8002a88:	24000000 	.word	0x24000000
 8002a8c:	053e2d63 	.word	0x053e2d63
 8002a90:	c7520000 	.word	0xc7520000
 8002a94:	cfb80000 	.word	0xcfb80000

08002a98 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a70      	ldr	r2, [pc, #448]	; (8002c68 <ADC_ConfigureBoostMode+0x1d0>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d004      	beq.n	8002ab4 <ADC_ConfigureBoostMode+0x1c>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a6f      	ldr	r2, [pc, #444]	; (8002c6c <ADC_ConfigureBoostMode+0x1d4>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d109      	bne.n	8002ac8 <ADC_ConfigureBoostMode+0x30>
 8002ab4:	4b6e      	ldr	r3, [pc, #440]	; (8002c70 <ADC_ConfigureBoostMode+0x1d8>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	bf14      	ite	ne
 8002ac0:	2301      	movne	r3, #1
 8002ac2:	2300      	moveq	r3, #0
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	e008      	b.n	8002ada <ADC_ConfigureBoostMode+0x42>
 8002ac8:	4b6a      	ldr	r3, [pc, #424]	; (8002c74 <ADC_ConfigureBoostMode+0x1dc>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	bf14      	ite	ne
 8002ad4:	2301      	movne	r3, #1
 8002ad6:	2300      	moveq	r3, #0
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d01a      	beq.n	8002b14 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002ade:	f004 fb93 	bl	8007208 <HAL_RCC_GetHCLKFreq>
 8002ae2:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002aec:	d006      	beq.n	8002afc <ADC_ConfigureBoostMode+0x64>
 8002aee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002af2:	d00b      	beq.n	8002b0c <ADC_ConfigureBoostMode+0x74>
 8002af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af8:	d000      	beq.n	8002afc <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8002afa:	e05d      	b.n	8002bb8 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	0c1b      	lsrs	r3, r3, #16
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b08:	60fb      	str	r3, [r7, #12]
        break;
 8002b0a:	e055      	b.n	8002bb8 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	089b      	lsrs	r3, r3, #2
 8002b10:	60fb      	str	r3, [r7, #12]
        break;
 8002b12:	e051      	b.n	8002bb8 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002b14:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002b18:	f005 fab8 	bl	800808c <HAL_RCCEx_GetPeriphCLKFreq>
 8002b1c:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002b26:	d02a      	beq.n	8002b7e <ADC_ConfigureBoostMode+0xe6>
 8002b28:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002b2c:	d813      	bhi.n	8002b56 <ADC_ConfigureBoostMode+0xbe>
 8002b2e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002b32:	d024      	beq.n	8002b7e <ADC_ConfigureBoostMode+0xe6>
 8002b34:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002b38:	d806      	bhi.n	8002b48 <ADC_ConfigureBoostMode+0xb0>
 8002b3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b3e:	d01e      	beq.n	8002b7e <ADC_ConfigureBoostMode+0xe6>
 8002b40:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b44:	d01b      	beq.n	8002b7e <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8002b46:	e037      	b.n	8002bb8 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002b48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b4c:	d017      	beq.n	8002b7e <ADC_ConfigureBoostMode+0xe6>
 8002b4e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002b52:	d014      	beq.n	8002b7e <ADC_ConfigureBoostMode+0xe6>
        break;
 8002b54:	e030      	b.n	8002bb8 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002b56:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002b5a:	d021      	beq.n	8002ba0 <ADC_ConfigureBoostMode+0x108>
 8002b5c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002b60:	d806      	bhi.n	8002b70 <ADC_ConfigureBoostMode+0xd8>
 8002b62:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002b66:	d013      	beq.n	8002b90 <ADC_ConfigureBoostMode+0xf8>
 8002b68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b6c:	d014      	beq.n	8002b98 <ADC_ConfigureBoostMode+0x100>
        break;
 8002b6e:	e023      	b.n	8002bb8 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002b70:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002b74:	d018      	beq.n	8002ba8 <ADC_ConfigureBoostMode+0x110>
 8002b76:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002b7a:	d019      	beq.n	8002bb0 <ADC_ConfigureBoostMode+0x118>
        break;
 8002b7c:	e01c      	b.n	8002bb8 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	0c9b      	lsrs	r3, r3, #18
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8c:	60fb      	str	r3, [r7, #12]
        break;
 8002b8e:	e013      	b.n	8002bb8 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	091b      	lsrs	r3, r3, #4
 8002b94:	60fb      	str	r3, [r7, #12]
      break;
 8002b96:	e00f      	b.n	8002bb8 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	095b      	lsrs	r3, r3, #5
 8002b9c:	60fb      	str	r3, [r7, #12]
        break;
 8002b9e:	e00b      	b.n	8002bb8 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	099b      	lsrs	r3, r3, #6
 8002ba4:	60fb      	str	r3, [r7, #12]
        break;
 8002ba6:	e007      	b.n	8002bb8 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	09db      	lsrs	r3, r3, #7
 8002bac:	60fb      	str	r3, [r7, #12]
        break;
 8002bae:	e003      	b.n	8002bb8 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	0a1b      	lsrs	r3, r3, #8
 8002bb4:	60fb      	str	r3, [r7, #12]
        break;
 8002bb6:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002bb8:	f7ff f918 	bl	8001dec <HAL_GetREVID>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	f241 0303 	movw	r3, #4099	; 0x1003
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d815      	bhi.n	8002bf2 <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	4a2b      	ldr	r2, [pc, #172]	; (8002c78 <ADC_ConfigureBoostMode+0x1e0>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d908      	bls.n	8002be0 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bdc:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002bde:	e03e      	b.n	8002c5e <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bee:	609a      	str	r2, [r3, #8]
}
 8002bf0:	e035      	b.n	8002c5e <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	085b      	lsrs	r3, r3, #1
 8002bf6:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4a20      	ldr	r2, [pc, #128]	; (8002c7c <ADC_ConfigureBoostMode+0x1e4>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d808      	bhi.n	8002c12 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689a      	ldr	r2, [r3, #8]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002c0e:	609a      	str	r2, [r3, #8]
}
 8002c10:	e025      	b.n	8002c5e <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	4a1a      	ldr	r2, [pc, #104]	; (8002c80 <ADC_ConfigureBoostMode+0x1e8>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d80a      	bhi.n	8002c30 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c2c:	609a      	str	r2, [r3, #8]
}
 8002c2e:	e016      	b.n	8002c5e <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4a14      	ldr	r2, [pc, #80]	; (8002c84 <ADC_ConfigureBoostMode+0x1ec>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d80a      	bhi.n	8002c4e <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c4a:	609a      	str	r2, [r3, #8]
}
 8002c4c:	e007      	b.n	8002c5e <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002c5c:	609a      	str	r2, [r3, #8]
}
 8002c5e:	bf00      	nop
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40022000 	.word	0x40022000
 8002c6c:	40022100 	.word	0x40022100
 8002c70:	40022300 	.word	0x40022300
 8002c74:	58026300 	.word	0x58026300
 8002c78:	01312d00 	.word	0x01312d00
 8002c7c:	005f5e10 	.word	0x005f5e10
 8002c80:	00bebc20 	.word	0x00bebc20
 8002c84:	017d7840 	.word	0x017d7840

08002c88 <LL_ADC_IsEnabled>:
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d101      	bne.n	8002ca0 <LL_ADC_IsEnabled+0x18>
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e000      	b.n	8002ca2 <LL_ADC_IsEnabled+0x1a>
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <LL_ADC_REG_IsConversionOngoing>:
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 0304 	and.w	r3, r3, #4
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d101      	bne.n	8002cc6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e000      	b.n	8002cc8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002cd4:	b590      	push	{r4, r7, lr}
 8002cd6:	b09f      	sub	sp, #124	; 0x7c
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d101      	bne.n	8002cf2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e0ba      	b.n	8002e68 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a5c      	ldr	r2, [pc, #368]	; (8002e70 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d102      	bne.n	8002d0a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002d04:	4b5b      	ldr	r3, [pc, #364]	; (8002e74 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002d06:	60bb      	str	r3, [r7, #8]
 8002d08:	e001      	b.n	8002d0e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10b      	bne.n	8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d18:	f043 0220 	orr.w	r2, r3, #32
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e09d      	b.n	8002e68 <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff ffbd 	bl	8002cae <LL_ADC_REG_IsConversionOngoing>
 8002d34:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff ffb7 	bl	8002cae <LL_ADC_REG_IsConversionOngoing>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d17f      	bne.n	8002e46 <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002d46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d17c      	bne.n	8002e46 <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a47      	ldr	r2, [pc, #284]	; (8002e70 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d004      	beq.n	8002d60 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a46      	ldr	r2, [pc, #280]	; (8002e74 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d101      	bne.n	8002d64 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8002d60:	4b45      	ldr	r3, [pc, #276]	; (8002e78 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002d62:	e000      	b.n	8002d66 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8002d64:	4b45      	ldr	r3, [pc, #276]	; (8002e7c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002d66:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d039      	beq.n	8002de4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d80:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a3a      	ldr	r2, [pc, #232]	; (8002e70 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d004      	beq.n	8002d96 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a38      	ldr	r2, [pc, #224]	; (8002e74 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d10e      	bne.n	8002db4 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8002d96:	4836      	ldr	r0, [pc, #216]	; (8002e70 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002d98:	f7ff ff76 	bl	8002c88 <LL_ADC_IsEnabled>
 8002d9c:	4604      	mov	r4, r0
 8002d9e:	4835      	ldr	r0, [pc, #212]	; (8002e74 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002da0:	f7ff ff72 	bl	8002c88 <LL_ADC_IsEnabled>
 8002da4:	4603      	mov	r3, r0
 8002da6:	4323      	orrs	r3, r4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	bf0c      	ite	eq
 8002dac:	2301      	moveq	r3, #1
 8002dae:	2300      	movne	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	e008      	b.n	8002dc6 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8002db4:	4832      	ldr	r0, [pc, #200]	; (8002e80 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002db6:	f7ff ff67 	bl	8002c88 <LL_ADC_IsEnabled>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	bf0c      	ite	eq
 8002dc0:	2301      	moveq	r3, #1
 8002dc2:	2300      	movne	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d047      	beq.n	8002e5a <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	4b2d      	ldr	r3, [pc, #180]	; (8002e84 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	6811      	ldr	r1, [r2, #0]
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	6892      	ldr	r2, [r2, #8]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002de0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002de2:	e03a      	b.n	8002e5a <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dee:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a1e      	ldr	r2, [pc, #120]	; (8002e70 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d004      	beq.n	8002e04 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a1d      	ldr	r2, [pc, #116]	; (8002e74 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d10e      	bne.n	8002e22 <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8002e04:	481a      	ldr	r0, [pc, #104]	; (8002e70 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002e06:	f7ff ff3f 	bl	8002c88 <LL_ADC_IsEnabled>
 8002e0a:	4604      	mov	r4, r0
 8002e0c:	4819      	ldr	r0, [pc, #100]	; (8002e74 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002e0e:	f7ff ff3b 	bl	8002c88 <LL_ADC_IsEnabled>
 8002e12:	4603      	mov	r3, r0
 8002e14:	4323      	orrs	r3, r4
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	bf0c      	ite	eq
 8002e1a:	2301      	moveq	r3, #1
 8002e1c:	2300      	movne	r3, #0
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	e008      	b.n	8002e34 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 8002e22:	4817      	ldr	r0, [pc, #92]	; (8002e80 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002e24:	f7ff ff30 	bl	8002c88 <LL_ADC_IsEnabled>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	bf0c      	ite	eq
 8002e2e:	2301      	moveq	r3, #1
 8002e30:	2300      	movne	r3, #0
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d010      	beq.n	8002e5a <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002e3e:	4013      	ands	r3, r2
 8002e40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e42:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e44:	e009      	b.n	8002e5a <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e4a:	f043 0220 	orr.w	r2, r3, #32
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002e58:	e000      	b.n	8002e5c <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e5a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e64:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	377c      	adds	r7, #124	; 0x7c
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd90      	pop	{r4, r7, pc}
 8002e70:	40022000 	.word	0x40022000
 8002e74:	40022100 	.word	0x40022100
 8002e78:	40022300 	.word	0x40022300
 8002e7c:	58026300 	.word	0x58026300
 8002e80:	58026000 	.word	0x58026000
 8002e84:	fffff0e0 	.word	0xfffff0e0

08002e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e98:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <__NVIC_SetPriorityGrouping+0x40>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e9e:	68ba      	ldr	r2, [r7, #8]
 8002ea0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002eb0:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <__NVIC_SetPriorityGrouping+0x44>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eb6:	4a04      	ldr	r2, [pc, #16]	; (8002ec8 <__NVIC_SetPriorityGrouping+0x40>)
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	60d3      	str	r3, [r2, #12]
}
 8002ebc:	bf00      	nop
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	e000ed00 	.word	0xe000ed00
 8002ecc:	05fa0000 	.word	0x05fa0000

08002ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ed4:	4b04      	ldr	r3, [pc, #16]	; (8002ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	0a1b      	lsrs	r3, r3, #8
 8002eda:	f003 0307 	and.w	r3, r3, #7
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	e000ed00 	.word	0xe000ed00

08002eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ef6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	db0b      	blt.n	8002f16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002efe:	88fb      	ldrh	r3, [r7, #6]
 8002f00:	f003 021f 	and.w	r2, r3, #31
 8002f04:	4907      	ldr	r1, [pc, #28]	; (8002f24 <__NVIC_EnableIRQ+0x38>)
 8002f06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f0a:	095b      	lsrs	r3, r3, #5
 8002f0c:	2001      	movs	r0, #1
 8002f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	e000e100 	.word	0xe000e100

08002f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	6039      	str	r1, [r7, #0]
 8002f32:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	db0a      	blt.n	8002f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	490c      	ldr	r1, [pc, #48]	; (8002f74 <__NVIC_SetPriority+0x4c>)
 8002f42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f46:	0112      	lsls	r2, r2, #4
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	440b      	add	r3, r1
 8002f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f50:	e00a      	b.n	8002f68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	4908      	ldr	r1, [pc, #32]	; (8002f78 <__NVIC_SetPriority+0x50>)
 8002f58:	88fb      	ldrh	r3, [r7, #6]
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	3b04      	subs	r3, #4
 8002f60:	0112      	lsls	r2, r2, #4
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	440b      	add	r3, r1
 8002f66:	761a      	strb	r2, [r3, #24]
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	e000e100 	.word	0xe000e100
 8002f78:	e000ed00 	.word	0xe000ed00

08002f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b089      	sub	sp, #36	; 0x24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	f1c3 0307 	rsb	r3, r3, #7
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	bf28      	it	cs
 8002f9a:	2304      	movcs	r3, #4
 8002f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	2b06      	cmp	r3, #6
 8002fa4:	d902      	bls.n	8002fac <NVIC_EncodePriority+0x30>
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	3b03      	subs	r3, #3
 8002faa:	e000      	b.n	8002fae <NVIC_EncodePriority+0x32>
 8002fac:	2300      	movs	r3, #0
 8002fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	43da      	mvns	r2, r3
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	401a      	ands	r2, r3
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	fa01 f303 	lsl.w	r3, r1, r3
 8002fce:	43d9      	mvns	r1, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd4:	4313      	orrs	r3, r2
         );
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3724      	adds	r7, #36	; 0x24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
	...

08002fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ff4:	d301      	bcc.n	8002ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e00f      	b.n	800301a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ffa:	4a0a      	ldr	r2, [pc, #40]	; (8003024 <SysTick_Config+0x40>)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003002:	210f      	movs	r1, #15
 8003004:	f04f 30ff 	mov.w	r0, #4294967295
 8003008:	f7ff ff8e 	bl	8002f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800300c:	4b05      	ldr	r3, [pc, #20]	; (8003024 <SysTick_Config+0x40>)
 800300e:	2200      	movs	r2, #0
 8003010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003012:	4b04      	ldr	r3, [pc, #16]	; (8003024 <SysTick_Config+0x40>)
 8003014:	2207      	movs	r2, #7
 8003016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	e000e010 	.word	0xe000e010

08003028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff ff29 	bl	8002e88 <__NVIC_SetPriorityGrouping>
}
 8003036:	bf00      	nop
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b086      	sub	sp, #24
 8003042:	af00      	add	r7, sp, #0
 8003044:	4603      	mov	r3, r0
 8003046:	60b9      	str	r1, [r7, #8]
 8003048:	607a      	str	r2, [r7, #4]
 800304a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800304c:	f7ff ff40 	bl	8002ed0 <__NVIC_GetPriorityGrouping>
 8003050:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	6978      	ldr	r0, [r7, #20]
 8003058:	f7ff ff90 	bl	8002f7c <NVIC_EncodePriority>
 800305c:	4602      	mov	r2, r0
 800305e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003062:	4611      	mov	r1, r2
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff ff5f 	bl	8002f28 <__NVIC_SetPriority>
}
 800306a:	bf00      	nop
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	af00      	add	r7, sp, #0
 8003078:	4603      	mov	r3, r0
 800307a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800307c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff ff33 	bl	8002eec <__NVIC_EnableIRQ>
}
 8003086:	bf00      	nop
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b082      	sub	sp, #8
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7ff ffa4 	bl	8002fe4 <SysTick_Config>
 800309c:	4603      	mov	r3, r0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80030b0:	f7fe fe6e 	bl	8001d90 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d101      	bne.n	80030c0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e2e5      	b.n	800368c <HAL_DMA_Init+0x5e4>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a66      	ldr	r2, [pc, #408]	; (8003260 <HAL_DMA_Init+0x1b8>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d04a      	beq.n	8003160 <HAL_DMA_Init+0xb8>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a65      	ldr	r2, [pc, #404]	; (8003264 <HAL_DMA_Init+0x1bc>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d045      	beq.n	8003160 <HAL_DMA_Init+0xb8>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a63      	ldr	r2, [pc, #396]	; (8003268 <HAL_DMA_Init+0x1c0>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d040      	beq.n	8003160 <HAL_DMA_Init+0xb8>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a62      	ldr	r2, [pc, #392]	; (800326c <HAL_DMA_Init+0x1c4>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d03b      	beq.n	8003160 <HAL_DMA_Init+0xb8>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a60      	ldr	r2, [pc, #384]	; (8003270 <HAL_DMA_Init+0x1c8>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d036      	beq.n	8003160 <HAL_DMA_Init+0xb8>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a5f      	ldr	r2, [pc, #380]	; (8003274 <HAL_DMA_Init+0x1cc>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d031      	beq.n	8003160 <HAL_DMA_Init+0xb8>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a5d      	ldr	r2, [pc, #372]	; (8003278 <HAL_DMA_Init+0x1d0>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d02c      	beq.n	8003160 <HAL_DMA_Init+0xb8>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a5c      	ldr	r2, [pc, #368]	; (800327c <HAL_DMA_Init+0x1d4>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d027      	beq.n	8003160 <HAL_DMA_Init+0xb8>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a5a      	ldr	r2, [pc, #360]	; (8003280 <HAL_DMA_Init+0x1d8>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d022      	beq.n	8003160 <HAL_DMA_Init+0xb8>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a59      	ldr	r2, [pc, #356]	; (8003284 <HAL_DMA_Init+0x1dc>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d01d      	beq.n	8003160 <HAL_DMA_Init+0xb8>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a57      	ldr	r2, [pc, #348]	; (8003288 <HAL_DMA_Init+0x1e0>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d018      	beq.n	8003160 <HAL_DMA_Init+0xb8>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a56      	ldr	r2, [pc, #344]	; (800328c <HAL_DMA_Init+0x1e4>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d013      	beq.n	8003160 <HAL_DMA_Init+0xb8>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a54      	ldr	r2, [pc, #336]	; (8003290 <HAL_DMA_Init+0x1e8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d00e      	beq.n	8003160 <HAL_DMA_Init+0xb8>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a53      	ldr	r2, [pc, #332]	; (8003294 <HAL_DMA_Init+0x1ec>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d009      	beq.n	8003160 <HAL_DMA_Init+0xb8>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a51      	ldr	r2, [pc, #324]	; (8003298 <HAL_DMA_Init+0x1f0>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d004      	beq.n	8003160 <HAL_DMA_Init+0xb8>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a50      	ldr	r2, [pc, #320]	; (800329c <HAL_DMA_Init+0x1f4>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d101      	bne.n	8003164 <HAL_DMA_Init+0xbc>
 8003160:	2301      	movs	r3, #1
 8003162:	e000      	b.n	8003166 <HAL_DMA_Init+0xbe>
 8003164:	2300      	movs	r3, #0
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 810b 	beq.w	8003382 <HAL_DMA_Init+0x2da>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2202      	movs	r2, #2
 8003178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a37      	ldr	r2, [pc, #220]	; (8003260 <HAL_DMA_Init+0x1b8>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d04a      	beq.n	800321c <HAL_DMA_Init+0x174>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a36      	ldr	r2, [pc, #216]	; (8003264 <HAL_DMA_Init+0x1bc>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d045      	beq.n	800321c <HAL_DMA_Init+0x174>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a34      	ldr	r2, [pc, #208]	; (8003268 <HAL_DMA_Init+0x1c0>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d040      	beq.n	800321c <HAL_DMA_Init+0x174>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a33      	ldr	r2, [pc, #204]	; (800326c <HAL_DMA_Init+0x1c4>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d03b      	beq.n	800321c <HAL_DMA_Init+0x174>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a31      	ldr	r2, [pc, #196]	; (8003270 <HAL_DMA_Init+0x1c8>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d036      	beq.n	800321c <HAL_DMA_Init+0x174>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a30      	ldr	r2, [pc, #192]	; (8003274 <HAL_DMA_Init+0x1cc>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d031      	beq.n	800321c <HAL_DMA_Init+0x174>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a2e      	ldr	r2, [pc, #184]	; (8003278 <HAL_DMA_Init+0x1d0>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d02c      	beq.n	800321c <HAL_DMA_Init+0x174>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a2d      	ldr	r2, [pc, #180]	; (800327c <HAL_DMA_Init+0x1d4>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d027      	beq.n	800321c <HAL_DMA_Init+0x174>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a2b      	ldr	r2, [pc, #172]	; (8003280 <HAL_DMA_Init+0x1d8>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d022      	beq.n	800321c <HAL_DMA_Init+0x174>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a2a      	ldr	r2, [pc, #168]	; (8003284 <HAL_DMA_Init+0x1dc>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d01d      	beq.n	800321c <HAL_DMA_Init+0x174>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a28      	ldr	r2, [pc, #160]	; (8003288 <HAL_DMA_Init+0x1e0>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d018      	beq.n	800321c <HAL_DMA_Init+0x174>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a27      	ldr	r2, [pc, #156]	; (800328c <HAL_DMA_Init+0x1e4>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d013      	beq.n	800321c <HAL_DMA_Init+0x174>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a25      	ldr	r2, [pc, #148]	; (8003290 <HAL_DMA_Init+0x1e8>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d00e      	beq.n	800321c <HAL_DMA_Init+0x174>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a24      	ldr	r2, [pc, #144]	; (8003294 <HAL_DMA_Init+0x1ec>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d009      	beq.n	800321c <HAL_DMA_Init+0x174>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a22      	ldr	r2, [pc, #136]	; (8003298 <HAL_DMA_Init+0x1f0>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d004      	beq.n	800321c <HAL_DMA_Init+0x174>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a21      	ldr	r2, [pc, #132]	; (800329c <HAL_DMA_Init+0x1f4>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d108      	bne.n	800322e <HAL_DMA_Init+0x186>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 0201 	bic.w	r2, r2, #1
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	e007      	b.n	800323e <HAL_DMA_Init+0x196>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0201 	bic.w	r2, r2, #1
 800323c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800323e:	e02f      	b.n	80032a0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003240:	f7fe fda6 	bl	8001d90 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b05      	cmp	r3, #5
 800324c:	d928      	bls.n	80032a0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2220      	movs	r2, #32
 8003252:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2203      	movs	r2, #3
 8003258:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e215      	b.n	800368c <HAL_DMA_Init+0x5e4>
 8003260:	40020010 	.word	0x40020010
 8003264:	40020028 	.word	0x40020028
 8003268:	40020040 	.word	0x40020040
 800326c:	40020058 	.word	0x40020058
 8003270:	40020070 	.word	0x40020070
 8003274:	40020088 	.word	0x40020088
 8003278:	400200a0 	.word	0x400200a0
 800327c:	400200b8 	.word	0x400200b8
 8003280:	40020410 	.word	0x40020410
 8003284:	40020428 	.word	0x40020428
 8003288:	40020440 	.word	0x40020440
 800328c:	40020458 	.word	0x40020458
 8003290:	40020470 	.word	0x40020470
 8003294:	40020488 	.word	0x40020488
 8003298:	400204a0 	.word	0x400204a0
 800329c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1c8      	bne.n	8003240 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	4b8c      	ldr	r3, [pc, #560]	; (80034ec <HAL_DMA_Init+0x444>)
 80032ba:	4013      	ands	r3, r2
 80032bc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80032c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032d2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032de:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	d107      	bne.n	8003304 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fc:	4313      	orrs	r3, r2
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	4313      	orrs	r3, r2
 8003302:	617b      	str	r3, [r7, #20]
    }

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f023 0307 	bic.w	r3, r3, #7
 800331a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	4313      	orrs	r3, r2
 8003324:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	2b04      	cmp	r3, #4
 800332c:	d117      	bne.n	800335e <HAL_DMA_Init+0x2b6>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	4313      	orrs	r3, r2
 8003336:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00e      	beq.n	800335e <HAL_DMA_Init+0x2b6>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f001 f9b3 	bl	80046ac <DMA_CheckFifoParam>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d008      	beq.n	800335e <HAL_DMA_Init+0x2b6>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2240      	movs	r2, #64	; 0x40
 8003350:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e196      	b.n	800368c <HAL_DMA_Init+0x5e4>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f001 f8ee 	bl	8004548 <DMA_CalcBaseAndBitshift>
 800336c:	4603      	mov	r3, r0
 800336e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003374:	f003 031f 	and.w	r3, r3, #31
 8003378:	223f      	movs	r2, #63	; 0x3f
 800337a:	409a      	lsls	r2, r3
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	609a      	str	r2, [r3, #8]
 8003380:	e0cc      	b.n	800351c <HAL_DMA_Init+0x474>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a5a      	ldr	r2, [pc, #360]	; (80034f0 <HAL_DMA_Init+0x448>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d022      	beq.n	80033d2 <HAL_DMA_Init+0x32a>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a58      	ldr	r2, [pc, #352]	; (80034f4 <HAL_DMA_Init+0x44c>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d01d      	beq.n	80033d2 <HAL_DMA_Init+0x32a>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a57      	ldr	r2, [pc, #348]	; (80034f8 <HAL_DMA_Init+0x450>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d018      	beq.n	80033d2 <HAL_DMA_Init+0x32a>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a55      	ldr	r2, [pc, #340]	; (80034fc <HAL_DMA_Init+0x454>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d013      	beq.n	80033d2 <HAL_DMA_Init+0x32a>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a54      	ldr	r2, [pc, #336]	; (8003500 <HAL_DMA_Init+0x458>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d00e      	beq.n	80033d2 <HAL_DMA_Init+0x32a>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a52      	ldr	r2, [pc, #328]	; (8003504 <HAL_DMA_Init+0x45c>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d009      	beq.n	80033d2 <HAL_DMA_Init+0x32a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a51      	ldr	r2, [pc, #324]	; (8003508 <HAL_DMA_Init+0x460>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d004      	beq.n	80033d2 <HAL_DMA_Init+0x32a>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a4f      	ldr	r2, [pc, #316]	; (800350c <HAL_DMA_Init+0x464>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d101      	bne.n	80033d6 <HAL_DMA_Init+0x32e>
 80033d2:	2301      	movs	r3, #1
 80033d4:	e000      	b.n	80033d8 <HAL_DMA_Init+0x330>
 80033d6:	2300      	movs	r3, #0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d07e      	beq.n	80034da <HAL_DMA_Init+0x432>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a43      	ldr	r2, [pc, #268]	; (80034f0 <HAL_DMA_Init+0x448>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d021      	beq.n	800342a <HAL_DMA_Init+0x382>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a42      	ldr	r2, [pc, #264]	; (80034f4 <HAL_DMA_Init+0x44c>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d01c      	beq.n	800342a <HAL_DMA_Init+0x382>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a40      	ldr	r2, [pc, #256]	; (80034f8 <HAL_DMA_Init+0x450>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d017      	beq.n	800342a <HAL_DMA_Init+0x382>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a3f      	ldr	r2, [pc, #252]	; (80034fc <HAL_DMA_Init+0x454>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d012      	beq.n	800342a <HAL_DMA_Init+0x382>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a3d      	ldr	r2, [pc, #244]	; (8003500 <HAL_DMA_Init+0x458>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d00d      	beq.n	800342a <HAL_DMA_Init+0x382>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a3c      	ldr	r2, [pc, #240]	; (8003504 <HAL_DMA_Init+0x45c>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d008      	beq.n	800342a <HAL_DMA_Init+0x382>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a3a      	ldr	r2, [pc, #232]	; (8003508 <HAL_DMA_Init+0x460>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d003      	beq.n	800342a <HAL_DMA_Init+0x382>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a39      	ldr	r2, [pc, #228]	; (800350c <HAL_DMA_Init+0x464>)
 8003428:	4293      	cmp	r3, r2
 800342a:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2202      	movs	r2, #2
 8003438:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	4b32      	ldr	r3, [pc, #200]	; (8003510 <HAL_DMA_Init+0x468>)
 8003448:	4013      	ands	r3, r2
 800344a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2b40      	cmp	r3, #64	; 0x40
 8003452:	d008      	beq.n	8003466 <HAL_DMA_Init+0x3be>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	2b80      	cmp	r3, #128	; 0x80
 800345a:	d102      	bne.n	8003462 <HAL_DMA_Init+0x3ba>
 800345c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003460:	e002      	b.n	8003468 <HAL_DMA_Init+0x3c0>
 8003462:	2300      	movs	r3, #0
 8003464:	e000      	b.n	8003468 <HAL_DMA_Init+0x3c0>
 8003466:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	68d2      	ldr	r2, [r2, #12]
 800346c:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800346e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003476:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800347e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003486:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	69db      	ldr	r3, [r3, #28]
 800348c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800348e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003496:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	4313      	orrs	r3, r2
 800349c:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	461a      	mov	r2, r3
 80034ac:	4b19      	ldr	r3, [pc, #100]	; (8003514 <HAL_DMA_Init+0x46c>)
 80034ae:	4413      	add	r3, r2
 80034b0:	4a19      	ldr	r2, [pc, #100]	; (8003518 <HAL_DMA_Init+0x470>)
 80034b2:	fba2 2303 	umull	r2, r3, r2, r3
 80034b6:	091b      	lsrs	r3, r3, #4
 80034b8:	009a      	lsls	r2, r3, #2
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f001 f842 	bl	8004548 <DMA_CalcBaseAndBitshift>
 80034c4:	4603      	mov	r3, r0
 80034c6:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034cc:	f003 031f 	and.w	r3, r3, #31
 80034d0:	2201      	movs	r2, #1
 80034d2:	409a      	lsls	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	605a      	str	r2, [r3, #4]
 80034d8:	e020      	b.n	800351c <HAL_DMA_Init+0x474>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2240      	movs	r2, #64	; 0x40
 80034de:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2203      	movs	r2, #3
 80034e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e0cf      	b.n	800368c <HAL_DMA_Init+0x5e4>
 80034ec:	fe10803f 	.word	0xfe10803f
 80034f0:	58025408 	.word	0x58025408
 80034f4:	5802541c 	.word	0x5802541c
 80034f8:	58025430 	.word	0x58025430
 80034fc:	58025444 	.word	0x58025444
 8003500:	58025458 	.word	0x58025458
 8003504:	5802546c 	.word	0x5802546c
 8003508:	58025480 	.word	0x58025480
 800350c:	58025494 	.word	0x58025494
 8003510:	fffe000f 	.word	0xfffe000f
 8003514:	a7fdabf8 	.word	0xa7fdabf8
 8003518:	cccccccd 	.word	0xcccccccd
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a5c      	ldr	r2, [pc, #368]	; (8003694 <HAL_DMA_Init+0x5ec>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d072      	beq.n	800360c <HAL_DMA_Init+0x564>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a5b      	ldr	r2, [pc, #364]	; (8003698 <HAL_DMA_Init+0x5f0>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d06d      	beq.n	800360c <HAL_DMA_Init+0x564>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a59      	ldr	r2, [pc, #356]	; (800369c <HAL_DMA_Init+0x5f4>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d068      	beq.n	800360c <HAL_DMA_Init+0x564>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a58      	ldr	r2, [pc, #352]	; (80036a0 <HAL_DMA_Init+0x5f8>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d063      	beq.n	800360c <HAL_DMA_Init+0x564>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a56      	ldr	r2, [pc, #344]	; (80036a4 <HAL_DMA_Init+0x5fc>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d05e      	beq.n	800360c <HAL_DMA_Init+0x564>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a55      	ldr	r2, [pc, #340]	; (80036a8 <HAL_DMA_Init+0x600>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d059      	beq.n	800360c <HAL_DMA_Init+0x564>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a53      	ldr	r2, [pc, #332]	; (80036ac <HAL_DMA_Init+0x604>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d054      	beq.n	800360c <HAL_DMA_Init+0x564>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a52      	ldr	r2, [pc, #328]	; (80036b0 <HAL_DMA_Init+0x608>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d04f      	beq.n	800360c <HAL_DMA_Init+0x564>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a50      	ldr	r2, [pc, #320]	; (80036b4 <HAL_DMA_Init+0x60c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d04a      	beq.n	800360c <HAL_DMA_Init+0x564>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a4f      	ldr	r2, [pc, #316]	; (80036b8 <HAL_DMA_Init+0x610>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d045      	beq.n	800360c <HAL_DMA_Init+0x564>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a4d      	ldr	r2, [pc, #308]	; (80036bc <HAL_DMA_Init+0x614>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d040      	beq.n	800360c <HAL_DMA_Init+0x564>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a4c      	ldr	r2, [pc, #304]	; (80036c0 <HAL_DMA_Init+0x618>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d03b      	beq.n	800360c <HAL_DMA_Init+0x564>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a4a      	ldr	r2, [pc, #296]	; (80036c4 <HAL_DMA_Init+0x61c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d036      	beq.n	800360c <HAL_DMA_Init+0x564>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a49      	ldr	r2, [pc, #292]	; (80036c8 <HAL_DMA_Init+0x620>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d031      	beq.n	800360c <HAL_DMA_Init+0x564>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a47      	ldr	r2, [pc, #284]	; (80036cc <HAL_DMA_Init+0x624>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d02c      	beq.n	800360c <HAL_DMA_Init+0x564>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a46      	ldr	r2, [pc, #280]	; (80036d0 <HAL_DMA_Init+0x628>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d027      	beq.n	800360c <HAL_DMA_Init+0x564>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a44      	ldr	r2, [pc, #272]	; (80036d4 <HAL_DMA_Init+0x62c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d022      	beq.n	800360c <HAL_DMA_Init+0x564>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a43      	ldr	r2, [pc, #268]	; (80036d8 <HAL_DMA_Init+0x630>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d01d      	beq.n	800360c <HAL_DMA_Init+0x564>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a41      	ldr	r2, [pc, #260]	; (80036dc <HAL_DMA_Init+0x634>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d018      	beq.n	800360c <HAL_DMA_Init+0x564>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a40      	ldr	r2, [pc, #256]	; (80036e0 <HAL_DMA_Init+0x638>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d013      	beq.n	800360c <HAL_DMA_Init+0x564>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a3e      	ldr	r2, [pc, #248]	; (80036e4 <HAL_DMA_Init+0x63c>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d00e      	beq.n	800360c <HAL_DMA_Init+0x564>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a3d      	ldr	r2, [pc, #244]	; (80036e8 <HAL_DMA_Init+0x640>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d009      	beq.n	800360c <HAL_DMA_Init+0x564>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a3b      	ldr	r2, [pc, #236]	; (80036ec <HAL_DMA_Init+0x644>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d004      	beq.n	800360c <HAL_DMA_Init+0x564>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a3a      	ldr	r2, [pc, #232]	; (80036f0 <HAL_DMA_Init+0x648>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d101      	bne.n	8003610 <HAL_DMA_Init+0x568>
 800360c:	2301      	movs	r3, #1
 800360e:	e000      	b.n	8003612 <HAL_DMA_Init+0x56a>
 8003610:	2300      	movs	r3, #0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d032      	beq.n	800367c <HAL_DMA_Init+0x5d4>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f001 f8c4 	bl	80047a4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	2b80      	cmp	r3, #128	; 0x80
 8003622:	d102      	bne.n	800362a <HAL_DMA_Init+0x582>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003632:	b2d2      	uxtb	r2, r2
 8003634:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800363e:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d010      	beq.n	800366a <HAL_DMA_Init+0x5c2>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	2b08      	cmp	r3, #8
 800364e:	d80c      	bhi.n	800366a <HAL_DMA_Init+0x5c2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f001 f941 	bl	80048d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800365a:	2200      	movs	r2, #0
 800365c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003666:	605a      	str	r2, [r3, #4]
 8003668:	e008      	b.n	800367c <HAL_DMA_Init+0x5d4>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40020010 	.word	0x40020010
 8003698:	40020028 	.word	0x40020028
 800369c:	40020040 	.word	0x40020040
 80036a0:	40020058 	.word	0x40020058
 80036a4:	40020070 	.word	0x40020070
 80036a8:	40020088 	.word	0x40020088
 80036ac:	400200a0 	.word	0x400200a0
 80036b0:	400200b8 	.word	0x400200b8
 80036b4:	40020410 	.word	0x40020410
 80036b8:	40020428 	.word	0x40020428
 80036bc:	40020440 	.word	0x40020440
 80036c0:	40020458 	.word	0x40020458
 80036c4:	40020470 	.word	0x40020470
 80036c8:	40020488 	.word	0x40020488
 80036cc:	400204a0 	.word	0x400204a0
 80036d0:	400204b8 	.word	0x400204b8
 80036d4:	58025408 	.word	0x58025408
 80036d8:	5802541c 	.word	0x5802541c
 80036dc:	58025430 	.word	0x58025430
 80036e0:	58025444 	.word	0x58025444
 80036e4:	58025458 	.word	0x58025458
 80036e8:	5802546c 	.word	0x5802546c
 80036ec:	58025480 	.word	0x58025480
 80036f0:	58025494 	.word	0x58025494

080036f4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b08a      	sub	sp, #40	; 0x28
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003700:	4b67      	ldr	r3, [pc, #412]	; (80038a0 <HAL_DMA_IRQHandler+0x1ac>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a67      	ldr	r2, [pc, #412]	; (80038a4 <HAL_DMA_IRQHandler+0x1b0>)
 8003706:	fba2 2303 	umull	r2, r3, r2, r3
 800370a:	0a9b      	lsrs	r3, r3, #10
 800370c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003712:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003718:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800371a:	6a3b      	ldr	r3, [r7, #32]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a5f      	ldr	r2, [pc, #380]	; (80038a8 <HAL_DMA_IRQHandler+0x1b4>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d04a      	beq.n	80037c6 <HAL_DMA_IRQHandler+0xd2>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a5d      	ldr	r2, [pc, #372]	; (80038ac <HAL_DMA_IRQHandler+0x1b8>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d045      	beq.n	80037c6 <HAL_DMA_IRQHandler+0xd2>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a5c      	ldr	r2, [pc, #368]	; (80038b0 <HAL_DMA_IRQHandler+0x1bc>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d040      	beq.n	80037c6 <HAL_DMA_IRQHandler+0xd2>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a5a      	ldr	r2, [pc, #360]	; (80038b4 <HAL_DMA_IRQHandler+0x1c0>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d03b      	beq.n	80037c6 <HAL_DMA_IRQHandler+0xd2>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a59      	ldr	r2, [pc, #356]	; (80038b8 <HAL_DMA_IRQHandler+0x1c4>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d036      	beq.n	80037c6 <HAL_DMA_IRQHandler+0xd2>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a57      	ldr	r2, [pc, #348]	; (80038bc <HAL_DMA_IRQHandler+0x1c8>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d031      	beq.n	80037c6 <HAL_DMA_IRQHandler+0xd2>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a56      	ldr	r2, [pc, #344]	; (80038c0 <HAL_DMA_IRQHandler+0x1cc>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d02c      	beq.n	80037c6 <HAL_DMA_IRQHandler+0xd2>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a54      	ldr	r2, [pc, #336]	; (80038c4 <HAL_DMA_IRQHandler+0x1d0>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d027      	beq.n	80037c6 <HAL_DMA_IRQHandler+0xd2>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a53      	ldr	r2, [pc, #332]	; (80038c8 <HAL_DMA_IRQHandler+0x1d4>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d022      	beq.n	80037c6 <HAL_DMA_IRQHandler+0xd2>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a51      	ldr	r2, [pc, #324]	; (80038cc <HAL_DMA_IRQHandler+0x1d8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d01d      	beq.n	80037c6 <HAL_DMA_IRQHandler+0xd2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a50      	ldr	r2, [pc, #320]	; (80038d0 <HAL_DMA_IRQHandler+0x1dc>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d018      	beq.n	80037c6 <HAL_DMA_IRQHandler+0xd2>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a4e      	ldr	r2, [pc, #312]	; (80038d4 <HAL_DMA_IRQHandler+0x1e0>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d013      	beq.n	80037c6 <HAL_DMA_IRQHandler+0xd2>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a4d      	ldr	r2, [pc, #308]	; (80038d8 <HAL_DMA_IRQHandler+0x1e4>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d00e      	beq.n	80037c6 <HAL_DMA_IRQHandler+0xd2>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a4b      	ldr	r2, [pc, #300]	; (80038dc <HAL_DMA_IRQHandler+0x1e8>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d009      	beq.n	80037c6 <HAL_DMA_IRQHandler+0xd2>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a4a      	ldr	r2, [pc, #296]	; (80038e0 <HAL_DMA_IRQHandler+0x1ec>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d004      	beq.n	80037c6 <HAL_DMA_IRQHandler+0xd2>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a48      	ldr	r2, [pc, #288]	; (80038e4 <HAL_DMA_IRQHandler+0x1f0>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d101      	bne.n	80037ca <HAL_DMA_IRQHandler+0xd6>
 80037c6:	2301      	movs	r3, #1
 80037c8:	e000      	b.n	80037cc <HAL_DMA_IRQHandler+0xd8>
 80037ca:	2300      	movs	r3, #0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 842b 	beq.w	8004028 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d6:	f003 031f 	and.w	r3, r3, #31
 80037da:	2208      	movs	r2, #8
 80037dc:	409a      	lsls	r2, r3
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	4013      	ands	r3, r2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 80a2 	beq.w	800392c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a2e      	ldr	r2, [pc, #184]	; (80038a8 <HAL_DMA_IRQHandler+0x1b4>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d04a      	beq.n	8003888 <HAL_DMA_IRQHandler+0x194>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a2d      	ldr	r2, [pc, #180]	; (80038ac <HAL_DMA_IRQHandler+0x1b8>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d045      	beq.n	8003888 <HAL_DMA_IRQHandler+0x194>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a2b      	ldr	r2, [pc, #172]	; (80038b0 <HAL_DMA_IRQHandler+0x1bc>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d040      	beq.n	8003888 <HAL_DMA_IRQHandler+0x194>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a2a      	ldr	r2, [pc, #168]	; (80038b4 <HAL_DMA_IRQHandler+0x1c0>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d03b      	beq.n	8003888 <HAL_DMA_IRQHandler+0x194>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a28      	ldr	r2, [pc, #160]	; (80038b8 <HAL_DMA_IRQHandler+0x1c4>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d036      	beq.n	8003888 <HAL_DMA_IRQHandler+0x194>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a27      	ldr	r2, [pc, #156]	; (80038bc <HAL_DMA_IRQHandler+0x1c8>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d031      	beq.n	8003888 <HAL_DMA_IRQHandler+0x194>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a25      	ldr	r2, [pc, #148]	; (80038c0 <HAL_DMA_IRQHandler+0x1cc>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d02c      	beq.n	8003888 <HAL_DMA_IRQHandler+0x194>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a24      	ldr	r2, [pc, #144]	; (80038c4 <HAL_DMA_IRQHandler+0x1d0>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d027      	beq.n	8003888 <HAL_DMA_IRQHandler+0x194>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a22      	ldr	r2, [pc, #136]	; (80038c8 <HAL_DMA_IRQHandler+0x1d4>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d022      	beq.n	8003888 <HAL_DMA_IRQHandler+0x194>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a21      	ldr	r2, [pc, #132]	; (80038cc <HAL_DMA_IRQHandler+0x1d8>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d01d      	beq.n	8003888 <HAL_DMA_IRQHandler+0x194>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a1f      	ldr	r2, [pc, #124]	; (80038d0 <HAL_DMA_IRQHandler+0x1dc>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d018      	beq.n	8003888 <HAL_DMA_IRQHandler+0x194>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a1e      	ldr	r2, [pc, #120]	; (80038d4 <HAL_DMA_IRQHandler+0x1e0>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d013      	beq.n	8003888 <HAL_DMA_IRQHandler+0x194>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a1c      	ldr	r2, [pc, #112]	; (80038d8 <HAL_DMA_IRQHandler+0x1e4>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d00e      	beq.n	8003888 <HAL_DMA_IRQHandler+0x194>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a1b      	ldr	r2, [pc, #108]	; (80038dc <HAL_DMA_IRQHandler+0x1e8>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d009      	beq.n	8003888 <HAL_DMA_IRQHandler+0x194>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a19      	ldr	r2, [pc, #100]	; (80038e0 <HAL_DMA_IRQHandler+0x1ec>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d004      	beq.n	8003888 <HAL_DMA_IRQHandler+0x194>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a18      	ldr	r2, [pc, #96]	; (80038e4 <HAL_DMA_IRQHandler+0x1f0>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d12f      	bne.n	80038e8 <HAL_DMA_IRQHandler+0x1f4>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0304 	and.w	r3, r3, #4
 8003892:	2b00      	cmp	r3, #0
 8003894:	bf14      	ite	ne
 8003896:	2301      	movne	r3, #1
 8003898:	2300      	moveq	r3, #0
 800389a:	b2db      	uxtb	r3, r3
 800389c:	e02e      	b.n	80038fc <HAL_DMA_IRQHandler+0x208>
 800389e:	bf00      	nop
 80038a0:	24000000 	.word	0x24000000
 80038a4:	1b4e81b5 	.word	0x1b4e81b5
 80038a8:	40020010 	.word	0x40020010
 80038ac:	40020028 	.word	0x40020028
 80038b0:	40020040 	.word	0x40020040
 80038b4:	40020058 	.word	0x40020058
 80038b8:	40020070 	.word	0x40020070
 80038bc:	40020088 	.word	0x40020088
 80038c0:	400200a0 	.word	0x400200a0
 80038c4:	400200b8 	.word	0x400200b8
 80038c8:	40020410 	.word	0x40020410
 80038cc:	40020428 	.word	0x40020428
 80038d0:	40020440 	.word	0x40020440
 80038d4:	40020458 	.word	0x40020458
 80038d8:	40020470 	.word	0x40020470
 80038dc:	40020488 	.word	0x40020488
 80038e0:	400204a0 	.word	0x400204a0
 80038e4:	400204b8 	.word	0x400204b8
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0308 	and.w	r3, r3, #8
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	bf14      	ite	ne
 80038f6:	2301      	movne	r3, #1
 80038f8:	2300      	moveq	r3, #0
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d015      	beq.n	800392c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0204 	bic.w	r2, r2, #4
 800390e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003914:	f003 031f 	and.w	r3, r3, #31
 8003918:	2208      	movs	r2, #8
 800391a:	409a      	lsls	r2, r3
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003924:	f043 0201 	orr.w	r2, r3, #1
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003930:	f003 031f 	and.w	r3, r3, #31
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	fa22 f303 	lsr.w	r3, r2, r3
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d06e      	beq.n	8003a20 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a69      	ldr	r2, [pc, #420]	; (8003aec <HAL_DMA_IRQHandler+0x3f8>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d04a      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x2ee>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a67      	ldr	r2, [pc, #412]	; (8003af0 <HAL_DMA_IRQHandler+0x3fc>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d045      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x2ee>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a66      	ldr	r2, [pc, #408]	; (8003af4 <HAL_DMA_IRQHandler+0x400>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d040      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x2ee>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a64      	ldr	r2, [pc, #400]	; (8003af8 <HAL_DMA_IRQHandler+0x404>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d03b      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x2ee>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a63      	ldr	r2, [pc, #396]	; (8003afc <HAL_DMA_IRQHandler+0x408>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d036      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x2ee>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a61      	ldr	r2, [pc, #388]	; (8003b00 <HAL_DMA_IRQHandler+0x40c>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d031      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x2ee>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a60      	ldr	r2, [pc, #384]	; (8003b04 <HAL_DMA_IRQHandler+0x410>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d02c      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x2ee>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a5e      	ldr	r2, [pc, #376]	; (8003b08 <HAL_DMA_IRQHandler+0x414>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d027      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x2ee>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a5d      	ldr	r2, [pc, #372]	; (8003b0c <HAL_DMA_IRQHandler+0x418>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d022      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x2ee>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a5b      	ldr	r2, [pc, #364]	; (8003b10 <HAL_DMA_IRQHandler+0x41c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d01d      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x2ee>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a5a      	ldr	r2, [pc, #360]	; (8003b14 <HAL_DMA_IRQHandler+0x420>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d018      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x2ee>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a58      	ldr	r2, [pc, #352]	; (8003b18 <HAL_DMA_IRQHandler+0x424>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d013      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x2ee>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a57      	ldr	r2, [pc, #348]	; (8003b1c <HAL_DMA_IRQHandler+0x428>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d00e      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x2ee>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a55      	ldr	r2, [pc, #340]	; (8003b20 <HAL_DMA_IRQHandler+0x42c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d009      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x2ee>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a54      	ldr	r2, [pc, #336]	; (8003b24 <HAL_DMA_IRQHandler+0x430>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d004      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x2ee>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a52      	ldr	r2, [pc, #328]	; (8003b28 <HAL_DMA_IRQHandler+0x434>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d10a      	bne.n	80039f8 <HAL_DMA_IRQHandler+0x304>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	bf14      	ite	ne
 80039f0:	2301      	movne	r3, #1
 80039f2:	2300      	moveq	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	e003      	b.n	8003a00 <HAL_DMA_IRQHandler+0x30c>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2300      	movs	r3, #0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00d      	beq.n	8003a20 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a08:	f003 031f 	and.w	r3, r3, #31
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	409a      	lsls	r2, r3
 8003a10:	6a3b      	ldr	r3, [r7, #32]
 8003a12:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a18:	f043 0202 	orr.w	r2, r3, #2
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a24:	f003 031f 	and.w	r3, r3, #31
 8003a28:	2204      	movs	r2, #4
 8003a2a:	409a      	lsls	r2, r3
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 808f 	beq.w	8003b54 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a2c      	ldr	r2, [pc, #176]	; (8003aec <HAL_DMA_IRQHandler+0x3f8>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d04a      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x3e2>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a2a      	ldr	r2, [pc, #168]	; (8003af0 <HAL_DMA_IRQHandler+0x3fc>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d045      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x3e2>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a29      	ldr	r2, [pc, #164]	; (8003af4 <HAL_DMA_IRQHandler+0x400>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d040      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x3e2>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a27      	ldr	r2, [pc, #156]	; (8003af8 <HAL_DMA_IRQHandler+0x404>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d03b      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x3e2>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a26      	ldr	r2, [pc, #152]	; (8003afc <HAL_DMA_IRQHandler+0x408>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d036      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x3e2>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a24      	ldr	r2, [pc, #144]	; (8003b00 <HAL_DMA_IRQHandler+0x40c>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d031      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x3e2>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a23      	ldr	r2, [pc, #140]	; (8003b04 <HAL_DMA_IRQHandler+0x410>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d02c      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x3e2>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a21      	ldr	r2, [pc, #132]	; (8003b08 <HAL_DMA_IRQHandler+0x414>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d027      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x3e2>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a20      	ldr	r2, [pc, #128]	; (8003b0c <HAL_DMA_IRQHandler+0x418>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d022      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x3e2>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a1e      	ldr	r2, [pc, #120]	; (8003b10 <HAL_DMA_IRQHandler+0x41c>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d01d      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x3e2>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a1d      	ldr	r2, [pc, #116]	; (8003b14 <HAL_DMA_IRQHandler+0x420>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d018      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x3e2>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a1b      	ldr	r2, [pc, #108]	; (8003b18 <HAL_DMA_IRQHandler+0x424>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d013      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x3e2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a1a      	ldr	r2, [pc, #104]	; (8003b1c <HAL_DMA_IRQHandler+0x428>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d00e      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x3e2>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a18      	ldr	r2, [pc, #96]	; (8003b20 <HAL_DMA_IRQHandler+0x42c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d009      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x3e2>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a17      	ldr	r2, [pc, #92]	; (8003b24 <HAL_DMA_IRQHandler+0x430>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d004      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x3e2>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a15      	ldr	r2, [pc, #84]	; (8003b28 <HAL_DMA_IRQHandler+0x434>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d12a      	bne.n	8003b2c <HAL_DMA_IRQHandler+0x438>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	bf14      	ite	ne
 8003ae4:	2301      	movne	r3, #1
 8003ae6:	2300      	moveq	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	e023      	b.n	8003b34 <HAL_DMA_IRQHandler+0x440>
 8003aec:	40020010 	.word	0x40020010
 8003af0:	40020028 	.word	0x40020028
 8003af4:	40020040 	.word	0x40020040
 8003af8:	40020058 	.word	0x40020058
 8003afc:	40020070 	.word	0x40020070
 8003b00:	40020088 	.word	0x40020088
 8003b04:	400200a0 	.word	0x400200a0
 8003b08:	400200b8 	.word	0x400200b8
 8003b0c:	40020410 	.word	0x40020410
 8003b10:	40020428 	.word	0x40020428
 8003b14:	40020440 	.word	0x40020440
 8003b18:	40020458 	.word	0x40020458
 8003b1c:	40020470 	.word	0x40020470
 8003b20:	40020488 	.word	0x40020488
 8003b24:	400204a0 	.word	0x400204a0
 8003b28:	400204b8 	.word	0x400204b8
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2300      	movs	r3, #0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00d      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b3c:	f003 031f 	and.w	r3, r3, #31
 8003b40:	2204      	movs	r2, #4
 8003b42:	409a      	lsls	r2, r3
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4c:	f043 0204 	orr.w	r2, r3, #4
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b58:	f003 031f 	and.w	r3, r3, #31
 8003b5c:	2210      	movs	r2, #16
 8003b5e:	409a      	lsls	r2, r3
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	4013      	ands	r3, r2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 80a6 	beq.w	8003cb6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a85      	ldr	r2, [pc, #532]	; (8003d84 <HAL_DMA_IRQHandler+0x690>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d04a      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x516>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a83      	ldr	r2, [pc, #524]	; (8003d88 <HAL_DMA_IRQHandler+0x694>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d045      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x516>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a82      	ldr	r2, [pc, #520]	; (8003d8c <HAL_DMA_IRQHandler+0x698>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d040      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x516>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a80      	ldr	r2, [pc, #512]	; (8003d90 <HAL_DMA_IRQHandler+0x69c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d03b      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x516>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a7f      	ldr	r2, [pc, #508]	; (8003d94 <HAL_DMA_IRQHandler+0x6a0>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d036      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x516>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a7d      	ldr	r2, [pc, #500]	; (8003d98 <HAL_DMA_IRQHandler+0x6a4>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d031      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x516>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a7c      	ldr	r2, [pc, #496]	; (8003d9c <HAL_DMA_IRQHandler+0x6a8>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d02c      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x516>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a7a      	ldr	r2, [pc, #488]	; (8003da0 <HAL_DMA_IRQHandler+0x6ac>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d027      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x516>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a79      	ldr	r2, [pc, #484]	; (8003da4 <HAL_DMA_IRQHandler+0x6b0>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d022      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x516>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a77      	ldr	r2, [pc, #476]	; (8003da8 <HAL_DMA_IRQHandler+0x6b4>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d01d      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x516>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a76      	ldr	r2, [pc, #472]	; (8003dac <HAL_DMA_IRQHandler+0x6b8>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d018      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x516>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a74      	ldr	r2, [pc, #464]	; (8003db0 <HAL_DMA_IRQHandler+0x6bc>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d013      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x516>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a73      	ldr	r2, [pc, #460]	; (8003db4 <HAL_DMA_IRQHandler+0x6c0>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d00e      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x516>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a71      	ldr	r2, [pc, #452]	; (8003db8 <HAL_DMA_IRQHandler+0x6c4>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d009      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x516>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a70      	ldr	r2, [pc, #448]	; (8003dbc <HAL_DMA_IRQHandler+0x6c8>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d004      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x516>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a6e      	ldr	r2, [pc, #440]	; (8003dc0 <HAL_DMA_IRQHandler+0x6cc>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d10a      	bne.n	8003c20 <HAL_DMA_IRQHandler+0x52c>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0308 	and.w	r3, r3, #8
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	bf14      	ite	ne
 8003c18:	2301      	movne	r3, #1
 8003c1a:	2300      	moveq	r3, #0
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	e009      	b.n	8003c34 <HAL_DMA_IRQHandler+0x540>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0304 	and.w	r3, r3, #4
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	bf14      	ite	ne
 8003c2e:	2301      	movne	r3, #1
 8003c30:	2300      	moveq	r3, #0
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d03e      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c3c:	f003 031f 	and.w	r3, r3, #31
 8003c40:	2210      	movs	r2, #16
 8003c42:	409a      	lsls	r2, r3
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d018      	beq.n	8003c88 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d108      	bne.n	8003c76 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d024      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	4798      	blx	r3
 8003c74:	e01f      	b.n	8003cb6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d01b      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	4798      	blx	r3
 8003c86:	e016      	b.n	8003cb6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d107      	bne.n	8003ca6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 0208 	bic.w	r2, r2, #8
 8003ca4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cba:	f003 031f 	and.w	r3, r3, #31
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	409a      	lsls	r2, r3
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f000 8110 	beq.w	8003eec <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a2c      	ldr	r2, [pc, #176]	; (8003d84 <HAL_DMA_IRQHandler+0x690>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d04a      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x678>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a2b      	ldr	r2, [pc, #172]	; (8003d88 <HAL_DMA_IRQHandler+0x694>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d045      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x678>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a29      	ldr	r2, [pc, #164]	; (8003d8c <HAL_DMA_IRQHandler+0x698>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d040      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x678>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a28      	ldr	r2, [pc, #160]	; (8003d90 <HAL_DMA_IRQHandler+0x69c>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d03b      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x678>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a26      	ldr	r2, [pc, #152]	; (8003d94 <HAL_DMA_IRQHandler+0x6a0>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d036      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x678>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a25      	ldr	r2, [pc, #148]	; (8003d98 <HAL_DMA_IRQHandler+0x6a4>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d031      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x678>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a23      	ldr	r2, [pc, #140]	; (8003d9c <HAL_DMA_IRQHandler+0x6a8>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d02c      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x678>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a22      	ldr	r2, [pc, #136]	; (8003da0 <HAL_DMA_IRQHandler+0x6ac>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d027      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x678>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a20      	ldr	r2, [pc, #128]	; (8003da4 <HAL_DMA_IRQHandler+0x6b0>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d022      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x678>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a1f      	ldr	r2, [pc, #124]	; (8003da8 <HAL_DMA_IRQHandler+0x6b4>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d01d      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x678>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a1d      	ldr	r2, [pc, #116]	; (8003dac <HAL_DMA_IRQHandler+0x6b8>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d018      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x678>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a1c      	ldr	r2, [pc, #112]	; (8003db0 <HAL_DMA_IRQHandler+0x6bc>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d013      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x678>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a1a      	ldr	r2, [pc, #104]	; (8003db4 <HAL_DMA_IRQHandler+0x6c0>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d00e      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x678>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a19      	ldr	r2, [pc, #100]	; (8003db8 <HAL_DMA_IRQHandler+0x6c4>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d009      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x678>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a17      	ldr	r2, [pc, #92]	; (8003dbc <HAL_DMA_IRQHandler+0x6c8>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d004      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x678>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a16      	ldr	r2, [pc, #88]	; (8003dc0 <HAL_DMA_IRQHandler+0x6cc>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d12b      	bne.n	8003dc4 <HAL_DMA_IRQHandler+0x6d0>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0310 	and.w	r3, r3, #16
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	bf14      	ite	ne
 8003d7a:	2301      	movne	r3, #1
 8003d7c:	2300      	moveq	r3, #0
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	e02a      	b.n	8003dd8 <HAL_DMA_IRQHandler+0x6e4>
 8003d82:	bf00      	nop
 8003d84:	40020010 	.word	0x40020010
 8003d88:	40020028 	.word	0x40020028
 8003d8c:	40020040 	.word	0x40020040
 8003d90:	40020058 	.word	0x40020058
 8003d94:	40020070 	.word	0x40020070
 8003d98:	40020088 	.word	0x40020088
 8003d9c:	400200a0 	.word	0x400200a0
 8003da0:	400200b8 	.word	0x400200b8
 8003da4:	40020410 	.word	0x40020410
 8003da8:	40020428 	.word	0x40020428
 8003dac:	40020440 	.word	0x40020440
 8003db0:	40020458 	.word	0x40020458
 8003db4:	40020470 	.word	0x40020470
 8003db8:	40020488 	.word	0x40020488
 8003dbc:	400204a0 	.word	0x400204a0
 8003dc0:	400204b8 	.word	0x400204b8
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	bf14      	ite	ne
 8003dd2:	2301      	movne	r3, #1
 8003dd4:	2300      	moveq	r3, #0
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 8087 	beq.w	8003eec <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de2:	f003 031f 	and.w	r3, r3, #31
 8003de6:	2220      	movs	r2, #32
 8003de8:	409a      	lsls	r2, r3
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d139      	bne.n	8003e6e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f022 0216 	bic.w	r2, r2, #22
 8003e08:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	695a      	ldr	r2, [r3, #20]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e18:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d103      	bne.n	8003e2a <HAL_DMA_IRQHandler+0x736>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d007      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0208 	bic.w	r2, r2, #8
 8003e38:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e3e:	f003 031f 	and.w	r3, r3, #31
 8003e42:	223f      	movs	r2, #63	; 0x3f
 8003e44:	409a      	lsls	r2, r3
 8003e46:	6a3b      	ldr	r3, [r7, #32]
 8003e48:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 834a 	beq.w	80044f8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	4798      	blx	r3
          }
          return;
 8003e6c:	e344      	b.n	80044f8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d018      	beq.n	8003eae <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d108      	bne.n	8003e9c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d02c      	beq.n	8003eec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	4798      	blx	r3
 8003e9a:	e027      	b.n	8003eec <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d023      	beq.n	8003eec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	4798      	blx	r3
 8003eac:	e01e      	b.n	8003eec <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10f      	bne.n	8003edc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0210 	bic.w	r2, r2, #16
 8003eca:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 8306 	beq.w	8004502 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 8088 	beq.w	8004014 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2204      	movs	r2, #4
 8003f08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a7a      	ldr	r2, [pc, #488]	; (80040fc <HAL_DMA_IRQHandler+0xa08>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d04a      	beq.n	8003fac <HAL_DMA_IRQHandler+0x8b8>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a79      	ldr	r2, [pc, #484]	; (8004100 <HAL_DMA_IRQHandler+0xa0c>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d045      	beq.n	8003fac <HAL_DMA_IRQHandler+0x8b8>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a77      	ldr	r2, [pc, #476]	; (8004104 <HAL_DMA_IRQHandler+0xa10>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d040      	beq.n	8003fac <HAL_DMA_IRQHandler+0x8b8>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a76      	ldr	r2, [pc, #472]	; (8004108 <HAL_DMA_IRQHandler+0xa14>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d03b      	beq.n	8003fac <HAL_DMA_IRQHandler+0x8b8>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a74      	ldr	r2, [pc, #464]	; (800410c <HAL_DMA_IRQHandler+0xa18>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d036      	beq.n	8003fac <HAL_DMA_IRQHandler+0x8b8>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a73      	ldr	r2, [pc, #460]	; (8004110 <HAL_DMA_IRQHandler+0xa1c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d031      	beq.n	8003fac <HAL_DMA_IRQHandler+0x8b8>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a71      	ldr	r2, [pc, #452]	; (8004114 <HAL_DMA_IRQHandler+0xa20>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d02c      	beq.n	8003fac <HAL_DMA_IRQHandler+0x8b8>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a70      	ldr	r2, [pc, #448]	; (8004118 <HAL_DMA_IRQHandler+0xa24>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d027      	beq.n	8003fac <HAL_DMA_IRQHandler+0x8b8>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a6e      	ldr	r2, [pc, #440]	; (800411c <HAL_DMA_IRQHandler+0xa28>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d022      	beq.n	8003fac <HAL_DMA_IRQHandler+0x8b8>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a6d      	ldr	r2, [pc, #436]	; (8004120 <HAL_DMA_IRQHandler+0xa2c>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d01d      	beq.n	8003fac <HAL_DMA_IRQHandler+0x8b8>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a6b      	ldr	r2, [pc, #428]	; (8004124 <HAL_DMA_IRQHandler+0xa30>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d018      	beq.n	8003fac <HAL_DMA_IRQHandler+0x8b8>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a6a      	ldr	r2, [pc, #424]	; (8004128 <HAL_DMA_IRQHandler+0xa34>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d013      	beq.n	8003fac <HAL_DMA_IRQHandler+0x8b8>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a68      	ldr	r2, [pc, #416]	; (800412c <HAL_DMA_IRQHandler+0xa38>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d00e      	beq.n	8003fac <HAL_DMA_IRQHandler+0x8b8>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a67      	ldr	r2, [pc, #412]	; (8004130 <HAL_DMA_IRQHandler+0xa3c>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d009      	beq.n	8003fac <HAL_DMA_IRQHandler+0x8b8>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a65      	ldr	r2, [pc, #404]	; (8004134 <HAL_DMA_IRQHandler+0xa40>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d004      	beq.n	8003fac <HAL_DMA_IRQHandler+0x8b8>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a64      	ldr	r2, [pc, #400]	; (8004138 <HAL_DMA_IRQHandler+0xa44>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d108      	bne.n	8003fbe <HAL_DMA_IRQHandler+0x8ca>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0201 	bic.w	r2, r2, #1
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	e007      	b.n	8003fce <HAL_DMA_IRQHandler+0x8da>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 0201 	bic.w	r2, r2, #1
 8003fcc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	60fb      	str	r3, [r7, #12]
 8003fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d307      	bcc.n	8003fea <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1f2      	bne.n	8003fce <HAL_DMA_IRQHandler+0x8da>
 8003fe8:	e000      	b.n	8003fec <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003fea:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d004      	beq.n	800400c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2203      	movs	r2, #3
 8004006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800400a:	e003      	b.n	8004014 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 8272 	beq.w	8004502 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	4798      	blx	r3
 8004026:	e26c      	b.n	8004502 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a43      	ldr	r2, [pc, #268]	; (800413c <HAL_DMA_IRQHandler+0xa48>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d022      	beq.n	8004078 <HAL_DMA_IRQHandler+0x984>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a42      	ldr	r2, [pc, #264]	; (8004140 <HAL_DMA_IRQHandler+0xa4c>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d01d      	beq.n	8004078 <HAL_DMA_IRQHandler+0x984>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a40      	ldr	r2, [pc, #256]	; (8004144 <HAL_DMA_IRQHandler+0xa50>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d018      	beq.n	8004078 <HAL_DMA_IRQHandler+0x984>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a3f      	ldr	r2, [pc, #252]	; (8004148 <HAL_DMA_IRQHandler+0xa54>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d013      	beq.n	8004078 <HAL_DMA_IRQHandler+0x984>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a3d      	ldr	r2, [pc, #244]	; (800414c <HAL_DMA_IRQHandler+0xa58>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d00e      	beq.n	8004078 <HAL_DMA_IRQHandler+0x984>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a3c      	ldr	r2, [pc, #240]	; (8004150 <HAL_DMA_IRQHandler+0xa5c>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d009      	beq.n	8004078 <HAL_DMA_IRQHandler+0x984>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a3a      	ldr	r2, [pc, #232]	; (8004154 <HAL_DMA_IRQHandler+0xa60>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d004      	beq.n	8004078 <HAL_DMA_IRQHandler+0x984>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a39      	ldr	r2, [pc, #228]	; (8004158 <HAL_DMA_IRQHandler+0xa64>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d101      	bne.n	800407c <HAL_DMA_IRQHandler+0x988>
 8004078:	2301      	movs	r3, #1
 800407a:	e000      	b.n	800407e <HAL_DMA_IRQHandler+0x98a>
 800407c:	2300      	movs	r3, #0
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 823f 	beq.w	8004502 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004090:	f003 031f 	and.w	r3, r3, #31
 8004094:	2204      	movs	r2, #4
 8004096:	409a      	lsls	r2, r3
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	4013      	ands	r3, r2
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 80cd 	beq.w	800423c <HAL_DMA_IRQHandler+0xb48>
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 80c7 	beq.w	800423c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b2:	f003 031f 	and.w	r3, r3, #31
 80040b6:	2204      	movs	r2, #4
 80040b8:	409a      	lsls	r2, r3
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d049      	beq.n	800415c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d109      	bne.n	80040e6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f000 8210 	beq.w	80044fc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040e4:	e20a      	b.n	80044fc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f000 8206 	beq.w	80044fc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040f8:	e200      	b.n	80044fc <HAL_DMA_IRQHandler+0xe08>
 80040fa:	bf00      	nop
 80040fc:	40020010 	.word	0x40020010
 8004100:	40020028 	.word	0x40020028
 8004104:	40020040 	.word	0x40020040
 8004108:	40020058 	.word	0x40020058
 800410c:	40020070 	.word	0x40020070
 8004110:	40020088 	.word	0x40020088
 8004114:	400200a0 	.word	0x400200a0
 8004118:	400200b8 	.word	0x400200b8
 800411c:	40020410 	.word	0x40020410
 8004120:	40020428 	.word	0x40020428
 8004124:	40020440 	.word	0x40020440
 8004128:	40020458 	.word	0x40020458
 800412c:	40020470 	.word	0x40020470
 8004130:	40020488 	.word	0x40020488
 8004134:	400204a0 	.word	0x400204a0
 8004138:	400204b8 	.word	0x400204b8
 800413c:	58025408 	.word	0x58025408
 8004140:	5802541c 	.word	0x5802541c
 8004144:	58025430 	.word	0x58025430
 8004148:	58025444 	.word	0x58025444
 800414c:	58025458 	.word	0x58025458
 8004150:	5802546c 	.word	0x5802546c
 8004154:	58025480 	.word	0x58025480
 8004158:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	f003 0320 	and.w	r3, r3, #32
 8004162:	2b00      	cmp	r3, #0
 8004164:	d160      	bne.n	8004228 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a8c      	ldr	r2, [pc, #560]	; (800439c <HAL_DMA_IRQHandler+0xca8>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d04a      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb12>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a8a      	ldr	r2, [pc, #552]	; (80043a0 <HAL_DMA_IRQHandler+0xcac>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d045      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb12>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a89      	ldr	r2, [pc, #548]	; (80043a4 <HAL_DMA_IRQHandler+0xcb0>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d040      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb12>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a87      	ldr	r2, [pc, #540]	; (80043a8 <HAL_DMA_IRQHandler+0xcb4>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d03b      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb12>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a86      	ldr	r2, [pc, #536]	; (80043ac <HAL_DMA_IRQHandler+0xcb8>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d036      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb12>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a84      	ldr	r2, [pc, #528]	; (80043b0 <HAL_DMA_IRQHandler+0xcbc>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d031      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb12>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a83      	ldr	r2, [pc, #524]	; (80043b4 <HAL_DMA_IRQHandler+0xcc0>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d02c      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb12>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a81      	ldr	r2, [pc, #516]	; (80043b8 <HAL_DMA_IRQHandler+0xcc4>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d027      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb12>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a80      	ldr	r2, [pc, #512]	; (80043bc <HAL_DMA_IRQHandler+0xcc8>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d022      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb12>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a7e      	ldr	r2, [pc, #504]	; (80043c0 <HAL_DMA_IRQHandler+0xccc>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d01d      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb12>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a7d      	ldr	r2, [pc, #500]	; (80043c4 <HAL_DMA_IRQHandler+0xcd0>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d018      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb12>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a7b      	ldr	r2, [pc, #492]	; (80043c8 <HAL_DMA_IRQHandler+0xcd4>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d013      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb12>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a7a      	ldr	r2, [pc, #488]	; (80043cc <HAL_DMA_IRQHandler+0xcd8>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d00e      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb12>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a78      	ldr	r2, [pc, #480]	; (80043d0 <HAL_DMA_IRQHandler+0xcdc>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d009      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb12>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a77      	ldr	r2, [pc, #476]	; (80043d4 <HAL_DMA_IRQHandler+0xce0>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d004      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb12>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a75      	ldr	r2, [pc, #468]	; (80043d8 <HAL_DMA_IRQHandler+0xce4>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d108      	bne.n	8004218 <HAL_DMA_IRQHandler+0xb24>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0208 	bic.w	r2, r2, #8
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	e007      	b.n	8004228 <HAL_DMA_IRQHandler+0xb34>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0204 	bic.w	r2, r2, #4
 8004226:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 8165 	beq.w	80044fc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800423a:	e15f      	b.n	80044fc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004240:	f003 031f 	and.w	r3, r3, #31
 8004244:	2202      	movs	r2, #2
 8004246:	409a      	lsls	r2, r3
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	4013      	ands	r3, r2
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 80c5 	beq.w	80043dc <HAL_DMA_IRQHandler+0xce8>
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 80bf 	beq.w	80043dc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004262:	f003 031f 	and.w	r3, r3, #31
 8004266:	2202      	movs	r2, #2
 8004268:	409a      	lsls	r2, r3
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d018      	beq.n	80042aa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d109      	bne.n	8004296 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 813a 	beq.w	8004500 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004294:	e134      	b.n	8004500 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429a:	2b00      	cmp	r3, #0
 800429c:	f000 8130 	beq.w	8004500 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042a8:	e12a      	b.n	8004500 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	f003 0320 	and.w	r3, r3, #32
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d168      	bne.n	8004386 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a38      	ldr	r2, [pc, #224]	; (800439c <HAL_DMA_IRQHandler+0xca8>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d04a      	beq.n	8004354 <HAL_DMA_IRQHandler+0xc60>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a37      	ldr	r2, [pc, #220]	; (80043a0 <HAL_DMA_IRQHandler+0xcac>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d045      	beq.n	8004354 <HAL_DMA_IRQHandler+0xc60>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a35      	ldr	r2, [pc, #212]	; (80043a4 <HAL_DMA_IRQHandler+0xcb0>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d040      	beq.n	8004354 <HAL_DMA_IRQHandler+0xc60>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a34      	ldr	r2, [pc, #208]	; (80043a8 <HAL_DMA_IRQHandler+0xcb4>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d03b      	beq.n	8004354 <HAL_DMA_IRQHandler+0xc60>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a32      	ldr	r2, [pc, #200]	; (80043ac <HAL_DMA_IRQHandler+0xcb8>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d036      	beq.n	8004354 <HAL_DMA_IRQHandler+0xc60>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a31      	ldr	r2, [pc, #196]	; (80043b0 <HAL_DMA_IRQHandler+0xcbc>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d031      	beq.n	8004354 <HAL_DMA_IRQHandler+0xc60>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a2f      	ldr	r2, [pc, #188]	; (80043b4 <HAL_DMA_IRQHandler+0xcc0>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d02c      	beq.n	8004354 <HAL_DMA_IRQHandler+0xc60>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a2e      	ldr	r2, [pc, #184]	; (80043b8 <HAL_DMA_IRQHandler+0xcc4>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d027      	beq.n	8004354 <HAL_DMA_IRQHandler+0xc60>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a2c      	ldr	r2, [pc, #176]	; (80043bc <HAL_DMA_IRQHandler+0xcc8>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d022      	beq.n	8004354 <HAL_DMA_IRQHandler+0xc60>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a2b      	ldr	r2, [pc, #172]	; (80043c0 <HAL_DMA_IRQHandler+0xccc>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d01d      	beq.n	8004354 <HAL_DMA_IRQHandler+0xc60>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a29      	ldr	r2, [pc, #164]	; (80043c4 <HAL_DMA_IRQHandler+0xcd0>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d018      	beq.n	8004354 <HAL_DMA_IRQHandler+0xc60>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a28      	ldr	r2, [pc, #160]	; (80043c8 <HAL_DMA_IRQHandler+0xcd4>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d013      	beq.n	8004354 <HAL_DMA_IRQHandler+0xc60>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a26      	ldr	r2, [pc, #152]	; (80043cc <HAL_DMA_IRQHandler+0xcd8>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d00e      	beq.n	8004354 <HAL_DMA_IRQHandler+0xc60>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a25      	ldr	r2, [pc, #148]	; (80043d0 <HAL_DMA_IRQHandler+0xcdc>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d009      	beq.n	8004354 <HAL_DMA_IRQHandler+0xc60>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a23      	ldr	r2, [pc, #140]	; (80043d4 <HAL_DMA_IRQHandler+0xce0>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d004      	beq.n	8004354 <HAL_DMA_IRQHandler+0xc60>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a22      	ldr	r2, [pc, #136]	; (80043d8 <HAL_DMA_IRQHandler+0xce4>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d108      	bne.n	8004366 <HAL_DMA_IRQHandler+0xc72>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 0214 	bic.w	r2, r2, #20
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	e007      	b.n	8004376 <HAL_DMA_IRQHandler+0xc82>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 020a 	bic.w	r2, r2, #10
 8004374:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438a:	2b00      	cmp	r3, #0
 800438c:	f000 80b8 	beq.w	8004500 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004398:	e0b2      	b.n	8004500 <HAL_DMA_IRQHandler+0xe0c>
 800439a:	bf00      	nop
 800439c:	40020010 	.word	0x40020010
 80043a0:	40020028 	.word	0x40020028
 80043a4:	40020040 	.word	0x40020040
 80043a8:	40020058 	.word	0x40020058
 80043ac:	40020070 	.word	0x40020070
 80043b0:	40020088 	.word	0x40020088
 80043b4:	400200a0 	.word	0x400200a0
 80043b8:	400200b8 	.word	0x400200b8
 80043bc:	40020410 	.word	0x40020410
 80043c0:	40020428 	.word	0x40020428
 80043c4:	40020440 	.word	0x40020440
 80043c8:	40020458 	.word	0x40020458
 80043cc:	40020470 	.word	0x40020470
 80043d0:	40020488 	.word	0x40020488
 80043d4:	400204a0 	.word	0x400204a0
 80043d8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e0:	f003 031f 	and.w	r3, r3, #31
 80043e4:	2208      	movs	r2, #8
 80043e6:	409a      	lsls	r2, r3
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	4013      	ands	r3, r2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 8088 	beq.w	8004502 <HAL_DMA_IRQHandler+0xe0e>
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	f003 0308 	and.w	r3, r3, #8
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 8082 	beq.w	8004502 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a41      	ldr	r2, [pc, #260]	; (8004508 <HAL_DMA_IRQHandler+0xe14>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d04a      	beq.n	800449e <HAL_DMA_IRQHandler+0xdaa>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a3f      	ldr	r2, [pc, #252]	; (800450c <HAL_DMA_IRQHandler+0xe18>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d045      	beq.n	800449e <HAL_DMA_IRQHandler+0xdaa>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a3e      	ldr	r2, [pc, #248]	; (8004510 <HAL_DMA_IRQHandler+0xe1c>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d040      	beq.n	800449e <HAL_DMA_IRQHandler+0xdaa>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a3c      	ldr	r2, [pc, #240]	; (8004514 <HAL_DMA_IRQHandler+0xe20>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d03b      	beq.n	800449e <HAL_DMA_IRQHandler+0xdaa>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a3b      	ldr	r2, [pc, #236]	; (8004518 <HAL_DMA_IRQHandler+0xe24>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d036      	beq.n	800449e <HAL_DMA_IRQHandler+0xdaa>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a39      	ldr	r2, [pc, #228]	; (800451c <HAL_DMA_IRQHandler+0xe28>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d031      	beq.n	800449e <HAL_DMA_IRQHandler+0xdaa>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a38      	ldr	r2, [pc, #224]	; (8004520 <HAL_DMA_IRQHandler+0xe2c>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d02c      	beq.n	800449e <HAL_DMA_IRQHandler+0xdaa>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a36      	ldr	r2, [pc, #216]	; (8004524 <HAL_DMA_IRQHandler+0xe30>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d027      	beq.n	800449e <HAL_DMA_IRQHandler+0xdaa>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a35      	ldr	r2, [pc, #212]	; (8004528 <HAL_DMA_IRQHandler+0xe34>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d022      	beq.n	800449e <HAL_DMA_IRQHandler+0xdaa>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a33      	ldr	r2, [pc, #204]	; (800452c <HAL_DMA_IRQHandler+0xe38>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d01d      	beq.n	800449e <HAL_DMA_IRQHandler+0xdaa>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a32      	ldr	r2, [pc, #200]	; (8004530 <HAL_DMA_IRQHandler+0xe3c>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d018      	beq.n	800449e <HAL_DMA_IRQHandler+0xdaa>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a30      	ldr	r2, [pc, #192]	; (8004534 <HAL_DMA_IRQHandler+0xe40>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d013      	beq.n	800449e <HAL_DMA_IRQHandler+0xdaa>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a2f      	ldr	r2, [pc, #188]	; (8004538 <HAL_DMA_IRQHandler+0xe44>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d00e      	beq.n	800449e <HAL_DMA_IRQHandler+0xdaa>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a2d      	ldr	r2, [pc, #180]	; (800453c <HAL_DMA_IRQHandler+0xe48>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d009      	beq.n	800449e <HAL_DMA_IRQHandler+0xdaa>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a2c      	ldr	r2, [pc, #176]	; (8004540 <HAL_DMA_IRQHandler+0xe4c>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d004      	beq.n	800449e <HAL_DMA_IRQHandler+0xdaa>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a2a      	ldr	r2, [pc, #168]	; (8004544 <HAL_DMA_IRQHandler+0xe50>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d108      	bne.n	80044b0 <HAL_DMA_IRQHandler+0xdbc>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f022 021c 	bic.w	r2, r2, #28
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	e007      	b.n	80044c0 <HAL_DMA_IRQHandler+0xdcc>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 020e 	bic.w	r2, r2, #14
 80044be:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c4:	f003 031f 	and.w	r3, r3, #31
 80044c8:	2201      	movs	r2, #1
 80044ca:	409a      	lsls	r2, r3
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d009      	beq.n	8004502 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	4798      	blx	r3
 80044f6:	e004      	b.n	8004502 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80044f8:	bf00      	nop
 80044fa:	e002      	b.n	8004502 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044fc:	bf00      	nop
 80044fe:	e000      	b.n	8004502 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004500:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004502:	3728      	adds	r7, #40	; 0x28
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	40020010 	.word	0x40020010
 800450c:	40020028 	.word	0x40020028
 8004510:	40020040 	.word	0x40020040
 8004514:	40020058 	.word	0x40020058
 8004518:	40020070 	.word	0x40020070
 800451c:	40020088 	.word	0x40020088
 8004520:	400200a0 	.word	0x400200a0
 8004524:	400200b8 	.word	0x400200b8
 8004528:	40020410 	.word	0x40020410
 800452c:	40020428 	.word	0x40020428
 8004530:	40020440 	.word	0x40020440
 8004534:	40020458 	.word	0x40020458
 8004538:	40020470 	.word	0x40020470
 800453c:	40020488 	.word	0x40020488
 8004540:	400204a0 	.word	0x400204a0
 8004544:	400204b8 	.word	0x400204b8

08004548 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a42      	ldr	r2, [pc, #264]	; (8004660 <DMA_CalcBaseAndBitshift+0x118>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d04a      	beq.n	80045f0 <DMA_CalcBaseAndBitshift+0xa8>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a41      	ldr	r2, [pc, #260]	; (8004664 <DMA_CalcBaseAndBitshift+0x11c>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d045      	beq.n	80045f0 <DMA_CalcBaseAndBitshift+0xa8>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a3f      	ldr	r2, [pc, #252]	; (8004668 <DMA_CalcBaseAndBitshift+0x120>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d040      	beq.n	80045f0 <DMA_CalcBaseAndBitshift+0xa8>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a3e      	ldr	r2, [pc, #248]	; (800466c <DMA_CalcBaseAndBitshift+0x124>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d03b      	beq.n	80045f0 <DMA_CalcBaseAndBitshift+0xa8>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a3c      	ldr	r2, [pc, #240]	; (8004670 <DMA_CalcBaseAndBitshift+0x128>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d036      	beq.n	80045f0 <DMA_CalcBaseAndBitshift+0xa8>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a3b      	ldr	r2, [pc, #236]	; (8004674 <DMA_CalcBaseAndBitshift+0x12c>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d031      	beq.n	80045f0 <DMA_CalcBaseAndBitshift+0xa8>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a39      	ldr	r2, [pc, #228]	; (8004678 <DMA_CalcBaseAndBitshift+0x130>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d02c      	beq.n	80045f0 <DMA_CalcBaseAndBitshift+0xa8>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a38      	ldr	r2, [pc, #224]	; (800467c <DMA_CalcBaseAndBitshift+0x134>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d027      	beq.n	80045f0 <DMA_CalcBaseAndBitshift+0xa8>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a36      	ldr	r2, [pc, #216]	; (8004680 <DMA_CalcBaseAndBitshift+0x138>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d022      	beq.n	80045f0 <DMA_CalcBaseAndBitshift+0xa8>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a35      	ldr	r2, [pc, #212]	; (8004684 <DMA_CalcBaseAndBitshift+0x13c>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d01d      	beq.n	80045f0 <DMA_CalcBaseAndBitshift+0xa8>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a33      	ldr	r2, [pc, #204]	; (8004688 <DMA_CalcBaseAndBitshift+0x140>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d018      	beq.n	80045f0 <DMA_CalcBaseAndBitshift+0xa8>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a32      	ldr	r2, [pc, #200]	; (800468c <DMA_CalcBaseAndBitshift+0x144>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d013      	beq.n	80045f0 <DMA_CalcBaseAndBitshift+0xa8>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a30      	ldr	r2, [pc, #192]	; (8004690 <DMA_CalcBaseAndBitshift+0x148>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d00e      	beq.n	80045f0 <DMA_CalcBaseAndBitshift+0xa8>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a2f      	ldr	r2, [pc, #188]	; (8004694 <DMA_CalcBaseAndBitshift+0x14c>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d009      	beq.n	80045f0 <DMA_CalcBaseAndBitshift+0xa8>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a2d      	ldr	r2, [pc, #180]	; (8004698 <DMA_CalcBaseAndBitshift+0x150>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d004      	beq.n	80045f0 <DMA_CalcBaseAndBitshift+0xa8>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a2c      	ldr	r2, [pc, #176]	; (800469c <DMA_CalcBaseAndBitshift+0x154>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d101      	bne.n	80045f4 <DMA_CalcBaseAndBitshift+0xac>
 80045f0:	2301      	movs	r3, #1
 80045f2:	e000      	b.n	80045f6 <DMA_CalcBaseAndBitshift+0xae>
 80045f4:	2300      	movs	r3, #0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d024      	beq.n	8004644 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	3b10      	subs	r3, #16
 8004602:	4a27      	ldr	r2, [pc, #156]	; (80046a0 <DMA_CalcBaseAndBitshift+0x158>)
 8004604:	fba2 2303 	umull	r2, r3, r2, r3
 8004608:	091b      	lsrs	r3, r3, #4
 800460a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	4a24      	ldr	r2, [pc, #144]	; (80046a4 <DMA_CalcBaseAndBitshift+0x15c>)
 8004614:	5cd3      	ldrb	r3, [r2, r3]
 8004616:	461a      	mov	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2b03      	cmp	r3, #3
 8004620:	d908      	bls.n	8004634 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	461a      	mov	r2, r3
 8004628:	4b1f      	ldr	r3, [pc, #124]	; (80046a8 <DMA_CalcBaseAndBitshift+0x160>)
 800462a:	4013      	ands	r3, r2
 800462c:	1d1a      	adds	r2, r3, #4
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	659a      	str	r2, [r3, #88]	; 0x58
 8004632:	e00d      	b.n	8004650 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	461a      	mov	r2, r3
 800463a:	4b1b      	ldr	r3, [pc, #108]	; (80046a8 <DMA_CalcBaseAndBitshift+0x160>)
 800463c:	4013      	ands	r3, r2
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	6593      	str	r3, [r2, #88]	; 0x58
 8004642:	e005      	b.n	8004650 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004654:	4618      	mov	r0, r3
 8004656:	3714      	adds	r7, #20
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	40020010 	.word	0x40020010
 8004664:	40020028 	.word	0x40020028
 8004668:	40020040 	.word	0x40020040
 800466c:	40020058 	.word	0x40020058
 8004670:	40020070 	.word	0x40020070
 8004674:	40020088 	.word	0x40020088
 8004678:	400200a0 	.word	0x400200a0
 800467c:	400200b8 	.word	0x400200b8
 8004680:	40020410 	.word	0x40020410
 8004684:	40020428 	.word	0x40020428
 8004688:	40020440 	.word	0x40020440
 800468c:	40020458 	.word	0x40020458
 8004690:	40020470 	.word	0x40020470
 8004694:	40020488 	.word	0x40020488
 8004698:	400204a0 	.word	0x400204a0
 800469c:	400204b8 	.word	0x400204b8
 80046a0:	aaaaaaab 	.word	0xaaaaaaab
 80046a4:	08010124 	.word	0x08010124
 80046a8:	fffffc00 	.word	0xfffffc00

080046ac <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046b4:	2300      	movs	r3, #0
 80046b6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d120      	bne.n	8004702 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c4:	2b03      	cmp	r3, #3
 80046c6:	d858      	bhi.n	800477a <DMA_CheckFifoParam+0xce>
 80046c8:	a201      	add	r2, pc, #4	; (adr r2, 80046d0 <DMA_CheckFifoParam+0x24>)
 80046ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ce:	bf00      	nop
 80046d0:	080046e1 	.word	0x080046e1
 80046d4:	080046f3 	.word	0x080046f3
 80046d8:	080046e1 	.word	0x080046e1
 80046dc:	0800477b 	.word	0x0800477b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d048      	beq.n	800477e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80046f0:	e045      	b.n	800477e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046fa:	d142      	bne.n	8004782 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004700:	e03f      	b.n	8004782 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800470a:	d123      	bne.n	8004754 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004710:	2b03      	cmp	r3, #3
 8004712:	d838      	bhi.n	8004786 <DMA_CheckFifoParam+0xda>
 8004714:	a201      	add	r2, pc, #4	; (adr r2, 800471c <DMA_CheckFifoParam+0x70>)
 8004716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471a:	bf00      	nop
 800471c:	0800472d 	.word	0x0800472d
 8004720:	08004733 	.word	0x08004733
 8004724:	0800472d 	.word	0x0800472d
 8004728:	08004745 	.word	0x08004745
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	73fb      	strb	r3, [r7, #15]
        break;
 8004730:	e030      	b.n	8004794 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004736:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d025      	beq.n	800478a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004742:	e022      	b.n	800478a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004748:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800474c:	d11f      	bne.n	800478e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004752:	e01c      	b.n	800478e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004758:	2b02      	cmp	r3, #2
 800475a:	d902      	bls.n	8004762 <DMA_CheckFifoParam+0xb6>
 800475c:	2b03      	cmp	r3, #3
 800475e:	d003      	beq.n	8004768 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004760:	e018      	b.n	8004794 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	73fb      	strb	r3, [r7, #15]
        break;
 8004766:	e015      	b.n	8004794 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00e      	beq.n	8004792 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	73fb      	strb	r3, [r7, #15]
    break;
 8004778:	e00b      	b.n	8004792 <DMA_CheckFifoParam+0xe6>
        break;
 800477a:	bf00      	nop
 800477c:	e00a      	b.n	8004794 <DMA_CheckFifoParam+0xe8>
        break;
 800477e:	bf00      	nop
 8004780:	e008      	b.n	8004794 <DMA_CheckFifoParam+0xe8>
        break;
 8004782:	bf00      	nop
 8004784:	e006      	b.n	8004794 <DMA_CheckFifoParam+0xe8>
        break;
 8004786:	bf00      	nop
 8004788:	e004      	b.n	8004794 <DMA_CheckFifoParam+0xe8>
        break;
 800478a:	bf00      	nop
 800478c:	e002      	b.n	8004794 <DMA_CheckFifoParam+0xe8>
        break;
 800478e:	bf00      	nop
 8004790:	e000      	b.n	8004794 <DMA_CheckFifoParam+0xe8>
    break;
 8004792:	bf00      	nop
    }
  }

  return status;
 8004794:	7bfb      	ldrb	r3, [r7, #15]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop

080047a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a38      	ldr	r2, [pc, #224]	; (8004898 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d022      	beq.n	8004802 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a36      	ldr	r2, [pc, #216]	; (800489c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d01d      	beq.n	8004802 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a35      	ldr	r2, [pc, #212]	; (80048a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d018      	beq.n	8004802 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a33      	ldr	r2, [pc, #204]	; (80048a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d013      	beq.n	8004802 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a32      	ldr	r2, [pc, #200]	; (80048a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d00e      	beq.n	8004802 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a30      	ldr	r2, [pc, #192]	; (80048ac <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d009      	beq.n	8004802 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a2f      	ldr	r2, [pc, #188]	; (80048b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d004      	beq.n	8004802 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a2d      	ldr	r2, [pc, #180]	; (80048b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d101      	bne.n	8004806 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004802:	2301      	movs	r3, #1
 8004804:	e000      	b.n	8004808 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004806:	2300      	movs	r3, #0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d01a      	beq.n	8004842 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	b2db      	uxtb	r3, r3
 8004812:	3b08      	subs	r3, #8
 8004814:	4a28      	ldr	r2, [pc, #160]	; (80048b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004816:	fba2 2303 	umull	r2, r3, r2, r3
 800481a:	091b      	lsrs	r3, r3, #4
 800481c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	4b26      	ldr	r3, [pc, #152]	; (80048bc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004822:	4413      	add	r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	461a      	mov	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a24      	ldr	r2, [pc, #144]	; (80048c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004830:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f003 031f 	and.w	r3, r3, #31
 8004838:	2201      	movs	r2, #1
 800483a:	409a      	lsls	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004840:	e024      	b.n	800488c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	b2db      	uxtb	r3, r3
 8004848:	3b10      	subs	r3, #16
 800484a:	4a1e      	ldr	r2, [pc, #120]	; (80048c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800484c:	fba2 2303 	umull	r2, r3, r2, r3
 8004850:	091b      	lsrs	r3, r3, #4
 8004852:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	4a1c      	ldr	r2, [pc, #112]	; (80048c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d806      	bhi.n	800486a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	4a1b      	ldr	r2, [pc, #108]	; (80048cc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d902      	bls.n	800486a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	3308      	adds	r3, #8
 8004868:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	4b18      	ldr	r3, [pc, #96]	; (80048d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800486e:	4413      	add	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	461a      	mov	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a16      	ldr	r2, [pc, #88]	; (80048d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800487c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f003 031f 	and.w	r3, r3, #31
 8004884:	2201      	movs	r2, #1
 8004886:	409a      	lsls	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800488c:	bf00      	nop
 800488e:	3714      	adds	r7, #20
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	58025408 	.word	0x58025408
 800489c:	5802541c 	.word	0x5802541c
 80048a0:	58025430 	.word	0x58025430
 80048a4:	58025444 	.word	0x58025444
 80048a8:	58025458 	.word	0x58025458
 80048ac:	5802546c 	.word	0x5802546c
 80048b0:	58025480 	.word	0x58025480
 80048b4:	58025494 	.word	0x58025494
 80048b8:	cccccccd 	.word	0xcccccccd
 80048bc:	16009600 	.word	0x16009600
 80048c0:	58025880 	.word	0x58025880
 80048c4:	aaaaaaab 	.word	0xaaaaaaab
 80048c8:	400204b8 	.word	0x400204b8
 80048cc:	4002040f 	.word	0x4002040f
 80048d0:	10008200 	.word	0x10008200
 80048d4:	40020880 	.word	0x40020880

080048d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d04a      	beq.n	8004984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2b08      	cmp	r3, #8
 80048f2:	d847      	bhi.n	8004984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a25      	ldr	r2, [pc, #148]	; (8004990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d022      	beq.n	8004944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a24      	ldr	r2, [pc, #144]	; (8004994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d01d      	beq.n	8004944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a22      	ldr	r2, [pc, #136]	; (8004998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d018      	beq.n	8004944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a21      	ldr	r2, [pc, #132]	; (800499c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d013      	beq.n	8004944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a1f      	ldr	r2, [pc, #124]	; (80049a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00e      	beq.n	8004944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a1e      	ldr	r2, [pc, #120]	; (80049a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d009      	beq.n	8004944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a1c      	ldr	r2, [pc, #112]	; (80049a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d004      	beq.n	8004944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a1b      	ldr	r2, [pc, #108]	; (80049ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d101      	bne.n	8004948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004944:	2301      	movs	r3, #1
 8004946:	e000      	b.n	800494a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004948:	2300      	movs	r3, #0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00a      	beq.n	8004964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	4b17      	ldr	r3, [pc, #92]	; (80049b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004952:	4413      	add	r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	461a      	mov	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a15      	ldr	r2, [pc, #84]	; (80049b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004960:	671a      	str	r2, [r3, #112]	; 0x70
 8004962:	e009      	b.n	8004978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	4b14      	ldr	r3, [pc, #80]	; (80049b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004968:	4413      	add	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	461a      	mov	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a11      	ldr	r2, [pc, #68]	; (80049bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004976:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	3b01      	subs	r3, #1
 800497c:	2201      	movs	r2, #1
 800497e:	409a      	lsls	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004984:	bf00      	nop
 8004986:	3714      	adds	r7, #20
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr
 8004990:	58025408 	.word	0x58025408
 8004994:	5802541c 	.word	0x5802541c
 8004998:	58025430 	.word	0x58025430
 800499c:	58025444 	.word	0x58025444
 80049a0:	58025458 	.word	0x58025458
 80049a4:	5802546c 	.word	0x5802546c
 80049a8:	58025480 	.word	0x58025480
 80049ac:	58025494 	.word	0x58025494
 80049b0:	1600963f 	.word	0x1600963f
 80049b4:	58025940 	.word	0x58025940
 80049b8:	1000823f 	.word	0x1000823f
 80049bc:	40020940 	.word	0x40020940

080049c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b089      	sub	sp, #36	; 0x24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80049ca:	2300      	movs	r3, #0
 80049cc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80049ce:	4b89      	ldr	r3, [pc, #548]	; (8004bf4 <HAL_GPIO_Init+0x234>)
 80049d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80049d2:	e194      	b.n	8004cfe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	2101      	movs	r1, #1
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	fa01 f303 	lsl.w	r3, r1, r3
 80049e0:	4013      	ands	r3, r2
 80049e2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f000 8186 	beq.w	8004cf8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d003      	beq.n	80049fc <HAL_GPIO_Init+0x3c>
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	2b12      	cmp	r3, #18
 80049fa:	d123      	bne.n	8004a44 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	08da      	lsrs	r2, r3, #3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	3208      	adds	r2, #8
 8004a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	f003 0307 	and.w	r3, r3, #7
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	220f      	movs	r2, #15
 8004a14:	fa02 f303 	lsl.w	r3, r2, r3
 8004a18:	43db      	mvns	r3, r3
 8004a1a:	69ba      	ldr	r2, [r7, #24]
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	691a      	ldr	r2, [r3, #16]
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	08da      	lsrs	r2, r3, #3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	3208      	adds	r2, #8
 8004a3e:	69b9      	ldr	r1, [r7, #24]
 8004a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	2203      	movs	r2, #3
 8004a50:	fa02 f303 	lsl.w	r3, r2, r3
 8004a54:	43db      	mvns	r3, r3
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f003 0203 	and.w	r2, r3, #3
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d00b      	beq.n	8004a98 <HAL_GPIO_Init+0xd8>
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d007      	beq.n	8004a98 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004a8c:	2b11      	cmp	r3, #17
 8004a8e:	d003      	beq.n	8004a98 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	2b12      	cmp	r3, #18
 8004a96:	d130      	bne.n	8004afa <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	005b      	lsls	r3, r3, #1
 8004aa2:	2203      	movs	r2, #3
 8004aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa8:	43db      	mvns	r3, r3
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	4013      	ands	r3, r2
 8004aae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	68da      	ldr	r2, [r3, #12]
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	005b      	lsls	r3, r3, #1
 8004ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8004abc:	69ba      	ldr	r2, [r7, #24]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	69ba      	ldr	r2, [r7, #24]
 8004ac6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ace:	2201      	movs	r2, #1
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad6:	43db      	mvns	r3, r3
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	4013      	ands	r3, r2
 8004adc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	091b      	lsrs	r3, r3, #4
 8004ae4:	f003 0201 	and.w	r2, r3, #1
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	fa02 f303 	lsl.w	r3, r2, r3
 8004aee:	69ba      	ldr	r2, [r7, #24]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	2203      	movs	r2, #3
 8004b06:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0a:	43db      	mvns	r3, r3
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	4013      	ands	r3, r2
 8004b10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	689a      	ldr	r2, [r3, #8]
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	69ba      	ldr	r2, [r7, #24]
 8004b28:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f000 80e0 	beq.w	8004cf8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b38:	4b2f      	ldr	r3, [pc, #188]	; (8004bf8 <HAL_GPIO_Init+0x238>)
 8004b3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b3e:	4a2e      	ldr	r2, [pc, #184]	; (8004bf8 <HAL_GPIO_Init+0x238>)
 8004b40:	f043 0302 	orr.w	r3, r3, #2
 8004b44:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004b48:	4b2b      	ldr	r3, [pc, #172]	; (8004bf8 <HAL_GPIO_Init+0x238>)
 8004b4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	60fb      	str	r3, [r7, #12]
 8004b54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b56:	4a29      	ldr	r2, [pc, #164]	; (8004bfc <HAL_GPIO_Init+0x23c>)
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	089b      	lsrs	r3, r3, #2
 8004b5c:	3302      	adds	r3, #2
 8004b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	f003 0303 	and.w	r3, r3, #3
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	220f      	movs	r2, #15
 8004b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b72:	43db      	mvns	r3, r3
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	4013      	ands	r3, r2
 8004b78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a20      	ldr	r2, [pc, #128]	; (8004c00 <HAL_GPIO_Init+0x240>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d052      	beq.n	8004c28 <HAL_GPIO_Init+0x268>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a1f      	ldr	r2, [pc, #124]	; (8004c04 <HAL_GPIO_Init+0x244>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d031      	beq.n	8004bee <HAL_GPIO_Init+0x22e>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a1e      	ldr	r2, [pc, #120]	; (8004c08 <HAL_GPIO_Init+0x248>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d02b      	beq.n	8004bea <HAL_GPIO_Init+0x22a>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a1d      	ldr	r2, [pc, #116]	; (8004c0c <HAL_GPIO_Init+0x24c>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d025      	beq.n	8004be6 <HAL_GPIO_Init+0x226>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a1c      	ldr	r2, [pc, #112]	; (8004c10 <HAL_GPIO_Init+0x250>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d01f      	beq.n	8004be2 <HAL_GPIO_Init+0x222>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a1b      	ldr	r2, [pc, #108]	; (8004c14 <HAL_GPIO_Init+0x254>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d019      	beq.n	8004bde <HAL_GPIO_Init+0x21e>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a1a      	ldr	r2, [pc, #104]	; (8004c18 <HAL_GPIO_Init+0x258>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d013      	beq.n	8004bda <HAL_GPIO_Init+0x21a>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a19      	ldr	r2, [pc, #100]	; (8004c1c <HAL_GPIO_Init+0x25c>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d00d      	beq.n	8004bd6 <HAL_GPIO_Init+0x216>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a18      	ldr	r2, [pc, #96]	; (8004c20 <HAL_GPIO_Init+0x260>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d007      	beq.n	8004bd2 <HAL_GPIO_Init+0x212>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a17      	ldr	r2, [pc, #92]	; (8004c24 <HAL_GPIO_Init+0x264>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d101      	bne.n	8004bce <HAL_GPIO_Init+0x20e>
 8004bca:	2309      	movs	r3, #9
 8004bcc:	e02d      	b.n	8004c2a <HAL_GPIO_Init+0x26a>
 8004bce:	230a      	movs	r3, #10
 8004bd0:	e02b      	b.n	8004c2a <HAL_GPIO_Init+0x26a>
 8004bd2:	2308      	movs	r3, #8
 8004bd4:	e029      	b.n	8004c2a <HAL_GPIO_Init+0x26a>
 8004bd6:	2307      	movs	r3, #7
 8004bd8:	e027      	b.n	8004c2a <HAL_GPIO_Init+0x26a>
 8004bda:	2306      	movs	r3, #6
 8004bdc:	e025      	b.n	8004c2a <HAL_GPIO_Init+0x26a>
 8004bde:	2305      	movs	r3, #5
 8004be0:	e023      	b.n	8004c2a <HAL_GPIO_Init+0x26a>
 8004be2:	2304      	movs	r3, #4
 8004be4:	e021      	b.n	8004c2a <HAL_GPIO_Init+0x26a>
 8004be6:	2303      	movs	r3, #3
 8004be8:	e01f      	b.n	8004c2a <HAL_GPIO_Init+0x26a>
 8004bea:	2302      	movs	r3, #2
 8004bec:	e01d      	b.n	8004c2a <HAL_GPIO_Init+0x26a>
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e01b      	b.n	8004c2a <HAL_GPIO_Init+0x26a>
 8004bf2:	bf00      	nop
 8004bf4:	58000080 	.word	0x58000080
 8004bf8:	58024400 	.word	0x58024400
 8004bfc:	58000400 	.word	0x58000400
 8004c00:	58020000 	.word	0x58020000
 8004c04:	58020400 	.word	0x58020400
 8004c08:	58020800 	.word	0x58020800
 8004c0c:	58020c00 	.word	0x58020c00
 8004c10:	58021000 	.word	0x58021000
 8004c14:	58021400 	.word	0x58021400
 8004c18:	58021800 	.word	0x58021800
 8004c1c:	58021c00 	.word	0x58021c00
 8004c20:	58022000 	.word	0x58022000
 8004c24:	58022400 	.word	0x58022400
 8004c28:	2300      	movs	r3, #0
 8004c2a:	69fa      	ldr	r2, [r7, #28]
 8004c2c:	f002 0203 	and.w	r2, r2, #3
 8004c30:	0092      	lsls	r2, r2, #2
 8004c32:	4093      	lsls	r3, r2
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c3a:	4938      	ldr	r1, [pc, #224]	; (8004d1c <HAL_GPIO_Init+0x35c>)
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	089b      	lsrs	r3, r3, #2
 8004c40:	3302      	adds	r3, #2
 8004c42:	69ba      	ldr	r2, [r7, #24]
 8004c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	43db      	mvns	r3, r3
 8004c52:	69ba      	ldr	r2, [r7, #24]
 8004c54:	4013      	ands	r3, r2
 8004c56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d003      	beq.n	8004c6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	43db      	mvns	r3, r3
 8004c7c:	69ba      	ldr	r2, [r7, #24]
 8004c7e:	4013      	ands	r3, r2
 8004c80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	43db      	mvns	r3, r3
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	4013      	ands	r3, r2
 8004cac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004cba:	69ba      	ldr	r2, [r7, #24]
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004cc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	43db      	mvns	r3, r3
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d003      	beq.n	8004cf0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004ce8:	69ba      	ldr	r2, [r7, #24]
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004cf0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	fa22 f303 	lsr.w	r3, r2, r3
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f47f ae63 	bne.w	80049d4 <HAL_GPIO_Init+0x14>
  }
}
 8004d0e:	bf00      	nop
 8004d10:	3724      	adds	r7, #36	; 0x24
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	58000400 	.word	0x58000400

08004d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	460b      	mov	r3, r1
 8004d2a:	807b      	strh	r3, [r7, #2]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d30:	787b      	ldrb	r3, [r7, #1]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d36:	887a      	ldrh	r2, [r7, #2]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004d3c:	e003      	b.n	8004d46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004d3e:	887b      	ldrh	r3, [r7, #2]
 8004d40:	041a      	lsls	r2, r3, #16
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	619a      	str	r2, [r3, #24]
}
 8004d46:	bf00      	nop
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
	...

08004d54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e07f      	b.n	8004e66 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d106      	bne.n	8004d80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f7fc fc16 	bl	80015ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2224      	movs	r2, #36	; 0x24
 8004d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f022 0201 	bic.w	r2, r2, #1
 8004d96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004da4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	689a      	ldr	r2, [r3, #8]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004db4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d107      	bne.n	8004dce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	689a      	ldr	r2, [r3, #8]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dca:	609a      	str	r2, [r3, #8]
 8004dcc:	e006      	b.n	8004ddc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689a      	ldr	r2, [r3, #8]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004dda:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d104      	bne.n	8004dee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004dec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	6859      	ldr	r1, [r3, #4]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	4b1d      	ldr	r3, [pc, #116]	; (8004e70 <HAL_I2C_Init+0x11c>)
 8004dfa:	430b      	orrs	r3, r1
 8004dfc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68da      	ldr	r2, [r3, #12]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	691a      	ldr	r2, [r3, #16]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	ea42 0103 	orr.w	r1, r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	021a      	lsls	r2, r3, #8
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	430a      	orrs	r2, r1
 8004e26:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	69d9      	ldr	r1, [r3, #28]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a1a      	ldr	r2, [r3, #32]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	430a      	orrs	r2, r1
 8004e36:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f042 0201 	orr.w	r2, r2, #1
 8004e46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2220      	movs	r2, #32
 8004e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	02008000 	.word	0x02008000

08004e74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b20      	cmp	r3, #32
 8004e88:	d138      	bne.n	8004efc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d101      	bne.n	8004e98 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004e94:	2302      	movs	r3, #2
 8004e96:	e032      	b.n	8004efe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2224      	movs	r2, #36	; 0x24
 8004ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f022 0201 	bic.w	r2, r2, #1
 8004eb6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ec6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6819      	ldr	r1, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f042 0201 	orr.w	r2, r2, #1
 8004ee6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2220      	movs	r2, #32
 8004eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	e000      	b.n	8004efe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004efc:	2302      	movs	r3, #2
  }
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b085      	sub	sp, #20
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
 8004f12:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2b20      	cmp	r3, #32
 8004f1e:	d139      	bne.n	8004f94 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d101      	bne.n	8004f2e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	e033      	b.n	8004f96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2224      	movs	r2, #36	; 0x24
 8004f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 0201 	bic.w	r2, r2, #1
 8004f4c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004f5c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	021b      	lsls	r3, r3, #8
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f042 0201 	orr.w	r2, r2, #1
 8004f7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2220      	movs	r2, #32
 8004f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f90:	2300      	movs	r3, #0
 8004f92:	e000      	b.n	8004f96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004f94:	2302      	movs	r3, #2
  }
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004fa2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fa4:	b08f      	sub	sp, #60	; 0x3c
 8004fa6:	af0a      	add	r7, sp, #40	; 0x28
 8004fa8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e116      	b.n	80051e2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d106      	bne.n	8004fd4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f00a fc5c 	bl	800f88c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2203      	movs	r2, #3
 8004fd8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d102      	bne.n	8004fee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f007 fd57 	bl	800caa6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	603b      	str	r3, [r7, #0]
 8004ffe:	687e      	ldr	r6, [r7, #4]
 8005000:	466d      	mov	r5, sp
 8005002:	f106 0410 	add.w	r4, r6, #16
 8005006:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005008:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800500a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800500c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800500e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005012:	e885 0003 	stmia.w	r5, {r0, r1}
 8005016:	1d33      	adds	r3, r6, #4
 8005018:	cb0e      	ldmia	r3, {r1, r2, r3}
 800501a:	6838      	ldr	r0, [r7, #0]
 800501c:	f007 fc2e 	bl	800c87c <USB_CoreInit>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d005      	beq.n	8005032 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2202      	movs	r2, #2
 800502a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e0d7      	b.n	80051e2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2100      	movs	r1, #0
 8005038:	4618      	mov	r0, r3
 800503a:	f007 fd45 	bl	800cac8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800503e:	2300      	movs	r3, #0
 8005040:	73fb      	strb	r3, [r7, #15]
 8005042:	e04a      	b.n	80050da <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005044:	7bfa      	ldrb	r2, [r7, #15]
 8005046:	6879      	ldr	r1, [r7, #4]
 8005048:	4613      	mov	r3, r2
 800504a:	00db      	lsls	r3, r3, #3
 800504c:	1a9b      	subs	r3, r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	440b      	add	r3, r1
 8005052:	333d      	adds	r3, #61	; 0x3d
 8005054:	2201      	movs	r2, #1
 8005056:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005058:	7bfa      	ldrb	r2, [r7, #15]
 800505a:	6879      	ldr	r1, [r7, #4]
 800505c:	4613      	mov	r3, r2
 800505e:	00db      	lsls	r3, r3, #3
 8005060:	1a9b      	subs	r3, r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	440b      	add	r3, r1
 8005066:	333c      	adds	r3, #60	; 0x3c
 8005068:	7bfa      	ldrb	r2, [r7, #15]
 800506a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800506c:	7bfa      	ldrb	r2, [r7, #15]
 800506e:	7bfb      	ldrb	r3, [r7, #15]
 8005070:	b298      	uxth	r0, r3
 8005072:	6879      	ldr	r1, [r7, #4]
 8005074:	4613      	mov	r3, r2
 8005076:	00db      	lsls	r3, r3, #3
 8005078:	1a9b      	subs	r3, r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	440b      	add	r3, r1
 800507e:	3342      	adds	r3, #66	; 0x42
 8005080:	4602      	mov	r2, r0
 8005082:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005084:	7bfa      	ldrb	r2, [r7, #15]
 8005086:	6879      	ldr	r1, [r7, #4]
 8005088:	4613      	mov	r3, r2
 800508a:	00db      	lsls	r3, r3, #3
 800508c:	1a9b      	subs	r3, r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	440b      	add	r3, r1
 8005092:	333f      	adds	r3, #63	; 0x3f
 8005094:	2200      	movs	r2, #0
 8005096:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005098:	7bfa      	ldrb	r2, [r7, #15]
 800509a:	6879      	ldr	r1, [r7, #4]
 800509c:	4613      	mov	r3, r2
 800509e:	00db      	lsls	r3, r3, #3
 80050a0:	1a9b      	subs	r3, r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	440b      	add	r3, r1
 80050a6:	3344      	adds	r3, #68	; 0x44
 80050a8:	2200      	movs	r2, #0
 80050aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80050ac:	7bfa      	ldrb	r2, [r7, #15]
 80050ae:	6879      	ldr	r1, [r7, #4]
 80050b0:	4613      	mov	r3, r2
 80050b2:	00db      	lsls	r3, r3, #3
 80050b4:	1a9b      	subs	r3, r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	440b      	add	r3, r1
 80050ba:	3348      	adds	r3, #72	; 0x48
 80050bc:	2200      	movs	r2, #0
 80050be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80050c0:	7bfa      	ldrb	r2, [r7, #15]
 80050c2:	6879      	ldr	r1, [r7, #4]
 80050c4:	4613      	mov	r3, r2
 80050c6:	00db      	lsls	r3, r3, #3
 80050c8:	1a9b      	subs	r3, r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	440b      	add	r3, r1
 80050ce:	3350      	adds	r3, #80	; 0x50
 80050d0:	2200      	movs	r2, #0
 80050d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
 80050d6:	3301      	adds	r3, #1
 80050d8:	73fb      	strb	r3, [r7, #15]
 80050da:	7bfa      	ldrb	r2, [r7, #15]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d3af      	bcc.n	8005044 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050e4:	2300      	movs	r3, #0
 80050e6:	73fb      	strb	r3, [r7, #15]
 80050e8:	e044      	b.n	8005174 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80050ea:	7bfa      	ldrb	r2, [r7, #15]
 80050ec:	6879      	ldr	r1, [r7, #4]
 80050ee:	4613      	mov	r3, r2
 80050f0:	00db      	lsls	r3, r3, #3
 80050f2:	1a9b      	subs	r3, r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	440b      	add	r3, r1
 80050f8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80050fc:	2200      	movs	r2, #0
 80050fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005100:	7bfa      	ldrb	r2, [r7, #15]
 8005102:	6879      	ldr	r1, [r7, #4]
 8005104:	4613      	mov	r3, r2
 8005106:	00db      	lsls	r3, r3, #3
 8005108:	1a9b      	subs	r3, r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	440b      	add	r3, r1
 800510e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005112:	7bfa      	ldrb	r2, [r7, #15]
 8005114:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005116:	7bfa      	ldrb	r2, [r7, #15]
 8005118:	6879      	ldr	r1, [r7, #4]
 800511a:	4613      	mov	r3, r2
 800511c:	00db      	lsls	r3, r3, #3
 800511e:	1a9b      	subs	r3, r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	440b      	add	r3, r1
 8005124:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005128:	2200      	movs	r2, #0
 800512a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800512c:	7bfa      	ldrb	r2, [r7, #15]
 800512e:	6879      	ldr	r1, [r7, #4]
 8005130:	4613      	mov	r3, r2
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	1a9b      	subs	r3, r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	440b      	add	r3, r1
 800513a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800513e:	2200      	movs	r2, #0
 8005140:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005142:	7bfa      	ldrb	r2, [r7, #15]
 8005144:	6879      	ldr	r1, [r7, #4]
 8005146:	4613      	mov	r3, r2
 8005148:	00db      	lsls	r3, r3, #3
 800514a:	1a9b      	subs	r3, r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	440b      	add	r3, r1
 8005150:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005154:	2200      	movs	r2, #0
 8005156:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005158:	7bfa      	ldrb	r2, [r7, #15]
 800515a:	6879      	ldr	r1, [r7, #4]
 800515c:	4613      	mov	r3, r2
 800515e:	00db      	lsls	r3, r3, #3
 8005160:	1a9b      	subs	r3, r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	440b      	add	r3, r1
 8005166:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800516a:	2200      	movs	r2, #0
 800516c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800516e:	7bfb      	ldrb	r3, [r7, #15]
 8005170:	3301      	adds	r3, #1
 8005172:	73fb      	strb	r3, [r7, #15]
 8005174:	7bfa      	ldrb	r2, [r7, #15]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	429a      	cmp	r2, r3
 800517c:	d3b5      	bcc.n	80050ea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	603b      	str	r3, [r7, #0]
 8005184:	687e      	ldr	r6, [r7, #4]
 8005186:	466d      	mov	r5, sp
 8005188:	f106 0410 	add.w	r4, r6, #16
 800518c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800518e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005190:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005192:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005194:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005198:	e885 0003 	stmia.w	r5, {r0, r1}
 800519c:	1d33      	adds	r3, r6, #4
 800519e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051a0:	6838      	ldr	r0, [r7, #0]
 80051a2:	f007 fcbb 	bl	800cb1c <USB_DevInit>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d005      	beq.n	80051b8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e014      	b.n	80051e2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d102      	bne.n	80051d6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f001 f891 	bl	80062f8 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4618      	mov	r0, r3
 80051dc:	f008 fca2 	bl	800db24 <USB_DevDisconnect>

  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080051ea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b084      	sub	sp, #16
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d101      	bne.n	8005206 <HAL_PCD_Start+0x1c>
 8005202:	2302      	movs	r3, #2
 8005204:	e020      	b.n	8005248 <HAL_PCD_Start+0x5e>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005212:	2b01      	cmp	r3, #1
 8005214:	d109      	bne.n	800522a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800521a:	2b01      	cmp	r3, #1
 800521c:	d005      	beq.n	800522a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005222:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4618      	mov	r0, r3
 8005230:	f008 fc60 	bl	800daf4 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4618      	mov	r0, r3
 800523a:	f007 fc23 	bl	800ca84 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005250:	b590      	push	{r4, r7, lr}
 8005252:	b08d      	sub	sp, #52	; 0x34
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800525e:	6a3b      	ldr	r3, [r7, #32]
 8005260:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4618      	mov	r0, r3
 8005268:	f008 fd07 	bl	800dc7a <USB_GetMode>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	f040 83ca 	bne.w	8005a08 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4618      	mov	r0, r3
 800527a:	f008 fc6b 	bl	800db54 <USB_ReadInterrupts>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 83c0 	beq.w	8005a06 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4618      	mov	r0, r3
 800528c:	f008 fc62 	bl	800db54 <USB_ReadInterrupts>
 8005290:	4603      	mov	r3, r0
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b02      	cmp	r3, #2
 8005298:	d107      	bne.n	80052aa <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	695a      	ldr	r2, [r3, #20]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f002 0202 	and.w	r2, r2, #2
 80052a8:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f008 fc50 	bl	800db54 <USB_ReadInterrupts>
 80052b4:	4603      	mov	r3, r0
 80052b6:	f003 0310 	and.w	r3, r3, #16
 80052ba:	2b10      	cmp	r3, #16
 80052bc:	d161      	bne.n	8005382 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	699a      	ldr	r2, [r3, #24]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f022 0210 	bic.w	r2, r2, #16
 80052cc:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80052ce:	6a3b      	ldr	r3, [r7, #32]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	f003 020f 	and.w	r2, r3, #15
 80052da:	4613      	mov	r3, r2
 80052dc:	00db      	lsls	r3, r3, #3
 80052de:	1a9b      	subs	r3, r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	4413      	add	r3, r2
 80052ea:	3304      	adds	r3, #4
 80052ec:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	0c5b      	lsrs	r3, r3, #17
 80052f2:	f003 030f 	and.w	r3, r3, #15
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d124      	bne.n	8005344 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005300:	4013      	ands	r3, r2
 8005302:	2b00      	cmp	r3, #0
 8005304:	d035      	beq.n	8005372 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	091b      	lsrs	r3, r3, #4
 800530e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005310:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005314:	b29b      	uxth	r3, r3
 8005316:	461a      	mov	r2, r3
 8005318:	6a38      	ldr	r0, [r7, #32]
 800531a:	f008 fac8 	bl	800d8ae <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	68da      	ldr	r2, [r3, #12]
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	091b      	lsrs	r3, r3, #4
 8005326:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800532a:	441a      	add	r2, r3
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	699a      	ldr	r2, [r3, #24]
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	091b      	lsrs	r3, r3, #4
 8005338:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800533c:	441a      	add	r2, r3
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	619a      	str	r2, [r3, #24]
 8005342:	e016      	b.n	8005372 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	0c5b      	lsrs	r3, r3, #17
 8005348:	f003 030f 	and.w	r3, r3, #15
 800534c:	2b06      	cmp	r3, #6
 800534e:	d110      	bne.n	8005372 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005356:	2208      	movs	r2, #8
 8005358:	4619      	mov	r1, r3
 800535a:	6a38      	ldr	r0, [r7, #32]
 800535c:	f008 faa7 	bl	800d8ae <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	699a      	ldr	r2, [r3, #24]
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	091b      	lsrs	r3, r3, #4
 8005368:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800536c:	441a      	add	r2, r3
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	699a      	ldr	r2, [r3, #24]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f042 0210 	orr.w	r2, r2, #16
 8005380:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4618      	mov	r0, r3
 8005388:	f008 fbe4 	bl	800db54 <USB_ReadInterrupts>
 800538c:	4603      	mov	r3, r0
 800538e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005392:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005396:	d16e      	bne.n	8005476 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8005398:	2300      	movs	r3, #0
 800539a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f008 fbea 	bl	800db7a <USB_ReadDevAllOutEpInterrupt>
 80053a6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80053a8:	e062      	b.n	8005470 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80053aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d057      	beq.n	8005464 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ba:	b2d2      	uxtb	r2, r2
 80053bc:	4611      	mov	r1, r2
 80053be:	4618      	mov	r0, r3
 80053c0:	f008 fc0f 	bl	800dbe2 <USB_ReadDevOutEPInterrupt>
 80053c4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	f003 0301 	and.w	r3, r3, #1
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00c      	beq.n	80053ea <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	015a      	lsls	r2, r3, #5
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053dc:	461a      	mov	r2, r3
 80053de:	2301      	movs	r3, #1
 80053e0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80053e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 fddd 	bl	8005fa4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	f003 0308 	and.w	r3, r3, #8
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00c      	beq.n	800540e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80053f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f6:	015a      	lsls	r2, r3, #5
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	4413      	add	r3, r2
 80053fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005400:	461a      	mov	r2, r3
 8005402:	2308      	movs	r3, #8
 8005404:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005406:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 fed7 	bl	80061bc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	f003 0310 	and.w	r3, r3, #16
 8005414:	2b00      	cmp	r3, #0
 8005416:	d008      	beq.n	800542a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541a:	015a      	lsls	r2, r3, #5
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	4413      	add	r3, r2
 8005420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005424:	461a      	mov	r2, r3
 8005426:	2310      	movs	r3, #16
 8005428:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	f003 0320 	and.w	r3, r3, #32
 8005430:	2b00      	cmp	r3, #0
 8005432:	d008      	beq.n	8005446 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	4413      	add	r3, r2
 800543c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005440:	461a      	mov	r2, r3
 8005442:	2320      	movs	r3, #32
 8005444:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d009      	beq.n	8005464 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	015a      	lsls	r2, r3, #5
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	4413      	add	r3, r2
 8005458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800545c:	461a      	mov	r2, r3
 800545e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005462:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005466:	3301      	adds	r3, #1
 8005468:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800546a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546c:	085b      	lsrs	r3, r3, #1
 800546e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005472:	2b00      	cmp	r3, #0
 8005474:	d199      	bne.n	80053aa <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4618      	mov	r0, r3
 800547c:	f008 fb6a 	bl	800db54 <USB_ReadInterrupts>
 8005480:	4603      	mov	r3, r0
 8005482:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005486:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800548a:	f040 80c0 	bne.w	800560e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4618      	mov	r0, r3
 8005494:	f008 fb8b 	bl	800dbae <USB_ReadDevAllInEpInterrupt>
 8005498:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800549a:	2300      	movs	r3, #0
 800549c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800549e:	e0b2      	b.n	8005606 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80054a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f000 80a7 	beq.w	80055fa <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054b2:	b2d2      	uxtb	r2, r2
 80054b4:	4611      	mov	r1, r2
 80054b6:	4618      	mov	r0, r3
 80054b8:	f008 fbb1 	bl	800dc1e <USB_ReadDevInEPInterrupt>
 80054bc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d057      	beq.n	8005578 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	f003 030f 	and.w	r3, r3, #15
 80054ce:	2201      	movs	r2, #1
 80054d0:	fa02 f303 	lsl.w	r3, r2, r3
 80054d4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	43db      	mvns	r3, r3
 80054e2:	69f9      	ldr	r1, [r7, #28]
 80054e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054e8:	4013      	ands	r3, r2
 80054ea:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80054ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f8:	461a      	mov	r2, r3
 80054fa:	2301      	movs	r3, #1
 80054fc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d132      	bne.n	800556c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005506:	6879      	ldr	r1, [r7, #4]
 8005508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800550a:	4613      	mov	r3, r2
 800550c:	00db      	lsls	r3, r3, #3
 800550e:	1a9b      	subs	r3, r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	440b      	add	r3, r1
 8005514:	3348      	adds	r3, #72	; 0x48
 8005516:	6819      	ldr	r1, [r3, #0]
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800551c:	4613      	mov	r3, r2
 800551e:	00db      	lsls	r3, r3, #3
 8005520:	1a9b      	subs	r3, r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	4403      	add	r3, r0
 8005526:	3344      	adds	r3, #68	; 0x44
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4419      	add	r1, r3
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005530:	4613      	mov	r3, r2
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	1a9b      	subs	r3, r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4403      	add	r3, r0
 800553a:	3348      	adds	r3, #72	; 0x48
 800553c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800553e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005540:	2b00      	cmp	r3, #0
 8005542:	d113      	bne.n	800556c <HAL_PCD_IRQHandler+0x31c>
 8005544:	6879      	ldr	r1, [r7, #4]
 8005546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005548:	4613      	mov	r3, r2
 800554a:	00db      	lsls	r3, r3, #3
 800554c:	1a9b      	subs	r3, r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	440b      	add	r3, r1
 8005552:	3350      	adds	r3, #80	; 0x50
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d108      	bne.n	800556c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6818      	ldr	r0, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005564:	461a      	mov	r2, r3
 8005566:	2101      	movs	r1, #1
 8005568:	f008 fbba 	bl	800dce0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800556c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556e:	b2db      	uxtb	r3, r3
 8005570:	4619      	mov	r1, r3
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f00a fa17 	bl	800f9a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	f003 0308 	and.w	r3, r3, #8
 800557e:	2b00      	cmp	r3, #0
 8005580:	d008      	beq.n	8005594 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	4413      	add	r3, r2
 800558a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558e:	461a      	mov	r2, r3
 8005590:	2308      	movs	r3, #8
 8005592:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	f003 0310 	and.w	r3, r3, #16
 800559a:	2b00      	cmp	r3, #0
 800559c:	d008      	beq.n	80055b0 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	015a      	lsls	r2, r3, #5
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	4413      	add	r3, r2
 80055a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055aa:	461a      	mov	r2, r3
 80055ac:	2310      	movs	r3, #16
 80055ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d008      	beq.n	80055cc <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	015a      	lsls	r2, r3, #5
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	4413      	add	r3, r2
 80055c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c6:	461a      	mov	r2, r3
 80055c8:	2340      	movs	r3, #64	; 0x40
 80055ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d008      	beq.n	80055e8 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80055d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d8:	015a      	lsls	r2, r3, #5
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	4413      	add	r3, r2
 80055de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e2:	461a      	mov	r2, r3
 80055e4:	2302      	movs	r3, #2
 80055e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80055f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 fc48 	bl	8005e8a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	3301      	adds	r3, #1
 80055fe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005602:	085b      	lsrs	r3, r3, #1
 8005604:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005608:	2b00      	cmp	r3, #0
 800560a:	f47f af49 	bne.w	80054a0 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4618      	mov	r0, r3
 8005614:	f008 fa9e 	bl	800db54 <USB_ReadInterrupts>
 8005618:	4603      	mov	r3, r0
 800561a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800561e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005622:	d122      	bne.n	800566a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	69fa      	ldr	r2, [r7, #28]
 800562e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005632:	f023 0301 	bic.w	r3, r3, #1
 8005636:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800563e:	2b01      	cmp	r3, #1
 8005640:	d108      	bne.n	8005654 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800564a:	2100      	movs	r1, #0
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 fe77 	bl	8006340 <HAL_PCDEx_LPM_Callback>
 8005652:	e002      	b.n	800565a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f00a fa1d 	bl	800fa94 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	695a      	ldr	r2, [r3, #20]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005668:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4618      	mov	r0, r3
 8005670:	f008 fa70 	bl	800db54 <USB_ReadInterrupts>
 8005674:	4603      	mov	r3, r0
 8005676:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800567a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800567e:	d112      	bne.n	80056a6 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f003 0301 	and.w	r3, r3, #1
 800568c:	2b01      	cmp	r3, #1
 800568e:	d102      	bne.n	8005696 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f00a f9d9 	bl	800fa48 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	695a      	ldr	r2, [r3, #20]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80056a4:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f008 fa52 	bl	800db54 <USB_ReadInterrupts>
 80056b0:	4603      	mov	r3, r0
 80056b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056ba:	d121      	bne.n	8005700 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	695a      	ldr	r2, [r3, #20]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80056ca:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d111      	bne.n	80056fa <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e4:	089b      	lsrs	r3, r3, #2
 80056e6:	f003 020f 	and.w	r2, r3, #15
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80056f0:	2101      	movs	r1, #1
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 fe24 	bl	8006340 <HAL_PCDEx_LPM_Callback>
 80056f8:	e002      	b.n	8005700 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f00a f9a4 	bl	800fa48 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4618      	mov	r0, r3
 8005706:	f008 fa25 	bl	800db54 <USB_ReadInterrupts>
 800570a:	4603      	mov	r3, r0
 800570c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005714:	f040 80c7 	bne.w	80058a6 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	69fa      	ldr	r2, [r7, #28]
 8005722:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005726:	f023 0301 	bic.w	r3, r3, #1
 800572a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2110      	movs	r1, #16
 8005732:	4618      	mov	r0, r3
 8005734:	f007 fb50 	bl	800cdd8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005738:	2300      	movs	r3, #0
 800573a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800573c:	e056      	b.n	80057ec <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800573e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005740:	015a      	lsls	r2, r3, #5
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	4413      	add	r3, r2
 8005746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800574a:	461a      	mov	r2, r3
 800574c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005750:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005754:	015a      	lsls	r2, r3, #5
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	4413      	add	r3, r2
 800575a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005762:	0151      	lsls	r1, r2, #5
 8005764:	69fa      	ldr	r2, [r7, #28]
 8005766:	440a      	add	r2, r1
 8005768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800576c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005770:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005774:	015a      	lsls	r2, r3, #5
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	4413      	add	r3, r2
 800577a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005782:	0151      	lsls	r1, r2, #5
 8005784:	69fa      	ldr	r2, [r7, #28]
 8005786:	440a      	add	r2, r1
 8005788:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800578c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005790:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	4413      	add	r3, r2
 800579a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800579e:	461a      	mov	r2, r3
 80057a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057a4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80057a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a8:	015a      	lsls	r2, r3, #5
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	4413      	add	r3, r2
 80057ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057b6:	0151      	lsls	r1, r2, #5
 80057b8:	69fa      	ldr	r2, [r7, #28]
 80057ba:	440a      	add	r2, r1
 80057bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057c4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80057c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c8:	015a      	lsls	r2, r3, #5
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	4413      	add	r3, r2
 80057ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057d6:	0151      	lsls	r1, r2, #5
 80057d8:	69fa      	ldr	r2, [r7, #28]
 80057da:	440a      	add	r2, r1
 80057dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80057e4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e8:	3301      	adds	r3, #1
 80057ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d3a3      	bcc.n	800573e <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057fc:	69db      	ldr	r3, [r3, #28]
 80057fe:	69fa      	ldr	r2, [r7, #28]
 8005800:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005804:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005808:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580e:	2b00      	cmp	r3, #0
 8005810:	d016      	beq.n	8005840 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005818:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800581c:	69fa      	ldr	r2, [r7, #28]
 800581e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005822:	f043 030b 	orr.w	r3, r3, #11
 8005826:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005832:	69fa      	ldr	r2, [r7, #28]
 8005834:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005838:	f043 030b 	orr.w	r3, r3, #11
 800583c:	6453      	str	r3, [r2, #68]	; 0x44
 800583e:	e015      	b.n	800586c <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005846:	695a      	ldr	r2, [r3, #20]
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800584e:	4619      	mov	r1, r3
 8005850:	f242 032b 	movw	r3, #8235	; 0x202b
 8005854:	4313      	orrs	r3, r2
 8005856:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	69fa      	ldr	r2, [r7, #28]
 8005862:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005866:	f043 030b 	orr.w	r3, r3, #11
 800586a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	69fa      	ldr	r2, [r7, #28]
 8005876:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800587a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800587e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6818      	ldr	r0, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005890:	461a      	mov	r2, r3
 8005892:	f008 fa25 	bl	800dce0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	695a      	ldr	r2, [r3, #20]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80058a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4618      	mov	r0, r3
 80058ac:	f008 f952 	bl	800db54 <USB_ReadInterrupts>
 80058b0:	4603      	mov	r3, r0
 80058b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058ba:	d124      	bne.n	8005906 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4618      	mov	r0, r3
 80058c2:	f008 f9e9 	bl	800dc98 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f007 fae5 	bl	800ce9a <USB_GetDevSpeed>
 80058d0:	4603      	mov	r3, r0
 80058d2:	461a      	mov	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681c      	ldr	r4, [r3, #0]
 80058dc:	f001 fc94 	bl	8007208 <HAL_RCC_GetHCLKFreq>
 80058e0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	461a      	mov	r2, r3
 80058ea:	4620      	mov	r0, r4
 80058ec:	f007 f828 	bl	800c940 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f00a f880 	bl	800f9f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	695a      	ldr	r2, [r3, #20]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005904:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4618      	mov	r0, r3
 800590c:	f008 f922 	bl	800db54 <USB_ReadInterrupts>
 8005910:	4603      	mov	r3, r0
 8005912:	f003 0308 	and.w	r3, r3, #8
 8005916:	2b08      	cmp	r3, #8
 8005918:	d10a      	bne.n	8005930 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f00a f85d 	bl	800f9da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	695a      	ldr	r2, [r3, #20]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f002 0208 	and.w	r2, r2, #8
 800592e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4618      	mov	r0, r3
 8005936:	f008 f90d 	bl	800db54 <USB_ReadInterrupts>
 800593a:	4603      	mov	r3, r0
 800593c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005940:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005944:	d10f      	bne.n	8005966 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005946:	2300      	movs	r3, #0
 8005948:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800594a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594c:	b2db      	uxtb	r3, r3
 800594e:	4619      	mov	r1, r3
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f00a f8bf 	bl	800fad4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	695a      	ldr	r2, [r3, #20]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005964:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4618      	mov	r0, r3
 800596c:	f008 f8f2 	bl	800db54 <USB_ReadInterrupts>
 8005970:	4603      	mov	r3, r0
 8005972:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005976:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800597a:	d10f      	bne.n	800599c <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800597c:	2300      	movs	r3, #0
 800597e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005982:	b2db      	uxtb	r3, r3
 8005984:	4619      	mov	r1, r3
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f00a f892 	bl	800fab0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	695a      	ldr	r2, [r3, #20]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800599a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4618      	mov	r0, r3
 80059a2:	f008 f8d7 	bl	800db54 <USB_ReadInterrupts>
 80059a6:	4603      	mov	r3, r0
 80059a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80059ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059b0:	d10a      	bne.n	80059c8 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f00a f8a0 	bl	800faf8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	695a      	ldr	r2, [r3, #20]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80059c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f008 f8c1 	bl	800db54 <USB_ReadInterrupts>
 80059d2:	4603      	mov	r3, r0
 80059d4:	f003 0304 	and.w	r3, r3, #4
 80059d8:	2b04      	cmp	r3, #4
 80059da:	d115      	bne.n	8005a08 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	f003 0304 	and.w	r3, r3, #4
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d002      	beq.n	80059f4 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f00a f890 	bl	800fb14 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6859      	ldr	r1, [r3, #4]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	69ba      	ldr	r2, [r7, #24]
 8005a00:	430a      	orrs	r2, r1
 8005a02:	605a      	str	r2, [r3, #4]
 8005a04:	e000      	b.n	8005a08 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8005a06:	bf00      	nop
    }
  }
}
 8005a08:	3734      	adds	r7, #52	; 0x34
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd90      	pop	{r4, r7, pc}

08005a0e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b082      	sub	sp, #8
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
 8005a16:	460b      	mov	r3, r1
 8005a18:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d101      	bne.n	8005a28 <HAL_PCD_SetAddress+0x1a>
 8005a24:	2302      	movs	r3, #2
 8005a26:	e013      	b.n	8005a50 <HAL_PCD_SetAddress+0x42>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	78fa      	ldrb	r2, [r7, #3]
 8005a34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	78fa      	ldrb	r2, [r7, #3]
 8005a3e:	4611      	mov	r1, r2
 8005a40:	4618      	mov	r0, r3
 8005a42:	f008 f831 	bl	800daa8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	4608      	mov	r0, r1
 8005a62:	4611      	mov	r1, r2
 8005a64:	461a      	mov	r2, r3
 8005a66:	4603      	mov	r3, r0
 8005a68:	70fb      	strb	r3, [r7, #3]
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	803b      	strh	r3, [r7, #0]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005a72:	2300      	movs	r3, #0
 8005a74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005a76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	da0f      	bge.n	8005a9e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a7e:	78fb      	ldrb	r3, [r7, #3]
 8005a80:	f003 020f 	and.w	r2, r3, #15
 8005a84:	4613      	mov	r3, r2
 8005a86:	00db      	lsls	r3, r3, #3
 8005a88:	1a9b      	subs	r3, r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	3338      	adds	r3, #56	; 0x38
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	4413      	add	r3, r2
 8005a92:	3304      	adds	r3, #4
 8005a94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	705a      	strb	r2, [r3, #1]
 8005a9c:	e00f      	b.n	8005abe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a9e:	78fb      	ldrb	r3, [r7, #3]
 8005aa0:	f003 020f 	and.w	r2, r3, #15
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	1a9b      	subs	r3, r3, r2
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	3304      	adds	r3, #4
 8005ab6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005abe:	78fb      	ldrb	r3, [r7, #3]
 8005ac0:	f003 030f 	and.w	r3, r3, #15
 8005ac4:	b2da      	uxtb	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005aca:	883a      	ldrh	r2, [r7, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	78ba      	ldrb	r2, [r7, #2]
 8005ad4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	785b      	ldrb	r3, [r3, #1]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d004      	beq.n	8005ae8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005ae8:	78bb      	ldrb	r3, [r7, #2]
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d102      	bne.n	8005af4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d101      	bne.n	8005b02 <HAL_PCD_EP_Open+0xaa>
 8005afe:	2302      	movs	r3, #2
 8005b00:	e00e      	b.n	8005b20 <HAL_PCD_EP_Open+0xc8>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2201      	movs	r2, #1
 8005b06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68f9      	ldr	r1, [r7, #12]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f007 f9e7 	bl	800cee4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005b1e:	7afb      	ldrb	r3, [r7, #11]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3710      	adds	r7, #16
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	460b      	mov	r3, r1
 8005b32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005b34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	da0f      	bge.n	8005b5c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b3c:	78fb      	ldrb	r3, [r7, #3]
 8005b3e:	f003 020f 	and.w	r2, r3, #15
 8005b42:	4613      	mov	r3, r2
 8005b44:	00db      	lsls	r3, r3, #3
 8005b46:	1a9b      	subs	r3, r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	3338      	adds	r3, #56	; 0x38
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	4413      	add	r3, r2
 8005b50:	3304      	adds	r3, #4
 8005b52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2201      	movs	r2, #1
 8005b58:	705a      	strb	r2, [r3, #1]
 8005b5a:	e00f      	b.n	8005b7c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b5c:	78fb      	ldrb	r3, [r7, #3]
 8005b5e:	f003 020f 	and.w	r2, r3, #15
 8005b62:	4613      	mov	r3, r2
 8005b64:	00db      	lsls	r3, r3, #3
 8005b66:	1a9b      	subs	r3, r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	4413      	add	r3, r2
 8005b72:	3304      	adds	r3, #4
 8005b74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005b7c:	78fb      	ldrb	r3, [r7, #3]
 8005b7e:	f003 030f 	and.w	r3, r3, #15
 8005b82:	b2da      	uxtb	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d101      	bne.n	8005b96 <HAL_PCD_EP_Close+0x6e>
 8005b92:	2302      	movs	r3, #2
 8005b94:	e00e      	b.n	8005bb4 <HAL_PCD_EP_Close+0x8c>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68f9      	ldr	r1, [r7, #12]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f007 fa25 	bl	800cff4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	607a      	str	r2, [r7, #4]
 8005bc6:	603b      	str	r3, [r7, #0]
 8005bc8:	460b      	mov	r3, r1
 8005bca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005bcc:	7afb      	ldrb	r3, [r7, #11]
 8005bce:	f003 020f 	and.w	r2, r3, #15
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	00db      	lsls	r3, r3, #3
 8005bd6:	1a9b      	subs	r3, r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	4413      	add	r3, r2
 8005be2:	3304      	adds	r3, #4
 8005be4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	683a      	ldr	r2, [r7, #0]
 8005bf0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005bfe:	7afb      	ldrb	r3, [r7, #11]
 8005c00:	f003 030f 	and.w	r3, r3, #15
 8005c04:	b2da      	uxtb	r2, r3
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d102      	bne.n	8005c18 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c18:	7afb      	ldrb	r3, [r7, #11]
 8005c1a:	f003 030f 	and.w	r3, r3, #15
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d109      	bne.n	8005c36 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6818      	ldr	r0, [r3, #0]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	6979      	ldr	r1, [r7, #20]
 8005c30:	f007 fcb0 	bl	800d594 <USB_EP0StartXfer>
 8005c34:	e008      	b.n	8005c48 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6818      	ldr	r0, [r3, #0]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	461a      	mov	r2, r3
 8005c42:	6979      	ldr	r1, [r7, #20]
 8005c44:	f007 fa5a 	bl	800d0fc <USB_EPStartXfer>
  }

  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3718      	adds	r7, #24
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}

08005c52 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c52:	b480      	push	{r7}
 8005c54:	b083      	sub	sp, #12
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005c5e:	78fb      	ldrb	r3, [r7, #3]
 8005c60:	f003 020f 	and.w	r2, r3, #15
 8005c64:	6879      	ldr	r1, [r7, #4]
 8005c66:	4613      	mov	r3, r2
 8005c68:	00db      	lsls	r3, r3, #3
 8005c6a:	1a9b      	subs	r3, r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	440b      	add	r3, r1
 8005c70:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005c74:	681b      	ldr	r3, [r3, #0]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	370c      	adds	r7, #12
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr

08005c82 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b086      	sub	sp, #24
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	60f8      	str	r0, [r7, #12]
 8005c8a:	607a      	str	r2, [r7, #4]
 8005c8c:	603b      	str	r3, [r7, #0]
 8005c8e:	460b      	mov	r3, r1
 8005c90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c92:	7afb      	ldrb	r3, [r7, #11]
 8005c94:	f003 020f 	and.w	r2, r3, #15
 8005c98:	4613      	mov	r3, r2
 8005c9a:	00db      	lsls	r3, r3, #3
 8005c9c:	1a9b      	subs	r3, r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	3338      	adds	r3, #56	; 0x38
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	3304      	adds	r3, #4
 8005ca8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	683a      	ldr	r2, [r7, #0]
 8005cb4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005cc2:	7afb      	ldrb	r3, [r7, #11]
 8005cc4:	f003 030f 	and.w	r3, r3, #15
 8005cc8:	b2da      	uxtb	r2, r3
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d102      	bne.n	8005cdc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005cdc:	7afb      	ldrb	r3, [r7, #11]
 8005cde:	f003 030f 	and.w	r3, r3, #15
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d109      	bne.n	8005cfa <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6818      	ldr	r0, [r3, #0]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	6979      	ldr	r1, [r7, #20]
 8005cf4:	f007 fc4e 	bl	800d594 <USB_EP0StartXfer>
 8005cf8:	e008      	b.n	8005d0c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6818      	ldr	r0, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	461a      	mov	r2, r3
 8005d06:	6979      	ldr	r1, [r7, #20]
 8005d08:	f007 f9f8 	bl	800d0fc <USB_EPStartXfer>
  }

  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3718      	adds	r7, #24
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b084      	sub	sp, #16
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
 8005d1e:	460b      	mov	r3, r1
 8005d20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005d22:	78fb      	ldrb	r3, [r7, #3]
 8005d24:	f003 020f 	and.w	r2, r3, #15
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d901      	bls.n	8005d34 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e050      	b.n	8005dd6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005d34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	da0f      	bge.n	8005d5c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d3c:	78fb      	ldrb	r3, [r7, #3]
 8005d3e:	f003 020f 	and.w	r2, r3, #15
 8005d42:	4613      	mov	r3, r2
 8005d44:	00db      	lsls	r3, r3, #3
 8005d46:	1a9b      	subs	r3, r3, r2
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	3338      	adds	r3, #56	; 0x38
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	4413      	add	r3, r2
 8005d50:	3304      	adds	r3, #4
 8005d52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2201      	movs	r2, #1
 8005d58:	705a      	strb	r2, [r3, #1]
 8005d5a:	e00d      	b.n	8005d78 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005d5c:	78fa      	ldrb	r2, [r7, #3]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	00db      	lsls	r3, r3, #3
 8005d62:	1a9b      	subs	r3, r3, r2
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	3304      	adds	r3, #4
 8005d70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d7e:	78fb      	ldrb	r3, [r7, #3]
 8005d80:	f003 030f 	and.w	r3, r3, #15
 8005d84:	b2da      	uxtb	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d101      	bne.n	8005d98 <HAL_PCD_EP_SetStall+0x82>
 8005d94:	2302      	movs	r3, #2
 8005d96:	e01e      	b.n	8005dd6 <HAL_PCD_EP_SetStall+0xc0>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68f9      	ldr	r1, [r7, #12]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f007 fdaa 	bl	800d900 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005dac:	78fb      	ldrb	r3, [r7, #3]
 8005dae:	f003 030f 	and.w	r3, r3, #15
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d10a      	bne.n	8005dcc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6818      	ldr	r0, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	b2d9      	uxtb	r1, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	f007 ff8a 	bl	800dce0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b084      	sub	sp, #16
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
 8005de6:	460b      	mov	r3, r1
 8005de8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005dea:	78fb      	ldrb	r3, [r7, #3]
 8005dec:	f003 020f 	and.w	r2, r3, #15
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d901      	bls.n	8005dfc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e042      	b.n	8005e82 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005dfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	da0f      	bge.n	8005e24 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e04:	78fb      	ldrb	r3, [r7, #3]
 8005e06:	f003 020f 	and.w	r2, r3, #15
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	00db      	lsls	r3, r3, #3
 8005e0e:	1a9b      	subs	r3, r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	3338      	adds	r3, #56	; 0x38
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	4413      	add	r3, r2
 8005e18:	3304      	adds	r3, #4
 8005e1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	705a      	strb	r2, [r3, #1]
 8005e22:	e00f      	b.n	8005e44 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e24:	78fb      	ldrb	r3, [r7, #3]
 8005e26:	f003 020f 	and.w	r2, r3, #15
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	00db      	lsls	r3, r3, #3
 8005e2e:	1a9b      	subs	r3, r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	4413      	add	r3, r2
 8005e3a:	3304      	adds	r3, #4
 8005e3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e4a:	78fb      	ldrb	r3, [r7, #3]
 8005e4c:	f003 030f 	and.w	r3, r3, #15
 8005e50:	b2da      	uxtb	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d101      	bne.n	8005e64 <HAL_PCD_EP_ClrStall+0x86>
 8005e60:	2302      	movs	r3, #2
 8005e62:	e00e      	b.n	8005e82 <HAL_PCD_EP_ClrStall+0xa4>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68f9      	ldr	r1, [r7, #12]
 8005e72:	4618      	mov	r0, r3
 8005e74:	f007 fdb2 	bl	800d9dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b08a      	sub	sp, #40	; 0x28
 8005e8e:	af02      	add	r7, sp, #8
 8005e90:	6078      	str	r0, [r7, #4]
 8005e92:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005e9e:	683a      	ldr	r2, [r7, #0]
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	00db      	lsls	r3, r3, #3
 8005ea4:	1a9b      	subs	r3, r3, r2
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	3338      	adds	r3, #56	; 0x38
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	4413      	add	r3, r2
 8005eae:	3304      	adds	r3, #4
 8005eb0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	699a      	ldr	r2, [r3, #24]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d901      	bls.n	8005ec2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e06c      	b.n	8005f9c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	695a      	ldr	r2, [r3, #20]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	69fa      	ldr	r2, [r7, #28]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d902      	bls.n	8005ede <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	3303      	adds	r3, #3
 8005ee2:	089b      	lsrs	r3, r3, #2
 8005ee4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005ee6:	e02b      	b.n	8005f40 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	695a      	ldr	r2, [r3, #20]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	69fa      	ldr	r2, [r7, #28]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d902      	bls.n	8005f04 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	3303      	adds	r3, #3
 8005f08:	089b      	lsrs	r3, r3, #2
 8005f0a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	68d9      	ldr	r1, [r3, #12]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	b2da      	uxtb	r2, r3
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	9300      	str	r3, [sp, #0]
 8005f20:	4603      	mov	r3, r0
 8005f22:	6978      	ldr	r0, [r7, #20]
 8005f24:	f007 fc8e 	bl	800d844 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	68da      	ldr	r2, [r3, #12]
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	441a      	add	r2, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	699a      	ldr	r2, [r3, #24]
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	441a      	add	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	015a      	lsls	r2, r3, #5
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	4413      	add	r3, r2
 8005f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	69ba      	ldr	r2, [r7, #24]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d809      	bhi.n	8005f6a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	699a      	ldr	r2, [r3, #24]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d203      	bcs.n	8005f6a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1be      	bne.n	8005ee8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	695a      	ldr	r2, [r3, #20]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d811      	bhi.n	8005f9a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	f003 030f 	and.w	r3, r3, #15
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f82:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	43db      	mvns	r3, r3
 8005f90:	6939      	ldr	r1, [r7, #16]
 8005f92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f96:	4013      	ands	r3, r2
 8005f98:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3720      	adds	r7, #32
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	333c      	adds	r3, #60	; 0x3c
 8005fbc:	3304      	adds	r3, #4
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	f040 80a0 	bne.w	800611c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	f003 0308 	and.w	r3, r3, #8
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d015      	beq.n	8006012 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	4a72      	ldr	r2, [pc, #456]	; (80061b4 <PCD_EP_OutXfrComplete_int+0x210>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	f240 80dd 	bls.w	80061aa <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	f000 80d7 	beq.w	80061aa <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	015a      	lsls	r2, r3, #5
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	4413      	add	r3, r2
 8006004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006008:	461a      	mov	r2, r3
 800600a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800600e:	6093      	str	r3, [r2, #8]
 8006010:	e0cb      	b.n	80061aa <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	f003 0320 	and.w	r3, r3, #32
 8006018:	2b00      	cmp	r3, #0
 800601a:	d009      	beq.n	8006030 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	4413      	add	r3, r2
 8006024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006028:	461a      	mov	r2, r3
 800602a:	2320      	movs	r3, #32
 800602c:	6093      	str	r3, [r2, #8]
 800602e:	e0bc      	b.n	80061aa <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006036:	2b00      	cmp	r3, #0
 8006038:	f040 80b7 	bne.w	80061aa <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	4a5d      	ldr	r2, [pc, #372]	; (80061b4 <PCD_EP_OutXfrComplete_int+0x210>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d90f      	bls.n	8006064 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00a      	beq.n	8006064 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	015a      	lsls	r2, r3, #5
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	4413      	add	r3, r2
 8006056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800605a:	461a      	mov	r2, r3
 800605c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006060:	6093      	str	r3, [r2, #8]
 8006062:	e0a2      	b.n	80061aa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006064:	6879      	ldr	r1, [r7, #4]
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	4613      	mov	r3, r2
 800606a:	00db      	lsls	r3, r3, #3
 800606c:	1a9b      	subs	r3, r3, r2
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	440b      	add	r3, r1
 8006072:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006076:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	0159      	lsls	r1, r3, #5
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	440b      	add	r3, r1
 8006080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800608a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	683a      	ldr	r2, [r7, #0]
 8006090:	4613      	mov	r3, r2
 8006092:	00db      	lsls	r3, r3, #3
 8006094:	1a9b      	subs	r3, r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	4403      	add	r3, r0
 800609a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800609e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80060a0:	6879      	ldr	r1, [r7, #4]
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	4613      	mov	r3, r2
 80060a6:	00db      	lsls	r3, r3, #3
 80060a8:	1a9b      	subs	r3, r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	440b      	add	r3, r1
 80060ae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80060b2:	6819      	ldr	r1, [r3, #0]
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	683a      	ldr	r2, [r7, #0]
 80060b8:	4613      	mov	r3, r2
 80060ba:	00db      	lsls	r3, r3, #3
 80060bc:	1a9b      	subs	r3, r3, r2
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	4403      	add	r3, r0
 80060c2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4419      	add	r1, r3
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	683a      	ldr	r2, [r7, #0]
 80060ce:	4613      	mov	r3, r2
 80060d0:	00db      	lsls	r3, r3, #3
 80060d2:	1a9b      	subs	r3, r3, r2
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	4403      	add	r3, r0
 80060d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80060dc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d114      	bne.n	800610e <PCD_EP_OutXfrComplete_int+0x16a>
 80060e4:	6879      	ldr	r1, [r7, #4]
 80060e6:	683a      	ldr	r2, [r7, #0]
 80060e8:	4613      	mov	r3, r2
 80060ea:	00db      	lsls	r3, r3, #3
 80060ec:	1a9b      	subs	r3, r3, r2
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	440b      	add	r3, r1
 80060f2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d108      	bne.n	800610e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6818      	ldr	r0, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006106:	461a      	mov	r2, r3
 8006108:	2101      	movs	r1, #1
 800610a:	f007 fde9 	bl	800dce0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	b2db      	uxtb	r3, r3
 8006112:	4619      	mov	r1, r3
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f009 fc2b 	bl	800f970 <HAL_PCD_DataOutStageCallback>
 800611a:	e046      	b.n	80061aa <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	4a26      	ldr	r2, [pc, #152]	; (80061b8 <PCD_EP_OutXfrComplete_int+0x214>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d124      	bne.n	800616e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00a      	beq.n	8006144 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	015a      	lsls	r2, r3, #5
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	4413      	add	r3, r2
 8006136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613a:	461a      	mov	r2, r3
 800613c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006140:	6093      	str	r3, [r2, #8]
 8006142:	e032      	b.n	80061aa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	f003 0320 	and.w	r3, r3, #32
 800614a:	2b00      	cmp	r3, #0
 800614c:	d008      	beq.n	8006160 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	015a      	lsls	r2, r3, #5
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	4413      	add	r3, r2
 8006156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800615a:	461a      	mov	r2, r3
 800615c:	2320      	movs	r3, #32
 800615e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	b2db      	uxtb	r3, r3
 8006164:	4619      	mov	r1, r3
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f009 fc02 	bl	800f970 <HAL_PCD_DataOutStageCallback>
 800616c:	e01d      	b.n	80061aa <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d114      	bne.n	800619e <PCD_EP_OutXfrComplete_int+0x1fa>
 8006174:	6879      	ldr	r1, [r7, #4]
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	4613      	mov	r3, r2
 800617a:	00db      	lsls	r3, r3, #3
 800617c:	1a9b      	subs	r3, r3, r2
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	440b      	add	r3, r1
 8006182:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d108      	bne.n	800619e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6818      	ldr	r0, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006196:	461a      	mov	r2, r3
 8006198:	2100      	movs	r1, #0
 800619a:	f007 fda1 	bl	800dce0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	4619      	mov	r1, r3
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f009 fbe3 	bl	800f970 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3718      	adds	r7, #24
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	4f54300a 	.word	0x4f54300a
 80061b8:	4f54310a 	.word	0x4f54310a

080061bc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	333c      	adds	r3, #60	; 0x3c
 80061d4:	3304      	adds	r3, #4
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	4a15      	ldr	r2, [pc, #84]	; (8006244 <PCD_EP_OutSetupPacket_int+0x88>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d90e      	bls.n	8006210 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d009      	beq.n	8006210 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006208:	461a      	mov	r2, r3
 800620a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800620e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f009 fb9b 	bl	800f94c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	4a0a      	ldr	r2, [pc, #40]	; (8006244 <PCD_EP_OutSetupPacket_int+0x88>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d90c      	bls.n	8006238 <PCD_EP_OutSetupPacket_int+0x7c>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d108      	bne.n	8006238 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6818      	ldr	r0, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006230:	461a      	mov	r2, r3
 8006232:	2101      	movs	r1, #1
 8006234:	f007 fd54 	bl	800dce0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3718      	adds	r7, #24
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	4f54300a 	.word	0x4f54300a

08006248 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	460b      	mov	r3, r1
 8006252:	70fb      	strb	r3, [r7, #3]
 8006254:	4613      	mov	r3, r2
 8006256:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006260:	78fb      	ldrb	r3, [r7, #3]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d107      	bne.n	8006276 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006266:	883b      	ldrh	r3, [r7, #0]
 8006268:	0419      	lsls	r1, r3, #16
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68ba      	ldr	r2, [r7, #8]
 8006270:	430a      	orrs	r2, r1
 8006272:	629a      	str	r2, [r3, #40]	; 0x28
 8006274:	e028      	b.n	80062c8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800627c:	0c1b      	lsrs	r3, r3, #16
 800627e:	68ba      	ldr	r2, [r7, #8]
 8006280:	4413      	add	r3, r2
 8006282:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006284:	2300      	movs	r3, #0
 8006286:	73fb      	strb	r3, [r7, #15]
 8006288:	e00d      	b.n	80062a6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	7bfb      	ldrb	r3, [r7, #15]
 8006290:	3340      	adds	r3, #64	; 0x40
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4413      	add	r3, r2
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	0c1b      	lsrs	r3, r3, #16
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	4413      	add	r3, r2
 800629e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80062a0:	7bfb      	ldrb	r3, [r7, #15]
 80062a2:	3301      	adds	r3, #1
 80062a4:	73fb      	strb	r3, [r7, #15]
 80062a6:	7bfa      	ldrb	r2, [r7, #15]
 80062a8:	78fb      	ldrb	r3, [r7, #3]
 80062aa:	3b01      	subs	r3, #1
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d3ec      	bcc.n	800628a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80062b0:	883b      	ldrh	r3, [r7, #0]
 80062b2:	0418      	lsls	r0, r3, #16
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6819      	ldr	r1, [r3, #0]
 80062b8:	78fb      	ldrb	r3, [r7, #3]
 80062ba:	3b01      	subs	r3, #1
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	4302      	orrs	r2, r0
 80062c0:	3340      	adds	r3, #64	; 0x40
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	440b      	add	r3, r1
 80062c6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b083      	sub	sp, #12
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
 80062de:	460b      	mov	r3, r1
 80062e0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	887a      	ldrh	r2, [r7, #2]
 80062e8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2201      	movs	r2, #1
 800630a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006326:	4b05      	ldr	r3, [pc, #20]	; (800633c <HAL_PCDEx_ActivateLPM+0x44>)
 8006328:	4313      	orrs	r3, r2
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3714      	adds	r7, #20
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	10000003 	.word	0x10000003

08006340 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	460b      	mov	r3, r1
 800634a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8006358:	b480      	push	{r7}
 800635a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 800635c:	4b05      	ldr	r3, [pc, #20]	; (8006374 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a04      	ldr	r2, [pc, #16]	; (8006374 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006366:	6013      	str	r3, [r2, #0]
}
 8006368:	bf00      	nop
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	58024800 	.word	0x58024800

08006378 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006380:	4b19      	ldr	r3, [pc, #100]	; (80063e8 <HAL_PWREx_ConfigSupply+0x70>)
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	f003 0304 	and.w	r3, r3, #4
 8006388:	2b04      	cmp	r3, #4
 800638a:	d00a      	beq.n	80063a2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800638c:	4b16      	ldr	r3, [pc, #88]	; (80063e8 <HAL_PWREx_ConfigSupply+0x70>)
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	f003 0307 	and.w	r3, r3, #7
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	429a      	cmp	r2, r3
 8006398:	d001      	beq.n	800639e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e01f      	b.n	80063de <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800639e:	2300      	movs	r3, #0
 80063a0:	e01d      	b.n	80063de <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80063a2:	4b11      	ldr	r3, [pc, #68]	; (80063e8 <HAL_PWREx_ConfigSupply+0x70>)
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	f023 0207 	bic.w	r2, r3, #7
 80063aa:	490f      	ldr	r1, [pc, #60]	; (80063e8 <HAL_PWREx_ConfigSupply+0x70>)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80063b2:	f7fb fced 	bl	8001d90 <HAL_GetTick>
 80063b6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80063b8:	e009      	b.n	80063ce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80063ba:	f7fb fce9 	bl	8001d90 <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063c8:	d901      	bls.n	80063ce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e007      	b.n	80063de <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80063ce:	4b06      	ldr	r3, [pc, #24]	; (80063e8 <HAL_PWREx_ConfigSupply+0x70>)
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063da:	d1ee      	bne.n	80063ba <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	58024800 	.word	0x58024800

080063ec <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80063ec:	b480      	push	{r7}
 80063ee:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80063f0:	4b05      	ldr	r3, [pc, #20]	; (8006408 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	4a04      	ldr	r2, [pc, #16]	; (8006408 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80063f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063fa:	60d3      	str	r3, [r2, #12]
}
 80063fc:	bf00      	nop
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	58024800 	.word	0x58024800

0800640c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b08c      	sub	sp, #48	; 0x30
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d101      	bne.n	800641e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e3c4      	b.n	8006ba8 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	f000 8087 	beq.w	800653a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800642c:	4ba2      	ldr	r3, [pc, #648]	; (80066b8 <HAL_RCC_OscConfig+0x2ac>)
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006434:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006436:	4ba0      	ldr	r3, [pc, #640]	; (80066b8 <HAL_RCC_OscConfig+0x2ac>)
 8006438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800643c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643e:	2b10      	cmp	r3, #16
 8006440:	d007      	beq.n	8006452 <HAL_RCC_OscConfig+0x46>
 8006442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006444:	2b18      	cmp	r3, #24
 8006446:	d110      	bne.n	800646a <HAL_RCC_OscConfig+0x5e>
 8006448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644a:	f003 0303 	and.w	r3, r3, #3
 800644e:	2b02      	cmp	r3, #2
 8006450:	d10b      	bne.n	800646a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006452:	4b99      	ldr	r3, [pc, #612]	; (80066b8 <HAL_RCC_OscConfig+0x2ac>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d06c      	beq.n	8006538 <HAL_RCC_OscConfig+0x12c>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d168      	bne.n	8006538 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e39e      	b.n	8006ba8 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006472:	d106      	bne.n	8006482 <HAL_RCC_OscConfig+0x76>
 8006474:	4b90      	ldr	r3, [pc, #576]	; (80066b8 <HAL_RCC_OscConfig+0x2ac>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a8f      	ldr	r2, [pc, #572]	; (80066b8 <HAL_RCC_OscConfig+0x2ac>)
 800647a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800647e:	6013      	str	r3, [r2, #0]
 8006480:	e02e      	b.n	80064e0 <HAL_RCC_OscConfig+0xd4>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10c      	bne.n	80064a4 <HAL_RCC_OscConfig+0x98>
 800648a:	4b8b      	ldr	r3, [pc, #556]	; (80066b8 <HAL_RCC_OscConfig+0x2ac>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a8a      	ldr	r2, [pc, #552]	; (80066b8 <HAL_RCC_OscConfig+0x2ac>)
 8006490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006494:	6013      	str	r3, [r2, #0]
 8006496:	4b88      	ldr	r3, [pc, #544]	; (80066b8 <HAL_RCC_OscConfig+0x2ac>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a87      	ldr	r2, [pc, #540]	; (80066b8 <HAL_RCC_OscConfig+0x2ac>)
 800649c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064a0:	6013      	str	r3, [r2, #0]
 80064a2:	e01d      	b.n	80064e0 <HAL_RCC_OscConfig+0xd4>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064ac:	d10c      	bne.n	80064c8 <HAL_RCC_OscConfig+0xbc>
 80064ae:	4b82      	ldr	r3, [pc, #520]	; (80066b8 <HAL_RCC_OscConfig+0x2ac>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a81      	ldr	r2, [pc, #516]	; (80066b8 <HAL_RCC_OscConfig+0x2ac>)
 80064b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064b8:	6013      	str	r3, [r2, #0]
 80064ba:	4b7f      	ldr	r3, [pc, #508]	; (80066b8 <HAL_RCC_OscConfig+0x2ac>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a7e      	ldr	r2, [pc, #504]	; (80066b8 <HAL_RCC_OscConfig+0x2ac>)
 80064c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064c4:	6013      	str	r3, [r2, #0]
 80064c6:	e00b      	b.n	80064e0 <HAL_RCC_OscConfig+0xd4>
 80064c8:	4b7b      	ldr	r3, [pc, #492]	; (80066b8 <HAL_RCC_OscConfig+0x2ac>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a7a      	ldr	r2, [pc, #488]	; (80066b8 <HAL_RCC_OscConfig+0x2ac>)
 80064ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064d2:	6013      	str	r3, [r2, #0]
 80064d4:	4b78      	ldr	r3, [pc, #480]	; (80066b8 <HAL_RCC_OscConfig+0x2ac>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a77      	ldr	r2, [pc, #476]	; (80066b8 <HAL_RCC_OscConfig+0x2ac>)
 80064da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d013      	beq.n	8006510 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e8:	f7fb fc52 	bl	8001d90 <HAL_GetTick>
 80064ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064ee:	e008      	b.n	8006502 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064f0:	f7fb fc4e 	bl	8001d90 <HAL_GetTick>
 80064f4:	4602      	mov	r2, r0
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	2b64      	cmp	r3, #100	; 0x64
 80064fc:	d901      	bls.n	8006502 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e352      	b.n	8006ba8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006502:	4b6d      	ldr	r3, [pc, #436]	; (80066b8 <HAL_RCC_OscConfig+0x2ac>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d0f0      	beq.n	80064f0 <HAL_RCC_OscConfig+0xe4>
 800650e:	e014      	b.n	800653a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006510:	f7fb fc3e 	bl	8001d90 <HAL_GetTick>
 8006514:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006516:	e008      	b.n	800652a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006518:	f7fb fc3a 	bl	8001d90 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	2b64      	cmp	r3, #100	; 0x64
 8006524:	d901      	bls.n	800652a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e33e      	b.n	8006ba8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800652a:	4b63      	ldr	r3, [pc, #396]	; (80066b8 <HAL_RCC_OscConfig+0x2ac>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1f0      	bne.n	8006518 <HAL_RCC_OscConfig+0x10c>
 8006536:	e000      	b.n	800653a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0302 	and.w	r3, r3, #2
 8006542:	2b00      	cmp	r3, #0
 8006544:	f000 8092 	beq.w	800666c <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006548:	4b5b      	ldr	r3, [pc, #364]	; (80066b8 <HAL_RCC_OscConfig+0x2ac>)
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006550:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006552:	4b59      	ldr	r3, [pc, #356]	; (80066b8 <HAL_RCC_OscConfig+0x2ac>)
 8006554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006556:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006558:	6a3b      	ldr	r3, [r7, #32]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d007      	beq.n	800656e <HAL_RCC_OscConfig+0x162>
 800655e:	6a3b      	ldr	r3, [r7, #32]
 8006560:	2b18      	cmp	r3, #24
 8006562:	d12d      	bne.n	80065c0 <HAL_RCC_OscConfig+0x1b4>
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	f003 0303 	and.w	r3, r3, #3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d128      	bne.n	80065c0 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800656e:	4b52      	ldr	r3, [pc, #328]	; (80066b8 <HAL_RCC_OscConfig+0x2ac>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0304 	and.w	r3, r3, #4
 8006576:	2b00      	cmp	r3, #0
 8006578:	d005      	beq.n	8006586 <HAL_RCC_OscConfig+0x17a>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d101      	bne.n	8006586 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e310      	b.n	8006ba8 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006586:	f7fb fc31 	bl	8001dec <HAL_GetREVID>
 800658a:	4602      	mov	r2, r0
 800658c:	f241 0303 	movw	r3, #4099	; 0x1003
 8006590:	429a      	cmp	r2, r3
 8006592:	d80a      	bhi.n	80065aa <HAL_RCC_OscConfig+0x19e>
 8006594:	4b48      	ldr	r3, [pc, #288]	; (80066b8 <HAL_RCC_OscConfig+0x2ac>)
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	031b      	lsls	r3, r3, #12
 80065a2:	4945      	ldr	r1, [pc, #276]	; (80066b8 <HAL_RCC_OscConfig+0x2ac>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065a8:	e060      	b.n	800666c <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065aa:	4b43      	ldr	r3, [pc, #268]	; (80066b8 <HAL_RCC_OscConfig+0x2ac>)
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	061b      	lsls	r3, r3, #24
 80065b8:	493f      	ldr	r1, [pc, #252]	; (80066b8 <HAL_RCC_OscConfig+0x2ac>)
 80065ba:	4313      	orrs	r3, r2
 80065bc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065be:	e055      	b.n	800666c <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d038      	beq.n	800663a <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80065c8:	4b3b      	ldr	r3, [pc, #236]	; (80066b8 <HAL_RCC_OscConfig+0x2ac>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f023 0219 	bic.w	r2, r3, #25
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	4938      	ldr	r1, [pc, #224]	; (80066b8 <HAL_RCC_OscConfig+0x2ac>)
 80065d6:	4313      	orrs	r3, r2
 80065d8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065da:	f7fb fbd9 	bl	8001d90 <HAL_GetTick>
 80065de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065e0:	e008      	b.n	80065f4 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065e2:	f7fb fbd5 	bl	8001d90 <HAL_GetTick>
 80065e6:	4602      	mov	r2, r0
 80065e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ea:	1ad3      	subs	r3, r2, r3
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d901      	bls.n	80065f4 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 80065f0:	2303      	movs	r3, #3
 80065f2:	e2d9      	b.n	8006ba8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065f4:	4b30      	ldr	r3, [pc, #192]	; (80066b8 <HAL_RCC_OscConfig+0x2ac>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0304 	and.w	r3, r3, #4
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d0f0      	beq.n	80065e2 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006600:	f7fb fbf4 	bl	8001dec <HAL_GetREVID>
 8006604:	4602      	mov	r2, r0
 8006606:	f241 0303 	movw	r3, #4099	; 0x1003
 800660a:	429a      	cmp	r2, r3
 800660c:	d80a      	bhi.n	8006624 <HAL_RCC_OscConfig+0x218>
 800660e:	4b2a      	ldr	r3, [pc, #168]	; (80066b8 <HAL_RCC_OscConfig+0x2ac>)
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	031b      	lsls	r3, r3, #12
 800661c:	4926      	ldr	r1, [pc, #152]	; (80066b8 <HAL_RCC_OscConfig+0x2ac>)
 800661e:	4313      	orrs	r3, r2
 8006620:	604b      	str	r3, [r1, #4]
 8006622:	e023      	b.n	800666c <HAL_RCC_OscConfig+0x260>
 8006624:	4b24      	ldr	r3, [pc, #144]	; (80066b8 <HAL_RCC_OscConfig+0x2ac>)
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	061b      	lsls	r3, r3, #24
 8006632:	4921      	ldr	r1, [pc, #132]	; (80066b8 <HAL_RCC_OscConfig+0x2ac>)
 8006634:	4313      	orrs	r3, r2
 8006636:	604b      	str	r3, [r1, #4]
 8006638:	e018      	b.n	800666c <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800663a:	4b1f      	ldr	r3, [pc, #124]	; (80066b8 <HAL_RCC_OscConfig+0x2ac>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a1e      	ldr	r2, [pc, #120]	; (80066b8 <HAL_RCC_OscConfig+0x2ac>)
 8006640:	f023 0301 	bic.w	r3, r3, #1
 8006644:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006646:	f7fb fba3 	bl	8001d90 <HAL_GetTick>
 800664a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800664c:	e008      	b.n	8006660 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800664e:	f7fb fb9f 	bl	8001d90 <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	2b02      	cmp	r3, #2
 800665a:	d901      	bls.n	8006660 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e2a3      	b.n	8006ba8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006660:	4b15      	ldr	r3, [pc, #84]	; (80066b8 <HAL_RCC_OscConfig+0x2ac>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0304 	and.w	r3, r3, #4
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1f0      	bne.n	800664e <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0310 	and.w	r3, r3, #16
 8006674:	2b00      	cmp	r3, #0
 8006676:	f000 8091 	beq.w	800679c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800667a:	4b0f      	ldr	r3, [pc, #60]	; (80066b8 <HAL_RCC_OscConfig+0x2ac>)
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006682:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006684:	4b0c      	ldr	r3, [pc, #48]	; (80066b8 <HAL_RCC_OscConfig+0x2ac>)
 8006686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006688:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	2b08      	cmp	r3, #8
 800668e:	d007      	beq.n	80066a0 <HAL_RCC_OscConfig+0x294>
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	2b18      	cmp	r3, #24
 8006694:	d12f      	bne.n	80066f6 <HAL_RCC_OscConfig+0x2ea>
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	f003 0303 	and.w	r3, r3, #3
 800669c:	2b01      	cmp	r3, #1
 800669e:	d12a      	bne.n	80066f6 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066a0:	4b05      	ldr	r3, [pc, #20]	; (80066b8 <HAL_RCC_OscConfig+0x2ac>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d007      	beq.n	80066bc <HAL_RCC_OscConfig+0x2b0>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	69db      	ldr	r3, [r3, #28]
 80066b0:	2b80      	cmp	r3, #128	; 0x80
 80066b2:	d003      	beq.n	80066bc <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e277      	b.n	8006ba8 <HAL_RCC_OscConfig+0x79c>
 80066b8:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066bc:	f7fb fb96 	bl	8001dec <HAL_GetREVID>
 80066c0:	4602      	mov	r2, r0
 80066c2:	f241 0303 	movw	r3, #4099	; 0x1003
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d80a      	bhi.n	80066e0 <HAL_RCC_OscConfig+0x2d4>
 80066ca:	4ba2      	ldr	r3, [pc, #648]	; (8006954 <HAL_RCC_OscConfig+0x548>)
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	069b      	lsls	r3, r3, #26
 80066d8:	499e      	ldr	r1, [pc, #632]	; (8006954 <HAL_RCC_OscConfig+0x548>)
 80066da:	4313      	orrs	r3, r2
 80066dc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066de:	e05d      	b.n	800679c <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066e0:	4b9c      	ldr	r3, [pc, #624]	; (8006954 <HAL_RCC_OscConfig+0x548>)
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a1b      	ldr	r3, [r3, #32]
 80066ec:	061b      	lsls	r3, r3, #24
 80066ee:	4999      	ldr	r1, [pc, #612]	; (8006954 <HAL_RCC_OscConfig+0x548>)
 80066f0:	4313      	orrs	r3, r2
 80066f2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066f4:	e052      	b.n	800679c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	69db      	ldr	r3, [r3, #28]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d035      	beq.n	800676a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80066fe:	4b95      	ldr	r3, [pc, #596]	; (8006954 <HAL_RCC_OscConfig+0x548>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a94      	ldr	r2, [pc, #592]	; (8006954 <HAL_RCC_OscConfig+0x548>)
 8006704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006708:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800670a:	f7fb fb41 	bl	8001d90 <HAL_GetTick>
 800670e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006710:	e008      	b.n	8006724 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006712:	f7fb fb3d 	bl	8001d90 <HAL_GetTick>
 8006716:	4602      	mov	r2, r0
 8006718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	2b02      	cmp	r3, #2
 800671e:	d901      	bls.n	8006724 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8006720:	2303      	movs	r3, #3
 8006722:	e241      	b.n	8006ba8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006724:	4b8b      	ldr	r3, [pc, #556]	; (8006954 <HAL_RCC_OscConfig+0x548>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800672c:	2b00      	cmp	r3, #0
 800672e:	d0f0      	beq.n	8006712 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006730:	f7fb fb5c 	bl	8001dec <HAL_GetREVID>
 8006734:	4602      	mov	r2, r0
 8006736:	f241 0303 	movw	r3, #4099	; 0x1003
 800673a:	429a      	cmp	r2, r3
 800673c:	d80a      	bhi.n	8006754 <HAL_RCC_OscConfig+0x348>
 800673e:	4b85      	ldr	r3, [pc, #532]	; (8006954 <HAL_RCC_OscConfig+0x548>)
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	069b      	lsls	r3, r3, #26
 800674c:	4981      	ldr	r1, [pc, #516]	; (8006954 <HAL_RCC_OscConfig+0x548>)
 800674e:	4313      	orrs	r3, r2
 8006750:	604b      	str	r3, [r1, #4]
 8006752:	e023      	b.n	800679c <HAL_RCC_OscConfig+0x390>
 8006754:	4b7f      	ldr	r3, [pc, #508]	; (8006954 <HAL_RCC_OscConfig+0x548>)
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a1b      	ldr	r3, [r3, #32]
 8006760:	061b      	lsls	r3, r3, #24
 8006762:	497c      	ldr	r1, [pc, #496]	; (8006954 <HAL_RCC_OscConfig+0x548>)
 8006764:	4313      	orrs	r3, r2
 8006766:	60cb      	str	r3, [r1, #12]
 8006768:	e018      	b.n	800679c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800676a:	4b7a      	ldr	r3, [pc, #488]	; (8006954 <HAL_RCC_OscConfig+0x548>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a79      	ldr	r2, [pc, #484]	; (8006954 <HAL_RCC_OscConfig+0x548>)
 8006770:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006774:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006776:	f7fb fb0b 	bl	8001d90 <HAL_GetTick>
 800677a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800677c:	e008      	b.n	8006790 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800677e:	f7fb fb07 	bl	8001d90 <HAL_GetTick>
 8006782:	4602      	mov	r2, r0
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	2b02      	cmp	r3, #2
 800678a:	d901      	bls.n	8006790 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e20b      	b.n	8006ba8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006790:	4b70      	ldr	r3, [pc, #448]	; (8006954 <HAL_RCC_OscConfig+0x548>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1f0      	bne.n	800677e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 0308 	and.w	r3, r3, #8
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d036      	beq.n	8006816 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d019      	beq.n	80067e4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067b0:	4b68      	ldr	r3, [pc, #416]	; (8006954 <HAL_RCC_OscConfig+0x548>)
 80067b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067b4:	4a67      	ldr	r2, [pc, #412]	; (8006954 <HAL_RCC_OscConfig+0x548>)
 80067b6:	f043 0301 	orr.w	r3, r3, #1
 80067ba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067bc:	f7fb fae8 	bl	8001d90 <HAL_GetTick>
 80067c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80067c2:	e008      	b.n	80067d6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067c4:	f7fb fae4 	bl	8001d90 <HAL_GetTick>
 80067c8:	4602      	mov	r2, r0
 80067ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d901      	bls.n	80067d6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e1e8      	b.n	8006ba8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80067d6:	4b5f      	ldr	r3, [pc, #380]	; (8006954 <HAL_RCC_OscConfig+0x548>)
 80067d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067da:	f003 0302 	and.w	r3, r3, #2
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d0f0      	beq.n	80067c4 <HAL_RCC_OscConfig+0x3b8>
 80067e2:	e018      	b.n	8006816 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067e4:	4b5b      	ldr	r3, [pc, #364]	; (8006954 <HAL_RCC_OscConfig+0x548>)
 80067e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067e8:	4a5a      	ldr	r2, [pc, #360]	; (8006954 <HAL_RCC_OscConfig+0x548>)
 80067ea:	f023 0301 	bic.w	r3, r3, #1
 80067ee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067f0:	f7fb face 	bl	8001d90 <HAL_GetTick>
 80067f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80067f6:	e008      	b.n	800680a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067f8:	f7fb faca 	bl	8001d90 <HAL_GetTick>
 80067fc:	4602      	mov	r2, r0
 80067fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	2b02      	cmp	r3, #2
 8006804:	d901      	bls.n	800680a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e1ce      	b.n	8006ba8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800680a:	4b52      	ldr	r3, [pc, #328]	; (8006954 <HAL_RCC_OscConfig+0x548>)
 800680c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800680e:	f003 0302 	and.w	r3, r3, #2
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1f0      	bne.n	80067f8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0320 	and.w	r3, r3, #32
 800681e:	2b00      	cmp	r3, #0
 8006820:	d036      	beq.n	8006890 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d019      	beq.n	800685e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800682a:	4b4a      	ldr	r3, [pc, #296]	; (8006954 <HAL_RCC_OscConfig+0x548>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a49      	ldr	r2, [pc, #292]	; (8006954 <HAL_RCC_OscConfig+0x548>)
 8006830:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006834:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006836:	f7fb faab 	bl	8001d90 <HAL_GetTick>
 800683a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800683c:	e008      	b.n	8006850 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800683e:	f7fb faa7 	bl	8001d90 <HAL_GetTick>
 8006842:	4602      	mov	r2, r0
 8006844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	2b02      	cmp	r3, #2
 800684a:	d901      	bls.n	8006850 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800684c:	2303      	movs	r3, #3
 800684e:	e1ab      	b.n	8006ba8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006850:	4b40      	ldr	r3, [pc, #256]	; (8006954 <HAL_RCC_OscConfig+0x548>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006858:	2b00      	cmp	r3, #0
 800685a:	d0f0      	beq.n	800683e <HAL_RCC_OscConfig+0x432>
 800685c:	e018      	b.n	8006890 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800685e:	4b3d      	ldr	r3, [pc, #244]	; (8006954 <HAL_RCC_OscConfig+0x548>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a3c      	ldr	r2, [pc, #240]	; (8006954 <HAL_RCC_OscConfig+0x548>)
 8006864:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006868:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800686a:	f7fb fa91 	bl	8001d90 <HAL_GetTick>
 800686e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006870:	e008      	b.n	8006884 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006872:	f7fb fa8d 	bl	8001d90 <HAL_GetTick>
 8006876:	4602      	mov	r2, r0
 8006878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	2b02      	cmp	r3, #2
 800687e:	d901      	bls.n	8006884 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	e191      	b.n	8006ba8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006884:	4b33      	ldr	r3, [pc, #204]	; (8006954 <HAL_RCC_OscConfig+0x548>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800688c:	2b00      	cmp	r3, #0
 800688e:	d1f0      	bne.n	8006872 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0304 	and.w	r3, r3, #4
 8006898:	2b00      	cmp	r3, #0
 800689a:	f000 8086 	beq.w	80069aa <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800689e:	4b2e      	ldr	r3, [pc, #184]	; (8006958 <HAL_RCC_OscConfig+0x54c>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a2d      	ldr	r2, [pc, #180]	; (8006958 <HAL_RCC_OscConfig+0x54c>)
 80068a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068aa:	f7fb fa71 	bl	8001d90 <HAL_GetTick>
 80068ae:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068b0:	e008      	b.n	80068c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80068b2:	f7fb fa6d 	bl	8001d90 <HAL_GetTick>
 80068b6:	4602      	mov	r2, r0
 80068b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	2b64      	cmp	r3, #100	; 0x64
 80068be:	d901      	bls.n	80068c4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e171      	b.n	8006ba8 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068c4:	4b24      	ldr	r3, [pc, #144]	; (8006958 <HAL_RCC_OscConfig+0x54c>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d0f0      	beq.n	80068b2 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d106      	bne.n	80068e6 <HAL_RCC_OscConfig+0x4da>
 80068d8:	4b1e      	ldr	r3, [pc, #120]	; (8006954 <HAL_RCC_OscConfig+0x548>)
 80068da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068dc:	4a1d      	ldr	r2, [pc, #116]	; (8006954 <HAL_RCC_OscConfig+0x548>)
 80068de:	f043 0301 	orr.w	r3, r3, #1
 80068e2:	6713      	str	r3, [r2, #112]	; 0x70
 80068e4:	e02d      	b.n	8006942 <HAL_RCC_OscConfig+0x536>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d10c      	bne.n	8006908 <HAL_RCC_OscConfig+0x4fc>
 80068ee:	4b19      	ldr	r3, [pc, #100]	; (8006954 <HAL_RCC_OscConfig+0x548>)
 80068f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f2:	4a18      	ldr	r2, [pc, #96]	; (8006954 <HAL_RCC_OscConfig+0x548>)
 80068f4:	f023 0301 	bic.w	r3, r3, #1
 80068f8:	6713      	str	r3, [r2, #112]	; 0x70
 80068fa:	4b16      	ldr	r3, [pc, #88]	; (8006954 <HAL_RCC_OscConfig+0x548>)
 80068fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068fe:	4a15      	ldr	r2, [pc, #84]	; (8006954 <HAL_RCC_OscConfig+0x548>)
 8006900:	f023 0304 	bic.w	r3, r3, #4
 8006904:	6713      	str	r3, [r2, #112]	; 0x70
 8006906:	e01c      	b.n	8006942 <HAL_RCC_OscConfig+0x536>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	2b05      	cmp	r3, #5
 800690e:	d10c      	bne.n	800692a <HAL_RCC_OscConfig+0x51e>
 8006910:	4b10      	ldr	r3, [pc, #64]	; (8006954 <HAL_RCC_OscConfig+0x548>)
 8006912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006914:	4a0f      	ldr	r2, [pc, #60]	; (8006954 <HAL_RCC_OscConfig+0x548>)
 8006916:	f043 0304 	orr.w	r3, r3, #4
 800691a:	6713      	str	r3, [r2, #112]	; 0x70
 800691c:	4b0d      	ldr	r3, [pc, #52]	; (8006954 <HAL_RCC_OscConfig+0x548>)
 800691e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006920:	4a0c      	ldr	r2, [pc, #48]	; (8006954 <HAL_RCC_OscConfig+0x548>)
 8006922:	f043 0301 	orr.w	r3, r3, #1
 8006926:	6713      	str	r3, [r2, #112]	; 0x70
 8006928:	e00b      	b.n	8006942 <HAL_RCC_OscConfig+0x536>
 800692a:	4b0a      	ldr	r3, [pc, #40]	; (8006954 <HAL_RCC_OscConfig+0x548>)
 800692c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800692e:	4a09      	ldr	r2, [pc, #36]	; (8006954 <HAL_RCC_OscConfig+0x548>)
 8006930:	f023 0301 	bic.w	r3, r3, #1
 8006934:	6713      	str	r3, [r2, #112]	; 0x70
 8006936:	4b07      	ldr	r3, [pc, #28]	; (8006954 <HAL_RCC_OscConfig+0x548>)
 8006938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800693a:	4a06      	ldr	r2, [pc, #24]	; (8006954 <HAL_RCC_OscConfig+0x548>)
 800693c:	f023 0304 	bic.w	r3, r3, #4
 8006940:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d01a      	beq.n	8006980 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800694a:	f7fb fa21 	bl	8001d90 <HAL_GetTick>
 800694e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006950:	e00f      	b.n	8006972 <HAL_RCC_OscConfig+0x566>
 8006952:	bf00      	nop
 8006954:	58024400 	.word	0x58024400
 8006958:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800695c:	f7fb fa18 	bl	8001d90 <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	f241 3288 	movw	r2, #5000	; 0x1388
 800696a:	4293      	cmp	r3, r2
 800696c:	d901      	bls.n	8006972 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e11a      	b.n	8006ba8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006972:	4b8f      	ldr	r3, [pc, #572]	; (8006bb0 <HAL_RCC_OscConfig+0x7a4>)
 8006974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006976:	f003 0302 	and.w	r3, r3, #2
 800697a:	2b00      	cmp	r3, #0
 800697c:	d0ee      	beq.n	800695c <HAL_RCC_OscConfig+0x550>
 800697e:	e014      	b.n	80069aa <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006980:	f7fb fa06 	bl	8001d90 <HAL_GetTick>
 8006984:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006986:	e00a      	b.n	800699e <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006988:	f7fb fa02 	bl	8001d90 <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	f241 3288 	movw	r2, #5000	; 0x1388
 8006996:	4293      	cmp	r3, r2
 8006998:	d901      	bls.n	800699e <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e104      	b.n	8006ba8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800699e:	4b84      	ldr	r3, [pc, #528]	; (8006bb0 <HAL_RCC_OscConfig+0x7a4>)
 80069a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a2:	f003 0302 	and.w	r3, r3, #2
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1ee      	bne.n	8006988 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f000 80f9 	beq.w	8006ba6 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80069b4:	4b7e      	ldr	r3, [pc, #504]	; (8006bb0 <HAL_RCC_OscConfig+0x7a4>)
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069bc:	2b18      	cmp	r3, #24
 80069be:	f000 80b4 	beq.w	8006b2a <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	f040 8095 	bne.w	8006af6 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069cc:	4b78      	ldr	r3, [pc, #480]	; (8006bb0 <HAL_RCC_OscConfig+0x7a4>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a77      	ldr	r2, [pc, #476]	; (8006bb0 <HAL_RCC_OscConfig+0x7a4>)
 80069d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069d8:	f7fb f9da 	bl	8001d90 <HAL_GetTick>
 80069dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069de:	e008      	b.n	80069f2 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069e0:	f7fb f9d6 	bl	8001d90 <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d901      	bls.n	80069f2 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e0da      	b.n	8006ba8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069f2:	4b6f      	ldr	r3, [pc, #444]	; (8006bb0 <HAL_RCC_OscConfig+0x7a4>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1f0      	bne.n	80069e0 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069fe:	4b6c      	ldr	r3, [pc, #432]	; (8006bb0 <HAL_RCC_OscConfig+0x7a4>)
 8006a00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a02:	4b6c      	ldr	r3, [pc, #432]	; (8006bb4 <HAL_RCC_OscConfig+0x7a8>)
 8006a04:	4013      	ands	r3, r2
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006a0e:	0112      	lsls	r2, r2, #4
 8006a10:	430a      	orrs	r2, r1
 8006a12:	4967      	ldr	r1, [pc, #412]	; (8006bb0 <HAL_RCC_OscConfig+0x7a4>)
 8006a14:	4313      	orrs	r3, r2
 8006a16:	628b      	str	r3, [r1, #40]	; 0x28
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a26:	3b01      	subs	r3, #1
 8006a28:	025b      	lsls	r3, r3, #9
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	431a      	orrs	r2, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a32:	3b01      	subs	r3, #1
 8006a34:	041b      	lsls	r3, r3, #16
 8006a36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006a3a:	431a      	orrs	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a40:	3b01      	subs	r3, #1
 8006a42:	061b      	lsls	r3, r3, #24
 8006a44:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006a48:	4959      	ldr	r1, [pc, #356]	; (8006bb0 <HAL_RCC_OscConfig+0x7a4>)
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006a4e:	4b58      	ldr	r3, [pc, #352]	; (8006bb0 <HAL_RCC_OscConfig+0x7a4>)
 8006a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a52:	4a57      	ldr	r2, [pc, #348]	; (8006bb0 <HAL_RCC_OscConfig+0x7a4>)
 8006a54:	f023 0301 	bic.w	r3, r3, #1
 8006a58:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006a5a:	4b55      	ldr	r3, [pc, #340]	; (8006bb0 <HAL_RCC_OscConfig+0x7a4>)
 8006a5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a5e:	4b56      	ldr	r3, [pc, #344]	; (8006bb8 <HAL_RCC_OscConfig+0x7ac>)
 8006a60:	4013      	ands	r3, r2
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006a66:	00d2      	lsls	r2, r2, #3
 8006a68:	4951      	ldr	r1, [pc, #324]	; (8006bb0 <HAL_RCC_OscConfig+0x7a4>)
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006a6e:	4b50      	ldr	r3, [pc, #320]	; (8006bb0 <HAL_RCC_OscConfig+0x7a4>)
 8006a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a72:	f023 020c 	bic.w	r2, r3, #12
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7a:	494d      	ldr	r1, [pc, #308]	; (8006bb0 <HAL_RCC_OscConfig+0x7a4>)
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006a80:	4b4b      	ldr	r3, [pc, #300]	; (8006bb0 <HAL_RCC_OscConfig+0x7a4>)
 8006a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a84:	f023 0202 	bic.w	r2, r3, #2
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a8c:	4948      	ldr	r1, [pc, #288]	; (8006bb0 <HAL_RCC_OscConfig+0x7a4>)
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006a92:	4b47      	ldr	r3, [pc, #284]	; (8006bb0 <HAL_RCC_OscConfig+0x7a4>)
 8006a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a96:	4a46      	ldr	r2, [pc, #280]	; (8006bb0 <HAL_RCC_OscConfig+0x7a4>)
 8006a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a9e:	4b44      	ldr	r3, [pc, #272]	; (8006bb0 <HAL_RCC_OscConfig+0x7a4>)
 8006aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa2:	4a43      	ldr	r2, [pc, #268]	; (8006bb0 <HAL_RCC_OscConfig+0x7a4>)
 8006aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006aa8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006aaa:	4b41      	ldr	r3, [pc, #260]	; (8006bb0 <HAL_RCC_OscConfig+0x7a4>)
 8006aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aae:	4a40      	ldr	r2, [pc, #256]	; (8006bb0 <HAL_RCC_OscConfig+0x7a4>)
 8006ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ab4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006ab6:	4b3e      	ldr	r3, [pc, #248]	; (8006bb0 <HAL_RCC_OscConfig+0x7a4>)
 8006ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aba:	4a3d      	ldr	r2, [pc, #244]	; (8006bb0 <HAL_RCC_OscConfig+0x7a4>)
 8006abc:	f043 0301 	orr.w	r3, r3, #1
 8006ac0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ac2:	4b3b      	ldr	r3, [pc, #236]	; (8006bb0 <HAL_RCC_OscConfig+0x7a4>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a3a      	ldr	r2, [pc, #232]	; (8006bb0 <HAL_RCC_OscConfig+0x7a4>)
 8006ac8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006acc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ace:	f7fb f95f 	bl	8001d90 <HAL_GetTick>
 8006ad2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ad4:	e008      	b.n	8006ae8 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ad6:	f7fb f95b 	bl	8001d90 <HAL_GetTick>
 8006ada:	4602      	mov	r2, r0
 8006adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ade:	1ad3      	subs	r3, r2, r3
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	d901      	bls.n	8006ae8 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	e05f      	b.n	8006ba8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ae8:	4b31      	ldr	r3, [pc, #196]	; (8006bb0 <HAL_RCC_OscConfig+0x7a4>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d0f0      	beq.n	8006ad6 <HAL_RCC_OscConfig+0x6ca>
 8006af4:	e057      	b.n	8006ba6 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006af6:	4b2e      	ldr	r3, [pc, #184]	; (8006bb0 <HAL_RCC_OscConfig+0x7a4>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a2d      	ldr	r2, [pc, #180]	; (8006bb0 <HAL_RCC_OscConfig+0x7a4>)
 8006afc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b02:	f7fb f945 	bl	8001d90 <HAL_GetTick>
 8006b06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b08:	e008      	b.n	8006b1c <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b0a:	f7fb f941 	bl	8001d90 <HAL_GetTick>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d901      	bls.n	8006b1c <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e045      	b.n	8006ba8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b1c:	4b24      	ldr	r3, [pc, #144]	; (8006bb0 <HAL_RCC_OscConfig+0x7a4>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1f0      	bne.n	8006b0a <HAL_RCC_OscConfig+0x6fe>
 8006b28:	e03d      	b.n	8006ba6 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006b2a:	4b21      	ldr	r3, [pc, #132]	; (8006bb0 <HAL_RCC_OscConfig+0x7a4>)
 8006b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b2e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006b30:	4b1f      	ldr	r3, [pc, #124]	; (8006bb0 <HAL_RCC_OscConfig+0x7a4>)
 8006b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b34:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d031      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	f003 0203 	and.w	r2, r3, #3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d12a      	bne.n	8006ba2 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	091b      	lsrs	r3, r3, #4
 8006b50:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d122      	bne.n	8006ba2 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b66:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d11a      	bne.n	8006ba2 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	0a5b      	lsrs	r3, r3, #9
 8006b70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b78:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d111      	bne.n	8006ba2 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	0c1b      	lsrs	r3, r3, #16
 8006b82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d108      	bne.n	8006ba2 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	0e1b      	lsrs	r3, r3, #24
 8006b94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b9c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d001      	beq.n	8006ba6 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e000      	b.n	8006ba8 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3730      	adds	r7, #48	; 0x30
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	58024400 	.word	0x58024400
 8006bb4:	fffffc0c 	.word	0xfffffc0c
 8006bb8:	ffff0007 	.word	0xffff0007

08006bbc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d101      	bne.n	8006bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e18d      	b.n	8006eec <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006bd0:	4b8a      	ldr	r3, [pc, #552]	; (8006dfc <HAL_RCC_ClockConfig+0x240>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 030f 	and.w	r3, r3, #15
 8006bd8:	683a      	ldr	r2, [r7, #0]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d910      	bls.n	8006c00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bde:	4b87      	ldr	r3, [pc, #540]	; (8006dfc <HAL_RCC_ClockConfig+0x240>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f023 020f 	bic.w	r2, r3, #15
 8006be6:	4985      	ldr	r1, [pc, #532]	; (8006dfc <HAL_RCC_ClockConfig+0x240>)
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bee:	4b83      	ldr	r3, [pc, #524]	; (8006dfc <HAL_RCC_ClockConfig+0x240>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 030f 	and.w	r3, r3, #15
 8006bf6:	683a      	ldr	r2, [r7, #0]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d001      	beq.n	8006c00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e175      	b.n	8006eec <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 0304 	and.w	r3, r3, #4
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d010      	beq.n	8006c2e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	691a      	ldr	r2, [r3, #16]
 8006c10:	4b7b      	ldr	r3, [pc, #492]	; (8006e00 <HAL_RCC_ClockConfig+0x244>)
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d908      	bls.n	8006c2e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c1c:	4b78      	ldr	r3, [pc, #480]	; (8006e00 <HAL_RCC_ClockConfig+0x244>)
 8006c1e:	699b      	ldr	r3, [r3, #24]
 8006c20:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	4975      	ldr	r1, [pc, #468]	; (8006e00 <HAL_RCC_ClockConfig+0x244>)
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0308 	and.w	r3, r3, #8
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d010      	beq.n	8006c5c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	695a      	ldr	r2, [r3, #20]
 8006c3e:	4b70      	ldr	r3, [pc, #448]	; (8006e00 <HAL_RCC_ClockConfig+0x244>)
 8006c40:	69db      	ldr	r3, [r3, #28]
 8006c42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d908      	bls.n	8006c5c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006c4a:	4b6d      	ldr	r3, [pc, #436]	; (8006e00 <HAL_RCC_ClockConfig+0x244>)
 8006c4c:	69db      	ldr	r3, [r3, #28]
 8006c4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	695b      	ldr	r3, [r3, #20]
 8006c56:	496a      	ldr	r1, [pc, #424]	; (8006e00 <HAL_RCC_ClockConfig+0x244>)
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0310 	and.w	r3, r3, #16
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d010      	beq.n	8006c8a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	699a      	ldr	r2, [r3, #24]
 8006c6c:	4b64      	ldr	r3, [pc, #400]	; (8006e00 <HAL_RCC_ClockConfig+0x244>)
 8006c6e:	69db      	ldr	r3, [r3, #28]
 8006c70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d908      	bls.n	8006c8a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006c78:	4b61      	ldr	r3, [pc, #388]	; (8006e00 <HAL_RCC_ClockConfig+0x244>)
 8006c7a:	69db      	ldr	r3, [r3, #28]
 8006c7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	699b      	ldr	r3, [r3, #24]
 8006c84:	495e      	ldr	r1, [pc, #376]	; (8006e00 <HAL_RCC_ClockConfig+0x244>)
 8006c86:	4313      	orrs	r3, r2
 8006c88:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 0320 	and.w	r3, r3, #32
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d010      	beq.n	8006cb8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	69da      	ldr	r2, [r3, #28]
 8006c9a:	4b59      	ldr	r3, [pc, #356]	; (8006e00 <HAL_RCC_ClockConfig+0x244>)
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d908      	bls.n	8006cb8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006ca6:	4b56      	ldr	r3, [pc, #344]	; (8006e00 <HAL_RCC_ClockConfig+0x244>)
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	69db      	ldr	r3, [r3, #28]
 8006cb2:	4953      	ldr	r1, [pc, #332]	; (8006e00 <HAL_RCC_ClockConfig+0x244>)
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0302 	and.w	r3, r3, #2
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d010      	beq.n	8006ce6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	68da      	ldr	r2, [r3, #12]
 8006cc8:	4b4d      	ldr	r3, [pc, #308]	; (8006e00 <HAL_RCC_ClockConfig+0x244>)
 8006cca:	699b      	ldr	r3, [r3, #24]
 8006ccc:	f003 030f 	and.w	r3, r3, #15
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d908      	bls.n	8006ce6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cd4:	4b4a      	ldr	r3, [pc, #296]	; (8006e00 <HAL_RCC_ClockConfig+0x244>)
 8006cd6:	699b      	ldr	r3, [r3, #24]
 8006cd8:	f023 020f 	bic.w	r2, r3, #15
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	4947      	ldr	r1, [pc, #284]	; (8006e00 <HAL_RCC_ClockConfig+0x244>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d055      	beq.n	8006d9e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006cf2:	4b43      	ldr	r3, [pc, #268]	; (8006e00 <HAL_RCC_ClockConfig+0x244>)
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	4940      	ldr	r1, [pc, #256]	; (8006e00 <HAL_RCC_ClockConfig+0x244>)
 8006d00:	4313      	orrs	r3, r2
 8006d02:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d107      	bne.n	8006d1c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d0c:	4b3c      	ldr	r3, [pc, #240]	; (8006e00 <HAL_RCC_ClockConfig+0x244>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d121      	bne.n	8006d5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e0e7      	b.n	8006eec <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	2b03      	cmp	r3, #3
 8006d22:	d107      	bne.n	8006d34 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d24:	4b36      	ldr	r3, [pc, #216]	; (8006e00 <HAL_RCC_ClockConfig+0x244>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d115      	bne.n	8006d5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e0db      	b.n	8006eec <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d107      	bne.n	8006d4c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d3c:	4b30      	ldr	r3, [pc, #192]	; (8006e00 <HAL_RCC_ClockConfig+0x244>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d109      	bne.n	8006d5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e0cf      	b.n	8006eec <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d4c:	4b2c      	ldr	r3, [pc, #176]	; (8006e00 <HAL_RCC_ClockConfig+0x244>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 0304 	and.w	r3, r3, #4
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d101      	bne.n	8006d5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e0c7      	b.n	8006eec <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d5c:	4b28      	ldr	r3, [pc, #160]	; (8006e00 <HAL_RCC_ClockConfig+0x244>)
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	f023 0207 	bic.w	r2, r3, #7
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	4925      	ldr	r1, [pc, #148]	; (8006e00 <HAL_RCC_ClockConfig+0x244>)
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d6e:	f7fb f80f 	bl	8001d90 <HAL_GetTick>
 8006d72:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d74:	e00a      	b.n	8006d8c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d76:	f7fb f80b 	bl	8001d90 <HAL_GetTick>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	1ad3      	subs	r3, r2, r3
 8006d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d901      	bls.n	8006d8c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e0af      	b.n	8006eec <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d8c:	4b1c      	ldr	r3, [pc, #112]	; (8006e00 <HAL_RCC_ClockConfig+0x244>)
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	00db      	lsls	r3, r3, #3
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d1eb      	bne.n	8006d76 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 0302 	and.w	r3, r3, #2
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d010      	beq.n	8006dcc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	68da      	ldr	r2, [r3, #12]
 8006dae:	4b14      	ldr	r3, [pc, #80]	; (8006e00 <HAL_RCC_ClockConfig+0x244>)
 8006db0:	699b      	ldr	r3, [r3, #24]
 8006db2:	f003 030f 	and.w	r3, r3, #15
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d208      	bcs.n	8006dcc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006dba:	4b11      	ldr	r3, [pc, #68]	; (8006e00 <HAL_RCC_ClockConfig+0x244>)
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	f023 020f 	bic.w	r2, r3, #15
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	490e      	ldr	r1, [pc, #56]	; (8006e00 <HAL_RCC_ClockConfig+0x244>)
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006dcc:	4b0b      	ldr	r3, [pc, #44]	; (8006dfc <HAL_RCC_ClockConfig+0x240>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 030f 	and.w	r3, r3, #15
 8006dd4:	683a      	ldr	r2, [r7, #0]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d214      	bcs.n	8006e04 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dda:	4b08      	ldr	r3, [pc, #32]	; (8006dfc <HAL_RCC_ClockConfig+0x240>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f023 020f 	bic.w	r2, r3, #15
 8006de2:	4906      	ldr	r1, [pc, #24]	; (8006dfc <HAL_RCC_ClockConfig+0x240>)
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dea:	4b04      	ldr	r3, [pc, #16]	; (8006dfc <HAL_RCC_ClockConfig+0x240>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 030f 	and.w	r3, r3, #15
 8006df2:	683a      	ldr	r2, [r7, #0]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d005      	beq.n	8006e04 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e077      	b.n	8006eec <HAL_RCC_ClockConfig+0x330>
 8006dfc:	52002000 	.word	0x52002000
 8006e00:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 0304 	and.w	r3, r3, #4
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d010      	beq.n	8006e32 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	691a      	ldr	r2, [r3, #16]
 8006e14:	4b37      	ldr	r3, [pc, #220]	; (8006ef4 <HAL_RCC_ClockConfig+0x338>)
 8006e16:	699b      	ldr	r3, [r3, #24]
 8006e18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d208      	bcs.n	8006e32 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006e20:	4b34      	ldr	r3, [pc, #208]	; (8006ef4 <HAL_RCC_ClockConfig+0x338>)
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	4931      	ldr	r1, [pc, #196]	; (8006ef4 <HAL_RCC_ClockConfig+0x338>)
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0308 	and.w	r3, r3, #8
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d010      	beq.n	8006e60 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	695a      	ldr	r2, [r3, #20]
 8006e42:	4b2c      	ldr	r3, [pc, #176]	; (8006ef4 <HAL_RCC_ClockConfig+0x338>)
 8006e44:	69db      	ldr	r3, [r3, #28]
 8006e46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d208      	bcs.n	8006e60 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006e4e:	4b29      	ldr	r3, [pc, #164]	; (8006ef4 <HAL_RCC_ClockConfig+0x338>)
 8006e50:	69db      	ldr	r3, [r3, #28]
 8006e52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	4926      	ldr	r1, [pc, #152]	; (8006ef4 <HAL_RCC_ClockConfig+0x338>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 0310 	and.w	r3, r3, #16
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d010      	beq.n	8006e8e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	699a      	ldr	r2, [r3, #24]
 8006e70:	4b20      	ldr	r3, [pc, #128]	; (8006ef4 <HAL_RCC_ClockConfig+0x338>)
 8006e72:	69db      	ldr	r3, [r3, #28]
 8006e74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d208      	bcs.n	8006e8e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006e7c:	4b1d      	ldr	r3, [pc, #116]	; (8006ef4 <HAL_RCC_ClockConfig+0x338>)
 8006e7e:	69db      	ldr	r3, [r3, #28]
 8006e80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	699b      	ldr	r3, [r3, #24]
 8006e88:	491a      	ldr	r1, [pc, #104]	; (8006ef4 <HAL_RCC_ClockConfig+0x338>)
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 0320 	and.w	r3, r3, #32
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d010      	beq.n	8006ebc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	69da      	ldr	r2, [r3, #28]
 8006e9e:	4b15      	ldr	r3, [pc, #84]	; (8006ef4 <HAL_RCC_ClockConfig+0x338>)
 8006ea0:	6a1b      	ldr	r3, [r3, #32]
 8006ea2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d208      	bcs.n	8006ebc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006eaa:	4b12      	ldr	r3, [pc, #72]	; (8006ef4 <HAL_RCC_ClockConfig+0x338>)
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	69db      	ldr	r3, [r3, #28]
 8006eb6:	490f      	ldr	r1, [pc, #60]	; (8006ef4 <HAL_RCC_ClockConfig+0x338>)
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006ebc:	f000 f832 	bl	8006f24 <HAL_RCC_GetSysClockFreq>
 8006ec0:	4601      	mov	r1, r0
 8006ec2:	4b0c      	ldr	r3, [pc, #48]	; (8006ef4 <HAL_RCC_ClockConfig+0x338>)
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	0a1b      	lsrs	r3, r3, #8
 8006ec8:	f003 030f 	and.w	r3, r3, #15
 8006ecc:	4a0a      	ldr	r2, [pc, #40]	; (8006ef8 <HAL_RCC_ClockConfig+0x33c>)
 8006ece:	5cd3      	ldrb	r3, [r2, r3]
 8006ed0:	f003 031f 	and.w	r3, r3, #31
 8006ed4:	fa21 f303 	lsr.w	r3, r1, r3
 8006ed8:	4a08      	ldr	r2, [pc, #32]	; (8006efc <HAL_RCC_ClockConfig+0x340>)
 8006eda:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif
  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006edc:	4b08      	ldr	r3, [pc, #32]	; (8006f00 <HAL_RCC_ClockConfig+0x344>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7fa ff0b 	bl	8001cfc <HAL_InitTick>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8006eea:	7afb      	ldrb	r3, [r7, #11]
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	58024400 	.word	0x58024400
 8006ef8:	08010114 	.word	0x08010114
 8006efc:	24000000 	.word	0x24000000
 8006f00:	24000008 	.word	0x24000008

08006f04 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8006f04:	b480      	push	{r7}
 8006f06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8006f08:	4b05      	ldr	r3, [pc, #20]	; (8006f20 <HAL_RCC_EnableCSS+0x1c>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a04      	ldr	r2, [pc, #16]	; (8006f20 <HAL_RCC_EnableCSS+0x1c>)
 8006f0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f12:	6013      	str	r3, [r2, #0]
}
 8006f14:	bf00      	nop
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	58024400 	.word	0x58024400

08006f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b089      	sub	sp, #36	; 0x24
 8006f28:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f2a:	4baf      	ldr	r3, [pc, #700]	; (80071e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f32:	2b18      	cmp	r3, #24
 8006f34:	f200 814e 	bhi.w	80071d4 <HAL_RCC_GetSysClockFreq+0x2b0>
 8006f38:	a201      	add	r2, pc, #4	; (adr r2, 8006f40 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f3e:	bf00      	nop
 8006f40:	08006fa5 	.word	0x08006fa5
 8006f44:	080071d5 	.word	0x080071d5
 8006f48:	080071d5 	.word	0x080071d5
 8006f4c:	080071d5 	.word	0x080071d5
 8006f50:	080071d5 	.word	0x080071d5
 8006f54:	080071d5 	.word	0x080071d5
 8006f58:	080071d5 	.word	0x080071d5
 8006f5c:	080071d5 	.word	0x080071d5
 8006f60:	08006fcb 	.word	0x08006fcb
 8006f64:	080071d5 	.word	0x080071d5
 8006f68:	080071d5 	.word	0x080071d5
 8006f6c:	080071d5 	.word	0x080071d5
 8006f70:	080071d5 	.word	0x080071d5
 8006f74:	080071d5 	.word	0x080071d5
 8006f78:	080071d5 	.word	0x080071d5
 8006f7c:	080071d5 	.word	0x080071d5
 8006f80:	08006fd1 	.word	0x08006fd1
 8006f84:	080071d5 	.word	0x080071d5
 8006f88:	080071d5 	.word	0x080071d5
 8006f8c:	080071d5 	.word	0x080071d5
 8006f90:	080071d5 	.word	0x080071d5
 8006f94:	080071d5 	.word	0x080071d5
 8006f98:	080071d5 	.word	0x080071d5
 8006f9c:	080071d5 	.word	0x080071d5
 8006fa0:	08006fd7 	.word	0x08006fd7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fa4:	4b90      	ldr	r3, [pc, #576]	; (80071e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0320 	and.w	r3, r3, #32
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d009      	beq.n	8006fc4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006fb0:	4b8d      	ldr	r3, [pc, #564]	; (80071e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	08db      	lsrs	r3, r3, #3
 8006fb6:	f003 0303 	and.w	r3, r3, #3
 8006fba:	4a8c      	ldr	r2, [pc, #560]	; (80071ec <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8006fc0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006fc2:	e10a      	b.n	80071da <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006fc4:	4b89      	ldr	r3, [pc, #548]	; (80071ec <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006fc6:	61bb      	str	r3, [r7, #24]
    break;
 8006fc8:	e107      	b.n	80071da <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006fca:	4b89      	ldr	r3, [pc, #548]	; (80071f0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006fcc:	61bb      	str	r3, [r7, #24]
    break;
 8006fce:	e104      	b.n	80071da <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006fd0:	4b88      	ldr	r3, [pc, #544]	; (80071f4 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8006fd2:	61bb      	str	r3, [r7, #24]
    break;
 8006fd4:	e101      	b.n	80071da <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006fd6:	4b84      	ldr	r3, [pc, #528]	; (80071e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fda:	f003 0303 	and.w	r3, r3, #3
 8006fde:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006fe0:	4b81      	ldr	r3, [pc, #516]	; (80071e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe4:	091b      	lsrs	r3, r3, #4
 8006fe6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fea:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006fec:	4b7e      	ldr	r3, [pc, #504]	; (80071e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff0:	f003 0301 	and.w	r3, r3, #1
 8006ff4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006ff6:	4b7c      	ldr	r3, [pc, #496]	; (80071e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ffa:	08db      	lsrs	r3, r3, #3
 8006ffc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	fb02 f303 	mul.w	r3, r2, r3
 8007006:	ee07 3a90 	vmov	s15, r3
 800700a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800700e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	2b00      	cmp	r3, #0
 8007016:	f000 80da 	beq.w	80071ce <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d05a      	beq.n	80070d6 <HAL_RCC_GetSysClockFreq+0x1b2>
 8007020:	2b01      	cmp	r3, #1
 8007022:	d302      	bcc.n	800702a <HAL_RCC_GetSysClockFreq+0x106>
 8007024:	2b02      	cmp	r3, #2
 8007026:	d078      	beq.n	800711a <HAL_RCC_GetSysClockFreq+0x1f6>
 8007028:	e099      	b.n	800715e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800702a:	4b6f      	ldr	r3, [pc, #444]	; (80071e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 0320 	and.w	r3, r3, #32
 8007032:	2b00      	cmp	r3, #0
 8007034:	d02d      	beq.n	8007092 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007036:	4b6c      	ldr	r3, [pc, #432]	; (80071e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	08db      	lsrs	r3, r3, #3
 800703c:	f003 0303 	and.w	r3, r3, #3
 8007040:	4a6a      	ldr	r2, [pc, #424]	; (80071ec <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007042:	fa22 f303 	lsr.w	r3, r2, r3
 8007046:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	ee07 3a90 	vmov	s15, r3
 800704e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	ee07 3a90 	vmov	s15, r3
 8007058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800705c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007060:	4b61      	ldr	r3, [pc, #388]	; (80071e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007068:	ee07 3a90 	vmov	s15, r3
 800706c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007070:	ed97 6a02 	vldr	s12, [r7, #8]
 8007074:	eddf 5a60 	vldr	s11, [pc, #384]	; 80071f8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007078:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800707c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007080:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007084:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800708c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007090:	e087      	b.n	80071a2 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	ee07 3a90 	vmov	s15, r3
 8007098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800709c:	eddf 6a57 	vldr	s13, [pc, #348]	; 80071fc <HAL_RCC_GetSysClockFreq+0x2d8>
 80070a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070a4:	4b50      	ldr	r3, [pc, #320]	; (80071e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80070a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ac:	ee07 3a90 	vmov	s15, r3
 80070b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80070b8:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80071f8 <HAL_RCC_GetSysClockFreq+0x2d4>
 80070bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070d4:	e065      	b.n	80071a2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	ee07 3a90 	vmov	s15, r3
 80070dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070e0:	eddf 6a47 	vldr	s13, [pc, #284]	; 8007200 <HAL_RCC_GetSysClockFreq+0x2dc>
 80070e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070e8:	4b3f      	ldr	r3, [pc, #252]	; (80071e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80070ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070f0:	ee07 3a90 	vmov	s15, r3
 80070f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80070fc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80071f8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007100:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007104:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007108:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800710c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007110:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007114:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007118:	e043      	b.n	80071a2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	ee07 3a90 	vmov	s15, r3
 8007120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007124:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007204 <HAL_RCC_GetSysClockFreq+0x2e0>
 8007128:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800712c:	4b2e      	ldr	r3, [pc, #184]	; (80071e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800712e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007134:	ee07 3a90 	vmov	s15, r3
 8007138:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800713c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007140:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80071f8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007144:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007148:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800714c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007150:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007158:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800715c:	e021      	b.n	80071a2 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	ee07 3a90 	vmov	s15, r3
 8007164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007168:	eddf 6a25 	vldr	s13, [pc, #148]	; 8007200 <HAL_RCC_GetSysClockFreq+0x2dc>
 800716c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007170:	4b1d      	ldr	r3, [pc, #116]	; (80071e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007178:	ee07 3a90 	vmov	s15, r3
 800717c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007180:	ed97 6a02 	vldr	s12, [r7, #8]
 8007184:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80071f8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007188:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800718c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007190:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007194:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800719c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071a0:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80071a2:	4b11      	ldr	r3, [pc, #68]	; (80071e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80071a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a6:	0a5b      	lsrs	r3, r3, #9
 80071a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071ac:	3301      	adds	r3, #1
 80071ae:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	ee07 3a90 	vmov	s15, r3
 80071b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80071ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80071be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071c6:	ee17 3a90 	vmov	r3, s15
 80071ca:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80071cc:	e005      	b.n	80071da <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80071ce:	2300      	movs	r3, #0
 80071d0:	61bb      	str	r3, [r7, #24]
    break;
 80071d2:	e002      	b.n	80071da <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80071d4:	4b06      	ldr	r3, [pc, #24]	; (80071f0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80071d6:	61bb      	str	r3, [r7, #24]
    break;
 80071d8:	bf00      	nop
  }

  return sysclockfreq;
 80071da:	69bb      	ldr	r3, [r7, #24]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3724      	adds	r7, #36	; 0x24
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr
 80071e8:	58024400 	.word	0x58024400
 80071ec:	03d09000 	.word	0x03d09000
 80071f0:	003d0900 	.word	0x003d0900
 80071f4:	017d7840 	.word	0x017d7840
 80071f8:	46000000 	.word	0x46000000
 80071fc:	4c742400 	.word	0x4c742400
 8007200:	4a742400 	.word	0x4a742400
 8007204:	4bbebc20 	.word	0x4bbebc20

08007208 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800720c:	f001 fdb0 	bl	8008d70 <HAL_RCCEx_GetD1SysClockFreq>
 8007210:	4601      	mov	r1, r0
 8007212:	4b08      	ldr	r3, [pc, #32]	; (8007234 <HAL_RCC_GetHCLKFreq+0x2c>)
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	f003 030f 	and.w	r3, r3, #15
 800721a:	4a07      	ldr	r2, [pc, #28]	; (8007238 <HAL_RCC_GetHCLKFreq+0x30>)
 800721c:	5cd3      	ldrb	r3, [r2, r3]
 800721e:	f003 031f 	and.w	r3, r3, #31
 8007222:	fa21 f303 	lsr.w	r3, r1, r3
 8007226:	4a05      	ldr	r2, [pc, #20]	; (800723c <HAL_RCC_GetHCLKFreq+0x34>)
 8007228:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif
  return SystemD2Clock;
 800722a:	4b04      	ldr	r3, [pc, #16]	; (800723c <HAL_RCC_GetHCLKFreq+0x34>)
 800722c:	681b      	ldr	r3, [r3, #0]
}
 800722e:	4618      	mov	r0, r3
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	58024400 	.word	0x58024400
 8007238:	08010114 	.word	0x08010114
 800723c:	24000004 	.word	0x24000004

08007240 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007244:	f7ff ffe0 	bl	8007208 <HAL_RCC_GetHCLKFreq>
 8007248:	4601      	mov	r1, r0
 800724a:	4b06      	ldr	r3, [pc, #24]	; (8007264 <HAL_RCC_GetPCLK1Freq+0x24>)
 800724c:	69db      	ldr	r3, [r3, #28]
 800724e:	091b      	lsrs	r3, r3, #4
 8007250:	f003 0307 	and.w	r3, r3, #7
 8007254:	4a04      	ldr	r2, [pc, #16]	; (8007268 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007256:	5cd3      	ldrb	r3, [r2, r3]
 8007258:	f003 031f 	and.w	r3, r3, #31
 800725c:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> POSITION_VAL(RCC_CDCFGR2_CDPPRE1_0)]);
#endif
}
 8007260:	4618      	mov	r0, r3
 8007262:	bd80      	pop	{r7, pc}
 8007264:	58024400 	.word	0x58024400
 8007268:	08010114 	.word	0x08010114

0800726c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007270:	f7ff ffca 	bl	8007208 <HAL_RCC_GetHCLKFreq>
 8007274:	4601      	mov	r1, r0
 8007276:	4b06      	ldr	r3, [pc, #24]	; (8007290 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007278:	69db      	ldr	r3, [r3, #28]
 800727a:	0a1b      	lsrs	r3, r3, #8
 800727c:	f003 0307 	and.w	r3, r3, #7
 8007280:	4a04      	ldr	r2, [pc, #16]	; (8007294 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007282:	5cd3      	ldrb	r3, [r2, r3]
 8007284:	f003 031f 	and.w	r3, r3, #31
 8007288:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800728c:	4618      	mov	r0, r3
 800728e:	bd80      	pop	{r7, pc}
 8007290:	58024400 	.word	0x58024400
 8007294:	08010114 	.word	0x08010114

08007298 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800729c:	4b07      	ldr	r3, [pc, #28]	; (80072bc <HAL_RCC_NMI_IRQHandler+0x24>)
 800729e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072a8:	d105      	bne.n	80072b6 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 80072aa:	f000 f809 	bl	80072c0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80072ae:	4b03      	ldr	r3, [pc, #12]	; (80072bc <HAL_RCC_NMI_IRQHandler+0x24>)
 80072b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80072b4:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 80072b6:	bf00      	nop
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	58024400 	.word	0x58024400

080072c0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 80072c0:	b480      	push	{r7}
 80072c2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 80072c4:	bf00      	nop
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr
	...

080072d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80072d8:	2300      	movs	r3, #0
 80072da:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80072dc:	2300      	movs	r3, #0
 80072de:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d03d      	beq.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072f4:	d013      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80072f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072fa:	d802      	bhi.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d007      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8007300:	e01f      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007302:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007306:	d013      	beq.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8007308:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800730c:	d01c      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800730e:	e018      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007310:	4baf      	ldr	r3, [pc, #700]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007314:	4aae      	ldr	r2, [pc, #696]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800731a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800731c:	e015      	b.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	3304      	adds	r3, #4
 8007322:	2102      	movs	r1, #2
 8007324:	4618      	mov	r0, r3
 8007326:	f001 fd3f 	bl	8008da8 <RCCEx_PLL2_Config>
 800732a:	4603      	mov	r3, r0
 800732c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800732e:	e00c      	b.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	3324      	adds	r3, #36	; 0x24
 8007334:	2102      	movs	r1, #2
 8007336:	4618      	mov	r0, r3
 8007338:	f001 fde8 	bl	8008f0c <RCCEx_PLL3_Config>
 800733c:	4603      	mov	r3, r0
 800733e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007340:	e003      	b.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	75fb      	strb	r3, [r7, #23]
      break;
 8007346:	e000      	b.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8007348:	bf00      	nop
    }

    if(ret == HAL_OK)
 800734a:	7dfb      	ldrb	r3, [r7, #23]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d109      	bne.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007350:	4b9f      	ldr	r3, [pc, #636]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007354:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800735c:	499c      	ldr	r1, [pc, #624]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800735e:	4313      	orrs	r3, r2
 8007360:	650b      	str	r3, [r1, #80]	; 0x50
 8007362:	e001      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007364:	7dfb      	ldrb	r3, [r7, #23]
 8007366:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007370:	2b00      	cmp	r3, #0
 8007372:	d03d      	beq.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007378:	2b04      	cmp	r3, #4
 800737a:	d826      	bhi.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800737c:	a201      	add	r2, pc, #4	; (adr r2, 8007384 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800737e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007382:	bf00      	nop
 8007384:	08007399 	.word	0x08007399
 8007388:	080073a7 	.word	0x080073a7
 800738c:	080073b9 	.word	0x080073b9
 8007390:	080073d1 	.word	0x080073d1
 8007394:	080073d1 	.word	0x080073d1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007398:	4b8d      	ldr	r3, [pc, #564]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800739a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739c:	4a8c      	ldr	r2, [pc, #560]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800739e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80073a4:	e015      	b.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	3304      	adds	r3, #4
 80073aa:	2100      	movs	r1, #0
 80073ac:	4618      	mov	r0, r3
 80073ae:	f001 fcfb 	bl	8008da8 <RCCEx_PLL2_Config>
 80073b2:	4603      	mov	r3, r0
 80073b4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80073b6:	e00c      	b.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	3324      	adds	r3, #36	; 0x24
 80073bc:	2100      	movs	r1, #0
 80073be:	4618      	mov	r0, r3
 80073c0:	f001 fda4 	bl	8008f0c <RCCEx_PLL3_Config>
 80073c4:	4603      	mov	r3, r0
 80073c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80073c8:	e003      	b.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	75fb      	strb	r3, [r7, #23]
      break;
 80073ce:	e000      	b.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80073d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073d2:	7dfb      	ldrb	r3, [r7, #23]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d109      	bne.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80073d8:	4b7d      	ldr	r3, [pc, #500]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80073da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073dc:	f023 0207 	bic.w	r2, r3, #7
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e4:	497a      	ldr	r1, [pc, #488]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80073e6:	4313      	orrs	r3, r2
 80073e8:	650b      	str	r3, [r1, #80]	; 0x50
 80073ea:	e001      	b.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ec:	7dfb      	ldrb	r3, [r7, #23]
 80073ee:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d03e      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007400:	2b80      	cmp	r3, #128	; 0x80
 8007402:	d01c      	beq.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8007404:	2b80      	cmp	r3, #128	; 0x80
 8007406:	d804      	bhi.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8007408:	2b00      	cmp	r3, #0
 800740a:	d008      	beq.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800740c:	2b40      	cmp	r3, #64	; 0x40
 800740e:	d00d      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007410:	e01e      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007412:	2bc0      	cmp	r3, #192	; 0xc0
 8007414:	d01f      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8007416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800741a:	d01e      	beq.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800741c:	e018      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800741e:	4b6c      	ldr	r3, [pc, #432]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007422:	4a6b      	ldr	r2, [pc, #428]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007428:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800742a:	e017      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	3304      	adds	r3, #4
 8007430:	2100      	movs	r1, #0
 8007432:	4618      	mov	r0, r3
 8007434:	f001 fcb8 	bl	8008da8 <RCCEx_PLL2_Config>
 8007438:	4603      	mov	r3, r0
 800743a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800743c:	e00e      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	3324      	adds	r3, #36	; 0x24
 8007442:	2100      	movs	r1, #0
 8007444:	4618      	mov	r0, r3
 8007446:	f001 fd61 	bl	8008f0c <RCCEx_PLL3_Config>
 800744a:	4603      	mov	r3, r0
 800744c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800744e:	e005      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	75fb      	strb	r3, [r7, #23]
      break;
 8007454:	e002      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8007456:	bf00      	nop
 8007458:	e000      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800745a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800745c:	7dfb      	ldrb	r3, [r7, #23]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d109      	bne.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007462:	4b5b      	ldr	r3, [pc, #364]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007466:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800746e:	4958      	ldr	r1, [pc, #352]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007470:	4313      	orrs	r3, r2
 8007472:	650b      	str	r3, [r1, #80]	; 0x50
 8007474:	e001      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007476:	7dfb      	ldrb	r3, [r7, #23]
 8007478:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007482:	2b00      	cmp	r3, #0
 8007484:	d044      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800748c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007490:	d01f      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007492:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007496:	d805      	bhi.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8007498:	2b00      	cmp	r3, #0
 800749a:	d00a      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800749c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074a0:	d00e      	beq.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80074a2:	e01f      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80074a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80074a8:	d01f      	beq.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80074aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80074ae:	d01e      	beq.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80074b0:	e018      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074b2:	4b47      	ldr	r3, [pc, #284]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80074b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b6:	4a46      	ldr	r2, [pc, #280]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80074b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80074be:	e017      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	3304      	adds	r3, #4
 80074c4:	2100      	movs	r1, #0
 80074c6:	4618      	mov	r0, r3
 80074c8:	f001 fc6e 	bl	8008da8 <RCCEx_PLL2_Config>
 80074cc:	4603      	mov	r3, r0
 80074ce:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80074d0:	e00e      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	3324      	adds	r3, #36	; 0x24
 80074d6:	2100      	movs	r1, #0
 80074d8:	4618      	mov	r0, r3
 80074da:	f001 fd17 	bl	8008f0c <RCCEx_PLL3_Config>
 80074de:	4603      	mov	r3, r0
 80074e0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80074e2:	e005      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	75fb      	strb	r3, [r7, #23]
      break;
 80074e8:	e002      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80074ea:	bf00      	nop
 80074ec:	e000      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80074ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074f0:	7dfb      	ldrb	r3, [r7, #23]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d10a      	bne.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80074f6:	4b36      	ldr	r3, [pc, #216]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80074f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074fa:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007504:	4932      	ldr	r1, [pc, #200]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007506:	4313      	orrs	r3, r2
 8007508:	658b      	str	r3, [r1, #88]	; 0x58
 800750a:	e001      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800750c:	7dfb      	ldrb	r3, [r7, #23]
 800750e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007518:	2b00      	cmp	r3, #0
 800751a:	d044      	beq.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007522:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007526:	d01f      	beq.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007528:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800752c:	d805      	bhi.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00a      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8007532:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007536:	d00e      	beq.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8007538:	e01f      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800753a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800753e:	d01f      	beq.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007540:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007544:	d01e      	beq.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007546:	e018      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007548:	4b21      	ldr	r3, [pc, #132]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800754a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800754c:	4a20      	ldr	r2, [pc, #128]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800754e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007552:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007554:	e017      	b.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	3304      	adds	r3, #4
 800755a:	2100      	movs	r1, #0
 800755c:	4618      	mov	r0, r3
 800755e:	f001 fc23 	bl	8008da8 <RCCEx_PLL2_Config>
 8007562:	4603      	mov	r3, r0
 8007564:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007566:	e00e      	b.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	3324      	adds	r3, #36	; 0x24
 800756c:	2100      	movs	r1, #0
 800756e:	4618      	mov	r0, r3
 8007570:	f001 fccc 	bl	8008f0c <RCCEx_PLL3_Config>
 8007574:	4603      	mov	r3, r0
 8007576:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007578:	e005      	b.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	75fb      	strb	r3, [r7, #23]
      break;
 800757e:	e002      	b.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8007580:	bf00      	nop
 8007582:	e000      	b.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8007584:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007586:	7dfb      	ldrb	r3, [r7, #23]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d10a      	bne.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800758c:	4b10      	ldr	r3, [pc, #64]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800758e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007590:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800759a:	490d      	ldr	r1, [pc, #52]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800759c:	4313      	orrs	r3, r2
 800759e:	658b      	str	r3, [r1, #88]	; 0x58
 80075a0:	e001      	b.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075a2:	7dfb      	ldrb	r3, [r7, #23]
 80075a4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d035      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075b6:	2b10      	cmp	r3, #16
 80075b8:	d00c      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80075ba:	2b10      	cmp	r3, #16
 80075bc:	d802      	bhi.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d01b      	beq.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80075c2:	e017      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80075c4:	2b20      	cmp	r3, #32
 80075c6:	d00c      	beq.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80075c8:	2b30      	cmp	r3, #48	; 0x30
 80075ca:	d018      	beq.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80075cc:	e012      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80075ce:	bf00      	nop
 80075d0:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075d4:	4baf      	ldr	r3, [pc, #700]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80075d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d8:	4aae      	ldr	r2, [pc, #696]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80075da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80075e0:	e00e      	b.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	3304      	adds	r3, #4
 80075e6:	2102      	movs	r1, #2
 80075e8:	4618      	mov	r0, r3
 80075ea:	f001 fbdd 	bl	8008da8 <RCCEx_PLL2_Config>
 80075ee:	4603      	mov	r3, r0
 80075f0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80075f2:	e005      	b.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	75fb      	strb	r3, [r7, #23]
      break;
 80075f8:	e002      	b.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80075fa:	bf00      	nop
 80075fc:	e000      	b.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80075fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007600:	7dfb      	ldrb	r3, [r7, #23]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d109      	bne.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007606:	4ba3      	ldr	r3, [pc, #652]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800760a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007612:	49a0      	ldr	r1, [pc, #640]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007614:	4313      	orrs	r3, r2
 8007616:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007618:	e001      	b.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800761a:	7dfb      	ldrb	r3, [r7, #23]
 800761c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007626:	2b00      	cmp	r3, #0
 8007628:	d042      	beq.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800762e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007632:	d01f      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8007634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007638:	d805      	bhi.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00a      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800763e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007642:	d00e      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8007644:	e01f      	b.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8007646:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800764a:	d01f      	beq.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800764c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007650:	d01e      	beq.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8007652:	e018      	b.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007654:	4b8f      	ldr	r3, [pc, #572]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007658:	4a8e      	ldr	r2, [pc, #568]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800765a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800765e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007660:	e017      	b.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	3304      	adds	r3, #4
 8007666:	2100      	movs	r1, #0
 8007668:	4618      	mov	r0, r3
 800766a:	f001 fb9d 	bl	8008da8 <RCCEx_PLL2_Config>
 800766e:	4603      	mov	r3, r0
 8007670:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007672:	e00e      	b.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	3324      	adds	r3, #36	; 0x24
 8007678:	2100      	movs	r1, #0
 800767a:	4618      	mov	r0, r3
 800767c:	f001 fc46 	bl	8008f0c <RCCEx_PLL3_Config>
 8007680:	4603      	mov	r3, r0
 8007682:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007684:	e005      	b.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	75fb      	strb	r3, [r7, #23]
      break;
 800768a:	e002      	b.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800768c:	bf00      	nop
 800768e:	e000      	b.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007690:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007692:	7dfb      	ldrb	r3, [r7, #23]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d109      	bne.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007698:	4b7e      	ldr	r3, [pc, #504]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800769a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800769c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076a4:	497b      	ldr	r1, [pc, #492]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80076a6:	4313      	orrs	r3, r2
 80076a8:	650b      	str	r3, [r1, #80]	; 0x50
 80076aa:	e001      	b.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ac:	7dfb      	ldrb	r3, [r7, #23]
 80076ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d042      	beq.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076c4:	d01b      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80076c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076ca:	d805      	bhi.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d022      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x446>
 80076d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076d4:	d00a      	beq.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80076d6:	e01b      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80076d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80076dc:	d01d      	beq.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80076de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076e2:	d01c      	beq.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80076e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80076e8:	d01b      	beq.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x452>
 80076ea:	e011      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	3304      	adds	r3, #4
 80076f0:	2101      	movs	r1, #1
 80076f2:	4618      	mov	r0, r3
 80076f4:	f001 fb58 	bl	8008da8 <RCCEx_PLL2_Config>
 80076f8:	4603      	mov	r3, r0
 80076fa:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80076fc:	e012      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	3324      	adds	r3, #36	; 0x24
 8007702:	2101      	movs	r1, #1
 8007704:	4618      	mov	r0, r3
 8007706:	f001 fc01 	bl	8008f0c <RCCEx_PLL3_Config>
 800770a:	4603      	mov	r3, r0
 800770c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800770e:	e009      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	75fb      	strb	r3, [r7, #23]
      break;
 8007714:	e006      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007716:	bf00      	nop
 8007718:	e004      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800771a:	bf00      	nop
 800771c:	e002      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800771e:	bf00      	nop
 8007720:	e000      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007722:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007724:	7dfb      	ldrb	r3, [r7, #23]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d109      	bne.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800772a:	4b5a      	ldr	r3, [pc, #360]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800772c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800772e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007736:	4957      	ldr	r1, [pc, #348]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007738:	4313      	orrs	r3, r2
 800773a:	650b      	str	r3, [r1, #80]	; 0x50
 800773c:	e001      	b.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800773e:	7dfb      	ldrb	r3, [r7, #23]
 8007740:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800774a:	2b00      	cmp	r3, #0
 800774c:	d044      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007754:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007758:	d01b      	beq.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800775a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800775e:	d805      	bhi.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8007760:	2b00      	cmp	r3, #0
 8007762:	d022      	beq.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007764:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007768:	d00a      	beq.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800776a:	e01b      	b.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800776c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007770:	d01d      	beq.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007772:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007776:	d01c      	beq.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8007778:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800777c:	d01b      	beq.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800777e:	e011      	b.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	3304      	adds	r3, #4
 8007784:	2101      	movs	r1, #1
 8007786:	4618      	mov	r0, r3
 8007788:	f001 fb0e 	bl	8008da8 <RCCEx_PLL2_Config>
 800778c:	4603      	mov	r3, r0
 800778e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007790:	e012      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	3324      	adds	r3, #36	; 0x24
 8007796:	2101      	movs	r1, #1
 8007798:	4618      	mov	r0, r3
 800779a:	f001 fbb7 	bl	8008f0c <RCCEx_PLL3_Config>
 800779e:	4603      	mov	r3, r0
 80077a0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80077a2:	e009      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	75fb      	strb	r3, [r7, #23]
      break;
 80077a8:	e006      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80077aa:	bf00      	nop
 80077ac:	e004      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80077ae:	bf00      	nop
 80077b0:	e002      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80077b2:	bf00      	nop
 80077b4:	e000      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80077b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077b8:	7dfb      	ldrb	r3, [r7, #23]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d10a      	bne.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80077be:	4b35      	ldr	r3, [pc, #212]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80077c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077c2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80077cc:	4931      	ldr	r1, [pc, #196]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80077ce:	4313      	orrs	r3, r2
 80077d0:	658b      	str	r3, [r1, #88]	; 0x58
 80077d2:	e001      	b.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077d4:	7dfb      	ldrb	r3, [r7, #23]
 80077d6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d02d      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077ec:	d005      	beq.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80077ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077f2:	d009      	beq.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d013      	beq.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80077f8:	e00f      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077fa:	4b26      	ldr	r3, [pc, #152]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80077fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077fe:	4a25      	ldr	r2, [pc, #148]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007804:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007806:	e00c      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	3304      	adds	r3, #4
 800780c:	2101      	movs	r1, #1
 800780e:	4618      	mov	r0, r3
 8007810:	f001 faca 	bl	8008da8 <RCCEx_PLL2_Config>
 8007814:	4603      	mov	r3, r0
 8007816:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007818:	e003      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	75fb      	strb	r3, [r7, #23]
      break;
 800781e:	e000      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8007820:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007822:	7dfb      	ldrb	r3, [r7, #23]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d109      	bne.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007828:	4b1a      	ldr	r3, [pc, #104]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800782a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800782c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007834:	4917      	ldr	r1, [pc, #92]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007836:	4313      	orrs	r3, r2
 8007838:	650b      	str	r3, [r1, #80]	; 0x50
 800783a:	e001      	b.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800783c:	7dfb      	ldrb	r3, [r7, #23]
 800783e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007848:	2b00      	cmp	r3, #0
 800784a:	d035      	beq.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007850:	2b03      	cmp	r3, #3
 8007852:	d81b      	bhi.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007854:	a201      	add	r2, pc, #4	; (adr r2, 800785c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8007856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800785a:	bf00      	nop
 800785c:	08007899 	.word	0x08007899
 8007860:	0800786d 	.word	0x0800786d
 8007864:	0800787b 	.word	0x0800787b
 8007868:	08007899 	.word	0x08007899
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800786c:	4b09      	ldr	r3, [pc, #36]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800786e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007870:	4a08      	ldr	r2, [pc, #32]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007876:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007878:	e00f      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	3304      	adds	r3, #4
 800787e:	2102      	movs	r1, #2
 8007880:	4618      	mov	r0, r3
 8007882:	f001 fa91 	bl	8008da8 <RCCEx_PLL2_Config>
 8007886:	4603      	mov	r3, r0
 8007888:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800788a:	e006      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	75fb      	strb	r3, [r7, #23]
      break;
 8007890:	e003      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8007892:	bf00      	nop
 8007894:	58024400 	.word	0x58024400
      break;
 8007898:	bf00      	nop
    }

    if(ret == HAL_OK)
 800789a:	7dfb      	ldrb	r3, [r7, #23]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d109      	bne.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80078a0:	4bba      	ldr	r3, [pc, #744]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80078a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078a4:	f023 0203 	bic.w	r2, r3, #3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ac:	49b7      	ldr	r1, [pc, #732]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80078ae:	4313      	orrs	r3, r2
 80078b0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80078b2:	e001      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078b4:	7dfb      	ldrb	r3, [r7, #23]
 80078b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f000 8086 	beq.w	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80078c6:	4bb2      	ldr	r3, [pc, #712]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4ab1      	ldr	r2, [pc, #708]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80078cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80078d2:	f7fa fa5d 	bl	8001d90 <HAL_GetTick>
 80078d6:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80078d8:	e009      	b.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078da:	f7fa fa59 	bl	8001d90 <HAL_GetTick>
 80078de:	4602      	mov	r2, r0
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	1ad3      	subs	r3, r2, r3
 80078e4:	2b64      	cmp	r3, #100	; 0x64
 80078e6:	d902      	bls.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	75fb      	strb	r3, [r7, #23]
        break;
 80078ec:	e005      	b.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80078ee:	4ba8      	ldr	r3, [pc, #672]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d0ef      	beq.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80078fa:	7dfb      	ldrb	r3, [r7, #23]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d166      	bne.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007900:	4ba2      	ldr	r3, [pc, #648]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007902:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800790a:	4053      	eors	r3, r2
 800790c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007910:	2b00      	cmp	r3, #0
 8007912:	d013      	beq.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007914:	4b9d      	ldr	r3, [pc, #628]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007918:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800791c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800791e:	4b9b      	ldr	r3, [pc, #620]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007922:	4a9a      	ldr	r2, [pc, #616]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007928:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800792a:	4b98      	ldr	r3, [pc, #608]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800792c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800792e:	4a97      	ldr	r2, [pc, #604]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007930:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007934:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007936:	4a95      	ldr	r2, [pc, #596]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007946:	d115      	bne.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007948:	f7fa fa22 	bl	8001d90 <HAL_GetTick>
 800794c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800794e:	e00b      	b.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007950:	f7fa fa1e 	bl	8001d90 <HAL_GetTick>
 8007954:	4602      	mov	r2, r0
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	1ad3      	subs	r3, r2, r3
 800795a:	f241 3288 	movw	r2, #5000	; 0x1388
 800795e:	4293      	cmp	r3, r2
 8007960:	d902      	bls.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8007962:	2303      	movs	r3, #3
 8007964:	75fb      	strb	r3, [r7, #23]
            break;
 8007966:	e005      	b.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007968:	4b88      	ldr	r3, [pc, #544]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800796a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800796c:	f003 0302 	and.w	r3, r3, #2
 8007970:	2b00      	cmp	r3, #0
 8007972:	d0ed      	beq.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8007974:	7dfb      	ldrb	r3, [r7, #23]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d126      	bne.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007980:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007984:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007988:	d10d      	bne.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800798a:	4b80      	ldr	r3, [pc, #512]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007998:	0919      	lsrs	r1, r3, #4
 800799a:	4b7e      	ldr	r3, [pc, #504]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800799c:	400b      	ands	r3, r1
 800799e:	497b      	ldr	r1, [pc, #492]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80079a0:	4313      	orrs	r3, r2
 80079a2:	610b      	str	r3, [r1, #16]
 80079a4:	e005      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80079a6:	4b79      	ldr	r3, [pc, #484]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	4a78      	ldr	r2, [pc, #480]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80079ac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80079b0:	6113      	str	r3, [r2, #16]
 80079b2:	4b76      	ldr	r3, [pc, #472]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80079b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80079bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079c0:	4972      	ldr	r1, [pc, #456]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80079c2:	4313      	orrs	r3, r2
 80079c4:	670b      	str	r3, [r1, #112]	; 0x70
 80079c6:	e004      	b.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80079c8:	7dfb      	ldrb	r3, [r7, #23]
 80079ca:	75bb      	strb	r3, [r7, #22]
 80079cc:	e001      	b.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ce:	7dfb      	ldrb	r3, [r7, #23]
 80079d0:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 0301 	and.w	r3, r3, #1
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d07d      	beq.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079e2:	2b28      	cmp	r3, #40	; 0x28
 80079e4:	d866      	bhi.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80079e6:	a201      	add	r2, pc, #4	; (adr r2, 80079ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80079e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ec:	08007abb 	.word	0x08007abb
 80079f0:	08007ab5 	.word	0x08007ab5
 80079f4:	08007ab5 	.word	0x08007ab5
 80079f8:	08007ab5 	.word	0x08007ab5
 80079fc:	08007ab5 	.word	0x08007ab5
 8007a00:	08007ab5 	.word	0x08007ab5
 8007a04:	08007ab5 	.word	0x08007ab5
 8007a08:	08007ab5 	.word	0x08007ab5
 8007a0c:	08007a91 	.word	0x08007a91
 8007a10:	08007ab5 	.word	0x08007ab5
 8007a14:	08007ab5 	.word	0x08007ab5
 8007a18:	08007ab5 	.word	0x08007ab5
 8007a1c:	08007ab5 	.word	0x08007ab5
 8007a20:	08007ab5 	.word	0x08007ab5
 8007a24:	08007ab5 	.word	0x08007ab5
 8007a28:	08007ab5 	.word	0x08007ab5
 8007a2c:	08007aa3 	.word	0x08007aa3
 8007a30:	08007ab5 	.word	0x08007ab5
 8007a34:	08007ab5 	.word	0x08007ab5
 8007a38:	08007ab5 	.word	0x08007ab5
 8007a3c:	08007ab5 	.word	0x08007ab5
 8007a40:	08007ab5 	.word	0x08007ab5
 8007a44:	08007ab5 	.word	0x08007ab5
 8007a48:	08007ab5 	.word	0x08007ab5
 8007a4c:	08007abb 	.word	0x08007abb
 8007a50:	08007ab5 	.word	0x08007ab5
 8007a54:	08007ab5 	.word	0x08007ab5
 8007a58:	08007ab5 	.word	0x08007ab5
 8007a5c:	08007ab5 	.word	0x08007ab5
 8007a60:	08007ab5 	.word	0x08007ab5
 8007a64:	08007ab5 	.word	0x08007ab5
 8007a68:	08007ab5 	.word	0x08007ab5
 8007a6c:	08007abb 	.word	0x08007abb
 8007a70:	08007ab5 	.word	0x08007ab5
 8007a74:	08007ab5 	.word	0x08007ab5
 8007a78:	08007ab5 	.word	0x08007ab5
 8007a7c:	08007ab5 	.word	0x08007ab5
 8007a80:	08007ab5 	.word	0x08007ab5
 8007a84:	08007ab5 	.word	0x08007ab5
 8007a88:	08007ab5 	.word	0x08007ab5
 8007a8c:	08007abb 	.word	0x08007abb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	3304      	adds	r3, #4
 8007a94:	2101      	movs	r1, #1
 8007a96:	4618      	mov	r0, r3
 8007a98:	f001 f986 	bl	8008da8 <RCCEx_PLL2_Config>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007aa0:	e00c      	b.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	3324      	adds	r3, #36	; 0x24
 8007aa6:	2101      	movs	r1, #1
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f001 fa2f 	bl	8008f0c <RCCEx_PLL3_Config>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007ab2:	e003      	b.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ab8:	e000      	b.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8007aba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007abc:	7dfb      	ldrb	r3, [r7, #23]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d109      	bne.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007ac2:	4b32      	ldr	r3, [pc, #200]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ac6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ace:	492f      	ldr	r1, [pc, #188]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	654b      	str	r3, [r1, #84]	; 0x54
 8007ad4:	e001      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ad6:	7dfb      	ldrb	r3, [r7, #23]
 8007ad8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f003 0302 	and.w	r3, r3, #2
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d037      	beq.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007aea:	2b05      	cmp	r3, #5
 8007aec:	d820      	bhi.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8007aee:	a201      	add	r2, pc, #4	; (adr r2, 8007af4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af4:	08007b37 	.word	0x08007b37
 8007af8:	08007b0d 	.word	0x08007b0d
 8007afc:	08007b1f 	.word	0x08007b1f
 8007b00:	08007b37 	.word	0x08007b37
 8007b04:	08007b37 	.word	0x08007b37
 8007b08:	08007b37 	.word	0x08007b37
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	3304      	adds	r3, #4
 8007b10:	2101      	movs	r1, #1
 8007b12:	4618      	mov	r0, r3
 8007b14:	f001 f948 	bl	8008da8 <RCCEx_PLL2_Config>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007b1c:	e00c      	b.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	3324      	adds	r3, #36	; 0x24
 8007b22:	2101      	movs	r1, #1
 8007b24:	4618      	mov	r0, r3
 8007b26:	f001 f9f1 	bl	8008f0c <RCCEx_PLL3_Config>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007b2e:	e003      	b.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	75fb      	strb	r3, [r7, #23]
      break;
 8007b34:	e000      	b.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8007b36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b38:	7dfb      	ldrb	r3, [r7, #23]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d109      	bne.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007b3e:	4b13      	ldr	r3, [pc, #76]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b42:	f023 0207 	bic.w	r2, r3, #7
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b4a:	4910      	ldr	r1, [pc, #64]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	654b      	str	r3, [r1, #84]	; 0x54
 8007b50:	e001      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b52:	7dfb      	ldrb	r3, [r7, #23]
 8007b54:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f003 0304 	and.w	r3, r3, #4
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d040      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b68:	2b05      	cmp	r3, #5
 8007b6a:	d827      	bhi.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8007b6c:	a201      	add	r2, pc, #4	; (adr r2, 8007b74 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8007b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b72:	bf00      	nop
 8007b74:	08007bc3 	.word	0x08007bc3
 8007b78:	08007b99 	.word	0x08007b99
 8007b7c:	08007bab 	.word	0x08007bab
 8007b80:	08007bc3 	.word	0x08007bc3
 8007b84:	08007bc3 	.word	0x08007bc3
 8007b88:	08007bc3 	.word	0x08007bc3
 8007b8c:	58024400 	.word	0x58024400
 8007b90:	58024800 	.word	0x58024800
 8007b94:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	3304      	adds	r3, #4
 8007b9c:	2101      	movs	r1, #1
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f001 f902 	bl	8008da8 <RCCEx_PLL2_Config>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007ba8:	e00c      	b.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	3324      	adds	r3, #36	; 0x24
 8007bae:	2101      	movs	r1, #1
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f001 f9ab 	bl	8008f0c <RCCEx_PLL3_Config>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007bba:	e003      	b.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	75fb      	strb	r3, [r7, #23]
      break;
 8007bc0:	e000      	b.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8007bc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bc4:	7dfb      	ldrb	r3, [r7, #23]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d10a      	bne.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007bca:	4bb2      	ldr	r3, [pc, #712]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bce:	f023 0207 	bic.w	r2, r3, #7
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bd8:	49ae      	ldr	r1, [pc, #696]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	658b      	str	r3, [r1, #88]	; 0x58
 8007bde:	e001      	b.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007be0:	7dfb      	ldrb	r3, [r7, #23]
 8007be2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 0320 	and.w	r3, r3, #32
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d044      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bfa:	d01b      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8007bfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c00:	d805      	bhi.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d022      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8007c06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c0a:	d00a      	beq.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8007c0c:	e01b      	b.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8007c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c12:	d01d      	beq.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8007c14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c18:	d01c      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8007c1a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007c1e:	d01b      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8007c20:	e011      	b.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	3304      	adds	r3, #4
 8007c26:	2100      	movs	r1, #0
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f001 f8bd 	bl	8008da8 <RCCEx_PLL2_Config>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007c32:	e012      	b.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	3324      	adds	r3, #36	; 0x24
 8007c38:	2102      	movs	r1, #2
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f001 f966 	bl	8008f0c <RCCEx_PLL3_Config>
 8007c40:	4603      	mov	r3, r0
 8007c42:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007c44:	e009      	b.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	75fb      	strb	r3, [r7, #23]
      break;
 8007c4a:	e006      	b.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007c4c:	bf00      	nop
 8007c4e:	e004      	b.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007c50:	bf00      	nop
 8007c52:	e002      	b.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007c54:	bf00      	nop
 8007c56:	e000      	b.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007c58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c5a:	7dfb      	ldrb	r3, [r7, #23]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d10a      	bne.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c60:	4b8c      	ldr	r3, [pc, #560]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c64:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c6e:	4989      	ldr	r1, [pc, #548]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007c70:	4313      	orrs	r3, r2
 8007c72:	654b      	str	r3, [r1, #84]	; 0x54
 8007c74:	e001      	b.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c76:	7dfb      	ldrb	r3, [r7, #23]
 8007c78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d044      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c90:	d01b      	beq.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8007c92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c96:	d805      	bhi.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d022      	beq.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007c9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ca0:	d00a      	beq.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8007ca2:	e01b      	b.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8007ca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ca8:	d01d      	beq.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007caa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007cae:	d01c      	beq.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8007cb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007cb4:	d01b      	beq.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8007cb6:	e011      	b.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	3304      	adds	r3, #4
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f001 f872 	bl	8008da8 <RCCEx_PLL2_Config>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007cc8:	e012      	b.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	3324      	adds	r3, #36	; 0x24
 8007cce:	2102      	movs	r1, #2
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f001 f91b 	bl	8008f0c <RCCEx_PLL3_Config>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007cda:	e009      	b.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	75fb      	strb	r3, [r7, #23]
      break;
 8007ce0:	e006      	b.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007ce2:	bf00      	nop
 8007ce4:	e004      	b.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007ce6:	bf00      	nop
 8007ce8:	e002      	b.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007cea:	bf00      	nop
 8007cec:	e000      	b.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007cee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cf0:	7dfb      	ldrb	r3, [r7, #23]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d10a      	bne.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007cf6:	4b67      	ldr	r3, [pc, #412]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cfa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d04:	4963      	ldr	r1, [pc, #396]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007d06:	4313      	orrs	r3, r2
 8007d08:	658b      	str	r3, [r1, #88]	; 0x58
 8007d0a:	e001      	b.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d0c:	7dfb      	ldrb	r3, [r7, #23]
 8007d0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d044      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d26:	d01b      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8007d28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d2c:	d805      	bhi.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d022      	beq.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007d32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d36:	d00a      	beq.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007d38:	e01b      	b.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8007d3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d3e:	d01d      	beq.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007d40:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007d44:	d01c      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8007d46:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007d4a:	d01b      	beq.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8007d4c:	e011      	b.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	3304      	adds	r3, #4
 8007d52:	2100      	movs	r1, #0
 8007d54:	4618      	mov	r0, r3
 8007d56:	f001 f827 	bl	8008da8 <RCCEx_PLL2_Config>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007d5e:	e012      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	3324      	adds	r3, #36	; 0x24
 8007d64:	2102      	movs	r1, #2
 8007d66:	4618      	mov	r0, r3
 8007d68:	f001 f8d0 	bl	8008f0c <RCCEx_PLL3_Config>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007d70:	e009      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	75fb      	strb	r3, [r7, #23]
      break;
 8007d76:	e006      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007d78:	bf00      	nop
 8007d7a:	e004      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007d7c:	bf00      	nop
 8007d7e:	e002      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007d80:	bf00      	nop
 8007d82:	e000      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007d84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d86:	7dfb      	ldrb	r3, [r7, #23]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d10a      	bne.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007d8c:	4b41      	ldr	r3, [pc, #260]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d90:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d9a:	493e      	ldr	r1, [pc, #248]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	658b      	str	r3, [r1, #88]	; 0x58
 8007da0:	e001      	b.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007da2:	7dfb      	ldrb	r3, [r7, #23]
 8007da4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 0308 	and.w	r3, r3, #8
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d01a      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dbc:	d10a      	bne.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	3324      	adds	r3, #36	; 0x24
 8007dc2:	2102      	movs	r1, #2
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f001 f8a1 	bl	8008f0c <RCCEx_PLL3_Config>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d001      	beq.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007dd4:	4b2f      	ldr	r3, [pc, #188]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dd8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007de2:	492c      	ldr	r1, [pc, #176]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007de4:	4313      	orrs	r3, r2
 8007de6:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f003 0310 	and.w	r3, r3, #16
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d01a      	beq.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dfe:	d10a      	bne.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	3324      	adds	r3, #36	; 0x24
 8007e04:	2102      	movs	r1, #2
 8007e06:	4618      	mov	r0, r3
 8007e08:	f001 f880 	bl	8008f0c <RCCEx_PLL3_Config>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d001      	beq.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007e16:	4b1f      	ldr	r3, [pc, #124]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e24:	491b      	ldr	r1, [pc, #108]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007e26:	4313      	orrs	r3, r2
 8007e28:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d032      	beq.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e40:	d00d      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8007e42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e46:	d016      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d111      	bne.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	3304      	adds	r3, #4
 8007e50:	2100      	movs	r1, #0
 8007e52:	4618      	mov	r0, r3
 8007e54:	f000 ffa8 	bl	8008da8 <RCCEx_PLL2_Config>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007e5c:	e00c      	b.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	3324      	adds	r3, #36	; 0x24
 8007e62:	2102      	movs	r1, #2
 8007e64:	4618      	mov	r0, r3
 8007e66:	f001 f851 	bl	8008f0c <RCCEx_PLL3_Config>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007e6e:	e003      	b.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	75fb      	strb	r3, [r7, #23]
      break;
 8007e74:	e000      	b.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8007e76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e78:	7dfb      	ldrb	r3, [r7, #23]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d10c      	bne.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007e7e:	4b05      	ldr	r3, [pc, #20]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e82:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007e8c:	4901      	ldr	r1, [pc, #4]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	658b      	str	r3, [r1, #88]	; 0x58
 8007e92:	e003      	b.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8007e94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e98:	7dfb      	ldrb	r3, [r7, #23]
 8007e9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d02f      	beq.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007eae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007eb2:	d00c      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007eb4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007eb8:	d015      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8007eba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ebe:	d10f      	bne.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ec0:	4b71      	ldr	r3, [pc, #452]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec4:	4a70      	ldr	r2, [pc, #448]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007ec6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007eca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007ecc:	e00c      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	3324      	adds	r3, #36	; 0x24
 8007ed2:	2101      	movs	r1, #1
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f001 f819 	bl	8008f0c <RCCEx_PLL3_Config>
 8007eda:	4603      	mov	r3, r0
 8007edc:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007ede:	e003      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ee4:	e000      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8007ee6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ee8:	7dfb      	ldrb	r3, [r7, #23]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d10a      	bne.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007eee:	4b66      	ldr	r3, [pc, #408]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ef2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007efc:	4962      	ldr	r1, [pc, #392]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007efe:	4313      	orrs	r3, r2
 8007f00:	654b      	str	r3, [r1, #84]	; 0x54
 8007f02:	e001      	b.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f04:	7dfb      	ldrb	r3, [r7, #23]
 8007f06:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d029      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d003      	beq.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8007f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f20:	d007      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8007f22:	e00f      	b.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f24:	4b58      	ldr	r3, [pc, #352]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f28:	4a57      	ldr	r2, [pc, #348]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007f2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007f30:	e00b      	b.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	3304      	adds	r3, #4
 8007f36:	2102      	movs	r1, #2
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f000 ff35 	bl	8008da8 <RCCEx_PLL2_Config>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007f42:	e002      	b.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	75fb      	strb	r3, [r7, #23]
      break;
 8007f48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f4a:	7dfb      	ldrb	r3, [r7, #23]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d109      	bne.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007f50:	4b4d      	ldr	r3, [pc, #308]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f5c:	494a      	ldr	r1, [pc, #296]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007f62:	e001      	b.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f64:	7dfb      	ldrb	r3, [r7, #23]
 8007f66:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d00a      	beq.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	3324      	adds	r3, #36	; 0x24
 8007f78:	2102      	movs	r1, #2
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f000 ffc6 	bl	8008f0c <RCCEx_PLL3_Config>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d001      	beq.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d02f      	beq.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f9e:	d00c      	beq.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007fa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fa4:	d802      	bhi.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d011      	beq.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8007faa:	e00d      	b.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8007fac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fb0:	d00f      	beq.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8007fb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fb6:	d00e      	beq.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8007fb8:	e006      	b.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fba:	4b33      	ldr	r3, [pc, #204]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fbe:	4a32      	ldr	r2, [pc, #200]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fc4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007fc6:	e007      	b.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	75fb      	strb	r3, [r7, #23]
      break;
 8007fcc:	e004      	b.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007fce:	bf00      	nop
 8007fd0:	e002      	b.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007fd2:	bf00      	nop
 8007fd4:	e000      	b.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007fd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fd8:	7dfb      	ldrb	r3, [r7, #23]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d109      	bne.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007fde:	4b2a      	ldr	r3, [pc, #168]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fe2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fea:	4927      	ldr	r1, [pc, #156]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007fec:	4313      	orrs	r3, r2
 8007fee:	654b      	str	r3, [r1, #84]	; 0x54
 8007ff0:	e001      	b.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ff2:	7dfb      	ldrb	r3, [r7, #23]
 8007ff4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d008      	beq.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008002:	4b21      	ldr	r3, [pc, #132]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008006:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800800e:	491e      	ldr	r1, [pc, #120]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008010:	4313      	orrs	r3, r2
 8008012:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800801c:	2b00      	cmp	r3, #0
 800801e:	d008      	beq.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008020:	4b19      	ldr	r3, [pc, #100]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008024:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800802c:	4916      	ldr	r1, [pc, #88]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800802e:	4313      	orrs	r3, r2
 8008030:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00d      	beq.n	800805a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800803e:	4b12      	ldr	r3, [pc, #72]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008040:	691b      	ldr	r3, [r3, #16]
 8008042:	4a11      	ldr	r2, [pc, #68]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008044:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008048:	6113      	str	r3, [r2, #16]
 800804a:	4b0f      	ldr	r3, [pc, #60]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800804c:	691a      	ldr	r2, [r3, #16]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008054:	490c      	ldr	r1, [pc, #48]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008056:	4313      	orrs	r3, r2
 8008058:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	da08      	bge.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008062:	4b09      	ldr	r3, [pc, #36]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008066:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800806e:	4906      	ldr	r1, [pc, #24]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008070:	4313      	orrs	r3, r2
 8008072:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8008074:	7dbb      	ldrb	r3, [r7, #22]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d101      	bne.n	800807e <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 800807a:	2300      	movs	r3, #0
 800807c:	e000      	b.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 800807e:	2301      	movs	r3, #1
}
 8008080:	4618      	mov	r0, r3
 8008082:	3718      	adds	r7, #24
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	58024400 	.word	0x58024400

0800808c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b090      	sub	sp, #64	; 0x40
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800809a:	d150      	bne.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800809c:	4ba1      	ldr	r3, [pc, #644]	; (8008324 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800809e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080a0:	f003 0307 	and.w	r3, r3, #7
 80080a4:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80080a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a8:	2b04      	cmp	r3, #4
 80080aa:	d844      	bhi.n	8008136 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 80080ac:	a201      	add	r2, pc, #4	; (adr r2, 80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80080ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b2:	bf00      	nop
 80080b4:	080080c9 	.word	0x080080c9
 80080b8:	080080d9 	.word	0x080080d9
 80080bc:	080080e9 	.word	0x080080e9
 80080c0:	08008131 	.word	0x08008131
 80080c4:	080080f9 	.word	0x080080f9
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080cc:	4618      	mov	r0, r3
 80080ce:	f000 fd03 	bl	8008ad8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080d6:	e241      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080d8:	f107 0318 	add.w	r3, r7, #24
 80080dc:	4618      	mov	r0, r3
 80080de:	f000 fa63 	bl	80085a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80080e2:	69bb      	ldr	r3, [r7, #24]
 80080e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080e6:	e239      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080e8:	f107 030c 	add.w	r3, r7, #12
 80080ec:	4618      	mov	r0, r3
 80080ee:	f000 fba7 	bl	8008840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080f6:	e231      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80080f8:	4b8a      	ldr	r3, [pc, #552]	; (8008324 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80080fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008100:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008104:	2b00      	cmp	r3, #0
 8008106:	d102      	bne.n	800810e <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008108:	4b87      	ldr	r3, [pc, #540]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800810a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800810c:	e226      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800810e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008110:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008114:	d102      	bne.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8008116:	4b85      	ldr	r3, [pc, #532]	; (800832c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008118:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800811a:	e21f      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800811c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800811e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008122:	d102      	bne.n	800812a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8008124:	4b82      	ldr	r3, [pc, #520]	; (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008126:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008128:	e218      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800812a:	2300      	movs	r3, #0
 800812c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800812e:	e215      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008130:	4b80      	ldr	r3, [pc, #512]	; (8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008132:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008134:	e212      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008136:	2300      	movs	r3, #0
 8008138:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800813a:	bf00      	nop
 800813c:	e20e      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008144:	d14f      	bne.n	80081e6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8008146:	4b77      	ldr	r3, [pc, #476]	; (8008324 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800814a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800814e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008152:	2b80      	cmp	r3, #128	; 0x80
 8008154:	d01c      	beq.n	8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8008156:	2b80      	cmp	r3, #128	; 0x80
 8008158:	d804      	bhi.n	8008164 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800815a:	2b00      	cmp	r3, #0
 800815c:	d008      	beq.n	8008170 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800815e:	2b40      	cmp	r3, #64	; 0x40
 8008160:	d00e      	beq.n	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8008162:	e03c      	b.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8008164:	2bc0      	cmp	r3, #192	; 0xc0
 8008166:	d037      	beq.n	80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8008168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800816c:	d018      	beq.n	80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800816e:	e036      	b.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008174:	4618      	mov	r0, r3
 8008176:	f000 fcaf 	bl	8008ad8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800817a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800817c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800817e:	e1ed      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008180:	f107 0318 	add.w	r3, r7, #24
 8008184:	4618      	mov	r0, r3
 8008186:	f000 fa0f 	bl	80085a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800818e:	e1e5      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008190:	f107 030c 	add.w	r3, r7, #12
 8008194:	4618      	mov	r0, r3
 8008196:	f000 fb53 	bl	8008840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800819e:	e1dd      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80081a0:	4b60      	ldr	r3, [pc, #384]	; (8008324 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80081a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80081a8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80081aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d102      	bne.n	80081b6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80081b0:	4b5d      	ldr	r3, [pc, #372]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80081b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80081b4:	e1d2      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80081b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081bc:	d102      	bne.n	80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 80081be:	4b5b      	ldr	r3, [pc, #364]	; (800832c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80081c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081c2:	e1cb      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80081c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081ca:	d102      	bne.n	80081d2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 80081cc:	4b58      	ldr	r3, [pc, #352]	; (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80081ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081d0:	e1c4      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80081d2:	2300      	movs	r3, #0
 80081d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081d6:	e1c1      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80081d8:	4b56      	ldr	r3, [pc, #344]	; (8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80081da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081dc:	e1be      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80081de:	2300      	movs	r3, #0
 80081e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081e2:	bf00      	nop
 80081e4:	e1ba      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081ec:	d153      	bne.n	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80081ee:	4b4d      	ldr	r3, [pc, #308]	; (8008324 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80081f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081f2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80081f6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80081f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081fe:	d01f      	beq.n	8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8008200:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008204:	d805      	bhi.n	8008212 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00a      	beq.n	8008220 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800820a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800820e:	d00f      	beq.n	8008230 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8008210:	e03d      	b.n	800828e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8008212:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008216:	d037      	beq.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8008218:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800821c:	d018      	beq.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800821e:	e036      	b.n	800828e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008224:	4618      	mov	r0, r3
 8008226:	f000 fc57 	bl	8008ad8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800822a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800822e:	e195      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008230:	f107 0318 	add.w	r3, r7, #24
 8008234:	4618      	mov	r0, r3
 8008236:	f000 f9b7 	bl	80085a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800823e:	e18d      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008240:	f107 030c 	add.w	r3, r7, #12
 8008244:	4618      	mov	r0, r3
 8008246:	f000 fafb 	bl	8008840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800824e:	e185      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008250:	4b34      	ldr	r3, [pc, #208]	; (8008324 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008254:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008258:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800825a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800825c:	2b00      	cmp	r3, #0
 800825e:	d102      	bne.n	8008266 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008260:	4b31      	ldr	r3, [pc, #196]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008262:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008264:	e17a      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008268:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800826c:	d102      	bne.n	8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800826e:	4b2f      	ldr	r3, [pc, #188]	; (800832c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008270:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008272:	e173      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008276:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800827a:	d102      	bne.n	8008282 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 800827c:	4b2c      	ldr	r3, [pc, #176]	; (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800827e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008280:	e16c      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008282:	2300      	movs	r3, #0
 8008284:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008286:	e169      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008288:	4b2a      	ldr	r3, [pc, #168]	; (8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800828a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800828c:	e166      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800828e:	2300      	movs	r3, #0
 8008290:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008292:	bf00      	nop
 8008294:	e162      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800829c:	d15d      	bne.n	800835a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800829e:	4b21      	ldr	r3, [pc, #132]	; (8008324 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80082a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082a2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80082a6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80082a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082ae:	d01f      	beq.n	80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80082b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082b4:	d805      	bhi.n	80082c2 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d00a      	beq.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80082ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80082be:	d00f      	beq.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80082c0:	e047      	b.n	8008352 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 80082c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80082c6:	d041      	beq.n	800834c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 80082c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80082cc:	d018      	beq.n	8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80082ce:	e040      	b.n	8008352 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082d4:	4618      	mov	r0, r3
 80082d6:	f000 fbff 	bl	8008ad8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80082da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082de:	e13d      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082e0:	f107 0318 	add.w	r3, r7, #24
 80082e4:	4618      	mov	r0, r3
 80082e6:	f000 f95f 	bl	80085a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082ee:	e135      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082f0:	f107 030c 	add.w	r3, r7, #12
 80082f4:	4618      	mov	r0, r3
 80082f6:	f000 faa3 	bl	8008840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082fe:	e12d      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008300:	4b08      	ldr	r3, [pc, #32]	; (8008324 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008304:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008308:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800830a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800830c:	2b00      	cmp	r3, #0
 800830e:	d102      	bne.n	8008316 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008310:	4b05      	ldr	r3, [pc, #20]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008312:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008314:	e122      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008318:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800831c:	d10c      	bne.n	8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800831e:	4b03      	ldr	r3, [pc, #12]	; (800832c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008320:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008322:	e11b      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008324:	58024400 	.word	0x58024400
 8008328:	03d09000 	.word	0x03d09000
 800832c:	003d0900 	.word	0x003d0900
 8008330:	017d7840 	.word	0x017d7840
 8008334:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800833a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800833e:	d102      	bne.n	8008346 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8008340:	4b89      	ldr	r3, [pc, #548]	; (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008342:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008344:	e10a      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008346:	2300      	movs	r3, #0
 8008348:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800834a:	e107      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800834c:	4b87      	ldr	r3, [pc, #540]	; (800856c <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800834e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008350:	e104      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008352:	2300      	movs	r3, #0
 8008354:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008356:	bf00      	nop
 8008358:	e100      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008360:	d153      	bne.n	800840a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008362:	4b83      	ldr	r3, [pc, #524]	; (8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008366:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800836a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800836c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008372:	d01f      	beq.n	80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8008374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008378:	d805      	bhi.n	8008386 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00a      	beq.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800837e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008382:	d00f      	beq.n	80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8008384:	e03d      	b.n	8008402 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8008386:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800838a:	d037      	beq.n	80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800838c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008390:	d018      	beq.n	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8008392:	e036      	b.n	8008402 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008398:	4618      	mov	r0, r3
 800839a:	f000 fb9d 	bl	8008ad8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800839e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083a2:	e0db      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083a4:	f107 0318 	add.w	r3, r7, #24
 80083a8:	4618      	mov	r0, r3
 80083aa:	f000 f8fd 	bl	80085a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083b2:	e0d3      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083b4:	f107 030c 	add.w	r3, r7, #12
 80083b8:	4618      	mov	r0, r3
 80083ba:	f000 fa41 	bl	8008840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083c2:	e0cb      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80083c4:	4b6a      	ldr	r3, [pc, #424]	; (8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80083c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80083cc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80083ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d102      	bne.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80083d4:	4b67      	ldr	r3, [pc, #412]	; (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80083d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80083d8:	e0c0      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80083da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083e0:	d102      	bne.n	80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 80083e2:	4b65      	ldr	r3, [pc, #404]	; (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80083e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083e6:	e0b9      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80083e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083ee:	d102      	bne.n	80083f6 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 80083f0:	4b5d      	ldr	r3, [pc, #372]	; (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80083f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083f4:	e0b2      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80083f6:	2300      	movs	r3, #0
 80083f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083fa:	e0af      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80083fc:	4b5b      	ldr	r3, [pc, #364]	; (800856c <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 80083fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008400:	e0ac      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008402:	2300      	movs	r3, #0
 8008404:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008406:	bf00      	nop
 8008408:	e0a8      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008410:	d13d      	bne.n	800848e <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008412:	4b57      	ldr	r3, [pc, #348]	; (8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008416:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800841a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800841c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008422:	d00c      	beq.n	800843e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008424:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008428:	d011      	beq.n	800844e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800842a:	2b00      	cmp	r3, #0
 800842c:	d12b      	bne.n	8008486 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800842e:	f107 0318 	add.w	r3, r7, #24
 8008432:	4618      	mov	r0, r3
 8008434:	f000 f8b8 	bl	80085a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800843c:	e08e      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800843e:	f107 030c 	add.w	r3, r7, #12
 8008442:	4618      	mov	r0, r3
 8008444:	f000 f9fc 	bl	8008840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800844c:	e086      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800844e:	4b48      	ldr	r3, [pc, #288]	; (8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008452:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008456:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800845a:	2b00      	cmp	r3, #0
 800845c:	d102      	bne.n	8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800845e:	4b45      	ldr	r3, [pc, #276]	; (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008460:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008462:	e07b      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008466:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800846a:	d102      	bne.n	8008472 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 800846c:	4b42      	ldr	r3, [pc, #264]	; (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800846e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008470:	e074      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008474:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008478:	d102      	bne.n	8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800847a:	4b3b      	ldr	r3, [pc, #236]	; (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800847c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800847e:	e06d      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008480:	2300      	movs	r3, #0
 8008482:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008484:	e06a      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008486:	2300      	movs	r3, #0
 8008488:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800848a:	bf00      	nop
 800848c:	e066      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008494:	d11f      	bne.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008496:	4b36      	ldr	r3, [pc, #216]	; (8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800849a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800849e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80084a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d003      	beq.n	80084ae <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80084a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084aa:	d008      	beq.n	80084be <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80084ac:	e00f      	b.n	80084ce <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084b2:	4618      	mov	r0, r3
 80084b4:	f000 fb10 	bl	8008ad8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80084b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084bc:	e04e      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084be:	f107 0318 	add.w	r3, r7, #24
 80084c2:	4618      	mov	r0, r3
 80084c4:	f000 f870 	bl	80085a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80084c8:	6a3b      	ldr	r3, [r7, #32]
 80084ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084cc:	e046      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80084ce:	2300      	movs	r3, #0
 80084d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084d2:	bf00      	nop
 80084d4:	e042      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084dc:	d13c      	bne.n	8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80084de:	4b24      	ldr	r3, [pc, #144]	; (8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80084e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084e2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80084e6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80084e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084ee:	d01e      	beq.n	800852e <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 80084f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084f4:	d805      	bhi.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00d      	beq.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80084fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084fe:	d00e      	beq.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8008500:	e026      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8008502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008506:	d01d      	beq.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8008508:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800850c:	d01d      	beq.n	800854a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800850e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008512:	d014      	beq.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8008514:	e01c      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008516:	f000 f831 	bl	800857c <HAL_RCCEx_GetD3PCLK1Freq>
 800851a:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800851c:	e01e      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800851e:	f107 0318 	add.w	r3, r7, #24
 8008522:	4618      	mov	r0, r3
 8008524:	f000 f840 	bl	80085a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800852c:	e016      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800852e:	f107 030c 	add.w	r3, r7, #12
 8008532:	4618      	mov	r0, r3
 8008534:	f000 f984 	bl	8008840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800853c:	e00e      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800853e:	4b0d      	ldr	r3, [pc, #52]	; (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008540:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008542:	e00b      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8008544:	4b0c      	ldr	r3, [pc, #48]	; (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008546:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008548:	e008      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800854a:	4b07      	ldr	r3, [pc, #28]	; (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800854c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800854e:	e005      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008550:	2300      	movs	r3, #0
 8008552:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008554:	bf00      	nop
 8008556:	e001      	b.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8008558:	2300      	movs	r3, #0
 800855a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800855c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800855e:	4618      	mov	r0, r3
 8008560:	3740      	adds	r7, #64	; 0x40
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	017d7840 	.word	0x017d7840
 800856c:	00bb8000 	.word	0x00bb8000
 8008570:	58024400 	.word	0x58024400
 8008574:	03d09000 	.word	0x03d09000
 8008578:	003d0900 	.word	0x003d0900

0800857c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008580:	f7fe fe42 	bl	8007208 <HAL_RCC_GetHCLKFreq>
 8008584:	4601      	mov	r1, r0
 8008586:	4b06      	ldr	r3, [pc, #24]	; (80085a0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008588:	6a1b      	ldr	r3, [r3, #32]
 800858a:	091b      	lsrs	r3, r3, #4
 800858c:	f003 0307 	and.w	r3, r3, #7
 8008590:	4a04      	ldr	r2, [pc, #16]	; (80085a4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008592:	5cd3      	ldrb	r3, [r2, r3]
 8008594:	f003 031f 	and.w	r3, r3, #31
 8008598:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800859c:	4618      	mov	r0, r3
 800859e:	bd80      	pop	{r7, pc}
 80085a0:	58024400 	.word	0x58024400
 80085a4:	08010114 	.word	0x08010114

080085a8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b089      	sub	sp, #36	; 0x24
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80085b0:	4b9d      	ldr	r3, [pc, #628]	; (8008828 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80085b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085b4:	f003 0303 	and.w	r3, r3, #3
 80085b8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80085ba:	4b9b      	ldr	r3, [pc, #620]	; (8008828 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80085bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085be:	0b1b      	lsrs	r3, r3, #12
 80085c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085c4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80085c6:	4b98      	ldr	r3, [pc, #608]	; (8008828 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80085c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ca:	091b      	lsrs	r3, r3, #4
 80085cc:	f003 0301 	and.w	r3, r3, #1
 80085d0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80085d2:	4b95      	ldr	r3, [pc, #596]	; (8008828 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80085d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085d6:	08db      	lsrs	r3, r3, #3
 80085d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80085dc:	693a      	ldr	r2, [r7, #16]
 80085de:	fb02 f303 	mul.w	r3, r2, r3
 80085e2:	ee07 3a90 	vmov	s15, r3
 80085e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f000 810a 	beq.w	800880a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d05a      	beq.n	80086b2 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d302      	bcc.n	8008606 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8008600:	2b02      	cmp	r3, #2
 8008602:	d078      	beq.n	80086f6 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8008604:	e099      	b.n	800873a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008606:	4b88      	ldr	r3, [pc, #544]	; (8008828 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f003 0320 	and.w	r3, r3, #32
 800860e:	2b00      	cmp	r3, #0
 8008610:	d02d      	beq.n	800866e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008612:	4b85      	ldr	r3, [pc, #532]	; (8008828 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	08db      	lsrs	r3, r3, #3
 8008618:	f003 0303 	and.w	r3, r3, #3
 800861c:	4a83      	ldr	r2, [pc, #524]	; (800882c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800861e:	fa22 f303 	lsr.w	r3, r2, r3
 8008622:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	ee07 3a90 	vmov	s15, r3
 800862a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	ee07 3a90 	vmov	s15, r3
 8008634:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008638:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800863c:	4b7a      	ldr	r3, [pc, #488]	; (8008828 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800863e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008644:	ee07 3a90 	vmov	s15, r3
 8008648:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800864c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008650:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008830 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008654:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008658:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800865c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008660:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008664:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008668:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800866c:	e087      	b.n	800877e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	ee07 3a90 	vmov	s15, r3
 8008674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008678:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008834 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800867c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008680:	4b69      	ldr	r3, [pc, #420]	; (8008828 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008688:	ee07 3a90 	vmov	s15, r3
 800868c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008690:	ed97 6a03 	vldr	s12, [r7, #12]
 8008694:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008830 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008698:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800869c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086b0:	e065      	b.n	800877e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	ee07 3a90 	vmov	s15, r3
 80086b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086bc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008838 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80086c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086c4:	4b58      	ldr	r3, [pc, #352]	; (8008828 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80086c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086cc:	ee07 3a90 	vmov	s15, r3
 80086d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80086d8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008830 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80086dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086f4:	e043      	b.n	800877e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	ee07 3a90 	vmov	s15, r3
 80086fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008700:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800883c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8008704:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008708:	4b47      	ldr	r3, [pc, #284]	; (8008828 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800870a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800870c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008710:	ee07 3a90 	vmov	s15, r3
 8008714:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008718:	ed97 6a03 	vldr	s12, [r7, #12]
 800871c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008830 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008720:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008724:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008728:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800872c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008730:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008734:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008738:	e021      	b.n	800877e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	ee07 3a90 	vmov	s15, r3
 8008740:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008744:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008838 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008748:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800874c:	4b36      	ldr	r3, [pc, #216]	; (8008828 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800874e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008754:	ee07 3a90 	vmov	s15, r3
 8008758:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800875c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008760:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008830 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008764:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008768:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800876c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008770:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008774:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008778:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800877c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800877e:	4b2a      	ldr	r3, [pc, #168]	; (8008828 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008782:	0a5b      	lsrs	r3, r3, #9
 8008784:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008788:	ee07 3a90 	vmov	s15, r3
 800878c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008790:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008794:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008798:	edd7 6a07 	vldr	s13, [r7, #28]
 800879c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087a4:	ee17 2a90 	vmov	r2, s15
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80087ac:	4b1e      	ldr	r3, [pc, #120]	; (8008828 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80087ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b0:	0c1b      	lsrs	r3, r3, #16
 80087b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087b6:	ee07 3a90 	vmov	s15, r3
 80087ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80087ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087d2:	ee17 2a90 	vmov	r2, s15
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80087da:	4b13      	ldr	r3, [pc, #76]	; (8008828 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80087dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087de:	0e1b      	lsrs	r3, r3, #24
 80087e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087e4:	ee07 3a90 	vmov	s15, r3
 80087e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80087f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008800:	ee17 2a90 	vmov	r2, s15
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008808:	e008      	b.n	800881c <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	609a      	str	r2, [r3, #8]
}
 800881c:	bf00      	nop
 800881e:	3724      	adds	r7, #36	; 0x24
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr
 8008828:	58024400 	.word	0x58024400
 800882c:	03d09000 	.word	0x03d09000
 8008830:	46000000 	.word	0x46000000
 8008834:	4c742400 	.word	0x4c742400
 8008838:	4a742400 	.word	0x4a742400
 800883c:	4bbebc20 	.word	0x4bbebc20

08008840 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008840:	b480      	push	{r7}
 8008842:	b089      	sub	sp, #36	; 0x24
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008848:	4b9d      	ldr	r3, [pc, #628]	; (8008ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800884a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800884c:	f003 0303 	and.w	r3, r3, #3
 8008850:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008852:	4b9b      	ldr	r3, [pc, #620]	; (8008ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008856:	0d1b      	lsrs	r3, r3, #20
 8008858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800885c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800885e:	4b98      	ldr	r3, [pc, #608]	; (8008ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008862:	0a1b      	lsrs	r3, r3, #8
 8008864:	f003 0301 	and.w	r3, r3, #1
 8008868:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800886a:	4b95      	ldr	r3, [pc, #596]	; (8008ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800886c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800886e:	08db      	lsrs	r3, r3, #3
 8008870:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008874:	693a      	ldr	r2, [r7, #16]
 8008876:	fb02 f303 	mul.w	r3, r2, r3
 800887a:	ee07 3a90 	vmov	s15, r3
 800887e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008882:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	2b00      	cmp	r3, #0
 800888a:	f000 810a 	beq.w	8008aa2 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800888e:	69bb      	ldr	r3, [r7, #24]
 8008890:	2b01      	cmp	r3, #1
 8008892:	d05a      	beq.n	800894a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8008894:	2b01      	cmp	r3, #1
 8008896:	d302      	bcc.n	800889e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8008898:	2b02      	cmp	r3, #2
 800889a:	d078      	beq.n	800898e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800889c:	e099      	b.n	80089d2 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800889e:	4b88      	ldr	r3, [pc, #544]	; (8008ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f003 0320 	and.w	r3, r3, #32
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d02d      	beq.n	8008906 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80088aa:	4b85      	ldr	r3, [pc, #532]	; (8008ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	08db      	lsrs	r3, r3, #3
 80088b0:	f003 0303 	and.w	r3, r3, #3
 80088b4:	4a83      	ldr	r2, [pc, #524]	; (8008ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80088b6:	fa22 f303 	lsr.w	r3, r2, r3
 80088ba:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	ee07 3a90 	vmov	s15, r3
 80088c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	ee07 3a90 	vmov	s15, r3
 80088cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088d4:	4b7a      	ldr	r3, [pc, #488]	; (8008ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80088d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088dc:	ee07 3a90 	vmov	s15, r3
 80088e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80088e8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80088ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008900:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008904:	e087      	b.n	8008a16 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	ee07 3a90 	vmov	s15, r3
 800890c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008910:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008acc <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8008914:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008918:	4b69      	ldr	r3, [pc, #420]	; (8008ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800891a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800891c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008920:	ee07 3a90 	vmov	s15, r3
 8008924:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008928:	ed97 6a03 	vldr	s12, [r7, #12]
 800892c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008930:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008934:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008938:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800893c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008940:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008944:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008948:	e065      	b.n	8008a16 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	ee07 3a90 	vmov	s15, r3
 8008950:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008954:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008958:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800895c:	4b58      	ldr	r3, [pc, #352]	; (8008ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800895e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008964:	ee07 3a90 	vmov	s15, r3
 8008968:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800896c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008970:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008974:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008978:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800897c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008980:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008984:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008988:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800898c:	e043      	b.n	8008a16 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	ee07 3a90 	vmov	s15, r3
 8008994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008998:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800899c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089a0:	4b47      	ldr	r3, [pc, #284]	; (8008ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80089a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089a8:	ee07 3a90 	vmov	s15, r3
 80089ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80089b4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80089b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089d0:	e021      	b.n	8008a16 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	ee07 3a90 	vmov	s15, r3
 80089d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089dc:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80089e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089e4:	4b36      	ldr	r3, [pc, #216]	; (8008ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80089e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ec:	ee07 3a90 	vmov	s15, r3
 80089f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80089f8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80089fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a10:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a14:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008a16:	4b2a      	ldr	r3, [pc, #168]	; (8008ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a1a:	0a5b      	lsrs	r3, r3, #9
 8008a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a20:	ee07 3a90 	vmov	s15, r3
 8008a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a30:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a3c:	ee17 2a90 	vmov	r2, s15
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008a44:	4b1e      	ldr	r3, [pc, #120]	; (8008ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a48:	0c1b      	lsrs	r3, r3, #16
 8008a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a4e:	ee07 3a90 	vmov	s15, r3
 8008a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a6a:	ee17 2a90 	vmov	r2, s15
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008a72:	4b13      	ldr	r3, [pc, #76]	; (8008ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a76:	0e1b      	lsrs	r3, r3, #24
 8008a78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a7c:	ee07 3a90 	vmov	s15, r3
 8008a80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a98:	ee17 2a90 	vmov	r2, s15
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008aa0:	e008      	b.n	8008ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	609a      	str	r2, [r3, #8]
}
 8008ab4:	bf00      	nop
 8008ab6:	3724      	adds	r7, #36	; 0x24
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr
 8008ac0:	58024400 	.word	0x58024400
 8008ac4:	03d09000 	.word	0x03d09000
 8008ac8:	46000000 	.word	0x46000000
 8008acc:	4c742400 	.word	0x4c742400
 8008ad0:	4a742400 	.word	0x4a742400
 8008ad4:	4bbebc20 	.word	0x4bbebc20

08008ad8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b089      	sub	sp, #36	; 0x24
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ae0:	4b9d      	ldr	r3, [pc, #628]	; (8008d58 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ae4:	f003 0303 	and.w	r3, r3, #3
 8008ae8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008aea:	4b9b      	ldr	r3, [pc, #620]	; (8008d58 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aee:	091b      	lsrs	r3, r3, #4
 8008af0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008af4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008af6:	4b98      	ldr	r3, [pc, #608]	; (8008d58 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008afa:	f003 0301 	and.w	r3, r3, #1
 8008afe:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008b00:	4b95      	ldr	r3, [pc, #596]	; (8008d58 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b04:	08db      	lsrs	r3, r3, #3
 8008b06:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b0a:	693a      	ldr	r2, [r7, #16]
 8008b0c:	fb02 f303 	mul.w	r3, r2, r3
 8008b10:	ee07 3a90 	vmov	s15, r3
 8008b14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b18:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	f000 810a 	beq.w	8008d38 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8008b24:	69bb      	ldr	r3, [r7, #24]
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	d05a      	beq.n	8008be0 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d302      	bcc.n	8008b34 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	d078      	beq.n	8008c24 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8008b32:	e099      	b.n	8008c68 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b34:	4b88      	ldr	r3, [pc, #544]	; (8008d58 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f003 0320 	and.w	r3, r3, #32
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d02d      	beq.n	8008b9c <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b40:	4b85      	ldr	r3, [pc, #532]	; (8008d58 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	08db      	lsrs	r3, r3, #3
 8008b46:	f003 0303 	and.w	r3, r3, #3
 8008b4a:	4a84      	ldr	r2, [pc, #528]	; (8008d5c <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8008b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b50:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	ee07 3a90 	vmov	s15, r3
 8008b58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	ee07 3a90 	vmov	s15, r3
 8008b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b6a:	4b7b      	ldr	r3, [pc, #492]	; (8008d58 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b72:	ee07 3a90 	vmov	s15, r3
 8008b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b7e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008d60 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b96:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008b9a:	e087      	b.n	8008cac <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	ee07 3a90 	vmov	s15, r3
 8008ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ba6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008d64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8008baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bae:	4b6a      	ldr	r3, [pc, #424]	; (8008d58 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bb6:	ee07 3a90 	vmov	s15, r3
 8008bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bc2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008d60 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008bde:	e065      	b.n	8008cac <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	ee07 3a90 	vmov	s15, r3
 8008be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008d68 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bf2:	4b59      	ldr	r3, [pc, #356]	; (8008d58 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bfa:	ee07 3a90 	vmov	s15, r3
 8008bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c02:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c06:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008d60 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c22:	e043      	b.n	8008cac <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	ee07 3a90 	vmov	s15, r3
 8008c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c2e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008d6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c36:	4b48      	ldr	r3, [pc, #288]	; (8008d58 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c3e:	ee07 3a90 	vmov	s15, r3
 8008c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c46:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c4a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008d60 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c66:	e021      	b.n	8008cac <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	ee07 3a90 	vmov	s15, r3
 8008c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c72:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008d68 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c7a:	4b37      	ldr	r3, [pc, #220]	; (8008d58 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c82:	ee07 3a90 	vmov	s15, r3
 8008c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c8e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008d60 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ca6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008caa:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008cac:	4b2a      	ldr	r3, [pc, #168]	; (8008d58 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb0:	0a5b      	lsrs	r3, r3, #9
 8008cb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cb6:	ee07 3a90 	vmov	s15, r3
 8008cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008cc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cd2:	ee17 2a90 	vmov	r2, s15
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008cda:	4b1f      	ldr	r3, [pc, #124]	; (8008d58 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cde:	0c1b      	lsrs	r3, r3, #16
 8008ce0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ce4:	ee07 3a90 	vmov	s15, r3
 8008ce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cf0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008cf4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d00:	ee17 2a90 	vmov	r2, s15
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008d08:	4b13      	ldr	r3, [pc, #76]	; (8008d58 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d0c:	0e1b      	lsrs	r3, r3, #24
 8008d0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d12:	ee07 3a90 	vmov	s15, r3
 8008d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d22:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d2e:	ee17 2a90 	vmov	r2, s15
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008d36:	e008      	b.n	8008d4a <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2200      	movs	r2, #0
 8008d42:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	609a      	str	r2, [r3, #8]
}
 8008d4a:	bf00      	nop
 8008d4c:	3724      	adds	r7, #36	; 0x24
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop
 8008d58:	58024400 	.word	0x58024400
 8008d5c:	03d09000 	.word	0x03d09000
 8008d60:	46000000 	.word	0x46000000
 8008d64:	4c742400 	.word	0x4c742400
 8008d68:	4a742400 	.word	0x4a742400
 8008d6c:	4bbebc20 	.word	0x4bbebc20

08008d70 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1CPRE)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008d74:	f7fe f8d6 	bl	8006f24 <HAL_RCC_GetSysClockFreq>
 8008d78:	4601      	mov	r1, r0
 8008d7a:	4b08      	ldr	r3, [pc, #32]	; (8008d9c <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8008d7c:	699b      	ldr	r3, [r3, #24]
 8008d7e:	0a1b      	lsrs	r3, r3, #8
 8008d80:	f003 030f 	and.w	r3, r3, #15
 8008d84:	4a06      	ldr	r2, [pc, #24]	; (8008da0 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8008d86:	5cd3      	ldrb	r3, [r2, r3]
 8008d88:	f003 031f 	and.w	r3, r3, #31
 8008d8c:	fa21 f303 	lsr.w	r3, r1, r3
 8008d90:	4a04      	ldr	r2, [pc, #16]	; (8008da4 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8008d92:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif
  return SystemCoreClock;
 8008d94:	4b03      	ldr	r3, [pc, #12]	; (8008da4 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8008d96:	681b      	ldr	r3, [r3, #0]
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	58024400 	.word	0x58024400
 8008da0:	08010114 	.word	0x08010114
 8008da4:	24000000 	.word	0x24000000

08008da8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008db2:	2300      	movs	r3, #0
 8008db4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008db6:	4b53      	ldr	r3, [pc, #332]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dba:	f003 0303 	and.w	r3, r3, #3
 8008dbe:	2b03      	cmp	r3, #3
 8008dc0:	d101      	bne.n	8008dc6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e099      	b.n	8008efa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008dc6:	4b4f      	ldr	r3, [pc, #316]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a4e      	ldr	r2, [pc, #312]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008dcc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008dd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008dd2:	f7f8 ffdd 	bl	8001d90 <HAL_GetTick>
 8008dd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008dd8:	e008      	b.n	8008dec <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008dda:	f7f8 ffd9 	bl	8001d90 <HAL_GetTick>
 8008dde:	4602      	mov	r2, r0
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	1ad3      	subs	r3, r2, r3
 8008de4:	2b02      	cmp	r3, #2
 8008de6:	d901      	bls.n	8008dec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008de8:	2303      	movs	r3, #3
 8008dea:	e086      	b.n	8008efa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008dec:	4b45      	ldr	r3, [pc, #276]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d1f0      	bne.n	8008dda <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008df8:	4b42      	ldr	r3, [pc, #264]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dfc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	031b      	lsls	r3, r3, #12
 8008e06:	493f      	ldr	r1, [pc, #252]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	628b      	str	r3, [r1, #40]	; 0x28
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	3b01      	subs	r3, #1
 8008e12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	025b      	lsls	r3, r3, #9
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	431a      	orrs	r2, r3
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	3b01      	subs	r3, #1
 8008e28:	041b      	lsls	r3, r3, #16
 8008e2a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008e2e:	431a      	orrs	r2, r3
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	3b01      	subs	r3, #1
 8008e36:	061b      	lsls	r3, r3, #24
 8008e38:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008e3c:	4931      	ldr	r1, [pc, #196]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008e42:	4b30      	ldr	r3, [pc, #192]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e46:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	695b      	ldr	r3, [r3, #20]
 8008e4e:	492d      	ldr	r1, [pc, #180]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008e50:	4313      	orrs	r3, r2
 8008e52:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008e54:	4b2b      	ldr	r3, [pc, #172]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e58:	f023 0220 	bic.w	r2, r3, #32
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	699b      	ldr	r3, [r3, #24]
 8008e60:	4928      	ldr	r1, [pc, #160]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008e62:	4313      	orrs	r3, r2
 8008e64:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008e66:	4b27      	ldr	r3, [pc, #156]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e6a:	4a26      	ldr	r2, [pc, #152]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008e6c:	f023 0310 	bic.w	r3, r3, #16
 8008e70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008e72:	4b24      	ldr	r3, [pc, #144]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008e74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e76:	4b24      	ldr	r3, [pc, #144]	; (8008f08 <RCCEx_PLL2_Config+0x160>)
 8008e78:	4013      	ands	r3, r2
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	69d2      	ldr	r2, [r2, #28]
 8008e7e:	00d2      	lsls	r2, r2, #3
 8008e80:	4920      	ldr	r1, [pc, #128]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008e82:	4313      	orrs	r3, r2
 8008e84:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008e86:	4b1f      	ldr	r3, [pc, #124]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e8a:	4a1e      	ldr	r2, [pc, #120]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008e8c:	f043 0310 	orr.w	r3, r3, #16
 8008e90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d106      	bne.n	8008ea6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008e98:	4b1a      	ldr	r3, [pc, #104]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e9c:	4a19      	ldr	r2, [pc, #100]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008e9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ea2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008ea4:	e00f      	b.n	8008ec6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d106      	bne.n	8008eba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008eac:	4b15      	ldr	r3, [pc, #84]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb0:	4a14      	ldr	r2, [pc, #80]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008eb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008eb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008eb8:	e005      	b.n	8008ec6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008eba:	4b12      	ldr	r3, [pc, #72]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ebe:	4a11      	ldr	r2, [pc, #68]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008ec0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008ec4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008ec6:	4b0f      	ldr	r3, [pc, #60]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a0e      	ldr	r2, [pc, #56]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008ecc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008ed0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ed2:	f7f8 ff5d 	bl	8001d90 <HAL_GetTick>
 8008ed6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008ed8:	e008      	b.n	8008eec <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008eda:	f7f8 ff59 	bl	8001d90 <HAL_GetTick>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	1ad3      	subs	r3, r2, r3
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	d901      	bls.n	8008eec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008ee8:	2303      	movs	r3, #3
 8008eea:	e006      	b.n	8008efa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008eec:	4b05      	ldr	r3, [pc, #20]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d0f0      	beq.n	8008eda <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3710      	adds	r7, #16
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	58024400 	.word	0x58024400
 8008f08:	ffff0007 	.word	0xffff0007

08008f0c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008f16:	2300      	movs	r3, #0
 8008f18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008f1a:	4b53      	ldr	r3, [pc, #332]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8008f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f1e:	f003 0303 	and.w	r3, r3, #3
 8008f22:	2b03      	cmp	r3, #3
 8008f24:	d101      	bne.n	8008f2a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	e099      	b.n	800905e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008f2a:	4b4f      	ldr	r3, [pc, #316]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a4e      	ldr	r2, [pc, #312]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8008f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f36:	f7f8 ff2b 	bl	8001d90 <HAL_GetTick>
 8008f3a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008f3c:	e008      	b.n	8008f50 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008f3e:	f7f8 ff27 	bl	8001d90 <HAL_GetTick>
 8008f42:	4602      	mov	r2, r0
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	1ad3      	subs	r3, r2, r3
 8008f48:	2b02      	cmp	r3, #2
 8008f4a:	d901      	bls.n	8008f50 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008f4c:	2303      	movs	r3, #3
 8008f4e:	e086      	b.n	800905e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008f50:	4b45      	ldr	r3, [pc, #276]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d1f0      	bne.n	8008f3e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008f5c:	4b42      	ldr	r3, [pc, #264]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8008f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f60:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	051b      	lsls	r3, r3, #20
 8008f6a:	493f      	ldr	r1, [pc, #252]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	628b      	str	r3, [r1, #40]	; 0x28
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	3b01      	subs	r3, #1
 8008f76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	689b      	ldr	r3, [r3, #8]
 8008f7e:	3b01      	subs	r3, #1
 8008f80:	025b      	lsls	r3, r3, #9
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	431a      	orrs	r2, r3
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	041b      	lsls	r3, r3, #16
 8008f8e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008f92:	431a      	orrs	r2, r3
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	691b      	ldr	r3, [r3, #16]
 8008f98:	3b01      	subs	r3, #1
 8008f9a:	061b      	lsls	r3, r3, #24
 8008f9c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008fa0:	4931      	ldr	r1, [pc, #196]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008fa6:	4b30      	ldr	r3, [pc, #192]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8008fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008faa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	695b      	ldr	r3, [r3, #20]
 8008fb2:	492d      	ldr	r1, [pc, #180]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008fb8:	4b2b      	ldr	r3, [pc, #172]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8008fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fbc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	699b      	ldr	r3, [r3, #24]
 8008fc4:	4928      	ldr	r1, [pc, #160]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008fca:	4b27      	ldr	r3, [pc, #156]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8008fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fce:	4a26      	ldr	r2, [pc, #152]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8008fd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fd4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008fd6:	4b24      	ldr	r3, [pc, #144]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8008fd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fda:	4b24      	ldr	r3, [pc, #144]	; (800906c <RCCEx_PLL3_Config+0x160>)
 8008fdc:	4013      	ands	r3, r2
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	69d2      	ldr	r2, [r2, #28]
 8008fe2:	00d2      	lsls	r2, r2, #3
 8008fe4:	4920      	ldr	r1, [pc, #128]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008fea:	4b1f      	ldr	r3, [pc, #124]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8008fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fee:	4a1e      	ldr	r2, [pc, #120]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8008ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ff4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d106      	bne.n	800900a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008ffc:	4b1a      	ldr	r3, [pc, #104]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8008ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009000:	4a19      	ldr	r2, [pc, #100]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8009002:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009006:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009008:	e00f      	b.n	800902a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	2b01      	cmp	r3, #1
 800900e:	d106      	bne.n	800901e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009010:	4b15      	ldr	r3, [pc, #84]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8009012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009014:	4a14      	ldr	r2, [pc, #80]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8009016:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800901a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800901c:	e005      	b.n	800902a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800901e:	4b12      	ldr	r3, [pc, #72]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8009020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009022:	4a11      	ldr	r2, [pc, #68]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8009024:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009028:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800902a:	4b0f      	ldr	r3, [pc, #60]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a0e      	ldr	r2, [pc, #56]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8009030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009034:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009036:	f7f8 feab 	bl	8001d90 <HAL_GetTick>
 800903a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800903c:	e008      	b.n	8009050 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800903e:	f7f8 fea7 	bl	8001d90 <HAL_GetTick>
 8009042:	4602      	mov	r2, r0
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	1ad3      	subs	r3, r2, r3
 8009048:	2b02      	cmp	r3, #2
 800904a:	d901      	bls.n	8009050 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800904c:	2303      	movs	r3, #3
 800904e:	e006      	b.n	800905e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009050:	4b05      	ldr	r3, [pc, #20]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009058:	2b00      	cmp	r3, #0
 800905a:	d0f0      	beq.n	800903e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800905c:	7bfb      	ldrb	r3, [r7, #15]
}
 800905e:	4618      	mov	r0, r3
 8009060:	3710      	adds	r7, #16
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	58024400 	.word	0x58024400
 800906c:	ffff0007 	.word	0xffff0007

08009070 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009078:	2301      	movs	r3, #1
 800907a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2b00      	cmp	r3, #0
 8009080:	f000 808a 	beq.w	8009198 <HAL_RTC_Init+0x128>
  {
    status = HAL_OK;
 8009084:	2300      	movs	r3, #0
 8009086:	73fb      	strb	r3, [r7, #15]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800908e:	b2db      	uxtb	r3, r3
 8009090:	2b00      	cmp	r3, #0
 8009092:	d106      	bne.n	80090a2 <HAL_RTC_Init+0x32>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f7f8 facf 	bl	8001640 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2202      	movs	r2, #2
 80090a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	22ca      	movs	r2, #202	; 0xca
 80090b0:	625a      	str	r2, [r3, #36]	; 0x24
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2253      	movs	r2, #83	; 0x53
 80090b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 f89a 	bl	80091f4 <RTC_EnterInitMode>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d00a      	beq.n	80090dc <HAL_RTC_Init+0x6c>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	22ff      	movs	r2, #255	; 0xff
 80090cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2204      	movs	r2, #4
 80090d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 80090d6:	2301      	movs	r3, #1
 80090d8:	73fb      	strb	r3, [r7, #15]
 80090da:	e05d      	b.n	8009198 <HAL_RTC_Init+0x128>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	6899      	ldr	r1, [r3, #8]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	4b2f      	ldr	r3, [pc, #188]	; (80091a4 <HAL_RTC_Init+0x134>)
 80090e8:	400b      	ands	r3, r1
 80090ea:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	6899      	ldr	r1, [r3, #8]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	685a      	ldr	r2, [r3, #4]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	691b      	ldr	r3, [r3, #16]
 80090fa:	431a      	orrs	r2, r3
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	699b      	ldr	r3, [r3, #24]
 8009100:	431a      	orrs	r2, r3
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	430a      	orrs	r2, r1
 8009108:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	0419      	lsls	r1, r3, #16
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	68da      	ldr	r2, [r3, #12]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	430a      	orrs	r2, r1
 800911a:	611a      	str	r2, [r3, #16]
      /* Exit Initialization mode */
#if defined(RTC_ICSR_INIT)
      CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
#endif /* RTC_ICSR_INIT */
#if defined(RTC_ISR_INIT)
      CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	68da      	ldr	r2, [r3, #12]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800912a:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_INIT */

      /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	f003 0320 	and.w	r3, r3, #32
 8009136:	2b00      	cmp	r3, #0
 8009138:	d10f      	bne.n	800915a <HAL_RTC_Init+0xea>
      {
        if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 f834 	bl	80091a8 <HAL_RTC_WaitForSynchro>
 8009140:	4603      	mov	r3, r0
 8009142:	2b00      	cmp	r3, #0
 8009144:	d009      	beq.n	800915a <HAL_RTC_Init+0xea>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	22ff      	movs	r2, #255	; 0xff
 800914c:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2204      	movs	r2, #4
 8009152:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          status = HAL_ERROR;
 8009156:	2301      	movs	r3, #1
 8009158:	73fb      	strb	r3, [r7, #15]
        }
      }

      if(status == HAL_OK)
 800915a:	7bfb      	ldrb	r3, [r7, #15]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d11b      	bne.n	8009198 <HAL_RTC_Init+0x128>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f022 0203 	bic.w	r2, r2, #3
 800916e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	69da      	ldr	r2, [r3, #28]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	695b      	ldr	r3, [r3, #20]
 800917e:	431a      	orrs	r2, r3
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	430a      	orrs	r2, r1
 8009186:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	22ff      	movs	r2, #255	; 0xff
 800918e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2201      	movs	r2, #1
 8009194:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  /* return status */
  return status;
 8009198:	7bfb      	ldrb	r3, [r7, #15]
}
 800919a:	4618      	mov	r0, r3
 800919c:	3710      	adds	r7, #16
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	ff8fffbf 	.word	0xff8fffbf

080091a8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	68da      	ldr	r2, [r3, #12]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80091be:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 80091c0:	f7f8 fde6 	bl	8001d90 <HAL_GetTick>
 80091c4:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80091c6:	e009      	b.n	80091dc <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80091c8:	f7f8 fde2 	bl	8001d90 <HAL_GetTick>
 80091cc:	4602      	mov	r2, r0
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	1ad3      	subs	r3, r2, r3
 80091d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091d6:	d901      	bls.n	80091dc <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 80091d8:	2303      	movs	r3, #3
 80091da:	e007      	b.n	80091ec <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	f003 0320 	and.w	r3, r3, #32
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d0ee      	beq.n	80091c8 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 80091ea:	2300      	movs	r3, #0
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3710      	adds	r7, #16
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	68db      	ldr	r3, [r3, #12]
 8009202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009206:	2b00      	cmp	r3, #0
 8009208:	d119      	bne.n	800923e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f04f 32ff 	mov.w	r2, #4294967295
 8009212:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009214:	f7f8 fdbc 	bl	8001d90 <HAL_GetTick>
 8009218:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800921a:	e009      	b.n	8009230 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800921c:	f7f8 fdb8 	bl	8001d90 <HAL_GetTick>
 8009220:	4602      	mov	r2, r0
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	1ad3      	subs	r3, r2, r3
 8009226:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800922a:	d901      	bls.n	8009230 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800922c:	2303      	movs	r3, #3
 800922e:	e007      	b.n	8009240 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800923a:	2b00      	cmp	r3, #0
 800923c:	d0ee      	beq.n	800921c <RTC_EnterInitMode+0x28>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return HAL_OK;
 800923e:	2300      	movs	r3, #0
}
 8009240:	4618      	mov	r0, r3
 8009242:	3710      	adds	r7, #16
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8009250:	2300      	movs	r3, #0
 8009252:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d101      	bne.n	800925e <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800925a:	2301      	movs	r3, #1
 800925c:	e0e2      	b.n	8009424 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2200      	movs	r2, #0
 8009262:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a70      	ldr	r2, [pc, #448]	; (800942c <HAL_SPI_Init+0x1e4>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d00f      	beq.n	800928e <HAL_SPI_Init+0x46>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a6f      	ldr	r2, [pc, #444]	; (8009430 <HAL_SPI_Init+0x1e8>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d00a      	beq.n	800928e <HAL_SPI_Init+0x46>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a6d      	ldr	r2, [pc, #436]	; (8009434 <HAL_SPI_Init+0x1ec>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d005      	beq.n	800928e <HAL_SPI_Init+0x46>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	68db      	ldr	r3, [r3, #12]
 8009286:	2b0f      	cmp	r3, #15
 8009288:	d901      	bls.n	800928e <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800928a:	2301      	movs	r3, #1
 800928c:	e0ca      	b.n	8009424 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 f8d2 	bl	8009438 <SPI_GetPacketSize>
 8009294:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a64      	ldr	r2, [pc, #400]	; (800942c <HAL_SPI_Init+0x1e4>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d00c      	beq.n	80092ba <HAL_SPI_Init+0x72>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a62      	ldr	r2, [pc, #392]	; (8009430 <HAL_SPI_Init+0x1e8>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d007      	beq.n	80092ba <HAL_SPI_Init+0x72>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a61      	ldr	r2, [pc, #388]	; (8009434 <HAL_SPI_Init+0x1ec>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d002      	beq.n	80092ba <HAL_SPI_Init+0x72>
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	2b08      	cmp	r3, #8
 80092b8:	d811      	bhi.n	80092de <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80092be:	4a5b      	ldr	r2, [pc, #364]	; (800942c <HAL_SPI_Init+0x1e4>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d009      	beq.n	80092d8 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a59      	ldr	r2, [pc, #356]	; (8009430 <HAL_SPI_Init+0x1e8>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d004      	beq.n	80092d8 <HAL_SPI_Init+0x90>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a58      	ldr	r2, [pc, #352]	; (8009434 <HAL_SPI_Init+0x1ec>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d104      	bne.n	80092e2 <HAL_SPI_Init+0x9a>
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	2b10      	cmp	r3, #16
 80092dc:	d901      	bls.n	80092e2 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 80092de:	2301      	movs	r3, #1
 80092e0:	e0a0      	b.n	8009424 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d106      	bne.n	80092fc <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f7f8 f9bc 	bl	8001674 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2202      	movs	r2, #2
 8009300:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f022 0201 	bic.w	r2, r2, #1
 8009312:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	699b      	ldr	r3, [r3, #24]
 8009318:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800931c:	d110      	bne.n	8009340 <HAL_SPI_Init+0xf8>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009326:	d10b      	bne.n	8009340 <HAL_SPI_Init+0xf8>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800932c:	2b00      	cmp	r3, #0
 800932e:	d107      	bne.n	8009340 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800933e:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	69da      	ldr	r2, [r3, #28]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009348:	431a      	orrs	r2, r3
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	431a      	orrs	r2, r3
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009352:	ea42 0103 	orr.w	r1, r2, r3
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	68da      	ldr	r2, [r3, #12]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	430a      	orrs	r2, r1
 8009360:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800936a:	431a      	orrs	r2, r3
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009370:	431a      	orrs	r2, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	699b      	ldr	r3, [r3, #24]
 8009376:	431a      	orrs	r2, r3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	691b      	ldr	r3, [r3, #16]
 800937c:	431a      	orrs	r2, r3
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	695b      	ldr	r3, [r3, #20]
 8009382:	431a      	orrs	r2, r3
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6a1b      	ldr	r3, [r3, #32]
 8009388:	431a      	orrs	r2, r3
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	431a      	orrs	r2, r3
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009394:	431a      	orrs	r2, r3
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	431a      	orrs	r2, r3
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093a0:	ea42 0103 	orr.w	r1, r2, r3
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	430a      	orrs	r2, r1
 80093ae:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d113      	bne.n	80093e0 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	689b      	ldr	r3, [r3, #8]
 80093be:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093ca:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	689b      	ldr	r3, [r3, #8]
 80093d2:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80093de:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f022 0201 	bic.w	r2, r2, #1
 80093ee:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d00a      	beq.n	8009412 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	430a      	orrs	r2, r1
 8009410:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2201      	movs	r2, #1
 800941e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009422:	2300      	movs	r3, #0
}
 8009424:	4618      	mov	r0, r3
 8009426:	3710      	adds	r7, #16
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}
 800942c:	40013000 	.word	0x40013000
 8009430:	40003800 	.word	0x40003800
 8009434:	40003c00 	.word	0x40003c00

08009438 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009438:	b480      	push	{r7}
 800943a:	b085      	sub	sp, #20
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009444:	095b      	lsrs	r3, r3, #5
 8009446:	3301      	adds	r3, #1
 8009448:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	3301      	adds	r3, #1
 8009450:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	3307      	adds	r3, #7
 8009456:	08db      	lsrs	r3, r3, #3
 8009458:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	68fa      	ldr	r2, [r7, #12]
 800945e:	fb02 f303 	mul.w	r3, r2, r3
}
 8009462:	4618      	mov	r0, r3
 8009464:	3714      	adds	r7, #20
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr

0800946e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800946e:	b580      	push	{r7, lr}
 8009470:	b082      	sub	sp, #8
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d101      	bne.n	8009480 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800947c:	2301      	movs	r3, #1
 800947e:	e01d      	b.n	80094bc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009486:	b2db      	uxtb	r3, r3
 8009488:	2b00      	cmp	r3, #0
 800948a:	d106      	bne.n	800949a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2200      	movs	r2, #0
 8009490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f7f8 f9e1 	bl	800185c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2202      	movs	r2, #2
 800949e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	3304      	adds	r3, #4
 80094aa:	4619      	mov	r1, r3
 80094ac:	4610      	mov	r0, r2
 80094ae:	f000 f921 	bl	80096f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2201      	movs	r2, #1
 80094b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80094ba:	2300      	movs	r3, #0
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3708      	adds	r7, #8
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	60f8      	str	r0, [r7, #12]
 80094cc:	60b9      	str	r1, [r7, #8]
 80094ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d101      	bne.n	80094de <HAL_TIM_PWM_ConfigChannel+0x1a>
 80094da:	2302      	movs	r3, #2
 80094dc:	e105      	b.n	80096ea <HAL_TIM_PWM_ConfigChannel+0x226>
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2201      	movs	r2, #1
 80094e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2202      	movs	r2, #2
 80094ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2b14      	cmp	r3, #20
 80094f2:	f200 80f0 	bhi.w	80096d6 <HAL_TIM_PWM_ConfigChannel+0x212>
 80094f6:	a201      	add	r2, pc, #4	; (adr r2, 80094fc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80094f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094fc:	08009551 	.word	0x08009551
 8009500:	080096d7 	.word	0x080096d7
 8009504:	080096d7 	.word	0x080096d7
 8009508:	080096d7 	.word	0x080096d7
 800950c:	08009591 	.word	0x08009591
 8009510:	080096d7 	.word	0x080096d7
 8009514:	080096d7 	.word	0x080096d7
 8009518:	080096d7 	.word	0x080096d7
 800951c:	080095d3 	.word	0x080095d3
 8009520:	080096d7 	.word	0x080096d7
 8009524:	080096d7 	.word	0x080096d7
 8009528:	080096d7 	.word	0x080096d7
 800952c:	08009613 	.word	0x08009613
 8009530:	080096d7 	.word	0x080096d7
 8009534:	080096d7 	.word	0x080096d7
 8009538:	080096d7 	.word	0x080096d7
 800953c:	08009655 	.word	0x08009655
 8009540:	080096d7 	.word	0x080096d7
 8009544:	080096d7 	.word	0x080096d7
 8009548:	080096d7 	.word	0x080096d7
 800954c:	08009695 	.word	0x08009695
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	68b9      	ldr	r1, [r7, #8]
 8009556:	4618      	mov	r0, r3
 8009558:	f000 f966 	bl	8009828 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	699a      	ldr	r2, [r3, #24]
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f042 0208 	orr.w	r2, r2, #8
 800956a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	699a      	ldr	r2, [r3, #24]
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f022 0204 	bic.w	r2, r2, #4
 800957a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	6999      	ldr	r1, [r3, #24]
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	691a      	ldr	r2, [r3, #16]
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	430a      	orrs	r2, r1
 800958c:	619a      	str	r2, [r3, #24]
      break;
 800958e:	e0a3      	b.n	80096d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	68b9      	ldr	r1, [r7, #8]
 8009596:	4618      	mov	r0, r3
 8009598:	f000 f9d6 	bl	8009948 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	699a      	ldr	r2, [r3, #24]
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80095aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	699a      	ldr	r2, [r3, #24]
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	6999      	ldr	r1, [r3, #24]
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	691b      	ldr	r3, [r3, #16]
 80095c6:	021a      	lsls	r2, r3, #8
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	430a      	orrs	r2, r1
 80095ce:	619a      	str	r2, [r3, #24]
      break;
 80095d0:	e082      	b.n	80096d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	68b9      	ldr	r1, [r7, #8]
 80095d8:	4618      	mov	r0, r3
 80095da:	f000 fa3f 	bl	8009a5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	69da      	ldr	r2, [r3, #28]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f042 0208 	orr.w	r2, r2, #8
 80095ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	69da      	ldr	r2, [r3, #28]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f022 0204 	bic.w	r2, r2, #4
 80095fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	69d9      	ldr	r1, [r3, #28]
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	691a      	ldr	r2, [r3, #16]
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	430a      	orrs	r2, r1
 800960e:	61da      	str	r2, [r3, #28]
      break;
 8009610:	e062      	b.n	80096d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	68b9      	ldr	r1, [r7, #8]
 8009618:	4618      	mov	r0, r3
 800961a:	f000 faa5 	bl	8009b68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	69da      	ldr	r2, [r3, #28]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800962c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	69da      	ldr	r2, [r3, #28]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800963c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	69d9      	ldr	r1, [r3, #28]
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	691b      	ldr	r3, [r3, #16]
 8009648:	021a      	lsls	r2, r3, #8
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	430a      	orrs	r2, r1
 8009650:	61da      	str	r2, [r3, #28]
      break;
 8009652:	e041      	b.n	80096d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	68b9      	ldr	r1, [r7, #8]
 800965a:	4618      	mov	r0, r3
 800965c:	f000 faec 	bl	8009c38 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f042 0208 	orr.w	r2, r2, #8
 800966e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f022 0204 	bic.w	r2, r2, #4
 800967e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	691a      	ldr	r2, [r3, #16]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	430a      	orrs	r2, r1
 8009690:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009692:	e021      	b.n	80096d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	68b9      	ldr	r1, [r7, #8]
 800969a:	4618      	mov	r0, r3
 800969c:	f000 fb2e 	bl	8009cfc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	691b      	ldr	r3, [r3, #16]
 80096ca:	021a      	lsls	r2, r3, #8
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	430a      	orrs	r2, r1
 80096d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80096d4:	e000      	b.n	80096d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80096d6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2201      	movs	r2, #1
 80096dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096e8:	2300      	movs	r3, #0
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3710      	adds	r7, #16
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	bf00      	nop

080096f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b085      	sub	sp, #20
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	4a40      	ldr	r2, [pc, #256]	; (8009808 <TIM_Base_SetConfig+0x114>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d013      	beq.n	8009734 <TIM_Base_SetConfig+0x40>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009712:	d00f      	beq.n	8009734 <TIM_Base_SetConfig+0x40>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	4a3d      	ldr	r2, [pc, #244]	; (800980c <TIM_Base_SetConfig+0x118>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d00b      	beq.n	8009734 <TIM_Base_SetConfig+0x40>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	4a3c      	ldr	r2, [pc, #240]	; (8009810 <TIM_Base_SetConfig+0x11c>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d007      	beq.n	8009734 <TIM_Base_SetConfig+0x40>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	4a3b      	ldr	r2, [pc, #236]	; (8009814 <TIM_Base_SetConfig+0x120>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d003      	beq.n	8009734 <TIM_Base_SetConfig+0x40>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	4a3a      	ldr	r2, [pc, #232]	; (8009818 <TIM_Base_SetConfig+0x124>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d108      	bne.n	8009746 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800973a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	4313      	orrs	r3, r2
 8009744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	4a2f      	ldr	r2, [pc, #188]	; (8009808 <TIM_Base_SetConfig+0x114>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d01f      	beq.n	800978e <TIM_Base_SetConfig+0x9a>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009754:	d01b      	beq.n	800978e <TIM_Base_SetConfig+0x9a>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	4a2c      	ldr	r2, [pc, #176]	; (800980c <TIM_Base_SetConfig+0x118>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d017      	beq.n	800978e <TIM_Base_SetConfig+0x9a>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	4a2b      	ldr	r2, [pc, #172]	; (8009810 <TIM_Base_SetConfig+0x11c>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d013      	beq.n	800978e <TIM_Base_SetConfig+0x9a>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	4a2a      	ldr	r2, [pc, #168]	; (8009814 <TIM_Base_SetConfig+0x120>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d00f      	beq.n	800978e <TIM_Base_SetConfig+0x9a>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	4a29      	ldr	r2, [pc, #164]	; (8009818 <TIM_Base_SetConfig+0x124>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d00b      	beq.n	800978e <TIM_Base_SetConfig+0x9a>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	4a28      	ldr	r2, [pc, #160]	; (800981c <TIM_Base_SetConfig+0x128>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d007      	beq.n	800978e <TIM_Base_SetConfig+0x9a>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	4a27      	ldr	r2, [pc, #156]	; (8009820 <TIM_Base_SetConfig+0x12c>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d003      	beq.n	800978e <TIM_Base_SetConfig+0x9a>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	4a26      	ldr	r2, [pc, #152]	; (8009824 <TIM_Base_SetConfig+0x130>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d108      	bne.n	80097a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009794:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	68fa      	ldr	r2, [r7, #12]
 800979c:	4313      	orrs	r3, r2
 800979e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	695b      	ldr	r3, [r3, #20]
 80097aa:	4313      	orrs	r3, r2
 80097ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	68fa      	ldr	r2, [r7, #12]
 80097b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	689a      	ldr	r2, [r3, #8]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	4a10      	ldr	r2, [pc, #64]	; (8009808 <TIM_Base_SetConfig+0x114>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d00f      	beq.n	80097ec <TIM_Base_SetConfig+0xf8>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	4a12      	ldr	r2, [pc, #72]	; (8009818 <TIM_Base_SetConfig+0x124>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d00b      	beq.n	80097ec <TIM_Base_SetConfig+0xf8>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	4a11      	ldr	r2, [pc, #68]	; (800981c <TIM_Base_SetConfig+0x128>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d007      	beq.n	80097ec <TIM_Base_SetConfig+0xf8>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	4a10      	ldr	r2, [pc, #64]	; (8009820 <TIM_Base_SetConfig+0x12c>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d003      	beq.n	80097ec <TIM_Base_SetConfig+0xf8>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	4a0f      	ldr	r2, [pc, #60]	; (8009824 <TIM_Base_SetConfig+0x130>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d103      	bne.n	80097f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	691a      	ldr	r2, [r3, #16]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2201      	movs	r2, #1
 80097f8:	615a      	str	r2, [r3, #20]
}
 80097fa:	bf00      	nop
 80097fc:	3714      	adds	r7, #20
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr
 8009806:	bf00      	nop
 8009808:	40010000 	.word	0x40010000
 800980c:	40000400 	.word	0x40000400
 8009810:	40000800 	.word	0x40000800
 8009814:	40000c00 	.word	0x40000c00
 8009818:	40010400 	.word	0x40010400
 800981c:	40014000 	.word	0x40014000
 8009820:	40014400 	.word	0x40014400
 8009824:	40014800 	.word	0x40014800

08009828 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009828:	b480      	push	{r7}
 800982a:	b087      	sub	sp, #28
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6a1b      	ldr	r3, [r3, #32]
 8009836:	f023 0201 	bic.w	r2, r3, #1
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6a1b      	ldr	r3, [r3, #32]
 8009842:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	699b      	ldr	r3, [r3, #24]
 800984e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009850:	68fa      	ldr	r2, [r7, #12]
 8009852:	4b37      	ldr	r3, [pc, #220]	; (8009930 <TIM_OC1_SetConfig+0x108>)
 8009854:	4013      	ands	r3, r2
 8009856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f023 0303 	bic.w	r3, r3, #3
 800985e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	68fa      	ldr	r2, [r7, #12]
 8009866:	4313      	orrs	r3, r2
 8009868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	f023 0302 	bic.w	r3, r3, #2
 8009870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	697a      	ldr	r2, [r7, #20]
 8009878:	4313      	orrs	r3, r2
 800987a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	4a2d      	ldr	r2, [pc, #180]	; (8009934 <TIM_OC1_SetConfig+0x10c>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d00f      	beq.n	80098a4 <TIM_OC1_SetConfig+0x7c>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	4a2c      	ldr	r2, [pc, #176]	; (8009938 <TIM_OC1_SetConfig+0x110>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d00b      	beq.n	80098a4 <TIM_OC1_SetConfig+0x7c>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	4a2b      	ldr	r2, [pc, #172]	; (800993c <TIM_OC1_SetConfig+0x114>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d007      	beq.n	80098a4 <TIM_OC1_SetConfig+0x7c>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	4a2a      	ldr	r2, [pc, #168]	; (8009940 <TIM_OC1_SetConfig+0x118>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d003      	beq.n	80098a4 <TIM_OC1_SetConfig+0x7c>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	4a29      	ldr	r2, [pc, #164]	; (8009944 <TIM_OC1_SetConfig+0x11c>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d10c      	bne.n	80098be <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	f023 0308 	bic.w	r3, r3, #8
 80098aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	697a      	ldr	r2, [r7, #20]
 80098b2:	4313      	orrs	r3, r2
 80098b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	f023 0304 	bic.w	r3, r3, #4
 80098bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	4a1c      	ldr	r2, [pc, #112]	; (8009934 <TIM_OC1_SetConfig+0x10c>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d00f      	beq.n	80098e6 <TIM_OC1_SetConfig+0xbe>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4a1b      	ldr	r2, [pc, #108]	; (8009938 <TIM_OC1_SetConfig+0x110>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d00b      	beq.n	80098e6 <TIM_OC1_SetConfig+0xbe>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4a1a      	ldr	r2, [pc, #104]	; (800993c <TIM_OC1_SetConfig+0x114>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d007      	beq.n	80098e6 <TIM_OC1_SetConfig+0xbe>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	4a19      	ldr	r2, [pc, #100]	; (8009940 <TIM_OC1_SetConfig+0x118>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d003      	beq.n	80098e6 <TIM_OC1_SetConfig+0xbe>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	4a18      	ldr	r2, [pc, #96]	; (8009944 <TIM_OC1_SetConfig+0x11c>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d111      	bne.n	800990a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80098f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	695b      	ldr	r3, [r3, #20]
 80098fa:	693a      	ldr	r2, [r7, #16]
 80098fc:	4313      	orrs	r3, r2
 80098fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	699b      	ldr	r3, [r3, #24]
 8009904:	693a      	ldr	r2, [r7, #16]
 8009906:	4313      	orrs	r3, r2
 8009908:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	693a      	ldr	r2, [r7, #16]
 800990e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	68fa      	ldr	r2, [r7, #12]
 8009914:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	685a      	ldr	r2, [r3, #4]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	697a      	ldr	r2, [r7, #20]
 8009922:	621a      	str	r2, [r3, #32]
}
 8009924:	bf00      	nop
 8009926:	371c      	adds	r7, #28
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr
 8009930:	fffeff8f 	.word	0xfffeff8f
 8009934:	40010000 	.word	0x40010000
 8009938:	40010400 	.word	0x40010400
 800993c:	40014000 	.word	0x40014000
 8009940:	40014400 	.word	0x40014400
 8009944:	40014800 	.word	0x40014800

08009948 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009948:	b480      	push	{r7}
 800994a:	b087      	sub	sp, #28
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6a1b      	ldr	r3, [r3, #32]
 8009956:	f023 0210 	bic.w	r2, r3, #16
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6a1b      	ldr	r3, [r3, #32]
 8009962:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	699b      	ldr	r3, [r3, #24]
 800996e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009970:	68fa      	ldr	r2, [r7, #12]
 8009972:	4b34      	ldr	r3, [pc, #208]	; (8009a44 <TIM_OC2_SetConfig+0xfc>)
 8009974:	4013      	ands	r3, r2
 8009976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800997e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	021b      	lsls	r3, r3, #8
 8009986:	68fa      	ldr	r2, [r7, #12]
 8009988:	4313      	orrs	r3, r2
 800998a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	f023 0320 	bic.w	r3, r3, #32
 8009992:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	011b      	lsls	r3, r3, #4
 800999a:	697a      	ldr	r2, [r7, #20]
 800999c:	4313      	orrs	r3, r2
 800999e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	4a29      	ldr	r2, [pc, #164]	; (8009a48 <TIM_OC2_SetConfig+0x100>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d003      	beq.n	80099b0 <TIM_OC2_SetConfig+0x68>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	4a28      	ldr	r2, [pc, #160]	; (8009a4c <TIM_OC2_SetConfig+0x104>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d10d      	bne.n	80099cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	011b      	lsls	r3, r3, #4
 80099be:	697a      	ldr	r2, [r7, #20]
 80099c0:	4313      	orrs	r3, r2
 80099c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	4a1e      	ldr	r2, [pc, #120]	; (8009a48 <TIM_OC2_SetConfig+0x100>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d00f      	beq.n	80099f4 <TIM_OC2_SetConfig+0xac>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	4a1d      	ldr	r2, [pc, #116]	; (8009a4c <TIM_OC2_SetConfig+0x104>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d00b      	beq.n	80099f4 <TIM_OC2_SetConfig+0xac>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	4a1c      	ldr	r2, [pc, #112]	; (8009a50 <TIM_OC2_SetConfig+0x108>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d007      	beq.n	80099f4 <TIM_OC2_SetConfig+0xac>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	4a1b      	ldr	r2, [pc, #108]	; (8009a54 <TIM_OC2_SetConfig+0x10c>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d003      	beq.n	80099f4 <TIM_OC2_SetConfig+0xac>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	4a1a      	ldr	r2, [pc, #104]	; (8009a58 <TIM_OC2_SetConfig+0x110>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d113      	bne.n	8009a1c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80099fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009a02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	695b      	ldr	r3, [r3, #20]
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	693a      	ldr	r2, [r7, #16]
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	699b      	ldr	r3, [r3, #24]
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	693a      	ldr	r2, [r7, #16]
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	693a      	ldr	r2, [r7, #16]
 8009a20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	68fa      	ldr	r2, [r7, #12]
 8009a26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	685a      	ldr	r2, [r3, #4]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	697a      	ldr	r2, [r7, #20]
 8009a34:	621a      	str	r2, [r3, #32]
}
 8009a36:	bf00      	nop
 8009a38:	371c      	adds	r7, #28
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr
 8009a42:	bf00      	nop
 8009a44:	feff8fff 	.word	0xfeff8fff
 8009a48:	40010000 	.word	0x40010000
 8009a4c:	40010400 	.word	0x40010400
 8009a50:	40014000 	.word	0x40014000
 8009a54:	40014400 	.word	0x40014400
 8009a58:	40014800 	.word	0x40014800

08009a5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b087      	sub	sp, #28
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6a1b      	ldr	r3, [r3, #32]
 8009a6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6a1b      	ldr	r3, [r3, #32]
 8009a76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	69db      	ldr	r3, [r3, #28]
 8009a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f023 0303 	bic.w	r3, r3, #3
 8009a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	68fa      	ldr	r2, [r7, #12]
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009aa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	689b      	ldr	r3, [r3, #8]
 8009aaa:	021b      	lsls	r3, r3, #8
 8009aac:	697a      	ldr	r2, [r7, #20]
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	4a27      	ldr	r2, [pc, #156]	; (8009b54 <TIM_OC3_SetConfig+0xf8>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d003      	beq.n	8009ac2 <TIM_OC3_SetConfig+0x66>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	4a26      	ldr	r2, [pc, #152]	; (8009b58 <TIM_OC3_SetConfig+0xfc>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d10d      	bne.n	8009ade <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ac8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	68db      	ldr	r3, [r3, #12]
 8009ace:	021b      	lsls	r3, r3, #8
 8009ad0:	697a      	ldr	r2, [r7, #20]
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009adc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	4a1c      	ldr	r2, [pc, #112]	; (8009b54 <TIM_OC3_SetConfig+0xf8>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d00f      	beq.n	8009b06 <TIM_OC3_SetConfig+0xaa>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	4a1b      	ldr	r2, [pc, #108]	; (8009b58 <TIM_OC3_SetConfig+0xfc>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d00b      	beq.n	8009b06 <TIM_OC3_SetConfig+0xaa>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	4a1a      	ldr	r2, [pc, #104]	; (8009b5c <TIM_OC3_SetConfig+0x100>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d007      	beq.n	8009b06 <TIM_OC3_SetConfig+0xaa>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	4a19      	ldr	r2, [pc, #100]	; (8009b60 <TIM_OC3_SetConfig+0x104>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d003      	beq.n	8009b06 <TIM_OC3_SetConfig+0xaa>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	4a18      	ldr	r2, [pc, #96]	; (8009b64 <TIM_OC3_SetConfig+0x108>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d113      	bne.n	8009b2e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	695b      	ldr	r3, [r3, #20]
 8009b1a:	011b      	lsls	r3, r3, #4
 8009b1c:	693a      	ldr	r2, [r7, #16]
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	699b      	ldr	r3, [r3, #24]
 8009b26:	011b      	lsls	r3, r3, #4
 8009b28:	693a      	ldr	r2, [r7, #16]
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	693a      	ldr	r2, [r7, #16]
 8009b32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	68fa      	ldr	r2, [r7, #12]
 8009b38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	685a      	ldr	r2, [r3, #4]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	697a      	ldr	r2, [r7, #20]
 8009b46:	621a      	str	r2, [r3, #32]
}
 8009b48:	bf00      	nop
 8009b4a:	371c      	adds	r7, #28
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr
 8009b54:	40010000 	.word	0x40010000
 8009b58:	40010400 	.word	0x40010400
 8009b5c:	40014000 	.word	0x40014000
 8009b60:	40014400 	.word	0x40014400
 8009b64:	40014800 	.word	0x40014800

08009b68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b087      	sub	sp, #28
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6a1b      	ldr	r3, [r3, #32]
 8009b76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6a1b      	ldr	r3, [r3, #32]
 8009b82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	69db      	ldr	r3, [r3, #28]
 8009b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	021b      	lsls	r3, r3, #8
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009bb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	031b      	lsls	r3, r3, #12
 8009bba:	693a      	ldr	r2, [r7, #16]
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	4a18      	ldr	r2, [pc, #96]	; (8009c24 <TIM_OC4_SetConfig+0xbc>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d00f      	beq.n	8009be8 <TIM_OC4_SetConfig+0x80>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	4a17      	ldr	r2, [pc, #92]	; (8009c28 <TIM_OC4_SetConfig+0xc0>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d00b      	beq.n	8009be8 <TIM_OC4_SetConfig+0x80>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	4a16      	ldr	r2, [pc, #88]	; (8009c2c <TIM_OC4_SetConfig+0xc4>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d007      	beq.n	8009be8 <TIM_OC4_SetConfig+0x80>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	4a15      	ldr	r2, [pc, #84]	; (8009c30 <TIM_OC4_SetConfig+0xc8>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d003      	beq.n	8009be8 <TIM_OC4_SetConfig+0x80>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	4a14      	ldr	r2, [pc, #80]	; (8009c34 <TIM_OC4_SetConfig+0xcc>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d109      	bne.n	8009bfc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009bee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	695b      	ldr	r3, [r3, #20]
 8009bf4:	019b      	lsls	r3, r3, #6
 8009bf6:	697a      	ldr	r2, [r7, #20]
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	697a      	ldr	r2, [r7, #20]
 8009c00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	68fa      	ldr	r2, [r7, #12]
 8009c06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	685a      	ldr	r2, [r3, #4]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	693a      	ldr	r2, [r7, #16]
 8009c14:	621a      	str	r2, [r3, #32]
}
 8009c16:	bf00      	nop
 8009c18:	371c      	adds	r7, #28
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr
 8009c22:	bf00      	nop
 8009c24:	40010000 	.word	0x40010000
 8009c28:	40010400 	.word	0x40010400
 8009c2c:	40014000 	.word	0x40014000
 8009c30:	40014400 	.word	0x40014400
 8009c34:	40014800 	.word	0x40014800

08009c38 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b087      	sub	sp, #28
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6a1b      	ldr	r3, [r3, #32]
 8009c46:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6a1b      	ldr	r3, [r3, #32]
 8009c52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	68fa      	ldr	r2, [r7, #12]
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009c78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	041b      	lsls	r3, r3, #16
 8009c80:	693a      	ldr	r2, [r7, #16]
 8009c82:	4313      	orrs	r3, r2
 8009c84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	4a17      	ldr	r2, [pc, #92]	; (8009ce8 <TIM_OC5_SetConfig+0xb0>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d00f      	beq.n	8009cae <TIM_OC5_SetConfig+0x76>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	4a16      	ldr	r2, [pc, #88]	; (8009cec <TIM_OC5_SetConfig+0xb4>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d00b      	beq.n	8009cae <TIM_OC5_SetConfig+0x76>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	4a15      	ldr	r2, [pc, #84]	; (8009cf0 <TIM_OC5_SetConfig+0xb8>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d007      	beq.n	8009cae <TIM_OC5_SetConfig+0x76>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	4a14      	ldr	r2, [pc, #80]	; (8009cf4 <TIM_OC5_SetConfig+0xbc>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d003      	beq.n	8009cae <TIM_OC5_SetConfig+0x76>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	4a13      	ldr	r2, [pc, #76]	; (8009cf8 <TIM_OC5_SetConfig+0xc0>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d109      	bne.n	8009cc2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009cb4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	695b      	ldr	r3, [r3, #20]
 8009cba:	021b      	lsls	r3, r3, #8
 8009cbc:	697a      	ldr	r2, [r7, #20]
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	697a      	ldr	r2, [r7, #20]
 8009cc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	68fa      	ldr	r2, [r7, #12]
 8009ccc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	685a      	ldr	r2, [r3, #4]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	693a      	ldr	r2, [r7, #16]
 8009cda:	621a      	str	r2, [r3, #32]
}
 8009cdc:	bf00      	nop
 8009cde:	371c      	adds	r7, #28
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr
 8009ce8:	40010000 	.word	0x40010000
 8009cec:	40010400 	.word	0x40010400
 8009cf0:	40014000 	.word	0x40014000
 8009cf4:	40014400 	.word	0x40014400
 8009cf8:	40014800 	.word	0x40014800

08009cfc <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b087      	sub	sp, #28
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6a1b      	ldr	r3, [r3, #32]
 8009d0a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6a1b      	ldr	r3, [r3, #32]
 8009d16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	021b      	lsls	r3, r3, #8
 8009d32:	68fa      	ldr	r2, [r7, #12]
 8009d34:	4313      	orrs	r3, r2
 8009d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009d3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	689b      	ldr	r3, [r3, #8]
 8009d44:	051b      	lsls	r3, r3, #20
 8009d46:	693a      	ldr	r2, [r7, #16]
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	4a18      	ldr	r2, [pc, #96]	; (8009db0 <TIM_OC6_SetConfig+0xb4>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d00f      	beq.n	8009d74 <TIM_OC6_SetConfig+0x78>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	4a17      	ldr	r2, [pc, #92]	; (8009db4 <TIM_OC6_SetConfig+0xb8>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d00b      	beq.n	8009d74 <TIM_OC6_SetConfig+0x78>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	4a16      	ldr	r2, [pc, #88]	; (8009db8 <TIM_OC6_SetConfig+0xbc>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d007      	beq.n	8009d74 <TIM_OC6_SetConfig+0x78>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	4a15      	ldr	r2, [pc, #84]	; (8009dbc <TIM_OC6_SetConfig+0xc0>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d003      	beq.n	8009d74 <TIM_OC6_SetConfig+0x78>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	4a14      	ldr	r2, [pc, #80]	; (8009dc0 <TIM_OC6_SetConfig+0xc4>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d109      	bne.n	8009d88 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009d7a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	695b      	ldr	r3, [r3, #20]
 8009d80:	029b      	lsls	r3, r3, #10
 8009d82:	697a      	ldr	r2, [r7, #20]
 8009d84:	4313      	orrs	r3, r2
 8009d86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	697a      	ldr	r2, [r7, #20]
 8009d8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	68fa      	ldr	r2, [r7, #12]
 8009d92:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	685a      	ldr	r2, [r3, #4]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	693a      	ldr	r2, [r7, #16]
 8009da0:	621a      	str	r2, [r3, #32]
}
 8009da2:	bf00      	nop
 8009da4:	371c      	adds	r7, #28
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr
 8009dae:	bf00      	nop
 8009db0:	40010000 	.word	0x40010000
 8009db4:	40010400 	.word	0x40010400
 8009db8:	40014000 	.word	0x40014000
 8009dbc:	40014400 	.word	0x40014400
 8009dc0:	40014800 	.word	0x40014800

08009dc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b085      	sub	sp, #20
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	d101      	bne.n	8009ddc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009dd8:	2302      	movs	r3, #2
 8009dda:	e068      	b.n	8009eae <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2201      	movs	r2, #1
 8009de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2202      	movs	r2, #2
 8009de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	685b      	ldr	r3, [r3, #4]
 8009df2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4a2e      	ldr	r2, [pc, #184]	; (8009ebc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d004      	beq.n	8009e10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4a2d      	ldr	r2, [pc, #180]	; (8009ec0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d108      	bne.n	8009e22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009e16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	68fa      	ldr	r2, [r7, #12]
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	68fa      	ldr	r2, [r7, #12]
 8009e30:	4313      	orrs	r3, r2
 8009e32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	68fa      	ldr	r2, [r7, #12]
 8009e3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4a1e      	ldr	r2, [pc, #120]	; (8009ebc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d01d      	beq.n	8009e82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e4e:	d018      	beq.n	8009e82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a1b      	ldr	r2, [pc, #108]	; (8009ec4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d013      	beq.n	8009e82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4a1a      	ldr	r2, [pc, #104]	; (8009ec8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d00e      	beq.n	8009e82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a18      	ldr	r2, [pc, #96]	; (8009ecc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d009      	beq.n	8009e82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a13      	ldr	r2, [pc, #76]	; (8009ec0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d004      	beq.n	8009e82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a14      	ldr	r2, [pc, #80]	; (8009ed0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d10c      	bne.n	8009e9c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	68ba      	ldr	r2, [r7, #8]
 8009e90:	4313      	orrs	r3, r2
 8009e92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	68ba      	ldr	r2, [r7, #8]
 8009e9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009eac:	2300      	movs	r3, #0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3714      	adds	r7, #20
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr
 8009eba:	bf00      	nop
 8009ebc:	40010000 	.word	0x40010000
 8009ec0:	40010400 	.word	0x40010400
 8009ec4:	40000400 	.word	0x40000400
 8009ec8:	40000800 	.word	0x40000800
 8009ecc:	40000c00 	.word	0x40000c00
 8009ed0:	40001800 	.word	0x40001800

08009ed4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b085      	sub	sp, #20
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	d101      	bne.n	8009ef0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009eec:	2302      	movs	r3, #2
 8009eee:	e065      	b.n	8009fbc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	68db      	ldr	r3, [r3, #12]
 8009f02:	4313      	orrs	r3, r2
 8009f04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	4313      	orrs	r3, r2
 8009f12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	691b      	ldr	r3, [r3, #16]
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	695b      	ldr	r3, [r3, #20]
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f56:	4313      	orrs	r3, r2
 8009f58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	699b      	ldr	r3, [r3, #24]
 8009f64:	041b      	lsls	r3, r3, #16
 8009f66:	4313      	orrs	r3, r2
 8009f68:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4a16      	ldr	r2, [pc, #88]	; (8009fc8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d004      	beq.n	8009f7e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4a14      	ldr	r2, [pc, #80]	; (8009fcc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d115      	bne.n	8009faa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f88:	051b      	lsls	r3, r3, #20
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	69db      	ldr	r3, [r3, #28]
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	6a1b      	ldr	r3, [r3, #32]
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	68fa      	ldr	r2, [r7, #12]
 8009fb0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3714      	adds	r7, #20
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr
 8009fc8:	40010000 	.word	0x40010000
 8009fcc:	40010400 	.word	0x40010400

08009fd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b082      	sub	sp, #8
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d101      	bne.n	8009fe2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	e042      	b.n	800a068 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d106      	bne.n	8009ffa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f7f7 fcd1 	bl	800199c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2224      	movs	r2, #36	; 0x24
 8009ffe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	681a      	ldr	r2, [r3, #0]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f022 0201 	bic.w	r2, r2, #1
 800a010:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 f82c 	bl	800a070 <UART_SetConfig>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d101      	bne.n	800a022 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a01e:	2301      	movs	r3, #1
 800a020:	e022      	b.n	800a068 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a026:	2b00      	cmp	r3, #0
 800a028:	d002      	beq.n	800a030 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f002 f99e 	bl	800c36c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	685a      	ldr	r2, [r3, #4]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a03e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	689a      	ldr	r2, [r3, #8]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a04e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	681a      	ldr	r2, [r3, #0]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f042 0201 	orr.w	r2, r2, #1
 800a05e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f002 fa25 	bl	800c4b0 <UART_CheckIdleState>
 800a066:	4603      	mov	r3, r0
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3708      	adds	r7, #8
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a070:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800a074:	b090      	sub	sp, #64	; 0x40
 800a076:	af00      	add	r7, sp, #0
 800a078:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a07a:	2300      	movs	r3, #0
 800a07c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 800a07e:	2300      	movs	r3, #0
 800a080:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800a084:	2300      	movs	r3, #0
 800a086:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	689a      	ldr	r2, [r3, #8]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	691b      	ldr	r3, [r3, #16]
 800a090:	431a      	orrs	r2, r3
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	695b      	ldr	r3, [r3, #20]
 800a096:	431a      	orrs	r2, r3
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	69db      	ldr	r3, [r3, #28]
 800a09c:	4313      	orrs	r3, r2
 800a09e:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	4bc1      	ldr	r3, [pc, #772]	; (800a3b8 <UART_SetConfig+0x348>)
 800a0b2:	4013      	ands	r3, r2
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	6812      	ldr	r2, [r2, #0]
 800a0b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a0ba:	430b      	orrs	r3, r1
 800a0bc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	68da      	ldr	r2, [r3, #12]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	430a      	orrs	r2, r1
 800a0d2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	699b      	ldr	r3, [r3, #24]
 800a0d8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4ab7      	ldr	r2, [pc, #732]	; (800a3bc <UART_SetConfig+0x34c>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d004      	beq.n	800a0ee <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6a1b      	ldr	r3, [r3, #32]
 800a0e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	689a      	ldr	r2, [r3, #8]
 800a0f4:	4bb2      	ldr	r3, [pc, #712]	; (800a3c0 <UART_SetConfig+0x350>)
 800a0f6:	4013      	ands	r3, r2
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	6812      	ldr	r2, [r2, #0]
 800a0fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a0fe:	430b      	orrs	r3, r1
 800a100:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a108:	f023 010f 	bic.w	r1, r3, #15
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	430a      	orrs	r2, r1
 800a116:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4aa9      	ldr	r2, [pc, #676]	; (800a3c4 <UART_SetConfig+0x354>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d177      	bne.n	800a212 <UART_SetConfig+0x1a2>
 800a122:	4ba9      	ldr	r3, [pc, #676]	; (800a3c8 <UART_SetConfig+0x358>)
 800a124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a126:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a12a:	2b28      	cmp	r3, #40	; 0x28
 800a12c:	d86c      	bhi.n	800a208 <UART_SetConfig+0x198>
 800a12e:	a201      	add	r2, pc, #4	; (adr r2, 800a134 <UART_SetConfig+0xc4>)
 800a130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a134:	0800a1d9 	.word	0x0800a1d9
 800a138:	0800a209 	.word	0x0800a209
 800a13c:	0800a209 	.word	0x0800a209
 800a140:	0800a209 	.word	0x0800a209
 800a144:	0800a209 	.word	0x0800a209
 800a148:	0800a209 	.word	0x0800a209
 800a14c:	0800a209 	.word	0x0800a209
 800a150:	0800a209 	.word	0x0800a209
 800a154:	0800a1e1 	.word	0x0800a1e1
 800a158:	0800a209 	.word	0x0800a209
 800a15c:	0800a209 	.word	0x0800a209
 800a160:	0800a209 	.word	0x0800a209
 800a164:	0800a209 	.word	0x0800a209
 800a168:	0800a209 	.word	0x0800a209
 800a16c:	0800a209 	.word	0x0800a209
 800a170:	0800a209 	.word	0x0800a209
 800a174:	0800a1e9 	.word	0x0800a1e9
 800a178:	0800a209 	.word	0x0800a209
 800a17c:	0800a209 	.word	0x0800a209
 800a180:	0800a209 	.word	0x0800a209
 800a184:	0800a209 	.word	0x0800a209
 800a188:	0800a209 	.word	0x0800a209
 800a18c:	0800a209 	.word	0x0800a209
 800a190:	0800a209 	.word	0x0800a209
 800a194:	0800a1f1 	.word	0x0800a1f1
 800a198:	0800a209 	.word	0x0800a209
 800a19c:	0800a209 	.word	0x0800a209
 800a1a0:	0800a209 	.word	0x0800a209
 800a1a4:	0800a209 	.word	0x0800a209
 800a1a8:	0800a209 	.word	0x0800a209
 800a1ac:	0800a209 	.word	0x0800a209
 800a1b0:	0800a209 	.word	0x0800a209
 800a1b4:	0800a1f9 	.word	0x0800a1f9
 800a1b8:	0800a209 	.word	0x0800a209
 800a1bc:	0800a209 	.word	0x0800a209
 800a1c0:	0800a209 	.word	0x0800a209
 800a1c4:	0800a209 	.word	0x0800a209
 800a1c8:	0800a209 	.word	0x0800a209
 800a1cc:	0800a209 	.word	0x0800a209
 800a1d0:	0800a209 	.word	0x0800a209
 800a1d4:	0800a201 	.word	0x0800a201
 800a1d8:	2301      	movs	r3, #1
 800a1da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1de:	e233      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a1e0:	2304      	movs	r3, #4
 800a1e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1e6:	e22f      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a1e8:	2308      	movs	r3, #8
 800a1ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1ee:	e22b      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a1f0:	2310      	movs	r3, #16
 800a1f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1f6:	e227      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a1f8:	2320      	movs	r3, #32
 800a1fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1fe:	e223      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a200:	2340      	movs	r3, #64	; 0x40
 800a202:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a206:	e21f      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a208:	2380      	movs	r3, #128	; 0x80
 800a20a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a20e:	bf00      	nop
 800a210:	e21a      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4a6d      	ldr	r2, [pc, #436]	; (800a3cc <UART_SetConfig+0x35c>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d132      	bne.n	800a282 <UART_SetConfig+0x212>
 800a21c:	4b6a      	ldr	r3, [pc, #424]	; (800a3c8 <UART_SetConfig+0x358>)
 800a21e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a220:	f003 0307 	and.w	r3, r3, #7
 800a224:	2b05      	cmp	r3, #5
 800a226:	d827      	bhi.n	800a278 <UART_SetConfig+0x208>
 800a228:	a201      	add	r2, pc, #4	; (adr r2, 800a230 <UART_SetConfig+0x1c0>)
 800a22a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a22e:	bf00      	nop
 800a230:	0800a249 	.word	0x0800a249
 800a234:	0800a251 	.word	0x0800a251
 800a238:	0800a259 	.word	0x0800a259
 800a23c:	0800a261 	.word	0x0800a261
 800a240:	0800a269 	.word	0x0800a269
 800a244:	0800a271 	.word	0x0800a271
 800a248:	2300      	movs	r3, #0
 800a24a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a24e:	e1fb      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a250:	2304      	movs	r3, #4
 800a252:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a256:	e1f7      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a258:	2308      	movs	r3, #8
 800a25a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a25e:	e1f3      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a260:	2310      	movs	r3, #16
 800a262:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a266:	e1ef      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a268:	2320      	movs	r3, #32
 800a26a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a26e:	e1eb      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a270:	2340      	movs	r3, #64	; 0x40
 800a272:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a276:	e1e7      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a278:	2380      	movs	r3, #128	; 0x80
 800a27a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a27e:	bf00      	nop
 800a280:	e1e2      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4a52      	ldr	r2, [pc, #328]	; (800a3d0 <UART_SetConfig+0x360>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d132      	bne.n	800a2f2 <UART_SetConfig+0x282>
 800a28c:	4b4e      	ldr	r3, [pc, #312]	; (800a3c8 <UART_SetConfig+0x358>)
 800a28e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a290:	f003 0307 	and.w	r3, r3, #7
 800a294:	2b05      	cmp	r3, #5
 800a296:	d827      	bhi.n	800a2e8 <UART_SetConfig+0x278>
 800a298:	a201      	add	r2, pc, #4	; (adr r2, 800a2a0 <UART_SetConfig+0x230>)
 800a29a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a29e:	bf00      	nop
 800a2a0:	0800a2b9 	.word	0x0800a2b9
 800a2a4:	0800a2c1 	.word	0x0800a2c1
 800a2a8:	0800a2c9 	.word	0x0800a2c9
 800a2ac:	0800a2d1 	.word	0x0800a2d1
 800a2b0:	0800a2d9 	.word	0x0800a2d9
 800a2b4:	0800a2e1 	.word	0x0800a2e1
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2be:	e1c3      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a2c0:	2304      	movs	r3, #4
 800a2c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2c6:	e1bf      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a2c8:	2308      	movs	r3, #8
 800a2ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2ce:	e1bb      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a2d0:	2310      	movs	r3, #16
 800a2d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2d6:	e1b7      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a2d8:	2320      	movs	r3, #32
 800a2da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2de:	e1b3      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a2e0:	2340      	movs	r3, #64	; 0x40
 800a2e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2e6:	e1af      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a2e8:	2380      	movs	r3, #128	; 0x80
 800a2ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2ee:	bf00      	nop
 800a2f0:	e1aa      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4a37      	ldr	r2, [pc, #220]	; (800a3d4 <UART_SetConfig+0x364>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d132      	bne.n	800a362 <UART_SetConfig+0x2f2>
 800a2fc:	4b32      	ldr	r3, [pc, #200]	; (800a3c8 <UART_SetConfig+0x358>)
 800a2fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a300:	f003 0307 	and.w	r3, r3, #7
 800a304:	2b05      	cmp	r3, #5
 800a306:	d827      	bhi.n	800a358 <UART_SetConfig+0x2e8>
 800a308:	a201      	add	r2, pc, #4	; (adr r2, 800a310 <UART_SetConfig+0x2a0>)
 800a30a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a30e:	bf00      	nop
 800a310:	0800a329 	.word	0x0800a329
 800a314:	0800a331 	.word	0x0800a331
 800a318:	0800a339 	.word	0x0800a339
 800a31c:	0800a341 	.word	0x0800a341
 800a320:	0800a349 	.word	0x0800a349
 800a324:	0800a351 	.word	0x0800a351
 800a328:	2300      	movs	r3, #0
 800a32a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a32e:	e18b      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a330:	2304      	movs	r3, #4
 800a332:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a336:	e187      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a338:	2308      	movs	r3, #8
 800a33a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a33e:	e183      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a340:	2310      	movs	r3, #16
 800a342:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a346:	e17f      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a348:	2320      	movs	r3, #32
 800a34a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a34e:	e17b      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a350:	2340      	movs	r3, #64	; 0x40
 800a352:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a356:	e177      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a358:	2380      	movs	r3, #128	; 0x80
 800a35a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a35e:	bf00      	nop
 800a360:	e172      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a1c      	ldr	r2, [pc, #112]	; (800a3d8 <UART_SetConfig+0x368>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d144      	bne.n	800a3f6 <UART_SetConfig+0x386>
 800a36c:	4b16      	ldr	r3, [pc, #88]	; (800a3c8 <UART_SetConfig+0x358>)
 800a36e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a370:	f003 0307 	and.w	r3, r3, #7
 800a374:	2b05      	cmp	r3, #5
 800a376:	d839      	bhi.n	800a3ec <UART_SetConfig+0x37c>
 800a378:	a201      	add	r2, pc, #4	; (adr r2, 800a380 <UART_SetConfig+0x310>)
 800a37a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a37e:	bf00      	nop
 800a380:	0800a399 	.word	0x0800a399
 800a384:	0800a3a1 	.word	0x0800a3a1
 800a388:	0800a3a9 	.word	0x0800a3a9
 800a38c:	0800a3b1 	.word	0x0800a3b1
 800a390:	0800a3dd 	.word	0x0800a3dd
 800a394:	0800a3e5 	.word	0x0800a3e5
 800a398:	2300      	movs	r3, #0
 800a39a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a39e:	e153      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a3a0:	2304      	movs	r3, #4
 800a3a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3a6:	e14f      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a3a8:	2308      	movs	r3, #8
 800a3aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3ae:	e14b      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a3b0:	2310      	movs	r3, #16
 800a3b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3b6:	e147      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a3b8:	cfff69f3 	.word	0xcfff69f3
 800a3bc:	58000c00 	.word	0x58000c00
 800a3c0:	11fff4ff 	.word	0x11fff4ff
 800a3c4:	40011000 	.word	0x40011000
 800a3c8:	58024400 	.word	0x58024400
 800a3cc:	40004400 	.word	0x40004400
 800a3d0:	40004800 	.word	0x40004800
 800a3d4:	40004c00 	.word	0x40004c00
 800a3d8:	40005000 	.word	0x40005000
 800a3dc:	2320      	movs	r3, #32
 800a3de:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3e2:	e131      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a3e4:	2340      	movs	r3, #64	; 0x40
 800a3e6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3ea:	e12d      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a3ec:	2380      	movs	r3, #128	; 0x80
 800a3ee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3f2:	bf00      	nop
 800a3f4:	e128      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4ac3      	ldr	r2, [pc, #780]	; (800a708 <UART_SetConfig+0x698>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d178      	bne.n	800a4f2 <UART_SetConfig+0x482>
 800a400:	4bc2      	ldr	r3, [pc, #776]	; (800a70c <UART_SetConfig+0x69c>)
 800a402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a404:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a408:	2b28      	cmp	r3, #40	; 0x28
 800a40a:	d86d      	bhi.n	800a4e8 <UART_SetConfig+0x478>
 800a40c:	a201      	add	r2, pc, #4	; (adr r2, 800a414 <UART_SetConfig+0x3a4>)
 800a40e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a412:	bf00      	nop
 800a414:	0800a4b9 	.word	0x0800a4b9
 800a418:	0800a4e9 	.word	0x0800a4e9
 800a41c:	0800a4e9 	.word	0x0800a4e9
 800a420:	0800a4e9 	.word	0x0800a4e9
 800a424:	0800a4e9 	.word	0x0800a4e9
 800a428:	0800a4e9 	.word	0x0800a4e9
 800a42c:	0800a4e9 	.word	0x0800a4e9
 800a430:	0800a4e9 	.word	0x0800a4e9
 800a434:	0800a4c1 	.word	0x0800a4c1
 800a438:	0800a4e9 	.word	0x0800a4e9
 800a43c:	0800a4e9 	.word	0x0800a4e9
 800a440:	0800a4e9 	.word	0x0800a4e9
 800a444:	0800a4e9 	.word	0x0800a4e9
 800a448:	0800a4e9 	.word	0x0800a4e9
 800a44c:	0800a4e9 	.word	0x0800a4e9
 800a450:	0800a4e9 	.word	0x0800a4e9
 800a454:	0800a4c9 	.word	0x0800a4c9
 800a458:	0800a4e9 	.word	0x0800a4e9
 800a45c:	0800a4e9 	.word	0x0800a4e9
 800a460:	0800a4e9 	.word	0x0800a4e9
 800a464:	0800a4e9 	.word	0x0800a4e9
 800a468:	0800a4e9 	.word	0x0800a4e9
 800a46c:	0800a4e9 	.word	0x0800a4e9
 800a470:	0800a4e9 	.word	0x0800a4e9
 800a474:	0800a4d1 	.word	0x0800a4d1
 800a478:	0800a4e9 	.word	0x0800a4e9
 800a47c:	0800a4e9 	.word	0x0800a4e9
 800a480:	0800a4e9 	.word	0x0800a4e9
 800a484:	0800a4e9 	.word	0x0800a4e9
 800a488:	0800a4e9 	.word	0x0800a4e9
 800a48c:	0800a4e9 	.word	0x0800a4e9
 800a490:	0800a4e9 	.word	0x0800a4e9
 800a494:	0800a4d9 	.word	0x0800a4d9
 800a498:	0800a4e9 	.word	0x0800a4e9
 800a49c:	0800a4e9 	.word	0x0800a4e9
 800a4a0:	0800a4e9 	.word	0x0800a4e9
 800a4a4:	0800a4e9 	.word	0x0800a4e9
 800a4a8:	0800a4e9 	.word	0x0800a4e9
 800a4ac:	0800a4e9 	.word	0x0800a4e9
 800a4b0:	0800a4e9 	.word	0x0800a4e9
 800a4b4:	0800a4e1 	.word	0x0800a4e1
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4be:	e0c3      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a4c0:	2304      	movs	r3, #4
 800a4c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4c6:	e0bf      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a4c8:	2308      	movs	r3, #8
 800a4ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4ce:	e0bb      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a4d0:	2310      	movs	r3, #16
 800a4d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4d6:	e0b7      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a4d8:	2320      	movs	r3, #32
 800a4da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4de:	e0b3      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a4e0:	2340      	movs	r3, #64	; 0x40
 800a4e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4e6:	e0af      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a4e8:	2380      	movs	r3, #128	; 0x80
 800a4ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4ee:	bf00      	nop
 800a4f0:	e0aa      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	4a86      	ldr	r2, [pc, #536]	; (800a710 <UART_SetConfig+0x6a0>)
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d132      	bne.n	800a562 <UART_SetConfig+0x4f2>
 800a4fc:	4b83      	ldr	r3, [pc, #524]	; (800a70c <UART_SetConfig+0x69c>)
 800a4fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a500:	f003 0307 	and.w	r3, r3, #7
 800a504:	2b05      	cmp	r3, #5
 800a506:	d827      	bhi.n	800a558 <UART_SetConfig+0x4e8>
 800a508:	a201      	add	r2, pc, #4	; (adr r2, 800a510 <UART_SetConfig+0x4a0>)
 800a50a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a50e:	bf00      	nop
 800a510:	0800a529 	.word	0x0800a529
 800a514:	0800a531 	.word	0x0800a531
 800a518:	0800a539 	.word	0x0800a539
 800a51c:	0800a541 	.word	0x0800a541
 800a520:	0800a549 	.word	0x0800a549
 800a524:	0800a551 	.word	0x0800a551
 800a528:	2300      	movs	r3, #0
 800a52a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a52e:	e08b      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a530:	2304      	movs	r3, #4
 800a532:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a536:	e087      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a538:	2308      	movs	r3, #8
 800a53a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a53e:	e083      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a540:	2310      	movs	r3, #16
 800a542:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a546:	e07f      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a548:	2320      	movs	r3, #32
 800a54a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a54e:	e07b      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a550:	2340      	movs	r3, #64	; 0x40
 800a552:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a556:	e077      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a558:	2380      	movs	r3, #128	; 0x80
 800a55a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a55e:	bf00      	nop
 800a560:	e072      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	4a6b      	ldr	r2, [pc, #428]	; (800a714 <UART_SetConfig+0x6a4>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d132      	bne.n	800a5d2 <UART_SetConfig+0x562>
 800a56c:	4b67      	ldr	r3, [pc, #412]	; (800a70c <UART_SetConfig+0x69c>)
 800a56e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a570:	f003 0307 	and.w	r3, r3, #7
 800a574:	2b05      	cmp	r3, #5
 800a576:	d827      	bhi.n	800a5c8 <UART_SetConfig+0x558>
 800a578:	a201      	add	r2, pc, #4	; (adr r2, 800a580 <UART_SetConfig+0x510>)
 800a57a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a57e:	bf00      	nop
 800a580:	0800a599 	.word	0x0800a599
 800a584:	0800a5a1 	.word	0x0800a5a1
 800a588:	0800a5a9 	.word	0x0800a5a9
 800a58c:	0800a5b1 	.word	0x0800a5b1
 800a590:	0800a5b9 	.word	0x0800a5b9
 800a594:	0800a5c1 	.word	0x0800a5c1
 800a598:	2300      	movs	r3, #0
 800a59a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a59e:	e053      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a5a0:	2304      	movs	r3, #4
 800a5a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a5a6:	e04f      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a5a8:	2308      	movs	r3, #8
 800a5aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a5ae:	e04b      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a5b0:	2310      	movs	r3, #16
 800a5b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a5b6:	e047      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a5b8:	2320      	movs	r3, #32
 800a5ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a5be:	e043      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a5c0:	2340      	movs	r3, #64	; 0x40
 800a5c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a5c6:	e03f      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a5c8:	2380      	movs	r3, #128	; 0x80
 800a5ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a5ce:	bf00      	nop
 800a5d0:	e03a      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a50      	ldr	r2, [pc, #320]	; (800a718 <UART_SetConfig+0x6a8>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d132      	bne.n	800a642 <UART_SetConfig+0x5d2>
 800a5dc:	4b4b      	ldr	r3, [pc, #300]	; (800a70c <UART_SetConfig+0x69c>)
 800a5de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5e0:	f003 0307 	and.w	r3, r3, #7
 800a5e4:	2b05      	cmp	r3, #5
 800a5e6:	d827      	bhi.n	800a638 <UART_SetConfig+0x5c8>
 800a5e8:	a201      	add	r2, pc, #4	; (adr r2, 800a5f0 <UART_SetConfig+0x580>)
 800a5ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ee:	bf00      	nop
 800a5f0:	0800a609 	.word	0x0800a609
 800a5f4:	0800a611 	.word	0x0800a611
 800a5f8:	0800a619 	.word	0x0800a619
 800a5fc:	0800a621 	.word	0x0800a621
 800a600:	0800a629 	.word	0x0800a629
 800a604:	0800a631 	.word	0x0800a631
 800a608:	2302      	movs	r3, #2
 800a60a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a60e:	e01b      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a610:	2304      	movs	r3, #4
 800a612:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a616:	e017      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a618:	2308      	movs	r3, #8
 800a61a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a61e:	e013      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a620:	2310      	movs	r3, #16
 800a622:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a626:	e00f      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a628:	2320      	movs	r3, #32
 800a62a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a62e:	e00b      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a630:	2340      	movs	r3, #64	; 0x40
 800a632:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a636:	e007      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a638:	2380      	movs	r3, #128	; 0x80
 800a63a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a63e:	bf00      	nop
 800a640:	e002      	b.n	800a648 <UART_SetConfig+0x5d8>
 800a642:	2380      	movs	r3, #128	; 0x80
 800a644:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4a32      	ldr	r2, [pc, #200]	; (800a718 <UART_SetConfig+0x6a8>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	f040 86f7 	bne.w	800b442 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a654:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a658:	2b08      	cmp	r3, #8
 800a65a:	f000 80c0 	beq.w	800a7de <UART_SetConfig+0x76e>
 800a65e:	2b08      	cmp	r3, #8
 800a660:	dc04      	bgt.n	800a66c <UART_SetConfig+0x5fc>
 800a662:	2b02      	cmp	r3, #2
 800a664:	d00c      	beq.n	800a680 <UART_SetConfig+0x610>
 800a666:	2b04      	cmp	r3, #4
 800a668:	d065      	beq.n	800a736 <UART_SetConfig+0x6c6>
 800a66a:	e27a      	b.n	800ab62 <UART_SetConfig+0xaf2>
 800a66c:	2b20      	cmp	r3, #32
 800a66e:	f000 81b0 	beq.w	800a9d2 <UART_SetConfig+0x962>
 800a672:	2b40      	cmp	r3, #64	; 0x40
 800a674:	f000 821e 	beq.w	800aab4 <UART_SetConfig+0xa44>
 800a678:	2b10      	cmp	r3, #16
 800a67a:	f000 8104 	beq.w	800a886 <UART_SetConfig+0x816>
 800a67e:	e270      	b.n	800ab62 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a680:	f7fd ff7c 	bl	800857c <HAL_RCCEx_GetD3PCLK1Freq>
 800a684:	4602      	mov	r2, r0
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d04e      	beq.n	800a72c <UART_SetConfig+0x6bc>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a692:	2b01      	cmp	r3, #1
 800a694:	d048      	beq.n	800a728 <UART_SetConfig+0x6b8>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69a:	2b02      	cmp	r3, #2
 800a69c:	d042      	beq.n	800a724 <UART_SetConfig+0x6b4>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a2:	2b03      	cmp	r3, #3
 800a6a4:	d03c      	beq.n	800a720 <UART_SetConfig+0x6b0>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6aa:	2b04      	cmp	r3, #4
 800a6ac:	d036      	beq.n	800a71c <UART_SetConfig+0x6ac>
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b2:	2b05      	cmp	r3, #5
 800a6b4:	d026      	beq.n	800a704 <UART_SetConfig+0x694>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ba:	2b06      	cmp	r3, #6
 800a6bc:	d020      	beq.n	800a700 <UART_SetConfig+0x690>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c2:	2b07      	cmp	r3, #7
 800a6c4:	d01a      	beq.n	800a6fc <UART_SetConfig+0x68c>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ca:	2b08      	cmp	r3, #8
 800a6cc:	d014      	beq.n	800a6f8 <UART_SetConfig+0x688>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d2:	2b09      	cmp	r3, #9
 800a6d4:	d00e      	beq.n	800a6f4 <UART_SetConfig+0x684>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6da:	2b0a      	cmp	r3, #10
 800a6dc:	d008      	beq.n	800a6f0 <UART_SetConfig+0x680>
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e2:	2b0b      	cmp	r3, #11
 800a6e4:	d102      	bne.n	800a6ec <UART_SetConfig+0x67c>
 800a6e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6ea:	e020      	b.n	800a72e <UART_SetConfig+0x6be>
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	e01e      	b.n	800a72e <UART_SetConfig+0x6be>
 800a6f0:	2380      	movs	r3, #128	; 0x80
 800a6f2:	e01c      	b.n	800a72e <UART_SetConfig+0x6be>
 800a6f4:	2340      	movs	r3, #64	; 0x40
 800a6f6:	e01a      	b.n	800a72e <UART_SetConfig+0x6be>
 800a6f8:	2320      	movs	r3, #32
 800a6fa:	e018      	b.n	800a72e <UART_SetConfig+0x6be>
 800a6fc:	2310      	movs	r3, #16
 800a6fe:	e016      	b.n	800a72e <UART_SetConfig+0x6be>
 800a700:	230c      	movs	r3, #12
 800a702:	e014      	b.n	800a72e <UART_SetConfig+0x6be>
 800a704:	230a      	movs	r3, #10
 800a706:	e012      	b.n	800a72e <UART_SetConfig+0x6be>
 800a708:	40011400 	.word	0x40011400
 800a70c:	58024400 	.word	0x58024400
 800a710:	40007800 	.word	0x40007800
 800a714:	40007c00 	.word	0x40007c00
 800a718:	58000c00 	.word	0x58000c00
 800a71c:	2308      	movs	r3, #8
 800a71e:	e006      	b.n	800a72e <UART_SetConfig+0x6be>
 800a720:	2306      	movs	r3, #6
 800a722:	e004      	b.n	800a72e <UART_SetConfig+0x6be>
 800a724:	2304      	movs	r3, #4
 800a726:	e002      	b.n	800a72e <UART_SetConfig+0x6be>
 800a728:	2302      	movs	r3, #2
 800a72a:	e000      	b.n	800a72e <UART_SetConfig+0x6be>
 800a72c:	2301      	movs	r3, #1
 800a72e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a732:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a734:	e219      	b.n	800ab6a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a736:	f107 0318 	add.w	r3, r7, #24
 800a73a:	4618      	mov	r0, r3
 800a73c:	f7fd ff34 	bl	80085a8 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a740:	69fa      	ldr	r2, [r7, #28]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a746:	2b00      	cmp	r3, #0
 800a748:	d044      	beq.n	800a7d4 <UART_SetConfig+0x764>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d03e      	beq.n	800a7d0 <UART_SetConfig+0x760>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a756:	2b02      	cmp	r3, #2
 800a758:	d038      	beq.n	800a7cc <UART_SetConfig+0x75c>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75e:	2b03      	cmp	r3, #3
 800a760:	d032      	beq.n	800a7c8 <UART_SetConfig+0x758>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a766:	2b04      	cmp	r3, #4
 800a768:	d02c      	beq.n	800a7c4 <UART_SetConfig+0x754>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76e:	2b05      	cmp	r3, #5
 800a770:	d026      	beq.n	800a7c0 <UART_SetConfig+0x750>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a776:	2b06      	cmp	r3, #6
 800a778:	d020      	beq.n	800a7bc <UART_SetConfig+0x74c>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77e:	2b07      	cmp	r3, #7
 800a780:	d01a      	beq.n	800a7b8 <UART_SetConfig+0x748>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a786:	2b08      	cmp	r3, #8
 800a788:	d014      	beq.n	800a7b4 <UART_SetConfig+0x744>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a78e:	2b09      	cmp	r3, #9
 800a790:	d00e      	beq.n	800a7b0 <UART_SetConfig+0x740>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a796:	2b0a      	cmp	r3, #10
 800a798:	d008      	beq.n	800a7ac <UART_SetConfig+0x73c>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a79e:	2b0b      	cmp	r3, #11
 800a7a0:	d102      	bne.n	800a7a8 <UART_SetConfig+0x738>
 800a7a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7a6:	e016      	b.n	800a7d6 <UART_SetConfig+0x766>
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	e014      	b.n	800a7d6 <UART_SetConfig+0x766>
 800a7ac:	2380      	movs	r3, #128	; 0x80
 800a7ae:	e012      	b.n	800a7d6 <UART_SetConfig+0x766>
 800a7b0:	2340      	movs	r3, #64	; 0x40
 800a7b2:	e010      	b.n	800a7d6 <UART_SetConfig+0x766>
 800a7b4:	2320      	movs	r3, #32
 800a7b6:	e00e      	b.n	800a7d6 <UART_SetConfig+0x766>
 800a7b8:	2310      	movs	r3, #16
 800a7ba:	e00c      	b.n	800a7d6 <UART_SetConfig+0x766>
 800a7bc:	230c      	movs	r3, #12
 800a7be:	e00a      	b.n	800a7d6 <UART_SetConfig+0x766>
 800a7c0:	230a      	movs	r3, #10
 800a7c2:	e008      	b.n	800a7d6 <UART_SetConfig+0x766>
 800a7c4:	2308      	movs	r3, #8
 800a7c6:	e006      	b.n	800a7d6 <UART_SetConfig+0x766>
 800a7c8:	2306      	movs	r3, #6
 800a7ca:	e004      	b.n	800a7d6 <UART_SetConfig+0x766>
 800a7cc:	2304      	movs	r3, #4
 800a7ce:	e002      	b.n	800a7d6 <UART_SetConfig+0x766>
 800a7d0:	2302      	movs	r3, #2
 800a7d2:	e000      	b.n	800a7d6 <UART_SetConfig+0x766>
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a7dc:	e1c5      	b.n	800ab6a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7de:	f107 030c 	add.w	r3, r7, #12
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7fe f82c 	bl	8008840 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a7e8:	693a      	ldr	r2, [r7, #16]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d044      	beq.n	800a87c <UART_SetConfig+0x80c>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	d03e      	beq.n	800a878 <UART_SetConfig+0x808>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7fe:	2b02      	cmp	r3, #2
 800a800:	d038      	beq.n	800a874 <UART_SetConfig+0x804>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a806:	2b03      	cmp	r3, #3
 800a808:	d032      	beq.n	800a870 <UART_SetConfig+0x800>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a80e:	2b04      	cmp	r3, #4
 800a810:	d02c      	beq.n	800a86c <UART_SetConfig+0x7fc>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a816:	2b05      	cmp	r3, #5
 800a818:	d026      	beq.n	800a868 <UART_SetConfig+0x7f8>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a81e:	2b06      	cmp	r3, #6
 800a820:	d020      	beq.n	800a864 <UART_SetConfig+0x7f4>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a826:	2b07      	cmp	r3, #7
 800a828:	d01a      	beq.n	800a860 <UART_SetConfig+0x7f0>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a82e:	2b08      	cmp	r3, #8
 800a830:	d014      	beq.n	800a85c <UART_SetConfig+0x7ec>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a836:	2b09      	cmp	r3, #9
 800a838:	d00e      	beq.n	800a858 <UART_SetConfig+0x7e8>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83e:	2b0a      	cmp	r3, #10
 800a840:	d008      	beq.n	800a854 <UART_SetConfig+0x7e4>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a846:	2b0b      	cmp	r3, #11
 800a848:	d102      	bne.n	800a850 <UART_SetConfig+0x7e0>
 800a84a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a84e:	e016      	b.n	800a87e <UART_SetConfig+0x80e>
 800a850:	2301      	movs	r3, #1
 800a852:	e014      	b.n	800a87e <UART_SetConfig+0x80e>
 800a854:	2380      	movs	r3, #128	; 0x80
 800a856:	e012      	b.n	800a87e <UART_SetConfig+0x80e>
 800a858:	2340      	movs	r3, #64	; 0x40
 800a85a:	e010      	b.n	800a87e <UART_SetConfig+0x80e>
 800a85c:	2320      	movs	r3, #32
 800a85e:	e00e      	b.n	800a87e <UART_SetConfig+0x80e>
 800a860:	2310      	movs	r3, #16
 800a862:	e00c      	b.n	800a87e <UART_SetConfig+0x80e>
 800a864:	230c      	movs	r3, #12
 800a866:	e00a      	b.n	800a87e <UART_SetConfig+0x80e>
 800a868:	230a      	movs	r3, #10
 800a86a:	e008      	b.n	800a87e <UART_SetConfig+0x80e>
 800a86c:	2308      	movs	r3, #8
 800a86e:	e006      	b.n	800a87e <UART_SetConfig+0x80e>
 800a870:	2306      	movs	r3, #6
 800a872:	e004      	b.n	800a87e <UART_SetConfig+0x80e>
 800a874:	2304      	movs	r3, #4
 800a876:	e002      	b.n	800a87e <UART_SetConfig+0x80e>
 800a878:	2302      	movs	r3, #2
 800a87a:	e000      	b.n	800a87e <UART_SetConfig+0x80e>
 800a87c:	2301      	movs	r3, #1
 800a87e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a882:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a884:	e171      	b.n	800ab6a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a886:	4b7a      	ldr	r3, [pc, #488]	; (800aa70 <UART_SetConfig+0xa00>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f003 0320 	and.w	r3, r3, #32
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d054      	beq.n	800a93c <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a892:	4b77      	ldr	r3, [pc, #476]	; (800aa70 <UART_SetConfig+0xa00>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	08db      	lsrs	r3, r3, #3
 800a898:	f003 0303 	and.w	r3, r3, #3
 800a89c:	4a75      	ldr	r2, [pc, #468]	; (800aa74 <UART_SetConfig+0xa04>)
 800a89e:	40da      	lsrs	r2, r3
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d044      	beq.n	800a932 <UART_SetConfig+0x8c2>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d03e      	beq.n	800a92e <UART_SetConfig+0x8be>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b4:	2b02      	cmp	r3, #2
 800a8b6:	d038      	beq.n	800a92a <UART_SetConfig+0x8ba>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8bc:	2b03      	cmp	r3, #3
 800a8be:	d032      	beq.n	800a926 <UART_SetConfig+0x8b6>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c4:	2b04      	cmp	r3, #4
 800a8c6:	d02c      	beq.n	800a922 <UART_SetConfig+0x8b2>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8cc:	2b05      	cmp	r3, #5
 800a8ce:	d026      	beq.n	800a91e <UART_SetConfig+0x8ae>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d4:	2b06      	cmp	r3, #6
 800a8d6:	d020      	beq.n	800a91a <UART_SetConfig+0x8aa>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8dc:	2b07      	cmp	r3, #7
 800a8de:	d01a      	beq.n	800a916 <UART_SetConfig+0x8a6>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e4:	2b08      	cmp	r3, #8
 800a8e6:	d014      	beq.n	800a912 <UART_SetConfig+0x8a2>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ec:	2b09      	cmp	r3, #9
 800a8ee:	d00e      	beq.n	800a90e <UART_SetConfig+0x89e>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f4:	2b0a      	cmp	r3, #10
 800a8f6:	d008      	beq.n	800a90a <UART_SetConfig+0x89a>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8fc:	2b0b      	cmp	r3, #11
 800a8fe:	d102      	bne.n	800a906 <UART_SetConfig+0x896>
 800a900:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a904:	e016      	b.n	800a934 <UART_SetConfig+0x8c4>
 800a906:	2301      	movs	r3, #1
 800a908:	e014      	b.n	800a934 <UART_SetConfig+0x8c4>
 800a90a:	2380      	movs	r3, #128	; 0x80
 800a90c:	e012      	b.n	800a934 <UART_SetConfig+0x8c4>
 800a90e:	2340      	movs	r3, #64	; 0x40
 800a910:	e010      	b.n	800a934 <UART_SetConfig+0x8c4>
 800a912:	2320      	movs	r3, #32
 800a914:	e00e      	b.n	800a934 <UART_SetConfig+0x8c4>
 800a916:	2310      	movs	r3, #16
 800a918:	e00c      	b.n	800a934 <UART_SetConfig+0x8c4>
 800a91a:	230c      	movs	r3, #12
 800a91c:	e00a      	b.n	800a934 <UART_SetConfig+0x8c4>
 800a91e:	230a      	movs	r3, #10
 800a920:	e008      	b.n	800a934 <UART_SetConfig+0x8c4>
 800a922:	2308      	movs	r3, #8
 800a924:	e006      	b.n	800a934 <UART_SetConfig+0x8c4>
 800a926:	2306      	movs	r3, #6
 800a928:	e004      	b.n	800a934 <UART_SetConfig+0x8c4>
 800a92a:	2304      	movs	r3, #4
 800a92c:	e002      	b.n	800a934 <UART_SetConfig+0x8c4>
 800a92e:	2302      	movs	r3, #2
 800a930:	e000      	b.n	800a934 <UART_SetConfig+0x8c4>
 800a932:	2301      	movs	r3, #1
 800a934:	fbb2 f3f3 	udiv	r3, r2, r3
 800a938:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800a93a:	e116      	b.n	800ab6a <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a940:	2b00      	cmp	r3, #0
 800a942:	d043      	beq.n	800a9cc <UART_SetConfig+0x95c>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a948:	2b01      	cmp	r3, #1
 800a94a:	d03d      	beq.n	800a9c8 <UART_SetConfig+0x958>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a950:	2b02      	cmp	r3, #2
 800a952:	d037      	beq.n	800a9c4 <UART_SetConfig+0x954>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a958:	2b03      	cmp	r3, #3
 800a95a:	d031      	beq.n	800a9c0 <UART_SetConfig+0x950>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a960:	2b04      	cmp	r3, #4
 800a962:	d02b      	beq.n	800a9bc <UART_SetConfig+0x94c>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a968:	2b05      	cmp	r3, #5
 800a96a:	d025      	beq.n	800a9b8 <UART_SetConfig+0x948>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a970:	2b06      	cmp	r3, #6
 800a972:	d01f      	beq.n	800a9b4 <UART_SetConfig+0x944>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a978:	2b07      	cmp	r3, #7
 800a97a:	d019      	beq.n	800a9b0 <UART_SetConfig+0x940>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a980:	2b08      	cmp	r3, #8
 800a982:	d013      	beq.n	800a9ac <UART_SetConfig+0x93c>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a988:	2b09      	cmp	r3, #9
 800a98a:	d00d      	beq.n	800a9a8 <UART_SetConfig+0x938>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a990:	2b0a      	cmp	r3, #10
 800a992:	d007      	beq.n	800a9a4 <UART_SetConfig+0x934>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a998:	2b0b      	cmp	r3, #11
 800a99a:	d101      	bne.n	800a9a0 <UART_SetConfig+0x930>
 800a99c:	4b36      	ldr	r3, [pc, #216]	; (800aa78 <UART_SetConfig+0xa08>)
 800a99e:	e016      	b.n	800a9ce <UART_SetConfig+0x95e>
 800a9a0:	4b34      	ldr	r3, [pc, #208]	; (800aa74 <UART_SetConfig+0xa04>)
 800a9a2:	e014      	b.n	800a9ce <UART_SetConfig+0x95e>
 800a9a4:	4b35      	ldr	r3, [pc, #212]	; (800aa7c <UART_SetConfig+0xa0c>)
 800a9a6:	e012      	b.n	800a9ce <UART_SetConfig+0x95e>
 800a9a8:	4b35      	ldr	r3, [pc, #212]	; (800aa80 <UART_SetConfig+0xa10>)
 800a9aa:	e010      	b.n	800a9ce <UART_SetConfig+0x95e>
 800a9ac:	4b35      	ldr	r3, [pc, #212]	; (800aa84 <UART_SetConfig+0xa14>)
 800a9ae:	e00e      	b.n	800a9ce <UART_SetConfig+0x95e>
 800a9b0:	4b35      	ldr	r3, [pc, #212]	; (800aa88 <UART_SetConfig+0xa18>)
 800a9b2:	e00c      	b.n	800a9ce <UART_SetConfig+0x95e>
 800a9b4:	4b35      	ldr	r3, [pc, #212]	; (800aa8c <UART_SetConfig+0xa1c>)
 800a9b6:	e00a      	b.n	800a9ce <UART_SetConfig+0x95e>
 800a9b8:	4b35      	ldr	r3, [pc, #212]	; (800aa90 <UART_SetConfig+0xa20>)
 800a9ba:	e008      	b.n	800a9ce <UART_SetConfig+0x95e>
 800a9bc:	4b35      	ldr	r3, [pc, #212]	; (800aa94 <UART_SetConfig+0xa24>)
 800a9be:	e006      	b.n	800a9ce <UART_SetConfig+0x95e>
 800a9c0:	4b35      	ldr	r3, [pc, #212]	; (800aa98 <UART_SetConfig+0xa28>)
 800a9c2:	e004      	b.n	800a9ce <UART_SetConfig+0x95e>
 800a9c4:	4b35      	ldr	r3, [pc, #212]	; (800aa9c <UART_SetConfig+0xa2c>)
 800a9c6:	e002      	b.n	800a9ce <UART_SetConfig+0x95e>
 800a9c8:	4b35      	ldr	r3, [pc, #212]	; (800aaa0 <UART_SetConfig+0xa30>)
 800a9ca:	e000      	b.n	800a9ce <UART_SetConfig+0x95e>
 800a9cc:	4b29      	ldr	r3, [pc, #164]	; (800aa74 <UART_SetConfig+0xa04>)
 800a9ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a9d0:	e0cb      	b.n	800ab6a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d046      	beq.n	800aa68 <UART_SetConfig+0x9f8>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9de:	2b01      	cmp	r3, #1
 800a9e0:	d040      	beq.n	800aa64 <UART_SetConfig+0x9f4>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e6:	2b02      	cmp	r3, #2
 800a9e8:	d03a      	beq.n	800aa60 <UART_SetConfig+0x9f0>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ee:	2b03      	cmp	r3, #3
 800a9f0:	d034      	beq.n	800aa5c <UART_SetConfig+0x9ec>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f6:	2b04      	cmp	r3, #4
 800a9f8:	d02e      	beq.n	800aa58 <UART_SetConfig+0x9e8>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9fe:	2b05      	cmp	r3, #5
 800aa00:	d028      	beq.n	800aa54 <UART_SetConfig+0x9e4>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa06:	2b06      	cmp	r3, #6
 800aa08:	d022      	beq.n	800aa50 <UART_SetConfig+0x9e0>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa0e:	2b07      	cmp	r3, #7
 800aa10:	d01c      	beq.n	800aa4c <UART_SetConfig+0x9dc>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa16:	2b08      	cmp	r3, #8
 800aa18:	d016      	beq.n	800aa48 <UART_SetConfig+0x9d8>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa1e:	2b09      	cmp	r3, #9
 800aa20:	d00f      	beq.n	800aa42 <UART_SetConfig+0x9d2>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa26:	2b0a      	cmp	r3, #10
 800aa28:	d008      	beq.n	800aa3c <UART_SetConfig+0x9cc>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa2e:	2b0b      	cmp	r3, #11
 800aa30:	d102      	bne.n	800aa38 <UART_SetConfig+0x9c8>
 800aa32:	f643 5309 	movw	r3, #15625	; 0x3d09
 800aa36:	e018      	b.n	800aa6a <UART_SetConfig+0x9fa>
 800aa38:	4b13      	ldr	r3, [pc, #76]	; (800aa88 <UART_SetConfig+0xa18>)
 800aa3a:	e016      	b.n	800aa6a <UART_SetConfig+0x9fa>
 800aa3c:	f647 2312 	movw	r3, #31250	; 0x7a12
 800aa40:	e013      	b.n	800aa6a <UART_SetConfig+0x9fa>
 800aa42:	f24f 4324 	movw	r3, #62500	; 0xf424
 800aa46:	e010      	b.n	800aa6a <UART_SetConfig+0x9fa>
 800aa48:	4b16      	ldr	r3, [pc, #88]	; (800aaa4 <UART_SetConfig+0xa34>)
 800aa4a:	e00e      	b.n	800aa6a <UART_SetConfig+0x9fa>
 800aa4c:	4b0a      	ldr	r3, [pc, #40]	; (800aa78 <UART_SetConfig+0xa08>)
 800aa4e:	e00c      	b.n	800aa6a <UART_SetConfig+0x9fa>
 800aa50:	4b15      	ldr	r3, [pc, #84]	; (800aaa8 <UART_SetConfig+0xa38>)
 800aa52:	e00a      	b.n	800aa6a <UART_SetConfig+0x9fa>
 800aa54:	4b15      	ldr	r3, [pc, #84]	; (800aaac <UART_SetConfig+0xa3c>)
 800aa56:	e008      	b.n	800aa6a <UART_SetConfig+0x9fa>
 800aa58:	4b08      	ldr	r3, [pc, #32]	; (800aa7c <UART_SetConfig+0xa0c>)
 800aa5a:	e006      	b.n	800aa6a <UART_SetConfig+0x9fa>
 800aa5c:	4b14      	ldr	r3, [pc, #80]	; (800aab0 <UART_SetConfig+0xa40>)
 800aa5e:	e004      	b.n	800aa6a <UART_SetConfig+0x9fa>
 800aa60:	4b07      	ldr	r3, [pc, #28]	; (800aa80 <UART_SetConfig+0xa10>)
 800aa62:	e002      	b.n	800aa6a <UART_SetConfig+0x9fa>
 800aa64:	4b07      	ldr	r3, [pc, #28]	; (800aa84 <UART_SetConfig+0xa14>)
 800aa66:	e000      	b.n	800aa6a <UART_SetConfig+0x9fa>
 800aa68:	4b07      	ldr	r3, [pc, #28]	; (800aa88 <UART_SetConfig+0xa18>)
 800aa6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa6c:	e07d      	b.n	800ab6a <UART_SetConfig+0xafa>
 800aa6e:	bf00      	nop
 800aa70:	58024400 	.word	0x58024400
 800aa74:	03d09000 	.word	0x03d09000
 800aa78:	0003d090 	.word	0x0003d090
 800aa7c:	0007a120 	.word	0x0007a120
 800aa80:	000f4240 	.word	0x000f4240
 800aa84:	001e8480 	.word	0x001e8480
 800aa88:	003d0900 	.word	0x003d0900
 800aa8c:	00516155 	.word	0x00516155
 800aa90:	0061a800 	.word	0x0061a800
 800aa94:	007a1200 	.word	0x007a1200
 800aa98:	00a2c2aa 	.word	0x00a2c2aa
 800aa9c:	00f42400 	.word	0x00f42400
 800aaa0:	01e84800 	.word	0x01e84800
 800aaa4:	0001e848 	.word	0x0001e848
 800aaa8:	00051615 	.word	0x00051615
 800aaac:	00061a80 	.word	0x00061a80
 800aab0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d04e      	beq.n	800ab5a <UART_SetConfig+0xaea>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d047      	beq.n	800ab54 <UART_SetConfig+0xae4>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac8:	2b02      	cmp	r3, #2
 800aaca:	d040      	beq.n	800ab4e <UART_SetConfig+0xade>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad0:	2b03      	cmp	r3, #3
 800aad2:	d039      	beq.n	800ab48 <UART_SetConfig+0xad8>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad8:	2b04      	cmp	r3, #4
 800aada:	d032      	beq.n	800ab42 <UART_SetConfig+0xad2>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae0:	2b05      	cmp	r3, #5
 800aae2:	d02b      	beq.n	800ab3c <UART_SetConfig+0xacc>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae8:	2b06      	cmp	r3, #6
 800aaea:	d024      	beq.n	800ab36 <UART_SetConfig+0xac6>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf0:	2b07      	cmp	r3, #7
 800aaf2:	d01d      	beq.n	800ab30 <UART_SetConfig+0xac0>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf8:	2b08      	cmp	r3, #8
 800aafa:	d016      	beq.n	800ab2a <UART_SetConfig+0xaba>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab00:	2b09      	cmp	r3, #9
 800ab02:	d00f      	beq.n	800ab24 <UART_SetConfig+0xab4>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab08:	2b0a      	cmp	r3, #10
 800ab0a:	d008      	beq.n	800ab1e <UART_SetConfig+0xaae>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab10:	2b0b      	cmp	r3, #11
 800ab12:	d101      	bne.n	800ab18 <UART_SetConfig+0xaa8>
 800ab14:	2380      	movs	r3, #128	; 0x80
 800ab16:	e022      	b.n	800ab5e <UART_SetConfig+0xaee>
 800ab18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab1c:	e01f      	b.n	800ab5e <UART_SetConfig+0xaee>
 800ab1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab22:	e01c      	b.n	800ab5e <UART_SetConfig+0xaee>
 800ab24:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab28:	e019      	b.n	800ab5e <UART_SetConfig+0xaee>
 800ab2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab2e:	e016      	b.n	800ab5e <UART_SetConfig+0xaee>
 800ab30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab34:	e013      	b.n	800ab5e <UART_SetConfig+0xaee>
 800ab36:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800ab3a:	e010      	b.n	800ab5e <UART_SetConfig+0xaee>
 800ab3c:	f640 43cc 	movw	r3, #3276	; 0xccc
 800ab40:	e00d      	b.n	800ab5e <UART_SetConfig+0xaee>
 800ab42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab46:	e00a      	b.n	800ab5e <UART_SetConfig+0xaee>
 800ab48:	f241 5355 	movw	r3, #5461	; 0x1555
 800ab4c:	e007      	b.n	800ab5e <UART_SetConfig+0xaee>
 800ab4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ab52:	e004      	b.n	800ab5e <UART_SetConfig+0xaee>
 800ab54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ab58:	e001      	b.n	800ab5e <UART_SetConfig+0xaee>
 800ab5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab60:	e003      	b.n	800ab6a <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 800ab62:	2301      	movs	r3, #1
 800ab64:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800ab68:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800ab6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	f001 83e8 	beq.w	800c342 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	685a      	ldr	r2, [r3, #4]
 800ab76:	4613      	mov	r3, r2
 800ab78:	005b      	lsls	r3, r3, #1
 800ab7a:	4413      	add	r3, r2
 800ab7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d305      	bcc.n	800ab8e <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ab88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab8a:	429a      	cmp	r2, r3
 800ab8c:	d904      	bls.n	800ab98 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800ab8e:	2301      	movs	r3, #1
 800ab90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab94:	f001 bbd5 	b.w	800c342 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 800ab98:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ab9c:	2b08      	cmp	r3, #8
 800ab9e:	f000 8154 	beq.w	800ae4a <UART_SetConfig+0xdda>
 800aba2:	2b08      	cmp	r3, #8
 800aba4:	dc06      	bgt.n	800abb4 <UART_SetConfig+0xb44>
 800aba6:	2b02      	cmp	r3, #2
 800aba8:	d00f      	beq.n	800abca <UART_SetConfig+0xb5a>
 800abaa:	2b04      	cmp	r3, #4
 800abac:	f000 80ac 	beq.w	800ad08 <UART_SetConfig+0xc98>
 800abb0:	f000 bc30 	b.w	800b414 <UART_SetConfig+0x13a4>
 800abb4:	2b20      	cmp	r3, #32
 800abb6:	f000 832d 	beq.w	800b214 <UART_SetConfig+0x11a4>
 800abba:	2b40      	cmp	r3, #64	; 0x40
 800abbc:	f000 83a5 	beq.w	800b30a <UART_SetConfig+0x129a>
 800abc0:	2b10      	cmp	r3, #16
 800abc2:	f000 81e3 	beq.w	800af8c <UART_SetConfig+0xf1c>
 800abc6:	f000 bc25 	b.w	800b414 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800abca:	f7fd fcd7 	bl	800857c <HAL_RCCEx_GetD3PCLK1Freq>
 800abce:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800abd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd2:	4618      	mov	r0, r3
 800abd4:	f04f 0100 	mov.w	r1, #0
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d067      	beq.n	800acb0 <UART_SetConfig+0xc40>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	d05e      	beq.n	800aca6 <UART_SetConfig+0xc36>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abec:	2b02      	cmp	r3, #2
 800abee:	d055      	beq.n	800ac9c <UART_SetConfig+0xc2c>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abf4:	2b03      	cmp	r3, #3
 800abf6:	d04c      	beq.n	800ac92 <UART_SetConfig+0xc22>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abfc:	2b04      	cmp	r3, #4
 800abfe:	d043      	beq.n	800ac88 <UART_SetConfig+0xc18>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac04:	2b05      	cmp	r3, #5
 800ac06:	d03a      	beq.n	800ac7e <UART_SetConfig+0xc0e>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac0c:	2b06      	cmp	r3, #6
 800ac0e:	d031      	beq.n	800ac74 <UART_SetConfig+0xc04>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac14:	2b07      	cmp	r3, #7
 800ac16:	d028      	beq.n	800ac6a <UART_SetConfig+0xbfa>
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac1c:	2b08      	cmp	r3, #8
 800ac1e:	d01f      	beq.n	800ac60 <UART_SetConfig+0xbf0>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac24:	2b09      	cmp	r3, #9
 800ac26:	d016      	beq.n	800ac56 <UART_SetConfig+0xbe6>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac2c:	2b0a      	cmp	r3, #10
 800ac2e:	d00d      	beq.n	800ac4c <UART_SetConfig+0xbdc>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac34:	2b0b      	cmp	r3, #11
 800ac36:	d104      	bne.n	800ac42 <UART_SetConfig+0xbd2>
 800ac38:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac3c:	f04f 0400 	mov.w	r4, #0
 800ac40:	e03a      	b.n	800acb8 <UART_SetConfig+0xc48>
 800ac42:	f04f 0301 	mov.w	r3, #1
 800ac46:	f04f 0400 	mov.w	r4, #0
 800ac4a:	e035      	b.n	800acb8 <UART_SetConfig+0xc48>
 800ac4c:	f04f 0380 	mov.w	r3, #128	; 0x80
 800ac50:	f04f 0400 	mov.w	r4, #0
 800ac54:	e030      	b.n	800acb8 <UART_SetConfig+0xc48>
 800ac56:	f04f 0340 	mov.w	r3, #64	; 0x40
 800ac5a:	f04f 0400 	mov.w	r4, #0
 800ac5e:	e02b      	b.n	800acb8 <UART_SetConfig+0xc48>
 800ac60:	f04f 0320 	mov.w	r3, #32
 800ac64:	f04f 0400 	mov.w	r4, #0
 800ac68:	e026      	b.n	800acb8 <UART_SetConfig+0xc48>
 800ac6a:	f04f 0310 	mov.w	r3, #16
 800ac6e:	f04f 0400 	mov.w	r4, #0
 800ac72:	e021      	b.n	800acb8 <UART_SetConfig+0xc48>
 800ac74:	f04f 030c 	mov.w	r3, #12
 800ac78:	f04f 0400 	mov.w	r4, #0
 800ac7c:	e01c      	b.n	800acb8 <UART_SetConfig+0xc48>
 800ac7e:	f04f 030a 	mov.w	r3, #10
 800ac82:	f04f 0400 	mov.w	r4, #0
 800ac86:	e017      	b.n	800acb8 <UART_SetConfig+0xc48>
 800ac88:	f04f 0308 	mov.w	r3, #8
 800ac8c:	f04f 0400 	mov.w	r4, #0
 800ac90:	e012      	b.n	800acb8 <UART_SetConfig+0xc48>
 800ac92:	f04f 0306 	mov.w	r3, #6
 800ac96:	f04f 0400 	mov.w	r4, #0
 800ac9a:	e00d      	b.n	800acb8 <UART_SetConfig+0xc48>
 800ac9c:	f04f 0304 	mov.w	r3, #4
 800aca0:	f04f 0400 	mov.w	r4, #0
 800aca4:	e008      	b.n	800acb8 <UART_SetConfig+0xc48>
 800aca6:	f04f 0302 	mov.w	r3, #2
 800acaa:	f04f 0400 	mov.w	r4, #0
 800acae:	e003      	b.n	800acb8 <UART_SetConfig+0xc48>
 800acb0:	f04f 0301 	mov.w	r3, #1
 800acb4:	f04f 0400 	mov.w	r4, #0
 800acb8:	461a      	mov	r2, r3
 800acba:	4623      	mov	r3, r4
 800acbc:	f7f5 fb0c 	bl	80002d8 <__aeabi_uldivmod>
 800acc0:	4603      	mov	r3, r0
 800acc2:	460c      	mov	r4, r1
 800acc4:	4619      	mov	r1, r3
 800acc6:	4622      	mov	r2, r4
 800acc8:	f04f 0300 	mov.w	r3, #0
 800accc:	f04f 0400 	mov.w	r4, #0
 800acd0:	0214      	lsls	r4, r2, #8
 800acd2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800acd6:	020b      	lsls	r3, r1, #8
 800acd8:	687a      	ldr	r2, [r7, #4]
 800acda:	6852      	ldr	r2, [r2, #4]
 800acdc:	0852      	lsrs	r2, r2, #1
 800acde:	4611      	mov	r1, r2
 800ace0:	f04f 0200 	mov.w	r2, #0
 800ace4:	eb13 0b01 	adds.w	fp, r3, r1
 800ace8:	eb44 0c02 	adc.w	ip, r4, r2
 800acec:	4658      	mov	r0, fp
 800acee:	4661      	mov	r1, ip
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	685b      	ldr	r3, [r3, #4]
 800acf4:	f04f 0400 	mov.w	r4, #0
 800acf8:	461a      	mov	r2, r3
 800acfa:	4623      	mov	r3, r4
 800acfc:	f7f5 faec 	bl	80002d8 <__aeabi_uldivmod>
 800ad00:	4603      	mov	r3, r0
 800ad02:	460c      	mov	r4, r1
 800ad04:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ad06:	e389      	b.n	800b41c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad08:	f107 0318 	add.w	r3, r7, #24
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f7fd fc4b 	bl	80085a8 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad12:	69fb      	ldr	r3, [r7, #28]
 800ad14:	4618      	mov	r0, r3
 800ad16:	f04f 0100 	mov.w	r1, #0
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d067      	beq.n	800adf2 <UART_SetConfig+0xd82>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad26:	2b01      	cmp	r3, #1
 800ad28:	d05e      	beq.n	800ade8 <UART_SetConfig+0xd78>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad2e:	2b02      	cmp	r3, #2
 800ad30:	d055      	beq.n	800adde <UART_SetConfig+0xd6e>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad36:	2b03      	cmp	r3, #3
 800ad38:	d04c      	beq.n	800add4 <UART_SetConfig+0xd64>
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad3e:	2b04      	cmp	r3, #4
 800ad40:	d043      	beq.n	800adca <UART_SetConfig+0xd5a>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad46:	2b05      	cmp	r3, #5
 800ad48:	d03a      	beq.n	800adc0 <UART_SetConfig+0xd50>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad4e:	2b06      	cmp	r3, #6
 800ad50:	d031      	beq.n	800adb6 <UART_SetConfig+0xd46>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad56:	2b07      	cmp	r3, #7
 800ad58:	d028      	beq.n	800adac <UART_SetConfig+0xd3c>
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad5e:	2b08      	cmp	r3, #8
 800ad60:	d01f      	beq.n	800ada2 <UART_SetConfig+0xd32>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad66:	2b09      	cmp	r3, #9
 800ad68:	d016      	beq.n	800ad98 <UART_SetConfig+0xd28>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad6e:	2b0a      	cmp	r3, #10
 800ad70:	d00d      	beq.n	800ad8e <UART_SetConfig+0xd1e>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad76:	2b0b      	cmp	r3, #11
 800ad78:	d104      	bne.n	800ad84 <UART_SetConfig+0xd14>
 800ad7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad7e:	f04f 0400 	mov.w	r4, #0
 800ad82:	e03a      	b.n	800adfa <UART_SetConfig+0xd8a>
 800ad84:	f04f 0301 	mov.w	r3, #1
 800ad88:	f04f 0400 	mov.w	r4, #0
 800ad8c:	e035      	b.n	800adfa <UART_SetConfig+0xd8a>
 800ad8e:	f04f 0380 	mov.w	r3, #128	; 0x80
 800ad92:	f04f 0400 	mov.w	r4, #0
 800ad96:	e030      	b.n	800adfa <UART_SetConfig+0xd8a>
 800ad98:	f04f 0340 	mov.w	r3, #64	; 0x40
 800ad9c:	f04f 0400 	mov.w	r4, #0
 800ada0:	e02b      	b.n	800adfa <UART_SetConfig+0xd8a>
 800ada2:	f04f 0320 	mov.w	r3, #32
 800ada6:	f04f 0400 	mov.w	r4, #0
 800adaa:	e026      	b.n	800adfa <UART_SetConfig+0xd8a>
 800adac:	f04f 0310 	mov.w	r3, #16
 800adb0:	f04f 0400 	mov.w	r4, #0
 800adb4:	e021      	b.n	800adfa <UART_SetConfig+0xd8a>
 800adb6:	f04f 030c 	mov.w	r3, #12
 800adba:	f04f 0400 	mov.w	r4, #0
 800adbe:	e01c      	b.n	800adfa <UART_SetConfig+0xd8a>
 800adc0:	f04f 030a 	mov.w	r3, #10
 800adc4:	f04f 0400 	mov.w	r4, #0
 800adc8:	e017      	b.n	800adfa <UART_SetConfig+0xd8a>
 800adca:	f04f 0308 	mov.w	r3, #8
 800adce:	f04f 0400 	mov.w	r4, #0
 800add2:	e012      	b.n	800adfa <UART_SetConfig+0xd8a>
 800add4:	f04f 0306 	mov.w	r3, #6
 800add8:	f04f 0400 	mov.w	r4, #0
 800addc:	e00d      	b.n	800adfa <UART_SetConfig+0xd8a>
 800adde:	f04f 0304 	mov.w	r3, #4
 800ade2:	f04f 0400 	mov.w	r4, #0
 800ade6:	e008      	b.n	800adfa <UART_SetConfig+0xd8a>
 800ade8:	f04f 0302 	mov.w	r3, #2
 800adec:	f04f 0400 	mov.w	r4, #0
 800adf0:	e003      	b.n	800adfa <UART_SetConfig+0xd8a>
 800adf2:	f04f 0301 	mov.w	r3, #1
 800adf6:	f04f 0400 	mov.w	r4, #0
 800adfa:	461a      	mov	r2, r3
 800adfc:	4623      	mov	r3, r4
 800adfe:	f7f5 fa6b 	bl	80002d8 <__aeabi_uldivmod>
 800ae02:	4603      	mov	r3, r0
 800ae04:	460c      	mov	r4, r1
 800ae06:	4619      	mov	r1, r3
 800ae08:	4622      	mov	r2, r4
 800ae0a:	f04f 0300 	mov.w	r3, #0
 800ae0e:	f04f 0400 	mov.w	r4, #0
 800ae12:	0214      	lsls	r4, r2, #8
 800ae14:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ae18:	020b      	lsls	r3, r1, #8
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	6852      	ldr	r2, [r2, #4]
 800ae1e:	0852      	lsrs	r2, r2, #1
 800ae20:	4611      	mov	r1, r2
 800ae22:	f04f 0200 	mov.w	r2, #0
 800ae26:	eb13 0b01 	adds.w	fp, r3, r1
 800ae2a:	eb44 0c02 	adc.w	ip, r4, r2
 800ae2e:	4658      	mov	r0, fp
 800ae30:	4661      	mov	r1, ip
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	685b      	ldr	r3, [r3, #4]
 800ae36:	f04f 0400 	mov.w	r4, #0
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	4623      	mov	r3, r4
 800ae3e:	f7f5 fa4b 	bl	80002d8 <__aeabi_uldivmod>
 800ae42:	4603      	mov	r3, r0
 800ae44:	460c      	mov	r4, r1
 800ae46:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ae48:	e2e8      	b.n	800b41c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae4a:	f107 030c 	add.w	r3, r7, #12
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f7fd fcf6 	bl	8008840 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	4618      	mov	r0, r3
 800ae58:	f04f 0100 	mov.w	r1, #0
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d067      	beq.n	800af34 <UART_SetConfig+0xec4>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	d05e      	beq.n	800af2a <UART_SetConfig+0xeba>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae70:	2b02      	cmp	r3, #2
 800ae72:	d055      	beq.n	800af20 <UART_SetConfig+0xeb0>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae78:	2b03      	cmp	r3, #3
 800ae7a:	d04c      	beq.n	800af16 <UART_SetConfig+0xea6>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae80:	2b04      	cmp	r3, #4
 800ae82:	d043      	beq.n	800af0c <UART_SetConfig+0xe9c>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae88:	2b05      	cmp	r3, #5
 800ae8a:	d03a      	beq.n	800af02 <UART_SetConfig+0xe92>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae90:	2b06      	cmp	r3, #6
 800ae92:	d031      	beq.n	800aef8 <UART_SetConfig+0xe88>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae98:	2b07      	cmp	r3, #7
 800ae9a:	d028      	beq.n	800aeee <UART_SetConfig+0xe7e>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea0:	2b08      	cmp	r3, #8
 800aea2:	d01f      	beq.n	800aee4 <UART_SetConfig+0xe74>
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea8:	2b09      	cmp	r3, #9
 800aeaa:	d016      	beq.n	800aeda <UART_SetConfig+0xe6a>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb0:	2b0a      	cmp	r3, #10
 800aeb2:	d00d      	beq.n	800aed0 <UART_SetConfig+0xe60>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb8:	2b0b      	cmp	r3, #11
 800aeba:	d104      	bne.n	800aec6 <UART_SetConfig+0xe56>
 800aebc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aec0:	f04f 0400 	mov.w	r4, #0
 800aec4:	e03a      	b.n	800af3c <UART_SetConfig+0xecc>
 800aec6:	f04f 0301 	mov.w	r3, #1
 800aeca:	f04f 0400 	mov.w	r4, #0
 800aece:	e035      	b.n	800af3c <UART_SetConfig+0xecc>
 800aed0:	f04f 0380 	mov.w	r3, #128	; 0x80
 800aed4:	f04f 0400 	mov.w	r4, #0
 800aed8:	e030      	b.n	800af3c <UART_SetConfig+0xecc>
 800aeda:	f04f 0340 	mov.w	r3, #64	; 0x40
 800aede:	f04f 0400 	mov.w	r4, #0
 800aee2:	e02b      	b.n	800af3c <UART_SetConfig+0xecc>
 800aee4:	f04f 0320 	mov.w	r3, #32
 800aee8:	f04f 0400 	mov.w	r4, #0
 800aeec:	e026      	b.n	800af3c <UART_SetConfig+0xecc>
 800aeee:	f04f 0310 	mov.w	r3, #16
 800aef2:	f04f 0400 	mov.w	r4, #0
 800aef6:	e021      	b.n	800af3c <UART_SetConfig+0xecc>
 800aef8:	f04f 030c 	mov.w	r3, #12
 800aefc:	f04f 0400 	mov.w	r4, #0
 800af00:	e01c      	b.n	800af3c <UART_SetConfig+0xecc>
 800af02:	f04f 030a 	mov.w	r3, #10
 800af06:	f04f 0400 	mov.w	r4, #0
 800af0a:	e017      	b.n	800af3c <UART_SetConfig+0xecc>
 800af0c:	f04f 0308 	mov.w	r3, #8
 800af10:	f04f 0400 	mov.w	r4, #0
 800af14:	e012      	b.n	800af3c <UART_SetConfig+0xecc>
 800af16:	f04f 0306 	mov.w	r3, #6
 800af1a:	f04f 0400 	mov.w	r4, #0
 800af1e:	e00d      	b.n	800af3c <UART_SetConfig+0xecc>
 800af20:	f04f 0304 	mov.w	r3, #4
 800af24:	f04f 0400 	mov.w	r4, #0
 800af28:	e008      	b.n	800af3c <UART_SetConfig+0xecc>
 800af2a:	f04f 0302 	mov.w	r3, #2
 800af2e:	f04f 0400 	mov.w	r4, #0
 800af32:	e003      	b.n	800af3c <UART_SetConfig+0xecc>
 800af34:	f04f 0301 	mov.w	r3, #1
 800af38:	f04f 0400 	mov.w	r4, #0
 800af3c:	461a      	mov	r2, r3
 800af3e:	4623      	mov	r3, r4
 800af40:	f7f5 f9ca 	bl	80002d8 <__aeabi_uldivmod>
 800af44:	4603      	mov	r3, r0
 800af46:	460c      	mov	r4, r1
 800af48:	4619      	mov	r1, r3
 800af4a:	4622      	mov	r2, r4
 800af4c:	f04f 0300 	mov.w	r3, #0
 800af50:	f04f 0400 	mov.w	r4, #0
 800af54:	0214      	lsls	r4, r2, #8
 800af56:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800af5a:	020b      	lsls	r3, r1, #8
 800af5c:	687a      	ldr	r2, [r7, #4]
 800af5e:	6852      	ldr	r2, [r2, #4]
 800af60:	0852      	lsrs	r2, r2, #1
 800af62:	4611      	mov	r1, r2
 800af64:	f04f 0200 	mov.w	r2, #0
 800af68:	eb13 0b01 	adds.w	fp, r3, r1
 800af6c:	eb44 0c02 	adc.w	ip, r4, r2
 800af70:	4658      	mov	r0, fp
 800af72:	4661      	mov	r1, ip
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	f04f 0400 	mov.w	r4, #0
 800af7c:	461a      	mov	r2, r3
 800af7e:	4623      	mov	r3, r4
 800af80:	f7f5 f9aa 	bl	80002d8 <__aeabi_uldivmod>
 800af84:	4603      	mov	r3, r0
 800af86:	460c      	mov	r4, r1
 800af88:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800af8a:	e247      	b.n	800b41c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af8c:	4b96      	ldr	r3, [pc, #600]	; (800b1e8 <UART_SetConfig+0x1178>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f003 0320 	and.w	r3, r3, #32
 800af94:	2b00      	cmp	r3, #0
 800af96:	f000 80a3 	beq.w	800b0e0 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af9a:	4b93      	ldr	r3, [pc, #588]	; (800b1e8 <UART_SetConfig+0x1178>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	08db      	lsrs	r3, r3, #3
 800afa0:	f003 0303 	and.w	r3, r3, #3
 800afa4:	4a91      	ldr	r2, [pc, #580]	; (800b1ec <UART_SetConfig+0x117c>)
 800afa6:	fa22 f303 	lsr.w	r3, r2, r3
 800afaa:	4618      	mov	r0, r3
 800afac:	f04f 0100 	mov.w	r1, #0
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d067      	beq.n	800b088 <UART_SetConfig+0x1018>
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d05e      	beq.n	800b07e <UART_SetConfig+0x100e>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc4:	2b02      	cmp	r3, #2
 800afc6:	d055      	beq.n	800b074 <UART_SetConfig+0x1004>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afcc:	2b03      	cmp	r3, #3
 800afce:	d04c      	beq.n	800b06a <UART_SetConfig+0xffa>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd4:	2b04      	cmp	r3, #4
 800afd6:	d043      	beq.n	800b060 <UART_SetConfig+0xff0>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afdc:	2b05      	cmp	r3, #5
 800afde:	d03a      	beq.n	800b056 <UART_SetConfig+0xfe6>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe4:	2b06      	cmp	r3, #6
 800afe6:	d031      	beq.n	800b04c <UART_SetConfig+0xfdc>
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afec:	2b07      	cmp	r3, #7
 800afee:	d028      	beq.n	800b042 <UART_SetConfig+0xfd2>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff4:	2b08      	cmp	r3, #8
 800aff6:	d01f      	beq.n	800b038 <UART_SetConfig+0xfc8>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800affc:	2b09      	cmp	r3, #9
 800affe:	d016      	beq.n	800b02e <UART_SetConfig+0xfbe>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b004:	2b0a      	cmp	r3, #10
 800b006:	d00d      	beq.n	800b024 <UART_SetConfig+0xfb4>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b00c:	2b0b      	cmp	r3, #11
 800b00e:	d104      	bne.n	800b01a <UART_SetConfig+0xfaa>
 800b010:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b014:	f04f 0400 	mov.w	r4, #0
 800b018:	e03a      	b.n	800b090 <UART_SetConfig+0x1020>
 800b01a:	f04f 0301 	mov.w	r3, #1
 800b01e:	f04f 0400 	mov.w	r4, #0
 800b022:	e035      	b.n	800b090 <UART_SetConfig+0x1020>
 800b024:	f04f 0380 	mov.w	r3, #128	; 0x80
 800b028:	f04f 0400 	mov.w	r4, #0
 800b02c:	e030      	b.n	800b090 <UART_SetConfig+0x1020>
 800b02e:	f04f 0340 	mov.w	r3, #64	; 0x40
 800b032:	f04f 0400 	mov.w	r4, #0
 800b036:	e02b      	b.n	800b090 <UART_SetConfig+0x1020>
 800b038:	f04f 0320 	mov.w	r3, #32
 800b03c:	f04f 0400 	mov.w	r4, #0
 800b040:	e026      	b.n	800b090 <UART_SetConfig+0x1020>
 800b042:	f04f 0310 	mov.w	r3, #16
 800b046:	f04f 0400 	mov.w	r4, #0
 800b04a:	e021      	b.n	800b090 <UART_SetConfig+0x1020>
 800b04c:	f04f 030c 	mov.w	r3, #12
 800b050:	f04f 0400 	mov.w	r4, #0
 800b054:	e01c      	b.n	800b090 <UART_SetConfig+0x1020>
 800b056:	f04f 030a 	mov.w	r3, #10
 800b05a:	f04f 0400 	mov.w	r4, #0
 800b05e:	e017      	b.n	800b090 <UART_SetConfig+0x1020>
 800b060:	f04f 0308 	mov.w	r3, #8
 800b064:	f04f 0400 	mov.w	r4, #0
 800b068:	e012      	b.n	800b090 <UART_SetConfig+0x1020>
 800b06a:	f04f 0306 	mov.w	r3, #6
 800b06e:	f04f 0400 	mov.w	r4, #0
 800b072:	e00d      	b.n	800b090 <UART_SetConfig+0x1020>
 800b074:	f04f 0304 	mov.w	r3, #4
 800b078:	f04f 0400 	mov.w	r4, #0
 800b07c:	e008      	b.n	800b090 <UART_SetConfig+0x1020>
 800b07e:	f04f 0302 	mov.w	r3, #2
 800b082:	f04f 0400 	mov.w	r4, #0
 800b086:	e003      	b.n	800b090 <UART_SetConfig+0x1020>
 800b088:	f04f 0301 	mov.w	r3, #1
 800b08c:	f04f 0400 	mov.w	r4, #0
 800b090:	461a      	mov	r2, r3
 800b092:	4623      	mov	r3, r4
 800b094:	f7f5 f920 	bl	80002d8 <__aeabi_uldivmod>
 800b098:	4603      	mov	r3, r0
 800b09a:	460c      	mov	r4, r1
 800b09c:	4619      	mov	r1, r3
 800b09e:	4622      	mov	r2, r4
 800b0a0:	f04f 0300 	mov.w	r3, #0
 800b0a4:	f04f 0400 	mov.w	r4, #0
 800b0a8:	0214      	lsls	r4, r2, #8
 800b0aa:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800b0ae:	020b      	lsls	r3, r1, #8
 800b0b0:	687a      	ldr	r2, [r7, #4]
 800b0b2:	6852      	ldr	r2, [r2, #4]
 800b0b4:	0852      	lsrs	r2, r2, #1
 800b0b6:	4611      	mov	r1, r2
 800b0b8:	f04f 0200 	mov.w	r2, #0
 800b0bc:	eb13 0b01 	adds.w	fp, r3, r1
 800b0c0:	eb44 0c02 	adc.w	ip, r4, r2
 800b0c4:	4658      	mov	r0, fp
 800b0c6:	4661      	mov	r1, ip
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	f04f 0400 	mov.w	r4, #0
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	4623      	mov	r3, r4
 800b0d4:	f7f5 f900 	bl	80002d8 <__aeabi_uldivmod>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	460c      	mov	r4, r1
 800b0dc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800b0de:	e19d      	b.n	800b41c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d05b      	beq.n	800b1a0 <UART_SetConfig+0x1130>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ec:	2b01      	cmp	r3, #1
 800b0ee:	d053      	beq.n	800b198 <UART_SetConfig+0x1128>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f4:	2b02      	cmp	r3, #2
 800b0f6:	d04b      	beq.n	800b190 <UART_SetConfig+0x1120>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0fc:	2b03      	cmp	r3, #3
 800b0fe:	d043      	beq.n	800b188 <UART_SetConfig+0x1118>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b104:	2b04      	cmp	r3, #4
 800b106:	d03b      	beq.n	800b180 <UART_SetConfig+0x1110>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b10c:	2b05      	cmp	r3, #5
 800b10e:	d033      	beq.n	800b178 <UART_SetConfig+0x1108>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b114:	2b06      	cmp	r3, #6
 800b116:	d02b      	beq.n	800b170 <UART_SetConfig+0x1100>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b11c:	2b07      	cmp	r3, #7
 800b11e:	d023      	beq.n	800b168 <UART_SetConfig+0x10f8>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b124:	2b08      	cmp	r3, #8
 800b126:	d01b      	beq.n	800b160 <UART_SetConfig+0x10f0>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b12c:	2b09      	cmp	r3, #9
 800b12e:	d013      	beq.n	800b158 <UART_SetConfig+0x10e8>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b134:	2b0a      	cmp	r3, #10
 800b136:	d00b      	beq.n	800b150 <UART_SetConfig+0x10e0>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b13c:	2b0b      	cmp	r3, #11
 800b13e:	d103      	bne.n	800b148 <UART_SetConfig+0x10d8>
 800b140:	4b2a      	ldr	r3, [pc, #168]	; (800b1ec <UART_SetConfig+0x117c>)
 800b142:	f04f 0400 	mov.w	r4, #0
 800b146:	e02e      	b.n	800b1a6 <UART_SetConfig+0x1136>
 800b148:	4b29      	ldr	r3, [pc, #164]	; (800b1f0 <UART_SetConfig+0x1180>)
 800b14a:	f04f 0403 	mov.w	r4, #3
 800b14e:	e02a      	b.n	800b1a6 <UART_SetConfig+0x1136>
 800b150:	4b28      	ldr	r3, [pc, #160]	; (800b1f4 <UART_SetConfig+0x1184>)
 800b152:	f04f 0400 	mov.w	r4, #0
 800b156:	e026      	b.n	800b1a6 <UART_SetConfig+0x1136>
 800b158:	4b27      	ldr	r3, [pc, #156]	; (800b1f8 <UART_SetConfig+0x1188>)
 800b15a:	f04f 0400 	mov.w	r4, #0
 800b15e:	e022      	b.n	800b1a6 <UART_SetConfig+0x1136>
 800b160:	4b26      	ldr	r3, [pc, #152]	; (800b1fc <UART_SetConfig+0x118c>)
 800b162:	f04f 0400 	mov.w	r4, #0
 800b166:	e01e      	b.n	800b1a6 <UART_SetConfig+0x1136>
 800b168:	4b25      	ldr	r3, [pc, #148]	; (800b200 <UART_SetConfig+0x1190>)
 800b16a:	f04f 0400 	mov.w	r4, #0
 800b16e:	e01a      	b.n	800b1a6 <UART_SetConfig+0x1136>
 800b170:	a419      	add	r4, pc, #100	; (adr r4, 800b1d8 <UART_SetConfig+0x1168>)
 800b172:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b176:	e016      	b.n	800b1a6 <UART_SetConfig+0x1136>
 800b178:	4b22      	ldr	r3, [pc, #136]	; (800b204 <UART_SetConfig+0x1194>)
 800b17a:	f04f 0400 	mov.w	r4, #0
 800b17e:	e012      	b.n	800b1a6 <UART_SetConfig+0x1136>
 800b180:	4b21      	ldr	r3, [pc, #132]	; (800b208 <UART_SetConfig+0x1198>)
 800b182:	f04f 0400 	mov.w	r4, #0
 800b186:	e00e      	b.n	800b1a6 <UART_SetConfig+0x1136>
 800b188:	a415      	add	r4, pc, #84	; (adr r4, 800b1e0 <UART_SetConfig+0x1170>)
 800b18a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b18e:	e00a      	b.n	800b1a6 <UART_SetConfig+0x1136>
 800b190:	4b1e      	ldr	r3, [pc, #120]	; (800b20c <UART_SetConfig+0x119c>)
 800b192:	f04f 0400 	mov.w	r4, #0
 800b196:	e006      	b.n	800b1a6 <UART_SetConfig+0x1136>
 800b198:	4b1d      	ldr	r3, [pc, #116]	; (800b210 <UART_SetConfig+0x11a0>)
 800b19a:	f04f 0401 	mov.w	r4, #1
 800b19e:	e002      	b.n	800b1a6 <UART_SetConfig+0x1136>
 800b1a0:	4b13      	ldr	r3, [pc, #76]	; (800b1f0 <UART_SetConfig+0x1180>)
 800b1a2:	f04f 0403 	mov.w	r4, #3
 800b1a6:	687a      	ldr	r2, [r7, #4]
 800b1a8:	6852      	ldr	r2, [r2, #4]
 800b1aa:	0852      	lsrs	r2, r2, #1
 800b1ac:	4611      	mov	r1, r2
 800b1ae:	f04f 0200 	mov.w	r2, #0
 800b1b2:	eb13 0b01 	adds.w	fp, r3, r1
 800b1b6:	eb44 0c02 	adc.w	ip, r4, r2
 800b1ba:	4658      	mov	r0, fp
 800b1bc:	4661      	mov	r1, ip
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	f04f 0400 	mov.w	r4, #0
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	4623      	mov	r3, r4
 800b1ca:	f7f5 f885 	bl	80002d8 <__aeabi_uldivmod>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	460c      	mov	r4, r1
 800b1d2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b1d4:	e122      	b.n	800b41c <UART_SetConfig+0x13ac>
 800b1d6:	bf00      	nop
 800b1d8:	51615500 	.word	0x51615500
 800b1dc:	00000000 	.word	0x00000000
 800b1e0:	a2c2aa00 	.word	0xa2c2aa00
 800b1e4:	00000000 	.word	0x00000000
 800b1e8:	58024400 	.word	0x58024400
 800b1ec:	03d09000 	.word	0x03d09000
 800b1f0:	d0900000 	.word	0xd0900000
 800b1f4:	07a12000 	.word	0x07a12000
 800b1f8:	0f424000 	.word	0x0f424000
 800b1fc:	1e848000 	.word	0x1e848000
 800b200:	3d090000 	.word	0x3d090000
 800b204:	61a80000 	.word	0x61a80000
 800b208:	7a120000 	.word	0x7a120000
 800b20c:	f4240000 	.word	0xf4240000
 800b210:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d05b      	beq.n	800b2d4 <UART_SetConfig+0x1264>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b220:	2b01      	cmp	r3, #1
 800b222:	d053      	beq.n	800b2cc <UART_SetConfig+0x125c>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b228:	2b02      	cmp	r3, #2
 800b22a:	d04b      	beq.n	800b2c4 <UART_SetConfig+0x1254>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b230:	2b03      	cmp	r3, #3
 800b232:	d043      	beq.n	800b2bc <UART_SetConfig+0x124c>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b238:	2b04      	cmp	r3, #4
 800b23a:	d03b      	beq.n	800b2b4 <UART_SetConfig+0x1244>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b240:	2b05      	cmp	r3, #5
 800b242:	d033      	beq.n	800b2ac <UART_SetConfig+0x123c>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b248:	2b06      	cmp	r3, #6
 800b24a:	d02b      	beq.n	800b2a4 <UART_SetConfig+0x1234>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b250:	2b07      	cmp	r3, #7
 800b252:	d023      	beq.n	800b29c <UART_SetConfig+0x122c>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b258:	2b08      	cmp	r3, #8
 800b25a:	d01b      	beq.n	800b294 <UART_SetConfig+0x1224>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b260:	2b09      	cmp	r3, #9
 800b262:	d013      	beq.n	800b28c <UART_SetConfig+0x121c>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b268:	2b0a      	cmp	r3, #10
 800b26a:	d00b      	beq.n	800b284 <UART_SetConfig+0x1214>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b270:	2b0b      	cmp	r3, #11
 800b272:	d103      	bne.n	800b27c <UART_SetConfig+0x120c>
 800b274:	4bc0      	ldr	r3, [pc, #768]	; (800b578 <UART_SetConfig+0x1508>)
 800b276:	f04f 0400 	mov.w	r4, #0
 800b27a:	e02e      	b.n	800b2da <UART_SetConfig+0x126a>
 800b27c:	4bbf      	ldr	r3, [pc, #764]	; (800b57c <UART_SetConfig+0x150c>)
 800b27e:	f04f 0400 	mov.w	r4, #0
 800b282:	e02a      	b.n	800b2da <UART_SetConfig+0x126a>
 800b284:	4bbe      	ldr	r3, [pc, #760]	; (800b580 <UART_SetConfig+0x1510>)
 800b286:	f04f 0400 	mov.w	r4, #0
 800b28a:	e026      	b.n	800b2da <UART_SetConfig+0x126a>
 800b28c:	4bbd      	ldr	r3, [pc, #756]	; (800b584 <UART_SetConfig+0x1514>)
 800b28e:	f04f 0400 	mov.w	r4, #0
 800b292:	e022      	b.n	800b2da <UART_SetConfig+0x126a>
 800b294:	4bbc      	ldr	r3, [pc, #752]	; (800b588 <UART_SetConfig+0x1518>)
 800b296:	f04f 0400 	mov.w	r4, #0
 800b29a:	e01e      	b.n	800b2da <UART_SetConfig+0x126a>
 800b29c:	4bbb      	ldr	r3, [pc, #748]	; (800b58c <UART_SetConfig+0x151c>)
 800b29e:	f04f 0400 	mov.w	r4, #0
 800b2a2:	e01a      	b.n	800b2da <UART_SetConfig+0x126a>
 800b2a4:	a4b0      	add	r4, pc, #704	; (adr r4, 800b568 <UART_SetConfig+0x14f8>)
 800b2a6:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b2aa:	e016      	b.n	800b2da <UART_SetConfig+0x126a>
 800b2ac:	4bb8      	ldr	r3, [pc, #736]	; (800b590 <UART_SetConfig+0x1520>)
 800b2ae:	f04f 0400 	mov.w	r4, #0
 800b2b2:	e012      	b.n	800b2da <UART_SetConfig+0x126a>
 800b2b4:	4bb7      	ldr	r3, [pc, #732]	; (800b594 <UART_SetConfig+0x1524>)
 800b2b6:	f04f 0400 	mov.w	r4, #0
 800b2ba:	e00e      	b.n	800b2da <UART_SetConfig+0x126a>
 800b2bc:	a4ac      	add	r4, pc, #688	; (adr r4, 800b570 <UART_SetConfig+0x1500>)
 800b2be:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b2c2:	e00a      	b.n	800b2da <UART_SetConfig+0x126a>
 800b2c4:	4bb4      	ldr	r3, [pc, #720]	; (800b598 <UART_SetConfig+0x1528>)
 800b2c6:	f04f 0400 	mov.w	r4, #0
 800b2ca:	e006      	b.n	800b2da <UART_SetConfig+0x126a>
 800b2cc:	4bb3      	ldr	r3, [pc, #716]	; (800b59c <UART_SetConfig+0x152c>)
 800b2ce:	f04f 0400 	mov.w	r4, #0
 800b2d2:	e002      	b.n	800b2da <UART_SetConfig+0x126a>
 800b2d4:	4ba9      	ldr	r3, [pc, #676]	; (800b57c <UART_SetConfig+0x150c>)
 800b2d6:	f04f 0400 	mov.w	r4, #0
 800b2da:	687a      	ldr	r2, [r7, #4]
 800b2dc:	6852      	ldr	r2, [r2, #4]
 800b2de:	0852      	lsrs	r2, r2, #1
 800b2e0:	4611      	mov	r1, r2
 800b2e2:	f04f 0200 	mov.w	r2, #0
 800b2e6:	eb13 0b01 	adds.w	fp, r3, r1
 800b2ea:	eb44 0c02 	adc.w	ip, r4, r2
 800b2ee:	4658      	mov	r0, fp
 800b2f0:	4661      	mov	r1, ip
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	685b      	ldr	r3, [r3, #4]
 800b2f6:	f04f 0400 	mov.w	r4, #0
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	4623      	mov	r3, r4
 800b2fe:	f7f4 ffeb 	bl	80002d8 <__aeabi_uldivmod>
 800b302:	4603      	mov	r3, r0
 800b304:	460c      	mov	r4, r1
 800b306:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b308:	e088      	b.n	800b41c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d064      	beq.n	800b3dc <UART_SetConfig+0x136c>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b316:	2b01      	cmp	r3, #1
 800b318:	d05b      	beq.n	800b3d2 <UART_SetConfig+0x1362>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b31e:	2b02      	cmp	r3, #2
 800b320:	d052      	beq.n	800b3c8 <UART_SetConfig+0x1358>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b326:	2b03      	cmp	r3, #3
 800b328:	d04a      	beq.n	800b3c0 <UART_SetConfig+0x1350>
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b32e:	2b04      	cmp	r3, #4
 800b330:	d041      	beq.n	800b3b6 <UART_SetConfig+0x1346>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b336:	2b05      	cmp	r3, #5
 800b338:	d039      	beq.n	800b3ae <UART_SetConfig+0x133e>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b33e:	2b06      	cmp	r3, #6
 800b340:	d031      	beq.n	800b3a6 <UART_SetConfig+0x1336>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b346:	2b07      	cmp	r3, #7
 800b348:	d028      	beq.n	800b39c <UART_SetConfig+0x132c>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b34e:	2b08      	cmp	r3, #8
 800b350:	d01f      	beq.n	800b392 <UART_SetConfig+0x1322>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b356:	2b09      	cmp	r3, #9
 800b358:	d016      	beq.n	800b388 <UART_SetConfig+0x1318>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b35e:	2b0a      	cmp	r3, #10
 800b360:	d00d      	beq.n	800b37e <UART_SetConfig+0x130e>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b366:	2b0b      	cmp	r3, #11
 800b368:	d104      	bne.n	800b374 <UART_SetConfig+0x1304>
 800b36a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b36e:	f04f 0400 	mov.w	r4, #0
 800b372:	e037      	b.n	800b3e4 <UART_SetConfig+0x1374>
 800b374:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b378:	f04f 0400 	mov.w	r4, #0
 800b37c:	e032      	b.n	800b3e4 <UART_SetConfig+0x1374>
 800b37e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b382:	f04f 0400 	mov.w	r4, #0
 800b386:	e02d      	b.n	800b3e4 <UART_SetConfig+0x1374>
 800b388:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b38c:	f04f 0400 	mov.w	r4, #0
 800b390:	e028      	b.n	800b3e4 <UART_SetConfig+0x1374>
 800b392:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b396:	f04f 0400 	mov.w	r4, #0
 800b39a:	e023      	b.n	800b3e4 <UART_SetConfig+0x1374>
 800b39c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b3a0:	f04f 0400 	mov.w	r4, #0
 800b3a4:	e01e      	b.n	800b3e4 <UART_SetConfig+0x1374>
 800b3a6:	4b7e      	ldr	r3, [pc, #504]	; (800b5a0 <UART_SetConfig+0x1530>)
 800b3a8:	f04f 0400 	mov.w	r4, #0
 800b3ac:	e01a      	b.n	800b3e4 <UART_SetConfig+0x1374>
 800b3ae:	4b7d      	ldr	r3, [pc, #500]	; (800b5a4 <UART_SetConfig+0x1534>)
 800b3b0:	f04f 0400 	mov.w	r4, #0
 800b3b4:	e016      	b.n	800b3e4 <UART_SetConfig+0x1374>
 800b3b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b3ba:	f04f 0400 	mov.w	r4, #0
 800b3be:	e011      	b.n	800b3e4 <UART_SetConfig+0x1374>
 800b3c0:	4b79      	ldr	r3, [pc, #484]	; (800b5a8 <UART_SetConfig+0x1538>)
 800b3c2:	f04f 0400 	mov.w	r4, #0
 800b3c6:	e00d      	b.n	800b3e4 <UART_SetConfig+0x1374>
 800b3c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b3cc:	f04f 0400 	mov.w	r4, #0
 800b3d0:	e008      	b.n	800b3e4 <UART_SetConfig+0x1374>
 800b3d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b3d6:	f04f 0400 	mov.w	r4, #0
 800b3da:	e003      	b.n	800b3e4 <UART_SetConfig+0x1374>
 800b3dc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b3e0:	f04f 0400 	mov.w	r4, #0
 800b3e4:	687a      	ldr	r2, [r7, #4]
 800b3e6:	6852      	ldr	r2, [r2, #4]
 800b3e8:	0852      	lsrs	r2, r2, #1
 800b3ea:	4611      	mov	r1, r2
 800b3ec:	f04f 0200 	mov.w	r2, #0
 800b3f0:	eb13 0b01 	adds.w	fp, r3, r1
 800b3f4:	eb44 0c02 	adc.w	ip, r4, r2
 800b3f8:	4658      	mov	r0, fp
 800b3fa:	4661      	mov	r1, ip
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	685b      	ldr	r3, [r3, #4]
 800b400:	f04f 0400 	mov.w	r4, #0
 800b404:	461a      	mov	r2, r3
 800b406:	4623      	mov	r3, r4
 800b408:	f7f4 ff66 	bl	80002d8 <__aeabi_uldivmod>
 800b40c:	4603      	mov	r3, r0
 800b40e:	460c      	mov	r4, r1
 800b410:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b412:	e003      	b.n	800b41c <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800b414:	2301      	movs	r3, #1
 800b416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800b41a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b41c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b41e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b422:	d309      	bcc.n	800b438 <UART_SetConfig+0x13c8>
 800b424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b426:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b42a:	d205      	bcs.n	800b438 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b432:	60da      	str	r2, [r3, #12]
 800b434:	f000 bf85 	b.w	800c342 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 800b438:	2301      	movs	r3, #1
 800b43a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b43e:	f000 bf80 	b.w	800c342 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	69db      	ldr	r3, [r3, #28]
 800b446:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b44a:	f040 83da 	bne.w	800bc02 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800b44e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b452:	2b40      	cmp	r3, #64	; 0x40
 800b454:	f200 83b3 	bhi.w	800bbbe <UART_SetConfig+0x1b4e>
 800b458:	a201      	add	r2, pc, #4	; (adr r2, 800b460 <UART_SetConfig+0x13f0>)
 800b45a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b45e:	bf00      	nop
 800b460:	0800b5ad 	.word	0x0800b5ad
 800b464:	0800b665 	.word	0x0800b665
 800b468:	0800bbbf 	.word	0x0800bbbf
 800b46c:	0800bbbf 	.word	0x0800bbbf
 800b470:	0800b71d 	.word	0x0800b71d
 800b474:	0800bbbf 	.word	0x0800bbbf
 800b478:	0800bbbf 	.word	0x0800bbbf
 800b47c:	0800bbbf 	.word	0x0800bbbf
 800b480:	0800b7d9 	.word	0x0800b7d9
 800b484:	0800bbbf 	.word	0x0800bbbf
 800b488:	0800bbbf 	.word	0x0800bbbf
 800b48c:	0800bbbf 	.word	0x0800bbbf
 800b490:	0800bbbf 	.word	0x0800bbbf
 800b494:	0800bbbf 	.word	0x0800bbbf
 800b498:	0800bbbf 	.word	0x0800bbbf
 800b49c:	0800bbbf 	.word	0x0800bbbf
 800b4a0:	0800b895 	.word	0x0800b895
 800b4a4:	0800bbbf 	.word	0x0800bbbf
 800b4a8:	0800bbbf 	.word	0x0800bbbf
 800b4ac:	0800bbbf 	.word	0x0800bbbf
 800b4b0:	0800bbbf 	.word	0x0800bbbf
 800b4b4:	0800bbbf 	.word	0x0800bbbf
 800b4b8:	0800bbbf 	.word	0x0800bbbf
 800b4bc:	0800bbbf 	.word	0x0800bbbf
 800b4c0:	0800bbbf 	.word	0x0800bbbf
 800b4c4:	0800bbbf 	.word	0x0800bbbf
 800b4c8:	0800bbbf 	.word	0x0800bbbf
 800b4cc:	0800bbbf 	.word	0x0800bbbf
 800b4d0:	0800bbbf 	.word	0x0800bbbf
 800b4d4:	0800bbbf 	.word	0x0800bbbf
 800b4d8:	0800bbbf 	.word	0x0800bbbf
 800b4dc:	0800bbbf 	.word	0x0800bbbf
 800b4e0:	0800ba07 	.word	0x0800ba07
 800b4e4:	0800bbbf 	.word	0x0800bbbf
 800b4e8:	0800bbbf 	.word	0x0800bbbf
 800b4ec:	0800bbbf 	.word	0x0800bbbf
 800b4f0:	0800bbbf 	.word	0x0800bbbf
 800b4f4:	0800bbbf 	.word	0x0800bbbf
 800b4f8:	0800bbbf 	.word	0x0800bbbf
 800b4fc:	0800bbbf 	.word	0x0800bbbf
 800b500:	0800bbbf 	.word	0x0800bbbf
 800b504:	0800bbbf 	.word	0x0800bbbf
 800b508:	0800bbbf 	.word	0x0800bbbf
 800b50c:	0800bbbf 	.word	0x0800bbbf
 800b510:	0800bbbf 	.word	0x0800bbbf
 800b514:	0800bbbf 	.word	0x0800bbbf
 800b518:	0800bbbf 	.word	0x0800bbbf
 800b51c:	0800bbbf 	.word	0x0800bbbf
 800b520:	0800bbbf 	.word	0x0800bbbf
 800b524:	0800bbbf 	.word	0x0800bbbf
 800b528:	0800bbbf 	.word	0x0800bbbf
 800b52c:	0800bbbf 	.word	0x0800bbbf
 800b530:	0800bbbf 	.word	0x0800bbbf
 800b534:	0800bbbf 	.word	0x0800bbbf
 800b538:	0800bbbf 	.word	0x0800bbbf
 800b53c:	0800bbbf 	.word	0x0800bbbf
 800b540:	0800bbbf 	.word	0x0800bbbf
 800b544:	0800bbbf 	.word	0x0800bbbf
 800b548:	0800bbbf 	.word	0x0800bbbf
 800b54c:	0800bbbf 	.word	0x0800bbbf
 800b550:	0800bbbf 	.word	0x0800bbbf
 800b554:	0800bbbf 	.word	0x0800bbbf
 800b558:	0800bbbf 	.word	0x0800bbbf
 800b55c:	0800bbbf 	.word	0x0800bbbf
 800b560:	0800bafd 	.word	0x0800bafd
 800b564:	f3af 8000 	nop.w
 800b568:	05161500 	.word	0x05161500
 800b56c:	00000000 	.word	0x00000000
 800b570:	0a2c2a00 	.word	0x0a2c2a00
 800b574:	00000000 	.word	0x00000000
 800b578:	003d0900 	.word	0x003d0900
 800b57c:	3d090000 	.word	0x3d090000
 800b580:	007a1200 	.word	0x007a1200
 800b584:	00f42400 	.word	0x00f42400
 800b588:	01e84800 	.word	0x01e84800
 800b58c:	03d09000 	.word	0x03d09000
 800b590:	061a8000 	.word	0x061a8000
 800b594:	07a12000 	.word	0x07a12000
 800b598:	0f424000 	.word	0x0f424000
 800b59c:	1e848000 	.word	0x1e848000
 800b5a0:	000aaa00 	.word	0x000aaa00
 800b5a4:	000ccc00 	.word	0x000ccc00
 800b5a8:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b5ac:	f7fb fe48 	bl	8007240 <HAL_RCC_GetPCLK1Freq>
 800b5b0:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d044      	beq.n	800b644 <UART_SetConfig+0x15d4>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5be:	2b01      	cmp	r3, #1
 800b5c0:	d03e      	beq.n	800b640 <UART_SetConfig+0x15d0>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c6:	2b02      	cmp	r3, #2
 800b5c8:	d038      	beq.n	800b63c <UART_SetConfig+0x15cc>
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ce:	2b03      	cmp	r3, #3
 800b5d0:	d032      	beq.n	800b638 <UART_SetConfig+0x15c8>
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d6:	2b04      	cmp	r3, #4
 800b5d8:	d02c      	beq.n	800b634 <UART_SetConfig+0x15c4>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5de:	2b05      	cmp	r3, #5
 800b5e0:	d026      	beq.n	800b630 <UART_SetConfig+0x15c0>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e6:	2b06      	cmp	r3, #6
 800b5e8:	d020      	beq.n	800b62c <UART_SetConfig+0x15bc>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ee:	2b07      	cmp	r3, #7
 800b5f0:	d01a      	beq.n	800b628 <UART_SetConfig+0x15b8>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5f6:	2b08      	cmp	r3, #8
 800b5f8:	d014      	beq.n	800b624 <UART_SetConfig+0x15b4>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5fe:	2b09      	cmp	r3, #9
 800b600:	d00e      	beq.n	800b620 <UART_SetConfig+0x15b0>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b606:	2b0a      	cmp	r3, #10
 800b608:	d008      	beq.n	800b61c <UART_SetConfig+0x15ac>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b60e:	2b0b      	cmp	r3, #11
 800b610:	d102      	bne.n	800b618 <UART_SetConfig+0x15a8>
 800b612:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b616:	e016      	b.n	800b646 <UART_SetConfig+0x15d6>
 800b618:	2301      	movs	r3, #1
 800b61a:	e014      	b.n	800b646 <UART_SetConfig+0x15d6>
 800b61c:	2380      	movs	r3, #128	; 0x80
 800b61e:	e012      	b.n	800b646 <UART_SetConfig+0x15d6>
 800b620:	2340      	movs	r3, #64	; 0x40
 800b622:	e010      	b.n	800b646 <UART_SetConfig+0x15d6>
 800b624:	2320      	movs	r3, #32
 800b626:	e00e      	b.n	800b646 <UART_SetConfig+0x15d6>
 800b628:	2310      	movs	r3, #16
 800b62a:	e00c      	b.n	800b646 <UART_SetConfig+0x15d6>
 800b62c:	230c      	movs	r3, #12
 800b62e:	e00a      	b.n	800b646 <UART_SetConfig+0x15d6>
 800b630:	230a      	movs	r3, #10
 800b632:	e008      	b.n	800b646 <UART_SetConfig+0x15d6>
 800b634:	2308      	movs	r3, #8
 800b636:	e006      	b.n	800b646 <UART_SetConfig+0x15d6>
 800b638:	2306      	movs	r3, #6
 800b63a:	e004      	b.n	800b646 <UART_SetConfig+0x15d6>
 800b63c:	2304      	movs	r3, #4
 800b63e:	e002      	b.n	800b646 <UART_SetConfig+0x15d6>
 800b640:	2302      	movs	r3, #2
 800b642:	e000      	b.n	800b646 <UART_SetConfig+0x15d6>
 800b644:	2301      	movs	r3, #1
 800b646:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b648:	fbb2 f3f3 	udiv	r3, r2, r3
 800b64c:	005a      	lsls	r2, r3, #1
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	085b      	lsrs	r3, r3, #1
 800b654:	441a      	add	r2, r3
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b65e:	b29b      	uxth	r3, r3
 800b660:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b662:	e2b0      	b.n	800bbc6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b664:	f7fb fe02 	bl	800726c <HAL_RCC_GetPCLK2Freq>
 800b668:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d044      	beq.n	800b6fc <UART_SetConfig+0x168c>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b676:	2b01      	cmp	r3, #1
 800b678:	d03e      	beq.n	800b6f8 <UART_SetConfig+0x1688>
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b67e:	2b02      	cmp	r3, #2
 800b680:	d038      	beq.n	800b6f4 <UART_SetConfig+0x1684>
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b686:	2b03      	cmp	r3, #3
 800b688:	d032      	beq.n	800b6f0 <UART_SetConfig+0x1680>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b68e:	2b04      	cmp	r3, #4
 800b690:	d02c      	beq.n	800b6ec <UART_SetConfig+0x167c>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b696:	2b05      	cmp	r3, #5
 800b698:	d026      	beq.n	800b6e8 <UART_SetConfig+0x1678>
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b69e:	2b06      	cmp	r3, #6
 800b6a0:	d020      	beq.n	800b6e4 <UART_SetConfig+0x1674>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a6:	2b07      	cmp	r3, #7
 800b6a8:	d01a      	beq.n	800b6e0 <UART_SetConfig+0x1670>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ae:	2b08      	cmp	r3, #8
 800b6b0:	d014      	beq.n	800b6dc <UART_SetConfig+0x166c>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b6:	2b09      	cmp	r3, #9
 800b6b8:	d00e      	beq.n	800b6d8 <UART_SetConfig+0x1668>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6be:	2b0a      	cmp	r3, #10
 800b6c0:	d008      	beq.n	800b6d4 <UART_SetConfig+0x1664>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c6:	2b0b      	cmp	r3, #11
 800b6c8:	d102      	bne.n	800b6d0 <UART_SetConfig+0x1660>
 800b6ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6ce:	e016      	b.n	800b6fe <UART_SetConfig+0x168e>
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	e014      	b.n	800b6fe <UART_SetConfig+0x168e>
 800b6d4:	2380      	movs	r3, #128	; 0x80
 800b6d6:	e012      	b.n	800b6fe <UART_SetConfig+0x168e>
 800b6d8:	2340      	movs	r3, #64	; 0x40
 800b6da:	e010      	b.n	800b6fe <UART_SetConfig+0x168e>
 800b6dc:	2320      	movs	r3, #32
 800b6de:	e00e      	b.n	800b6fe <UART_SetConfig+0x168e>
 800b6e0:	2310      	movs	r3, #16
 800b6e2:	e00c      	b.n	800b6fe <UART_SetConfig+0x168e>
 800b6e4:	230c      	movs	r3, #12
 800b6e6:	e00a      	b.n	800b6fe <UART_SetConfig+0x168e>
 800b6e8:	230a      	movs	r3, #10
 800b6ea:	e008      	b.n	800b6fe <UART_SetConfig+0x168e>
 800b6ec:	2308      	movs	r3, #8
 800b6ee:	e006      	b.n	800b6fe <UART_SetConfig+0x168e>
 800b6f0:	2306      	movs	r3, #6
 800b6f2:	e004      	b.n	800b6fe <UART_SetConfig+0x168e>
 800b6f4:	2304      	movs	r3, #4
 800b6f6:	e002      	b.n	800b6fe <UART_SetConfig+0x168e>
 800b6f8:	2302      	movs	r3, #2
 800b6fa:	e000      	b.n	800b6fe <UART_SetConfig+0x168e>
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b700:	fbb2 f3f3 	udiv	r3, r2, r3
 800b704:	005a      	lsls	r2, r3, #1
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	085b      	lsrs	r3, r3, #1
 800b70c:	441a      	add	r2, r3
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	685b      	ldr	r3, [r3, #4]
 800b712:	fbb2 f3f3 	udiv	r3, r2, r3
 800b716:	b29b      	uxth	r3, r3
 800b718:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b71a:	e254      	b.n	800bbc6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b71c:	f107 0318 	add.w	r3, r7, #24
 800b720:	4618      	mov	r0, r3
 800b722:	f7fc ff41 	bl	80085a8 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b726:	69fa      	ldr	r2, [r7, #28]
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d044      	beq.n	800b7ba <UART_SetConfig+0x174a>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b734:	2b01      	cmp	r3, #1
 800b736:	d03e      	beq.n	800b7b6 <UART_SetConfig+0x1746>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b73c:	2b02      	cmp	r3, #2
 800b73e:	d038      	beq.n	800b7b2 <UART_SetConfig+0x1742>
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b744:	2b03      	cmp	r3, #3
 800b746:	d032      	beq.n	800b7ae <UART_SetConfig+0x173e>
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b74c:	2b04      	cmp	r3, #4
 800b74e:	d02c      	beq.n	800b7aa <UART_SetConfig+0x173a>
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b754:	2b05      	cmp	r3, #5
 800b756:	d026      	beq.n	800b7a6 <UART_SetConfig+0x1736>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b75c:	2b06      	cmp	r3, #6
 800b75e:	d020      	beq.n	800b7a2 <UART_SetConfig+0x1732>
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b764:	2b07      	cmp	r3, #7
 800b766:	d01a      	beq.n	800b79e <UART_SetConfig+0x172e>
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b76c:	2b08      	cmp	r3, #8
 800b76e:	d014      	beq.n	800b79a <UART_SetConfig+0x172a>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b774:	2b09      	cmp	r3, #9
 800b776:	d00e      	beq.n	800b796 <UART_SetConfig+0x1726>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b77c:	2b0a      	cmp	r3, #10
 800b77e:	d008      	beq.n	800b792 <UART_SetConfig+0x1722>
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b784:	2b0b      	cmp	r3, #11
 800b786:	d102      	bne.n	800b78e <UART_SetConfig+0x171e>
 800b788:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b78c:	e016      	b.n	800b7bc <UART_SetConfig+0x174c>
 800b78e:	2301      	movs	r3, #1
 800b790:	e014      	b.n	800b7bc <UART_SetConfig+0x174c>
 800b792:	2380      	movs	r3, #128	; 0x80
 800b794:	e012      	b.n	800b7bc <UART_SetConfig+0x174c>
 800b796:	2340      	movs	r3, #64	; 0x40
 800b798:	e010      	b.n	800b7bc <UART_SetConfig+0x174c>
 800b79a:	2320      	movs	r3, #32
 800b79c:	e00e      	b.n	800b7bc <UART_SetConfig+0x174c>
 800b79e:	2310      	movs	r3, #16
 800b7a0:	e00c      	b.n	800b7bc <UART_SetConfig+0x174c>
 800b7a2:	230c      	movs	r3, #12
 800b7a4:	e00a      	b.n	800b7bc <UART_SetConfig+0x174c>
 800b7a6:	230a      	movs	r3, #10
 800b7a8:	e008      	b.n	800b7bc <UART_SetConfig+0x174c>
 800b7aa:	2308      	movs	r3, #8
 800b7ac:	e006      	b.n	800b7bc <UART_SetConfig+0x174c>
 800b7ae:	2306      	movs	r3, #6
 800b7b0:	e004      	b.n	800b7bc <UART_SetConfig+0x174c>
 800b7b2:	2304      	movs	r3, #4
 800b7b4:	e002      	b.n	800b7bc <UART_SetConfig+0x174c>
 800b7b6:	2302      	movs	r3, #2
 800b7b8:	e000      	b.n	800b7bc <UART_SetConfig+0x174c>
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7c0:	005a      	lsls	r2, r3, #1
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	685b      	ldr	r3, [r3, #4]
 800b7c6:	085b      	lsrs	r3, r3, #1
 800b7c8:	441a      	add	r2, r3
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7d2:	b29b      	uxth	r3, r3
 800b7d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b7d6:	e1f6      	b.n	800bbc6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7d8:	f107 030c 	add.w	r3, r7, #12
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f7fd f82f 	bl	8008840 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7e2:	693a      	ldr	r2, [r7, #16]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d044      	beq.n	800b876 <UART_SetConfig+0x1806>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d03e      	beq.n	800b872 <UART_SetConfig+0x1802>
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f8:	2b02      	cmp	r3, #2
 800b7fa:	d038      	beq.n	800b86e <UART_SetConfig+0x17fe>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b800:	2b03      	cmp	r3, #3
 800b802:	d032      	beq.n	800b86a <UART_SetConfig+0x17fa>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b808:	2b04      	cmp	r3, #4
 800b80a:	d02c      	beq.n	800b866 <UART_SetConfig+0x17f6>
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b810:	2b05      	cmp	r3, #5
 800b812:	d026      	beq.n	800b862 <UART_SetConfig+0x17f2>
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b818:	2b06      	cmp	r3, #6
 800b81a:	d020      	beq.n	800b85e <UART_SetConfig+0x17ee>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b820:	2b07      	cmp	r3, #7
 800b822:	d01a      	beq.n	800b85a <UART_SetConfig+0x17ea>
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b828:	2b08      	cmp	r3, #8
 800b82a:	d014      	beq.n	800b856 <UART_SetConfig+0x17e6>
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b830:	2b09      	cmp	r3, #9
 800b832:	d00e      	beq.n	800b852 <UART_SetConfig+0x17e2>
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b838:	2b0a      	cmp	r3, #10
 800b83a:	d008      	beq.n	800b84e <UART_SetConfig+0x17de>
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b840:	2b0b      	cmp	r3, #11
 800b842:	d102      	bne.n	800b84a <UART_SetConfig+0x17da>
 800b844:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b848:	e016      	b.n	800b878 <UART_SetConfig+0x1808>
 800b84a:	2301      	movs	r3, #1
 800b84c:	e014      	b.n	800b878 <UART_SetConfig+0x1808>
 800b84e:	2380      	movs	r3, #128	; 0x80
 800b850:	e012      	b.n	800b878 <UART_SetConfig+0x1808>
 800b852:	2340      	movs	r3, #64	; 0x40
 800b854:	e010      	b.n	800b878 <UART_SetConfig+0x1808>
 800b856:	2320      	movs	r3, #32
 800b858:	e00e      	b.n	800b878 <UART_SetConfig+0x1808>
 800b85a:	2310      	movs	r3, #16
 800b85c:	e00c      	b.n	800b878 <UART_SetConfig+0x1808>
 800b85e:	230c      	movs	r3, #12
 800b860:	e00a      	b.n	800b878 <UART_SetConfig+0x1808>
 800b862:	230a      	movs	r3, #10
 800b864:	e008      	b.n	800b878 <UART_SetConfig+0x1808>
 800b866:	2308      	movs	r3, #8
 800b868:	e006      	b.n	800b878 <UART_SetConfig+0x1808>
 800b86a:	2306      	movs	r3, #6
 800b86c:	e004      	b.n	800b878 <UART_SetConfig+0x1808>
 800b86e:	2304      	movs	r3, #4
 800b870:	e002      	b.n	800b878 <UART_SetConfig+0x1808>
 800b872:	2302      	movs	r3, #2
 800b874:	e000      	b.n	800b878 <UART_SetConfig+0x1808>
 800b876:	2301      	movs	r3, #1
 800b878:	fbb2 f3f3 	udiv	r3, r2, r3
 800b87c:	005a      	lsls	r2, r3, #1
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	685b      	ldr	r3, [r3, #4]
 800b882:	085b      	lsrs	r3, r3, #1
 800b884:	441a      	add	r2, r3
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	685b      	ldr	r3, [r3, #4]
 800b88a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b88e:	b29b      	uxth	r3, r3
 800b890:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b892:	e198      	b.n	800bbc6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b894:	4b87      	ldr	r3, [pc, #540]	; (800bab4 <UART_SetConfig+0x1a44>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f003 0320 	and.w	r3, r3, #32
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d05e      	beq.n	800b95e <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b8a0:	4b84      	ldr	r3, [pc, #528]	; (800bab4 <UART_SetConfig+0x1a44>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	08db      	lsrs	r3, r3, #3
 800b8a6:	f003 0303 	and.w	r3, r3, #3
 800b8aa:	4a83      	ldr	r2, [pc, #524]	; (800bab8 <UART_SetConfig+0x1a48>)
 800b8ac:	40da      	lsrs	r2, r3
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d044      	beq.n	800b940 <UART_SetConfig+0x18d0>
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ba:	2b01      	cmp	r3, #1
 800b8bc:	d03e      	beq.n	800b93c <UART_SetConfig+0x18cc>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c2:	2b02      	cmp	r3, #2
 800b8c4:	d038      	beq.n	800b938 <UART_SetConfig+0x18c8>
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ca:	2b03      	cmp	r3, #3
 800b8cc:	d032      	beq.n	800b934 <UART_SetConfig+0x18c4>
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d2:	2b04      	cmp	r3, #4
 800b8d4:	d02c      	beq.n	800b930 <UART_SetConfig+0x18c0>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8da:	2b05      	cmp	r3, #5
 800b8dc:	d026      	beq.n	800b92c <UART_SetConfig+0x18bc>
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8e2:	2b06      	cmp	r3, #6
 800b8e4:	d020      	beq.n	800b928 <UART_SetConfig+0x18b8>
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ea:	2b07      	cmp	r3, #7
 800b8ec:	d01a      	beq.n	800b924 <UART_SetConfig+0x18b4>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f2:	2b08      	cmp	r3, #8
 800b8f4:	d014      	beq.n	800b920 <UART_SetConfig+0x18b0>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8fa:	2b09      	cmp	r3, #9
 800b8fc:	d00e      	beq.n	800b91c <UART_SetConfig+0x18ac>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b902:	2b0a      	cmp	r3, #10
 800b904:	d008      	beq.n	800b918 <UART_SetConfig+0x18a8>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b90a:	2b0b      	cmp	r3, #11
 800b90c:	d102      	bne.n	800b914 <UART_SetConfig+0x18a4>
 800b90e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b912:	e016      	b.n	800b942 <UART_SetConfig+0x18d2>
 800b914:	2301      	movs	r3, #1
 800b916:	e014      	b.n	800b942 <UART_SetConfig+0x18d2>
 800b918:	2380      	movs	r3, #128	; 0x80
 800b91a:	e012      	b.n	800b942 <UART_SetConfig+0x18d2>
 800b91c:	2340      	movs	r3, #64	; 0x40
 800b91e:	e010      	b.n	800b942 <UART_SetConfig+0x18d2>
 800b920:	2320      	movs	r3, #32
 800b922:	e00e      	b.n	800b942 <UART_SetConfig+0x18d2>
 800b924:	2310      	movs	r3, #16
 800b926:	e00c      	b.n	800b942 <UART_SetConfig+0x18d2>
 800b928:	230c      	movs	r3, #12
 800b92a:	e00a      	b.n	800b942 <UART_SetConfig+0x18d2>
 800b92c:	230a      	movs	r3, #10
 800b92e:	e008      	b.n	800b942 <UART_SetConfig+0x18d2>
 800b930:	2308      	movs	r3, #8
 800b932:	e006      	b.n	800b942 <UART_SetConfig+0x18d2>
 800b934:	2306      	movs	r3, #6
 800b936:	e004      	b.n	800b942 <UART_SetConfig+0x18d2>
 800b938:	2304      	movs	r3, #4
 800b93a:	e002      	b.n	800b942 <UART_SetConfig+0x18d2>
 800b93c:	2302      	movs	r3, #2
 800b93e:	e000      	b.n	800b942 <UART_SetConfig+0x18d2>
 800b940:	2301      	movs	r3, #1
 800b942:	fbb2 f3f3 	udiv	r3, r2, r3
 800b946:	005a      	lsls	r2, r3, #1
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	685b      	ldr	r3, [r3, #4]
 800b94c:	085b      	lsrs	r3, r3, #1
 800b94e:	441a      	add	r2, r3
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	685b      	ldr	r3, [r3, #4]
 800b954:	fbb2 f3f3 	udiv	r3, r2, r3
 800b958:	b29b      	uxth	r3, r3
 800b95a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800b95c:	e133      	b.n	800bbc6 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b962:	2b00      	cmp	r3, #0
 800b964:	d043      	beq.n	800b9ee <UART_SetConfig+0x197e>
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b96a:	2b01      	cmp	r3, #1
 800b96c:	d03d      	beq.n	800b9ea <UART_SetConfig+0x197a>
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b972:	2b02      	cmp	r3, #2
 800b974:	d037      	beq.n	800b9e6 <UART_SetConfig+0x1976>
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b97a:	2b03      	cmp	r3, #3
 800b97c:	d031      	beq.n	800b9e2 <UART_SetConfig+0x1972>
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b982:	2b04      	cmp	r3, #4
 800b984:	d02b      	beq.n	800b9de <UART_SetConfig+0x196e>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b98a:	2b05      	cmp	r3, #5
 800b98c:	d025      	beq.n	800b9da <UART_SetConfig+0x196a>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b992:	2b06      	cmp	r3, #6
 800b994:	d01f      	beq.n	800b9d6 <UART_SetConfig+0x1966>
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b99a:	2b07      	cmp	r3, #7
 800b99c:	d019      	beq.n	800b9d2 <UART_SetConfig+0x1962>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a2:	2b08      	cmp	r3, #8
 800b9a4:	d013      	beq.n	800b9ce <UART_SetConfig+0x195e>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9aa:	2b09      	cmp	r3, #9
 800b9ac:	d00d      	beq.n	800b9ca <UART_SetConfig+0x195a>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b2:	2b0a      	cmp	r3, #10
 800b9b4:	d007      	beq.n	800b9c6 <UART_SetConfig+0x1956>
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ba:	2b0b      	cmp	r3, #11
 800b9bc:	d101      	bne.n	800b9c2 <UART_SetConfig+0x1952>
 800b9be:	4b3f      	ldr	r3, [pc, #252]	; (800babc <UART_SetConfig+0x1a4c>)
 800b9c0:	e016      	b.n	800b9f0 <UART_SetConfig+0x1980>
 800b9c2:	4b3f      	ldr	r3, [pc, #252]	; (800bac0 <UART_SetConfig+0x1a50>)
 800b9c4:	e014      	b.n	800b9f0 <UART_SetConfig+0x1980>
 800b9c6:	4b3f      	ldr	r3, [pc, #252]	; (800bac4 <UART_SetConfig+0x1a54>)
 800b9c8:	e012      	b.n	800b9f0 <UART_SetConfig+0x1980>
 800b9ca:	4b3f      	ldr	r3, [pc, #252]	; (800bac8 <UART_SetConfig+0x1a58>)
 800b9cc:	e010      	b.n	800b9f0 <UART_SetConfig+0x1980>
 800b9ce:	4b3f      	ldr	r3, [pc, #252]	; (800bacc <UART_SetConfig+0x1a5c>)
 800b9d0:	e00e      	b.n	800b9f0 <UART_SetConfig+0x1980>
 800b9d2:	4b3f      	ldr	r3, [pc, #252]	; (800bad0 <UART_SetConfig+0x1a60>)
 800b9d4:	e00c      	b.n	800b9f0 <UART_SetConfig+0x1980>
 800b9d6:	4b3f      	ldr	r3, [pc, #252]	; (800bad4 <UART_SetConfig+0x1a64>)
 800b9d8:	e00a      	b.n	800b9f0 <UART_SetConfig+0x1980>
 800b9da:	4b3f      	ldr	r3, [pc, #252]	; (800bad8 <UART_SetConfig+0x1a68>)
 800b9dc:	e008      	b.n	800b9f0 <UART_SetConfig+0x1980>
 800b9de:	4b3f      	ldr	r3, [pc, #252]	; (800badc <UART_SetConfig+0x1a6c>)
 800b9e0:	e006      	b.n	800b9f0 <UART_SetConfig+0x1980>
 800b9e2:	4b3f      	ldr	r3, [pc, #252]	; (800bae0 <UART_SetConfig+0x1a70>)
 800b9e4:	e004      	b.n	800b9f0 <UART_SetConfig+0x1980>
 800b9e6:	4b3f      	ldr	r3, [pc, #252]	; (800bae4 <UART_SetConfig+0x1a74>)
 800b9e8:	e002      	b.n	800b9f0 <UART_SetConfig+0x1980>
 800b9ea:	4b33      	ldr	r3, [pc, #204]	; (800bab8 <UART_SetConfig+0x1a48>)
 800b9ec:	e000      	b.n	800b9f0 <UART_SetConfig+0x1980>
 800b9ee:	4b34      	ldr	r3, [pc, #208]	; (800bac0 <UART_SetConfig+0x1a50>)
 800b9f0:	687a      	ldr	r2, [r7, #4]
 800b9f2:	6852      	ldr	r2, [r2, #4]
 800b9f4:	0852      	lsrs	r2, r2, #1
 800b9f6:	441a      	add	r2, r3
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	685b      	ldr	r3, [r3, #4]
 800b9fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba00:	b29b      	uxth	r3, r3
 800ba02:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ba04:	e0df      	b.n	800bbc6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d045      	beq.n	800ba9a <UART_SetConfig+0x1a2a>
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba12:	2b01      	cmp	r3, #1
 800ba14:	d03f      	beq.n	800ba96 <UART_SetConfig+0x1a26>
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba1a:	2b02      	cmp	r3, #2
 800ba1c:	d039      	beq.n	800ba92 <UART_SetConfig+0x1a22>
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba22:	2b03      	cmp	r3, #3
 800ba24:	d033      	beq.n	800ba8e <UART_SetConfig+0x1a1e>
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba2a:	2b04      	cmp	r3, #4
 800ba2c:	d02d      	beq.n	800ba8a <UART_SetConfig+0x1a1a>
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba32:	2b05      	cmp	r3, #5
 800ba34:	d027      	beq.n	800ba86 <UART_SetConfig+0x1a16>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba3a:	2b06      	cmp	r3, #6
 800ba3c:	d021      	beq.n	800ba82 <UART_SetConfig+0x1a12>
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba42:	2b07      	cmp	r3, #7
 800ba44:	d01b      	beq.n	800ba7e <UART_SetConfig+0x1a0e>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba4a:	2b08      	cmp	r3, #8
 800ba4c:	d015      	beq.n	800ba7a <UART_SetConfig+0x1a0a>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba52:	2b09      	cmp	r3, #9
 800ba54:	d00f      	beq.n	800ba76 <UART_SetConfig+0x1a06>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba5a:	2b0a      	cmp	r3, #10
 800ba5c:	d008      	beq.n	800ba70 <UART_SetConfig+0x1a00>
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba62:	2b0b      	cmp	r3, #11
 800ba64:	d102      	bne.n	800ba6c <UART_SetConfig+0x19fc>
 800ba66:	f647 2312 	movw	r3, #31250	; 0x7a12
 800ba6a:	e017      	b.n	800ba9c <UART_SetConfig+0x1a2c>
 800ba6c:	4b18      	ldr	r3, [pc, #96]	; (800bad0 <UART_SetConfig+0x1a60>)
 800ba6e:	e015      	b.n	800ba9c <UART_SetConfig+0x1a2c>
 800ba70:	f24f 4324 	movw	r3, #62500	; 0xf424
 800ba74:	e012      	b.n	800ba9c <UART_SetConfig+0x1a2c>
 800ba76:	4b1c      	ldr	r3, [pc, #112]	; (800bae8 <UART_SetConfig+0x1a78>)
 800ba78:	e010      	b.n	800ba9c <UART_SetConfig+0x1a2c>
 800ba7a:	4b1c      	ldr	r3, [pc, #112]	; (800baec <UART_SetConfig+0x1a7c>)
 800ba7c:	e00e      	b.n	800ba9c <UART_SetConfig+0x1a2c>
 800ba7e:	4b0f      	ldr	r3, [pc, #60]	; (800babc <UART_SetConfig+0x1a4c>)
 800ba80:	e00c      	b.n	800ba9c <UART_SetConfig+0x1a2c>
 800ba82:	4b1b      	ldr	r3, [pc, #108]	; (800baf0 <UART_SetConfig+0x1a80>)
 800ba84:	e00a      	b.n	800ba9c <UART_SetConfig+0x1a2c>
 800ba86:	4b1b      	ldr	r3, [pc, #108]	; (800baf4 <UART_SetConfig+0x1a84>)
 800ba88:	e008      	b.n	800ba9c <UART_SetConfig+0x1a2c>
 800ba8a:	4b0e      	ldr	r3, [pc, #56]	; (800bac4 <UART_SetConfig+0x1a54>)
 800ba8c:	e006      	b.n	800ba9c <UART_SetConfig+0x1a2c>
 800ba8e:	4b1a      	ldr	r3, [pc, #104]	; (800baf8 <UART_SetConfig+0x1a88>)
 800ba90:	e004      	b.n	800ba9c <UART_SetConfig+0x1a2c>
 800ba92:	4b0d      	ldr	r3, [pc, #52]	; (800bac8 <UART_SetConfig+0x1a58>)
 800ba94:	e002      	b.n	800ba9c <UART_SetConfig+0x1a2c>
 800ba96:	4b0d      	ldr	r3, [pc, #52]	; (800bacc <UART_SetConfig+0x1a5c>)
 800ba98:	e000      	b.n	800ba9c <UART_SetConfig+0x1a2c>
 800ba9a:	4b0d      	ldr	r3, [pc, #52]	; (800bad0 <UART_SetConfig+0x1a60>)
 800ba9c:	687a      	ldr	r2, [r7, #4]
 800ba9e:	6852      	ldr	r2, [r2, #4]
 800baa0:	0852      	lsrs	r2, r2, #1
 800baa2:	441a      	add	r2, r3
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	fbb2 f3f3 	udiv	r3, r2, r3
 800baac:	b29b      	uxth	r3, r3
 800baae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bab0:	e089      	b.n	800bbc6 <UART_SetConfig+0x1b56>
 800bab2:	bf00      	nop
 800bab4:	58024400 	.word	0x58024400
 800bab8:	03d09000 	.word	0x03d09000
 800babc:	0007a120 	.word	0x0007a120
 800bac0:	07a12000 	.word	0x07a12000
 800bac4:	000f4240 	.word	0x000f4240
 800bac8:	001e8480 	.word	0x001e8480
 800bacc:	003d0900 	.word	0x003d0900
 800bad0:	007a1200 	.word	0x007a1200
 800bad4:	00a2c2aa 	.word	0x00a2c2aa
 800bad8:	00c35000 	.word	0x00c35000
 800badc:	00f42400 	.word	0x00f42400
 800bae0:	01458554 	.word	0x01458554
 800bae4:	01e84800 	.word	0x01e84800
 800bae8:	0001e848 	.word	0x0001e848
 800baec:	0003d090 	.word	0x0003d090
 800baf0:	000a2c2a 	.word	0x000a2c2a
 800baf4:	000c3500 	.word	0x000c3500
 800baf8:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d04f      	beq.n	800bba4 <UART_SetConfig+0x1b34>
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb08:	2b01      	cmp	r3, #1
 800bb0a:	d048      	beq.n	800bb9e <UART_SetConfig+0x1b2e>
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb10:	2b02      	cmp	r3, #2
 800bb12:	d041      	beq.n	800bb98 <UART_SetConfig+0x1b28>
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb18:	2b03      	cmp	r3, #3
 800bb1a:	d03a      	beq.n	800bb92 <UART_SetConfig+0x1b22>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb20:	2b04      	cmp	r3, #4
 800bb22:	d033      	beq.n	800bb8c <UART_SetConfig+0x1b1c>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb28:	2b05      	cmp	r3, #5
 800bb2a:	d02c      	beq.n	800bb86 <UART_SetConfig+0x1b16>
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb30:	2b06      	cmp	r3, #6
 800bb32:	d025      	beq.n	800bb80 <UART_SetConfig+0x1b10>
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb38:	2b07      	cmp	r3, #7
 800bb3a:	d01e      	beq.n	800bb7a <UART_SetConfig+0x1b0a>
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb40:	2b08      	cmp	r3, #8
 800bb42:	d017      	beq.n	800bb74 <UART_SetConfig+0x1b04>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb48:	2b09      	cmp	r3, #9
 800bb4a:	d010      	beq.n	800bb6e <UART_SetConfig+0x1afe>
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb50:	2b0a      	cmp	r3, #10
 800bb52:	d009      	beq.n	800bb68 <UART_SetConfig+0x1af8>
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb58:	2b0b      	cmp	r3, #11
 800bb5a:	d102      	bne.n	800bb62 <UART_SetConfig+0x1af2>
 800bb5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb60:	e022      	b.n	800bba8 <UART_SetConfig+0x1b38>
 800bb62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800bb66:	e01f      	b.n	800bba8 <UART_SetConfig+0x1b38>
 800bb68:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb6c:	e01c      	b.n	800bba8 <UART_SetConfig+0x1b38>
 800bb6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb72:	e019      	b.n	800bba8 <UART_SetConfig+0x1b38>
 800bb74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bb78:	e016      	b.n	800bba8 <UART_SetConfig+0x1b38>
 800bb7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb7e:	e013      	b.n	800bba8 <UART_SetConfig+0x1b38>
 800bb80:	f241 5354 	movw	r3, #5460	; 0x1554
 800bb84:	e010      	b.n	800bba8 <UART_SetConfig+0x1b38>
 800bb86:	f641 1398 	movw	r3, #6552	; 0x1998
 800bb8a:	e00d      	b.n	800bba8 <UART_SetConfig+0x1b38>
 800bb8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bb90:	e00a      	b.n	800bba8 <UART_SetConfig+0x1b38>
 800bb92:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800bb96:	e007      	b.n	800bba8 <UART_SetConfig+0x1b38>
 800bb98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bb9c:	e004      	b.n	800bba8 <UART_SetConfig+0x1b38>
 800bb9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bba2:	e001      	b.n	800bba8 <UART_SetConfig+0x1b38>
 800bba4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800bba8:	687a      	ldr	r2, [r7, #4]
 800bbaa:	6852      	ldr	r2, [r2, #4]
 800bbac:	0852      	lsrs	r2, r2, #1
 800bbae:	441a      	add	r2, r3
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	685b      	ldr	r3, [r3, #4]
 800bbb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbb8:	b29b      	uxth	r3, r3
 800bbba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bbbc:	e003      	b.n	800bbc6 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800bbc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bbc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbc8:	2b0f      	cmp	r3, #15
 800bbca:	d916      	bls.n	800bbfa <UART_SetConfig+0x1b8a>
 800bbcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbd2:	d212      	bcs.n	800bbfa <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bbd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbd6:	b29b      	uxth	r3, r3
 800bbd8:	f023 030f 	bic.w	r3, r3, #15
 800bbdc:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bbde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbe0:	085b      	lsrs	r3, r3, #1
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	f003 0307 	and.w	r3, r3, #7
 800bbe8:	b29a      	uxth	r2, r3
 800bbea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bbec:	4313      	orrs	r3, r2
 800bbee:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800bbf6:	60da      	str	r2, [r3, #12]
 800bbf8:	e3a3      	b.n	800c342 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc00:	e39f      	b.n	800c342 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800bc02:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bc06:	2b40      	cmp	r3, #64	; 0x40
 800bc08:	f200 8388 	bhi.w	800c31c <UART_SetConfig+0x22ac>
 800bc0c:	a201      	add	r2, pc, #4	; (adr r2, 800bc14 <UART_SetConfig+0x1ba4>)
 800bc0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc12:	bf00      	nop
 800bc14:	0800bd19 	.word	0x0800bd19
 800bc18:	0800bdcf 	.word	0x0800bdcf
 800bc1c:	0800c31d 	.word	0x0800c31d
 800bc20:	0800c31d 	.word	0x0800c31d
 800bc24:	0800be85 	.word	0x0800be85
 800bc28:	0800c31d 	.word	0x0800c31d
 800bc2c:	0800c31d 	.word	0x0800c31d
 800bc30:	0800c31d 	.word	0x0800c31d
 800bc34:	0800bf3f 	.word	0x0800bf3f
 800bc38:	0800c31d 	.word	0x0800c31d
 800bc3c:	0800c31d 	.word	0x0800c31d
 800bc40:	0800c31d 	.word	0x0800c31d
 800bc44:	0800c31d 	.word	0x0800c31d
 800bc48:	0800c31d 	.word	0x0800c31d
 800bc4c:	0800c31d 	.word	0x0800c31d
 800bc50:	0800c31d 	.word	0x0800c31d
 800bc54:	0800bff9 	.word	0x0800bff9
 800bc58:	0800c31d 	.word	0x0800c31d
 800bc5c:	0800c31d 	.word	0x0800c31d
 800bc60:	0800c31d 	.word	0x0800c31d
 800bc64:	0800c31d 	.word	0x0800c31d
 800bc68:	0800c31d 	.word	0x0800c31d
 800bc6c:	0800c31d 	.word	0x0800c31d
 800bc70:	0800c31d 	.word	0x0800c31d
 800bc74:	0800c31d 	.word	0x0800c31d
 800bc78:	0800c31d 	.word	0x0800c31d
 800bc7c:	0800c31d 	.word	0x0800c31d
 800bc80:	0800c31d 	.word	0x0800c31d
 800bc84:	0800c31d 	.word	0x0800c31d
 800bc88:	0800c31d 	.word	0x0800c31d
 800bc8c:	0800c31d 	.word	0x0800c31d
 800bc90:	0800c31d 	.word	0x0800c31d
 800bc94:	0800c169 	.word	0x0800c169
 800bc98:	0800c31d 	.word	0x0800c31d
 800bc9c:	0800c31d 	.word	0x0800c31d
 800bca0:	0800c31d 	.word	0x0800c31d
 800bca4:	0800c31d 	.word	0x0800c31d
 800bca8:	0800c31d 	.word	0x0800c31d
 800bcac:	0800c31d 	.word	0x0800c31d
 800bcb0:	0800c31d 	.word	0x0800c31d
 800bcb4:	0800c31d 	.word	0x0800c31d
 800bcb8:	0800c31d 	.word	0x0800c31d
 800bcbc:	0800c31d 	.word	0x0800c31d
 800bcc0:	0800c31d 	.word	0x0800c31d
 800bcc4:	0800c31d 	.word	0x0800c31d
 800bcc8:	0800c31d 	.word	0x0800c31d
 800bccc:	0800c31d 	.word	0x0800c31d
 800bcd0:	0800c31d 	.word	0x0800c31d
 800bcd4:	0800c31d 	.word	0x0800c31d
 800bcd8:	0800c31d 	.word	0x0800c31d
 800bcdc:	0800c31d 	.word	0x0800c31d
 800bce0:	0800c31d 	.word	0x0800c31d
 800bce4:	0800c31d 	.word	0x0800c31d
 800bce8:	0800c31d 	.word	0x0800c31d
 800bcec:	0800c31d 	.word	0x0800c31d
 800bcf0:	0800c31d 	.word	0x0800c31d
 800bcf4:	0800c31d 	.word	0x0800c31d
 800bcf8:	0800c31d 	.word	0x0800c31d
 800bcfc:	0800c31d 	.word	0x0800c31d
 800bd00:	0800c31d 	.word	0x0800c31d
 800bd04:	0800c31d 	.word	0x0800c31d
 800bd08:	0800c31d 	.word	0x0800c31d
 800bd0c:	0800c31d 	.word	0x0800c31d
 800bd10:	0800c31d 	.word	0x0800c31d
 800bd14:	0800c25d 	.word	0x0800c25d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd18:	f7fb fa92 	bl	8007240 <HAL_RCC_GetPCLK1Freq>
 800bd1c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d044      	beq.n	800bdb0 <UART_SetConfig+0x1d40>
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd2a:	2b01      	cmp	r3, #1
 800bd2c:	d03e      	beq.n	800bdac <UART_SetConfig+0x1d3c>
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd32:	2b02      	cmp	r3, #2
 800bd34:	d038      	beq.n	800bda8 <UART_SetConfig+0x1d38>
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd3a:	2b03      	cmp	r3, #3
 800bd3c:	d032      	beq.n	800bda4 <UART_SetConfig+0x1d34>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd42:	2b04      	cmp	r3, #4
 800bd44:	d02c      	beq.n	800bda0 <UART_SetConfig+0x1d30>
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd4a:	2b05      	cmp	r3, #5
 800bd4c:	d026      	beq.n	800bd9c <UART_SetConfig+0x1d2c>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd52:	2b06      	cmp	r3, #6
 800bd54:	d020      	beq.n	800bd98 <UART_SetConfig+0x1d28>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd5a:	2b07      	cmp	r3, #7
 800bd5c:	d01a      	beq.n	800bd94 <UART_SetConfig+0x1d24>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd62:	2b08      	cmp	r3, #8
 800bd64:	d014      	beq.n	800bd90 <UART_SetConfig+0x1d20>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd6a:	2b09      	cmp	r3, #9
 800bd6c:	d00e      	beq.n	800bd8c <UART_SetConfig+0x1d1c>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd72:	2b0a      	cmp	r3, #10
 800bd74:	d008      	beq.n	800bd88 <UART_SetConfig+0x1d18>
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd7a:	2b0b      	cmp	r3, #11
 800bd7c:	d102      	bne.n	800bd84 <UART_SetConfig+0x1d14>
 800bd7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd82:	e016      	b.n	800bdb2 <UART_SetConfig+0x1d42>
 800bd84:	2301      	movs	r3, #1
 800bd86:	e014      	b.n	800bdb2 <UART_SetConfig+0x1d42>
 800bd88:	2380      	movs	r3, #128	; 0x80
 800bd8a:	e012      	b.n	800bdb2 <UART_SetConfig+0x1d42>
 800bd8c:	2340      	movs	r3, #64	; 0x40
 800bd8e:	e010      	b.n	800bdb2 <UART_SetConfig+0x1d42>
 800bd90:	2320      	movs	r3, #32
 800bd92:	e00e      	b.n	800bdb2 <UART_SetConfig+0x1d42>
 800bd94:	2310      	movs	r3, #16
 800bd96:	e00c      	b.n	800bdb2 <UART_SetConfig+0x1d42>
 800bd98:	230c      	movs	r3, #12
 800bd9a:	e00a      	b.n	800bdb2 <UART_SetConfig+0x1d42>
 800bd9c:	230a      	movs	r3, #10
 800bd9e:	e008      	b.n	800bdb2 <UART_SetConfig+0x1d42>
 800bda0:	2308      	movs	r3, #8
 800bda2:	e006      	b.n	800bdb2 <UART_SetConfig+0x1d42>
 800bda4:	2306      	movs	r3, #6
 800bda6:	e004      	b.n	800bdb2 <UART_SetConfig+0x1d42>
 800bda8:	2304      	movs	r3, #4
 800bdaa:	e002      	b.n	800bdb2 <UART_SetConfig+0x1d42>
 800bdac:	2302      	movs	r3, #2
 800bdae:	e000      	b.n	800bdb2 <UART_SetConfig+0x1d42>
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdb4:	fbb2 f2f3 	udiv	r2, r2, r3
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	685b      	ldr	r3, [r3, #4]
 800bdbc:	085b      	lsrs	r3, r3, #1
 800bdbe:	441a      	add	r2, r3
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	685b      	ldr	r3, [r3, #4]
 800bdc4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdc8:	b29b      	uxth	r3, r3
 800bdca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bdcc:	e2aa      	b.n	800c324 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bdce:	f7fb fa4d 	bl	800726c <HAL_RCC_GetPCLK2Freq>
 800bdd2:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d044      	beq.n	800be66 <UART_SetConfig+0x1df6>
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bde0:	2b01      	cmp	r3, #1
 800bde2:	d03e      	beq.n	800be62 <UART_SetConfig+0x1df2>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bde8:	2b02      	cmp	r3, #2
 800bdea:	d038      	beq.n	800be5e <UART_SetConfig+0x1dee>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf0:	2b03      	cmp	r3, #3
 800bdf2:	d032      	beq.n	800be5a <UART_SetConfig+0x1dea>
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf8:	2b04      	cmp	r3, #4
 800bdfa:	d02c      	beq.n	800be56 <UART_SetConfig+0x1de6>
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be00:	2b05      	cmp	r3, #5
 800be02:	d026      	beq.n	800be52 <UART_SetConfig+0x1de2>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be08:	2b06      	cmp	r3, #6
 800be0a:	d020      	beq.n	800be4e <UART_SetConfig+0x1dde>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be10:	2b07      	cmp	r3, #7
 800be12:	d01a      	beq.n	800be4a <UART_SetConfig+0x1dda>
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be18:	2b08      	cmp	r3, #8
 800be1a:	d014      	beq.n	800be46 <UART_SetConfig+0x1dd6>
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be20:	2b09      	cmp	r3, #9
 800be22:	d00e      	beq.n	800be42 <UART_SetConfig+0x1dd2>
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be28:	2b0a      	cmp	r3, #10
 800be2a:	d008      	beq.n	800be3e <UART_SetConfig+0x1dce>
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be30:	2b0b      	cmp	r3, #11
 800be32:	d102      	bne.n	800be3a <UART_SetConfig+0x1dca>
 800be34:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be38:	e016      	b.n	800be68 <UART_SetConfig+0x1df8>
 800be3a:	2301      	movs	r3, #1
 800be3c:	e014      	b.n	800be68 <UART_SetConfig+0x1df8>
 800be3e:	2380      	movs	r3, #128	; 0x80
 800be40:	e012      	b.n	800be68 <UART_SetConfig+0x1df8>
 800be42:	2340      	movs	r3, #64	; 0x40
 800be44:	e010      	b.n	800be68 <UART_SetConfig+0x1df8>
 800be46:	2320      	movs	r3, #32
 800be48:	e00e      	b.n	800be68 <UART_SetConfig+0x1df8>
 800be4a:	2310      	movs	r3, #16
 800be4c:	e00c      	b.n	800be68 <UART_SetConfig+0x1df8>
 800be4e:	230c      	movs	r3, #12
 800be50:	e00a      	b.n	800be68 <UART_SetConfig+0x1df8>
 800be52:	230a      	movs	r3, #10
 800be54:	e008      	b.n	800be68 <UART_SetConfig+0x1df8>
 800be56:	2308      	movs	r3, #8
 800be58:	e006      	b.n	800be68 <UART_SetConfig+0x1df8>
 800be5a:	2306      	movs	r3, #6
 800be5c:	e004      	b.n	800be68 <UART_SetConfig+0x1df8>
 800be5e:	2304      	movs	r3, #4
 800be60:	e002      	b.n	800be68 <UART_SetConfig+0x1df8>
 800be62:	2302      	movs	r3, #2
 800be64:	e000      	b.n	800be68 <UART_SetConfig+0x1df8>
 800be66:	2301      	movs	r3, #1
 800be68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be6a:	fbb2 f2f3 	udiv	r2, r2, r3
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	685b      	ldr	r3, [r3, #4]
 800be72:	085b      	lsrs	r3, r3, #1
 800be74:	441a      	add	r2, r3
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	685b      	ldr	r3, [r3, #4]
 800be7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800be7e:	b29b      	uxth	r3, r3
 800be80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800be82:	e24f      	b.n	800c324 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be84:	f107 0318 	add.w	r3, r7, #24
 800be88:	4618      	mov	r0, r3
 800be8a:	f7fc fb8d 	bl	80085a8 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be8e:	69fa      	ldr	r2, [r7, #28]
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be94:	2b00      	cmp	r3, #0
 800be96:	d044      	beq.n	800bf22 <UART_SetConfig+0x1eb2>
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d03e      	beq.n	800bf1e <UART_SetConfig+0x1eae>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bea4:	2b02      	cmp	r3, #2
 800bea6:	d038      	beq.n	800bf1a <UART_SetConfig+0x1eaa>
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beac:	2b03      	cmp	r3, #3
 800beae:	d032      	beq.n	800bf16 <UART_SetConfig+0x1ea6>
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beb4:	2b04      	cmp	r3, #4
 800beb6:	d02c      	beq.n	800bf12 <UART_SetConfig+0x1ea2>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bebc:	2b05      	cmp	r3, #5
 800bebe:	d026      	beq.n	800bf0e <UART_SetConfig+0x1e9e>
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bec4:	2b06      	cmp	r3, #6
 800bec6:	d020      	beq.n	800bf0a <UART_SetConfig+0x1e9a>
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800becc:	2b07      	cmp	r3, #7
 800bece:	d01a      	beq.n	800bf06 <UART_SetConfig+0x1e96>
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bed4:	2b08      	cmp	r3, #8
 800bed6:	d014      	beq.n	800bf02 <UART_SetConfig+0x1e92>
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bedc:	2b09      	cmp	r3, #9
 800bede:	d00e      	beq.n	800befe <UART_SetConfig+0x1e8e>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee4:	2b0a      	cmp	r3, #10
 800bee6:	d008      	beq.n	800befa <UART_SetConfig+0x1e8a>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beec:	2b0b      	cmp	r3, #11
 800beee:	d102      	bne.n	800bef6 <UART_SetConfig+0x1e86>
 800bef0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bef4:	e016      	b.n	800bf24 <UART_SetConfig+0x1eb4>
 800bef6:	2301      	movs	r3, #1
 800bef8:	e014      	b.n	800bf24 <UART_SetConfig+0x1eb4>
 800befa:	2380      	movs	r3, #128	; 0x80
 800befc:	e012      	b.n	800bf24 <UART_SetConfig+0x1eb4>
 800befe:	2340      	movs	r3, #64	; 0x40
 800bf00:	e010      	b.n	800bf24 <UART_SetConfig+0x1eb4>
 800bf02:	2320      	movs	r3, #32
 800bf04:	e00e      	b.n	800bf24 <UART_SetConfig+0x1eb4>
 800bf06:	2310      	movs	r3, #16
 800bf08:	e00c      	b.n	800bf24 <UART_SetConfig+0x1eb4>
 800bf0a:	230c      	movs	r3, #12
 800bf0c:	e00a      	b.n	800bf24 <UART_SetConfig+0x1eb4>
 800bf0e:	230a      	movs	r3, #10
 800bf10:	e008      	b.n	800bf24 <UART_SetConfig+0x1eb4>
 800bf12:	2308      	movs	r3, #8
 800bf14:	e006      	b.n	800bf24 <UART_SetConfig+0x1eb4>
 800bf16:	2306      	movs	r3, #6
 800bf18:	e004      	b.n	800bf24 <UART_SetConfig+0x1eb4>
 800bf1a:	2304      	movs	r3, #4
 800bf1c:	e002      	b.n	800bf24 <UART_SetConfig+0x1eb4>
 800bf1e:	2302      	movs	r3, #2
 800bf20:	e000      	b.n	800bf24 <UART_SetConfig+0x1eb4>
 800bf22:	2301      	movs	r3, #1
 800bf24:	fbb2 f2f3 	udiv	r2, r2, r3
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	685b      	ldr	r3, [r3, #4]
 800bf2c:	085b      	lsrs	r3, r3, #1
 800bf2e:	441a      	add	r2, r3
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf38:	b29b      	uxth	r3, r3
 800bf3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bf3c:	e1f2      	b.n	800c324 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf3e:	f107 030c 	add.w	r3, r7, #12
 800bf42:	4618      	mov	r0, r3
 800bf44:	f7fc fc7c 	bl	8008840 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf48:	693a      	ldr	r2, [r7, #16]
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d044      	beq.n	800bfdc <UART_SetConfig+0x1f6c>
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf56:	2b01      	cmp	r3, #1
 800bf58:	d03e      	beq.n	800bfd8 <UART_SetConfig+0x1f68>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf5e:	2b02      	cmp	r3, #2
 800bf60:	d038      	beq.n	800bfd4 <UART_SetConfig+0x1f64>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf66:	2b03      	cmp	r3, #3
 800bf68:	d032      	beq.n	800bfd0 <UART_SetConfig+0x1f60>
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf6e:	2b04      	cmp	r3, #4
 800bf70:	d02c      	beq.n	800bfcc <UART_SetConfig+0x1f5c>
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf76:	2b05      	cmp	r3, #5
 800bf78:	d026      	beq.n	800bfc8 <UART_SetConfig+0x1f58>
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf7e:	2b06      	cmp	r3, #6
 800bf80:	d020      	beq.n	800bfc4 <UART_SetConfig+0x1f54>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf86:	2b07      	cmp	r3, #7
 800bf88:	d01a      	beq.n	800bfc0 <UART_SetConfig+0x1f50>
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf8e:	2b08      	cmp	r3, #8
 800bf90:	d014      	beq.n	800bfbc <UART_SetConfig+0x1f4c>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf96:	2b09      	cmp	r3, #9
 800bf98:	d00e      	beq.n	800bfb8 <UART_SetConfig+0x1f48>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf9e:	2b0a      	cmp	r3, #10
 800bfa0:	d008      	beq.n	800bfb4 <UART_SetConfig+0x1f44>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfa6:	2b0b      	cmp	r3, #11
 800bfa8:	d102      	bne.n	800bfb0 <UART_SetConfig+0x1f40>
 800bfaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bfae:	e016      	b.n	800bfde <UART_SetConfig+0x1f6e>
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	e014      	b.n	800bfde <UART_SetConfig+0x1f6e>
 800bfb4:	2380      	movs	r3, #128	; 0x80
 800bfb6:	e012      	b.n	800bfde <UART_SetConfig+0x1f6e>
 800bfb8:	2340      	movs	r3, #64	; 0x40
 800bfba:	e010      	b.n	800bfde <UART_SetConfig+0x1f6e>
 800bfbc:	2320      	movs	r3, #32
 800bfbe:	e00e      	b.n	800bfde <UART_SetConfig+0x1f6e>
 800bfc0:	2310      	movs	r3, #16
 800bfc2:	e00c      	b.n	800bfde <UART_SetConfig+0x1f6e>
 800bfc4:	230c      	movs	r3, #12
 800bfc6:	e00a      	b.n	800bfde <UART_SetConfig+0x1f6e>
 800bfc8:	230a      	movs	r3, #10
 800bfca:	e008      	b.n	800bfde <UART_SetConfig+0x1f6e>
 800bfcc:	2308      	movs	r3, #8
 800bfce:	e006      	b.n	800bfde <UART_SetConfig+0x1f6e>
 800bfd0:	2306      	movs	r3, #6
 800bfd2:	e004      	b.n	800bfde <UART_SetConfig+0x1f6e>
 800bfd4:	2304      	movs	r3, #4
 800bfd6:	e002      	b.n	800bfde <UART_SetConfig+0x1f6e>
 800bfd8:	2302      	movs	r3, #2
 800bfda:	e000      	b.n	800bfde <UART_SetConfig+0x1f6e>
 800bfdc:	2301      	movs	r3, #1
 800bfde:	fbb2 f2f3 	udiv	r2, r2, r3
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	685b      	ldr	r3, [r3, #4]
 800bfe6:	085b      	lsrs	r3, r3, #1
 800bfe8:	441a      	add	r2, r3
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	685b      	ldr	r3, [r3, #4]
 800bfee:	fbb2 f3f3 	udiv	r3, r2, r3
 800bff2:	b29b      	uxth	r3, r3
 800bff4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bff6:	e195      	b.n	800c324 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bff8:	4b87      	ldr	r3, [pc, #540]	; (800c218 <UART_SetConfig+0x21a8>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	f003 0320 	and.w	r3, r3, #32
 800c000:	2b00      	cmp	r3, #0
 800c002:	d05d      	beq.n	800c0c0 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c004:	4b84      	ldr	r3, [pc, #528]	; (800c218 <UART_SetConfig+0x21a8>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	08db      	lsrs	r3, r3, #3
 800c00a:	f003 0303 	and.w	r3, r3, #3
 800c00e:	4a83      	ldr	r2, [pc, #524]	; (800c21c <UART_SetConfig+0x21ac>)
 800c010:	40da      	lsrs	r2, r3
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c016:	2b00      	cmp	r3, #0
 800c018:	d044      	beq.n	800c0a4 <UART_SetConfig+0x2034>
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c01e:	2b01      	cmp	r3, #1
 800c020:	d03e      	beq.n	800c0a0 <UART_SetConfig+0x2030>
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c026:	2b02      	cmp	r3, #2
 800c028:	d038      	beq.n	800c09c <UART_SetConfig+0x202c>
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c02e:	2b03      	cmp	r3, #3
 800c030:	d032      	beq.n	800c098 <UART_SetConfig+0x2028>
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c036:	2b04      	cmp	r3, #4
 800c038:	d02c      	beq.n	800c094 <UART_SetConfig+0x2024>
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c03e:	2b05      	cmp	r3, #5
 800c040:	d026      	beq.n	800c090 <UART_SetConfig+0x2020>
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c046:	2b06      	cmp	r3, #6
 800c048:	d020      	beq.n	800c08c <UART_SetConfig+0x201c>
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c04e:	2b07      	cmp	r3, #7
 800c050:	d01a      	beq.n	800c088 <UART_SetConfig+0x2018>
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c056:	2b08      	cmp	r3, #8
 800c058:	d014      	beq.n	800c084 <UART_SetConfig+0x2014>
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c05e:	2b09      	cmp	r3, #9
 800c060:	d00e      	beq.n	800c080 <UART_SetConfig+0x2010>
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c066:	2b0a      	cmp	r3, #10
 800c068:	d008      	beq.n	800c07c <UART_SetConfig+0x200c>
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c06e:	2b0b      	cmp	r3, #11
 800c070:	d102      	bne.n	800c078 <UART_SetConfig+0x2008>
 800c072:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c076:	e016      	b.n	800c0a6 <UART_SetConfig+0x2036>
 800c078:	2301      	movs	r3, #1
 800c07a:	e014      	b.n	800c0a6 <UART_SetConfig+0x2036>
 800c07c:	2380      	movs	r3, #128	; 0x80
 800c07e:	e012      	b.n	800c0a6 <UART_SetConfig+0x2036>
 800c080:	2340      	movs	r3, #64	; 0x40
 800c082:	e010      	b.n	800c0a6 <UART_SetConfig+0x2036>
 800c084:	2320      	movs	r3, #32
 800c086:	e00e      	b.n	800c0a6 <UART_SetConfig+0x2036>
 800c088:	2310      	movs	r3, #16
 800c08a:	e00c      	b.n	800c0a6 <UART_SetConfig+0x2036>
 800c08c:	230c      	movs	r3, #12
 800c08e:	e00a      	b.n	800c0a6 <UART_SetConfig+0x2036>
 800c090:	230a      	movs	r3, #10
 800c092:	e008      	b.n	800c0a6 <UART_SetConfig+0x2036>
 800c094:	2308      	movs	r3, #8
 800c096:	e006      	b.n	800c0a6 <UART_SetConfig+0x2036>
 800c098:	2306      	movs	r3, #6
 800c09a:	e004      	b.n	800c0a6 <UART_SetConfig+0x2036>
 800c09c:	2304      	movs	r3, #4
 800c09e:	e002      	b.n	800c0a6 <UART_SetConfig+0x2036>
 800c0a0:	2302      	movs	r3, #2
 800c0a2:	e000      	b.n	800c0a6 <UART_SetConfig+0x2036>
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	fbb2 f2f3 	udiv	r2, r2, r3
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	085b      	lsrs	r3, r3, #1
 800c0b0:	441a      	add	r2, r3
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	685b      	ldr	r3, [r3, #4]
 800c0b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0ba:	b29b      	uxth	r3, r3
 800c0bc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800c0be:	e131      	b.n	800c324 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d043      	beq.n	800c150 <UART_SetConfig+0x20e0>
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	d03d      	beq.n	800c14c <UART_SetConfig+0x20dc>
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0d4:	2b02      	cmp	r3, #2
 800c0d6:	d037      	beq.n	800c148 <UART_SetConfig+0x20d8>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0dc:	2b03      	cmp	r3, #3
 800c0de:	d031      	beq.n	800c144 <UART_SetConfig+0x20d4>
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0e4:	2b04      	cmp	r3, #4
 800c0e6:	d02b      	beq.n	800c140 <UART_SetConfig+0x20d0>
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0ec:	2b05      	cmp	r3, #5
 800c0ee:	d025      	beq.n	800c13c <UART_SetConfig+0x20cc>
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0f4:	2b06      	cmp	r3, #6
 800c0f6:	d01f      	beq.n	800c138 <UART_SetConfig+0x20c8>
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0fc:	2b07      	cmp	r3, #7
 800c0fe:	d019      	beq.n	800c134 <UART_SetConfig+0x20c4>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c104:	2b08      	cmp	r3, #8
 800c106:	d013      	beq.n	800c130 <UART_SetConfig+0x20c0>
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c10c:	2b09      	cmp	r3, #9
 800c10e:	d00d      	beq.n	800c12c <UART_SetConfig+0x20bc>
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c114:	2b0a      	cmp	r3, #10
 800c116:	d007      	beq.n	800c128 <UART_SetConfig+0x20b8>
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c11c:	2b0b      	cmp	r3, #11
 800c11e:	d101      	bne.n	800c124 <UART_SetConfig+0x20b4>
 800c120:	4b3f      	ldr	r3, [pc, #252]	; (800c220 <UART_SetConfig+0x21b0>)
 800c122:	e016      	b.n	800c152 <UART_SetConfig+0x20e2>
 800c124:	4b3d      	ldr	r3, [pc, #244]	; (800c21c <UART_SetConfig+0x21ac>)
 800c126:	e014      	b.n	800c152 <UART_SetConfig+0x20e2>
 800c128:	4b3e      	ldr	r3, [pc, #248]	; (800c224 <UART_SetConfig+0x21b4>)
 800c12a:	e012      	b.n	800c152 <UART_SetConfig+0x20e2>
 800c12c:	4b3e      	ldr	r3, [pc, #248]	; (800c228 <UART_SetConfig+0x21b8>)
 800c12e:	e010      	b.n	800c152 <UART_SetConfig+0x20e2>
 800c130:	4b3e      	ldr	r3, [pc, #248]	; (800c22c <UART_SetConfig+0x21bc>)
 800c132:	e00e      	b.n	800c152 <UART_SetConfig+0x20e2>
 800c134:	4b3e      	ldr	r3, [pc, #248]	; (800c230 <UART_SetConfig+0x21c0>)
 800c136:	e00c      	b.n	800c152 <UART_SetConfig+0x20e2>
 800c138:	4b3e      	ldr	r3, [pc, #248]	; (800c234 <UART_SetConfig+0x21c4>)
 800c13a:	e00a      	b.n	800c152 <UART_SetConfig+0x20e2>
 800c13c:	4b3e      	ldr	r3, [pc, #248]	; (800c238 <UART_SetConfig+0x21c8>)
 800c13e:	e008      	b.n	800c152 <UART_SetConfig+0x20e2>
 800c140:	4b3e      	ldr	r3, [pc, #248]	; (800c23c <UART_SetConfig+0x21cc>)
 800c142:	e006      	b.n	800c152 <UART_SetConfig+0x20e2>
 800c144:	4b3e      	ldr	r3, [pc, #248]	; (800c240 <UART_SetConfig+0x21d0>)
 800c146:	e004      	b.n	800c152 <UART_SetConfig+0x20e2>
 800c148:	4b3e      	ldr	r3, [pc, #248]	; (800c244 <UART_SetConfig+0x21d4>)
 800c14a:	e002      	b.n	800c152 <UART_SetConfig+0x20e2>
 800c14c:	4b3e      	ldr	r3, [pc, #248]	; (800c248 <UART_SetConfig+0x21d8>)
 800c14e:	e000      	b.n	800c152 <UART_SetConfig+0x20e2>
 800c150:	4b32      	ldr	r3, [pc, #200]	; (800c21c <UART_SetConfig+0x21ac>)
 800c152:	687a      	ldr	r2, [r7, #4]
 800c154:	6852      	ldr	r2, [r2, #4]
 800c156:	0852      	lsrs	r2, r2, #1
 800c158:	441a      	add	r2, r3
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	685b      	ldr	r3, [r3, #4]
 800c15e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c162:	b29b      	uxth	r3, r3
 800c164:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c166:	e0dd      	b.n	800c324 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d046      	beq.n	800c1fe <UART_SetConfig+0x218e>
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c174:	2b01      	cmp	r3, #1
 800c176:	d040      	beq.n	800c1fa <UART_SetConfig+0x218a>
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c17c:	2b02      	cmp	r3, #2
 800c17e:	d03a      	beq.n	800c1f6 <UART_SetConfig+0x2186>
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c184:	2b03      	cmp	r3, #3
 800c186:	d034      	beq.n	800c1f2 <UART_SetConfig+0x2182>
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c18c:	2b04      	cmp	r3, #4
 800c18e:	d02e      	beq.n	800c1ee <UART_SetConfig+0x217e>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c194:	2b05      	cmp	r3, #5
 800c196:	d028      	beq.n	800c1ea <UART_SetConfig+0x217a>
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c19c:	2b06      	cmp	r3, #6
 800c19e:	d022      	beq.n	800c1e6 <UART_SetConfig+0x2176>
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1a4:	2b07      	cmp	r3, #7
 800c1a6:	d01c      	beq.n	800c1e2 <UART_SetConfig+0x2172>
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ac:	2b08      	cmp	r3, #8
 800c1ae:	d016      	beq.n	800c1de <UART_SetConfig+0x216e>
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1b4:	2b09      	cmp	r3, #9
 800c1b6:	d00f      	beq.n	800c1d8 <UART_SetConfig+0x2168>
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1bc:	2b0a      	cmp	r3, #10
 800c1be:	d008      	beq.n	800c1d2 <UART_SetConfig+0x2162>
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1c4:	2b0b      	cmp	r3, #11
 800c1c6:	d102      	bne.n	800c1ce <UART_SetConfig+0x215e>
 800c1c8:	f643 5309 	movw	r3, #15625	; 0x3d09
 800c1cc:	e018      	b.n	800c200 <UART_SetConfig+0x2190>
 800c1ce:	4b18      	ldr	r3, [pc, #96]	; (800c230 <UART_SetConfig+0x21c0>)
 800c1d0:	e016      	b.n	800c200 <UART_SetConfig+0x2190>
 800c1d2:	f647 2312 	movw	r3, #31250	; 0x7a12
 800c1d6:	e013      	b.n	800c200 <UART_SetConfig+0x2190>
 800c1d8:	f24f 4324 	movw	r3, #62500	; 0xf424
 800c1dc:	e010      	b.n	800c200 <UART_SetConfig+0x2190>
 800c1de:	4b1b      	ldr	r3, [pc, #108]	; (800c24c <UART_SetConfig+0x21dc>)
 800c1e0:	e00e      	b.n	800c200 <UART_SetConfig+0x2190>
 800c1e2:	4b0f      	ldr	r3, [pc, #60]	; (800c220 <UART_SetConfig+0x21b0>)
 800c1e4:	e00c      	b.n	800c200 <UART_SetConfig+0x2190>
 800c1e6:	4b1a      	ldr	r3, [pc, #104]	; (800c250 <UART_SetConfig+0x21e0>)
 800c1e8:	e00a      	b.n	800c200 <UART_SetConfig+0x2190>
 800c1ea:	4b1a      	ldr	r3, [pc, #104]	; (800c254 <UART_SetConfig+0x21e4>)
 800c1ec:	e008      	b.n	800c200 <UART_SetConfig+0x2190>
 800c1ee:	4b0d      	ldr	r3, [pc, #52]	; (800c224 <UART_SetConfig+0x21b4>)
 800c1f0:	e006      	b.n	800c200 <UART_SetConfig+0x2190>
 800c1f2:	4b19      	ldr	r3, [pc, #100]	; (800c258 <UART_SetConfig+0x21e8>)
 800c1f4:	e004      	b.n	800c200 <UART_SetConfig+0x2190>
 800c1f6:	4b0c      	ldr	r3, [pc, #48]	; (800c228 <UART_SetConfig+0x21b8>)
 800c1f8:	e002      	b.n	800c200 <UART_SetConfig+0x2190>
 800c1fa:	4b0c      	ldr	r3, [pc, #48]	; (800c22c <UART_SetConfig+0x21bc>)
 800c1fc:	e000      	b.n	800c200 <UART_SetConfig+0x2190>
 800c1fe:	4b0c      	ldr	r3, [pc, #48]	; (800c230 <UART_SetConfig+0x21c0>)
 800c200:	687a      	ldr	r2, [r7, #4]
 800c202:	6852      	ldr	r2, [r2, #4]
 800c204:	0852      	lsrs	r2, r2, #1
 800c206:	441a      	add	r2, r3
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	685b      	ldr	r3, [r3, #4]
 800c20c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c210:	b29b      	uxth	r3, r3
 800c212:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c214:	e086      	b.n	800c324 <UART_SetConfig+0x22b4>
 800c216:	bf00      	nop
 800c218:	58024400 	.word	0x58024400
 800c21c:	03d09000 	.word	0x03d09000
 800c220:	0003d090 	.word	0x0003d090
 800c224:	0007a120 	.word	0x0007a120
 800c228:	000f4240 	.word	0x000f4240
 800c22c:	001e8480 	.word	0x001e8480
 800c230:	003d0900 	.word	0x003d0900
 800c234:	00516155 	.word	0x00516155
 800c238:	0061a800 	.word	0x0061a800
 800c23c:	007a1200 	.word	0x007a1200
 800c240:	00a2c2aa 	.word	0x00a2c2aa
 800c244:	00f42400 	.word	0x00f42400
 800c248:	01e84800 	.word	0x01e84800
 800c24c:	0001e848 	.word	0x0001e848
 800c250:	00051615 	.word	0x00051615
 800c254:	00061a80 	.word	0x00061a80
 800c258:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c260:	2b00      	cmp	r3, #0
 800c262:	d04e      	beq.n	800c302 <UART_SetConfig+0x2292>
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c268:	2b01      	cmp	r3, #1
 800c26a:	d047      	beq.n	800c2fc <UART_SetConfig+0x228c>
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c270:	2b02      	cmp	r3, #2
 800c272:	d040      	beq.n	800c2f6 <UART_SetConfig+0x2286>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c278:	2b03      	cmp	r3, #3
 800c27a:	d039      	beq.n	800c2f0 <UART_SetConfig+0x2280>
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c280:	2b04      	cmp	r3, #4
 800c282:	d032      	beq.n	800c2ea <UART_SetConfig+0x227a>
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c288:	2b05      	cmp	r3, #5
 800c28a:	d02b      	beq.n	800c2e4 <UART_SetConfig+0x2274>
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c290:	2b06      	cmp	r3, #6
 800c292:	d024      	beq.n	800c2de <UART_SetConfig+0x226e>
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c298:	2b07      	cmp	r3, #7
 800c29a:	d01d      	beq.n	800c2d8 <UART_SetConfig+0x2268>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2a0:	2b08      	cmp	r3, #8
 800c2a2:	d016      	beq.n	800c2d2 <UART_SetConfig+0x2262>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2a8:	2b09      	cmp	r3, #9
 800c2aa:	d00f      	beq.n	800c2cc <UART_SetConfig+0x225c>
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2b0:	2b0a      	cmp	r3, #10
 800c2b2:	d008      	beq.n	800c2c6 <UART_SetConfig+0x2256>
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2b8:	2b0b      	cmp	r3, #11
 800c2ba:	d101      	bne.n	800c2c0 <UART_SetConfig+0x2250>
 800c2bc:	2380      	movs	r3, #128	; 0x80
 800c2be:	e022      	b.n	800c306 <UART_SetConfig+0x2296>
 800c2c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c2c4:	e01f      	b.n	800c306 <UART_SetConfig+0x2296>
 800c2c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c2ca:	e01c      	b.n	800c306 <UART_SetConfig+0x2296>
 800c2cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c2d0:	e019      	b.n	800c306 <UART_SetConfig+0x2296>
 800c2d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2d6:	e016      	b.n	800c306 <UART_SetConfig+0x2296>
 800c2d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c2dc:	e013      	b.n	800c306 <UART_SetConfig+0x2296>
 800c2de:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800c2e2:	e010      	b.n	800c306 <UART_SetConfig+0x2296>
 800c2e4:	f640 43cc 	movw	r3, #3276	; 0xccc
 800c2e8:	e00d      	b.n	800c306 <UART_SetConfig+0x2296>
 800c2ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c2ee:	e00a      	b.n	800c306 <UART_SetConfig+0x2296>
 800c2f0:	f241 5355 	movw	r3, #5461	; 0x1555
 800c2f4:	e007      	b.n	800c306 <UART_SetConfig+0x2296>
 800c2f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c2fa:	e004      	b.n	800c306 <UART_SetConfig+0x2296>
 800c2fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c300:	e001      	b.n	800c306 <UART_SetConfig+0x2296>
 800c302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c306:	687a      	ldr	r2, [r7, #4]
 800c308:	6852      	ldr	r2, [r2, #4]
 800c30a:	0852      	lsrs	r2, r2, #1
 800c30c:	441a      	add	r2, r3
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	685b      	ldr	r3, [r3, #4]
 800c312:	fbb2 f3f3 	udiv	r3, r2, r3
 800c316:	b29b      	uxth	r3, r3
 800c318:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c31a:	e003      	b.n	800c324 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800c31c:	2301      	movs	r3, #1
 800c31e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800c322:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c326:	2b0f      	cmp	r3, #15
 800c328:	d908      	bls.n	800c33c <UART_SetConfig+0x22cc>
 800c32a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c32c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c330:	d204      	bcs.n	800c33c <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c338:	60da      	str	r2, [r3, #12]
 800c33a:	e002      	b.n	800c342 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800c33c:	2301      	movs	r3, #1
 800c33e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	2201      	movs	r2, #1
 800c346:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	2201      	movs	r2, #1
 800c34e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2200      	movs	r2, #0
 800c356:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2200      	movs	r2, #0
 800c35c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800c35e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800c362:	4618      	mov	r0, r3
 800c364:	3740      	adds	r7, #64	; 0x40
 800c366:	46bd      	mov	sp, r7
 800c368:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800c36c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c36c:	b480      	push	{r7}
 800c36e:	b083      	sub	sp, #12
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c378:	f003 0301 	and.w	r3, r3, #1
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d00a      	beq.n	800c396 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	685b      	ldr	r3, [r3, #4]
 800c386:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	430a      	orrs	r2, r1
 800c394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c39a:	f003 0302 	and.w	r3, r3, #2
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d00a      	beq.n	800c3b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	685b      	ldr	r3, [r3, #4]
 800c3a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	430a      	orrs	r2, r1
 800c3b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3bc:	f003 0304 	and.w	r3, r3, #4
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d00a      	beq.n	800c3da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	685b      	ldr	r3, [r3, #4]
 800c3ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	430a      	orrs	r2, r1
 800c3d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3de:	f003 0308 	and.w	r3, r3, #8
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d00a      	beq.n	800c3fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	685b      	ldr	r3, [r3, #4]
 800c3ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	430a      	orrs	r2, r1
 800c3fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c400:	f003 0310 	and.w	r3, r3, #16
 800c404:	2b00      	cmp	r3, #0
 800c406:	d00a      	beq.n	800c41e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	689b      	ldr	r3, [r3, #8]
 800c40e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	430a      	orrs	r2, r1
 800c41c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c422:	f003 0320 	and.w	r3, r3, #32
 800c426:	2b00      	cmp	r3, #0
 800c428:	d00a      	beq.n	800c440 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	689b      	ldr	r3, [r3, #8]
 800c430:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	430a      	orrs	r2, r1
 800c43e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d01a      	beq.n	800c482 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	685b      	ldr	r3, [r3, #4]
 800c452:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	430a      	orrs	r2, r1
 800c460:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c466:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c46a:	d10a      	bne.n	800c482 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	685b      	ldr	r3, [r3, #4]
 800c472:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	430a      	orrs	r2, r1
 800c480:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d00a      	beq.n	800c4a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	685b      	ldr	r3, [r3, #4]
 800c494:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	430a      	orrs	r2, r1
 800c4a2:	605a      	str	r2, [r3, #4]
  }
}
 800c4a4:	bf00      	nop
 800c4a6:	370c      	adds	r7, #12
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ae:	4770      	bx	lr

0800c4b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b086      	sub	sp, #24
 800c4b4:	af02      	add	r7, sp, #8
 800c4b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c4c0:	f7f5 fc66 	bl	8001d90 <HAL_GetTick>
 800c4c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	f003 0308 	and.w	r3, r3, #8
 800c4d0:	2b08      	cmp	r3, #8
 800c4d2:	d10e      	bne.n	800c4f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c4d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c4d8:	9300      	str	r3, [sp, #0]
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f000 f82c 	bl	800c540 <UART_WaitOnFlagUntilTimeout>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d001      	beq.n	800c4f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c4ee:	2303      	movs	r3, #3
 800c4f0:	e022      	b.n	800c538 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	f003 0304 	and.w	r3, r3, #4
 800c4fc:	2b04      	cmp	r3, #4
 800c4fe:	d10e      	bne.n	800c51e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c500:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c504:	9300      	str	r3, [sp, #0]
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	2200      	movs	r2, #0
 800c50a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f000 f816 	bl	800c540 <UART_WaitOnFlagUntilTimeout>
 800c514:	4603      	mov	r3, r0
 800c516:	2b00      	cmp	r3, #0
 800c518:	d001      	beq.n	800c51e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c51a:	2303      	movs	r3, #3
 800c51c:	e00c      	b.n	800c538 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2220      	movs	r2, #32
 800c522:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2220      	movs	r2, #32
 800c52a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2200      	movs	r2, #0
 800c532:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c536:	2300      	movs	r3, #0
}
 800c538:	4618      	mov	r0, r3
 800c53a:	3710      	adds	r7, #16
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}

0800c540 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b084      	sub	sp, #16
 800c544:	af00      	add	r7, sp, #0
 800c546:	60f8      	str	r0, [r7, #12]
 800c548:	60b9      	str	r1, [r7, #8]
 800c54a:	603b      	str	r3, [r7, #0]
 800c54c:	4613      	mov	r3, r2
 800c54e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c550:	e062      	b.n	800c618 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c552:	69bb      	ldr	r3, [r7, #24]
 800c554:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c558:	d05e      	beq.n	800c618 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c55a:	f7f5 fc19 	bl	8001d90 <HAL_GetTick>
 800c55e:	4602      	mov	r2, r0
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	1ad3      	subs	r3, r2, r3
 800c564:	69ba      	ldr	r2, [r7, #24]
 800c566:	429a      	cmp	r2, r3
 800c568:	d302      	bcc.n	800c570 <UART_WaitOnFlagUntilTimeout+0x30>
 800c56a:	69bb      	ldr	r3, [r7, #24]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d11d      	bne.n	800c5ac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	681a      	ldr	r2, [r3, #0]
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c57e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	689a      	ldr	r2, [r3, #8]
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f022 0201 	bic.w	r2, r2, #1
 800c58e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	2220      	movs	r2, #32
 800c594:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	2220      	movs	r2, #32
 800c59c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800c5a8:	2303      	movs	r3, #3
 800c5aa:	e045      	b.n	800c638 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f003 0304 	and.w	r3, r3, #4
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d02e      	beq.n	800c618 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	69db      	ldr	r3, [r3, #28]
 800c5c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c5c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c5c8:	d126      	bne.n	800c618 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c5d2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	681a      	ldr	r2, [r3, #0]
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c5e2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	689a      	ldr	r2, [r3, #8]
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f022 0201 	bic.w	r2, r2, #1
 800c5f2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2220      	movs	r2, #32
 800c5f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	2220      	movs	r2, #32
 800c600:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	2220      	movs	r2, #32
 800c608:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	2200      	movs	r2, #0
 800c610:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800c614:	2303      	movs	r3, #3
 800c616:	e00f      	b.n	800c638 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	69da      	ldr	r2, [r3, #28]
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	4013      	ands	r3, r2
 800c622:	68ba      	ldr	r2, [r7, #8]
 800c624:	429a      	cmp	r2, r3
 800c626:	bf0c      	ite	eq
 800c628:	2301      	moveq	r3, #1
 800c62a:	2300      	movne	r3, #0
 800c62c:	b2db      	uxtb	r3, r3
 800c62e:	461a      	mov	r2, r3
 800c630:	79fb      	ldrb	r3, [r7, #7]
 800c632:	429a      	cmp	r2, r3
 800c634:	d08d      	beq.n	800c552 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c636:	2300      	movs	r3, #0
}
 800c638:	4618      	mov	r0, r3
 800c63a:	3710      	adds	r7, #16
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c640:	b480      	push	{r7}
 800c642:	b085      	sub	sp, #20
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c64e:	2b01      	cmp	r3, #1
 800c650:	d101      	bne.n	800c656 <HAL_UARTEx_DisableFifoMode+0x16>
 800c652:	2302      	movs	r3, #2
 800c654:	e027      	b.n	800c6a6 <HAL_UARTEx_DisableFifoMode+0x66>
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2201      	movs	r2, #1
 800c65a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2224      	movs	r2, #36	; 0x24
 800c662:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	681a      	ldr	r2, [r3, #0]
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	f022 0201 	bic.w	r2, r2, #1
 800c67c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c684:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	2200      	movs	r2, #0
 800c68a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	68fa      	ldr	r2, [r7, #12]
 800c692:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2220      	movs	r2, #32
 800c698:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c6a4:	2300      	movs	r3, #0
}
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	3714      	adds	r7, #20
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b0:	4770      	bx	lr

0800c6b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c6b2:	b580      	push	{r7, lr}
 800c6b4:	b084      	sub	sp, #16
 800c6b6:	af00      	add	r7, sp, #0
 800c6b8:	6078      	str	r0, [r7, #4]
 800c6ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c6c2:	2b01      	cmp	r3, #1
 800c6c4:	d101      	bne.n	800c6ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c6c6:	2302      	movs	r3, #2
 800c6c8:	e02d      	b.n	800c726 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2201      	movs	r2, #1
 800c6ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2224      	movs	r2, #36	; 0x24
 800c6d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	681a      	ldr	r2, [r3, #0]
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f022 0201 	bic.w	r2, r2, #1
 800c6f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	689b      	ldr	r3, [r3, #8]
 800c6f8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	683a      	ldr	r2, [r7, #0]
 800c702:	430a      	orrs	r2, r1
 800c704:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f000 f850 	bl	800c7ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	68fa      	ldr	r2, [r7, #12]
 800c712:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2220      	movs	r2, #32
 800c718:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2200      	movs	r2, #0
 800c720:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c724:	2300      	movs	r3, #0
}
 800c726:	4618      	mov	r0, r3
 800c728:	3710      	adds	r7, #16
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}

0800c72e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c72e:	b580      	push	{r7, lr}
 800c730:	b084      	sub	sp, #16
 800c732:	af00      	add	r7, sp, #0
 800c734:	6078      	str	r0, [r7, #4]
 800c736:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c73e:	2b01      	cmp	r3, #1
 800c740:	d101      	bne.n	800c746 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c742:	2302      	movs	r3, #2
 800c744:	e02d      	b.n	800c7a2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2201      	movs	r2, #1
 800c74a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2224      	movs	r2, #36	; 0x24
 800c752:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	681a      	ldr	r2, [r3, #0]
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	f022 0201 	bic.w	r2, r2, #1
 800c76c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	689b      	ldr	r3, [r3, #8]
 800c774:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	683a      	ldr	r2, [r7, #0]
 800c77e:	430a      	orrs	r2, r1
 800c780:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f000 f812 	bl	800c7ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	68fa      	ldr	r2, [r7, #12]
 800c78e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2220      	movs	r2, #32
 800c794:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2200      	movs	r2, #0
 800c79c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c7a0:	2300      	movs	r3, #0
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3710      	adds	r7, #16
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}
	...

0800c7ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c7ac:	b480      	push	{r7}
 800c7ae:	b089      	sub	sp, #36	; 0x24
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800c7b4:	4a2f      	ldr	r2, [pc, #188]	; (800c874 <UARTEx_SetNbDataToProcess+0xc8>)
 800c7b6:	f107 0314 	add.w	r3, r7, #20
 800c7ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c7be:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800c7c2:	4a2d      	ldr	r2, [pc, #180]	; (800c878 <UARTEx_SetNbDataToProcess+0xcc>)
 800c7c4:	f107 030c 	add.w	r3, r7, #12
 800c7c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c7cc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d108      	bne.n	800c7ea <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2201      	movs	r2, #1
 800c7dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2201      	movs	r2, #1
 800c7e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c7e8:	e03d      	b.n	800c866 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c7ea:	2308      	movs	r3, #8
 800c7ec:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c7ee:	2308      	movs	r3, #8
 800c7f0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	689b      	ldr	r3, [r3, #8]
 800c7f8:	0e5b      	lsrs	r3, r3, #25
 800c7fa:	b2db      	uxtb	r3, r3
 800c7fc:	f003 0307 	and.w	r3, r3, #7
 800c800:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	689b      	ldr	r3, [r3, #8]
 800c808:	0f5b      	lsrs	r3, r3, #29
 800c80a:	b2db      	uxtb	r3, r3
 800c80c:	f003 0307 	and.w	r3, r3, #7
 800c810:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800c812:	7fbb      	ldrb	r3, [r7, #30]
 800c814:	7f3a      	ldrb	r2, [r7, #28]
 800c816:	f107 0120 	add.w	r1, r7, #32
 800c81a:	440a      	add	r2, r1
 800c81c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c820:	fb02 f303 	mul.w	r3, r2, r3
 800c824:	7f3a      	ldrb	r2, [r7, #28]
 800c826:	f107 0120 	add.w	r1, r7, #32
 800c82a:	440a      	add	r2, r1
 800c82c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c830:	fb93 f3f2 	sdiv	r3, r3, r2
 800c834:	b29a      	uxth	r2, r3
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800c83c:	7ffb      	ldrb	r3, [r7, #31]
 800c83e:	7f7a      	ldrb	r2, [r7, #29]
 800c840:	f107 0120 	add.w	r1, r7, #32
 800c844:	440a      	add	r2, r1
 800c846:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c84a:	fb02 f303 	mul.w	r3, r2, r3
 800c84e:	7f7a      	ldrb	r2, [r7, #29]
 800c850:	f107 0120 	add.w	r1, r7, #32
 800c854:	440a      	add	r2, r1
 800c856:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c85a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c85e:	b29a      	uxth	r2, r3
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c866:	bf00      	nop
 800c868:	3724      	adds	r7, #36	; 0x24
 800c86a:	46bd      	mov	sp, r7
 800c86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c870:	4770      	bx	lr
 800c872:	bf00      	nop
 800c874:	080100bc 	.word	0x080100bc
 800c878:	080100c4 	.word	0x080100c4

0800c87c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c87c:	b084      	sub	sp, #16
 800c87e:	b580      	push	{r7, lr}
 800c880:	b084      	sub	sp, #16
 800c882:	af00      	add	r7, sp, #0
 800c884:	6078      	str	r0, [r7, #4]
 800c886:	f107 001c 	add.w	r0, r7, #28
 800c88a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c890:	2b01      	cmp	r3, #1
 800c892:	d120      	bne.n	800c8d6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c898:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	68da      	ldr	r2, [r3, #12]
 800c8a4:	4b25      	ldr	r3, [pc, #148]	; (800c93c <USB_CoreInit+0xc0>)
 800c8a6:	4013      	ands	r3, r2
 800c8a8:	687a      	ldr	r2, [r7, #4]
 800c8aa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	68db      	ldr	r3, [r3, #12]
 800c8b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c8b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8ba:	2b01      	cmp	r3, #1
 800c8bc:	d105      	bne.n	800c8ca <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	68db      	ldr	r3, [r3, #12]
 800c8c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800c8ca:	6878      	ldr	r0, [r7, #4]
 800c8cc:	f001 fa66 	bl	800dd9c <USB_CoreReset>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	73fb      	strb	r3, [r7, #15]
 800c8d4:	e01a      	b.n	800c90c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	68db      	ldr	r3, [r3, #12]
 800c8da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f001 fa5a 	bl	800dd9c <USB_CoreReset>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c8ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d106      	bne.n	800c900 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	639a      	str	r2, [r3, #56]	; 0x38
 800c8fe:	e005      	b.n	800c90c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c904:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c90e:	2b01      	cmp	r3, #1
 800c910:	d10b      	bne.n	800c92a <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	689b      	ldr	r3, [r3, #8]
 800c916:	f043 0206 	orr.w	r2, r3, #6
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	689b      	ldr	r3, [r3, #8]
 800c922:	f043 0220 	orr.w	r2, r3, #32
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c92a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c92c:	4618      	mov	r0, r3
 800c92e:	3710      	adds	r7, #16
 800c930:	46bd      	mov	sp, r7
 800c932:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c936:	b004      	add	sp, #16
 800c938:	4770      	bx	lr
 800c93a:	bf00      	nop
 800c93c:	ffbdffbf 	.word	0xffbdffbf

0800c940 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c940:	b480      	push	{r7}
 800c942:	b087      	sub	sp, #28
 800c944:	af00      	add	r7, sp, #0
 800c946:	60f8      	str	r0, [r7, #12]
 800c948:	60b9      	str	r1, [r7, #8]
 800c94a:	4613      	mov	r3, r2
 800c94c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c94e:	79fb      	ldrb	r3, [r7, #7]
 800c950:	2b02      	cmp	r3, #2
 800c952:	d165      	bne.n	800ca20 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	4a41      	ldr	r2, [pc, #260]	; (800ca5c <USB_SetTurnaroundTime+0x11c>)
 800c958:	4293      	cmp	r3, r2
 800c95a:	d906      	bls.n	800c96a <USB_SetTurnaroundTime+0x2a>
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	4a40      	ldr	r2, [pc, #256]	; (800ca60 <USB_SetTurnaroundTime+0x120>)
 800c960:	4293      	cmp	r3, r2
 800c962:	d802      	bhi.n	800c96a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c964:	230f      	movs	r3, #15
 800c966:	617b      	str	r3, [r7, #20]
 800c968:	e062      	b.n	800ca30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	4a3c      	ldr	r2, [pc, #240]	; (800ca60 <USB_SetTurnaroundTime+0x120>)
 800c96e:	4293      	cmp	r3, r2
 800c970:	d906      	bls.n	800c980 <USB_SetTurnaroundTime+0x40>
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	4a3b      	ldr	r2, [pc, #236]	; (800ca64 <USB_SetTurnaroundTime+0x124>)
 800c976:	4293      	cmp	r3, r2
 800c978:	d802      	bhi.n	800c980 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c97a:	230e      	movs	r3, #14
 800c97c:	617b      	str	r3, [r7, #20]
 800c97e:	e057      	b.n	800ca30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	4a38      	ldr	r2, [pc, #224]	; (800ca64 <USB_SetTurnaroundTime+0x124>)
 800c984:	4293      	cmp	r3, r2
 800c986:	d906      	bls.n	800c996 <USB_SetTurnaroundTime+0x56>
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	4a37      	ldr	r2, [pc, #220]	; (800ca68 <USB_SetTurnaroundTime+0x128>)
 800c98c:	4293      	cmp	r3, r2
 800c98e:	d802      	bhi.n	800c996 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c990:	230d      	movs	r3, #13
 800c992:	617b      	str	r3, [r7, #20]
 800c994:	e04c      	b.n	800ca30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	4a33      	ldr	r2, [pc, #204]	; (800ca68 <USB_SetTurnaroundTime+0x128>)
 800c99a:	4293      	cmp	r3, r2
 800c99c:	d906      	bls.n	800c9ac <USB_SetTurnaroundTime+0x6c>
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	4a32      	ldr	r2, [pc, #200]	; (800ca6c <USB_SetTurnaroundTime+0x12c>)
 800c9a2:	4293      	cmp	r3, r2
 800c9a4:	d802      	bhi.n	800c9ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c9a6:	230c      	movs	r3, #12
 800c9a8:	617b      	str	r3, [r7, #20]
 800c9aa:	e041      	b.n	800ca30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	4a2f      	ldr	r2, [pc, #188]	; (800ca6c <USB_SetTurnaroundTime+0x12c>)
 800c9b0:	4293      	cmp	r3, r2
 800c9b2:	d906      	bls.n	800c9c2 <USB_SetTurnaroundTime+0x82>
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	4a2e      	ldr	r2, [pc, #184]	; (800ca70 <USB_SetTurnaroundTime+0x130>)
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d802      	bhi.n	800c9c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c9bc:	230b      	movs	r3, #11
 800c9be:	617b      	str	r3, [r7, #20]
 800c9c0:	e036      	b.n	800ca30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	4a2a      	ldr	r2, [pc, #168]	; (800ca70 <USB_SetTurnaroundTime+0x130>)
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	d906      	bls.n	800c9d8 <USB_SetTurnaroundTime+0x98>
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	4a29      	ldr	r2, [pc, #164]	; (800ca74 <USB_SetTurnaroundTime+0x134>)
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	d802      	bhi.n	800c9d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c9d2:	230a      	movs	r3, #10
 800c9d4:	617b      	str	r3, [r7, #20]
 800c9d6:	e02b      	b.n	800ca30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	4a26      	ldr	r2, [pc, #152]	; (800ca74 <USB_SetTurnaroundTime+0x134>)
 800c9dc:	4293      	cmp	r3, r2
 800c9de:	d906      	bls.n	800c9ee <USB_SetTurnaroundTime+0xae>
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	4a25      	ldr	r2, [pc, #148]	; (800ca78 <USB_SetTurnaroundTime+0x138>)
 800c9e4:	4293      	cmp	r3, r2
 800c9e6:	d802      	bhi.n	800c9ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c9e8:	2309      	movs	r3, #9
 800c9ea:	617b      	str	r3, [r7, #20]
 800c9ec:	e020      	b.n	800ca30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	4a21      	ldr	r2, [pc, #132]	; (800ca78 <USB_SetTurnaroundTime+0x138>)
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d906      	bls.n	800ca04 <USB_SetTurnaroundTime+0xc4>
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	4a20      	ldr	r2, [pc, #128]	; (800ca7c <USB_SetTurnaroundTime+0x13c>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d802      	bhi.n	800ca04 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c9fe:	2308      	movs	r3, #8
 800ca00:	617b      	str	r3, [r7, #20]
 800ca02:	e015      	b.n	800ca30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	4a1d      	ldr	r2, [pc, #116]	; (800ca7c <USB_SetTurnaroundTime+0x13c>)
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d906      	bls.n	800ca1a <USB_SetTurnaroundTime+0xda>
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	4a1c      	ldr	r2, [pc, #112]	; (800ca80 <USB_SetTurnaroundTime+0x140>)
 800ca10:	4293      	cmp	r3, r2
 800ca12:	d802      	bhi.n	800ca1a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ca14:	2307      	movs	r3, #7
 800ca16:	617b      	str	r3, [r7, #20]
 800ca18:	e00a      	b.n	800ca30 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ca1a:	2306      	movs	r3, #6
 800ca1c:	617b      	str	r3, [r7, #20]
 800ca1e:	e007      	b.n	800ca30 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ca20:	79fb      	ldrb	r3, [r7, #7]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d102      	bne.n	800ca2c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ca26:	2309      	movs	r3, #9
 800ca28:	617b      	str	r3, [r7, #20]
 800ca2a:	e001      	b.n	800ca30 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ca2c:	2309      	movs	r3, #9
 800ca2e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	68db      	ldr	r3, [r3, #12]
 800ca34:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	68da      	ldr	r2, [r3, #12]
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	029b      	lsls	r3, r3, #10
 800ca44:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ca48:	431a      	orrs	r2, r3
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ca4e:	2300      	movs	r3, #0
}
 800ca50:	4618      	mov	r0, r3
 800ca52:	371c      	adds	r7, #28
 800ca54:	46bd      	mov	sp, r7
 800ca56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5a:	4770      	bx	lr
 800ca5c:	00d8acbf 	.word	0x00d8acbf
 800ca60:	00e4e1bf 	.word	0x00e4e1bf
 800ca64:	00f423ff 	.word	0x00f423ff
 800ca68:	0106737f 	.word	0x0106737f
 800ca6c:	011a499f 	.word	0x011a499f
 800ca70:	01312cff 	.word	0x01312cff
 800ca74:	014ca43f 	.word	0x014ca43f
 800ca78:	016e35ff 	.word	0x016e35ff
 800ca7c:	01a6ab1f 	.word	0x01a6ab1f
 800ca80:	01e847ff 	.word	0x01e847ff

0800ca84 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ca84:	b480      	push	{r7}
 800ca86:	b083      	sub	sp, #12
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	689b      	ldr	r3, [r3, #8]
 800ca90:	f043 0201 	orr.w	r2, r3, #1
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ca98:	2300      	movs	r3, #0
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	370c      	adds	r7, #12
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa4:	4770      	bx	lr

0800caa6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800caa6:	b480      	push	{r7}
 800caa8:	b083      	sub	sp, #12
 800caaa:	af00      	add	r7, sp, #0
 800caac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	689b      	ldr	r3, [r3, #8]
 800cab2:	f023 0201 	bic.w	r2, r3, #1
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800caba:	2300      	movs	r3, #0
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	370c      	adds	r7, #12
 800cac0:	46bd      	mov	sp, r7
 800cac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac6:	4770      	bx	lr

0800cac8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b082      	sub	sp, #8
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
 800cad0:	460b      	mov	r3, r1
 800cad2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	68db      	ldr	r3, [r3, #12]
 800cad8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cae0:	78fb      	ldrb	r3, [r7, #3]
 800cae2:	2b01      	cmp	r3, #1
 800cae4:	d106      	bne.n	800caf4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	68db      	ldr	r3, [r3, #12]
 800caea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	60da      	str	r2, [r3, #12]
 800caf2:	e00b      	b.n	800cb0c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800caf4:	78fb      	ldrb	r3, [r7, #3]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d106      	bne.n	800cb08 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	68db      	ldr	r3, [r3, #12]
 800cafe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	60da      	str	r2, [r3, #12]
 800cb06:	e001      	b.n	800cb0c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800cb08:	2301      	movs	r3, #1
 800cb0a:	e003      	b.n	800cb14 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800cb0c:	2032      	movs	r0, #50	; 0x32
 800cb0e:	f7f5 f94b 	bl	8001da8 <HAL_Delay>

  return HAL_OK;
 800cb12:	2300      	movs	r3, #0
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	3708      	adds	r7, #8
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}

0800cb1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cb1c:	b084      	sub	sp, #16
 800cb1e:	b580      	push	{r7, lr}
 800cb20:	b086      	sub	sp, #24
 800cb22:	af00      	add	r7, sp, #0
 800cb24:	6078      	str	r0, [r7, #4]
 800cb26:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800cb2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800cb36:	2300      	movs	r3, #0
 800cb38:	613b      	str	r3, [r7, #16]
 800cb3a:	e009      	b.n	800cb50 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800cb3c:	687a      	ldr	r2, [r7, #4]
 800cb3e:	693b      	ldr	r3, [r7, #16]
 800cb40:	3340      	adds	r3, #64	; 0x40
 800cb42:	009b      	lsls	r3, r3, #2
 800cb44:	4413      	add	r3, r2
 800cb46:	2200      	movs	r2, #0
 800cb48:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800cb4a:	693b      	ldr	r3, [r7, #16]
 800cb4c:	3301      	adds	r3, #1
 800cb4e:	613b      	str	r3, [r7, #16]
 800cb50:	693b      	ldr	r3, [r7, #16]
 800cb52:	2b0e      	cmp	r3, #14
 800cb54:	d9f2      	bls.n	800cb3c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800cb56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d11c      	bne.n	800cb96 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb62:	685b      	ldr	r3, [r3, #4]
 800cb64:	68fa      	ldr	r2, [r7, #12]
 800cb66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cb6a:	f043 0302 	orr.w	r3, r3, #2
 800cb6e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb74:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	601a      	str	r2, [r3, #0]
 800cb94:	e005      	b.n	800cba2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb9a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cba8:	461a      	mov	r2, r3
 800cbaa:	2300      	movs	r3, #0
 800cbac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbb4:	4619      	mov	r1, r3
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbbc:	461a      	mov	r2, r3
 800cbbe:	680b      	ldr	r3, [r1, #0]
 800cbc0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cbc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc4:	2b01      	cmp	r3, #1
 800cbc6:	d10c      	bne.n	800cbe2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800cbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d104      	bne.n	800cbd8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800cbce:	2100      	movs	r1, #0
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f000 f949 	bl	800ce68 <USB_SetDevSpeed>
 800cbd6:	e008      	b.n	800cbea <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cbd8:	2101      	movs	r1, #1
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f000 f944 	bl	800ce68 <USB_SetDevSpeed>
 800cbe0:	e003      	b.n	800cbea <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cbe2:	2103      	movs	r1, #3
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f000 f93f 	bl	800ce68 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cbea:	2110      	movs	r1, #16
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f000 f8f3 	bl	800cdd8 <USB_FlushTxFifo>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d001      	beq.n	800cbfc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f000 f911 	bl	800ce24 <USB_FlushRxFifo>
 800cc02:	4603      	mov	r3, r0
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d001      	beq.n	800cc0c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800cc08:	2301      	movs	r3, #1
 800cc0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc12:	461a      	mov	r2, r3
 800cc14:	2300      	movs	r3, #0
 800cc16:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc1e:	461a      	mov	r2, r3
 800cc20:	2300      	movs	r3, #0
 800cc22:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc2a:	461a      	mov	r2, r3
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cc30:	2300      	movs	r3, #0
 800cc32:	613b      	str	r3, [r7, #16]
 800cc34:	e043      	b.n	800ccbe <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cc36:	693b      	ldr	r3, [r7, #16]
 800cc38:	015a      	lsls	r2, r3, #5
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	4413      	add	r3, r2
 800cc3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc4c:	d118      	bne.n	800cc80 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800cc4e:	693b      	ldr	r3, [r7, #16]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d10a      	bne.n	800cc6a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	015a      	lsls	r2, r3, #5
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	4413      	add	r3, r2
 800cc5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc60:	461a      	mov	r2, r3
 800cc62:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cc66:	6013      	str	r3, [r2, #0]
 800cc68:	e013      	b.n	800cc92 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	015a      	lsls	r2, r3, #5
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	4413      	add	r3, r2
 800cc72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc76:	461a      	mov	r2, r3
 800cc78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cc7c:	6013      	str	r3, [r2, #0]
 800cc7e:	e008      	b.n	800cc92 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	015a      	lsls	r2, r3, #5
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	4413      	add	r3, r2
 800cc88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc8c:	461a      	mov	r2, r3
 800cc8e:	2300      	movs	r3, #0
 800cc90:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cc92:	693b      	ldr	r3, [r7, #16]
 800cc94:	015a      	lsls	r2, r3, #5
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	4413      	add	r3, r2
 800cc9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc9e:	461a      	mov	r2, r3
 800cca0:	2300      	movs	r3, #0
 800cca2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cca4:	693b      	ldr	r3, [r7, #16]
 800cca6:	015a      	lsls	r2, r3, #5
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	4413      	add	r3, r2
 800ccac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccb0:	461a      	mov	r2, r3
 800ccb2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ccb6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	3301      	adds	r3, #1
 800ccbc:	613b      	str	r3, [r7, #16]
 800ccbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc0:	693a      	ldr	r2, [r7, #16]
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d3b7      	bcc.n	800cc36 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	613b      	str	r3, [r7, #16]
 800ccca:	e043      	b.n	800cd54 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cccc:	693b      	ldr	r3, [r7, #16]
 800ccce:	015a      	lsls	r2, r3, #5
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	4413      	add	r3, r2
 800ccd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ccde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cce2:	d118      	bne.n	800cd16 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800cce4:	693b      	ldr	r3, [r7, #16]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d10a      	bne.n	800cd00 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	015a      	lsls	r2, r3, #5
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	4413      	add	r3, r2
 800ccf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccf6:	461a      	mov	r2, r3
 800ccf8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ccfc:	6013      	str	r3, [r2, #0]
 800ccfe:	e013      	b.n	800cd28 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	015a      	lsls	r2, r3, #5
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	4413      	add	r3, r2
 800cd08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd0c:	461a      	mov	r2, r3
 800cd0e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cd12:	6013      	str	r3, [r2, #0]
 800cd14:	e008      	b.n	800cd28 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cd16:	693b      	ldr	r3, [r7, #16]
 800cd18:	015a      	lsls	r2, r3, #5
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	4413      	add	r3, r2
 800cd1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd22:	461a      	mov	r2, r3
 800cd24:	2300      	movs	r3, #0
 800cd26:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	015a      	lsls	r2, r3, #5
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	4413      	add	r3, r2
 800cd30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd34:	461a      	mov	r2, r3
 800cd36:	2300      	movs	r3, #0
 800cd38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cd3a:	693b      	ldr	r3, [r7, #16]
 800cd3c:	015a      	lsls	r2, r3, #5
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	4413      	add	r3, r2
 800cd42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd46:	461a      	mov	r2, r3
 800cd48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cd4c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cd4e:	693b      	ldr	r3, [r7, #16]
 800cd50:	3301      	adds	r3, #1
 800cd52:	613b      	str	r3, [r7, #16]
 800cd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd56:	693a      	ldr	r2, [r7, #16]
 800cd58:	429a      	cmp	r2, r3
 800cd5a:	d3b7      	bcc.n	800cccc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd62:	691b      	ldr	r3, [r3, #16]
 800cd64:	68fa      	ldr	r2, [r7, #12]
 800cd66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cd6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd6e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2200      	movs	r2, #0
 800cd74:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800cd7c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d105      	bne.n	800cd90 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	699b      	ldr	r3, [r3, #24]
 800cd88:	f043 0210 	orr.w	r2, r3, #16
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	699a      	ldr	r2, [r3, #24]
 800cd94:	4b0e      	ldr	r3, [pc, #56]	; (800cdd0 <USB_DevInit+0x2b4>)
 800cd96:	4313      	orrs	r3, r2
 800cd98:	687a      	ldr	r2, [r7, #4]
 800cd9a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cd9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d005      	beq.n	800cdae <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	699b      	ldr	r3, [r3, #24]
 800cda6:	f043 0208 	orr.w	r2, r3, #8
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cdae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdb0:	2b01      	cmp	r3, #1
 800cdb2:	d105      	bne.n	800cdc0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	699a      	ldr	r2, [r3, #24]
 800cdb8:	4b06      	ldr	r3, [pc, #24]	; (800cdd4 <USB_DevInit+0x2b8>)
 800cdba:	4313      	orrs	r3, r2
 800cdbc:	687a      	ldr	r2, [r7, #4]
 800cdbe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cdc0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	3718      	adds	r7, #24
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cdcc:	b004      	add	sp, #16
 800cdce:	4770      	bx	lr
 800cdd0:	803c3800 	.word	0x803c3800
 800cdd4:	40000004 	.word	0x40000004

0800cdd8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cdd8:	b480      	push	{r7}
 800cdda:	b085      	sub	sp, #20
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
 800cde0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800cde2:	2300      	movs	r3, #0
 800cde4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	019b      	lsls	r3, r3, #6
 800cdea:	f043 0220 	orr.w	r2, r3, #32
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	3301      	adds	r3, #1
 800cdf6:	60fb      	str	r3, [r7, #12]
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	4a09      	ldr	r2, [pc, #36]	; (800ce20 <USB_FlushTxFifo+0x48>)
 800cdfc:	4293      	cmp	r3, r2
 800cdfe:	d901      	bls.n	800ce04 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ce00:	2303      	movs	r3, #3
 800ce02:	e006      	b.n	800ce12 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	691b      	ldr	r3, [r3, #16]
 800ce08:	f003 0320 	and.w	r3, r3, #32
 800ce0c:	2b20      	cmp	r3, #32
 800ce0e:	d0f0      	beq.n	800cdf2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ce10:	2300      	movs	r3, #0
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	3714      	adds	r7, #20
 800ce16:	46bd      	mov	sp, r7
 800ce18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1c:	4770      	bx	lr
 800ce1e:	bf00      	nop
 800ce20:	00030d40 	.word	0x00030d40

0800ce24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ce24:	b480      	push	{r7}
 800ce26:	b085      	sub	sp, #20
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2210      	movs	r2, #16
 800ce34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	3301      	adds	r3, #1
 800ce3a:	60fb      	str	r3, [r7, #12]
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	4a09      	ldr	r2, [pc, #36]	; (800ce64 <USB_FlushRxFifo+0x40>)
 800ce40:	4293      	cmp	r3, r2
 800ce42:	d901      	bls.n	800ce48 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800ce44:	2303      	movs	r3, #3
 800ce46:	e006      	b.n	800ce56 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	691b      	ldr	r3, [r3, #16]
 800ce4c:	f003 0310 	and.w	r3, r3, #16
 800ce50:	2b10      	cmp	r3, #16
 800ce52:	d0f0      	beq.n	800ce36 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800ce54:	2300      	movs	r3, #0
}
 800ce56:	4618      	mov	r0, r3
 800ce58:	3714      	adds	r7, #20
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce60:	4770      	bx	lr
 800ce62:	bf00      	nop
 800ce64:	00030d40 	.word	0x00030d40

0800ce68 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ce68:	b480      	push	{r7}
 800ce6a:	b085      	sub	sp, #20
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
 800ce70:	460b      	mov	r3, r1
 800ce72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce7e:	681a      	ldr	r2, [r3, #0]
 800ce80:	78fb      	ldrb	r3, [r7, #3]
 800ce82:	68f9      	ldr	r1, [r7, #12]
 800ce84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ce88:	4313      	orrs	r3, r2
 800ce8a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ce8c:	2300      	movs	r3, #0
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	3714      	adds	r7, #20
 800ce92:	46bd      	mov	sp, r7
 800ce94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce98:	4770      	bx	lr

0800ce9a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ce9a:	b480      	push	{r7}
 800ce9c:	b087      	sub	sp, #28
 800ce9e:	af00      	add	r7, sp, #0
 800cea0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800cea6:	693b      	ldr	r3, [r7, #16]
 800cea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ceac:	689b      	ldr	r3, [r3, #8]
 800ceae:	f003 0306 	and.w	r3, r3, #6
 800ceb2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d102      	bne.n	800cec0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ceba:	2300      	movs	r3, #0
 800cebc:	75fb      	strb	r3, [r7, #23]
 800cebe:	e00a      	b.n	800ced6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	2b02      	cmp	r3, #2
 800cec4:	d002      	beq.n	800cecc <USB_GetDevSpeed+0x32>
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	2b06      	cmp	r3, #6
 800ceca:	d102      	bne.n	800ced2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800cecc:	2302      	movs	r3, #2
 800cece:	75fb      	strb	r3, [r7, #23]
 800ced0:	e001      	b.n	800ced6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ced2:	230f      	movs	r3, #15
 800ced4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ced6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	371c      	adds	r7, #28
 800cedc:	46bd      	mov	sp, r7
 800cede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee2:	4770      	bx	lr

0800cee4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cee4:	b480      	push	{r7}
 800cee6:	b085      	sub	sp, #20
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
 800ceec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	781b      	ldrb	r3, [r3, #0]
 800cef6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	785b      	ldrb	r3, [r3, #1]
 800cefc:	2b01      	cmp	r3, #1
 800cefe:	d139      	bne.n	800cf74 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf06:	69da      	ldr	r2, [r3, #28]
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	781b      	ldrb	r3, [r3, #0]
 800cf0c:	f003 030f 	and.w	r3, r3, #15
 800cf10:	2101      	movs	r1, #1
 800cf12:	fa01 f303 	lsl.w	r3, r1, r3
 800cf16:	b29b      	uxth	r3, r3
 800cf18:	68f9      	ldr	r1, [r7, #12]
 800cf1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf1e:	4313      	orrs	r3, r2
 800cf20:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800cf22:	68bb      	ldr	r3, [r7, #8]
 800cf24:	015a      	lsls	r2, r3, #5
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	4413      	add	r3, r2
 800cf2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d153      	bne.n	800cfe0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	015a      	lsls	r2, r3, #5
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	4413      	add	r3, r2
 800cf40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf44:	681a      	ldr	r2, [r3, #0]
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	689b      	ldr	r3, [r3, #8]
 800cf4a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	78db      	ldrb	r3, [r3, #3]
 800cf52:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cf54:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	059b      	lsls	r3, r3, #22
 800cf5a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cf5c:	431a      	orrs	r2, r3
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	0159      	lsls	r1, r3, #5
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	440b      	add	r3, r1
 800cf66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf6a:	4619      	mov	r1, r3
 800cf6c:	4b20      	ldr	r3, [pc, #128]	; (800cff0 <USB_ActivateEndpoint+0x10c>)
 800cf6e:	4313      	orrs	r3, r2
 800cf70:	600b      	str	r3, [r1, #0]
 800cf72:	e035      	b.n	800cfe0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf7a:	69da      	ldr	r2, [r3, #28]
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	781b      	ldrb	r3, [r3, #0]
 800cf80:	f003 030f 	and.w	r3, r3, #15
 800cf84:	2101      	movs	r1, #1
 800cf86:	fa01 f303 	lsl.w	r3, r1, r3
 800cf8a:	041b      	lsls	r3, r3, #16
 800cf8c:	68f9      	ldr	r1, [r7, #12]
 800cf8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf92:	4313      	orrs	r3, r2
 800cf94:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cf96:	68bb      	ldr	r3, [r7, #8]
 800cf98:	015a      	lsls	r2, r3, #5
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	4413      	add	r3, r2
 800cf9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d119      	bne.n	800cfe0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	015a      	lsls	r2, r3, #5
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	4413      	add	r3, r2
 800cfb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfb8:	681a      	ldr	r2, [r3, #0]
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	689b      	ldr	r3, [r3, #8]
 800cfbe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	78db      	ldrb	r3, [r3, #3]
 800cfc6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cfc8:	430b      	orrs	r3, r1
 800cfca:	431a      	orrs	r2, r3
 800cfcc:	68bb      	ldr	r3, [r7, #8]
 800cfce:	0159      	lsls	r1, r3, #5
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	440b      	add	r3, r1
 800cfd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfd8:	4619      	mov	r1, r3
 800cfda:	4b05      	ldr	r3, [pc, #20]	; (800cff0 <USB_ActivateEndpoint+0x10c>)
 800cfdc:	4313      	orrs	r3, r2
 800cfde:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800cfe0:	2300      	movs	r3, #0
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3714      	adds	r7, #20
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfec:	4770      	bx	lr
 800cfee:	bf00      	nop
 800cff0:	10008000 	.word	0x10008000

0800cff4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cff4:	b480      	push	{r7}
 800cff6:	b085      	sub	sp, #20
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
 800cffc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	781b      	ldrb	r3, [r3, #0]
 800d006:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	785b      	ldrb	r3, [r3, #1]
 800d00c:	2b01      	cmp	r3, #1
 800d00e:	d135      	bne.n	800d07c <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d016:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	781b      	ldrb	r3, [r3, #0]
 800d01c:	f003 030f 	and.w	r3, r3, #15
 800d020:	2101      	movs	r1, #1
 800d022:	fa01 f303 	lsl.w	r3, r1, r3
 800d026:	b29b      	uxth	r3, r3
 800d028:	43db      	mvns	r3, r3
 800d02a:	68f9      	ldr	r1, [r7, #12]
 800d02c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d030:	4013      	ands	r3, r2
 800d032:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d03a:	69da      	ldr	r2, [r3, #28]
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	781b      	ldrb	r3, [r3, #0]
 800d040:	f003 030f 	and.w	r3, r3, #15
 800d044:	2101      	movs	r1, #1
 800d046:	fa01 f303 	lsl.w	r3, r1, r3
 800d04a:	b29b      	uxth	r3, r3
 800d04c:	43db      	mvns	r3, r3
 800d04e:	68f9      	ldr	r1, [r7, #12]
 800d050:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d054:	4013      	ands	r3, r2
 800d056:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	015a      	lsls	r2, r3, #5
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	4413      	add	r3, r2
 800d060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d064:	681a      	ldr	r2, [r3, #0]
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	0159      	lsls	r1, r3, #5
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	440b      	add	r3, r1
 800d06e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d072:	4619      	mov	r1, r3
 800d074:	4b1f      	ldr	r3, [pc, #124]	; (800d0f4 <USB_DeactivateEndpoint+0x100>)
 800d076:	4013      	ands	r3, r2
 800d078:	600b      	str	r3, [r1, #0]
 800d07a:	e034      	b.n	800d0e6 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d082:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	f003 030f 	and.w	r3, r3, #15
 800d08c:	2101      	movs	r1, #1
 800d08e:	fa01 f303 	lsl.w	r3, r1, r3
 800d092:	041b      	lsls	r3, r3, #16
 800d094:	43db      	mvns	r3, r3
 800d096:	68f9      	ldr	r1, [r7, #12]
 800d098:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d09c:	4013      	ands	r3, r2
 800d09e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0a6:	69da      	ldr	r2, [r3, #28]
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	781b      	ldrb	r3, [r3, #0]
 800d0ac:	f003 030f 	and.w	r3, r3, #15
 800d0b0:	2101      	movs	r1, #1
 800d0b2:	fa01 f303 	lsl.w	r3, r1, r3
 800d0b6:	041b      	lsls	r3, r3, #16
 800d0b8:	43db      	mvns	r3, r3
 800d0ba:	68f9      	ldr	r1, [r7, #12]
 800d0bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d0c0:	4013      	ands	r3, r2
 800d0c2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	015a      	lsls	r2, r3, #5
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	4413      	add	r3, r2
 800d0cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0d0:	681a      	ldr	r2, [r3, #0]
 800d0d2:	68bb      	ldr	r3, [r7, #8]
 800d0d4:	0159      	lsls	r1, r3, #5
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	440b      	add	r3, r1
 800d0da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0de:	4619      	mov	r1, r3
 800d0e0:	4b05      	ldr	r3, [pc, #20]	; (800d0f8 <USB_DeactivateEndpoint+0x104>)
 800d0e2:	4013      	ands	r3, r2
 800d0e4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d0e6:	2300      	movs	r3, #0
}
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	3714      	adds	r7, #20
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f2:	4770      	bx	lr
 800d0f4:	ec337800 	.word	0xec337800
 800d0f8:	eff37800 	.word	0xeff37800

0800d0fc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b08a      	sub	sp, #40	; 0x28
 800d100:	af02      	add	r7, sp, #8
 800d102:	60f8      	str	r0, [r7, #12]
 800d104:	60b9      	str	r1, [r7, #8]
 800d106:	4613      	mov	r3, r2
 800d108:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	781b      	ldrb	r3, [r3, #0]
 800d112:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	785b      	ldrb	r3, [r3, #1]
 800d118:	2b01      	cmp	r3, #1
 800d11a:	f040 8163 	bne.w	800d3e4 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d11e:	68bb      	ldr	r3, [r7, #8]
 800d120:	695b      	ldr	r3, [r3, #20]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d132      	bne.n	800d18c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d126:	69bb      	ldr	r3, [r7, #24]
 800d128:	015a      	lsls	r2, r3, #5
 800d12a:	69fb      	ldr	r3, [r7, #28]
 800d12c:	4413      	add	r3, r2
 800d12e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d132:	691a      	ldr	r2, [r3, #16]
 800d134:	69bb      	ldr	r3, [r7, #24]
 800d136:	0159      	lsls	r1, r3, #5
 800d138:	69fb      	ldr	r3, [r7, #28]
 800d13a:	440b      	add	r3, r1
 800d13c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d140:	4619      	mov	r1, r3
 800d142:	4ba5      	ldr	r3, [pc, #660]	; (800d3d8 <USB_EPStartXfer+0x2dc>)
 800d144:	4013      	ands	r3, r2
 800d146:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d148:	69bb      	ldr	r3, [r7, #24]
 800d14a:	015a      	lsls	r2, r3, #5
 800d14c:	69fb      	ldr	r3, [r7, #28]
 800d14e:	4413      	add	r3, r2
 800d150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d154:	691b      	ldr	r3, [r3, #16]
 800d156:	69ba      	ldr	r2, [r7, #24]
 800d158:	0151      	lsls	r1, r2, #5
 800d15a:	69fa      	ldr	r2, [r7, #28]
 800d15c:	440a      	add	r2, r1
 800d15e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d162:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d166:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d168:	69bb      	ldr	r3, [r7, #24]
 800d16a:	015a      	lsls	r2, r3, #5
 800d16c:	69fb      	ldr	r3, [r7, #28]
 800d16e:	4413      	add	r3, r2
 800d170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d174:	691a      	ldr	r2, [r3, #16]
 800d176:	69bb      	ldr	r3, [r7, #24]
 800d178:	0159      	lsls	r1, r3, #5
 800d17a:	69fb      	ldr	r3, [r7, #28]
 800d17c:	440b      	add	r3, r1
 800d17e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d182:	4619      	mov	r1, r3
 800d184:	4b95      	ldr	r3, [pc, #596]	; (800d3dc <USB_EPStartXfer+0x2e0>)
 800d186:	4013      	ands	r3, r2
 800d188:	610b      	str	r3, [r1, #16]
 800d18a:	e074      	b.n	800d276 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d18c:	69bb      	ldr	r3, [r7, #24]
 800d18e:	015a      	lsls	r2, r3, #5
 800d190:	69fb      	ldr	r3, [r7, #28]
 800d192:	4413      	add	r3, r2
 800d194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d198:	691a      	ldr	r2, [r3, #16]
 800d19a:	69bb      	ldr	r3, [r7, #24]
 800d19c:	0159      	lsls	r1, r3, #5
 800d19e:	69fb      	ldr	r3, [r7, #28]
 800d1a0:	440b      	add	r3, r1
 800d1a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1a6:	4619      	mov	r1, r3
 800d1a8:	4b8c      	ldr	r3, [pc, #560]	; (800d3dc <USB_EPStartXfer+0x2e0>)
 800d1aa:	4013      	ands	r3, r2
 800d1ac:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d1ae:	69bb      	ldr	r3, [r7, #24]
 800d1b0:	015a      	lsls	r2, r3, #5
 800d1b2:	69fb      	ldr	r3, [r7, #28]
 800d1b4:	4413      	add	r3, r2
 800d1b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1ba:	691a      	ldr	r2, [r3, #16]
 800d1bc:	69bb      	ldr	r3, [r7, #24]
 800d1be:	0159      	lsls	r1, r3, #5
 800d1c0:	69fb      	ldr	r3, [r7, #28]
 800d1c2:	440b      	add	r3, r1
 800d1c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1c8:	4619      	mov	r1, r3
 800d1ca:	4b83      	ldr	r3, [pc, #524]	; (800d3d8 <USB_EPStartXfer+0x2dc>)
 800d1cc:	4013      	ands	r3, r2
 800d1ce:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d1d0:	69bb      	ldr	r3, [r7, #24]
 800d1d2:	015a      	lsls	r2, r3, #5
 800d1d4:	69fb      	ldr	r3, [r7, #28]
 800d1d6:	4413      	add	r3, r2
 800d1d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1dc:	691a      	ldr	r2, [r3, #16]
 800d1de:	68bb      	ldr	r3, [r7, #8]
 800d1e0:	6959      	ldr	r1, [r3, #20]
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	689b      	ldr	r3, [r3, #8]
 800d1e6:	440b      	add	r3, r1
 800d1e8:	1e59      	subs	r1, r3, #1
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	689b      	ldr	r3, [r3, #8]
 800d1ee:	fbb1 f3f3 	udiv	r3, r1, r3
 800d1f2:	04d9      	lsls	r1, r3, #19
 800d1f4:	4b7a      	ldr	r3, [pc, #488]	; (800d3e0 <USB_EPStartXfer+0x2e4>)
 800d1f6:	400b      	ands	r3, r1
 800d1f8:	69b9      	ldr	r1, [r7, #24]
 800d1fa:	0148      	lsls	r0, r1, #5
 800d1fc:	69f9      	ldr	r1, [r7, #28]
 800d1fe:	4401      	add	r1, r0
 800d200:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d204:	4313      	orrs	r3, r2
 800d206:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d208:	69bb      	ldr	r3, [r7, #24]
 800d20a:	015a      	lsls	r2, r3, #5
 800d20c:	69fb      	ldr	r3, [r7, #28]
 800d20e:	4413      	add	r3, r2
 800d210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d214:	691a      	ldr	r2, [r3, #16]
 800d216:	68bb      	ldr	r3, [r7, #8]
 800d218:	695b      	ldr	r3, [r3, #20]
 800d21a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d21e:	69b9      	ldr	r1, [r7, #24]
 800d220:	0148      	lsls	r0, r1, #5
 800d222:	69f9      	ldr	r1, [r7, #28]
 800d224:	4401      	add	r1, r0
 800d226:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d22a:	4313      	orrs	r3, r2
 800d22c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d22e:	68bb      	ldr	r3, [r7, #8]
 800d230:	78db      	ldrb	r3, [r3, #3]
 800d232:	2b01      	cmp	r3, #1
 800d234:	d11f      	bne.n	800d276 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d236:	69bb      	ldr	r3, [r7, #24]
 800d238:	015a      	lsls	r2, r3, #5
 800d23a:	69fb      	ldr	r3, [r7, #28]
 800d23c:	4413      	add	r3, r2
 800d23e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d242:	691b      	ldr	r3, [r3, #16]
 800d244:	69ba      	ldr	r2, [r7, #24]
 800d246:	0151      	lsls	r1, r2, #5
 800d248:	69fa      	ldr	r2, [r7, #28]
 800d24a:	440a      	add	r2, r1
 800d24c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d250:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d254:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d256:	69bb      	ldr	r3, [r7, #24]
 800d258:	015a      	lsls	r2, r3, #5
 800d25a:	69fb      	ldr	r3, [r7, #28]
 800d25c:	4413      	add	r3, r2
 800d25e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d262:	691b      	ldr	r3, [r3, #16]
 800d264:	69ba      	ldr	r2, [r7, #24]
 800d266:	0151      	lsls	r1, r2, #5
 800d268:	69fa      	ldr	r2, [r7, #28]
 800d26a:	440a      	add	r2, r1
 800d26c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d270:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d274:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800d276:	79fb      	ldrb	r3, [r7, #7]
 800d278:	2b01      	cmp	r3, #1
 800d27a:	d14b      	bne.n	800d314 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	691b      	ldr	r3, [r3, #16]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d009      	beq.n	800d298 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d284:	69bb      	ldr	r3, [r7, #24]
 800d286:	015a      	lsls	r2, r3, #5
 800d288:	69fb      	ldr	r3, [r7, #28]
 800d28a:	4413      	add	r3, r2
 800d28c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d290:	461a      	mov	r2, r3
 800d292:	68bb      	ldr	r3, [r7, #8]
 800d294:	691b      	ldr	r3, [r3, #16]
 800d296:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d298:	68bb      	ldr	r3, [r7, #8]
 800d29a:	78db      	ldrb	r3, [r3, #3]
 800d29c:	2b01      	cmp	r3, #1
 800d29e:	d128      	bne.n	800d2f2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d2a0:	69fb      	ldr	r3, [r7, #28]
 800d2a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2a6:	689b      	ldr	r3, [r3, #8]
 800d2a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d110      	bne.n	800d2d2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d2b0:	69bb      	ldr	r3, [r7, #24]
 800d2b2:	015a      	lsls	r2, r3, #5
 800d2b4:	69fb      	ldr	r3, [r7, #28]
 800d2b6:	4413      	add	r3, r2
 800d2b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	69ba      	ldr	r2, [r7, #24]
 800d2c0:	0151      	lsls	r1, r2, #5
 800d2c2:	69fa      	ldr	r2, [r7, #28]
 800d2c4:	440a      	add	r2, r1
 800d2c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d2ce:	6013      	str	r3, [r2, #0]
 800d2d0:	e00f      	b.n	800d2f2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d2d2:	69bb      	ldr	r3, [r7, #24]
 800d2d4:	015a      	lsls	r2, r3, #5
 800d2d6:	69fb      	ldr	r3, [r7, #28]
 800d2d8:	4413      	add	r3, r2
 800d2da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	69ba      	ldr	r2, [r7, #24]
 800d2e2:	0151      	lsls	r1, r2, #5
 800d2e4:	69fa      	ldr	r2, [r7, #28]
 800d2e6:	440a      	add	r2, r1
 800d2e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d2f0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d2f2:	69bb      	ldr	r3, [r7, #24]
 800d2f4:	015a      	lsls	r2, r3, #5
 800d2f6:	69fb      	ldr	r3, [r7, #28]
 800d2f8:	4413      	add	r3, r2
 800d2fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	69ba      	ldr	r2, [r7, #24]
 800d302:	0151      	lsls	r1, r2, #5
 800d304:	69fa      	ldr	r2, [r7, #28]
 800d306:	440a      	add	r2, r1
 800d308:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d30c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d310:	6013      	str	r3, [r2, #0]
 800d312:	e133      	b.n	800d57c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d314:	69bb      	ldr	r3, [r7, #24]
 800d316:	015a      	lsls	r2, r3, #5
 800d318:	69fb      	ldr	r3, [r7, #28]
 800d31a:	4413      	add	r3, r2
 800d31c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	69ba      	ldr	r2, [r7, #24]
 800d324:	0151      	lsls	r1, r2, #5
 800d326:	69fa      	ldr	r2, [r7, #28]
 800d328:	440a      	add	r2, r1
 800d32a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d32e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d332:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	78db      	ldrb	r3, [r3, #3]
 800d338:	2b01      	cmp	r3, #1
 800d33a:	d015      	beq.n	800d368 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	695b      	ldr	r3, [r3, #20]
 800d340:	2b00      	cmp	r3, #0
 800d342:	f000 811b 	beq.w	800d57c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d346:	69fb      	ldr	r3, [r7, #28]
 800d348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d34c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d34e:	68bb      	ldr	r3, [r7, #8]
 800d350:	781b      	ldrb	r3, [r3, #0]
 800d352:	f003 030f 	and.w	r3, r3, #15
 800d356:	2101      	movs	r1, #1
 800d358:	fa01 f303 	lsl.w	r3, r1, r3
 800d35c:	69f9      	ldr	r1, [r7, #28]
 800d35e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d362:	4313      	orrs	r3, r2
 800d364:	634b      	str	r3, [r1, #52]	; 0x34
 800d366:	e109      	b.n	800d57c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d368:	69fb      	ldr	r3, [r7, #28]
 800d36a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d36e:	689b      	ldr	r3, [r3, #8]
 800d370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d374:	2b00      	cmp	r3, #0
 800d376:	d110      	bne.n	800d39a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d378:	69bb      	ldr	r3, [r7, #24]
 800d37a:	015a      	lsls	r2, r3, #5
 800d37c:	69fb      	ldr	r3, [r7, #28]
 800d37e:	4413      	add	r3, r2
 800d380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	69ba      	ldr	r2, [r7, #24]
 800d388:	0151      	lsls	r1, r2, #5
 800d38a:	69fa      	ldr	r2, [r7, #28]
 800d38c:	440a      	add	r2, r1
 800d38e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d392:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d396:	6013      	str	r3, [r2, #0]
 800d398:	e00f      	b.n	800d3ba <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d39a:	69bb      	ldr	r3, [r7, #24]
 800d39c:	015a      	lsls	r2, r3, #5
 800d39e:	69fb      	ldr	r3, [r7, #28]
 800d3a0:	4413      	add	r3, r2
 800d3a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	69ba      	ldr	r2, [r7, #24]
 800d3aa:	0151      	lsls	r1, r2, #5
 800d3ac:	69fa      	ldr	r2, [r7, #28]
 800d3ae:	440a      	add	r2, r1
 800d3b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d3b8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	68d9      	ldr	r1, [r3, #12]
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	781a      	ldrb	r2, [r3, #0]
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	695b      	ldr	r3, [r3, #20]
 800d3c6:	b298      	uxth	r0, r3
 800d3c8:	79fb      	ldrb	r3, [r7, #7]
 800d3ca:	9300      	str	r3, [sp, #0]
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	68f8      	ldr	r0, [r7, #12]
 800d3d0:	f000 fa38 	bl	800d844 <USB_WritePacket>
 800d3d4:	e0d2      	b.n	800d57c <USB_EPStartXfer+0x480>
 800d3d6:	bf00      	nop
 800d3d8:	e007ffff 	.word	0xe007ffff
 800d3dc:	fff80000 	.word	0xfff80000
 800d3e0:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d3e4:	69bb      	ldr	r3, [r7, #24]
 800d3e6:	015a      	lsls	r2, r3, #5
 800d3e8:	69fb      	ldr	r3, [r7, #28]
 800d3ea:	4413      	add	r3, r2
 800d3ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3f0:	691a      	ldr	r2, [r3, #16]
 800d3f2:	69bb      	ldr	r3, [r7, #24]
 800d3f4:	0159      	lsls	r1, r3, #5
 800d3f6:	69fb      	ldr	r3, [r7, #28]
 800d3f8:	440b      	add	r3, r1
 800d3fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3fe:	4619      	mov	r1, r3
 800d400:	4b61      	ldr	r3, [pc, #388]	; (800d588 <USB_EPStartXfer+0x48c>)
 800d402:	4013      	ands	r3, r2
 800d404:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d406:	69bb      	ldr	r3, [r7, #24]
 800d408:	015a      	lsls	r2, r3, #5
 800d40a:	69fb      	ldr	r3, [r7, #28]
 800d40c:	4413      	add	r3, r2
 800d40e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d412:	691a      	ldr	r2, [r3, #16]
 800d414:	69bb      	ldr	r3, [r7, #24]
 800d416:	0159      	lsls	r1, r3, #5
 800d418:	69fb      	ldr	r3, [r7, #28]
 800d41a:	440b      	add	r3, r1
 800d41c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d420:	4619      	mov	r1, r3
 800d422:	4b5a      	ldr	r3, [pc, #360]	; (800d58c <USB_EPStartXfer+0x490>)
 800d424:	4013      	ands	r3, r2
 800d426:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	695b      	ldr	r3, [r3, #20]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d123      	bne.n	800d478 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d430:	69bb      	ldr	r3, [r7, #24]
 800d432:	015a      	lsls	r2, r3, #5
 800d434:	69fb      	ldr	r3, [r7, #28]
 800d436:	4413      	add	r3, r2
 800d438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d43c:	691a      	ldr	r2, [r3, #16]
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	689b      	ldr	r3, [r3, #8]
 800d442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d446:	69b9      	ldr	r1, [r7, #24]
 800d448:	0148      	lsls	r0, r1, #5
 800d44a:	69f9      	ldr	r1, [r7, #28]
 800d44c:	4401      	add	r1, r0
 800d44e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d452:	4313      	orrs	r3, r2
 800d454:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d456:	69bb      	ldr	r3, [r7, #24]
 800d458:	015a      	lsls	r2, r3, #5
 800d45a:	69fb      	ldr	r3, [r7, #28]
 800d45c:	4413      	add	r3, r2
 800d45e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d462:	691b      	ldr	r3, [r3, #16]
 800d464:	69ba      	ldr	r2, [r7, #24]
 800d466:	0151      	lsls	r1, r2, #5
 800d468:	69fa      	ldr	r2, [r7, #28]
 800d46a:	440a      	add	r2, r1
 800d46c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d470:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d474:	6113      	str	r3, [r2, #16]
 800d476:	e033      	b.n	800d4e0 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d478:	68bb      	ldr	r3, [r7, #8]
 800d47a:	695a      	ldr	r2, [r3, #20]
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	689b      	ldr	r3, [r3, #8]
 800d480:	4413      	add	r3, r2
 800d482:	1e5a      	subs	r2, r3, #1
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	689b      	ldr	r3, [r3, #8]
 800d488:	fbb2 f3f3 	udiv	r3, r2, r3
 800d48c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d48e:	69bb      	ldr	r3, [r7, #24]
 800d490:	015a      	lsls	r2, r3, #5
 800d492:	69fb      	ldr	r3, [r7, #28]
 800d494:	4413      	add	r3, r2
 800d496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d49a:	691a      	ldr	r2, [r3, #16]
 800d49c:	8afb      	ldrh	r3, [r7, #22]
 800d49e:	04d9      	lsls	r1, r3, #19
 800d4a0:	4b3b      	ldr	r3, [pc, #236]	; (800d590 <USB_EPStartXfer+0x494>)
 800d4a2:	400b      	ands	r3, r1
 800d4a4:	69b9      	ldr	r1, [r7, #24]
 800d4a6:	0148      	lsls	r0, r1, #5
 800d4a8:	69f9      	ldr	r1, [r7, #28]
 800d4aa:	4401      	add	r1, r0
 800d4ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d4b0:	4313      	orrs	r3, r2
 800d4b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d4b4:	69bb      	ldr	r3, [r7, #24]
 800d4b6:	015a      	lsls	r2, r3, #5
 800d4b8:	69fb      	ldr	r3, [r7, #28]
 800d4ba:	4413      	add	r3, r2
 800d4bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4c0:	691a      	ldr	r2, [r3, #16]
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	689b      	ldr	r3, [r3, #8]
 800d4c6:	8af9      	ldrh	r1, [r7, #22]
 800d4c8:	fb01 f303 	mul.w	r3, r1, r3
 800d4cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d4d0:	69b9      	ldr	r1, [r7, #24]
 800d4d2:	0148      	lsls	r0, r1, #5
 800d4d4:	69f9      	ldr	r1, [r7, #28]
 800d4d6:	4401      	add	r1, r0
 800d4d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d4dc:	4313      	orrs	r3, r2
 800d4de:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d4e0:	79fb      	ldrb	r3, [r7, #7]
 800d4e2:	2b01      	cmp	r3, #1
 800d4e4:	d10d      	bne.n	800d502 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d4e6:	68bb      	ldr	r3, [r7, #8]
 800d4e8:	68db      	ldr	r3, [r3, #12]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d009      	beq.n	800d502 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	68d9      	ldr	r1, [r3, #12]
 800d4f2:	69bb      	ldr	r3, [r7, #24]
 800d4f4:	015a      	lsls	r2, r3, #5
 800d4f6:	69fb      	ldr	r3, [r7, #28]
 800d4f8:	4413      	add	r3, r2
 800d4fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4fe:	460a      	mov	r2, r1
 800d500:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	78db      	ldrb	r3, [r3, #3]
 800d506:	2b01      	cmp	r3, #1
 800d508:	d128      	bne.n	800d55c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d50a:	69fb      	ldr	r3, [r7, #28]
 800d50c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d510:	689b      	ldr	r3, [r3, #8]
 800d512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d516:	2b00      	cmp	r3, #0
 800d518:	d110      	bne.n	800d53c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d51a:	69bb      	ldr	r3, [r7, #24]
 800d51c:	015a      	lsls	r2, r3, #5
 800d51e:	69fb      	ldr	r3, [r7, #28]
 800d520:	4413      	add	r3, r2
 800d522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	69ba      	ldr	r2, [r7, #24]
 800d52a:	0151      	lsls	r1, r2, #5
 800d52c:	69fa      	ldr	r2, [r7, #28]
 800d52e:	440a      	add	r2, r1
 800d530:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d534:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d538:	6013      	str	r3, [r2, #0]
 800d53a:	e00f      	b.n	800d55c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d53c:	69bb      	ldr	r3, [r7, #24]
 800d53e:	015a      	lsls	r2, r3, #5
 800d540:	69fb      	ldr	r3, [r7, #28]
 800d542:	4413      	add	r3, r2
 800d544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	69ba      	ldr	r2, [r7, #24]
 800d54c:	0151      	lsls	r1, r2, #5
 800d54e:	69fa      	ldr	r2, [r7, #28]
 800d550:	440a      	add	r2, r1
 800d552:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d55a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d55c:	69bb      	ldr	r3, [r7, #24]
 800d55e:	015a      	lsls	r2, r3, #5
 800d560:	69fb      	ldr	r3, [r7, #28]
 800d562:	4413      	add	r3, r2
 800d564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	69ba      	ldr	r2, [r7, #24]
 800d56c:	0151      	lsls	r1, r2, #5
 800d56e:	69fa      	ldr	r2, [r7, #28]
 800d570:	440a      	add	r2, r1
 800d572:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d576:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d57a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d57c:	2300      	movs	r3, #0
}
 800d57e:	4618      	mov	r0, r3
 800d580:	3720      	adds	r7, #32
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}
 800d586:	bf00      	nop
 800d588:	fff80000 	.word	0xfff80000
 800d58c:	e007ffff 	.word	0xe007ffff
 800d590:	1ff80000 	.word	0x1ff80000

0800d594 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d594:	b480      	push	{r7}
 800d596:	b087      	sub	sp, #28
 800d598:	af00      	add	r7, sp, #0
 800d59a:	60f8      	str	r0, [r7, #12]
 800d59c:	60b9      	str	r1, [r7, #8]
 800d59e:	4613      	mov	r3, r2
 800d5a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	781b      	ldrb	r3, [r3, #0]
 800d5aa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d5ac:	68bb      	ldr	r3, [r7, #8]
 800d5ae:	785b      	ldrb	r3, [r3, #1]
 800d5b0:	2b01      	cmp	r3, #1
 800d5b2:	f040 80cd 	bne.w	800d750 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d5b6:	68bb      	ldr	r3, [r7, #8]
 800d5b8:	695b      	ldr	r3, [r3, #20]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d132      	bne.n	800d624 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d5be:	693b      	ldr	r3, [r7, #16]
 800d5c0:	015a      	lsls	r2, r3, #5
 800d5c2:	697b      	ldr	r3, [r7, #20]
 800d5c4:	4413      	add	r3, r2
 800d5c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5ca:	691a      	ldr	r2, [r3, #16]
 800d5cc:	693b      	ldr	r3, [r7, #16]
 800d5ce:	0159      	lsls	r1, r3, #5
 800d5d0:	697b      	ldr	r3, [r7, #20]
 800d5d2:	440b      	add	r3, r1
 800d5d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5d8:	4619      	mov	r1, r3
 800d5da:	4b98      	ldr	r3, [pc, #608]	; (800d83c <USB_EP0StartXfer+0x2a8>)
 800d5dc:	4013      	ands	r3, r2
 800d5de:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d5e0:	693b      	ldr	r3, [r7, #16]
 800d5e2:	015a      	lsls	r2, r3, #5
 800d5e4:	697b      	ldr	r3, [r7, #20]
 800d5e6:	4413      	add	r3, r2
 800d5e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5ec:	691b      	ldr	r3, [r3, #16]
 800d5ee:	693a      	ldr	r2, [r7, #16]
 800d5f0:	0151      	lsls	r1, r2, #5
 800d5f2:	697a      	ldr	r2, [r7, #20]
 800d5f4:	440a      	add	r2, r1
 800d5f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d5fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d600:	693b      	ldr	r3, [r7, #16]
 800d602:	015a      	lsls	r2, r3, #5
 800d604:	697b      	ldr	r3, [r7, #20]
 800d606:	4413      	add	r3, r2
 800d608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d60c:	691a      	ldr	r2, [r3, #16]
 800d60e:	693b      	ldr	r3, [r7, #16]
 800d610:	0159      	lsls	r1, r3, #5
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	440b      	add	r3, r1
 800d616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d61a:	4619      	mov	r1, r3
 800d61c:	4b88      	ldr	r3, [pc, #544]	; (800d840 <USB_EP0StartXfer+0x2ac>)
 800d61e:	4013      	ands	r3, r2
 800d620:	610b      	str	r3, [r1, #16]
 800d622:	e04e      	b.n	800d6c2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d624:	693b      	ldr	r3, [r7, #16]
 800d626:	015a      	lsls	r2, r3, #5
 800d628:	697b      	ldr	r3, [r7, #20]
 800d62a:	4413      	add	r3, r2
 800d62c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d630:	691a      	ldr	r2, [r3, #16]
 800d632:	693b      	ldr	r3, [r7, #16]
 800d634:	0159      	lsls	r1, r3, #5
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	440b      	add	r3, r1
 800d63a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d63e:	4619      	mov	r1, r3
 800d640:	4b7f      	ldr	r3, [pc, #508]	; (800d840 <USB_EP0StartXfer+0x2ac>)
 800d642:	4013      	ands	r3, r2
 800d644:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d646:	693b      	ldr	r3, [r7, #16]
 800d648:	015a      	lsls	r2, r3, #5
 800d64a:	697b      	ldr	r3, [r7, #20]
 800d64c:	4413      	add	r3, r2
 800d64e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d652:	691a      	ldr	r2, [r3, #16]
 800d654:	693b      	ldr	r3, [r7, #16]
 800d656:	0159      	lsls	r1, r3, #5
 800d658:	697b      	ldr	r3, [r7, #20]
 800d65a:	440b      	add	r3, r1
 800d65c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d660:	4619      	mov	r1, r3
 800d662:	4b76      	ldr	r3, [pc, #472]	; (800d83c <USB_EP0StartXfer+0x2a8>)
 800d664:	4013      	ands	r3, r2
 800d666:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	695a      	ldr	r2, [r3, #20]
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	689b      	ldr	r3, [r3, #8]
 800d670:	429a      	cmp	r2, r3
 800d672:	d903      	bls.n	800d67c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800d674:	68bb      	ldr	r3, [r7, #8]
 800d676:	689a      	ldr	r2, [r3, #8]
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d67c:	693b      	ldr	r3, [r7, #16]
 800d67e:	015a      	lsls	r2, r3, #5
 800d680:	697b      	ldr	r3, [r7, #20]
 800d682:	4413      	add	r3, r2
 800d684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d688:	691b      	ldr	r3, [r3, #16]
 800d68a:	693a      	ldr	r2, [r7, #16]
 800d68c:	0151      	lsls	r1, r2, #5
 800d68e:	697a      	ldr	r2, [r7, #20]
 800d690:	440a      	add	r2, r1
 800d692:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d696:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d69a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d69c:	693b      	ldr	r3, [r7, #16]
 800d69e:	015a      	lsls	r2, r3, #5
 800d6a0:	697b      	ldr	r3, [r7, #20]
 800d6a2:	4413      	add	r3, r2
 800d6a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6a8:	691a      	ldr	r2, [r3, #16]
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	695b      	ldr	r3, [r3, #20]
 800d6ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d6b2:	6939      	ldr	r1, [r7, #16]
 800d6b4:	0148      	lsls	r0, r1, #5
 800d6b6:	6979      	ldr	r1, [r7, #20]
 800d6b8:	4401      	add	r1, r0
 800d6ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d6be:	4313      	orrs	r3, r2
 800d6c0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d6c2:	79fb      	ldrb	r3, [r7, #7]
 800d6c4:	2b01      	cmp	r3, #1
 800d6c6:	d11e      	bne.n	800d706 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d6c8:	68bb      	ldr	r3, [r7, #8]
 800d6ca:	691b      	ldr	r3, [r3, #16]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d009      	beq.n	800d6e4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d6d0:	693b      	ldr	r3, [r7, #16]
 800d6d2:	015a      	lsls	r2, r3, #5
 800d6d4:	697b      	ldr	r3, [r7, #20]
 800d6d6:	4413      	add	r3, r2
 800d6d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6dc:	461a      	mov	r2, r3
 800d6de:	68bb      	ldr	r3, [r7, #8]
 800d6e0:	691b      	ldr	r3, [r3, #16]
 800d6e2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d6e4:	693b      	ldr	r3, [r7, #16]
 800d6e6:	015a      	lsls	r2, r3, #5
 800d6e8:	697b      	ldr	r3, [r7, #20]
 800d6ea:	4413      	add	r3, r2
 800d6ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	693a      	ldr	r2, [r7, #16]
 800d6f4:	0151      	lsls	r1, r2, #5
 800d6f6:	697a      	ldr	r2, [r7, #20]
 800d6f8:	440a      	add	r2, r1
 800d6fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d702:	6013      	str	r3, [r2, #0]
 800d704:	e092      	b.n	800d82c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d706:	693b      	ldr	r3, [r7, #16]
 800d708:	015a      	lsls	r2, r3, #5
 800d70a:	697b      	ldr	r3, [r7, #20]
 800d70c:	4413      	add	r3, r2
 800d70e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	693a      	ldr	r2, [r7, #16]
 800d716:	0151      	lsls	r1, r2, #5
 800d718:	697a      	ldr	r2, [r7, #20]
 800d71a:	440a      	add	r2, r1
 800d71c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d720:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d724:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d726:	68bb      	ldr	r3, [r7, #8]
 800d728:	695b      	ldr	r3, [r3, #20]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d07e      	beq.n	800d82c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d72e:	697b      	ldr	r3, [r7, #20]
 800d730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d734:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	781b      	ldrb	r3, [r3, #0]
 800d73a:	f003 030f 	and.w	r3, r3, #15
 800d73e:	2101      	movs	r1, #1
 800d740:	fa01 f303 	lsl.w	r3, r1, r3
 800d744:	6979      	ldr	r1, [r7, #20]
 800d746:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d74a:	4313      	orrs	r3, r2
 800d74c:	634b      	str	r3, [r1, #52]	; 0x34
 800d74e:	e06d      	b.n	800d82c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	015a      	lsls	r2, r3, #5
 800d754:	697b      	ldr	r3, [r7, #20]
 800d756:	4413      	add	r3, r2
 800d758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d75c:	691a      	ldr	r2, [r3, #16]
 800d75e:	693b      	ldr	r3, [r7, #16]
 800d760:	0159      	lsls	r1, r3, #5
 800d762:	697b      	ldr	r3, [r7, #20]
 800d764:	440b      	add	r3, r1
 800d766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d76a:	4619      	mov	r1, r3
 800d76c:	4b34      	ldr	r3, [pc, #208]	; (800d840 <USB_EP0StartXfer+0x2ac>)
 800d76e:	4013      	ands	r3, r2
 800d770:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d772:	693b      	ldr	r3, [r7, #16]
 800d774:	015a      	lsls	r2, r3, #5
 800d776:	697b      	ldr	r3, [r7, #20]
 800d778:	4413      	add	r3, r2
 800d77a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d77e:	691a      	ldr	r2, [r3, #16]
 800d780:	693b      	ldr	r3, [r7, #16]
 800d782:	0159      	lsls	r1, r3, #5
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	440b      	add	r3, r1
 800d788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d78c:	4619      	mov	r1, r3
 800d78e:	4b2b      	ldr	r3, [pc, #172]	; (800d83c <USB_EP0StartXfer+0x2a8>)
 800d790:	4013      	ands	r3, r2
 800d792:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	695b      	ldr	r3, [r3, #20]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d003      	beq.n	800d7a4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	689a      	ldr	r2, [r3, #8]
 800d7a0:	68bb      	ldr	r3, [r7, #8]
 800d7a2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d7a4:	693b      	ldr	r3, [r7, #16]
 800d7a6:	015a      	lsls	r2, r3, #5
 800d7a8:	697b      	ldr	r3, [r7, #20]
 800d7aa:	4413      	add	r3, r2
 800d7ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7b0:	691b      	ldr	r3, [r3, #16]
 800d7b2:	693a      	ldr	r2, [r7, #16]
 800d7b4:	0151      	lsls	r1, r2, #5
 800d7b6:	697a      	ldr	r2, [r7, #20]
 800d7b8:	440a      	add	r2, r1
 800d7ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d7be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d7c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d7c4:	693b      	ldr	r3, [r7, #16]
 800d7c6:	015a      	lsls	r2, r3, #5
 800d7c8:	697b      	ldr	r3, [r7, #20]
 800d7ca:	4413      	add	r3, r2
 800d7cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7d0:	691a      	ldr	r2, [r3, #16]
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	689b      	ldr	r3, [r3, #8]
 800d7d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d7da:	6939      	ldr	r1, [r7, #16]
 800d7dc:	0148      	lsls	r0, r1, #5
 800d7de:	6979      	ldr	r1, [r7, #20]
 800d7e0:	4401      	add	r1, r0
 800d7e2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d7e6:	4313      	orrs	r3, r2
 800d7e8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800d7ea:	79fb      	ldrb	r3, [r7, #7]
 800d7ec:	2b01      	cmp	r3, #1
 800d7ee:	d10d      	bne.n	800d80c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	68db      	ldr	r3, [r3, #12]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d009      	beq.n	800d80c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	68d9      	ldr	r1, [r3, #12]
 800d7fc:	693b      	ldr	r3, [r7, #16]
 800d7fe:	015a      	lsls	r2, r3, #5
 800d800:	697b      	ldr	r3, [r7, #20]
 800d802:	4413      	add	r3, r2
 800d804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d808:	460a      	mov	r2, r1
 800d80a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d80c:	693b      	ldr	r3, [r7, #16]
 800d80e:	015a      	lsls	r2, r3, #5
 800d810:	697b      	ldr	r3, [r7, #20]
 800d812:	4413      	add	r3, r2
 800d814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	693a      	ldr	r2, [r7, #16]
 800d81c:	0151      	lsls	r1, r2, #5
 800d81e:	697a      	ldr	r2, [r7, #20]
 800d820:	440a      	add	r2, r1
 800d822:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d826:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d82a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d82c:	2300      	movs	r3, #0
}
 800d82e:	4618      	mov	r0, r3
 800d830:	371c      	adds	r7, #28
 800d832:	46bd      	mov	sp, r7
 800d834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d838:	4770      	bx	lr
 800d83a:	bf00      	nop
 800d83c:	e007ffff 	.word	0xe007ffff
 800d840:	fff80000 	.word	0xfff80000

0800d844 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d844:	b480      	push	{r7}
 800d846:	b089      	sub	sp, #36	; 0x24
 800d848:	af00      	add	r7, sp, #0
 800d84a:	60f8      	str	r0, [r7, #12]
 800d84c:	60b9      	str	r1, [r7, #8]
 800d84e:	4611      	mov	r1, r2
 800d850:	461a      	mov	r2, r3
 800d852:	460b      	mov	r3, r1
 800d854:	71fb      	strb	r3, [r7, #7]
 800d856:	4613      	mov	r3, r2
 800d858:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800d85e:	68bb      	ldr	r3, [r7, #8]
 800d860:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800d862:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d866:	2b00      	cmp	r3, #0
 800d868:	d11a      	bne.n	800d8a0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d86a:	88bb      	ldrh	r3, [r7, #4]
 800d86c:	3303      	adds	r3, #3
 800d86e:	089b      	lsrs	r3, r3, #2
 800d870:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d872:	2300      	movs	r3, #0
 800d874:	61bb      	str	r3, [r7, #24]
 800d876:	e00f      	b.n	800d898 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d878:	79fb      	ldrb	r3, [r7, #7]
 800d87a:	031a      	lsls	r2, r3, #12
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	4413      	add	r3, r2
 800d880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d884:	461a      	mov	r2, r3
 800d886:	69fb      	ldr	r3, [r7, #28]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d88c:	69fb      	ldr	r3, [r7, #28]
 800d88e:	3304      	adds	r3, #4
 800d890:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d892:	69bb      	ldr	r3, [r7, #24]
 800d894:	3301      	adds	r3, #1
 800d896:	61bb      	str	r3, [r7, #24]
 800d898:	69ba      	ldr	r2, [r7, #24]
 800d89a:	693b      	ldr	r3, [r7, #16]
 800d89c:	429a      	cmp	r2, r3
 800d89e:	d3eb      	bcc.n	800d878 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d8a0:	2300      	movs	r3, #0
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3724      	adds	r7, #36	; 0x24
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ac:	4770      	bx	lr

0800d8ae <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d8ae:	b480      	push	{r7}
 800d8b0:	b089      	sub	sp, #36	; 0x24
 800d8b2:	af00      	add	r7, sp, #0
 800d8b4:	60f8      	str	r0, [r7, #12]
 800d8b6:	60b9      	str	r1, [r7, #8]
 800d8b8:	4613      	mov	r3, r2
 800d8ba:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800d8c0:	68bb      	ldr	r3, [r7, #8]
 800d8c2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d8c4:	88fb      	ldrh	r3, [r7, #6]
 800d8c6:	3303      	adds	r3, #3
 800d8c8:	089b      	lsrs	r3, r3, #2
 800d8ca:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	61bb      	str	r3, [r7, #24]
 800d8d0:	e00b      	b.n	800d8ea <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d8d2:	697b      	ldr	r3, [r7, #20]
 800d8d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8d8:	681a      	ldr	r2, [r3, #0]
 800d8da:	69fb      	ldr	r3, [r7, #28]
 800d8dc:	601a      	str	r2, [r3, #0]
    pDest++;
 800d8de:	69fb      	ldr	r3, [r7, #28]
 800d8e0:	3304      	adds	r3, #4
 800d8e2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d8e4:	69bb      	ldr	r3, [r7, #24]
 800d8e6:	3301      	adds	r3, #1
 800d8e8:	61bb      	str	r3, [r7, #24]
 800d8ea:	69ba      	ldr	r2, [r7, #24]
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	429a      	cmp	r2, r3
 800d8f0:	d3ef      	bcc.n	800d8d2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800d8f2:	69fb      	ldr	r3, [r7, #28]
}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3724      	adds	r7, #36	; 0x24
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fe:	4770      	bx	lr

0800d900 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d900:	b480      	push	{r7}
 800d902:	b085      	sub	sp, #20
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
 800d908:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	781b      	ldrb	r3, [r3, #0]
 800d912:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	785b      	ldrb	r3, [r3, #1]
 800d918:	2b01      	cmp	r3, #1
 800d91a:	d12c      	bne.n	800d976 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d91c:	68bb      	ldr	r3, [r7, #8]
 800d91e:	015a      	lsls	r2, r3, #5
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	4413      	add	r3, r2
 800d924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	db12      	blt.n	800d954 <USB_EPSetStall+0x54>
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d00f      	beq.n	800d954 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	015a      	lsls	r2, r3, #5
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	4413      	add	r3, r2
 800d93c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	68ba      	ldr	r2, [r7, #8]
 800d944:	0151      	lsls	r1, r2, #5
 800d946:	68fa      	ldr	r2, [r7, #12]
 800d948:	440a      	add	r2, r1
 800d94a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d94e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d952:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	015a      	lsls	r2, r3, #5
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	4413      	add	r3, r2
 800d95c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	68ba      	ldr	r2, [r7, #8]
 800d964:	0151      	lsls	r1, r2, #5
 800d966:	68fa      	ldr	r2, [r7, #12]
 800d968:	440a      	add	r2, r1
 800d96a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d96e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d972:	6013      	str	r3, [r2, #0]
 800d974:	e02b      	b.n	800d9ce <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d976:	68bb      	ldr	r3, [r7, #8]
 800d978:	015a      	lsls	r2, r3, #5
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	4413      	add	r3, r2
 800d97e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	2b00      	cmp	r3, #0
 800d986:	db12      	blt.n	800d9ae <USB_EPSetStall+0xae>
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d00f      	beq.n	800d9ae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	015a      	lsls	r2, r3, #5
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	4413      	add	r3, r2
 800d996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	68ba      	ldr	r2, [r7, #8]
 800d99e:	0151      	lsls	r1, r2, #5
 800d9a0:	68fa      	ldr	r2, [r7, #12]
 800d9a2:	440a      	add	r2, r1
 800d9a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d9a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d9ac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	015a      	lsls	r2, r3, #5
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	4413      	add	r3, r2
 800d9b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	68ba      	ldr	r2, [r7, #8]
 800d9be:	0151      	lsls	r1, r2, #5
 800d9c0:	68fa      	ldr	r2, [r7, #12]
 800d9c2:	440a      	add	r2, r1
 800d9c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d9c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d9cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d9ce:	2300      	movs	r3, #0
}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	3714      	adds	r7, #20
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9da:	4770      	bx	lr

0800d9dc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d9dc:	b480      	push	{r7}
 800d9de:	b085      	sub	sp, #20
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	781b      	ldrb	r3, [r3, #0]
 800d9ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	785b      	ldrb	r3, [r3, #1]
 800d9f4:	2b01      	cmp	r3, #1
 800d9f6:	d128      	bne.n	800da4a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	015a      	lsls	r2, r3, #5
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	4413      	add	r3, r2
 800da00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	68ba      	ldr	r2, [r7, #8]
 800da08:	0151      	lsls	r1, r2, #5
 800da0a:	68fa      	ldr	r2, [r7, #12]
 800da0c:	440a      	add	r2, r1
 800da0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800da16:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800da18:	683b      	ldr	r3, [r7, #0]
 800da1a:	78db      	ldrb	r3, [r3, #3]
 800da1c:	2b03      	cmp	r3, #3
 800da1e:	d003      	beq.n	800da28 <USB_EPClearStall+0x4c>
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	78db      	ldrb	r3, [r3, #3]
 800da24:	2b02      	cmp	r3, #2
 800da26:	d138      	bne.n	800da9a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	015a      	lsls	r2, r3, #5
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	4413      	add	r3, r2
 800da30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	68ba      	ldr	r2, [r7, #8]
 800da38:	0151      	lsls	r1, r2, #5
 800da3a:	68fa      	ldr	r2, [r7, #12]
 800da3c:	440a      	add	r2, r1
 800da3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800da46:	6013      	str	r3, [r2, #0]
 800da48:	e027      	b.n	800da9a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	015a      	lsls	r2, r3, #5
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	4413      	add	r3, r2
 800da52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	68ba      	ldr	r2, [r7, #8]
 800da5a:	0151      	lsls	r1, r2, #5
 800da5c:	68fa      	ldr	r2, [r7, #12]
 800da5e:	440a      	add	r2, r1
 800da60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da64:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800da68:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	78db      	ldrb	r3, [r3, #3]
 800da6e:	2b03      	cmp	r3, #3
 800da70:	d003      	beq.n	800da7a <USB_EPClearStall+0x9e>
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	78db      	ldrb	r3, [r3, #3]
 800da76:	2b02      	cmp	r3, #2
 800da78:	d10f      	bne.n	800da9a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800da7a:	68bb      	ldr	r3, [r7, #8]
 800da7c:	015a      	lsls	r2, r3, #5
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	4413      	add	r3, r2
 800da82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	68ba      	ldr	r2, [r7, #8]
 800da8a:	0151      	lsls	r1, r2, #5
 800da8c:	68fa      	ldr	r2, [r7, #12]
 800da8e:	440a      	add	r2, r1
 800da90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800da98:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800da9a:	2300      	movs	r3, #0
}
 800da9c:	4618      	mov	r0, r3
 800da9e:	3714      	adds	r7, #20
 800daa0:	46bd      	mov	sp, r7
 800daa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa6:	4770      	bx	lr

0800daa8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800daa8:	b480      	push	{r7}
 800daaa:	b085      	sub	sp, #20
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
 800dab0:	460b      	mov	r3, r1
 800dab2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	68fa      	ldr	r2, [r7, #12]
 800dac2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dac6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800daca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dad2:	681a      	ldr	r2, [r3, #0]
 800dad4:	78fb      	ldrb	r3, [r7, #3]
 800dad6:	011b      	lsls	r3, r3, #4
 800dad8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800dadc:	68f9      	ldr	r1, [r7, #12]
 800dade:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dae2:	4313      	orrs	r3, r2
 800dae4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800dae6:	2300      	movs	r3, #0
}
 800dae8:	4618      	mov	r0, r3
 800daea:	3714      	adds	r7, #20
 800daec:	46bd      	mov	sp, r7
 800daee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf2:	4770      	bx	lr

0800daf4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b084      	sub	sp, #16
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db06:	685b      	ldr	r3, [r3, #4]
 800db08:	68fa      	ldr	r2, [r7, #12]
 800db0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800db0e:	f023 0302 	bic.w	r3, r3, #2
 800db12:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800db14:	2003      	movs	r0, #3
 800db16:	f7f4 f947 	bl	8001da8 <HAL_Delay>

  return HAL_OK;
 800db1a:	2300      	movs	r3, #0
}
 800db1c:	4618      	mov	r0, r3
 800db1e:	3710      	adds	r7, #16
 800db20:	46bd      	mov	sp, r7
 800db22:	bd80      	pop	{r7, pc}

0800db24 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b084      	sub	sp, #16
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db36:	685b      	ldr	r3, [r3, #4]
 800db38:	68fa      	ldr	r2, [r7, #12]
 800db3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800db3e:	f043 0302 	orr.w	r3, r3, #2
 800db42:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800db44:	2003      	movs	r0, #3
 800db46:	f7f4 f92f 	bl	8001da8 <HAL_Delay>

  return HAL_OK;
 800db4a:	2300      	movs	r3, #0
}
 800db4c:	4618      	mov	r0, r3
 800db4e:	3710      	adds	r7, #16
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}

0800db54 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800db54:	b480      	push	{r7}
 800db56:	b085      	sub	sp, #20
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	695b      	ldr	r3, [r3, #20]
 800db60:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	699b      	ldr	r3, [r3, #24]
 800db66:	68fa      	ldr	r2, [r7, #12]
 800db68:	4013      	ands	r3, r2
 800db6a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800db6c:	68fb      	ldr	r3, [r7, #12]
}
 800db6e:	4618      	mov	r0, r3
 800db70:	3714      	adds	r7, #20
 800db72:	46bd      	mov	sp, r7
 800db74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db78:	4770      	bx	lr

0800db7a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800db7a:	b480      	push	{r7}
 800db7c:	b085      	sub	sp, #20
 800db7e:	af00      	add	r7, sp, #0
 800db80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db8c:	699b      	ldr	r3, [r3, #24]
 800db8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db96:	69db      	ldr	r3, [r3, #28]
 800db98:	68ba      	ldr	r2, [r7, #8]
 800db9a:	4013      	ands	r3, r2
 800db9c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800db9e:	68bb      	ldr	r3, [r7, #8]
 800dba0:	0c1b      	lsrs	r3, r3, #16
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	3714      	adds	r7, #20
 800dba6:	46bd      	mov	sp, r7
 800dba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbac:	4770      	bx	lr

0800dbae <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800dbae:	b480      	push	{r7}
 800dbb0:	b085      	sub	sp, #20
 800dbb2:	af00      	add	r7, sp, #0
 800dbb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbc0:	699b      	ldr	r3, [r3, #24]
 800dbc2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbca:	69db      	ldr	r3, [r3, #28]
 800dbcc:	68ba      	ldr	r2, [r7, #8]
 800dbce:	4013      	ands	r3, r2
 800dbd0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800dbd2:	68bb      	ldr	r3, [r7, #8]
 800dbd4:	b29b      	uxth	r3, r3
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3714      	adds	r7, #20
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe0:	4770      	bx	lr

0800dbe2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800dbe2:	b480      	push	{r7}
 800dbe4:	b085      	sub	sp, #20
 800dbe6:	af00      	add	r7, sp, #0
 800dbe8:	6078      	str	r0, [r7, #4]
 800dbea:	460b      	mov	r3, r1
 800dbec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800dbf2:	78fb      	ldrb	r3, [r7, #3]
 800dbf4:	015a      	lsls	r2, r3, #5
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	4413      	add	r3, r2
 800dbfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbfe:	689b      	ldr	r3, [r3, #8]
 800dc00:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc08:	695b      	ldr	r3, [r3, #20]
 800dc0a:	68ba      	ldr	r2, [r7, #8]
 800dc0c:	4013      	ands	r3, r2
 800dc0e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800dc10:	68bb      	ldr	r3, [r7, #8]
}
 800dc12:	4618      	mov	r0, r3
 800dc14:	3714      	adds	r7, #20
 800dc16:	46bd      	mov	sp, r7
 800dc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1c:	4770      	bx	lr

0800dc1e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800dc1e:	b480      	push	{r7}
 800dc20:	b087      	sub	sp, #28
 800dc22:	af00      	add	r7, sp, #0
 800dc24:	6078      	str	r0, [r7, #4]
 800dc26:	460b      	mov	r3, r1
 800dc28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800dc2e:	697b      	ldr	r3, [r7, #20]
 800dc30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc34:	691b      	ldr	r3, [r3, #16]
 800dc36:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc40:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800dc42:	78fb      	ldrb	r3, [r7, #3]
 800dc44:	f003 030f 	and.w	r3, r3, #15
 800dc48:	68fa      	ldr	r2, [r7, #12]
 800dc4a:	fa22 f303 	lsr.w	r3, r2, r3
 800dc4e:	01db      	lsls	r3, r3, #7
 800dc50:	b2db      	uxtb	r3, r3
 800dc52:	693a      	ldr	r2, [r7, #16]
 800dc54:	4313      	orrs	r3, r2
 800dc56:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800dc58:	78fb      	ldrb	r3, [r7, #3]
 800dc5a:	015a      	lsls	r2, r3, #5
 800dc5c:	697b      	ldr	r3, [r7, #20]
 800dc5e:	4413      	add	r3, r2
 800dc60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc64:	689b      	ldr	r3, [r3, #8]
 800dc66:	693a      	ldr	r2, [r7, #16]
 800dc68:	4013      	ands	r3, r2
 800dc6a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800dc6c:	68bb      	ldr	r3, [r7, #8]
}
 800dc6e:	4618      	mov	r0, r3
 800dc70:	371c      	adds	r7, #28
 800dc72:	46bd      	mov	sp, r7
 800dc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc78:	4770      	bx	lr

0800dc7a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800dc7a:	b480      	push	{r7}
 800dc7c:	b083      	sub	sp, #12
 800dc7e:	af00      	add	r7, sp, #0
 800dc80:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	695b      	ldr	r3, [r3, #20]
 800dc86:	f003 0301 	and.w	r3, r3, #1
}
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	370c      	adds	r7, #12
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc94:	4770      	bx	lr
	...

0800dc98 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800dc98:	b480      	push	{r7}
 800dc9a:	b085      	sub	sp, #20
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcaa:	681a      	ldr	r2, [r3, #0]
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcb2:	4619      	mov	r1, r3
 800dcb4:	4b09      	ldr	r3, [pc, #36]	; (800dcdc <USB_ActivateSetup+0x44>)
 800dcb6:	4013      	ands	r3, r2
 800dcb8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dcc0:	685b      	ldr	r3, [r3, #4]
 800dcc2:	68fa      	ldr	r2, [r7, #12]
 800dcc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dcc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dccc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dcce:	2300      	movs	r3, #0
}
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	3714      	adds	r7, #20
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcda:	4770      	bx	lr
 800dcdc:	fffff800 	.word	0xfffff800

0800dce0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800dce0:	b480      	push	{r7}
 800dce2:	b087      	sub	sp, #28
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	60f8      	str	r0, [r7, #12]
 800dce8:	460b      	mov	r3, r1
 800dcea:	607a      	str	r2, [r7, #4]
 800dcec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	333c      	adds	r3, #60	; 0x3c
 800dcf6:	3304      	adds	r3, #4
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800dcfc:	693b      	ldr	r3, [r7, #16]
 800dcfe:	4a26      	ldr	r2, [pc, #152]	; (800dd98 <USB_EP0_OutStart+0xb8>)
 800dd00:	4293      	cmp	r3, r2
 800dd02:	d90a      	bls.n	800dd1a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dd10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dd14:	d101      	bne.n	800dd1a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800dd16:	2300      	movs	r3, #0
 800dd18:	e037      	b.n	800dd8a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800dd1a:	697b      	ldr	r3, [r7, #20]
 800dd1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd20:	461a      	mov	r2, r3
 800dd22:	2300      	movs	r3, #0
 800dd24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dd26:	697b      	ldr	r3, [r7, #20]
 800dd28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd2c:	691b      	ldr	r3, [r3, #16]
 800dd2e:	697a      	ldr	r2, [r7, #20]
 800dd30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dd34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dd38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800dd3a:	697b      	ldr	r3, [r7, #20]
 800dd3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd40:	691b      	ldr	r3, [r3, #16]
 800dd42:	697a      	ldr	r2, [r7, #20]
 800dd44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dd48:	f043 0318 	orr.w	r3, r3, #24
 800dd4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800dd4e:	697b      	ldr	r3, [r7, #20]
 800dd50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd54:	691b      	ldr	r3, [r3, #16]
 800dd56:	697a      	ldr	r2, [r7, #20]
 800dd58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dd5c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800dd60:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800dd62:	7afb      	ldrb	r3, [r7, #11]
 800dd64:	2b01      	cmp	r3, #1
 800dd66:	d10f      	bne.n	800dd88 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd6e:	461a      	mov	r2, r3
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	697a      	ldr	r2, [r7, #20]
 800dd7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dd82:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800dd86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dd88:	2300      	movs	r3, #0
}
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	371c      	adds	r7, #28
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd94:	4770      	bx	lr
 800dd96:	bf00      	nop
 800dd98:	4f54300a 	.word	0x4f54300a

0800dd9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800dd9c:	b480      	push	{r7}
 800dd9e:	b085      	sub	sp, #20
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800dda4:	2300      	movs	r3, #0
 800dda6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	3301      	adds	r3, #1
 800ddac:	60fb      	str	r3, [r7, #12]
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	4a13      	ldr	r2, [pc, #76]	; (800de00 <USB_CoreReset+0x64>)
 800ddb2:	4293      	cmp	r3, r2
 800ddb4:	d901      	bls.n	800ddba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ddb6:	2303      	movs	r3, #3
 800ddb8:	e01b      	b.n	800ddf2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	691b      	ldr	r3, [r3, #16]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	daf2      	bge.n	800dda8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	691b      	ldr	r3, [r3, #16]
 800ddca:	f043 0201 	orr.w	r2, r3, #1
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	3301      	adds	r3, #1
 800ddd6:	60fb      	str	r3, [r7, #12]
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	4a09      	ldr	r2, [pc, #36]	; (800de00 <USB_CoreReset+0x64>)
 800dddc:	4293      	cmp	r3, r2
 800ddde:	d901      	bls.n	800dde4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800dde0:	2303      	movs	r3, #3
 800dde2:	e006      	b.n	800ddf2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	691b      	ldr	r3, [r3, #16]
 800dde8:	f003 0301 	and.w	r3, r3, #1
 800ddec:	2b01      	cmp	r3, #1
 800ddee:	d0f0      	beq.n	800ddd2 <USB_CoreReset+0x36>

  return HAL_OK;
 800ddf0:	2300      	movs	r3, #0
}
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	3714      	adds	r7, #20
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfc:	4770      	bx	lr
 800ddfe:	bf00      	nop
 800de00:	00030d40 	.word	0x00030d40

0800de04 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b084      	sub	sp, #16
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
 800de0c:	460b      	mov	r3, r1
 800de0e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800de10:	2300      	movs	r3, #0
 800de12:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	7c1b      	ldrb	r3, [r3, #16]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d115      	bne.n	800de48 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800de1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800de20:	2202      	movs	r2, #2
 800de22:	2181      	movs	r1, #129	; 0x81
 800de24:	6878      	ldr	r0, [r7, #4]
 800de26:	f001 feee 	bl	800fc06 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	2201      	movs	r2, #1
 800de2e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800de30:	f44f 7300 	mov.w	r3, #512	; 0x200
 800de34:	2202      	movs	r2, #2
 800de36:	2101      	movs	r1, #1
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f001 fee4 	bl	800fc06 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	2201      	movs	r2, #1
 800de42:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800de46:	e012      	b.n	800de6e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800de48:	2340      	movs	r3, #64	; 0x40
 800de4a:	2202      	movs	r2, #2
 800de4c:	2181      	movs	r1, #129	; 0x81
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f001 fed9 	bl	800fc06 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2201      	movs	r2, #1
 800de58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800de5a:	2340      	movs	r3, #64	; 0x40
 800de5c:	2202      	movs	r2, #2
 800de5e:	2101      	movs	r1, #1
 800de60:	6878      	ldr	r0, [r7, #4]
 800de62:	f001 fed0 	bl	800fc06 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	2201      	movs	r2, #1
 800de6a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800de6e:	2308      	movs	r3, #8
 800de70:	2203      	movs	r2, #3
 800de72:	2182      	movs	r1, #130	; 0x82
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	f001 fec6 	bl	800fc06 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2201      	movs	r2, #1
 800de7e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800de80:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800de84:	f002 f83c 	bl	800ff00 <malloc>
 800de88:	4603      	mov	r3, r0
 800de8a:	461a      	mov	r2, r3
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d102      	bne.n	800dea2 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800de9c:	2301      	movs	r3, #1
 800de9e:	73fb      	strb	r3, [r7, #15]
 800dea0:	e026      	b.n	800def0 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dea8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	2200      	movs	r2, #0
 800deb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	2200      	movs	r2, #0
 800dec0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	7c1b      	ldrb	r3, [r3, #16]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d109      	bne.n	800dee0 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800decc:	68bb      	ldr	r3, [r7, #8]
 800dece:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ded2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ded6:	2101      	movs	r1, #1
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f001 ff85 	bl	800fde8 <USBD_LL_PrepareReceive>
 800dede:	e007      	b.n	800def0 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dee6:	2340      	movs	r3, #64	; 0x40
 800dee8:	2101      	movs	r1, #1
 800deea:	6878      	ldr	r0, [r7, #4]
 800deec:	f001 ff7c 	bl	800fde8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800def0:	7bfb      	ldrb	r3, [r7, #15]
}
 800def2:	4618      	mov	r0, r3
 800def4:	3710      	adds	r7, #16
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}

0800defa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800defa:	b580      	push	{r7, lr}
 800defc:	b084      	sub	sp, #16
 800defe:	af00      	add	r7, sp, #0
 800df00:	6078      	str	r0, [r7, #4]
 800df02:	460b      	mov	r3, r1
 800df04:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800df06:	2300      	movs	r3, #0
 800df08:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800df0a:	2181      	movs	r1, #129	; 0x81
 800df0c:	6878      	ldr	r0, [r7, #4]
 800df0e:	f001 fea0 	bl	800fc52 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2200      	movs	r2, #0
 800df16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800df18:	2101      	movs	r1, #1
 800df1a:	6878      	ldr	r0, [r7, #4]
 800df1c:	f001 fe99 	bl	800fc52 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	2200      	movs	r2, #0
 800df24:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800df28:	2182      	movs	r1, #130	; 0x82
 800df2a:	6878      	ldr	r0, [r7, #4]
 800df2c:	f001 fe91 	bl	800fc52 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2200      	movs	r2, #0
 800df34:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d00e      	beq.n	800df5e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800df46:	685b      	ldr	r3, [r3, #4]
 800df48:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df50:	4618      	mov	r0, r3
 800df52:	f001 ffdd 	bl	800ff10 <free>
    pdev->pClassData = NULL;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	2200      	movs	r2, #0
 800df5a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800df5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800df60:	4618      	mov	r0, r3
 800df62:	3710      	adds	r7, #16
 800df64:	46bd      	mov	sp, r7
 800df66:	bd80      	pop	{r7, pc}

0800df68 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b086      	sub	sp, #24
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df78:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800df7a:	2300      	movs	r3, #0
 800df7c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800df7e:	2300      	movs	r3, #0
 800df80:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800df82:	2300      	movs	r3, #0
 800df84:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	781b      	ldrb	r3, [r3, #0]
 800df8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d039      	beq.n	800e006 <USBD_CDC_Setup+0x9e>
 800df92:	2b20      	cmp	r3, #32
 800df94:	d17c      	bne.n	800e090 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	88db      	ldrh	r3, [r3, #6]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d029      	beq.n	800dff2 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	781b      	ldrb	r3, [r3, #0]
 800dfa2:	b25b      	sxtb	r3, r3
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	da11      	bge.n	800dfcc <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dfae:	689b      	ldr	r3, [r3, #8]
 800dfb0:	683a      	ldr	r2, [r7, #0]
 800dfb2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800dfb4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800dfb6:	683a      	ldr	r2, [r7, #0]
 800dfb8:	88d2      	ldrh	r2, [r2, #6]
 800dfba:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800dfbc:	6939      	ldr	r1, [r7, #16]
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	88db      	ldrh	r3, [r3, #6]
 800dfc2:	461a      	mov	r2, r3
 800dfc4:	6878      	ldr	r0, [r7, #4]
 800dfc6:	f001 fa0f 	bl	800f3e8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800dfca:	e068      	b.n	800e09e <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800dfcc:	683b      	ldr	r3, [r7, #0]
 800dfce:	785a      	ldrb	r2, [r3, #1]
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	88db      	ldrh	r3, [r3, #6]
 800dfda:	b2da      	uxtb	r2, r3
 800dfdc:	693b      	ldr	r3, [r7, #16]
 800dfde:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800dfe2:	6939      	ldr	r1, [r7, #16]
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	88db      	ldrh	r3, [r3, #6]
 800dfe8:	461a      	mov	r2, r3
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	f001 fa2a 	bl	800f444 <USBD_CtlPrepareRx>
      break;
 800dff0:	e055      	b.n	800e09e <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dff8:	689b      	ldr	r3, [r3, #8]
 800dffa:	683a      	ldr	r2, [r7, #0]
 800dffc:	7850      	ldrb	r0, [r2, #1]
 800dffe:	2200      	movs	r2, #0
 800e000:	6839      	ldr	r1, [r7, #0]
 800e002:	4798      	blx	r3
      break;
 800e004:	e04b      	b.n	800e09e <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e006:	683b      	ldr	r3, [r7, #0]
 800e008:	785b      	ldrb	r3, [r3, #1]
 800e00a:	2b0a      	cmp	r3, #10
 800e00c:	d017      	beq.n	800e03e <USBD_CDC_Setup+0xd6>
 800e00e:	2b0b      	cmp	r3, #11
 800e010:	d029      	beq.n	800e066 <USBD_CDC_Setup+0xfe>
 800e012:	2b00      	cmp	r3, #0
 800e014:	d133      	bne.n	800e07e <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e01c:	2b03      	cmp	r3, #3
 800e01e:	d107      	bne.n	800e030 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800e020:	f107 030c 	add.w	r3, r7, #12
 800e024:	2202      	movs	r2, #2
 800e026:	4619      	mov	r1, r3
 800e028:	6878      	ldr	r0, [r7, #4]
 800e02a:	f001 f9dd 	bl	800f3e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e02e:	e02e      	b.n	800e08e <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800e030:	6839      	ldr	r1, [r7, #0]
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f001 f96d 	bl	800f312 <USBD_CtlError>
            ret = USBD_FAIL;
 800e038:	2302      	movs	r3, #2
 800e03a:	75fb      	strb	r3, [r7, #23]
          break;
 800e03c:	e027      	b.n	800e08e <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e044:	2b03      	cmp	r3, #3
 800e046:	d107      	bne.n	800e058 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800e048:	f107 030f 	add.w	r3, r7, #15
 800e04c:	2201      	movs	r2, #1
 800e04e:	4619      	mov	r1, r3
 800e050:	6878      	ldr	r0, [r7, #4]
 800e052:	f001 f9c9 	bl	800f3e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e056:	e01a      	b.n	800e08e <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800e058:	6839      	ldr	r1, [r7, #0]
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	f001 f959 	bl	800f312 <USBD_CtlError>
            ret = USBD_FAIL;
 800e060:	2302      	movs	r3, #2
 800e062:	75fb      	strb	r3, [r7, #23]
          break;
 800e064:	e013      	b.n	800e08e <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e06c:	2b03      	cmp	r3, #3
 800e06e:	d00d      	beq.n	800e08c <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 800e070:	6839      	ldr	r1, [r7, #0]
 800e072:	6878      	ldr	r0, [r7, #4]
 800e074:	f001 f94d 	bl	800f312 <USBD_CtlError>
            ret = USBD_FAIL;
 800e078:	2302      	movs	r3, #2
 800e07a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e07c:	e006      	b.n	800e08c <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800e07e:	6839      	ldr	r1, [r7, #0]
 800e080:	6878      	ldr	r0, [r7, #4]
 800e082:	f001 f946 	bl	800f312 <USBD_CtlError>
          ret = USBD_FAIL;
 800e086:	2302      	movs	r3, #2
 800e088:	75fb      	strb	r3, [r7, #23]
          break;
 800e08a:	e000      	b.n	800e08e <USBD_CDC_Setup+0x126>
          break;
 800e08c:	bf00      	nop
      }
      break;
 800e08e:	e006      	b.n	800e09e <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800e090:	6839      	ldr	r1, [r7, #0]
 800e092:	6878      	ldr	r0, [r7, #4]
 800e094:	f001 f93d 	bl	800f312 <USBD_CtlError>
      ret = USBD_FAIL;
 800e098:	2302      	movs	r3, #2
 800e09a:	75fb      	strb	r3, [r7, #23]
      break;
 800e09c:	bf00      	nop
  }

  return ret;
 800e09e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	3718      	adds	r7, #24
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	bd80      	pop	{r7, pc}

0800e0a8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b084      	sub	sp, #16
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
 800e0b0:	460b      	mov	r3, r1
 800e0b2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0ba:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e0c2:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d03a      	beq.n	800e144 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e0ce:	78fa      	ldrb	r2, [r7, #3]
 800e0d0:	6879      	ldr	r1, [r7, #4]
 800e0d2:	4613      	mov	r3, r2
 800e0d4:	009b      	lsls	r3, r3, #2
 800e0d6:	4413      	add	r3, r2
 800e0d8:	009b      	lsls	r3, r3, #2
 800e0da:	440b      	add	r3, r1
 800e0dc:	331c      	adds	r3, #28
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d029      	beq.n	800e138 <USBD_CDC_DataIn+0x90>
 800e0e4:	78fa      	ldrb	r2, [r7, #3]
 800e0e6:	6879      	ldr	r1, [r7, #4]
 800e0e8:	4613      	mov	r3, r2
 800e0ea:	009b      	lsls	r3, r3, #2
 800e0ec:	4413      	add	r3, r2
 800e0ee:	009b      	lsls	r3, r3, #2
 800e0f0:	440b      	add	r3, r1
 800e0f2:	331c      	adds	r3, #28
 800e0f4:	681a      	ldr	r2, [r3, #0]
 800e0f6:	78f9      	ldrb	r1, [r7, #3]
 800e0f8:	68b8      	ldr	r0, [r7, #8]
 800e0fa:	460b      	mov	r3, r1
 800e0fc:	00db      	lsls	r3, r3, #3
 800e0fe:	1a5b      	subs	r3, r3, r1
 800e100:	009b      	lsls	r3, r3, #2
 800e102:	4403      	add	r3, r0
 800e104:	3344      	adds	r3, #68	; 0x44
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	fbb2 f1f3 	udiv	r1, r2, r3
 800e10c:	fb03 f301 	mul.w	r3, r3, r1
 800e110:	1ad3      	subs	r3, r2, r3
 800e112:	2b00      	cmp	r3, #0
 800e114:	d110      	bne.n	800e138 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800e116:	78fa      	ldrb	r2, [r7, #3]
 800e118:	6879      	ldr	r1, [r7, #4]
 800e11a:	4613      	mov	r3, r2
 800e11c:	009b      	lsls	r3, r3, #2
 800e11e:	4413      	add	r3, r2
 800e120:	009b      	lsls	r3, r3, #2
 800e122:	440b      	add	r3, r1
 800e124:	331c      	adds	r3, #28
 800e126:	2200      	movs	r2, #0
 800e128:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e12a:	78f9      	ldrb	r1, [r7, #3]
 800e12c:	2300      	movs	r3, #0
 800e12e:	2200      	movs	r2, #0
 800e130:	6878      	ldr	r0, [r7, #4]
 800e132:	f001 fe36 	bl	800fda2 <USBD_LL_Transmit>
 800e136:	e003      	b.n	800e140 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	2200      	movs	r2, #0
 800e13c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800e140:	2300      	movs	r3, #0
 800e142:	e000      	b.n	800e146 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800e144:	2302      	movs	r3, #2
  }
}
 800e146:	4618      	mov	r0, r3
 800e148:	3710      	adds	r7, #16
 800e14a:	46bd      	mov	sp, r7
 800e14c:	bd80      	pop	{r7, pc}

0800e14e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e14e:	b580      	push	{r7, lr}
 800e150:	b084      	sub	sp, #16
 800e152:	af00      	add	r7, sp, #0
 800e154:	6078      	str	r0, [r7, #4]
 800e156:	460b      	mov	r3, r1
 800e158:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e160:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e162:	78fb      	ldrb	r3, [r7, #3]
 800e164:	4619      	mov	r1, r3
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f001 fe61 	bl	800fe2e <USBD_LL_GetRxDataSize>
 800e16c:	4602      	mov	r2, r0
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d00d      	beq.n	800e19a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e184:	68db      	ldr	r3, [r3, #12]
 800e186:	68fa      	ldr	r2, [r7, #12]
 800e188:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e18c:	68fa      	ldr	r2, [r7, #12]
 800e18e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e192:	4611      	mov	r1, r2
 800e194:	4798      	blx	r3

    return USBD_OK;
 800e196:	2300      	movs	r3, #0
 800e198:	e000      	b.n	800e19c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800e19a:	2302      	movs	r3, #2
  }
}
 800e19c:	4618      	mov	r0, r3
 800e19e:	3710      	adds	r7, #16
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}

0800e1a4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b084      	sub	sp, #16
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1b2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d015      	beq.n	800e1ea <USBD_CDC_EP0_RxReady+0x46>
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e1c4:	2bff      	cmp	r3, #255	; 0xff
 800e1c6:	d010      	beq.n	800e1ea <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e1ce:	689b      	ldr	r3, [r3, #8]
 800e1d0:	68fa      	ldr	r2, [r7, #12]
 800e1d2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800e1d6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e1d8:	68fa      	ldr	r2, [r7, #12]
 800e1da:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e1de:	b292      	uxth	r2, r2
 800e1e0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	22ff      	movs	r2, #255	; 0xff
 800e1e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800e1ea:	2300      	movs	r3, #0
}
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	3710      	adds	r7, #16
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	bd80      	pop	{r7, pc}

0800e1f4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e1f4:	b480      	push	{r7}
 800e1f6:	b083      	sub	sp, #12
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2243      	movs	r2, #67	; 0x43
 800e200:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800e202:	4b03      	ldr	r3, [pc, #12]	; (800e210 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e204:	4618      	mov	r0, r3
 800e206:	370c      	adds	r7, #12
 800e208:	46bd      	mov	sp, r7
 800e20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20e:	4770      	bx	lr
 800e210:	24000098 	.word	0x24000098

0800e214 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e214:	b480      	push	{r7}
 800e216:	b083      	sub	sp, #12
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	2243      	movs	r2, #67	; 0x43
 800e220:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800e222:	4b03      	ldr	r3, [pc, #12]	; (800e230 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e224:	4618      	mov	r0, r3
 800e226:	370c      	adds	r7, #12
 800e228:	46bd      	mov	sp, r7
 800e22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22e:	4770      	bx	lr
 800e230:	24000054 	.word	0x24000054

0800e234 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e234:	b480      	push	{r7}
 800e236:	b083      	sub	sp, #12
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	2243      	movs	r2, #67	; 0x43
 800e240:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800e242:	4b03      	ldr	r3, [pc, #12]	; (800e250 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e244:	4618      	mov	r0, r3
 800e246:	370c      	adds	r7, #12
 800e248:	46bd      	mov	sp, r7
 800e24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24e:	4770      	bx	lr
 800e250:	240000dc 	.word	0x240000dc

0800e254 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e254:	b480      	push	{r7}
 800e256:	b083      	sub	sp, #12
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	220a      	movs	r2, #10
 800e260:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800e262:	4b03      	ldr	r3, [pc, #12]	; (800e270 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e264:	4618      	mov	r0, r3
 800e266:	370c      	adds	r7, #12
 800e268:	46bd      	mov	sp, r7
 800e26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26e:	4770      	bx	lr
 800e270:	24000010 	.word	0x24000010

0800e274 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800e274:	b480      	push	{r7}
 800e276:	b085      	sub	sp, #20
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
 800e27c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800e27e:	2302      	movs	r3, #2
 800e280:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d005      	beq.n	800e294 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	683a      	ldr	r2, [r7, #0]
 800e28c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800e290:	2300      	movs	r3, #0
 800e292:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e294:	7bfb      	ldrb	r3, [r7, #15]
}
 800e296:	4618      	mov	r0, r3
 800e298:	3714      	adds	r7, #20
 800e29a:	46bd      	mov	sp, r7
 800e29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a0:	4770      	bx	lr

0800e2a2 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800e2a2:	b480      	push	{r7}
 800e2a4:	b087      	sub	sp, #28
 800e2a6:	af00      	add	r7, sp, #0
 800e2a8:	60f8      	str	r0, [r7, #12]
 800e2aa:	60b9      	str	r1, [r7, #8]
 800e2ac:	4613      	mov	r3, r2
 800e2ae:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2b6:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800e2b8:	697b      	ldr	r3, [r7, #20]
 800e2ba:	68ba      	ldr	r2, [r7, #8]
 800e2bc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e2c0:	88fa      	ldrh	r2, [r7, #6]
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800e2c8:	2300      	movs	r3, #0
}
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	371c      	adds	r7, #28
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d4:	4770      	bx	lr

0800e2d6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800e2d6:	b480      	push	{r7}
 800e2d8:	b085      	sub	sp, #20
 800e2da:	af00      	add	r7, sp, #0
 800e2dc:	6078      	str	r0, [r7, #4]
 800e2de:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2e6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	683a      	ldr	r2, [r7, #0]
 800e2ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800e2f0:	2300      	movs	r3, #0
}
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	3714      	adds	r7, #20
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fc:	4770      	bx	lr

0800e2fe <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e2fe:	b580      	push	{r7, lr}
 800e300:	b084      	sub	sp, #16
 800e302:	af00      	add	r7, sp, #0
 800e304:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e30c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e314:	2b00      	cmp	r3, #0
 800e316:	d017      	beq.n	800e348 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	7c1b      	ldrb	r3, [r3, #16]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d109      	bne.n	800e334 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e326:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e32a:	2101      	movs	r1, #1
 800e32c:	6878      	ldr	r0, [r7, #4]
 800e32e:	f001 fd5b 	bl	800fde8 <USBD_LL_PrepareReceive>
 800e332:	e007      	b.n	800e344 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e33a:	2340      	movs	r3, #64	; 0x40
 800e33c:	2101      	movs	r1, #1
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f001 fd52 	bl	800fde8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800e344:	2300      	movs	r3, #0
 800e346:	e000      	b.n	800e34a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800e348:	2302      	movs	r3, #2
  }
}
 800e34a:	4618      	mov	r0, r3
 800e34c:	3710      	adds	r7, #16
 800e34e:	46bd      	mov	sp, r7
 800e350:	bd80      	pop	{r7, pc}

0800e352 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e352:	b580      	push	{r7, lr}
 800e354:	b084      	sub	sp, #16
 800e356:	af00      	add	r7, sp, #0
 800e358:	60f8      	str	r0, [r7, #12]
 800e35a:	60b9      	str	r1, [r7, #8]
 800e35c:	4613      	mov	r3, r2
 800e35e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d101      	bne.n	800e36a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e366:	2302      	movs	r3, #2
 800e368:	e01a      	b.n	800e3a0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e370:	2b00      	cmp	r3, #0
 800e372:	d003      	beq.n	800e37c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	2200      	movs	r2, #0
 800e378:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d003      	beq.n	800e38a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	68ba      	ldr	r2, [r7, #8]
 800e386:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	2201      	movs	r2, #1
 800e38e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	79fa      	ldrb	r2, [r7, #7]
 800e396:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800e398:	68f8      	ldr	r0, [r7, #12]
 800e39a:	f001 fbc9 	bl	800fb30 <USBD_LL_Init>

  return USBD_OK;
 800e39e:	2300      	movs	r3, #0
}
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	3710      	adds	r7, #16
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bd80      	pop	{r7, pc}

0800e3a8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e3a8:	b480      	push	{r7}
 800e3aa:	b085      	sub	sp, #20
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
 800e3b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d006      	beq.n	800e3ca <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	683a      	ldr	r2, [r7, #0]
 800e3c0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	73fb      	strb	r3, [r7, #15]
 800e3c8:	e001      	b.n	800e3ce <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800e3ca:	2302      	movs	r3, #2
 800e3cc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e3ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	3714      	adds	r7, #20
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3da:	4770      	bx	lr

0800e3dc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b082      	sub	sp, #8
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	f001 fbf3 	bl	800fbd0 <USBD_LL_Start>

  return USBD_OK;
 800e3ea:	2300      	movs	r3, #0
}
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	3708      	adds	r7, #8
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	bd80      	pop	{r7, pc}

0800e3f4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e3f4:	b480      	push	{r7}
 800e3f6:	b083      	sub	sp, #12
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e3fc:	2300      	movs	r3, #0
}
 800e3fe:	4618      	mov	r0, r3
 800e400:	370c      	adds	r7, #12
 800e402:	46bd      	mov	sp, r7
 800e404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e408:	4770      	bx	lr

0800e40a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800e40a:	b580      	push	{r7, lr}
 800e40c:	b084      	sub	sp, #16
 800e40e:	af00      	add	r7, sp, #0
 800e410:	6078      	str	r0, [r7, #4]
 800e412:	460b      	mov	r3, r1
 800e414:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e416:	2302      	movs	r3, #2
 800e418:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e420:	2b00      	cmp	r3, #0
 800e422:	d00c      	beq.n	800e43e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	78fa      	ldrb	r2, [r7, #3]
 800e42e:	4611      	mov	r1, r2
 800e430:	6878      	ldr	r0, [r7, #4]
 800e432:	4798      	blx	r3
 800e434:	4603      	mov	r3, r0
 800e436:	2b00      	cmp	r3, #0
 800e438:	d101      	bne.n	800e43e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800e43a:	2300      	movs	r3, #0
 800e43c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800e43e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e440:	4618      	mov	r0, r3
 800e442:	3710      	adds	r7, #16
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}

0800e448 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b082      	sub	sp, #8
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
 800e450:	460b      	mov	r3, r1
 800e452:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e45a:	685b      	ldr	r3, [r3, #4]
 800e45c:	78fa      	ldrb	r2, [r7, #3]
 800e45e:	4611      	mov	r1, r2
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	4798      	blx	r3

  return USBD_OK;
 800e464:	2300      	movs	r3, #0
}
 800e466:	4618      	mov	r0, r3
 800e468:	3708      	adds	r7, #8
 800e46a:	46bd      	mov	sp, r7
 800e46c:	bd80      	pop	{r7, pc}

0800e46e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e46e:	b580      	push	{r7, lr}
 800e470:	b082      	sub	sp, #8
 800e472:	af00      	add	r7, sp, #0
 800e474:	6078      	str	r0, [r7, #4]
 800e476:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800e47e:	6839      	ldr	r1, [r7, #0]
 800e480:	4618      	mov	r0, r3
 800e482:	f000 ff09 	bl	800f298 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	2201      	movs	r2, #1
 800e48a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800e494:	461a      	mov	r2, r3
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800e4a2:	f003 031f 	and.w	r3, r3, #31
 800e4a6:	2b01      	cmp	r3, #1
 800e4a8:	d00c      	beq.n	800e4c4 <USBD_LL_SetupStage+0x56>
 800e4aa:	2b01      	cmp	r3, #1
 800e4ac:	d302      	bcc.n	800e4b4 <USBD_LL_SetupStage+0x46>
 800e4ae:	2b02      	cmp	r3, #2
 800e4b0:	d010      	beq.n	800e4d4 <USBD_LL_SetupStage+0x66>
 800e4b2:	e017      	b.n	800e4e4 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800e4ba:	4619      	mov	r1, r3
 800e4bc:	6878      	ldr	r0, [r7, #4]
 800e4be:	f000 fa09 	bl	800e8d4 <USBD_StdDevReq>
      break;
 800e4c2:	e01a      	b.n	800e4fa <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800e4ca:	4619      	mov	r1, r3
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f000 fa6b 	bl	800e9a8 <USBD_StdItfReq>
      break;
 800e4d2:	e012      	b.n	800e4fa <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800e4da:	4619      	mov	r1, r3
 800e4dc:	6878      	ldr	r0, [r7, #4]
 800e4de:	f000 faa9 	bl	800ea34 <USBD_StdEPReq>
      break;
 800e4e2:	e00a      	b.n	800e4fa <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800e4ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e4ee:	b2db      	uxtb	r3, r3
 800e4f0:	4619      	mov	r1, r3
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f001 fbcc 	bl	800fc90 <USBD_LL_StallEP>
      break;
 800e4f8:	bf00      	nop
  }

  return USBD_OK;
 800e4fa:	2300      	movs	r3, #0
}
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	3708      	adds	r7, #8
 800e500:	46bd      	mov	sp, r7
 800e502:	bd80      	pop	{r7, pc}

0800e504 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b086      	sub	sp, #24
 800e508:	af00      	add	r7, sp, #0
 800e50a:	60f8      	str	r0, [r7, #12]
 800e50c:	460b      	mov	r3, r1
 800e50e:	607a      	str	r2, [r7, #4]
 800e510:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800e512:	7afb      	ldrb	r3, [r7, #11]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d14b      	bne.n	800e5b0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e51e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e526:	2b03      	cmp	r3, #3
 800e528:	d134      	bne.n	800e594 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	68da      	ldr	r2, [r3, #12]
 800e52e:	697b      	ldr	r3, [r7, #20]
 800e530:	691b      	ldr	r3, [r3, #16]
 800e532:	429a      	cmp	r2, r3
 800e534:	d919      	bls.n	800e56a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	68da      	ldr	r2, [r3, #12]
 800e53a:	697b      	ldr	r3, [r7, #20]
 800e53c:	691b      	ldr	r3, [r3, #16]
 800e53e:	1ad2      	subs	r2, r2, r3
 800e540:	697b      	ldr	r3, [r7, #20]
 800e542:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800e544:	697b      	ldr	r3, [r7, #20]
 800e546:	68da      	ldr	r2, [r3, #12]
 800e548:	697b      	ldr	r3, [r7, #20]
 800e54a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800e54c:	429a      	cmp	r2, r3
 800e54e:	d203      	bcs.n	800e558 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800e550:	697b      	ldr	r3, [r7, #20]
 800e552:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800e554:	b29b      	uxth	r3, r3
 800e556:	e002      	b.n	800e55e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800e558:	697b      	ldr	r3, [r7, #20]
 800e55a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800e55c:	b29b      	uxth	r3, r3
 800e55e:	461a      	mov	r2, r3
 800e560:	6879      	ldr	r1, [r7, #4]
 800e562:	68f8      	ldr	r0, [r7, #12]
 800e564:	f000 ff8c 	bl	800f480 <USBD_CtlContinueRx>
 800e568:	e038      	b.n	800e5dc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e570:	691b      	ldr	r3, [r3, #16]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d00a      	beq.n	800e58c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e57c:	2b03      	cmp	r3, #3
 800e57e:	d105      	bne.n	800e58c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e586:	691b      	ldr	r3, [r3, #16]
 800e588:	68f8      	ldr	r0, [r7, #12]
 800e58a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800e58c:	68f8      	ldr	r0, [r7, #12]
 800e58e:	f000 ff89 	bl	800f4a4 <USBD_CtlSendStatus>
 800e592:	e023      	b.n	800e5dc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e59a:	2b05      	cmp	r3, #5
 800e59c:	d11e      	bne.n	800e5dc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800e5a6:	2100      	movs	r1, #0
 800e5a8:	68f8      	ldr	r0, [r7, #12]
 800e5aa:	f001 fb71 	bl	800fc90 <USBD_LL_StallEP>
 800e5ae:	e015      	b.n	800e5dc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5b6:	699b      	ldr	r3, [r3, #24]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d00d      	beq.n	800e5d8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800e5c2:	2b03      	cmp	r3, #3
 800e5c4:	d108      	bne.n	800e5d8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5cc:	699b      	ldr	r3, [r3, #24]
 800e5ce:	7afa      	ldrb	r2, [r7, #11]
 800e5d0:	4611      	mov	r1, r2
 800e5d2:	68f8      	ldr	r0, [r7, #12]
 800e5d4:	4798      	blx	r3
 800e5d6:	e001      	b.n	800e5dc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e5d8:	2302      	movs	r3, #2
 800e5da:	e000      	b.n	800e5de <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800e5dc:	2300      	movs	r3, #0
}
 800e5de:	4618      	mov	r0, r3
 800e5e0:	3718      	adds	r7, #24
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd80      	pop	{r7, pc}

0800e5e6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e5e6:	b580      	push	{r7, lr}
 800e5e8:	b086      	sub	sp, #24
 800e5ea:	af00      	add	r7, sp, #0
 800e5ec:	60f8      	str	r0, [r7, #12]
 800e5ee:	460b      	mov	r3, r1
 800e5f0:	607a      	str	r2, [r7, #4]
 800e5f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800e5f4:	7afb      	ldrb	r3, [r7, #11]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d17f      	bne.n	800e6fa <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	3314      	adds	r3, #20
 800e5fe:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e606:	2b02      	cmp	r3, #2
 800e608:	d15c      	bne.n	800e6c4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800e60a:	697b      	ldr	r3, [r7, #20]
 800e60c:	68da      	ldr	r2, [r3, #12]
 800e60e:	697b      	ldr	r3, [r7, #20]
 800e610:	691b      	ldr	r3, [r3, #16]
 800e612:	429a      	cmp	r2, r3
 800e614:	d915      	bls.n	800e642 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800e616:	697b      	ldr	r3, [r7, #20]
 800e618:	68da      	ldr	r2, [r3, #12]
 800e61a:	697b      	ldr	r3, [r7, #20]
 800e61c:	691b      	ldr	r3, [r3, #16]
 800e61e:	1ad2      	subs	r2, r2, r3
 800e620:	697b      	ldr	r3, [r7, #20]
 800e622:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800e624:	697b      	ldr	r3, [r7, #20]
 800e626:	68db      	ldr	r3, [r3, #12]
 800e628:	b29b      	uxth	r3, r3
 800e62a:	461a      	mov	r2, r3
 800e62c:	6879      	ldr	r1, [r7, #4]
 800e62e:	68f8      	ldr	r0, [r7, #12]
 800e630:	f000 fef6 	bl	800f420 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e634:	2300      	movs	r3, #0
 800e636:	2200      	movs	r2, #0
 800e638:	2100      	movs	r1, #0
 800e63a:	68f8      	ldr	r0, [r7, #12]
 800e63c:	f001 fbd4 	bl	800fde8 <USBD_LL_PrepareReceive>
 800e640:	e04e      	b.n	800e6e0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800e642:	697b      	ldr	r3, [r7, #20]
 800e644:	689b      	ldr	r3, [r3, #8]
 800e646:	697a      	ldr	r2, [r7, #20]
 800e648:	6912      	ldr	r2, [r2, #16]
 800e64a:	fbb3 f1f2 	udiv	r1, r3, r2
 800e64e:	fb02 f201 	mul.w	r2, r2, r1
 800e652:	1a9b      	subs	r3, r3, r2
 800e654:	2b00      	cmp	r3, #0
 800e656:	d11c      	bne.n	800e692 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800e658:	697b      	ldr	r3, [r7, #20]
 800e65a:	689a      	ldr	r2, [r3, #8]
 800e65c:	697b      	ldr	r3, [r7, #20]
 800e65e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800e660:	429a      	cmp	r2, r3
 800e662:	d316      	bcc.n	800e692 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800e664:	697b      	ldr	r3, [r7, #20]
 800e666:	689a      	ldr	r2, [r3, #8]
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e66e:	429a      	cmp	r2, r3
 800e670:	d20f      	bcs.n	800e692 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e672:	2200      	movs	r2, #0
 800e674:	2100      	movs	r1, #0
 800e676:	68f8      	ldr	r0, [r7, #12]
 800e678:	f000 fed2 	bl	800f420 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	2200      	movs	r2, #0
 800e680:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e684:	2300      	movs	r3, #0
 800e686:	2200      	movs	r2, #0
 800e688:	2100      	movs	r1, #0
 800e68a:	68f8      	ldr	r0, [r7, #12]
 800e68c:	f001 fbac 	bl	800fde8 <USBD_LL_PrepareReceive>
 800e690:	e026      	b.n	800e6e0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e698:	68db      	ldr	r3, [r3, #12]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d00a      	beq.n	800e6b4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e6a4:	2b03      	cmp	r3, #3
 800e6a6:	d105      	bne.n	800e6b4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e6ae:	68db      	ldr	r3, [r3, #12]
 800e6b0:	68f8      	ldr	r0, [r7, #12]
 800e6b2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800e6b4:	2180      	movs	r1, #128	; 0x80
 800e6b6:	68f8      	ldr	r0, [r7, #12]
 800e6b8:	f001 faea 	bl	800fc90 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800e6bc:	68f8      	ldr	r0, [r7, #12]
 800e6be:	f000 ff04 	bl	800f4ca <USBD_CtlReceiveStatus>
 800e6c2:	e00d      	b.n	800e6e0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e6ca:	2b04      	cmp	r3, #4
 800e6cc:	d004      	beq.n	800e6d8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d103      	bne.n	800e6e0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800e6d8:	2180      	movs	r1, #128	; 0x80
 800e6da:	68f8      	ldr	r0, [r7, #12]
 800e6dc:	f001 fad8 	bl	800fc90 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e6e6:	2b01      	cmp	r3, #1
 800e6e8:	d11d      	bne.n	800e726 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800e6ea:	68f8      	ldr	r0, [r7, #12]
 800e6ec:	f7ff fe82 	bl	800e3f4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e6f8:	e015      	b.n	800e726 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e700:	695b      	ldr	r3, [r3, #20]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d00d      	beq.n	800e722 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800e70c:	2b03      	cmp	r3, #3
 800e70e:	d108      	bne.n	800e722 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e716:	695b      	ldr	r3, [r3, #20]
 800e718:	7afa      	ldrb	r2, [r7, #11]
 800e71a:	4611      	mov	r1, r2
 800e71c:	68f8      	ldr	r0, [r7, #12]
 800e71e:	4798      	blx	r3
 800e720:	e001      	b.n	800e726 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e722:	2302      	movs	r3, #2
 800e724:	e000      	b.n	800e728 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800e726:	2300      	movs	r3, #0
}
 800e728:	4618      	mov	r0, r3
 800e72a:	3718      	adds	r7, #24
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}

0800e730 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b082      	sub	sp, #8
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e738:	2340      	movs	r3, #64	; 0x40
 800e73a:	2200      	movs	r2, #0
 800e73c:	2100      	movs	r1, #0
 800e73e:	6878      	ldr	r0, [r7, #4]
 800e740:	f001 fa61 	bl	800fc06 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	2201      	movs	r2, #1
 800e748:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	2240      	movs	r2, #64	; 0x40
 800e750:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e754:	2340      	movs	r3, #64	; 0x40
 800e756:	2200      	movs	r2, #0
 800e758:	2180      	movs	r1, #128	; 0x80
 800e75a:	6878      	ldr	r0, [r7, #4]
 800e75c:	f001 fa53 	bl	800fc06 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	2201      	movs	r2, #1
 800e764:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	2240      	movs	r2, #64	; 0x40
 800e76a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2201      	movs	r2, #1
 800e770:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	2200      	movs	r2, #0
 800e778:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2200      	movs	r2, #0
 800e780:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	2200      	movs	r2, #0
 800e786:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e790:	2b00      	cmp	r3, #0
 800e792:	d009      	beq.n	800e7a8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e79a:	685b      	ldr	r3, [r3, #4]
 800e79c:	687a      	ldr	r2, [r7, #4]
 800e79e:	6852      	ldr	r2, [r2, #4]
 800e7a0:	b2d2      	uxtb	r2, r2
 800e7a2:	4611      	mov	r1, r2
 800e7a4:	6878      	ldr	r0, [r7, #4]
 800e7a6:	4798      	blx	r3
  }

  return USBD_OK;
 800e7a8:	2300      	movs	r3, #0
}
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	3708      	adds	r7, #8
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	bd80      	pop	{r7, pc}

0800e7b2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e7b2:	b480      	push	{r7}
 800e7b4:	b083      	sub	sp, #12
 800e7b6:	af00      	add	r7, sp, #0
 800e7b8:	6078      	str	r0, [r7, #4]
 800e7ba:	460b      	mov	r3, r1
 800e7bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	78fa      	ldrb	r2, [r7, #3]
 800e7c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e7c4:	2300      	movs	r3, #0
}
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	370c      	adds	r7, #12
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d0:	4770      	bx	lr

0800e7d2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e7d2:	b480      	push	{r7}
 800e7d4:	b083      	sub	sp, #12
 800e7d6:	af00      	add	r7, sp, #0
 800e7d8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	2204      	movs	r2, #4
 800e7ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e7ee:	2300      	movs	r3, #0
}
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	370c      	adds	r7, #12
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fa:	4770      	bx	lr

0800e7fc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e7fc:	b480      	push	{r7}
 800e7fe:	b083      	sub	sp, #12
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e80a:	2b04      	cmp	r3, #4
 800e80c:	d105      	bne.n	800e81a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e81a:	2300      	movs	r3, #0
}
 800e81c:	4618      	mov	r0, r3
 800e81e:	370c      	adds	r7, #12
 800e820:	46bd      	mov	sp, r7
 800e822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e826:	4770      	bx	lr

0800e828 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	b082      	sub	sp, #8
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e836:	2b03      	cmp	r3, #3
 800e838:	d10b      	bne.n	800e852 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e840:	69db      	ldr	r3, [r3, #28]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d005      	beq.n	800e852 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e84c:	69db      	ldr	r3, [r3, #28]
 800e84e:	6878      	ldr	r0, [r7, #4]
 800e850:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e852:	2300      	movs	r3, #0
}
 800e854:	4618      	mov	r0, r3
 800e856:	3708      	adds	r7, #8
 800e858:	46bd      	mov	sp, r7
 800e85a:	bd80      	pop	{r7, pc}

0800e85c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e85c:	b480      	push	{r7}
 800e85e:	b083      	sub	sp, #12
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
 800e864:	460b      	mov	r3, r1
 800e866:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800e868:	2300      	movs	r3, #0
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	370c      	adds	r7, #12
 800e86e:	46bd      	mov	sp, r7
 800e870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e874:	4770      	bx	lr

0800e876 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e876:	b480      	push	{r7}
 800e878:	b083      	sub	sp, #12
 800e87a:	af00      	add	r7, sp, #0
 800e87c:	6078      	str	r0, [r7, #4]
 800e87e:	460b      	mov	r3, r1
 800e880:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800e882:	2300      	movs	r3, #0
}
 800e884:	4618      	mov	r0, r3
 800e886:	370c      	adds	r7, #12
 800e888:	46bd      	mov	sp, r7
 800e88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88e:	4770      	bx	lr

0800e890 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e890:	b480      	push	{r7}
 800e892:	b083      	sub	sp, #12
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e898:	2300      	movs	r3, #0
}
 800e89a:	4618      	mov	r0, r3
 800e89c:	370c      	adds	r7, #12
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a4:	4770      	bx	lr

0800e8a6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e8a6:	b580      	push	{r7, lr}
 800e8a8:	b082      	sub	sp, #8
 800e8aa:	af00      	add	r7, sp, #0
 800e8ac:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	2201      	movs	r2, #1
 800e8b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8bc:	685b      	ldr	r3, [r3, #4]
 800e8be:	687a      	ldr	r2, [r7, #4]
 800e8c0:	6852      	ldr	r2, [r2, #4]
 800e8c2:	b2d2      	uxtb	r2, r2
 800e8c4:	4611      	mov	r1, r2
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	4798      	blx	r3

  return USBD_OK;
 800e8ca:	2300      	movs	r3, #0
}
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	3708      	adds	r7, #8
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}

0800e8d4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b084      	sub	sp, #16
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
 800e8dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e8de:	2300      	movs	r3, #0
 800e8e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	781b      	ldrb	r3, [r3, #0]
 800e8e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e8ea:	2b20      	cmp	r3, #32
 800e8ec:	d004      	beq.n	800e8f8 <USBD_StdDevReq+0x24>
 800e8ee:	2b40      	cmp	r3, #64	; 0x40
 800e8f0:	d002      	beq.n	800e8f8 <USBD_StdDevReq+0x24>
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d008      	beq.n	800e908 <USBD_StdDevReq+0x34>
 800e8f6:	e04c      	b.n	800e992 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8fe:	689b      	ldr	r3, [r3, #8]
 800e900:	6839      	ldr	r1, [r7, #0]
 800e902:	6878      	ldr	r0, [r7, #4]
 800e904:	4798      	blx	r3
      break;
 800e906:	e049      	b.n	800e99c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	785b      	ldrb	r3, [r3, #1]
 800e90c:	2b09      	cmp	r3, #9
 800e90e:	d83a      	bhi.n	800e986 <USBD_StdDevReq+0xb2>
 800e910:	a201      	add	r2, pc, #4	; (adr r2, 800e918 <USBD_StdDevReq+0x44>)
 800e912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e916:	bf00      	nop
 800e918:	0800e969 	.word	0x0800e969
 800e91c:	0800e97d 	.word	0x0800e97d
 800e920:	0800e987 	.word	0x0800e987
 800e924:	0800e973 	.word	0x0800e973
 800e928:	0800e987 	.word	0x0800e987
 800e92c:	0800e94b 	.word	0x0800e94b
 800e930:	0800e941 	.word	0x0800e941
 800e934:	0800e987 	.word	0x0800e987
 800e938:	0800e95f 	.word	0x0800e95f
 800e93c:	0800e955 	.word	0x0800e955
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e940:	6839      	ldr	r1, [r7, #0]
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	f000 f9d4 	bl	800ecf0 <USBD_GetDescriptor>
          break;
 800e948:	e022      	b.n	800e990 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e94a:	6839      	ldr	r1, [r7, #0]
 800e94c:	6878      	ldr	r0, [r7, #4]
 800e94e:	f000 fb37 	bl	800efc0 <USBD_SetAddress>
          break;
 800e952:	e01d      	b.n	800e990 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800e954:	6839      	ldr	r1, [r7, #0]
 800e956:	6878      	ldr	r0, [r7, #4]
 800e958:	f000 fb74 	bl	800f044 <USBD_SetConfig>
          break;
 800e95c:	e018      	b.n	800e990 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e95e:	6839      	ldr	r1, [r7, #0]
 800e960:	6878      	ldr	r0, [r7, #4]
 800e962:	f000 fbfd 	bl	800f160 <USBD_GetConfig>
          break;
 800e966:	e013      	b.n	800e990 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e968:	6839      	ldr	r1, [r7, #0]
 800e96a:	6878      	ldr	r0, [r7, #4]
 800e96c:	f000 fc2c 	bl	800f1c8 <USBD_GetStatus>
          break;
 800e970:	e00e      	b.n	800e990 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e972:	6839      	ldr	r1, [r7, #0]
 800e974:	6878      	ldr	r0, [r7, #4]
 800e976:	f000 fc5a 	bl	800f22e <USBD_SetFeature>
          break;
 800e97a:	e009      	b.n	800e990 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e97c:	6839      	ldr	r1, [r7, #0]
 800e97e:	6878      	ldr	r0, [r7, #4]
 800e980:	f000 fc69 	bl	800f256 <USBD_ClrFeature>
          break;
 800e984:	e004      	b.n	800e990 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800e986:	6839      	ldr	r1, [r7, #0]
 800e988:	6878      	ldr	r0, [r7, #4]
 800e98a:	f000 fcc2 	bl	800f312 <USBD_CtlError>
          break;
 800e98e:	bf00      	nop
      }
      break;
 800e990:	e004      	b.n	800e99c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800e992:	6839      	ldr	r1, [r7, #0]
 800e994:	6878      	ldr	r0, [r7, #4]
 800e996:	f000 fcbc 	bl	800f312 <USBD_CtlError>
      break;
 800e99a:	bf00      	nop
  }

  return ret;
 800e99c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e99e:	4618      	mov	r0, r3
 800e9a0:	3710      	adds	r7, #16
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}
 800e9a6:	bf00      	nop

0800e9a8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b084      	sub	sp, #16
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
 800e9b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	781b      	ldrb	r3, [r3, #0]
 800e9ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e9be:	2b20      	cmp	r3, #32
 800e9c0:	d003      	beq.n	800e9ca <USBD_StdItfReq+0x22>
 800e9c2:	2b40      	cmp	r3, #64	; 0x40
 800e9c4:	d001      	beq.n	800e9ca <USBD_StdItfReq+0x22>
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d12a      	bne.n	800ea20 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e9d0:	3b01      	subs	r3, #1
 800e9d2:	2b02      	cmp	r3, #2
 800e9d4:	d81d      	bhi.n	800ea12 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	889b      	ldrh	r3, [r3, #4]
 800e9da:	b2db      	uxtb	r3, r3
 800e9dc:	2b01      	cmp	r3, #1
 800e9de:	d813      	bhi.n	800ea08 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e9e6:	689b      	ldr	r3, [r3, #8]
 800e9e8:	6839      	ldr	r1, [r7, #0]
 800e9ea:	6878      	ldr	r0, [r7, #4]
 800e9ec:	4798      	blx	r3
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	88db      	ldrh	r3, [r3, #6]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d110      	bne.n	800ea1c <USBD_StdItfReq+0x74>
 800e9fa:	7bfb      	ldrb	r3, [r7, #15]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d10d      	bne.n	800ea1c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800ea00:	6878      	ldr	r0, [r7, #4]
 800ea02:	f000 fd4f 	bl	800f4a4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ea06:	e009      	b.n	800ea1c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800ea08:	6839      	ldr	r1, [r7, #0]
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	f000 fc81 	bl	800f312 <USBD_CtlError>
          break;
 800ea10:	e004      	b.n	800ea1c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800ea12:	6839      	ldr	r1, [r7, #0]
 800ea14:	6878      	ldr	r0, [r7, #4]
 800ea16:	f000 fc7c 	bl	800f312 <USBD_CtlError>
          break;
 800ea1a:	e000      	b.n	800ea1e <USBD_StdItfReq+0x76>
          break;
 800ea1c:	bf00      	nop
      }
      break;
 800ea1e:	e004      	b.n	800ea2a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800ea20:	6839      	ldr	r1, [r7, #0]
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	f000 fc75 	bl	800f312 <USBD_CtlError>
      break;
 800ea28:	bf00      	nop
  }

  return USBD_OK;
 800ea2a:	2300      	movs	r3, #0
}
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	3710      	adds	r7, #16
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd80      	pop	{r7, pc}

0800ea34 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b084      	sub	sp, #16
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
 800ea3c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ea3e:	2300      	movs	r3, #0
 800ea40:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	889b      	ldrh	r3, [r3, #4]
 800ea46:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	781b      	ldrb	r3, [r3, #0]
 800ea4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ea50:	2b20      	cmp	r3, #32
 800ea52:	d004      	beq.n	800ea5e <USBD_StdEPReq+0x2a>
 800ea54:	2b40      	cmp	r3, #64	; 0x40
 800ea56:	d002      	beq.n	800ea5e <USBD_StdEPReq+0x2a>
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d008      	beq.n	800ea6e <USBD_StdEPReq+0x3a>
 800ea5c:	e13d      	b.n	800ecda <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea64:	689b      	ldr	r3, [r3, #8]
 800ea66:	6839      	ldr	r1, [r7, #0]
 800ea68:	6878      	ldr	r0, [r7, #4]
 800ea6a:	4798      	blx	r3
      break;
 800ea6c:	e13a      	b.n	800ece4 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	781b      	ldrb	r3, [r3, #0]
 800ea72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ea76:	2b20      	cmp	r3, #32
 800ea78:	d10a      	bne.n	800ea90 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea80:	689b      	ldr	r3, [r3, #8]
 800ea82:	6839      	ldr	r1, [r7, #0]
 800ea84:	6878      	ldr	r0, [r7, #4]
 800ea86:	4798      	blx	r3
 800ea88:	4603      	mov	r3, r0
 800ea8a:	73fb      	strb	r3, [r7, #15]

        return ret;
 800ea8c:	7bfb      	ldrb	r3, [r7, #15]
 800ea8e:	e12a      	b.n	800ece6 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800ea90:	683b      	ldr	r3, [r7, #0]
 800ea92:	785b      	ldrb	r3, [r3, #1]
 800ea94:	2b01      	cmp	r3, #1
 800ea96:	d03e      	beq.n	800eb16 <USBD_StdEPReq+0xe2>
 800ea98:	2b03      	cmp	r3, #3
 800ea9a:	d002      	beq.n	800eaa2 <USBD_StdEPReq+0x6e>
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d070      	beq.n	800eb82 <USBD_StdEPReq+0x14e>
 800eaa0:	e115      	b.n	800ecce <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eaa8:	2b02      	cmp	r3, #2
 800eaaa:	d002      	beq.n	800eab2 <USBD_StdEPReq+0x7e>
 800eaac:	2b03      	cmp	r3, #3
 800eaae:	d015      	beq.n	800eadc <USBD_StdEPReq+0xa8>
 800eab0:	e02b      	b.n	800eb0a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eab2:	7bbb      	ldrb	r3, [r7, #14]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d00c      	beq.n	800ead2 <USBD_StdEPReq+0x9e>
 800eab8:	7bbb      	ldrb	r3, [r7, #14]
 800eaba:	2b80      	cmp	r3, #128	; 0x80
 800eabc:	d009      	beq.n	800ead2 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800eabe:	7bbb      	ldrb	r3, [r7, #14]
 800eac0:	4619      	mov	r1, r3
 800eac2:	6878      	ldr	r0, [r7, #4]
 800eac4:	f001 f8e4 	bl	800fc90 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800eac8:	2180      	movs	r1, #128	; 0x80
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f001 f8e0 	bl	800fc90 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ead0:	e020      	b.n	800eb14 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800ead2:	6839      	ldr	r1, [r7, #0]
 800ead4:	6878      	ldr	r0, [r7, #4]
 800ead6:	f000 fc1c 	bl	800f312 <USBD_CtlError>
              break;
 800eada:	e01b      	b.n	800eb14 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	885b      	ldrh	r3, [r3, #2]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d10e      	bne.n	800eb02 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800eae4:	7bbb      	ldrb	r3, [r7, #14]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d00b      	beq.n	800eb02 <USBD_StdEPReq+0xce>
 800eaea:	7bbb      	ldrb	r3, [r7, #14]
 800eaec:	2b80      	cmp	r3, #128	; 0x80
 800eaee:	d008      	beq.n	800eb02 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	88db      	ldrh	r3, [r3, #6]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d104      	bne.n	800eb02 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800eaf8:	7bbb      	ldrb	r3, [r7, #14]
 800eafa:	4619      	mov	r1, r3
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f001 f8c7 	bl	800fc90 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f000 fcce 	bl	800f4a4 <USBD_CtlSendStatus>

              break;
 800eb08:	e004      	b.n	800eb14 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800eb0a:	6839      	ldr	r1, [r7, #0]
 800eb0c:	6878      	ldr	r0, [r7, #4]
 800eb0e:	f000 fc00 	bl	800f312 <USBD_CtlError>
              break;
 800eb12:	bf00      	nop
          }
          break;
 800eb14:	e0e0      	b.n	800ecd8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb1c:	2b02      	cmp	r3, #2
 800eb1e:	d002      	beq.n	800eb26 <USBD_StdEPReq+0xf2>
 800eb20:	2b03      	cmp	r3, #3
 800eb22:	d015      	beq.n	800eb50 <USBD_StdEPReq+0x11c>
 800eb24:	e026      	b.n	800eb74 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eb26:	7bbb      	ldrb	r3, [r7, #14]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d00c      	beq.n	800eb46 <USBD_StdEPReq+0x112>
 800eb2c:	7bbb      	ldrb	r3, [r7, #14]
 800eb2e:	2b80      	cmp	r3, #128	; 0x80
 800eb30:	d009      	beq.n	800eb46 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800eb32:	7bbb      	ldrb	r3, [r7, #14]
 800eb34:	4619      	mov	r1, r3
 800eb36:	6878      	ldr	r0, [r7, #4]
 800eb38:	f001 f8aa 	bl	800fc90 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800eb3c:	2180      	movs	r1, #128	; 0x80
 800eb3e:	6878      	ldr	r0, [r7, #4]
 800eb40:	f001 f8a6 	bl	800fc90 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800eb44:	e01c      	b.n	800eb80 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800eb46:	6839      	ldr	r1, [r7, #0]
 800eb48:	6878      	ldr	r0, [r7, #4]
 800eb4a:	f000 fbe2 	bl	800f312 <USBD_CtlError>
              break;
 800eb4e:	e017      	b.n	800eb80 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	885b      	ldrh	r3, [r3, #2]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d112      	bne.n	800eb7e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800eb58:	7bbb      	ldrb	r3, [r7, #14]
 800eb5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d004      	beq.n	800eb6c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800eb62:	7bbb      	ldrb	r3, [r7, #14]
 800eb64:	4619      	mov	r1, r3
 800eb66:	6878      	ldr	r0, [r7, #4]
 800eb68:	f001 f8b1 	bl	800fcce <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800eb6c:	6878      	ldr	r0, [r7, #4]
 800eb6e:	f000 fc99 	bl	800f4a4 <USBD_CtlSendStatus>
              }
              break;
 800eb72:	e004      	b.n	800eb7e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800eb74:	6839      	ldr	r1, [r7, #0]
 800eb76:	6878      	ldr	r0, [r7, #4]
 800eb78:	f000 fbcb 	bl	800f312 <USBD_CtlError>
              break;
 800eb7c:	e000      	b.n	800eb80 <USBD_StdEPReq+0x14c>
              break;
 800eb7e:	bf00      	nop
          }
          break;
 800eb80:	e0aa      	b.n	800ecd8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb88:	2b02      	cmp	r3, #2
 800eb8a:	d002      	beq.n	800eb92 <USBD_StdEPReq+0x15e>
 800eb8c:	2b03      	cmp	r3, #3
 800eb8e:	d032      	beq.n	800ebf6 <USBD_StdEPReq+0x1c2>
 800eb90:	e097      	b.n	800ecc2 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eb92:	7bbb      	ldrb	r3, [r7, #14]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d007      	beq.n	800eba8 <USBD_StdEPReq+0x174>
 800eb98:	7bbb      	ldrb	r3, [r7, #14]
 800eb9a:	2b80      	cmp	r3, #128	; 0x80
 800eb9c:	d004      	beq.n	800eba8 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800eb9e:	6839      	ldr	r1, [r7, #0]
 800eba0:	6878      	ldr	r0, [r7, #4]
 800eba2:	f000 fbb6 	bl	800f312 <USBD_CtlError>
                break;
 800eba6:	e091      	b.n	800eccc <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eba8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	da0b      	bge.n	800ebc8 <USBD_StdEPReq+0x194>
 800ebb0:	7bbb      	ldrb	r3, [r7, #14]
 800ebb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ebb6:	4613      	mov	r3, r2
 800ebb8:	009b      	lsls	r3, r3, #2
 800ebba:	4413      	add	r3, r2
 800ebbc:	009b      	lsls	r3, r3, #2
 800ebbe:	3310      	adds	r3, #16
 800ebc0:	687a      	ldr	r2, [r7, #4]
 800ebc2:	4413      	add	r3, r2
 800ebc4:	3304      	adds	r3, #4
 800ebc6:	e00b      	b.n	800ebe0 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ebc8:	7bbb      	ldrb	r3, [r7, #14]
 800ebca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ebce:	4613      	mov	r3, r2
 800ebd0:	009b      	lsls	r3, r3, #2
 800ebd2:	4413      	add	r3, r2
 800ebd4:	009b      	lsls	r3, r3, #2
 800ebd6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ebda:	687a      	ldr	r2, [r7, #4]
 800ebdc:	4413      	add	r3, r2
 800ebde:	3304      	adds	r3, #4
 800ebe0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ebe2:	68bb      	ldr	r3, [r7, #8]
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ebe8:	68bb      	ldr	r3, [r7, #8]
 800ebea:	2202      	movs	r2, #2
 800ebec:	4619      	mov	r1, r3
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f000 fbfa 	bl	800f3e8 <USBD_CtlSendData>
              break;
 800ebf4:	e06a      	b.n	800eccc <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ebf6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	da11      	bge.n	800ec22 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ebfe:	7bbb      	ldrb	r3, [r7, #14]
 800ec00:	f003 020f 	and.w	r2, r3, #15
 800ec04:	6879      	ldr	r1, [r7, #4]
 800ec06:	4613      	mov	r3, r2
 800ec08:	009b      	lsls	r3, r3, #2
 800ec0a:	4413      	add	r3, r2
 800ec0c:	009b      	lsls	r3, r3, #2
 800ec0e:	440b      	add	r3, r1
 800ec10:	3318      	adds	r3, #24
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d117      	bne.n	800ec48 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800ec18:	6839      	ldr	r1, [r7, #0]
 800ec1a:	6878      	ldr	r0, [r7, #4]
 800ec1c:	f000 fb79 	bl	800f312 <USBD_CtlError>
                  break;
 800ec20:	e054      	b.n	800eccc <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ec22:	7bbb      	ldrb	r3, [r7, #14]
 800ec24:	f003 020f 	and.w	r2, r3, #15
 800ec28:	6879      	ldr	r1, [r7, #4]
 800ec2a:	4613      	mov	r3, r2
 800ec2c:	009b      	lsls	r3, r3, #2
 800ec2e:	4413      	add	r3, r2
 800ec30:	009b      	lsls	r3, r3, #2
 800ec32:	440b      	add	r3, r1
 800ec34:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d104      	bne.n	800ec48 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800ec3e:	6839      	ldr	r1, [r7, #0]
 800ec40:	6878      	ldr	r0, [r7, #4]
 800ec42:	f000 fb66 	bl	800f312 <USBD_CtlError>
                  break;
 800ec46:	e041      	b.n	800eccc <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ec48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	da0b      	bge.n	800ec68 <USBD_StdEPReq+0x234>
 800ec50:	7bbb      	ldrb	r3, [r7, #14]
 800ec52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ec56:	4613      	mov	r3, r2
 800ec58:	009b      	lsls	r3, r3, #2
 800ec5a:	4413      	add	r3, r2
 800ec5c:	009b      	lsls	r3, r3, #2
 800ec5e:	3310      	adds	r3, #16
 800ec60:	687a      	ldr	r2, [r7, #4]
 800ec62:	4413      	add	r3, r2
 800ec64:	3304      	adds	r3, #4
 800ec66:	e00b      	b.n	800ec80 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ec68:	7bbb      	ldrb	r3, [r7, #14]
 800ec6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ec6e:	4613      	mov	r3, r2
 800ec70:	009b      	lsls	r3, r3, #2
 800ec72:	4413      	add	r3, r2
 800ec74:	009b      	lsls	r3, r3, #2
 800ec76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ec7a:	687a      	ldr	r2, [r7, #4]
 800ec7c:	4413      	add	r3, r2
 800ec7e:	3304      	adds	r3, #4
 800ec80:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ec82:	7bbb      	ldrb	r3, [r7, #14]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d002      	beq.n	800ec8e <USBD_StdEPReq+0x25a>
 800ec88:	7bbb      	ldrb	r3, [r7, #14]
 800ec8a:	2b80      	cmp	r3, #128	; 0x80
 800ec8c:	d103      	bne.n	800ec96 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800ec8e:	68bb      	ldr	r3, [r7, #8]
 800ec90:	2200      	movs	r2, #0
 800ec92:	601a      	str	r2, [r3, #0]
 800ec94:	e00e      	b.n	800ecb4 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800ec96:	7bbb      	ldrb	r3, [r7, #14]
 800ec98:	4619      	mov	r1, r3
 800ec9a:	6878      	ldr	r0, [r7, #4]
 800ec9c:	f001 f836 	bl	800fd0c <USBD_LL_IsStallEP>
 800eca0:	4603      	mov	r3, r0
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d003      	beq.n	800ecae <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	2201      	movs	r2, #1
 800ecaa:	601a      	str	r2, [r3, #0]
 800ecac:	e002      	b.n	800ecb4 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800ecae:	68bb      	ldr	r3, [r7, #8]
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	2202      	movs	r2, #2
 800ecb8:	4619      	mov	r1, r3
 800ecba:	6878      	ldr	r0, [r7, #4]
 800ecbc:	f000 fb94 	bl	800f3e8 <USBD_CtlSendData>
              break;
 800ecc0:	e004      	b.n	800eccc <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800ecc2:	6839      	ldr	r1, [r7, #0]
 800ecc4:	6878      	ldr	r0, [r7, #4]
 800ecc6:	f000 fb24 	bl	800f312 <USBD_CtlError>
              break;
 800ecca:	bf00      	nop
          }
          break;
 800eccc:	e004      	b.n	800ecd8 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800ecce:	6839      	ldr	r1, [r7, #0]
 800ecd0:	6878      	ldr	r0, [r7, #4]
 800ecd2:	f000 fb1e 	bl	800f312 <USBD_CtlError>
          break;
 800ecd6:	bf00      	nop
      }
      break;
 800ecd8:	e004      	b.n	800ece4 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800ecda:	6839      	ldr	r1, [r7, #0]
 800ecdc:	6878      	ldr	r0, [r7, #4]
 800ecde:	f000 fb18 	bl	800f312 <USBD_CtlError>
      break;
 800ece2:	bf00      	nop
  }

  return ret;
 800ece4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ece6:	4618      	mov	r0, r3
 800ece8:	3710      	adds	r7, #16
 800ecea:	46bd      	mov	sp, r7
 800ecec:	bd80      	pop	{r7, pc}
	...

0800ecf0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b084      	sub	sp, #16
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
 800ecf8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ecfe:	2300      	movs	r3, #0
 800ed00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ed02:	2300      	movs	r3, #0
 800ed04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ed06:	683b      	ldr	r3, [r7, #0]
 800ed08:	885b      	ldrh	r3, [r3, #2]
 800ed0a:	0a1b      	lsrs	r3, r3, #8
 800ed0c:	b29b      	uxth	r3, r3
 800ed0e:	3b01      	subs	r3, #1
 800ed10:	2b06      	cmp	r3, #6
 800ed12:	f200 8128 	bhi.w	800ef66 <USBD_GetDescriptor+0x276>
 800ed16:	a201      	add	r2, pc, #4	; (adr r2, 800ed1c <USBD_GetDescriptor+0x2c>)
 800ed18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed1c:	0800ed39 	.word	0x0800ed39
 800ed20:	0800ed51 	.word	0x0800ed51
 800ed24:	0800ed91 	.word	0x0800ed91
 800ed28:	0800ef67 	.word	0x0800ef67
 800ed2c:	0800ef67 	.word	0x0800ef67
 800ed30:	0800ef07 	.word	0x0800ef07
 800ed34:	0800ef33 	.word	0x0800ef33
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	687a      	ldr	r2, [r7, #4]
 800ed42:	7c12      	ldrb	r2, [r2, #16]
 800ed44:	f107 0108 	add.w	r1, r7, #8
 800ed48:	4610      	mov	r0, r2
 800ed4a:	4798      	blx	r3
 800ed4c:	60f8      	str	r0, [r7, #12]
      break;
 800ed4e:	e112      	b.n	800ef76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	7c1b      	ldrb	r3, [r3, #16]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d10d      	bne.n	800ed74 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ed5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed60:	f107 0208 	add.w	r2, r7, #8
 800ed64:	4610      	mov	r0, r2
 800ed66:	4798      	blx	r3
 800ed68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	3301      	adds	r3, #1
 800ed6e:	2202      	movs	r2, #2
 800ed70:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ed72:	e100      	b.n	800ef76 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ed7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed7c:	f107 0208 	add.w	r2, r7, #8
 800ed80:	4610      	mov	r0, r2
 800ed82:	4798      	blx	r3
 800ed84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	3301      	adds	r3, #1
 800ed8a:	2202      	movs	r2, #2
 800ed8c:	701a      	strb	r2, [r3, #0]
      break;
 800ed8e:	e0f2      	b.n	800ef76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ed90:	683b      	ldr	r3, [r7, #0]
 800ed92:	885b      	ldrh	r3, [r3, #2]
 800ed94:	b2db      	uxtb	r3, r3
 800ed96:	2b05      	cmp	r3, #5
 800ed98:	f200 80ac 	bhi.w	800eef4 <USBD_GetDescriptor+0x204>
 800ed9c:	a201      	add	r2, pc, #4	; (adr r2, 800eda4 <USBD_GetDescriptor+0xb4>)
 800ed9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eda2:	bf00      	nop
 800eda4:	0800edbd 	.word	0x0800edbd
 800eda8:	0800edf1 	.word	0x0800edf1
 800edac:	0800ee25 	.word	0x0800ee25
 800edb0:	0800ee59 	.word	0x0800ee59
 800edb4:	0800ee8d 	.word	0x0800ee8d
 800edb8:	0800eec1 	.word	0x0800eec1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800edc2:	685b      	ldr	r3, [r3, #4]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d00b      	beq.n	800ede0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800edce:	685b      	ldr	r3, [r3, #4]
 800edd0:	687a      	ldr	r2, [r7, #4]
 800edd2:	7c12      	ldrb	r2, [r2, #16]
 800edd4:	f107 0108 	add.w	r1, r7, #8
 800edd8:	4610      	mov	r0, r2
 800edda:	4798      	blx	r3
 800eddc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800edde:	e091      	b.n	800ef04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ede0:	6839      	ldr	r1, [r7, #0]
 800ede2:	6878      	ldr	r0, [r7, #4]
 800ede4:	f000 fa95 	bl	800f312 <USBD_CtlError>
            err++;
 800ede8:	7afb      	ldrb	r3, [r7, #11]
 800edea:	3301      	adds	r3, #1
 800edec:	72fb      	strb	r3, [r7, #11]
          break;
 800edee:	e089      	b.n	800ef04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800edf6:	689b      	ldr	r3, [r3, #8]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d00b      	beq.n	800ee14 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ee02:	689b      	ldr	r3, [r3, #8]
 800ee04:	687a      	ldr	r2, [r7, #4]
 800ee06:	7c12      	ldrb	r2, [r2, #16]
 800ee08:	f107 0108 	add.w	r1, r7, #8
 800ee0c:	4610      	mov	r0, r2
 800ee0e:	4798      	blx	r3
 800ee10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ee12:	e077      	b.n	800ef04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ee14:	6839      	ldr	r1, [r7, #0]
 800ee16:	6878      	ldr	r0, [r7, #4]
 800ee18:	f000 fa7b 	bl	800f312 <USBD_CtlError>
            err++;
 800ee1c:	7afb      	ldrb	r3, [r7, #11]
 800ee1e:	3301      	adds	r3, #1
 800ee20:	72fb      	strb	r3, [r7, #11]
          break;
 800ee22:	e06f      	b.n	800ef04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ee2a:	68db      	ldr	r3, [r3, #12]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d00b      	beq.n	800ee48 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ee36:	68db      	ldr	r3, [r3, #12]
 800ee38:	687a      	ldr	r2, [r7, #4]
 800ee3a:	7c12      	ldrb	r2, [r2, #16]
 800ee3c:	f107 0108 	add.w	r1, r7, #8
 800ee40:	4610      	mov	r0, r2
 800ee42:	4798      	blx	r3
 800ee44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ee46:	e05d      	b.n	800ef04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ee48:	6839      	ldr	r1, [r7, #0]
 800ee4a:	6878      	ldr	r0, [r7, #4]
 800ee4c:	f000 fa61 	bl	800f312 <USBD_CtlError>
            err++;
 800ee50:	7afb      	ldrb	r3, [r7, #11]
 800ee52:	3301      	adds	r3, #1
 800ee54:	72fb      	strb	r3, [r7, #11]
          break;
 800ee56:	e055      	b.n	800ef04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ee5e:	691b      	ldr	r3, [r3, #16]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d00b      	beq.n	800ee7c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ee6a:	691b      	ldr	r3, [r3, #16]
 800ee6c:	687a      	ldr	r2, [r7, #4]
 800ee6e:	7c12      	ldrb	r2, [r2, #16]
 800ee70:	f107 0108 	add.w	r1, r7, #8
 800ee74:	4610      	mov	r0, r2
 800ee76:	4798      	blx	r3
 800ee78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ee7a:	e043      	b.n	800ef04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ee7c:	6839      	ldr	r1, [r7, #0]
 800ee7e:	6878      	ldr	r0, [r7, #4]
 800ee80:	f000 fa47 	bl	800f312 <USBD_CtlError>
            err++;
 800ee84:	7afb      	ldrb	r3, [r7, #11]
 800ee86:	3301      	adds	r3, #1
 800ee88:	72fb      	strb	r3, [r7, #11]
          break;
 800ee8a:	e03b      	b.n	800ef04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ee92:	695b      	ldr	r3, [r3, #20]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d00b      	beq.n	800eeb0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ee9e:	695b      	ldr	r3, [r3, #20]
 800eea0:	687a      	ldr	r2, [r7, #4]
 800eea2:	7c12      	ldrb	r2, [r2, #16]
 800eea4:	f107 0108 	add.w	r1, r7, #8
 800eea8:	4610      	mov	r0, r2
 800eeaa:	4798      	blx	r3
 800eeac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eeae:	e029      	b.n	800ef04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800eeb0:	6839      	ldr	r1, [r7, #0]
 800eeb2:	6878      	ldr	r0, [r7, #4]
 800eeb4:	f000 fa2d 	bl	800f312 <USBD_CtlError>
            err++;
 800eeb8:	7afb      	ldrb	r3, [r7, #11]
 800eeba:	3301      	adds	r3, #1
 800eebc:	72fb      	strb	r3, [r7, #11]
          break;
 800eebe:	e021      	b.n	800ef04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800eec6:	699b      	ldr	r3, [r3, #24]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d00b      	beq.n	800eee4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800eed2:	699b      	ldr	r3, [r3, #24]
 800eed4:	687a      	ldr	r2, [r7, #4]
 800eed6:	7c12      	ldrb	r2, [r2, #16]
 800eed8:	f107 0108 	add.w	r1, r7, #8
 800eedc:	4610      	mov	r0, r2
 800eede:	4798      	blx	r3
 800eee0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eee2:	e00f      	b.n	800ef04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800eee4:	6839      	ldr	r1, [r7, #0]
 800eee6:	6878      	ldr	r0, [r7, #4]
 800eee8:	f000 fa13 	bl	800f312 <USBD_CtlError>
            err++;
 800eeec:	7afb      	ldrb	r3, [r7, #11]
 800eeee:	3301      	adds	r3, #1
 800eef0:	72fb      	strb	r3, [r7, #11]
          break;
 800eef2:	e007      	b.n	800ef04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800eef4:	6839      	ldr	r1, [r7, #0]
 800eef6:	6878      	ldr	r0, [r7, #4]
 800eef8:	f000 fa0b 	bl	800f312 <USBD_CtlError>
          err++;
 800eefc:	7afb      	ldrb	r3, [r7, #11]
 800eefe:	3301      	adds	r3, #1
 800ef00:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800ef02:	e038      	b.n	800ef76 <USBD_GetDescriptor+0x286>
 800ef04:	e037      	b.n	800ef76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	7c1b      	ldrb	r3, [r3, #16]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d109      	bne.n	800ef22 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef16:	f107 0208 	add.w	r2, r7, #8
 800ef1a:	4610      	mov	r0, r2
 800ef1c:	4798      	blx	r3
 800ef1e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ef20:	e029      	b.n	800ef76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ef22:	6839      	ldr	r1, [r7, #0]
 800ef24:	6878      	ldr	r0, [r7, #4]
 800ef26:	f000 f9f4 	bl	800f312 <USBD_CtlError>
        err++;
 800ef2a:	7afb      	ldrb	r3, [r7, #11]
 800ef2c:	3301      	adds	r3, #1
 800ef2e:	72fb      	strb	r3, [r7, #11]
      break;
 800ef30:	e021      	b.n	800ef76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	7c1b      	ldrb	r3, [r3, #16]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d10d      	bne.n	800ef56 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef42:	f107 0208 	add.w	r2, r7, #8
 800ef46:	4610      	mov	r0, r2
 800ef48:	4798      	blx	r3
 800ef4a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	3301      	adds	r3, #1
 800ef50:	2207      	movs	r2, #7
 800ef52:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ef54:	e00f      	b.n	800ef76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ef56:	6839      	ldr	r1, [r7, #0]
 800ef58:	6878      	ldr	r0, [r7, #4]
 800ef5a:	f000 f9da 	bl	800f312 <USBD_CtlError>
        err++;
 800ef5e:	7afb      	ldrb	r3, [r7, #11]
 800ef60:	3301      	adds	r3, #1
 800ef62:	72fb      	strb	r3, [r7, #11]
      break;
 800ef64:	e007      	b.n	800ef76 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ef66:	6839      	ldr	r1, [r7, #0]
 800ef68:	6878      	ldr	r0, [r7, #4]
 800ef6a:	f000 f9d2 	bl	800f312 <USBD_CtlError>
      err++;
 800ef6e:	7afb      	ldrb	r3, [r7, #11]
 800ef70:	3301      	adds	r3, #1
 800ef72:	72fb      	strb	r3, [r7, #11]
      break;
 800ef74:	bf00      	nop
  }

  if (err != 0U)
 800ef76:	7afb      	ldrb	r3, [r7, #11]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d11c      	bne.n	800efb6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800ef7c:	893b      	ldrh	r3, [r7, #8]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d011      	beq.n	800efa6 <USBD_GetDescriptor+0x2b6>
 800ef82:	683b      	ldr	r3, [r7, #0]
 800ef84:	88db      	ldrh	r3, [r3, #6]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d00d      	beq.n	800efa6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800ef8a:	683b      	ldr	r3, [r7, #0]
 800ef8c:	88da      	ldrh	r2, [r3, #6]
 800ef8e:	893b      	ldrh	r3, [r7, #8]
 800ef90:	4293      	cmp	r3, r2
 800ef92:	bf28      	it	cs
 800ef94:	4613      	movcs	r3, r2
 800ef96:	b29b      	uxth	r3, r3
 800ef98:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ef9a:	893b      	ldrh	r3, [r7, #8]
 800ef9c:	461a      	mov	r2, r3
 800ef9e:	68f9      	ldr	r1, [r7, #12]
 800efa0:	6878      	ldr	r0, [r7, #4]
 800efa2:	f000 fa21 	bl	800f3e8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800efa6:	683b      	ldr	r3, [r7, #0]
 800efa8:	88db      	ldrh	r3, [r3, #6]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d104      	bne.n	800efb8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800efae:	6878      	ldr	r0, [r7, #4]
 800efb0:	f000 fa78 	bl	800f4a4 <USBD_CtlSendStatus>
 800efb4:	e000      	b.n	800efb8 <USBD_GetDescriptor+0x2c8>
    return;
 800efb6:	bf00      	nop
    }
  }
}
 800efb8:	3710      	adds	r7, #16
 800efba:	46bd      	mov	sp, r7
 800efbc:	bd80      	pop	{r7, pc}
 800efbe:	bf00      	nop

0800efc0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b084      	sub	sp, #16
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
 800efc8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800efca:	683b      	ldr	r3, [r7, #0]
 800efcc:	889b      	ldrh	r3, [r3, #4]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d130      	bne.n	800f034 <USBD_SetAddress+0x74>
 800efd2:	683b      	ldr	r3, [r7, #0]
 800efd4:	88db      	ldrh	r3, [r3, #6]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d12c      	bne.n	800f034 <USBD_SetAddress+0x74>
 800efda:	683b      	ldr	r3, [r7, #0]
 800efdc:	885b      	ldrh	r3, [r3, #2]
 800efde:	2b7f      	cmp	r3, #127	; 0x7f
 800efe0:	d828      	bhi.n	800f034 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800efe2:	683b      	ldr	r3, [r7, #0]
 800efe4:	885b      	ldrh	r3, [r3, #2]
 800efe6:	b2db      	uxtb	r3, r3
 800efe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800efec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eff4:	2b03      	cmp	r3, #3
 800eff6:	d104      	bne.n	800f002 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800eff8:	6839      	ldr	r1, [r7, #0]
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	f000 f989 	bl	800f312 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f000:	e01c      	b.n	800f03c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	7bfa      	ldrb	r2, [r7, #15]
 800f006:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f00a:	7bfb      	ldrb	r3, [r7, #15]
 800f00c:	4619      	mov	r1, r3
 800f00e:	6878      	ldr	r0, [r7, #4]
 800f010:	f000 fea8 	bl	800fd64 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800f014:	6878      	ldr	r0, [r7, #4]
 800f016:	f000 fa45 	bl	800f4a4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f01a:	7bfb      	ldrb	r3, [r7, #15]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d004      	beq.n	800f02a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2202      	movs	r2, #2
 800f024:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f028:	e008      	b.n	800f03c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	2201      	movs	r2, #1
 800f02e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f032:	e003      	b.n	800f03c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f034:	6839      	ldr	r1, [r7, #0]
 800f036:	6878      	ldr	r0, [r7, #4]
 800f038:	f000 f96b 	bl	800f312 <USBD_CtlError>
  }
}
 800f03c:	bf00      	nop
 800f03e:	3710      	adds	r7, #16
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}

0800f044 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b082      	sub	sp, #8
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
 800f04c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	885b      	ldrh	r3, [r3, #2]
 800f052:	b2da      	uxtb	r2, r3
 800f054:	4b41      	ldr	r3, [pc, #260]	; (800f15c <USBD_SetConfig+0x118>)
 800f056:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f058:	4b40      	ldr	r3, [pc, #256]	; (800f15c <USBD_SetConfig+0x118>)
 800f05a:	781b      	ldrb	r3, [r3, #0]
 800f05c:	2b01      	cmp	r3, #1
 800f05e:	d904      	bls.n	800f06a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800f060:	6839      	ldr	r1, [r7, #0]
 800f062:	6878      	ldr	r0, [r7, #4]
 800f064:	f000 f955 	bl	800f312 <USBD_CtlError>
 800f068:	e075      	b.n	800f156 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f070:	2b02      	cmp	r3, #2
 800f072:	d002      	beq.n	800f07a <USBD_SetConfig+0x36>
 800f074:	2b03      	cmp	r3, #3
 800f076:	d023      	beq.n	800f0c0 <USBD_SetConfig+0x7c>
 800f078:	e062      	b.n	800f140 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800f07a:	4b38      	ldr	r3, [pc, #224]	; (800f15c <USBD_SetConfig+0x118>)
 800f07c:	781b      	ldrb	r3, [r3, #0]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d01a      	beq.n	800f0b8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800f082:	4b36      	ldr	r3, [pc, #216]	; (800f15c <USBD_SetConfig+0x118>)
 800f084:	781b      	ldrb	r3, [r3, #0]
 800f086:	461a      	mov	r2, r3
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	2203      	movs	r2, #3
 800f090:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800f094:	4b31      	ldr	r3, [pc, #196]	; (800f15c <USBD_SetConfig+0x118>)
 800f096:	781b      	ldrb	r3, [r3, #0]
 800f098:	4619      	mov	r1, r3
 800f09a:	6878      	ldr	r0, [r7, #4]
 800f09c:	f7ff f9b5 	bl	800e40a <USBD_SetClassConfig>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	2b02      	cmp	r3, #2
 800f0a4:	d104      	bne.n	800f0b0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800f0a6:	6839      	ldr	r1, [r7, #0]
 800f0a8:	6878      	ldr	r0, [r7, #4]
 800f0aa:	f000 f932 	bl	800f312 <USBD_CtlError>
            return;
 800f0ae:	e052      	b.n	800f156 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800f0b0:	6878      	ldr	r0, [r7, #4]
 800f0b2:	f000 f9f7 	bl	800f4a4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800f0b6:	e04e      	b.n	800f156 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800f0b8:	6878      	ldr	r0, [r7, #4]
 800f0ba:	f000 f9f3 	bl	800f4a4 <USBD_CtlSendStatus>
        break;
 800f0be:	e04a      	b.n	800f156 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800f0c0:	4b26      	ldr	r3, [pc, #152]	; (800f15c <USBD_SetConfig+0x118>)
 800f0c2:	781b      	ldrb	r3, [r3, #0]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d112      	bne.n	800f0ee <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2202      	movs	r2, #2
 800f0cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800f0d0:	4b22      	ldr	r3, [pc, #136]	; (800f15c <USBD_SetConfig+0x118>)
 800f0d2:	781b      	ldrb	r3, [r3, #0]
 800f0d4:	461a      	mov	r2, r3
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800f0da:	4b20      	ldr	r3, [pc, #128]	; (800f15c <USBD_SetConfig+0x118>)
 800f0dc:	781b      	ldrb	r3, [r3, #0]
 800f0de:	4619      	mov	r1, r3
 800f0e0:	6878      	ldr	r0, [r7, #4]
 800f0e2:	f7ff f9b1 	bl	800e448 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800f0e6:	6878      	ldr	r0, [r7, #4]
 800f0e8:	f000 f9dc 	bl	800f4a4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800f0ec:	e033      	b.n	800f156 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800f0ee:	4b1b      	ldr	r3, [pc, #108]	; (800f15c <USBD_SetConfig+0x118>)
 800f0f0:	781b      	ldrb	r3, [r3, #0]
 800f0f2:	461a      	mov	r2, r3
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	685b      	ldr	r3, [r3, #4]
 800f0f8:	429a      	cmp	r2, r3
 800f0fa:	d01d      	beq.n	800f138 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	685b      	ldr	r3, [r3, #4]
 800f100:	b2db      	uxtb	r3, r3
 800f102:	4619      	mov	r1, r3
 800f104:	6878      	ldr	r0, [r7, #4]
 800f106:	f7ff f99f 	bl	800e448 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800f10a:	4b14      	ldr	r3, [pc, #80]	; (800f15c <USBD_SetConfig+0x118>)
 800f10c:	781b      	ldrb	r3, [r3, #0]
 800f10e:	461a      	mov	r2, r3
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800f114:	4b11      	ldr	r3, [pc, #68]	; (800f15c <USBD_SetConfig+0x118>)
 800f116:	781b      	ldrb	r3, [r3, #0]
 800f118:	4619      	mov	r1, r3
 800f11a:	6878      	ldr	r0, [r7, #4]
 800f11c:	f7ff f975 	bl	800e40a <USBD_SetClassConfig>
 800f120:	4603      	mov	r3, r0
 800f122:	2b02      	cmp	r3, #2
 800f124:	d104      	bne.n	800f130 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800f126:	6839      	ldr	r1, [r7, #0]
 800f128:	6878      	ldr	r0, [r7, #4]
 800f12a:	f000 f8f2 	bl	800f312 <USBD_CtlError>
            return;
 800f12e:	e012      	b.n	800f156 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800f130:	6878      	ldr	r0, [r7, #4]
 800f132:	f000 f9b7 	bl	800f4a4 <USBD_CtlSendStatus>
        break;
 800f136:	e00e      	b.n	800f156 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800f138:	6878      	ldr	r0, [r7, #4]
 800f13a:	f000 f9b3 	bl	800f4a4 <USBD_CtlSendStatus>
        break;
 800f13e:	e00a      	b.n	800f156 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800f140:	6839      	ldr	r1, [r7, #0]
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	f000 f8e5 	bl	800f312 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800f148:	4b04      	ldr	r3, [pc, #16]	; (800f15c <USBD_SetConfig+0x118>)
 800f14a:	781b      	ldrb	r3, [r3, #0]
 800f14c:	4619      	mov	r1, r3
 800f14e:	6878      	ldr	r0, [r7, #4]
 800f150:	f7ff f97a 	bl	800e448 <USBD_ClrClassConfig>
        break;
 800f154:	bf00      	nop
    }
  }
}
 800f156:	3708      	adds	r7, #8
 800f158:	46bd      	mov	sp, r7
 800f15a:	bd80      	pop	{r7, pc}
 800f15c:	24000208 	.word	0x24000208

0800f160 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b082      	sub	sp, #8
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
 800f168:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f16a:	683b      	ldr	r3, [r7, #0]
 800f16c:	88db      	ldrh	r3, [r3, #6]
 800f16e:	2b01      	cmp	r3, #1
 800f170:	d004      	beq.n	800f17c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f172:	6839      	ldr	r1, [r7, #0]
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	f000 f8cc 	bl	800f312 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f17a:	e021      	b.n	800f1c0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f182:	2b01      	cmp	r3, #1
 800f184:	db17      	blt.n	800f1b6 <USBD_GetConfig+0x56>
 800f186:	2b02      	cmp	r3, #2
 800f188:	dd02      	ble.n	800f190 <USBD_GetConfig+0x30>
 800f18a:	2b03      	cmp	r3, #3
 800f18c:	d00b      	beq.n	800f1a6 <USBD_GetConfig+0x46>
 800f18e:	e012      	b.n	800f1b6 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	2200      	movs	r2, #0
 800f194:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	3308      	adds	r3, #8
 800f19a:	2201      	movs	r2, #1
 800f19c:	4619      	mov	r1, r3
 800f19e:	6878      	ldr	r0, [r7, #4]
 800f1a0:	f000 f922 	bl	800f3e8 <USBD_CtlSendData>
        break;
 800f1a4:	e00c      	b.n	800f1c0 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	3304      	adds	r3, #4
 800f1aa:	2201      	movs	r2, #1
 800f1ac:	4619      	mov	r1, r3
 800f1ae:	6878      	ldr	r0, [r7, #4]
 800f1b0:	f000 f91a 	bl	800f3e8 <USBD_CtlSendData>
        break;
 800f1b4:	e004      	b.n	800f1c0 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800f1b6:	6839      	ldr	r1, [r7, #0]
 800f1b8:	6878      	ldr	r0, [r7, #4]
 800f1ba:	f000 f8aa 	bl	800f312 <USBD_CtlError>
        break;
 800f1be:	bf00      	nop
}
 800f1c0:	bf00      	nop
 800f1c2:	3708      	adds	r7, #8
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	bd80      	pop	{r7, pc}

0800f1c8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b082      	sub	sp, #8
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
 800f1d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f1d8:	3b01      	subs	r3, #1
 800f1da:	2b02      	cmp	r3, #2
 800f1dc:	d81e      	bhi.n	800f21c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f1de:	683b      	ldr	r3, [r7, #0]
 800f1e0:	88db      	ldrh	r3, [r3, #6]
 800f1e2:	2b02      	cmp	r3, #2
 800f1e4:	d004      	beq.n	800f1f0 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800f1e6:	6839      	ldr	r1, [r7, #0]
 800f1e8:	6878      	ldr	r0, [r7, #4]
 800f1ea:	f000 f892 	bl	800f312 <USBD_CtlError>
        break;
 800f1ee:	e01a      	b.n	800f226 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	2201      	movs	r2, #1
 800f1f4:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d005      	beq.n	800f20c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	68db      	ldr	r3, [r3, #12]
 800f204:	f043 0202 	orr.w	r2, r3, #2
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	330c      	adds	r3, #12
 800f210:	2202      	movs	r2, #2
 800f212:	4619      	mov	r1, r3
 800f214:	6878      	ldr	r0, [r7, #4]
 800f216:	f000 f8e7 	bl	800f3e8 <USBD_CtlSendData>
      break;
 800f21a:	e004      	b.n	800f226 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800f21c:	6839      	ldr	r1, [r7, #0]
 800f21e:	6878      	ldr	r0, [r7, #4]
 800f220:	f000 f877 	bl	800f312 <USBD_CtlError>
      break;
 800f224:	bf00      	nop
  }
}
 800f226:	bf00      	nop
 800f228:	3708      	adds	r7, #8
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd80      	pop	{r7, pc}

0800f22e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800f22e:	b580      	push	{r7, lr}
 800f230:	b082      	sub	sp, #8
 800f232:	af00      	add	r7, sp, #0
 800f234:	6078      	str	r0, [r7, #4]
 800f236:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f238:	683b      	ldr	r3, [r7, #0]
 800f23a:	885b      	ldrh	r3, [r3, #2]
 800f23c:	2b01      	cmp	r3, #1
 800f23e:	d106      	bne.n	800f24e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	2201      	movs	r2, #1
 800f244:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800f248:	6878      	ldr	r0, [r7, #4]
 800f24a:	f000 f92b 	bl	800f4a4 <USBD_CtlSendStatus>
  }
}
 800f24e:	bf00      	nop
 800f250:	3708      	adds	r7, #8
 800f252:	46bd      	mov	sp, r7
 800f254:	bd80      	pop	{r7, pc}

0800f256 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800f256:	b580      	push	{r7, lr}
 800f258:	b082      	sub	sp, #8
 800f25a:	af00      	add	r7, sp, #0
 800f25c:	6078      	str	r0, [r7, #4]
 800f25e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f266:	3b01      	subs	r3, #1
 800f268:	2b02      	cmp	r3, #2
 800f26a:	d80b      	bhi.n	800f284 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f26c:	683b      	ldr	r3, [r7, #0]
 800f26e:	885b      	ldrh	r3, [r3, #2]
 800f270:	2b01      	cmp	r3, #1
 800f272:	d10c      	bne.n	800f28e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	2200      	movs	r2, #0
 800f278:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800f27c:	6878      	ldr	r0, [r7, #4]
 800f27e:	f000 f911 	bl	800f4a4 <USBD_CtlSendStatus>
      }
      break;
 800f282:	e004      	b.n	800f28e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800f284:	6839      	ldr	r1, [r7, #0]
 800f286:	6878      	ldr	r0, [r7, #4]
 800f288:	f000 f843 	bl	800f312 <USBD_CtlError>
      break;
 800f28c:	e000      	b.n	800f290 <USBD_ClrFeature+0x3a>
      break;
 800f28e:	bf00      	nop
  }
}
 800f290:	bf00      	nop
 800f292:	3708      	adds	r7, #8
 800f294:	46bd      	mov	sp, r7
 800f296:	bd80      	pop	{r7, pc}

0800f298 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f298:	b480      	push	{r7}
 800f29a:	b083      	sub	sp, #12
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
 800f2a0:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	781a      	ldrb	r2, [r3, #0]
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800f2aa:	683b      	ldr	r3, [r7, #0]
 800f2ac:	785a      	ldrb	r2, [r3, #1]
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800f2b2:	683b      	ldr	r3, [r7, #0]
 800f2b4:	3302      	adds	r3, #2
 800f2b6:	781b      	ldrb	r3, [r3, #0]
 800f2b8:	b29a      	uxth	r2, r3
 800f2ba:	683b      	ldr	r3, [r7, #0]
 800f2bc:	3303      	adds	r3, #3
 800f2be:	781b      	ldrb	r3, [r3, #0]
 800f2c0:	b29b      	uxth	r3, r3
 800f2c2:	021b      	lsls	r3, r3, #8
 800f2c4:	b29b      	uxth	r3, r3
 800f2c6:	4413      	add	r3, r2
 800f2c8:	b29a      	uxth	r2, r3
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800f2ce:	683b      	ldr	r3, [r7, #0]
 800f2d0:	3304      	adds	r3, #4
 800f2d2:	781b      	ldrb	r3, [r3, #0]
 800f2d4:	b29a      	uxth	r2, r3
 800f2d6:	683b      	ldr	r3, [r7, #0]
 800f2d8:	3305      	adds	r3, #5
 800f2da:	781b      	ldrb	r3, [r3, #0]
 800f2dc:	b29b      	uxth	r3, r3
 800f2de:	021b      	lsls	r3, r3, #8
 800f2e0:	b29b      	uxth	r3, r3
 800f2e2:	4413      	add	r3, r2
 800f2e4:	b29a      	uxth	r2, r3
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800f2ea:	683b      	ldr	r3, [r7, #0]
 800f2ec:	3306      	adds	r3, #6
 800f2ee:	781b      	ldrb	r3, [r3, #0]
 800f2f0:	b29a      	uxth	r2, r3
 800f2f2:	683b      	ldr	r3, [r7, #0]
 800f2f4:	3307      	adds	r3, #7
 800f2f6:	781b      	ldrb	r3, [r3, #0]
 800f2f8:	b29b      	uxth	r3, r3
 800f2fa:	021b      	lsls	r3, r3, #8
 800f2fc:	b29b      	uxth	r3, r3
 800f2fe:	4413      	add	r3, r2
 800f300:	b29a      	uxth	r2, r3
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	80da      	strh	r2, [r3, #6]

}
 800f306:	bf00      	nop
 800f308:	370c      	adds	r7, #12
 800f30a:	46bd      	mov	sp, r7
 800f30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f310:	4770      	bx	lr

0800f312 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800f312:	b580      	push	{r7, lr}
 800f314:	b082      	sub	sp, #8
 800f316:	af00      	add	r7, sp, #0
 800f318:	6078      	str	r0, [r7, #4]
 800f31a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800f31c:	2180      	movs	r1, #128	; 0x80
 800f31e:	6878      	ldr	r0, [r7, #4]
 800f320:	f000 fcb6 	bl	800fc90 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800f324:	2100      	movs	r1, #0
 800f326:	6878      	ldr	r0, [r7, #4]
 800f328:	f000 fcb2 	bl	800fc90 <USBD_LL_StallEP>
}
 800f32c:	bf00      	nop
 800f32e:	3708      	adds	r7, #8
 800f330:	46bd      	mov	sp, r7
 800f332:	bd80      	pop	{r7, pc}

0800f334 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b086      	sub	sp, #24
 800f338:	af00      	add	r7, sp, #0
 800f33a:	60f8      	str	r0, [r7, #12]
 800f33c:	60b9      	str	r1, [r7, #8]
 800f33e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f340:	2300      	movs	r3, #0
 800f342:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d032      	beq.n	800f3b0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800f34a:	68f8      	ldr	r0, [r7, #12]
 800f34c:	f000 f834 	bl	800f3b8 <USBD_GetLen>
 800f350:	4603      	mov	r3, r0
 800f352:	3301      	adds	r3, #1
 800f354:	b29b      	uxth	r3, r3
 800f356:	005b      	lsls	r3, r3, #1
 800f358:	b29a      	uxth	r2, r3
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800f35e:	7dfb      	ldrb	r3, [r7, #23]
 800f360:	1c5a      	adds	r2, r3, #1
 800f362:	75fa      	strb	r2, [r7, #23]
 800f364:	461a      	mov	r2, r3
 800f366:	68bb      	ldr	r3, [r7, #8]
 800f368:	4413      	add	r3, r2
 800f36a:	687a      	ldr	r2, [r7, #4]
 800f36c:	7812      	ldrb	r2, [r2, #0]
 800f36e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800f370:	7dfb      	ldrb	r3, [r7, #23]
 800f372:	1c5a      	adds	r2, r3, #1
 800f374:	75fa      	strb	r2, [r7, #23]
 800f376:	461a      	mov	r2, r3
 800f378:	68bb      	ldr	r3, [r7, #8]
 800f37a:	4413      	add	r3, r2
 800f37c:	2203      	movs	r2, #3
 800f37e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800f380:	e012      	b.n	800f3a8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	1c5a      	adds	r2, r3, #1
 800f386:	60fa      	str	r2, [r7, #12]
 800f388:	7dfa      	ldrb	r2, [r7, #23]
 800f38a:	1c51      	adds	r1, r2, #1
 800f38c:	75f9      	strb	r1, [r7, #23]
 800f38e:	4611      	mov	r1, r2
 800f390:	68ba      	ldr	r2, [r7, #8]
 800f392:	440a      	add	r2, r1
 800f394:	781b      	ldrb	r3, [r3, #0]
 800f396:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800f398:	7dfb      	ldrb	r3, [r7, #23]
 800f39a:	1c5a      	adds	r2, r3, #1
 800f39c:	75fa      	strb	r2, [r7, #23]
 800f39e:	461a      	mov	r2, r3
 800f3a0:	68bb      	ldr	r3, [r7, #8]
 800f3a2:	4413      	add	r3, r2
 800f3a4:	2200      	movs	r2, #0
 800f3a6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	781b      	ldrb	r3, [r3, #0]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d1e8      	bne.n	800f382 <USBD_GetString+0x4e>
    }
  }
}
 800f3b0:	bf00      	nop
 800f3b2:	3718      	adds	r7, #24
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	bd80      	pop	{r7, pc}

0800f3b8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f3b8:	b480      	push	{r7}
 800f3ba:	b085      	sub	sp, #20
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800f3c4:	e005      	b.n	800f3d2 <USBD_GetLen+0x1a>
  {
    len++;
 800f3c6:	7bfb      	ldrb	r3, [r7, #15]
 800f3c8:	3301      	adds	r3, #1
 800f3ca:	73fb      	strb	r3, [r7, #15]
    buf++;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	3301      	adds	r3, #1
 800f3d0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	781b      	ldrb	r3, [r3, #0]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d1f5      	bne.n	800f3c6 <USBD_GetLen+0xe>
  }

  return len;
 800f3da:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3dc:	4618      	mov	r0, r3
 800f3de:	3714      	adds	r7, #20
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e6:	4770      	bx	lr

0800f3e8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b084      	sub	sp, #16
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	60f8      	str	r0, [r7, #12]
 800f3f0:	60b9      	str	r1, [r7, #8]
 800f3f2:	4613      	mov	r3, r2
 800f3f4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	2202      	movs	r2, #2
 800f3fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f3fe:	88fa      	ldrh	r2, [r7, #6]
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800f404:	88fa      	ldrh	r2, [r7, #6]
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f40a:	88fb      	ldrh	r3, [r7, #6]
 800f40c:	68ba      	ldr	r2, [r7, #8]
 800f40e:	2100      	movs	r1, #0
 800f410:	68f8      	ldr	r0, [r7, #12]
 800f412:	f000 fcc6 	bl	800fda2 <USBD_LL_Transmit>

  return USBD_OK;
 800f416:	2300      	movs	r3, #0
}
 800f418:	4618      	mov	r0, r3
 800f41a:	3710      	adds	r7, #16
 800f41c:	46bd      	mov	sp, r7
 800f41e:	bd80      	pop	{r7, pc}

0800f420 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b084      	sub	sp, #16
 800f424:	af00      	add	r7, sp, #0
 800f426:	60f8      	str	r0, [r7, #12]
 800f428:	60b9      	str	r1, [r7, #8]
 800f42a:	4613      	mov	r3, r2
 800f42c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f42e:	88fb      	ldrh	r3, [r7, #6]
 800f430:	68ba      	ldr	r2, [r7, #8]
 800f432:	2100      	movs	r1, #0
 800f434:	68f8      	ldr	r0, [r7, #12]
 800f436:	f000 fcb4 	bl	800fda2 <USBD_LL_Transmit>

  return USBD_OK;
 800f43a:	2300      	movs	r3, #0
}
 800f43c:	4618      	mov	r0, r3
 800f43e:	3710      	adds	r7, #16
 800f440:	46bd      	mov	sp, r7
 800f442:	bd80      	pop	{r7, pc}

0800f444 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800f444:	b580      	push	{r7, lr}
 800f446:	b084      	sub	sp, #16
 800f448:	af00      	add	r7, sp, #0
 800f44a:	60f8      	str	r0, [r7, #12]
 800f44c:	60b9      	str	r1, [r7, #8]
 800f44e:	4613      	mov	r3, r2
 800f450:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	2203      	movs	r2, #3
 800f456:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f45a:	88fa      	ldrh	r2, [r7, #6]
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800f462:	88fa      	ldrh	r2, [r7, #6]
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f46a:	88fb      	ldrh	r3, [r7, #6]
 800f46c:	68ba      	ldr	r2, [r7, #8]
 800f46e:	2100      	movs	r1, #0
 800f470:	68f8      	ldr	r0, [r7, #12]
 800f472:	f000 fcb9 	bl	800fde8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f476:	2300      	movs	r3, #0
}
 800f478:	4618      	mov	r0, r3
 800f47a:	3710      	adds	r7, #16
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bd80      	pop	{r7, pc}

0800f480 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b084      	sub	sp, #16
 800f484:	af00      	add	r7, sp, #0
 800f486:	60f8      	str	r0, [r7, #12]
 800f488:	60b9      	str	r1, [r7, #8]
 800f48a:	4613      	mov	r3, r2
 800f48c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f48e:	88fb      	ldrh	r3, [r7, #6]
 800f490:	68ba      	ldr	r2, [r7, #8]
 800f492:	2100      	movs	r1, #0
 800f494:	68f8      	ldr	r0, [r7, #12]
 800f496:	f000 fca7 	bl	800fde8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f49a:	2300      	movs	r3, #0
}
 800f49c:	4618      	mov	r0, r3
 800f49e:	3710      	adds	r7, #16
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	bd80      	pop	{r7, pc}

0800f4a4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b082      	sub	sp, #8
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	2204      	movs	r2, #4
 800f4b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	2100      	movs	r1, #0
 800f4ba:	6878      	ldr	r0, [r7, #4]
 800f4bc:	f000 fc71 	bl	800fda2 <USBD_LL_Transmit>

  return USBD_OK;
 800f4c0:	2300      	movs	r3, #0
}
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	3708      	adds	r7, #8
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	bd80      	pop	{r7, pc}

0800f4ca <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f4ca:	b580      	push	{r7, lr}
 800f4cc:	b082      	sub	sp, #8
 800f4ce:	af00      	add	r7, sp, #0
 800f4d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	2205      	movs	r2, #5
 800f4d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f4da:	2300      	movs	r3, #0
 800f4dc:	2200      	movs	r2, #0
 800f4de:	2100      	movs	r1, #0
 800f4e0:	6878      	ldr	r0, [r7, #4]
 800f4e2:	f000 fc81 	bl	800fde8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f4e6:	2300      	movs	r3, #0
}
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	3708      	adds	r7, #8
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	bd80      	pop	{r7, pc}

0800f4f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	4913      	ldr	r1, [pc, #76]	; (800f544 <MX_USB_DEVICE_Init+0x54>)
 800f4f8:	4813      	ldr	r0, [pc, #76]	; (800f548 <MX_USB_DEVICE_Init+0x58>)
 800f4fa:	f7fe ff2a 	bl	800e352 <USBD_Init>
 800f4fe:	4603      	mov	r3, r0
 800f500:	2b00      	cmp	r3, #0
 800f502:	d001      	beq.n	800f508 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f504:	f7f1 ff3e 	bl	8001384 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f508:	4910      	ldr	r1, [pc, #64]	; (800f54c <MX_USB_DEVICE_Init+0x5c>)
 800f50a:	480f      	ldr	r0, [pc, #60]	; (800f548 <MX_USB_DEVICE_Init+0x58>)
 800f50c:	f7fe ff4c 	bl	800e3a8 <USBD_RegisterClass>
 800f510:	4603      	mov	r3, r0
 800f512:	2b00      	cmp	r3, #0
 800f514:	d001      	beq.n	800f51a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f516:	f7f1 ff35 	bl	8001384 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f51a:	490d      	ldr	r1, [pc, #52]	; (800f550 <MX_USB_DEVICE_Init+0x60>)
 800f51c:	480a      	ldr	r0, [pc, #40]	; (800f548 <MX_USB_DEVICE_Init+0x58>)
 800f51e:	f7fe fea9 	bl	800e274 <USBD_CDC_RegisterInterface>
 800f522:	4603      	mov	r3, r0
 800f524:	2b00      	cmp	r3, #0
 800f526:	d001      	beq.n	800f52c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f528:	f7f1 ff2c 	bl	8001384 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f52c:	4806      	ldr	r0, [pc, #24]	; (800f548 <MX_USB_DEVICE_Init+0x58>)
 800f52e:	f7fe ff55 	bl	800e3dc <USBD_Start>
 800f532:	4603      	mov	r3, r0
 800f534:	2b00      	cmp	r3, #0
 800f536:	d001      	beq.n	800f53c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f538:	f7f1 ff24 	bl	8001384 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800f53c:	f7f6 ff56 	bl	80063ec <HAL_PWREx_EnableUSBVoltageDetector>
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f540:	bf00      	nop
 800f542:	bd80      	pop	{r7, pc}
 800f544:	24000130 	.word	0x24000130
 800f548:	24000758 	.word	0x24000758
 800f54c:	2400001c 	.word	0x2400001c
 800f550:	24000120 	.word	0x24000120

0800f554 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f554:	b580      	push	{r7, lr}
 800f556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f558:	2200      	movs	r2, #0
 800f55a:	4905      	ldr	r1, [pc, #20]	; (800f570 <CDC_Init_FS+0x1c>)
 800f55c:	4805      	ldr	r0, [pc, #20]	; (800f574 <CDC_Init_FS+0x20>)
 800f55e:	f7fe fea0 	bl	800e2a2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f562:	4905      	ldr	r1, [pc, #20]	; (800f578 <CDC_Init_FS+0x24>)
 800f564:	4803      	ldr	r0, [pc, #12]	; (800f574 <CDC_Init_FS+0x20>)
 800f566:	f7fe feb6 	bl	800e2d6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f56a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f56c:	4618      	mov	r0, r3
 800f56e:	bd80      	pop	{r7, pc}
 800f570:	2400121c 	.word	0x2400121c
 800f574:	24000758 	.word	0x24000758
 800f578:	24000a1c 	.word	0x24000a1c

0800f57c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f57c:	b480      	push	{r7}
 800f57e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f580:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f582:	4618      	mov	r0, r3
 800f584:	46bd      	mov	sp, r7
 800f586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58a:	4770      	bx	lr

0800f58c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f58c:	b480      	push	{r7}
 800f58e:	b083      	sub	sp, #12
 800f590:	af00      	add	r7, sp, #0
 800f592:	4603      	mov	r3, r0
 800f594:	6039      	str	r1, [r7, #0]
 800f596:	71fb      	strb	r3, [r7, #7]
 800f598:	4613      	mov	r3, r2
 800f59a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f59c:	79fb      	ldrb	r3, [r7, #7]
 800f59e:	2b23      	cmp	r3, #35	; 0x23
 800f5a0:	d84a      	bhi.n	800f638 <CDC_Control_FS+0xac>
 800f5a2:	a201      	add	r2, pc, #4	; (adr r2, 800f5a8 <CDC_Control_FS+0x1c>)
 800f5a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5a8:	0800f639 	.word	0x0800f639
 800f5ac:	0800f639 	.word	0x0800f639
 800f5b0:	0800f639 	.word	0x0800f639
 800f5b4:	0800f639 	.word	0x0800f639
 800f5b8:	0800f639 	.word	0x0800f639
 800f5bc:	0800f639 	.word	0x0800f639
 800f5c0:	0800f639 	.word	0x0800f639
 800f5c4:	0800f639 	.word	0x0800f639
 800f5c8:	0800f639 	.word	0x0800f639
 800f5cc:	0800f639 	.word	0x0800f639
 800f5d0:	0800f639 	.word	0x0800f639
 800f5d4:	0800f639 	.word	0x0800f639
 800f5d8:	0800f639 	.word	0x0800f639
 800f5dc:	0800f639 	.word	0x0800f639
 800f5e0:	0800f639 	.word	0x0800f639
 800f5e4:	0800f639 	.word	0x0800f639
 800f5e8:	0800f639 	.word	0x0800f639
 800f5ec:	0800f639 	.word	0x0800f639
 800f5f0:	0800f639 	.word	0x0800f639
 800f5f4:	0800f639 	.word	0x0800f639
 800f5f8:	0800f639 	.word	0x0800f639
 800f5fc:	0800f639 	.word	0x0800f639
 800f600:	0800f639 	.word	0x0800f639
 800f604:	0800f639 	.word	0x0800f639
 800f608:	0800f639 	.word	0x0800f639
 800f60c:	0800f639 	.word	0x0800f639
 800f610:	0800f639 	.word	0x0800f639
 800f614:	0800f639 	.word	0x0800f639
 800f618:	0800f639 	.word	0x0800f639
 800f61c:	0800f639 	.word	0x0800f639
 800f620:	0800f639 	.word	0x0800f639
 800f624:	0800f639 	.word	0x0800f639
 800f628:	0800f639 	.word	0x0800f639
 800f62c:	0800f639 	.word	0x0800f639
 800f630:	0800f639 	.word	0x0800f639
 800f634:	0800f639 	.word	0x0800f639
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f638:	bf00      	nop
  }

  return (USBD_OK);
 800f63a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f63c:	4618      	mov	r0, r3
 800f63e:	370c      	adds	r7, #12
 800f640:	46bd      	mov	sp, r7
 800f642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f646:	4770      	bx	lr

0800f648 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b082      	sub	sp, #8
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
 800f650:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f652:	6879      	ldr	r1, [r7, #4]
 800f654:	4805      	ldr	r0, [pc, #20]	; (800f66c <CDC_Receive_FS+0x24>)
 800f656:	f7fe fe3e 	bl	800e2d6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f65a:	4804      	ldr	r0, [pc, #16]	; (800f66c <CDC_Receive_FS+0x24>)
 800f65c:	f7fe fe4f 	bl	800e2fe <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f660:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f662:	4618      	mov	r0, r3
 800f664:	3708      	adds	r7, #8
 800f666:	46bd      	mov	sp, r7
 800f668:	bd80      	pop	{r7, pc}
 800f66a:	bf00      	nop
 800f66c:	24000758 	.word	0x24000758

0800f670 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f670:	b480      	push	{r7}
 800f672:	b083      	sub	sp, #12
 800f674:	af00      	add	r7, sp, #0
 800f676:	4603      	mov	r3, r0
 800f678:	6039      	str	r1, [r7, #0]
 800f67a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f67c:	683b      	ldr	r3, [r7, #0]
 800f67e:	2212      	movs	r2, #18
 800f680:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f682:	4b03      	ldr	r3, [pc, #12]	; (800f690 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f684:	4618      	mov	r0, r3
 800f686:	370c      	adds	r7, #12
 800f688:	46bd      	mov	sp, r7
 800f68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68e:	4770      	bx	lr
 800f690:	2400014c 	.word	0x2400014c

0800f694 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f694:	b480      	push	{r7}
 800f696:	b083      	sub	sp, #12
 800f698:	af00      	add	r7, sp, #0
 800f69a:	4603      	mov	r3, r0
 800f69c:	6039      	str	r1, [r7, #0]
 800f69e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f6a0:	683b      	ldr	r3, [r7, #0]
 800f6a2:	2204      	movs	r2, #4
 800f6a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f6a6:	4b03      	ldr	r3, [pc, #12]	; (800f6b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	370c      	adds	r7, #12
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b2:	4770      	bx	lr
 800f6b4:	24000160 	.word	0x24000160

0800f6b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b082      	sub	sp, #8
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	4603      	mov	r3, r0
 800f6c0:	6039      	str	r1, [r7, #0]
 800f6c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f6c4:	79fb      	ldrb	r3, [r7, #7]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d105      	bne.n	800f6d6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f6ca:	683a      	ldr	r2, [r7, #0]
 800f6cc:	4907      	ldr	r1, [pc, #28]	; (800f6ec <USBD_FS_ProductStrDescriptor+0x34>)
 800f6ce:	4808      	ldr	r0, [pc, #32]	; (800f6f0 <USBD_FS_ProductStrDescriptor+0x38>)
 800f6d0:	f7ff fe30 	bl	800f334 <USBD_GetString>
 800f6d4:	e004      	b.n	800f6e0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f6d6:	683a      	ldr	r2, [r7, #0]
 800f6d8:	4904      	ldr	r1, [pc, #16]	; (800f6ec <USBD_FS_ProductStrDescriptor+0x34>)
 800f6da:	4805      	ldr	r0, [pc, #20]	; (800f6f0 <USBD_FS_ProductStrDescriptor+0x38>)
 800f6dc:	f7ff fe2a 	bl	800f334 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f6e0:	4b02      	ldr	r3, [pc, #8]	; (800f6ec <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	3708      	adds	r7, #8
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	bd80      	pop	{r7, pc}
 800f6ea:	bf00      	nop
 800f6ec:	24001a1c 	.word	0x24001a1c
 800f6f0:	080100cc 	.word	0x080100cc

0800f6f4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b082      	sub	sp, #8
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	6039      	str	r1, [r7, #0]
 800f6fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f700:	683a      	ldr	r2, [r7, #0]
 800f702:	4904      	ldr	r1, [pc, #16]	; (800f714 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f704:	4804      	ldr	r0, [pc, #16]	; (800f718 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f706:	f7ff fe15 	bl	800f334 <USBD_GetString>
  return USBD_StrDesc;
 800f70a:	4b02      	ldr	r3, [pc, #8]	; (800f714 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f70c:	4618      	mov	r0, r3
 800f70e:	3708      	adds	r7, #8
 800f710:	46bd      	mov	sp, r7
 800f712:	bd80      	pop	{r7, pc}
 800f714:	24001a1c 	.word	0x24001a1c
 800f718:	080100e4 	.word	0x080100e4

0800f71c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b082      	sub	sp, #8
 800f720:	af00      	add	r7, sp, #0
 800f722:	4603      	mov	r3, r0
 800f724:	6039      	str	r1, [r7, #0]
 800f726:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f728:	683b      	ldr	r3, [r7, #0]
 800f72a:	221a      	movs	r2, #26
 800f72c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f72e:	f000 f843 	bl	800f7b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f732:	4b02      	ldr	r3, [pc, #8]	; (800f73c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f734:	4618      	mov	r0, r3
 800f736:	3708      	adds	r7, #8
 800f738:	46bd      	mov	sp, r7
 800f73a:	bd80      	pop	{r7, pc}
 800f73c:	24000164 	.word	0x24000164

0800f740 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b082      	sub	sp, #8
 800f744:	af00      	add	r7, sp, #0
 800f746:	4603      	mov	r3, r0
 800f748:	6039      	str	r1, [r7, #0]
 800f74a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f74c:	79fb      	ldrb	r3, [r7, #7]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d105      	bne.n	800f75e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f752:	683a      	ldr	r2, [r7, #0]
 800f754:	4907      	ldr	r1, [pc, #28]	; (800f774 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f756:	4808      	ldr	r0, [pc, #32]	; (800f778 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f758:	f7ff fdec 	bl	800f334 <USBD_GetString>
 800f75c:	e004      	b.n	800f768 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f75e:	683a      	ldr	r2, [r7, #0]
 800f760:	4904      	ldr	r1, [pc, #16]	; (800f774 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f762:	4805      	ldr	r0, [pc, #20]	; (800f778 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f764:	f7ff fde6 	bl	800f334 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f768:	4b02      	ldr	r3, [pc, #8]	; (800f774 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f76a:	4618      	mov	r0, r3
 800f76c:	3708      	adds	r7, #8
 800f76e:	46bd      	mov	sp, r7
 800f770:	bd80      	pop	{r7, pc}
 800f772:	bf00      	nop
 800f774:	24001a1c 	.word	0x24001a1c
 800f778:	080100f8 	.word	0x080100f8

0800f77c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b082      	sub	sp, #8
 800f780:	af00      	add	r7, sp, #0
 800f782:	4603      	mov	r3, r0
 800f784:	6039      	str	r1, [r7, #0]
 800f786:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f788:	79fb      	ldrb	r3, [r7, #7]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d105      	bne.n	800f79a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f78e:	683a      	ldr	r2, [r7, #0]
 800f790:	4907      	ldr	r1, [pc, #28]	; (800f7b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f792:	4808      	ldr	r0, [pc, #32]	; (800f7b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f794:	f7ff fdce 	bl	800f334 <USBD_GetString>
 800f798:	e004      	b.n	800f7a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f79a:	683a      	ldr	r2, [r7, #0]
 800f79c:	4904      	ldr	r1, [pc, #16]	; (800f7b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f79e:	4805      	ldr	r0, [pc, #20]	; (800f7b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f7a0:	f7ff fdc8 	bl	800f334 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f7a4:	4b02      	ldr	r3, [pc, #8]	; (800f7b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	3708      	adds	r7, #8
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	bd80      	pop	{r7, pc}
 800f7ae:	bf00      	nop
 800f7b0:	24001a1c 	.word	0x24001a1c
 800f7b4:	08010104 	.word	0x08010104

0800f7b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b084      	sub	sp, #16
 800f7bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f7be:	4b0f      	ldr	r3, [pc, #60]	; (800f7fc <Get_SerialNum+0x44>)
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f7c4:	4b0e      	ldr	r3, [pc, #56]	; (800f800 <Get_SerialNum+0x48>)
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f7ca:	4b0e      	ldr	r3, [pc, #56]	; (800f804 <Get_SerialNum+0x4c>)
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f7d0:	68fa      	ldr	r2, [r7, #12]
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	4413      	add	r3, r2
 800f7d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d009      	beq.n	800f7f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f7de:	2208      	movs	r2, #8
 800f7e0:	4909      	ldr	r1, [pc, #36]	; (800f808 <Get_SerialNum+0x50>)
 800f7e2:	68f8      	ldr	r0, [r7, #12]
 800f7e4:	f000 f814 	bl	800f810 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f7e8:	2204      	movs	r2, #4
 800f7ea:	4908      	ldr	r1, [pc, #32]	; (800f80c <Get_SerialNum+0x54>)
 800f7ec:	68b8      	ldr	r0, [r7, #8]
 800f7ee:	f000 f80f 	bl	800f810 <IntToUnicode>
  }
}
 800f7f2:	bf00      	nop
 800f7f4:	3710      	adds	r7, #16
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}
 800f7fa:	bf00      	nop
 800f7fc:	1ff1e800 	.word	0x1ff1e800
 800f800:	1ff1e804 	.word	0x1ff1e804
 800f804:	1ff1e808 	.word	0x1ff1e808
 800f808:	24000166 	.word	0x24000166
 800f80c:	24000176 	.word	0x24000176

0800f810 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f810:	b480      	push	{r7}
 800f812:	b087      	sub	sp, #28
 800f814:	af00      	add	r7, sp, #0
 800f816:	60f8      	str	r0, [r7, #12]
 800f818:	60b9      	str	r1, [r7, #8]
 800f81a:	4613      	mov	r3, r2
 800f81c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f81e:	2300      	movs	r3, #0
 800f820:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f822:	2300      	movs	r3, #0
 800f824:	75fb      	strb	r3, [r7, #23]
 800f826:	e027      	b.n	800f878 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	0f1b      	lsrs	r3, r3, #28
 800f82c:	2b09      	cmp	r3, #9
 800f82e:	d80b      	bhi.n	800f848 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	0f1b      	lsrs	r3, r3, #28
 800f834:	b2da      	uxtb	r2, r3
 800f836:	7dfb      	ldrb	r3, [r7, #23]
 800f838:	005b      	lsls	r3, r3, #1
 800f83a:	4619      	mov	r1, r3
 800f83c:	68bb      	ldr	r3, [r7, #8]
 800f83e:	440b      	add	r3, r1
 800f840:	3230      	adds	r2, #48	; 0x30
 800f842:	b2d2      	uxtb	r2, r2
 800f844:	701a      	strb	r2, [r3, #0]
 800f846:	e00a      	b.n	800f85e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	0f1b      	lsrs	r3, r3, #28
 800f84c:	b2da      	uxtb	r2, r3
 800f84e:	7dfb      	ldrb	r3, [r7, #23]
 800f850:	005b      	lsls	r3, r3, #1
 800f852:	4619      	mov	r1, r3
 800f854:	68bb      	ldr	r3, [r7, #8]
 800f856:	440b      	add	r3, r1
 800f858:	3237      	adds	r2, #55	; 0x37
 800f85a:	b2d2      	uxtb	r2, r2
 800f85c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	011b      	lsls	r3, r3, #4
 800f862:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f864:	7dfb      	ldrb	r3, [r7, #23]
 800f866:	005b      	lsls	r3, r3, #1
 800f868:	3301      	adds	r3, #1
 800f86a:	68ba      	ldr	r2, [r7, #8]
 800f86c:	4413      	add	r3, r2
 800f86e:	2200      	movs	r2, #0
 800f870:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f872:	7dfb      	ldrb	r3, [r7, #23]
 800f874:	3301      	adds	r3, #1
 800f876:	75fb      	strb	r3, [r7, #23]
 800f878:	7dfa      	ldrb	r2, [r7, #23]
 800f87a:	79fb      	ldrb	r3, [r7, #7]
 800f87c:	429a      	cmp	r2, r3
 800f87e:	d3d3      	bcc.n	800f828 <IntToUnicode+0x18>
  }
}
 800f880:	bf00      	nop
 800f882:	371c      	adds	r7, #28
 800f884:	46bd      	mov	sp, r7
 800f886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88a:	4770      	bx	lr

0800f88c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b08a      	sub	sp, #40	; 0x28
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f894:	f107 0314 	add.w	r3, r7, #20
 800f898:	2200      	movs	r2, #0
 800f89a:	601a      	str	r2, [r3, #0]
 800f89c:	605a      	str	r2, [r3, #4]
 800f89e:	609a      	str	r2, [r3, #8]
 800f8a0:	60da      	str	r2, [r3, #12]
 800f8a2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	4a25      	ldr	r2, [pc, #148]	; (800f940 <HAL_PCD_MspInit+0xb4>)
 800f8aa:	4293      	cmp	r3, r2
 800f8ac:	d143      	bne.n	800f936 <HAL_PCD_MspInit+0xaa>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f8ae:	4b25      	ldr	r3, [pc, #148]	; (800f944 <HAL_PCD_MspInit+0xb8>)
 800f8b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f8b4:	4a23      	ldr	r2, [pc, #140]	; (800f944 <HAL_PCD_MspInit+0xb8>)
 800f8b6:	f043 0301 	orr.w	r3, r3, #1
 800f8ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f8be:	4b21      	ldr	r3, [pc, #132]	; (800f944 <HAL_PCD_MspInit+0xb8>)
 800f8c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f8c4:	f003 0301 	and.w	r3, r3, #1
 800f8c8:	613b      	str	r3, [r7, #16]
 800f8ca:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800f8cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f8d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f8da:	f107 0314 	add.w	r3, r7, #20
 800f8de:	4619      	mov	r1, r3
 800f8e0:	4819      	ldr	r0, [pc, #100]	; (800f948 <HAL_PCD_MspInit+0xbc>)
 800f8e2:	f7f5 f86d 	bl	80049c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f8e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f8ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f8ec:	2302      	movs	r3, #2
 800f8ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800f8f8:	230a      	movs	r3, #10
 800f8fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f8fc:	f107 0314 	add.w	r3, r7, #20
 800f900:	4619      	mov	r1, r3
 800f902:	4811      	ldr	r0, [pc, #68]	; (800f948 <HAL_PCD_MspInit+0xbc>)
 800f904:	f7f5 f85c 	bl	80049c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f908:	4b0e      	ldr	r3, [pc, #56]	; (800f944 <HAL_PCD_MspInit+0xb8>)
 800f90a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f90e:	4a0d      	ldr	r2, [pc, #52]	; (800f944 <HAL_PCD_MspInit+0xb8>)
 800f910:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f914:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f918:	4b0a      	ldr	r3, [pc, #40]	; (800f944 <HAL_PCD_MspInit+0xb8>)
 800f91a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f91e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f922:	60fb      	str	r3, [r7, #12]
 800f924:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f926:	2200      	movs	r2, #0
 800f928:	2100      	movs	r1, #0
 800f92a:	2065      	movs	r0, #101	; 0x65
 800f92c:	f7f3 fb87 	bl	800303e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f930:	2065      	movs	r0, #101	; 0x65
 800f932:	f7f3 fb9e 	bl	8003072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f936:	bf00      	nop
 800f938:	3728      	adds	r7, #40	; 0x28
 800f93a:	46bd      	mov	sp, r7
 800f93c:	bd80      	pop	{r7, pc}
 800f93e:	bf00      	nop
 800f940:	40080000 	.word	0x40080000
 800f944:	58024400 	.word	0x58024400
 800f948:	58020000 	.word	0x58020000

0800f94c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b082      	sub	sp, #8
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800f960:	4619      	mov	r1, r3
 800f962:	4610      	mov	r0, r2
 800f964:	f7fe fd83 	bl	800e46e <USBD_LL_SetupStage>
}
 800f968:	bf00      	nop
 800f96a:	3708      	adds	r7, #8
 800f96c:	46bd      	mov	sp, r7
 800f96e:	bd80      	pop	{r7, pc}

0800f970 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b082      	sub	sp, #8
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
 800f978:	460b      	mov	r3, r1
 800f97a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800f982:	78fa      	ldrb	r2, [r7, #3]
 800f984:	6879      	ldr	r1, [r7, #4]
 800f986:	4613      	mov	r3, r2
 800f988:	00db      	lsls	r3, r3, #3
 800f98a:	1a9b      	subs	r3, r3, r2
 800f98c:	009b      	lsls	r3, r3, #2
 800f98e:	440b      	add	r3, r1
 800f990:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f994:	681a      	ldr	r2, [r3, #0]
 800f996:	78fb      	ldrb	r3, [r7, #3]
 800f998:	4619      	mov	r1, r3
 800f99a:	f7fe fdb3 	bl	800e504 <USBD_LL_DataOutStage>
}
 800f99e:	bf00      	nop
 800f9a0:	3708      	adds	r7, #8
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bd80      	pop	{r7, pc}

0800f9a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9a6:	b580      	push	{r7, lr}
 800f9a8:	b082      	sub	sp, #8
 800f9aa:	af00      	add	r7, sp, #0
 800f9ac:	6078      	str	r0, [r7, #4]
 800f9ae:	460b      	mov	r3, r1
 800f9b0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800f9b8:	78fa      	ldrb	r2, [r7, #3]
 800f9ba:	6879      	ldr	r1, [r7, #4]
 800f9bc:	4613      	mov	r3, r2
 800f9be:	00db      	lsls	r3, r3, #3
 800f9c0:	1a9b      	subs	r3, r3, r2
 800f9c2:	009b      	lsls	r3, r3, #2
 800f9c4:	440b      	add	r3, r1
 800f9c6:	3348      	adds	r3, #72	; 0x48
 800f9c8:	681a      	ldr	r2, [r3, #0]
 800f9ca:	78fb      	ldrb	r3, [r7, #3]
 800f9cc:	4619      	mov	r1, r3
 800f9ce:	f7fe fe0a 	bl	800e5e6 <USBD_LL_DataInStage>
}
 800f9d2:	bf00      	nop
 800f9d4:	3708      	adds	r7, #8
 800f9d6:	46bd      	mov	sp, r7
 800f9d8:	bd80      	pop	{r7, pc}

0800f9da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9da:	b580      	push	{r7, lr}
 800f9dc:	b082      	sub	sp, #8
 800f9de:	af00      	add	r7, sp, #0
 800f9e0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	f7fe ff1d 	bl	800e828 <USBD_LL_SOF>
}
 800f9ee:	bf00      	nop
 800f9f0:	3708      	adds	r7, #8
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	bd80      	pop	{r7, pc}

0800f9f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800f9f6:	b580      	push	{r7, lr}
 800f9f8:	b084      	sub	sp, #16
 800f9fa:	af00      	add	r7, sp, #0
 800f9fc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f9fe:	2301      	movs	r3, #1
 800fa00:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	68db      	ldr	r3, [r3, #12]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d102      	bne.n	800fa10 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	73fb      	strb	r3, [r7, #15]
 800fa0e:	e008      	b.n	800fa22 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	68db      	ldr	r3, [r3, #12]
 800fa14:	2b02      	cmp	r3, #2
 800fa16:	d102      	bne.n	800fa1e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800fa18:	2301      	movs	r3, #1
 800fa1a:	73fb      	strb	r3, [r7, #15]
 800fa1c:	e001      	b.n	800fa22 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800fa1e:	f7f1 fcb1 	bl	8001384 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fa28:	7bfa      	ldrb	r2, [r7, #15]
 800fa2a:	4611      	mov	r1, r2
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	f7fe fec0 	bl	800e7b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f7fe fe79 	bl	800e730 <USBD_LL_Reset>
}
 800fa3e:	bf00      	nop
 800fa40:	3710      	adds	r7, #16
 800fa42:	46bd      	mov	sp, r7
 800fa44:	bd80      	pop	{r7, pc}
	...

0800fa48 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b082      	sub	sp, #8
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fa56:	4618      	mov	r0, r3
 800fa58:	f7fe febb 	bl	800e7d2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	687a      	ldr	r2, [r7, #4]
 800fa68:	6812      	ldr	r2, [r2, #0]
 800fa6a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fa6e:	f043 0301 	orr.w	r3, r3, #1
 800fa72:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	6a1b      	ldr	r3, [r3, #32]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d005      	beq.n	800fa88 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fa7c:	4b04      	ldr	r3, [pc, #16]	; (800fa90 <HAL_PCD_SuspendCallback+0x48>)
 800fa7e:	691b      	ldr	r3, [r3, #16]
 800fa80:	4a03      	ldr	r2, [pc, #12]	; (800fa90 <HAL_PCD_SuspendCallback+0x48>)
 800fa82:	f043 0306 	orr.w	r3, r3, #6
 800fa86:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fa88:	bf00      	nop
 800fa8a:	3708      	adds	r7, #8
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	bd80      	pop	{r7, pc}
 800fa90:	e000ed00 	.word	0xe000ed00

0800fa94 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b082      	sub	sp, #8
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800faa2:	4618      	mov	r0, r3
 800faa4:	f7fe feaa 	bl	800e7fc <USBD_LL_Resume>
}
 800faa8:	bf00      	nop
 800faaa:	3708      	adds	r7, #8
 800faac:	46bd      	mov	sp, r7
 800faae:	bd80      	pop	{r7, pc}

0800fab0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	b082      	sub	sp, #8
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
 800fab8:	460b      	mov	r3, r1
 800faba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fac2:	78fa      	ldrb	r2, [r7, #3]
 800fac4:	4611      	mov	r1, r2
 800fac6:	4618      	mov	r0, r3
 800fac8:	f7fe fed5 	bl	800e876 <USBD_LL_IsoOUTIncomplete>
}
 800facc:	bf00      	nop
 800face:	3708      	adds	r7, #8
 800fad0:	46bd      	mov	sp, r7
 800fad2:	bd80      	pop	{r7, pc}

0800fad4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b082      	sub	sp, #8
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
 800fadc:	460b      	mov	r3, r1
 800fade:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fae6:	78fa      	ldrb	r2, [r7, #3]
 800fae8:	4611      	mov	r1, r2
 800faea:	4618      	mov	r0, r3
 800faec:	f7fe feb6 	bl	800e85c <USBD_LL_IsoINIncomplete>
}
 800faf0:	bf00      	nop
 800faf2:	3708      	adds	r7, #8
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd80      	pop	{r7, pc}

0800faf8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b082      	sub	sp, #8
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fb06:	4618      	mov	r0, r3
 800fb08:	f7fe fec2 	bl	800e890 <USBD_LL_DevConnected>
}
 800fb0c:	bf00      	nop
 800fb0e:	3708      	adds	r7, #8
 800fb10:	46bd      	mov	sp, r7
 800fb12:	bd80      	pop	{r7, pc}

0800fb14 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b082      	sub	sp, #8
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fb22:	4618      	mov	r0, r3
 800fb24:	f7fe febf 	bl	800e8a6 <USBD_LL_DevDisconnected>
}
 800fb28:	bf00      	nop
 800fb2a:	3708      	adds	r7, #8
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	bd80      	pop	{r7, pc}

0800fb30 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b082      	sub	sp, #8
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	781b      	ldrb	r3, [r3, #0]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d13e      	bne.n	800fbbe <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800fb40:	4a21      	ldr	r2, [pc, #132]	; (800fbc8 <USBD_LL_Init+0x98>)
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	4a1f      	ldr	r2, [pc, #124]	; (800fbc8 <USBD_LL_Init+0x98>)
 800fb4c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fb50:	4b1d      	ldr	r3, [pc, #116]	; (800fbc8 <USBD_LL_Init+0x98>)
 800fb52:	4a1e      	ldr	r2, [pc, #120]	; (800fbcc <USBD_LL_Init+0x9c>)
 800fb54:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800fb56:	4b1c      	ldr	r3, [pc, #112]	; (800fbc8 <USBD_LL_Init+0x98>)
 800fb58:	2209      	movs	r2, #9
 800fb5a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800fb5c:	4b1a      	ldr	r3, [pc, #104]	; (800fbc8 <USBD_LL_Init+0x98>)
 800fb5e:	2202      	movs	r2, #2
 800fb60:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fb62:	4b19      	ldr	r3, [pc, #100]	; (800fbc8 <USBD_LL_Init+0x98>)
 800fb64:	2200      	movs	r2, #0
 800fb66:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fb68:	4b17      	ldr	r3, [pc, #92]	; (800fbc8 <USBD_LL_Init+0x98>)
 800fb6a:	2202      	movs	r2, #2
 800fb6c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fb6e:	4b16      	ldr	r3, [pc, #88]	; (800fbc8 <USBD_LL_Init+0x98>)
 800fb70:	2200      	movs	r2, #0
 800fb72:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800fb74:	4b14      	ldr	r3, [pc, #80]	; (800fbc8 <USBD_LL_Init+0x98>)
 800fb76:	2200      	movs	r2, #0
 800fb78:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fb7a:	4b13      	ldr	r3, [pc, #76]	; (800fbc8 <USBD_LL_Init+0x98>)
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800fb80:	4b11      	ldr	r3, [pc, #68]	; (800fbc8 <USBD_LL_Init+0x98>)
 800fb82:	2200      	movs	r2, #0
 800fb84:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800fb86:	4b10      	ldr	r3, [pc, #64]	; (800fbc8 <USBD_LL_Init+0x98>)
 800fb88:	2201      	movs	r2, #1
 800fb8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800fb8c:	4b0e      	ldr	r3, [pc, #56]	; (800fbc8 <USBD_LL_Init+0x98>)
 800fb8e:	2200      	movs	r2, #0
 800fb90:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800fb92:	480d      	ldr	r0, [pc, #52]	; (800fbc8 <USBD_LL_Init+0x98>)
 800fb94:	f7f5 fa05 	bl	8004fa2 <HAL_PCD_Init>
 800fb98:	4603      	mov	r3, r0
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d001      	beq.n	800fba2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800fb9e:	f7f1 fbf1 	bl	8001384 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fba2:	2180      	movs	r1, #128	; 0x80
 800fba4:	4808      	ldr	r0, [pc, #32]	; (800fbc8 <USBD_LL_Init+0x98>)
 800fba6:	f7f6 fb96 	bl	80062d6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fbaa:	2240      	movs	r2, #64	; 0x40
 800fbac:	2100      	movs	r1, #0
 800fbae:	4806      	ldr	r0, [pc, #24]	; (800fbc8 <USBD_LL_Init+0x98>)
 800fbb0:	f7f6 fb4a 	bl	8006248 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800fbb4:	2280      	movs	r2, #128	; 0x80
 800fbb6:	2101      	movs	r1, #1
 800fbb8:	4803      	ldr	r0, [pc, #12]	; (800fbc8 <USBD_LL_Init+0x98>)
 800fbba:	f7f6 fb45 	bl	8006248 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800fbbe:	2300      	movs	r3, #0
}
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	3708      	adds	r7, #8
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	bd80      	pop	{r7, pc}
 800fbc8:	24001a5c 	.word	0x24001a5c
 800fbcc:	40080000 	.word	0x40080000

0800fbd0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b084      	sub	sp, #16
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbd8:	2300      	movs	r3, #0
 800fbda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fbdc:	2300      	movs	r3, #0
 800fbde:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f7f5 faff 	bl	80051ea <HAL_PCD_Start>
 800fbec:	4603      	mov	r3, r0
 800fbee:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800fbf0:	7bfb      	ldrb	r3, [r7, #15]
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	f000 f92e 	bl	800fe54 <USBD_Get_USB_Status>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800fbfc:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbfe:	4618      	mov	r0, r3
 800fc00:	3710      	adds	r7, #16
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd80      	pop	{r7, pc}

0800fc06 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fc06:	b580      	push	{r7, lr}
 800fc08:	b084      	sub	sp, #16
 800fc0a:	af00      	add	r7, sp, #0
 800fc0c:	6078      	str	r0, [r7, #4]
 800fc0e:	4608      	mov	r0, r1
 800fc10:	4611      	mov	r1, r2
 800fc12:	461a      	mov	r2, r3
 800fc14:	4603      	mov	r3, r0
 800fc16:	70fb      	strb	r3, [r7, #3]
 800fc18:	460b      	mov	r3, r1
 800fc1a:	70bb      	strb	r3, [r7, #2]
 800fc1c:	4613      	mov	r3, r2
 800fc1e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc20:	2300      	movs	r3, #0
 800fc22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc24:	2300      	movs	r3, #0
 800fc26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800fc2e:	78bb      	ldrb	r3, [r7, #2]
 800fc30:	883a      	ldrh	r2, [r7, #0]
 800fc32:	78f9      	ldrb	r1, [r7, #3]
 800fc34:	f7f5 ff10 	bl	8005a58 <HAL_PCD_EP_Open>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc3c:	7bfb      	ldrb	r3, [r7, #15]
 800fc3e:	4618      	mov	r0, r3
 800fc40:	f000 f908 	bl	800fe54 <USBD_Get_USB_Status>
 800fc44:	4603      	mov	r3, r0
 800fc46:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800fc48:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	3710      	adds	r7, #16
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	bd80      	pop	{r7, pc}

0800fc52 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc52:	b580      	push	{r7, lr}
 800fc54:	b084      	sub	sp, #16
 800fc56:	af00      	add	r7, sp, #0
 800fc58:	6078      	str	r0, [r7, #4]
 800fc5a:	460b      	mov	r3, r1
 800fc5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc5e:	2300      	movs	r3, #0
 800fc60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc62:	2300      	movs	r3, #0
 800fc64:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fc6c:	78fa      	ldrb	r2, [r7, #3]
 800fc6e:	4611      	mov	r1, r2
 800fc70:	4618      	mov	r0, r3
 800fc72:	f7f5 ff59 	bl	8005b28 <HAL_PCD_EP_Close>
 800fc76:	4603      	mov	r3, r0
 800fc78:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800fc7a:	7bfb      	ldrb	r3, [r7, #15]
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	f000 f8e9 	bl	800fe54 <USBD_Get_USB_Status>
 800fc82:	4603      	mov	r3, r0
 800fc84:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800fc86:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc88:	4618      	mov	r0, r3
 800fc8a:	3710      	adds	r7, #16
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	bd80      	pop	{r7, pc}

0800fc90 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b084      	sub	sp, #16
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
 800fc98:	460b      	mov	r3, r1
 800fc9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fca0:	2300      	movs	r3, #0
 800fca2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fcaa:	78fa      	ldrb	r2, [r7, #3]
 800fcac:	4611      	mov	r1, r2
 800fcae:	4618      	mov	r0, r3
 800fcb0:	f7f6 f831 	bl	8005d16 <HAL_PCD_EP_SetStall>
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fcb8:	7bfb      	ldrb	r3, [r7, #15]
 800fcba:	4618      	mov	r0, r3
 800fcbc:	f000 f8ca 	bl	800fe54 <USBD_Get_USB_Status>
 800fcc0:	4603      	mov	r3, r0
 800fcc2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800fcc4:	7bbb      	ldrb	r3, [r7, #14]
}
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	3710      	adds	r7, #16
 800fcca:	46bd      	mov	sp, r7
 800fccc:	bd80      	pop	{r7, pc}

0800fcce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fcce:	b580      	push	{r7, lr}
 800fcd0:	b084      	sub	sp, #16
 800fcd2:	af00      	add	r7, sp, #0
 800fcd4:	6078      	str	r0, [r7, #4]
 800fcd6:	460b      	mov	r3, r1
 800fcd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fcda:	2300      	movs	r3, #0
 800fcdc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fcde:	2300      	movs	r3, #0
 800fce0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fce8:	78fa      	ldrb	r2, [r7, #3]
 800fcea:	4611      	mov	r1, r2
 800fcec:	4618      	mov	r0, r3
 800fcee:	f7f6 f876 	bl	8005dde <HAL_PCD_EP_ClrStall>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800fcf6:	7bfb      	ldrb	r3, [r7, #15]
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	f000 f8ab 	bl	800fe54 <USBD_Get_USB_Status>
 800fcfe:	4603      	mov	r3, r0
 800fd00:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800fd02:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd04:	4618      	mov	r0, r3
 800fd06:	3710      	adds	r7, #16
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	bd80      	pop	{r7, pc}

0800fd0c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fd0c:	b480      	push	{r7}
 800fd0e:	b085      	sub	sp, #20
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
 800fd14:	460b      	mov	r3, r1
 800fd16:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fd1e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800fd20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	da0b      	bge.n	800fd40 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800fd28:	78fb      	ldrb	r3, [r7, #3]
 800fd2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fd2e:	68f9      	ldr	r1, [r7, #12]
 800fd30:	4613      	mov	r3, r2
 800fd32:	00db      	lsls	r3, r3, #3
 800fd34:	1a9b      	subs	r3, r3, r2
 800fd36:	009b      	lsls	r3, r3, #2
 800fd38:	440b      	add	r3, r1
 800fd3a:	333e      	adds	r3, #62	; 0x3e
 800fd3c:	781b      	ldrb	r3, [r3, #0]
 800fd3e:	e00b      	b.n	800fd58 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800fd40:	78fb      	ldrb	r3, [r7, #3]
 800fd42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fd46:	68f9      	ldr	r1, [r7, #12]
 800fd48:	4613      	mov	r3, r2
 800fd4a:	00db      	lsls	r3, r3, #3
 800fd4c:	1a9b      	subs	r3, r3, r2
 800fd4e:	009b      	lsls	r3, r3, #2
 800fd50:	440b      	add	r3, r1
 800fd52:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fd56:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fd58:	4618      	mov	r0, r3
 800fd5a:	3714      	adds	r7, #20
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd62:	4770      	bx	lr

0800fd64 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b084      	sub	sp, #16
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
 800fd6c:	460b      	mov	r3, r1
 800fd6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd70:	2300      	movs	r3, #0
 800fd72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd74:	2300      	movs	r3, #0
 800fd76:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fd7e:	78fa      	ldrb	r2, [r7, #3]
 800fd80:	4611      	mov	r1, r2
 800fd82:	4618      	mov	r0, r3
 800fd84:	f7f5 fe43 	bl	8005a0e <HAL_PCD_SetAddress>
 800fd88:	4603      	mov	r3, r0
 800fd8a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd8c:	7bfb      	ldrb	r3, [r7, #15]
 800fd8e:	4618      	mov	r0, r3
 800fd90:	f000 f860 	bl	800fe54 <USBD_Get_USB_Status>
 800fd94:	4603      	mov	r3, r0
 800fd96:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800fd98:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	3710      	adds	r7, #16
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	bd80      	pop	{r7, pc}

0800fda2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800fda2:	b580      	push	{r7, lr}
 800fda4:	b086      	sub	sp, #24
 800fda6:	af00      	add	r7, sp, #0
 800fda8:	60f8      	str	r0, [r7, #12]
 800fdaa:	607a      	str	r2, [r7, #4]
 800fdac:	461a      	mov	r2, r3
 800fdae:	460b      	mov	r3, r1
 800fdb0:	72fb      	strb	r3, [r7, #11]
 800fdb2:	4613      	mov	r3, r2
 800fdb4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fdba:	2300      	movs	r3, #0
 800fdbc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800fdc4:	893b      	ldrh	r3, [r7, #8]
 800fdc6:	7af9      	ldrb	r1, [r7, #11]
 800fdc8:	687a      	ldr	r2, [r7, #4]
 800fdca:	f7f5 ff5a 	bl	8005c82 <HAL_PCD_EP_Transmit>
 800fdce:	4603      	mov	r3, r0
 800fdd0:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800fdd2:	7dfb      	ldrb	r3, [r7, #23]
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	f000 f83d 	bl	800fe54 <USBD_Get_USB_Status>
 800fdda:	4603      	mov	r3, r0
 800fddc:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800fdde:	7dbb      	ldrb	r3, [r7, #22]
}
 800fde0:	4618      	mov	r0, r3
 800fde2:	3718      	adds	r7, #24
 800fde4:	46bd      	mov	sp, r7
 800fde6:	bd80      	pop	{r7, pc}

0800fde8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b086      	sub	sp, #24
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	60f8      	str	r0, [r7, #12]
 800fdf0:	607a      	str	r2, [r7, #4]
 800fdf2:	461a      	mov	r2, r3
 800fdf4:	460b      	mov	r3, r1
 800fdf6:	72fb      	strb	r3, [r7, #11]
 800fdf8:	4613      	mov	r3, r2
 800fdfa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe00:	2300      	movs	r3, #0
 800fe02:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800fe0a:	893b      	ldrh	r3, [r7, #8]
 800fe0c:	7af9      	ldrb	r1, [r7, #11]
 800fe0e:	687a      	ldr	r2, [r7, #4]
 800fe10:	f7f5 fed4 	bl	8005bbc <HAL_PCD_EP_Receive>
 800fe14:	4603      	mov	r3, r0
 800fe16:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800fe18:	7dfb      	ldrb	r3, [r7, #23]
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	f000 f81a 	bl	800fe54 <USBD_Get_USB_Status>
 800fe20:	4603      	mov	r3, r0
 800fe22:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800fe24:	7dbb      	ldrb	r3, [r7, #22]
}
 800fe26:	4618      	mov	r0, r3
 800fe28:	3718      	adds	r7, #24
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	bd80      	pop	{r7, pc}

0800fe2e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe2e:	b580      	push	{r7, lr}
 800fe30:	b082      	sub	sp, #8
 800fe32:	af00      	add	r7, sp, #0
 800fe34:	6078      	str	r0, [r7, #4]
 800fe36:	460b      	mov	r3, r1
 800fe38:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fe40:	78fa      	ldrb	r2, [r7, #3]
 800fe42:	4611      	mov	r1, r2
 800fe44:	4618      	mov	r0, r3
 800fe46:	f7f5 ff04 	bl	8005c52 <HAL_PCD_EP_GetRxCount>
 800fe4a:	4603      	mov	r3, r0
}
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	3708      	adds	r7, #8
 800fe50:	46bd      	mov	sp, r7
 800fe52:	bd80      	pop	{r7, pc}

0800fe54 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fe54:	b480      	push	{r7}
 800fe56:	b085      	sub	sp, #20
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe5e:	2300      	movs	r3, #0
 800fe60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fe62:	79fb      	ldrb	r3, [r7, #7]
 800fe64:	2b03      	cmp	r3, #3
 800fe66:	d817      	bhi.n	800fe98 <USBD_Get_USB_Status+0x44>
 800fe68:	a201      	add	r2, pc, #4	; (adr r2, 800fe70 <USBD_Get_USB_Status+0x1c>)
 800fe6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe6e:	bf00      	nop
 800fe70:	0800fe81 	.word	0x0800fe81
 800fe74:	0800fe87 	.word	0x0800fe87
 800fe78:	0800fe8d 	.word	0x0800fe8d
 800fe7c:	0800fe93 	.word	0x0800fe93
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fe80:	2300      	movs	r3, #0
 800fe82:	73fb      	strb	r3, [r7, #15]
    break;
 800fe84:	e00b      	b.n	800fe9e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fe86:	2302      	movs	r3, #2
 800fe88:	73fb      	strb	r3, [r7, #15]
    break;
 800fe8a:	e008      	b.n	800fe9e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fe8c:	2301      	movs	r3, #1
 800fe8e:	73fb      	strb	r3, [r7, #15]
    break;
 800fe90:	e005      	b.n	800fe9e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fe92:	2302      	movs	r3, #2
 800fe94:	73fb      	strb	r3, [r7, #15]
    break;
 800fe96:	e002      	b.n	800fe9e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fe98:	2302      	movs	r3, #2
 800fe9a:	73fb      	strb	r3, [r7, #15]
    break;
 800fe9c:	bf00      	nop
  }
  return usb_status;
 800fe9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fea0:	4618      	mov	r0, r3
 800fea2:	3714      	adds	r7, #20
 800fea4:	46bd      	mov	sp, r7
 800fea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feaa:	4770      	bx	lr

0800feac <__errno>:
 800feac:	4b01      	ldr	r3, [pc, #4]	; (800feb4 <__errno+0x8>)
 800feae:	6818      	ldr	r0, [r3, #0]
 800feb0:	4770      	bx	lr
 800feb2:	bf00      	nop
 800feb4:	24000180 	.word	0x24000180

0800feb8 <__libc_init_array>:
 800feb8:	b570      	push	{r4, r5, r6, lr}
 800feba:	4e0d      	ldr	r6, [pc, #52]	; (800fef0 <__libc_init_array+0x38>)
 800febc:	4c0d      	ldr	r4, [pc, #52]	; (800fef4 <__libc_init_array+0x3c>)
 800febe:	1ba4      	subs	r4, r4, r6
 800fec0:	10a4      	asrs	r4, r4, #2
 800fec2:	2500      	movs	r5, #0
 800fec4:	42a5      	cmp	r5, r4
 800fec6:	d109      	bne.n	800fedc <__libc_init_array+0x24>
 800fec8:	4e0b      	ldr	r6, [pc, #44]	; (800fef8 <__libc_init_array+0x40>)
 800feca:	4c0c      	ldr	r4, [pc, #48]	; (800fefc <__libc_init_array+0x44>)
 800fecc:	f000 f8ea 	bl	80100a4 <_init>
 800fed0:	1ba4      	subs	r4, r4, r6
 800fed2:	10a4      	asrs	r4, r4, #2
 800fed4:	2500      	movs	r5, #0
 800fed6:	42a5      	cmp	r5, r4
 800fed8:	d105      	bne.n	800fee6 <__libc_init_array+0x2e>
 800feda:	bd70      	pop	{r4, r5, r6, pc}
 800fedc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fee0:	4798      	blx	r3
 800fee2:	3501      	adds	r5, #1
 800fee4:	e7ee      	b.n	800fec4 <__libc_init_array+0xc>
 800fee6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800feea:	4798      	blx	r3
 800feec:	3501      	adds	r5, #1
 800feee:	e7f2      	b.n	800fed6 <__libc_init_array+0x1e>
 800fef0:	08010134 	.word	0x08010134
 800fef4:	08010134 	.word	0x08010134
 800fef8:	08010134 	.word	0x08010134
 800fefc:	08010138 	.word	0x08010138

0800ff00 <malloc>:
 800ff00:	4b02      	ldr	r3, [pc, #8]	; (800ff0c <malloc+0xc>)
 800ff02:	4601      	mov	r1, r0
 800ff04:	6818      	ldr	r0, [r3, #0]
 800ff06:	f000 b861 	b.w	800ffcc <_malloc_r>
 800ff0a:	bf00      	nop
 800ff0c:	24000180 	.word	0x24000180

0800ff10 <free>:
 800ff10:	4b02      	ldr	r3, [pc, #8]	; (800ff1c <free+0xc>)
 800ff12:	4601      	mov	r1, r0
 800ff14:	6818      	ldr	r0, [r3, #0]
 800ff16:	f000 b80b 	b.w	800ff30 <_free_r>
 800ff1a:	bf00      	nop
 800ff1c:	24000180 	.word	0x24000180

0800ff20 <memset>:
 800ff20:	4402      	add	r2, r0
 800ff22:	4603      	mov	r3, r0
 800ff24:	4293      	cmp	r3, r2
 800ff26:	d100      	bne.n	800ff2a <memset+0xa>
 800ff28:	4770      	bx	lr
 800ff2a:	f803 1b01 	strb.w	r1, [r3], #1
 800ff2e:	e7f9      	b.n	800ff24 <memset+0x4>

0800ff30 <_free_r>:
 800ff30:	b538      	push	{r3, r4, r5, lr}
 800ff32:	4605      	mov	r5, r0
 800ff34:	2900      	cmp	r1, #0
 800ff36:	d045      	beq.n	800ffc4 <_free_r+0x94>
 800ff38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff3c:	1f0c      	subs	r4, r1, #4
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	bfb8      	it	lt
 800ff42:	18e4      	addlt	r4, r4, r3
 800ff44:	f000 f8ac 	bl	80100a0 <__malloc_lock>
 800ff48:	4a1f      	ldr	r2, [pc, #124]	; (800ffc8 <_free_r+0x98>)
 800ff4a:	6813      	ldr	r3, [r2, #0]
 800ff4c:	4610      	mov	r0, r2
 800ff4e:	b933      	cbnz	r3, 800ff5e <_free_r+0x2e>
 800ff50:	6063      	str	r3, [r4, #4]
 800ff52:	6014      	str	r4, [r2, #0]
 800ff54:	4628      	mov	r0, r5
 800ff56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff5a:	f000 b8a2 	b.w	80100a2 <__malloc_unlock>
 800ff5e:	42a3      	cmp	r3, r4
 800ff60:	d90c      	bls.n	800ff7c <_free_r+0x4c>
 800ff62:	6821      	ldr	r1, [r4, #0]
 800ff64:	1862      	adds	r2, r4, r1
 800ff66:	4293      	cmp	r3, r2
 800ff68:	bf04      	itt	eq
 800ff6a:	681a      	ldreq	r2, [r3, #0]
 800ff6c:	685b      	ldreq	r3, [r3, #4]
 800ff6e:	6063      	str	r3, [r4, #4]
 800ff70:	bf04      	itt	eq
 800ff72:	1852      	addeq	r2, r2, r1
 800ff74:	6022      	streq	r2, [r4, #0]
 800ff76:	6004      	str	r4, [r0, #0]
 800ff78:	e7ec      	b.n	800ff54 <_free_r+0x24>
 800ff7a:	4613      	mov	r3, r2
 800ff7c:	685a      	ldr	r2, [r3, #4]
 800ff7e:	b10a      	cbz	r2, 800ff84 <_free_r+0x54>
 800ff80:	42a2      	cmp	r2, r4
 800ff82:	d9fa      	bls.n	800ff7a <_free_r+0x4a>
 800ff84:	6819      	ldr	r1, [r3, #0]
 800ff86:	1858      	adds	r0, r3, r1
 800ff88:	42a0      	cmp	r0, r4
 800ff8a:	d10b      	bne.n	800ffa4 <_free_r+0x74>
 800ff8c:	6820      	ldr	r0, [r4, #0]
 800ff8e:	4401      	add	r1, r0
 800ff90:	1858      	adds	r0, r3, r1
 800ff92:	4282      	cmp	r2, r0
 800ff94:	6019      	str	r1, [r3, #0]
 800ff96:	d1dd      	bne.n	800ff54 <_free_r+0x24>
 800ff98:	6810      	ldr	r0, [r2, #0]
 800ff9a:	6852      	ldr	r2, [r2, #4]
 800ff9c:	605a      	str	r2, [r3, #4]
 800ff9e:	4401      	add	r1, r0
 800ffa0:	6019      	str	r1, [r3, #0]
 800ffa2:	e7d7      	b.n	800ff54 <_free_r+0x24>
 800ffa4:	d902      	bls.n	800ffac <_free_r+0x7c>
 800ffa6:	230c      	movs	r3, #12
 800ffa8:	602b      	str	r3, [r5, #0]
 800ffaa:	e7d3      	b.n	800ff54 <_free_r+0x24>
 800ffac:	6820      	ldr	r0, [r4, #0]
 800ffae:	1821      	adds	r1, r4, r0
 800ffb0:	428a      	cmp	r2, r1
 800ffb2:	bf04      	itt	eq
 800ffb4:	6811      	ldreq	r1, [r2, #0]
 800ffb6:	6852      	ldreq	r2, [r2, #4]
 800ffb8:	6062      	str	r2, [r4, #4]
 800ffba:	bf04      	itt	eq
 800ffbc:	1809      	addeq	r1, r1, r0
 800ffbe:	6021      	streq	r1, [r4, #0]
 800ffc0:	605c      	str	r4, [r3, #4]
 800ffc2:	e7c7      	b.n	800ff54 <_free_r+0x24>
 800ffc4:	bd38      	pop	{r3, r4, r5, pc}
 800ffc6:	bf00      	nop
 800ffc8:	2400020c 	.word	0x2400020c

0800ffcc <_malloc_r>:
 800ffcc:	b570      	push	{r4, r5, r6, lr}
 800ffce:	1ccd      	adds	r5, r1, #3
 800ffd0:	f025 0503 	bic.w	r5, r5, #3
 800ffd4:	3508      	adds	r5, #8
 800ffd6:	2d0c      	cmp	r5, #12
 800ffd8:	bf38      	it	cc
 800ffda:	250c      	movcc	r5, #12
 800ffdc:	2d00      	cmp	r5, #0
 800ffde:	4606      	mov	r6, r0
 800ffe0:	db01      	blt.n	800ffe6 <_malloc_r+0x1a>
 800ffe2:	42a9      	cmp	r1, r5
 800ffe4:	d903      	bls.n	800ffee <_malloc_r+0x22>
 800ffe6:	230c      	movs	r3, #12
 800ffe8:	6033      	str	r3, [r6, #0]
 800ffea:	2000      	movs	r0, #0
 800ffec:	bd70      	pop	{r4, r5, r6, pc}
 800ffee:	f000 f857 	bl	80100a0 <__malloc_lock>
 800fff2:	4a21      	ldr	r2, [pc, #132]	; (8010078 <_malloc_r+0xac>)
 800fff4:	6814      	ldr	r4, [r2, #0]
 800fff6:	4621      	mov	r1, r4
 800fff8:	b991      	cbnz	r1, 8010020 <_malloc_r+0x54>
 800fffa:	4c20      	ldr	r4, [pc, #128]	; (801007c <_malloc_r+0xb0>)
 800fffc:	6823      	ldr	r3, [r4, #0]
 800fffe:	b91b      	cbnz	r3, 8010008 <_malloc_r+0x3c>
 8010000:	4630      	mov	r0, r6
 8010002:	f000 f83d 	bl	8010080 <_sbrk_r>
 8010006:	6020      	str	r0, [r4, #0]
 8010008:	4629      	mov	r1, r5
 801000a:	4630      	mov	r0, r6
 801000c:	f000 f838 	bl	8010080 <_sbrk_r>
 8010010:	1c43      	adds	r3, r0, #1
 8010012:	d124      	bne.n	801005e <_malloc_r+0x92>
 8010014:	230c      	movs	r3, #12
 8010016:	6033      	str	r3, [r6, #0]
 8010018:	4630      	mov	r0, r6
 801001a:	f000 f842 	bl	80100a2 <__malloc_unlock>
 801001e:	e7e4      	b.n	800ffea <_malloc_r+0x1e>
 8010020:	680b      	ldr	r3, [r1, #0]
 8010022:	1b5b      	subs	r3, r3, r5
 8010024:	d418      	bmi.n	8010058 <_malloc_r+0x8c>
 8010026:	2b0b      	cmp	r3, #11
 8010028:	d90f      	bls.n	801004a <_malloc_r+0x7e>
 801002a:	600b      	str	r3, [r1, #0]
 801002c:	50cd      	str	r5, [r1, r3]
 801002e:	18cc      	adds	r4, r1, r3
 8010030:	4630      	mov	r0, r6
 8010032:	f000 f836 	bl	80100a2 <__malloc_unlock>
 8010036:	f104 000b 	add.w	r0, r4, #11
 801003a:	1d23      	adds	r3, r4, #4
 801003c:	f020 0007 	bic.w	r0, r0, #7
 8010040:	1ac3      	subs	r3, r0, r3
 8010042:	d0d3      	beq.n	800ffec <_malloc_r+0x20>
 8010044:	425a      	negs	r2, r3
 8010046:	50e2      	str	r2, [r4, r3]
 8010048:	e7d0      	b.n	800ffec <_malloc_r+0x20>
 801004a:	428c      	cmp	r4, r1
 801004c:	684b      	ldr	r3, [r1, #4]
 801004e:	bf16      	itet	ne
 8010050:	6063      	strne	r3, [r4, #4]
 8010052:	6013      	streq	r3, [r2, #0]
 8010054:	460c      	movne	r4, r1
 8010056:	e7eb      	b.n	8010030 <_malloc_r+0x64>
 8010058:	460c      	mov	r4, r1
 801005a:	6849      	ldr	r1, [r1, #4]
 801005c:	e7cc      	b.n	800fff8 <_malloc_r+0x2c>
 801005e:	1cc4      	adds	r4, r0, #3
 8010060:	f024 0403 	bic.w	r4, r4, #3
 8010064:	42a0      	cmp	r0, r4
 8010066:	d005      	beq.n	8010074 <_malloc_r+0xa8>
 8010068:	1a21      	subs	r1, r4, r0
 801006a:	4630      	mov	r0, r6
 801006c:	f000 f808 	bl	8010080 <_sbrk_r>
 8010070:	3001      	adds	r0, #1
 8010072:	d0cf      	beq.n	8010014 <_malloc_r+0x48>
 8010074:	6025      	str	r5, [r4, #0]
 8010076:	e7db      	b.n	8010030 <_malloc_r+0x64>
 8010078:	2400020c 	.word	0x2400020c
 801007c:	24000210 	.word	0x24000210

08010080 <_sbrk_r>:
 8010080:	b538      	push	{r3, r4, r5, lr}
 8010082:	4c06      	ldr	r4, [pc, #24]	; (801009c <_sbrk_r+0x1c>)
 8010084:	2300      	movs	r3, #0
 8010086:	4605      	mov	r5, r0
 8010088:	4608      	mov	r0, r1
 801008a:	6023      	str	r3, [r4, #0]
 801008c:	f7f1 fd46 	bl	8001b1c <_sbrk>
 8010090:	1c43      	adds	r3, r0, #1
 8010092:	d102      	bne.n	801009a <_sbrk_r+0x1a>
 8010094:	6823      	ldr	r3, [r4, #0]
 8010096:	b103      	cbz	r3, 801009a <_sbrk_r+0x1a>
 8010098:	602b      	str	r3, [r5, #0]
 801009a:	bd38      	pop	{r3, r4, r5, pc}
 801009c:	24001e64 	.word	0x24001e64

080100a0 <__malloc_lock>:
 80100a0:	4770      	bx	lr

080100a2 <__malloc_unlock>:
 80100a2:	4770      	bx	lr

080100a4 <_init>:
 80100a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100a6:	bf00      	nop
 80100a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100aa:	bc08      	pop	{r3}
 80100ac:	469e      	mov	lr, r3
 80100ae:	4770      	bx	lr

080100b0 <_fini>:
 80100b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100b2:	bf00      	nop
 80100b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100b6:	bc08      	pop	{r3}
 80100b8:	469e      	mov	lr, r3
 80100ba:	4770      	bx	lr
